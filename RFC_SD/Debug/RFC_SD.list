
RFC_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df7c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800e118  0800e118  0000f118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2f8  0800e2f8  00010130  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2f8  0800e2f8  0000f2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e300  0800e300  00010130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e300  0800e300  0000f300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e304  0800e304  0000f304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  0800e308  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d28  20000130  0800e438  00010130  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e58  0800e438  00010e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010130  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019784  00000000  00000000  00010160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047ea  00000000  00000000  000298e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  0002e0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000121b  00000000  00000000  0002f858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c603  00000000  00000000  00030a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023abf  00000000  00000000  0004d076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ef8d  00000000  00000000  00070b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fac2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064cc  00000000  00000000  0010fb08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00115fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800e0fc 	.word	0x0800e0fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	0800e0fc 	.word	0x0800e0fc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_ldivmod>:
 8000b40:	b97b      	cbnz	r3, 8000b62 <__aeabi_ldivmod+0x22>
 8000b42:	b972      	cbnz	r2, 8000b62 <__aeabi_ldivmod+0x22>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bfbe      	ittt	lt
 8000b48:	2000      	movlt	r0, #0
 8000b4a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b4e:	e006      	blt.n	8000b5e <__aeabi_ldivmod+0x1e>
 8000b50:	bf08      	it	eq
 8000b52:	2800      	cmpeq	r0, #0
 8000b54:	bf1c      	itt	ne
 8000b56:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b5a:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5e:	f000 b9b5 	b.w	8000ecc <__aeabi_idiv0>
 8000b62:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b66:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	db09      	blt.n	8000b82 <__aeabi_ldivmod+0x42>
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db1a      	blt.n	8000ba8 <__aeabi_ldivmod+0x68>
 8000b72:	f000 f84d 	bl	8000c10 <__udivmoddi4>
 8000b76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7e:	b004      	add	sp, #16
 8000b80:	4770      	bx	lr
 8000b82:	4240      	negs	r0, r0
 8000b84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db1b      	blt.n	8000bc4 <__aeabi_ldivmod+0x84>
 8000b8c:	f000 f840 	bl	8000c10 <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	4770      	bx	lr
 8000ba8:	4252      	negs	r2, r2
 8000baa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bae:	f000 f82f 	bl	8000c10 <__udivmoddi4>
 8000bb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bba:	b004      	add	sp, #16
 8000bbc:	4240      	negs	r0, r0
 8000bbe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc2:	4770      	bx	lr
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bca:	f000 f821 	bl	8000c10 <__udivmoddi4>
 8000bce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd6:	b004      	add	sp, #16
 8000bd8:	4252      	negs	r2, r2
 8000bda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b96a 	b.w	8000ecc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9d08      	ldr	r5, [sp, #32]
 8000c16:	460c      	mov	r4, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14e      	bne.n	8000cba <__udivmoddi4+0xaa>
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	458c      	cmp	ip, r1
 8000c20:	4686      	mov	lr, r0
 8000c22:	fab2 f282 	clz	r2, r2
 8000c26:	d962      	bls.n	8000cee <__udivmoddi4+0xde>
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0320 	rsb	r3, r2, #32
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	fa20 f303 	lsr.w	r3, r0, r3
 8000c34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c38:	4319      	orrs	r1, r3
 8000c3a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c42:	fa1f f68c 	uxth.w	r6, ip
 8000c46:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c4e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c56:	fb04 f106 	mul.w	r1, r4, r6
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x64>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c66:	f080 8112 	bcs.w	8000e8e <__udivmoddi4+0x27e>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 810f 	bls.w	8000e8e <__udivmoddi4+0x27e>
 8000c70:	3c02      	subs	r4, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1a59      	subs	r1, r3, r1
 8000c76:	fa1f f38e 	uxth.w	r3, lr
 8000c7a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c7e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c86:	fb00 f606 	mul.w	r6, r0, r6
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x94>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c96:	f080 80fc 	bcs.w	8000e92 <__udivmoddi4+0x282>
 8000c9a:	429e      	cmp	r6, r3
 8000c9c:	f240 80f9 	bls.w	8000e92 <__udivmoddi4+0x282>
 8000ca0:	4463      	add	r3, ip
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000caa:	2100      	movs	r1, #0
 8000cac:	b11d      	cbz	r5, 8000cb6 <__udivmoddi4+0xa6>
 8000cae:	40d3      	lsrs	r3, r2
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d905      	bls.n	8000cca <__udivmoddi4+0xba>
 8000cbe:	b10d      	cbz	r5, 8000cc4 <__udivmoddi4+0xb4>
 8000cc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e7f5      	b.n	8000cb6 <__udivmoddi4+0xa6>
 8000cca:	fab3 f183 	clz	r1, r3
 8000cce:	2900      	cmp	r1, #0
 8000cd0:	d146      	bne.n	8000d60 <__udivmoddi4+0x150>
 8000cd2:	42a3      	cmp	r3, r4
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xcc>
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	f0c0 80f0 	bcc.w	8000ebc <__udivmoddi4+0x2ac>
 8000cdc:	1a86      	subs	r6, r0, r2
 8000cde:	eb64 0303 	sbc.w	r3, r4, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	2d00      	cmp	r5, #0
 8000ce6:	d0e6      	beq.n	8000cb6 <__udivmoddi4+0xa6>
 8000ce8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cec:	e7e3      	b.n	8000cb6 <__udivmoddi4+0xa6>
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	f040 8090 	bne.w	8000e14 <__udivmoddi4+0x204>
 8000cf4:	eba1 040c 	sub.w	r4, r1, ip
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	2101      	movs	r1, #1
 8000d02:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d0a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb07 f006 	mul.w	r0, r7, r6
 8000d16:	4298      	cmp	r0, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x11c>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x11a>
 8000d24:	4298      	cmp	r0, r3
 8000d26:	f200 80cd 	bhi.w	8000ec4 <__udivmoddi4+0x2b4>
 8000d2a:	4626      	mov	r6, r4
 8000d2c:	1a1c      	subs	r4, r3, r0
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d36:	fb08 4410 	mls	r4, r8, r0, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb00 f707 	mul.w	r7, r0, r7
 8000d42:	429f      	cmp	r7, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x148>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x146>
 8000d50:	429f      	cmp	r7, r3
 8000d52:	f200 80b0 	bhi.w	8000eb6 <__udivmoddi4+0x2a6>
 8000d56:	4620      	mov	r0, r4
 8000d58:	1bdb      	subs	r3, r3, r7
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	e7a5      	b.n	8000cac <__udivmoddi4+0x9c>
 8000d60:	f1c1 0620 	rsb	r6, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6a:	431f      	orrs	r7, r3
 8000d6c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d70:	fa04 f301 	lsl.w	r3, r4, r1
 8000d74:	ea43 030c 	orr.w	r3, r3, ip
 8000d78:	40f4      	lsrs	r4, r6
 8000d7a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d7e:	0c38      	lsrs	r0, r7, #16
 8000d80:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d84:	fbb4 fef0 	udiv	lr, r4, r0
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d90:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d94:	fb0e f90c 	mul.w	r9, lr, ip
 8000d98:	45a1      	cmp	r9, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x1a6>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000da6:	f080 8084 	bcs.w	8000eb2 <__udivmoddi4+0x2a2>
 8000daa:	45a1      	cmp	r9, r4
 8000dac:	f240 8081 	bls.w	8000eb2 <__udivmoddi4+0x2a2>
 8000db0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	eba4 0409 	sub.w	r4, r4, r9
 8000dba:	fa1f f983 	uxth.w	r9, r3
 8000dbe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dc2:	fb00 4413 	mls	r4, r0, r3, r4
 8000dc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dca:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d907      	bls.n	8000de2 <__udivmoddi4+0x1d2>
 8000dd2:	193c      	adds	r4, r7, r4
 8000dd4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd8:	d267      	bcs.n	8000eaa <__udivmoddi4+0x29a>
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d965      	bls.n	8000eaa <__udivmoddi4+0x29a>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000de6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	429c      	cmp	r4, r3
 8000df0:	46ce      	mov	lr, r9
 8000df2:	469c      	mov	ip, r3
 8000df4:	d351      	bcc.n	8000e9a <__udivmoddi4+0x28a>
 8000df6:	d04e      	beq.n	8000e96 <__udivmoddi4+0x286>
 8000df8:	b155      	cbz	r5, 8000e10 <__udivmoddi4+0x200>
 8000dfa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dfe:	eb64 040c 	sbc.w	r4, r4, ip
 8000e02:	fa04 f606 	lsl.w	r6, r4, r6
 8000e06:	40cb      	lsrs	r3, r1
 8000e08:	431e      	orrs	r6, r3
 8000e0a:	40cc      	lsrs	r4, r1
 8000e0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e10:	2100      	movs	r1, #0
 8000e12:	e750      	b.n	8000cb6 <__udivmoddi4+0xa6>
 8000e14:	f1c2 0320 	rsb	r3, r2, #32
 8000e18:	fa20 f103 	lsr.w	r1, r0, r3
 8000e1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e20:	fa24 f303 	lsr.w	r3, r4, r3
 8000e24:	4094      	lsls	r4, r2
 8000e26:	430c      	orrs	r4, r1
 8000e28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e38:	fb08 3110 	mls	r1, r8, r0, r3
 8000e3c:	0c23      	lsrs	r3, r4, #16
 8000e3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e42:	fb00 f107 	mul.w	r1, r0, r7
 8000e46:	4299      	cmp	r1, r3
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x24c>
 8000e4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e52:	d22c      	bcs.n	8000eae <__udivmoddi4+0x29e>
 8000e54:	4299      	cmp	r1, r3
 8000e56:	d92a      	bls.n	8000eae <__udivmoddi4+0x29e>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	1a5b      	subs	r3, r3, r1
 8000e5e:	b2a4      	uxth	r4, r4
 8000e60:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e64:	fb08 3311 	mls	r3, r8, r1, r3
 8000e68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e6c:	fb01 f307 	mul.w	r3, r1, r7
 8000e70:	42a3      	cmp	r3, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x276>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e7c:	d213      	bcs.n	8000ea6 <__udivmoddi4+0x296>
 8000e7e:	42a3      	cmp	r3, r4
 8000e80:	d911      	bls.n	8000ea6 <__udivmoddi4+0x296>
 8000e82:	3902      	subs	r1, #2
 8000e84:	4464      	add	r4, ip
 8000e86:	1ae4      	subs	r4, r4, r3
 8000e88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e8c:	e739      	b.n	8000d02 <__udivmoddi4+0xf2>
 8000e8e:	4604      	mov	r4, r0
 8000e90:	e6f0      	b.n	8000c74 <__udivmoddi4+0x64>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e706      	b.n	8000ca4 <__udivmoddi4+0x94>
 8000e96:	45c8      	cmp	r8, r9
 8000e98:	d2ae      	bcs.n	8000df8 <__udivmoddi4+0x1e8>
 8000e9a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e9e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ea2:	3801      	subs	r0, #1
 8000ea4:	e7a8      	b.n	8000df8 <__udivmoddi4+0x1e8>
 8000ea6:	4631      	mov	r1, r6
 8000ea8:	e7ed      	b.n	8000e86 <__udivmoddi4+0x276>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	e799      	b.n	8000de2 <__udivmoddi4+0x1d2>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e7d4      	b.n	8000e5c <__udivmoddi4+0x24c>
 8000eb2:	46d6      	mov	lr, sl
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1a6>
 8000eb6:	4463      	add	r3, ip
 8000eb8:	3802      	subs	r0, #2
 8000eba:	e74d      	b.n	8000d58 <__udivmoddi4+0x148>
 8000ebc:	4606      	mov	r6, r0
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e70f      	b.n	8000ce4 <__udivmoddi4+0xd4>
 8000ec4:	3e02      	subs	r6, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	e730      	b.n	8000d2c <__udivmoddi4+0x11c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460a      	mov	r2, r1
 8000eda:	71fb      	strb	r3, [r7, #7]
 8000edc:	4613      	mov	r3, r2
 8000ede:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	480e      	ldr	r0, [pc, #56]	@ (8000f20 <BMP280_write+0x50>)
 8000ee6:	f005 fab9 	bl	800645c <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000ef4:	1df9      	adds	r1, r7, #7
 8000ef6:	2364      	movs	r3, #100	@ 0x64
 8000ef8:	2201      	movs	r2, #1
 8000efa:	480a      	ldr	r0, [pc, #40]	@ (8000f24 <BMP280_write+0x54>)
 8000efc:	f006 ffb9 	bl	8007e72 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000f00:	1db9      	adds	r1, r7, #6
 8000f02:	2364      	movs	r3, #100	@ 0x64
 8000f04:	2201      	movs	r2, #1
 8000f06:	4807      	ldr	r0, [pc, #28]	@ (8000f24 <BMP280_write+0x54>)
 8000f08:	f006 ffb3 	bl	8007e72 <HAL_SPI_Transmit>

	BMP280_unselect();
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2104      	movs	r1, #4
 8000f10:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <BMP280_write+0x50>)
 8000f12:	f005 faa3 	bl	800645c <HAL_GPIO_WritePin>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40020400 	.word	0x40020400
 8000f24:	20000a14 	.word	0x20000a14

08000f28 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2104      	movs	r1, #4
 8000f40:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <BMP280_read+0x58>)
 8000f42:	f005 fa8b 	bl	800645c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000f46:	f107 010f 	add.w	r1, r7, #15
 8000f4a:	2364      	movs	r3, #100	@ 0x64
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	480d      	ldr	r0, [pc, #52]	@ (8000f84 <BMP280_read+0x5c>)
 8000f50:	f006 ff8f 	bl	8007e72 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8000f54:	f107 010f 	add.w	r1, r7, #15
 8000f58:	2364      	movs	r3, #100	@ 0x64
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4809      	ldr	r0, [pc, #36]	@ (8000f84 <BMP280_read+0x5c>)
 8000f5e:	f007 f8cc 	bl	80080fa <HAL_SPI_Receive>
	BMP280_unselect();
 8000f62:	2201      	movs	r2, #1
 8000f64:	2104      	movs	r1, #4
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <BMP280_read+0x58>)
 8000f68:	f005 fa78 	bl	800645c <HAL_GPIO_WritePin>

	BMP280.Temp = 2500;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <BMP280_read+0x60>)
 8000f6e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000f72:	605a      	str	r2, [r3, #4]

	return Buffer;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020400 	.word	0x40020400
 8000f84:	20000a14 	.word	0x20000a14
 8000f88:	2000014c 	.word	0x2000014c

08000f8c <BMP280_config>:

void BMP280_config(void){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8000f90:	2157      	movs	r1, #87	@ 0x57
 8000f92:	20f4      	movs	r0, #244	@ 0xf4
 8000f94:	f7ff ff9c 	bl	8000ed0 <BMP280_write>
	BMP280_write(config, 0x10);
 8000f98:	2110      	movs	r1, #16
 8000f9a:	20f5      	movs	r0, #245	@ 0xf5
 8000f9c:	f7ff ff98 	bl	8000ed0 <BMP280_write>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000faa:	2388      	movs	r3, #136	@ 0x88
 8000fac:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]
	BMP280_select();
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4843      	ldr	r0, [pc, #268]	@ (80010d4 <BMP280_calibrationData+0x130>)
 8000fc8:	f005 fa48 	bl	800645c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000fcc:	f107 011f 	add.w	r1, r7, #31
 8000fd0:	2364      	movs	r3, #100	@ 0x64
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4840      	ldr	r0, [pc, #256]	@ (80010d8 <BMP280_calibrationData+0x134>)
 8000fd6:	f006 ff4c 	bl	8007e72 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000fda:	1d39      	adds	r1, r7, #4
 8000fdc:	2364      	movs	r3, #100	@ 0x64
 8000fde:	2218      	movs	r2, #24
 8000fe0:	483d      	ldr	r0, [pc, #244]	@ (80010d8 <BMP280_calibrationData+0x134>)
 8000fe2:	f007 f88a 	bl	80080fa <HAL_SPI_Receive>
	BMP280_unselect();
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2104      	movs	r1, #4
 8000fea:	483a      	ldr	r0, [pc, #232]	@ (80010d4 <BMP280_calibrationData+0x130>)
 8000fec:	f005 fa36 	bl	800645c <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8000ff0:	797b      	ldrb	r3, [r7, #5]
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	793b      	ldrb	r3, [r7, #4]
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b36      	ldr	r3, [pc, #216]	@ (80010dc <BMP280_calibrationData+0x138>)
 8001002:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21a      	sxth	r2, r3
 8001012:	4b33      	ldr	r3, [pc, #204]	@ (80010e0 <BMP280_calibrationData+0x13c>)
 8001014:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8001016:	7a7b      	ldrb	r3, [r7, #9]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b21a      	sxth	r2, r3
 800101c:	7a3b      	ldrb	r3, [r7, #8]
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <BMP280_calibrationData+0x140>)
 8001026:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b21a      	sxth	r2, r3
 800102e:	7abb      	ldrb	r3, [r7, #10]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b2b      	ldr	r3, [pc, #172]	@ (80010e8 <BMP280_calibrationData+0x144>)
 800103a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 800103c:	7b7b      	ldrb	r3, [r7, #13]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	7b3b      	ldrb	r3, [r7, #12]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21a      	sxth	r2, r3
 800104a:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <BMP280_calibrationData+0x148>)
 800104c:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21a      	sxth	r2, r3
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21a      	sxth	r2, r3
 800105c:	4b24      	ldr	r3, [pc, #144]	@ (80010f0 <BMP280_calibrationData+0x14c>)
 800105e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8001060:	7c7b      	ldrb	r3, [r7, #17]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	7c3b      	ldrb	r3, [r7, #16]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <BMP280_calibrationData+0x150>)
 8001070:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8001072:	7cfb      	ldrb	r3, [r7, #19]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	7cbb      	ldrb	r3, [r7, #18]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <BMP280_calibrationData+0x154>)
 8001082:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8001084:	7d7b      	ldrb	r3, [r7, #21]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7d3b      	ldrb	r3, [r7, #20]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <BMP280_calibrationData+0x158>)
 8001094:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8001096:	7dfb      	ldrb	r3, [r7, #23]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7dbb      	ldrb	r3, [r7, #22]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <BMP280_calibrationData+0x15c>)
 80010a6:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 80010a8:	7e7b      	ldrb	r3, [r7, #25]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7e3b      	ldrb	r3, [r7, #24]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <BMP280_calibrationData+0x160>)
 80010b8:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80010ba:	7efb      	ldrb	r3, [r7, #27]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7ebb      	ldrb	r3, [r7, #26]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <BMP280_calibrationData+0x164>)
 80010ca:	801a      	strh	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40020400 	.word	0x40020400
 80010d8:	20000a14 	.word	0x20000a14
 80010dc:	20000160 	.word	0x20000160
 80010e0:	20000164 	.word	0x20000164
 80010e4:	20000166 	.word	0x20000166
 80010e8:	20000162 	.word	0x20000162
 80010ec:	20000168 	.word	0x20000168
 80010f0:	2000016a 	.word	0x2000016a
 80010f4:	2000016c 	.word	0x2000016c
 80010f8:	2000016e 	.word	0x2000016e
 80010fc:	20000170 	.word	0x20000170
 8001100:	20000172 	.word	0x20000172
 8001104:	20000174 	.word	0x20000174
 8001108:	20000176 	.word	0x20000176

0800110c <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8001112:	23f7      	movs	r3, #247	@ 0xf7
 8001114:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	2300      	movs	r3, #0
 800111c:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 800111e:	2200      	movs	r2, #0
 8001120:	2104      	movs	r1, #4
 8001122:	4817      	ldr	r0, [pc, #92]	@ (8001180 <BMP280_readRawValues+0x74>)
 8001124:	f005 f99a 	bl	800645c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8001128:	1df9      	adds	r1, r7, #7
 800112a:	2364      	movs	r3, #100	@ 0x64
 800112c:	2201      	movs	r2, #1
 800112e:	4815      	ldr	r0, [pc, #84]	@ (8001184 <BMP280_readRawValues+0x78>)
 8001130:	f006 fe9f 	bl	8007e72 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8001134:	4639      	mov	r1, r7
 8001136:	2364      	movs	r3, #100	@ 0x64
 8001138:	2206      	movs	r2, #6
 800113a:	4812      	ldr	r0, [pc, #72]	@ (8001184 <BMP280_readRawValues+0x78>)
 800113c:	f006 ffdd 	bl	80080fa <HAL_SPI_Receive>
	BMP280_unselect();
 8001140:	2201      	movs	r2, #1
 8001142:	2104      	movs	r1, #4
 8001144:	480e      	ldr	r0, [pc, #56]	@ (8001180 <BMP280_readRawValues+0x74>)
 8001146:	f005 f989 	bl	800645c <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 800114a:	783b      	ldrb	r3, [r7, #0]
 800114c:	031a      	lsls	r2, r3, #12
 800114e:	787b      	ldrb	r3, [r7, #1]
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	4313      	orrs	r3, r2
 8001154:	78ba      	ldrb	r2, [r7, #2]
 8001156:	0912      	lsrs	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	4313      	orrs	r3, r2
 800115c:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <BMP280_readRawValues+0x7c>)
 800115e:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	031a      	lsls	r2, r3, #12
 8001164:	793b      	ldrb	r3, [r7, #4]
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	4313      	orrs	r3, r2
 800116a:	797a      	ldrb	r2, [r7, #5]
 800116c:	0912      	lsrs	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	4313      	orrs	r3, r2
 8001172:	4a06      	ldr	r2, [pc, #24]	@ (800118c <BMP280_readRawValues+0x80>)
 8001174:	6013      	str	r3, [r2, #0]
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40020400 	.word	0x40020400
 8001184:	20000a14 	.word	0x20000a14
 8001188:	2000017c 	.word	0x2000017c
 800118c:	20000178 	.word	0x20000178

08001190 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001198:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <BMP280_measureT+0x74>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	10da      	asrs	r2, r3, #3
 800119e:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <BMP280_measureT+0x78>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	4a19      	ldr	r2, [pc, #100]	@ (800120c <BMP280_measureT+0x7c>)
 80011a8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011ac:	fb02 f303 	mul.w	r3, r2, r3
 80011b0:	12db      	asrs	r3, r3, #11
 80011b2:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	111b      	asrs	r3, r3, #4
 80011b8:	4a13      	ldr	r2, [pc, #76]	@ (8001208 <BMP280_measureT+0x78>)
 80011ba:	8812      	ldrh	r2, [r2, #0]
 80011bc:	1a9b      	subs	r3, r3, r2
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	1112      	asrs	r2, r2, #4
 80011c2:	4911      	ldr	r1, [pc, #68]	@ (8001208 <BMP280_measureT+0x78>)
 80011c4:	8809      	ldrh	r1, [r1, #0]
 80011c6:	1a52      	subs	r2, r2, r1
 80011c8:	fb02 f303 	mul.w	r3, r2, r3
 80011cc:	131b      	asrs	r3, r3, #12
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <BMP280_measureT+0x80>)
 80011d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	139b      	asrs	r3, r3, #14
 80011da:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001214 <BMP280_measureT+0x84>)
 80011e4:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <BMP280_measureT+0x84>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	3380      	adds	r3, #128	@ 0x80
 80011f2:	121b      	asrs	r3, r3, #8
 80011f4:	60fb      	str	r3, [r7, #12]
	return T;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	20000178 	.word	0x20000178
 8001208:	20000160 	.word	0x20000160
 800120c:	20000164 	.word	0x20000164
 8001210:	20000166 	.word	0x20000166
 8001214:	20000180 	.word	0x20000180

08001218 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8001218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800121c:	b0ca      	sub	sp, #296	@ 0x128
 800121e:	af00      	add	r7, sp, #0
 8001220:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001224:	4baf      	ldr	r3, [pc, #700]	@ (80014e4 <BMP280_measureP+0x2cc>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	17da      	asrs	r2, r3, #31
 800122a:	461c      	mov	r4, r3
 800122c:	4615      	mov	r5, r2
 800122e:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001232:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001236:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800123a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800123e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001242:	fb03 f102 	mul.w	r1, r3, r2
 8001246:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800124a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	18ca      	adds	r2, r1, r3
 8001254:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001258:	fba3 8903 	umull	r8, r9, r3, r3
 800125c:	eb02 0309 	add.w	r3, r2, r9
 8001260:	4699      	mov	r9, r3
 8001262:	4ba1      	ldr	r3, [pc, #644]	@ (80014e8 <BMP280_measureP+0x2d0>)
 8001264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001268:	b21b      	sxth	r3, r3
 800126a:	17da      	asrs	r2, r3, #31
 800126c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001270:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001274:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001278:	4603      	mov	r3, r0
 800127a:	fb03 f209 	mul.w	r2, r3, r9
 800127e:	460b      	mov	r3, r1
 8001280:	fb08 f303 	mul.w	r3, r8, r3
 8001284:	4413      	add	r3, r2
 8001286:	4602      	mov	r2, r0
 8001288:	fba8 1202 	umull	r1, r2, r8, r2
 800128c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001290:	460a      	mov	r2, r1
 8001292:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001296:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800129a:	4413      	add	r3, r2
 800129c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80012a0:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80012a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80012a8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80012ac:	4b8f      	ldr	r3, [pc, #572]	@ (80014ec <BMP280_measureP+0x2d4>)
 80012ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	17da      	asrs	r2, r3, #31
 80012b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80012ba:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80012be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012c2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80012c6:	462a      	mov	r2, r5
 80012c8:	fb02 f203 	mul.w	r2, r2, r3
 80012cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012d0:	4621      	mov	r1, r4
 80012d2:	fb01 f303 	mul.w	r3, r1, r3
 80012d6:	441a      	add	r2, r3
 80012d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012dc:	4621      	mov	r1, r4
 80012de:	fba3 1301 	umull	r1, r3, r3, r1
 80012e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80012e6:	460b      	mov	r3, r1
 80012e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80012ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80012f0:	18d3      	adds	r3, r2, r3
 80012f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80012f6:	f04f 0000 	mov.w	r0, #0
 80012fa:	f04f 0100 	mov.w	r1, #0
 80012fe:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001302:	462b      	mov	r3, r5
 8001304:	0459      	lsls	r1, r3, #17
 8001306:	4623      	mov	r3, r4
 8001308:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800130c:	4623      	mov	r3, r4
 800130e:	0458      	lsls	r0, r3, #17
 8001310:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001314:	1814      	adds	r4, r2, r0
 8001316:	643c      	str	r4, [r7, #64]	@ 0x40
 8001318:	414b      	adcs	r3, r1
 800131a:	647b      	str	r3, [r7, #68]	@ 0x44
 800131c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001320:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001324:	4b72      	ldr	r3, [pc, #456]	@ (80014f0 <BMP280_measureP+0x2d8>)
 8001326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132a:	b21b      	sxth	r3, r3
 800132c:	17da      	asrs	r2, r3, #31
 800132e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001332:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001336:	f04f 0000 	mov.w	r0, #0
 800133a:	f04f 0100 	mov.w	r1, #0
 800133e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001342:	00d9      	lsls	r1, r3, #3
 8001344:	2000      	movs	r0, #0
 8001346:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800134a:	1814      	adds	r4, r2, r0
 800134c:	63bc      	str	r4, [r7, #56]	@ 0x38
 800134e:	414b      	adcs	r3, r1
 8001350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001352:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001356:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800135a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800135e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001362:	fb03 f102 	mul.w	r1, r3, r2
 8001366:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800136a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	18ca      	adds	r2, r1, r3
 8001374:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001378:	fba3 1303 	umull	r1, r3, r3, r3
 800137c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001380:	460b      	mov	r3, r1
 8001382:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800138a:	18d3      	adds	r3, r2, r3
 800138c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001390:	4b58      	ldr	r3, [pc, #352]	@ (80014f4 <BMP280_measureP+0x2dc>)
 8001392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001396:	b21b      	sxth	r3, r3
 8001398:	17da      	asrs	r2, r3, #31
 800139a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800139e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80013a2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80013a6:	462b      	mov	r3, r5
 80013a8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80013ac:	4642      	mov	r2, r8
 80013ae:	fb02 f203 	mul.w	r2, r2, r3
 80013b2:	464b      	mov	r3, r9
 80013b4:	4621      	mov	r1, r4
 80013b6:	fb01 f303 	mul.w	r3, r1, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	4622      	mov	r2, r4
 80013be:	4641      	mov	r1, r8
 80013c0:	fba2 1201 	umull	r1, r2, r2, r1
 80013c4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80013c8:	460a      	mov	r2, r1
 80013ca:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80013ce:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80013d2:	4413      	add	r3, r2
 80013d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80013d8:	f04f 0000 	mov.w	r0, #0
 80013dc:	f04f 0100 	mov.w	r1, #0
 80013e0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80013e4:	4623      	mov	r3, r4
 80013e6:	0a18      	lsrs	r0, r3, #8
 80013e8:	462b      	mov	r3, r5
 80013ea:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80013ee:	462b      	mov	r3, r5
 80013f0:	1219      	asrs	r1, r3, #8
 80013f2:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <BMP280_measureP+0x2e0>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	17da      	asrs	r2, r3, #31
 80013fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001400:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001404:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001408:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800140c:	464a      	mov	r2, r9
 800140e:	fb02 f203 	mul.w	r2, r2, r3
 8001412:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001416:	4644      	mov	r4, r8
 8001418:	fb04 f303 	mul.w	r3, r4, r3
 800141c:	441a      	add	r2, r3
 800141e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001422:	4644      	mov	r4, r8
 8001424:	fba3 4304 	umull	r4, r3, r3, r4
 8001428:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800142c:	4623      	mov	r3, r4
 800142e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001432:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001436:	18d3      	adds	r3, r2, r3
 8001438:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001448:	464c      	mov	r4, r9
 800144a:	0323      	lsls	r3, r4, #12
 800144c:	4644      	mov	r4, r8
 800144e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001452:	4644      	mov	r4, r8
 8001454:	0322      	lsls	r2, r4, #12
 8001456:	1884      	adds	r4, r0, r2
 8001458:	633c      	str	r4, [r7, #48]	@ 0x30
 800145a:	eb41 0303 	adc.w	r3, r1, r3
 800145e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001460:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001464:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001468:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800146c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001470:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001474:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001478:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <BMP280_measureP+0x2e4>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	2200      	movs	r2, #0
 8001480:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001484:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001488:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800148c:	462b      	mov	r3, r5
 800148e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001492:	4642      	mov	r2, r8
 8001494:	fb02 f203 	mul.w	r2, r2, r3
 8001498:	464b      	mov	r3, r9
 800149a:	4621      	mov	r1, r4
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	4622      	mov	r2, r4
 80014a4:	4641      	mov	r1, r8
 80014a6:	fba2 1201 	umull	r1, r2, r2, r1
 80014aa:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80014ae:	460a      	mov	r2, r1
 80014b0:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80014b4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80014b8:	4413      	add	r3, r2
 80014ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80014ca:	4629      	mov	r1, r5
 80014cc:	104a      	asrs	r2, r1, #1
 80014ce:	4629      	mov	r1, r5
 80014d0:	17cb      	asrs	r3, r1, #31
 80014d2:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 80014d6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014da:	4313      	orrs	r3, r2
 80014dc:	d110      	bne.n	8001500 <BMP280_measureP+0x2e8>
	{
	return 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	e154      	b.n	800178c <BMP280_measureP+0x574>
 80014e2:	bf00      	nop
 80014e4:	20000180 	.word	0x20000180
 80014e8:	20000170 	.word	0x20000170
 80014ec:	2000016e 	.word	0x2000016e
 80014f0:	2000016c 	.word	0x2000016c
 80014f4:	2000016a 	.word	0x2000016a
 80014f8:	20000168 	.word	0x20000168
 80014fc:	20000162 	.word	0x20000162
	}
	p = 1048576-adc_P;
 8001500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001504:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001508:	17da      	asrs	r2, r3, #31
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800150c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800150e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001512:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001516:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800151a:	105b      	asrs	r3, r3, #1
 800151c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001520:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001524:	07db      	lsls	r3, r3, #31
 8001526:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800152a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800152e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001532:	4621      	mov	r1, r4
 8001534:	1a89      	subs	r1, r1, r2
 8001536:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001538:	4629      	mov	r1, r5
 800153a:	eb61 0303 	sbc.w	r3, r1, r3
 800153e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001540:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001544:	4622      	mov	r2, r4
 8001546:	462b      	mov	r3, r5
 8001548:	1891      	adds	r1, r2, r2
 800154a:	6239      	str	r1, [r7, #32]
 800154c:	415b      	adcs	r3, r3
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001550:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001554:	4621      	mov	r1, r4
 8001556:	1851      	adds	r1, r2, r1
 8001558:	61b9      	str	r1, [r7, #24]
 800155a:	4629      	mov	r1, r5
 800155c:	414b      	adcs	r3, r1
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800156c:	4649      	mov	r1, r9
 800156e:	018b      	lsls	r3, r1, #6
 8001570:	4641      	mov	r1, r8
 8001572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001576:	4641      	mov	r1, r8
 8001578:	018a      	lsls	r2, r1, #6
 800157a:	4641      	mov	r1, r8
 800157c:	1889      	adds	r1, r1, r2
 800157e:	6139      	str	r1, [r7, #16]
 8001580:	4649      	mov	r1, r9
 8001582:	eb43 0101 	adc.w	r1, r3, r1
 8001586:	6179      	str	r1, [r7, #20]
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001594:	4649      	mov	r1, r9
 8001596:	008b      	lsls	r3, r1, #2
 8001598:	4641      	mov	r1, r8
 800159a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800159e:	4641      	mov	r1, r8
 80015a0:	008a      	lsls	r2, r1, #2
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	4603      	mov	r3, r0
 80015a8:	4622      	mov	r2, r4
 80015aa:	189b      	adds	r3, r3, r2
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	460b      	mov	r3, r1
 80015b0:	462a      	mov	r2, r5
 80015b2:	eb42 0303 	adc.w	r3, r2, r3
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015c4:	4649      	mov	r1, r9
 80015c6:	008b      	lsls	r3, r1, #2
 80015c8:	4641      	mov	r1, r8
 80015ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015ce:	4641      	mov	r1, r8
 80015d0:	008a      	lsls	r2, r1, #2
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	4622      	mov	r2, r4
 80015da:	189b      	adds	r3, r3, r2
 80015dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80015de:	462b      	mov	r3, r5
 80015e0:	460a      	mov	r2, r1
 80015e2:	eb42 0303 	adc.w	r3, r2, r3
 80015e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80015e8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80015ec:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80015f0:	f7ff faa6 	bl	8000b40 <__aeabi_ldivmod>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80015fc:	4b66      	ldr	r3, [pc, #408]	@ (8001798 <BMP280_measureP+0x580>)
 80015fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001602:	b21b      	sxth	r3, r3
 8001604:	17da      	asrs	r2, r3, #31
 8001606:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001608:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800160a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800160e:	f04f 0000 	mov.w	r0, #0
 8001612:	f04f 0100 	mov.w	r1, #0
 8001616:	0b50      	lsrs	r0, r2, #13
 8001618:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800161c:	1359      	asrs	r1, r3, #13
 800161e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001622:	462b      	mov	r3, r5
 8001624:	fb00 f203 	mul.w	r2, r0, r3
 8001628:	4623      	mov	r3, r4
 800162a:	fb03 f301 	mul.w	r3, r3, r1
 800162e:	4413      	add	r3, r2
 8001630:	4622      	mov	r2, r4
 8001632:	fba2 1200 	umull	r1, r2, r2, r0
 8001636:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800163a:	460a      	mov	r2, r1
 800163c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001640:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001644:	4413      	add	r3, r2
 8001646:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800164a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800164e:	f04f 0000 	mov.w	r0, #0
 8001652:	f04f 0100 	mov.w	r1, #0
 8001656:	0b50      	lsrs	r0, r2, #13
 8001658:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800165c:	1359      	asrs	r1, r3, #13
 800165e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001662:	462b      	mov	r3, r5
 8001664:	fb00 f203 	mul.w	r2, r0, r3
 8001668:	4623      	mov	r3, r4
 800166a:	fb03 f301 	mul.w	r3, r3, r1
 800166e:	4413      	add	r3, r2
 8001670:	4622      	mov	r2, r4
 8001672:	fba2 1200 	umull	r1, r2, r2, r0
 8001676:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800167a:	460a      	mov	r2, r1
 800167c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001680:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001684:	4413      	add	r3, r2
 8001686:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001696:	4621      	mov	r1, r4
 8001698:	0e4a      	lsrs	r2, r1, #25
 800169a:	4629      	mov	r1, r5
 800169c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016a0:	4629      	mov	r1, r5
 80016a2:	164b      	asrs	r3, r1, #25
 80016a4:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80016a8:	4b3c      	ldr	r3, [pc, #240]	@ (800179c <BMP280_measureP+0x584>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	17da      	asrs	r2, r3, #31
 80016b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80016b4:	667a      	str	r2, [r7, #100]	@ 0x64
 80016b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016ba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016be:	462a      	mov	r2, r5
 80016c0:	fb02 f203 	mul.w	r2, r2, r3
 80016c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016c8:	4621      	mov	r1, r4
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80016d4:	4621      	mov	r1, r4
 80016d6:	fba2 1201 	umull	r1, r2, r2, r1
 80016da:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80016de:	460a      	mov	r2, r1
 80016e0:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80016e4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80016e8:	4413      	add	r3, r2
 80016ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80016fa:	4621      	mov	r1, r4
 80016fc:	0cca      	lsrs	r2, r1, #19
 80016fe:	4629      	mov	r1, r5
 8001700:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001704:	4629      	mov	r1, r5
 8001706:	14cb      	asrs	r3, r1, #19
 8001708:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 800170c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001710:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001714:	1884      	adds	r4, r0, r2
 8001716:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001718:	eb41 0303 	adc.w	r3, r1, r3
 800171c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800171e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001722:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001726:	4621      	mov	r1, r4
 8001728:	1889      	adds	r1, r1, r2
 800172a:	6539      	str	r1, [r7, #80]	@ 0x50
 800172c:	4629      	mov	r1, r5
 800172e:	eb43 0101 	adc.w	r1, r3, r1
 8001732:	6579      	str	r1, [r7, #84]	@ 0x54
 8001734:	f04f 0000 	mov.w	r0, #0
 8001738:	f04f 0100 	mov.w	r1, #0
 800173c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001740:	4623      	mov	r3, r4
 8001742:	0a18      	lsrs	r0, r3, #8
 8001744:	462b      	mov	r3, r5
 8001746:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800174a:	462b      	mov	r3, r5
 800174c:	1219      	asrs	r1, r3, #8
 800174e:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <BMP280_measureP+0x588>)
 8001750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001754:	b21b      	sxth	r3, r3
 8001756:	17da      	asrs	r2, r3, #31
 8001758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800175a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001768:	464c      	mov	r4, r9
 800176a:	0123      	lsls	r3, r4, #4
 800176c:	4644      	mov	r4, r8
 800176e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001772:	4644      	mov	r4, r8
 8001774:	0122      	lsls	r2, r4, #4
 8001776:	1884      	adds	r4, r0, r2
 8001778:	603c      	str	r4, [r7, #0]
 800177a:	eb41 0303 	adc.w	r3, r1, r3
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001784:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001788:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 800178c:	4618      	mov	r0, r3
 800178e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001792:	46bd      	mov	sp, r7
 8001794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001798:	20000176 	.word	0x20000176
 800179c:	20000174 	.word	0x20000174
 80017a0:	20000172 	.word	0x20000172
 80017a4:	00000000 	.word	0x00000000

080017a8 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <BMP280_measureH+0x14>
 80017b8:	2300      	movs	r3, #0
 80017ba:	e051      	b.n	8001860 <BMP280_measureH+0xb8>
	var1 = -log(((double)Pres)/101325);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7fe fe4d 	bl	800045c <__aeabi_ui2d>
 80017c2:	a32e      	add	r3, pc, #184	@ (adr r3, 800187c <BMP280_measureH+0xd4>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe ffec 	bl	80007a4 <__aeabi_ddiv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	ec43 2b17 	vmov	d7, r2, r3
 80017d4:	eeb0 0a47 	vmov.f32	s0, s14
 80017d8:	eef0 0a67 	vmov.f32	s1, s15
 80017dc:	f00b ff20 	bl	800d620 <log>
 80017e0:	ec53 2b10 	vmov	r2, r3, d0
 80017e4:	4611      	mov	r1, r2
 80017e6:	61b9      	str	r1, [r7, #24]
 80017e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80017ec:	61fb      	str	r3, [r7, #28]

	if(var1 == 0) return 0;
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017fa:	f7ff f911 	bl	8000a20 <__aeabi_dcmpeq>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <BMP280_measureH+0x60>
 8001804:	2300      	movs	r3, #0
 8001806:	e02b      	b.n	8001860 <BMP280_measureH+0xb8>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8001808:	6838      	ldr	r0, [r7, #0]
 800180a:	f7fe fe37 	bl	800047c <__aeabi_i2d>
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <BMP280_measureH+0xd0>)
 8001814:	f7fe ffc6 	bl	80007a4 <__aeabi_ddiv>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	a311      	add	r3, pc, #68	@ (adr r3, 8001868 <BMP280_measureH+0xc0>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	f7fe fcdd 	bl	80001e4 <__adddf3>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	a110      	add	r1, pc, #64	@ (adr r1, 8001870 <BMP280_measureH+0xc8>)
 8001830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001834:	f7fe ffb6 	bl	80007a4 <__aeabi_ddiv>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	h = var1/var2;
 8001840:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001844:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001848:	f7fe ffac 	bl	80007a4 <__aeabi_ddiv>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (uint16_t)h;
 8001854:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001858:	f7ff f952 	bl	8000b00 <__aeabi_d2uiz>
 800185c:	4603      	mov	r3, r0
 800185e:	b29b      	uxth	r3, r3
}
 8001860:	4618      	mov	r0, r3
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	66666666 	.word	0x66666666
 800186c:	40711266 	.word	0x40711266
 8001870:	ca402a92 	.word	0xca402a92
 8001874:	3fa17e3e 	.word	0x3fa17e3e
 8001878:	40590000 	.word	0x40590000
 800187c:	00000000 	.word	0x00000000
 8001880:	40f8bcd0 	.word	0x40f8bcd0

08001884 <BMP280_init>:

void BMP280_init(void){
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001888:	2201      	movs	r2, #1
 800188a:	2104      	movs	r1, #4
 800188c:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <BMP280_init+0x3c>)
 800188e:	f004 fde5 	bl	800645c <HAL_GPIO_WritePin>
	BMP280_config();
 8001892:	f7ff fb7b 	bl	8000f8c <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001896:	2089      	movs	r0, #137	@ 0x89
 8001898:	f7ff fb46 	bl	8000f28 <BMP280_read>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <BMP280_init+0x40>)
 80018a2:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 80018a4:	f7ff fb7e 	bl	8000fa4 <BMP280_calibrationData>
	BMP280_readRawValues();
 80018a8:	f7ff fc30 	bl	800110c <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <BMP280_init+0x44>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fc6d 	bl	8001190 <BMP280_measureT>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a02      	ldr	r2, [pc, #8]	@ (80018c4 <BMP280_init+0x40>)
 80018ba:	6093      	str	r3, [r2, #8]
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40020400 	.word	0x40020400
 80018c4:	2000014c 	.word	0x2000014c
 80018c8:	20000178 	.word	0x20000178

080018cc <BMP280_calculate>:

void BMP280_calculate(void){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	BMP280_readRawValues();
 80018d0:	f7ff fc1c 	bl	800110c <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 80018d4:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <BMP280_calculate+0x5c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fc59 	bl	8001190 <BMP280_measureT>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a12      	ldr	r2, [pc, #72]	@ (800192c <BMP280_calculate+0x60>)
 80018e2:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <BMP280_calculate+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fc95 	bl	8001218 <BMP280_measureP>
 80018ee:	4603      	mov	r3, r0
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	4a0e      	ldr	r2, [pc, #56]	@ (800192c <BMP280_calculate+0x60>)
 80018f4:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 80018f6:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <BMP280_calculate+0x60>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	4a0c      	ldr	r2, [pc, #48]	@ (800192c <BMP280_calculate+0x60>)
 80018fc:	6892      	ldr	r2, [r2, #8]
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff51 	bl	80017a8 <BMP280_measureH>
 8001906:	4603      	mov	r3, r0
 8001908:	461a      	mov	r2, r3
 800190a:	4b08      	ldr	r3, [pc, #32]	@ (800192c <BMP280_calculate+0x60>)
 800190c:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 800190e:	4b07      	ldr	r3, [pc, #28]	@ (800192c <BMP280_calculate+0x60>)
 8001910:	8a1a      	ldrh	r2, [r3, #16]
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <BMP280_calculate+0x60>)
 8001914:	8a5b      	ldrh	r3, [r3, #18]
 8001916:	429a      	cmp	r2, r3
 8001918:	d903      	bls.n	8001922 <BMP280_calculate+0x56>
 800191a:	4b04      	ldr	r3, [pc, #16]	@ (800192c <BMP280_calculate+0x60>)
 800191c:	8a1a      	ldrh	r2, [r3, #16]
 800191e:	4b03      	ldr	r3, [pc, #12]	@ (800192c <BMP280_calculate+0x60>)
 8001920:	825a      	strh	r2, [r3, #18]
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000178 	.word	0x20000178
 800192c:	2000014c 	.word	0x2000014c
 8001930:	2000017c 	.word	0x2000017c

08001934 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a2e      	ldr	r2, [pc, #184]	@ (80019fc <GetSector+0xc8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d806      	bhi.n	8001956 <GetSector+0x22>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800194e:	d302      	bcc.n	8001956 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	e04b      	b.n	80019ee <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a29      	ldr	r2, [pc, #164]	@ (8001a00 <GetSector+0xcc>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d806      	bhi.n	800196c <GetSector+0x38>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a28      	ldr	r2, [pc, #160]	@ (8001a04 <GetSector+0xd0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d302      	bcc.n	800196c <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8001966:	2301      	movs	r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	e040      	b.n	80019ee <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a26      	ldr	r2, [pc, #152]	@ (8001a08 <GetSector+0xd4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d806      	bhi.n	8001982 <GetSector+0x4e>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a25      	ldr	r2, [pc, #148]	@ (8001a0c <GetSector+0xd8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d302      	bcc.n	8001982 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 800197c:	2302      	movs	r3, #2
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e035      	b.n	80019ee <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a22      	ldr	r2, [pc, #136]	@ (8001a10 <GetSector+0xdc>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d206      	bcs.n	8001998 <GetSector+0x64>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a21      	ldr	r2, [pc, #132]	@ (8001a14 <GetSector+0xe0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d302      	bcc.n	8001998 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001992:	2303      	movs	r3, #3
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e02a      	b.n	80019ee <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a1f      	ldr	r2, [pc, #124]	@ (8001a18 <GetSector+0xe4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d206      	bcs.n	80019ae <GetSector+0x7a>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a10 <GetSector+0xdc>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d902      	bls.n	80019ae <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80019a8:	2304      	movs	r3, #4
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e01f      	b.n	80019ee <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a1c <GetSector+0xe8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d206      	bcs.n	80019c4 <GetSector+0x90>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a17      	ldr	r2, [pc, #92]	@ (8001a18 <GetSector+0xe4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d902      	bls.n	80019c4 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 80019be:	2305      	movs	r3, #5
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e014      	b.n	80019ee <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a16      	ldr	r2, [pc, #88]	@ (8001a20 <GetSector+0xec>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d206      	bcs.n	80019da <GetSector+0xa6>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a13      	ldr	r2, [pc, #76]	@ (8001a1c <GetSector+0xe8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d902      	bls.n	80019da <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 80019d4:	2306      	movs	r3, #6
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e009      	b.n	80019ee <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a11      	ldr	r2, [pc, #68]	@ (8001a24 <GetSector+0xf0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d205      	bcs.n	80019ee <GetSector+0xba>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001a20 <GetSector+0xec>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80019ea:	2307      	movs	r3, #7
 80019ec:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	08003ffe 	.word	0x08003ffe
 8001a00:	08007ffe 	.word	0x08007ffe
 8001a04:	08004000 	.word	0x08004000
 8001a08:	0800bffe 	.word	0x0800bffe
 8001a0c:	08008000 	.word	0x08008000
 8001a10:	0800ffff 	.word	0x0800ffff
 8001a14:	0800c000 	.word	0x0800c000
 8001a18:	0801ffff 	.word	0x0801ffff
 8001a1c:	0803ffff 	.word	0x0803ffff
 8001a20:	0805ffff 	.word	0x0805ffff
 8001a24:	0807ffff 	.word	0x0807ffff

08001a28 <Flash_Write>:


uint32_t Flash_Write (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	4613      	mov	r3, r2
 8001a34:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8001a3a:	f004 f8eb 	bl	8005c14 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f7ff ff78 	bl	8001934 <GetSector>
 8001a44:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001a52:	69f8      	ldr	r0, [r7, #28]
 8001a54:	f7ff ff6e 	bl	8001934 <GetSector>
 8001a58:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <Flash_Write+0xac>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad4 <Flash_Write+0xac>)
 8001a62:	2202      	movs	r2, #2
 8001a64:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8001a66:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad4 <Flash_Write+0xac>)
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	3301      	adds	r3, #1
 8001a74:	4a17      	ldr	r2, [pc, #92]	@ (8001ad4 <Flash_Write+0xac>)
 8001a76:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4815      	ldr	r0, [pc, #84]	@ (8001ad4 <Flash_Write+0xac>)
 8001a80:	f004 fa46 	bl	8005f10 <HAL_FLASHEx_Erase>

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
 8001a84:	e01b      	b.n	8001abe <Flash_Write+0x96>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	461c      	mov	r4, r3
 8001a94:	4615      	mov	r5, r2
 8001a96:	4622      	mov	r2, r4
 8001a98:	462b      	mov	r3, r5
 8001a9a:	68f9      	ldr	r1, [r7, #12]
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f004 f865 	bl	8005b6c <HAL_FLASH_Program>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d106      	bne.n	8001ab6 <Flash_Write+0x8e>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab4:	e003      	b.n	8001abe <Flash_Write+0x96>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001ab6:	f004 f8df 	bl	8005c78 <HAL_FLASH_GetError>
 8001aba:	4603      	mov	r3, r0
 8001abc:	e006      	b.n	8001acc <Flash_Write+0xa4>
	   while (sofar<numberofwords)
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	dbdf      	blt.n	8001a86 <Flash_Write+0x5e>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001ac6:	f004 f8c7 	bl	8005c58 <HAL_FLASH_Lock>

	   return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3728      	adds	r7, #40	@ 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad4:	20000184 	.word	0x20000184

08001ad8 <Flash_Read>:


void Flash_Read (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3304      	adds	r3, #4
 8001af2:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	3304      	adds	r3, #4
 8001af8:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	1e5a      	subs	r2, r3, #1
 8001afe:	80fa      	strh	r2, [r7, #6]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d000      	beq.n	8001b06 <Flash_Read+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001b04:	e7ef      	b.n	8001ae6 <Flash_Read+0xe>
		if (!(numberofwords--)) break;
 8001b06:	bf00      	nop
	}
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <MPU6050_getPromModule>:

#define MPU6050_ADDR 0xD0
const uint16_t i2c_timeout = 10;
const double Accel_Z_corrector = 2048.0;

void MPU6050_getPromModule(MPU6050_t *DataStruct){
 8001b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b18:	b09e      	sub	sp, #120	@ 0x78
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int64_t Buffer = 0;
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	int32_t AuxBuffer[5] = {0};
 8001b2a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8001b2e:	2300      	movs	r3, #0
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	6053      	str	r3, [r2, #4]
 8001b34:	6093      	str	r3, [r2, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
 8001b38:	6113      	str	r3, [r2, #16]

	for(uint8_t n = 0;n<5;n++){
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001b40:	e016      	b.n	8001b70 <MPU6050_getPromModule+0x5c>
		AuxBuffer[n] = DataStruct->PromBuffer[n].Accel_X_RAW;
 8001b42:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b48:	3304      	adds	r3, #4
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3304      	adds	r3, #4
 8001b50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b54:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	3330      	adds	r3, #48	@ 0x30
 8001b5c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001b60:	440b      	add	r3, r1
 8001b62:	f843 2c24 	str.w	r2, [r3, #-36]
	for(uint8_t n = 0;n<5;n++){
 8001b66:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001b70:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d9e4      	bls.n	8001b42 <MPU6050_getPromModule+0x2e>
	}
	for(uint8_t n = 0;n<4;n++){
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8001b7e:	e02d      	b.n	8001bdc <MPU6050_getPromModule+0xc8>

		DataStruct->PromBuffer[n+1].Accel_X_RAW = AuxBuffer[n];
 8001b80:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	3330      	adds	r3, #48	@ 0x30
 8001b88:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8001b92:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001b96:	3301      	adds	r3, #1
 8001b98:	b211      	sxth	r1, r2
 8001b9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	4413      	add	r3, r2
 8001ba2:	1d1a      	adds	r2, r3, #4
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	8013      	strh	r3, [r2, #0]
		Buffer += DataStruct->PromBuffer[n].Accel_X_RAW;
 8001ba8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001bac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bae:	3304      	adds	r3, #4
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	17da      	asrs	r2, r3, #31
 8001bbe:	461c      	mov	r4, r3
 8001bc0:	4615      	mov	r5, r2
 8001bc2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001bc6:	eb12 0804 	adds.w	r8, r2, r4
 8001bca:	eb43 0905 	adc.w	r9, r3, r5
 8001bce:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
	for(uint8_t n = 0;n<4;n++){
 8001bd2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8001bdc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d9cd      	bls.n	8001b80 <MPU6050_getPromModule+0x6c>
	}
	DataStruct->PromBuffer[0].Accel_X_RAW = DataStruct->Accel_X_RAW;
 8001be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bec:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
	Buffer += DataStruct->PromBuffer[0].Accel_X_RAW;
 8001bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bf2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	17da      	asrs	r2, r3, #31
 8001bfa:	469a      	mov	sl, r3
 8001bfc:	4693      	mov	fp, r2
 8001bfe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c02:	eb12 010a 	adds.w	r1, r2, sl
 8001c06:	6239      	str	r1, [r7, #32]
 8001c08:	eb43 030b 	adc.w	r3, r3, fp
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001c12:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	DataStruct->Prom.Accel_X_RAW = Buffer / 5;
 8001c16:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001c1a:	f04f 0205 	mov.w	r2, #5
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	f7fe ff8d 	bl	8000b40 <__aeabi_ldivmod>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	b213      	sxth	r3, r2
 8001c2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c2e:	f8a2 3094 	strh.w	r3, [r2, #148]	@ 0x94

	Buffer = 0;
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	for(uint8_t n = 0;n<5;n++){
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8001c44:	e016      	b.n	8001c74 <MPU6050_getPromModule+0x160>
		AuxBuffer[n] = DataStruct->PromBuffer[n].Accel_Y_RAW;
 8001c46:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001c4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4413      	add	r3, r2
 8001c52:	3306      	adds	r3, #6
 8001c54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c58:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	3330      	adds	r3, #48	@ 0x30
 8001c60:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001c64:	440b      	add	r3, r1
 8001c66:	f843 2c24 	str.w	r2, [r3, #-36]
	for(uint8_t n = 0;n<5;n++){
 8001c6a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001c6e:	3301      	adds	r3, #1
 8001c70:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8001c74:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d9e4      	bls.n	8001c46 <MPU6050_getPromModule+0x132>
	}
	for(uint8_t n = 0;n<4;n++){
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8001c82:	e033      	b.n	8001cec <MPU6050_getPromModule+0x1d8>

		DataStruct->PromBuffer[n+1].Accel_Y_RAW = AuxBuffer[n];
 8001c84:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	3330      	adds	r3, #48	@ 0x30
 8001c8c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001c90:	4413      	add	r3, r2
 8001c92:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8001c96:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	b211      	sxth	r1, r2
 8001c9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4413      	add	r3, r2
 8001ca6:	1d9a      	adds	r2, r3, #6
 8001ca8:	460b      	mov	r3, r1
 8001caa:	8013      	strh	r3, [r2, #0]
		Buffer += DataStruct->PromBuffer[n].Accel_Y_RAW;
 8001cac:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001cb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3306      	adds	r3, #6
 8001cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	17da      	asrs	r2, r3, #31
 8001cc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cc4:	647a      	str	r2, [r7, #68]	@ 0x44
 8001cc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001cca:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001cce:	4621      	mov	r1, r4
 8001cd0:	1851      	adds	r1, r2, r1
 8001cd2:	61b9      	str	r1, [r7, #24]
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	414b      	adcs	r3, r1
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001cde:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	for(uint8_t n = 0;n<4;n++){
 8001ce2:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8001cec:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d9c7      	bls.n	8001c84 <MPU6050_getPromModule+0x170>
	}
	DataStruct->PromBuffer[0].Accel_Y_RAW = DataStruct->Accel_Y_RAW;
 8001cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cfc:	f8a2 3046 	strh.w	r3, [r2, #70]	@ 0x46
	Buffer += DataStruct->PromBuffer[0].Accel_Y_RAW;
 8001d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d02:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001d06:	b21b      	sxth	r3, r3
 8001d08:	17da      	asrs	r2, r3, #31
 8001d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001d12:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001d16:	4621      	mov	r1, r4
 8001d18:	1851      	adds	r1, r2, r1
 8001d1a:	6139      	str	r1, [r7, #16]
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	eb43 0101 	adc.w	r1, r3, r1
 8001d22:	6179      	str	r1, [r7, #20]
 8001d24:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001d28:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	DataStruct->Prom.Accel_Y_RAW = Buffer / 5;
 8001d2c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001d30:	f04f 0205 	mov.w	r2, #5
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	f7fe ff02 	bl	8000b40 <__aeabi_ldivmod>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	b212      	sxth	r2, r2
 8001d42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d44:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96

	Buffer = 0;
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	for(uint8_t n = 0;n<5;n++){
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8001d5a:	e016      	b.n	8001d8a <MPU6050_getPromModule+0x276>
		AuxBuffer[n] = DataStruct->PromBuffer[n].Accel_Z_RAW;
 8001d5c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001d60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d62:	3304      	adds	r3, #4
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	4413      	add	r3, r2
 8001d68:	3308      	adds	r3, #8
 8001d6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d6e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	3330      	adds	r3, #48	@ 0x30
 8001d76:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f843 2c24 	str.w	r2, [r3, #-36]
	for(uint8_t n = 0;n<5;n++){
 8001d80:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001d84:	3301      	adds	r3, #1
 8001d86:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8001d8a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d9e4      	bls.n	8001d5c <MPU6050_getPromModule+0x248>
	}
	for(uint8_t n = 0;n<4;n++){
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8001d98:	e033      	b.n	8001e02 <MPU6050_getPromModule+0x2ee>

		DataStruct->PromBuffer[n+1].Accel_Z_RAW = AuxBuffer[n];
 8001d9a:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	3330      	adds	r3, #48	@ 0x30
 8001da2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001da6:	4413      	add	r3, r2
 8001da8:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8001dac:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001db0:	3301      	adds	r3, #1
 8001db2:	b211      	sxth	r1, r2
 8001db4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001db6:	3304      	adds	r3, #4
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	4413      	add	r3, r2
 8001dbc:	3308      	adds	r3, #8
 8001dbe:	460a      	mov	r2, r1
 8001dc0:	801a      	strh	r2, [r3, #0]
		Buffer += DataStruct->PromBuffer[n].Accel_Z_RAW;
 8001dc2:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001dc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001dc8:	3304      	adds	r3, #4
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	4413      	add	r3, r2
 8001dce:	3308      	adds	r3, #8
 8001dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	17da      	asrs	r2, r3, #31
 8001dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dda:	637a      	str	r2, [r7, #52]	@ 0x34
 8001ddc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001de0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001de4:	4621      	mov	r1, r4
 8001de6:	1851      	adds	r1, r2, r1
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	4629      	mov	r1, r5
 8001dec:	414b      	adcs	r3, r1
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001df4:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	for(uint8_t n = 0;n<4;n++){
 8001df8:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8001e02:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d9c7      	bls.n	8001d9a <MPU6050_getPromModule+0x286>
	}
	DataStruct->PromBuffer[0].Accel_Z_RAW = DataStruct->Accel_Z_RAW;
 8001e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e0c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e12:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	Buffer += DataStruct->PromBuffer[0].Accel_Z_RAW;
 8001e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e18:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	17da      	asrs	r2, r3, #31
 8001e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e24:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001e28:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001e2c:	4621      	mov	r1, r4
 8001e2e:	1851      	adds	r1, r2, r1
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	4629      	mov	r1, r5
 8001e34:	eb43 0101 	adc.w	r1, r3, r1
 8001e38:	6079      	str	r1, [r7, #4]
 8001e3a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e3e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	DataStruct->Prom.Accel_Z_RAW = Buffer / 5;
 8001e42:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001e46:	f04f 0205 	mov.w	r2, #5
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	f7fe fe77 	bl	8000b40 <__aeabi_ldivmod>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	b212      	sxth	r2, r2
 8001e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e5a:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98


}
 8001e5e:	bf00      	nop
 8001e60:	3778      	adds	r7, #120	@ 0x78
 8001e62:	46bd      	mov	sp, r7
 8001e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001e68 <MPU6050_status>:

uint8_t MPU6050_status(void){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af04      	add	r7, sp, #16
	uint8_t check  = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	71fb      	strb	r3, [r7, #7]

	static uint8_t eCont1 = 0, eCont2 = 0;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001e76:	230a      	movs	r3, #10
 8001e78:	9302      	str	r3, [sp, #8]
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	1dbb      	adds	r3, r7, #6
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2301      	movs	r3, #1
 8001e84:	2275      	movs	r2, #117	@ 0x75
 8001e86:	21d0      	movs	r1, #208	@ 0xd0
 8001e88:	4822      	ldr	r0, [pc, #136]	@ (8001f14 <MPU6050_status+0xac>)
 8001e8a:	f004 fd3f 	bl	800690c <HAL_I2C_Mem_Read>
	if(check != 104){
 8001e8e:	79bb      	ldrb	r3, [r7, #6]
 8001e90:	2b68      	cmp	r3, #104	@ 0x68
 8001e92:	d011      	beq.n	8001eb8 <MPU6050_status+0x50>
		eCont1++;
 8001e94:	4b20      	ldr	r3, [pc, #128]	@ (8001f18 <MPU6050_status+0xb0>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f18 <MPU6050_status+0xb0>)
 8001e9e:	701a      	strb	r2, [r3, #0]
		if(eCont1 > 2){
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f18 <MPU6050_status+0xb0>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d90a      	bls.n	8001ebe <MPU6050_status+0x56>
			status |= 0x01;
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	71fb      	strb	r3, [r7, #7]
			eCont1 = 3;
 8001eb0:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <MPU6050_status+0xb0>)
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	e002      	b.n	8001ebe <MPU6050_status+0x56>
		}
	}
	else{
		eCont1 = 0;
 8001eb8:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <MPU6050_status+0xb0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
	}
	check = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001ec2:	230a      	movs	r3, #10
 8001ec4:	9302      	str	r3, [sp, #8]
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	1dbb      	adds	r3, r7, #6
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	2275      	movs	r2, #117	@ 0x75
 8001ed2:	21d0      	movs	r1, #208	@ 0xd0
 8001ed4:	4811      	ldr	r0, [pc, #68]	@ (8001f1c <MPU6050_status+0xb4>)
 8001ed6:	f004 fd19 	bl	800690c <HAL_I2C_Mem_Read>
	if(check != 104){
 8001eda:	79bb      	ldrb	r3, [r7, #6]
 8001edc:	2b68      	cmp	r3, #104	@ 0x68
 8001ede:	d011      	beq.n	8001f04 <MPU6050_status+0x9c>
		eCont2++;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <MPU6050_status+0xb8>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <MPU6050_status+0xb8>)
 8001eea:	701a      	strb	r2, [r3, #0]
		if(eCont1 > 2){
 8001eec:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <MPU6050_status+0xb0>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d90a      	bls.n	8001f0a <MPU6050_status+0xa2>
			status |= 0x01;
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	71fb      	strb	r3, [r7, #7]
			eCont2 = 3;
 8001efc:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <MPU6050_status+0xb8>)
 8001efe:	2203      	movs	r2, #3
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e002      	b.n	8001f0a <MPU6050_status+0xa2>
		}
	}
	else{
		eCont2 = 0;
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <MPU6050_status+0xb8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200008b8 	.word	0x200008b8
 8001f18:	200003b8 	.word	0x200003b8
 8001f1c:	2000090c 	.word	0x2000090c
 8001f20:	200003b9 	.word	0x200003b9

08001f24 <MPU6050_memoryRefresh>:

void MPU6050_memoryRefresh(void){
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
	MPU6050.Module_1.OffSet.Ax_Offset = MEMORY.str.MPU6050_1.Ax_Offset;
 8001f28:	4b26      	ldr	r3, [pc, #152]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f2e:	4b26      	ldr	r3, [pc, #152]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f30:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	MPU6050.Module_1.OffSet.Ay_Offset = MEMORY.str.MPU6050_1.Ay_Offset;
 8001f34:	4b23      	ldr	r3, [pc, #140]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f36:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001f3a:	4b23      	ldr	r3, [pc, #140]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f3c:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
	MPU6050.Module_1.OffSet.Az_Offset = MEMORY.str.MPU6050_1.Az_Offset;
 8001f40:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f42:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001f46:	4b20      	ldr	r3, [pc, #128]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f48:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8

	MPU6050.Module_1.OffSet.Gx_Offset = MEMORY.str.MPU6050_1.Gx_Offset;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f4e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001f52:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f54:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
	MPU6050.Module_1.OffSet.Gy_Offset = MEMORY.str.MPU6050_1.Gy_Offset;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f5a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f60:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	MPU6050.Module_1.OffSet.Gz_Offset = MEMORY.str.MPU6050_1.Gz_Offset;
 8001f64:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f66:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001f6a:	4b17      	ldr	r3, [pc, #92]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f6c:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae

	MPU6050.Module_2.OffSet.Ax_Offset = MEMORY.str.MPU6050_2.Ax_Offset;
 8001f70:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f72:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8001f76:	4b14      	ldr	r3, [pc, #80]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f78:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	MPU6050.Module_2.OffSet.Ay_Offset = MEMORY.str.MPU6050_2.Ay_Offset;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f7e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8001f82:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f84:	f8a3 2156 	strh.w	r2, [r3, #342]	@ 0x156
	MPU6050.Module_2.OffSet.Az_Offset = MEMORY.str.MPU6050_2.Az_Offset;
 8001f88:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f8a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f90:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158

	MPU6050.Module_2.OffSet.Gx_Offset = MEMORY.str.MPU6050_2.Gx_Offset;
 8001f94:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f96:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f9c:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a
	MPU6050.Module_2.OffSet.Gy_Offset = MEMORY.str.MPU6050_2.Gy_Offset;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001fa2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8001fa6:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001fa8:	f8a3 215c 	strh.w	r2, [r3, #348]	@ 0x15c
	MPU6050.Module_2.OffSet.Gz_Offset = MEMORY.str.MPU6050_2.Gz_Offset;
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001fae:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8001fb2:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001fb4:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000848 	.word	0x20000848
 8001fc8:	20000198 	.word	0x20000198

08001fcc <MPU6050_calibration>:

void MPU6050_calibration(void){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0



    MEMORY.str.MPU6050_1.Ax_Offset += MPU6050.Module_1.Accel_X_RAW;
 8001fd0:	4b53      	ldr	r3, [pc, #332]	@ (8002120 <MPU6050_calibration+0x154>)
 8001fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b52      	ldr	r3, [pc, #328]	@ (8002124 <MPU6050_calibration+0x158>)
 8001fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	b21a      	sxth	r2, r3
 8001fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8002120 <MPU6050_calibration+0x154>)
 8001fe8:	801a      	strh	r2, [r3, #0]
    MEMORY.str.MPU6050_1.Ay_Offset += MPU6050.Module_1.Accel_Y_RAW;
 8001fea:	4b4d      	ldr	r3, [pc, #308]	@ (8002120 <MPU6050_calibration+0x154>)
 8001fec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	4b4c      	ldr	r3, [pc, #304]	@ (8002124 <MPU6050_calibration+0x158>)
 8001ff4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	4b47      	ldr	r3, [pc, #284]	@ (8002120 <MPU6050_calibration+0x154>)
 8002002:	805a      	strh	r2, [r3, #2]
    MEMORY.str.MPU6050_1.Az_Offset += MPU6050.Module_1.Accel_Z_RAW - 2048;
 8002004:	4b46      	ldr	r3, [pc, #280]	@ (8002120 <MPU6050_calibration+0x154>)
 8002006:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800200a:	b29a      	uxth	r2, r3
 800200c:	4b45      	ldr	r3, [pc, #276]	@ (8002124 <MPU6050_calibration+0x158>)
 800200e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002012:	b29b      	uxth	r3, r3
 8002014:	4413      	add	r3, r2
 8002016:	b29b      	uxth	r3, r3
 8002018:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800201c:	b29b      	uxth	r3, r3
 800201e:	b21a      	sxth	r2, r3
 8002020:	4b3f      	ldr	r3, [pc, #252]	@ (8002120 <MPU6050_calibration+0x154>)
 8002022:	809a      	strh	r2, [r3, #4]

    MEMORY.str.MPU6050_2.Ax_Offset += MPU6050.Module_2.Accel_X_RAW;
 8002024:	4b3e      	ldr	r3, [pc, #248]	@ (8002120 <MPU6050_calibration+0x154>)
 8002026:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b3d      	ldr	r3, [pc, #244]	@ (8002124 <MPU6050_calibration+0x158>)
 800202e:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	@ 0xb0
 8002032:	b29b      	uxth	r3, r3
 8002034:	4413      	add	r3, r2
 8002036:	b29b      	uxth	r3, r3
 8002038:	b21a      	sxth	r2, r3
 800203a:	4b39      	ldr	r3, [pc, #228]	@ (8002120 <MPU6050_calibration+0x154>)
 800203c:	819a      	strh	r2, [r3, #12]
    MEMORY.str.MPU6050_2.Ay_Offset += MPU6050.Module_2.Accel_Y_RAW;
 800203e:	4b38      	ldr	r3, [pc, #224]	@ (8002120 <MPU6050_calibration+0x154>)
 8002040:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002044:	b29a      	uxth	r2, r3
 8002046:	4b37      	ldr	r3, [pc, #220]	@ (8002124 <MPU6050_calibration+0x158>)
 8002048:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	@ 0xb2
 800204c:	b29b      	uxth	r3, r3
 800204e:	4413      	add	r3, r2
 8002050:	b29b      	uxth	r3, r3
 8002052:	b21a      	sxth	r2, r3
 8002054:	4b32      	ldr	r3, [pc, #200]	@ (8002120 <MPU6050_calibration+0x154>)
 8002056:	81da      	strh	r2, [r3, #14]
    MEMORY.str.MPU6050_2.Az_Offset += MPU6050.Module_2.Accel_Z_RAW - 2048;
 8002058:	4b31      	ldr	r3, [pc, #196]	@ (8002120 <MPU6050_calibration+0x154>)
 800205a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b30      	ldr	r3, [pc, #192]	@ (8002124 <MPU6050_calibration+0x158>)
 8002062:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8002066:	b29b      	uxth	r3, r3
 8002068:	4413      	add	r3, r2
 800206a:	b29b      	uxth	r3, r3
 800206c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8002070:	b29b      	uxth	r3, r3
 8002072:	b21a      	sxth	r2, r3
 8002074:	4b2a      	ldr	r3, [pc, #168]	@ (8002120 <MPU6050_calibration+0x154>)
 8002076:	821a      	strh	r2, [r3, #16]

    MEMORY.str.MPU6050_1.Gx_Offset += MPU6050.Module_1.Gyro_X_RAW;
 8002078:	4b29      	ldr	r3, [pc, #164]	@ (8002120 <MPU6050_calibration+0x154>)
 800207a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800207e:	b29a      	uxth	r2, r3
 8002080:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <MPU6050_calibration+0x158>)
 8002082:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002086:	b29b      	uxth	r3, r3
 8002088:	4413      	add	r3, r2
 800208a:	b29b      	uxth	r3, r3
 800208c:	b21a      	sxth	r2, r3
 800208e:	4b24      	ldr	r3, [pc, #144]	@ (8002120 <MPU6050_calibration+0x154>)
 8002090:	80da      	strh	r2, [r3, #6]
    MEMORY.str.MPU6050_1.Gy_Offset += MPU6050.Module_1.Gyro_Y_RAW;
 8002092:	4b23      	ldr	r3, [pc, #140]	@ (8002120 <MPU6050_calibration+0x154>)
 8002094:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b22      	ldr	r3, [pc, #136]	@ (8002124 <MPU6050_calibration+0x158>)
 800209c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	b21a      	sxth	r2, r3
 80020a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <MPU6050_calibration+0x154>)
 80020aa:	811a      	strh	r2, [r3, #8]
    MEMORY.str.MPU6050_1.Gz_Offset += MPU6050.Module_1.Gyro_Z_RAW;
 80020ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002120 <MPU6050_calibration+0x154>)
 80020ae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <MPU6050_calibration+0x158>)
 80020b6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4413      	add	r3, r2
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	4b17      	ldr	r3, [pc, #92]	@ (8002120 <MPU6050_calibration+0x154>)
 80020c4:	815a      	strh	r2, [r3, #10]

    MEMORY.str.MPU6050_2.Gx_Offset += MPU6050.Module_2.Gyro_X_RAW;
 80020c6:	4b16      	ldr	r3, [pc, #88]	@ (8002120 <MPU6050_calibration+0x154>)
 80020c8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <MPU6050_calibration+0x158>)
 80020d0:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	b29b      	uxth	r3, r3
 80020da:	b21a      	sxth	r2, r3
 80020dc:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <MPU6050_calibration+0x154>)
 80020de:	825a      	strh	r2, [r3, #18]
    MEMORY.str.MPU6050_2.Gy_Offset += MPU6050.Module_2.Gyro_Y_RAW;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <MPU6050_calibration+0x154>)
 80020e2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <MPU6050_calibration+0x158>)
 80020ea:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	@ 0xd2
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	b21a      	sxth	r2, r3
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <MPU6050_calibration+0x154>)
 80020f8:	829a      	strh	r2, [r3, #20]
    MEMORY.str.MPU6050_2.Gz_Offset += MPU6050.Module_2.Gyro_Z_RAW;
 80020fa:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <MPU6050_calibration+0x154>)
 80020fc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002100:	b29a      	uxth	r2, r3
 8002102:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <MPU6050_calibration+0x158>)
 8002104:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	@ 0xd4
 8002108:	b29b      	uxth	r3, r3
 800210a:	4413      	add	r3, r2
 800210c:	b29b      	uxth	r3, r3
 800210e:	b21a      	sxth	r2, r3
 8002110:	4b03      	ldr	r3, [pc, #12]	@ (8002120 <MPU6050_calibration+0x154>)
 8002112:	82da      	strh	r2, [r3, #22]

    MPU6050_memoryRefresh();
 8002114:	f7ff ff06 	bl	8001f24 <MPU6050_memoryRefresh>
    MEMORY_write();
 8002118:	f000 ffda 	bl	80030d0 <MEMORY_write>
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000848 	.word	0x20000848
 8002124:	20000198 	.word	0x20000198

08002128 <MPU6050_Init_Module>:



uint8_t MPU6050_Init_Module(I2C_HandleTypeDef *I2Cx) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af04      	add	r7, sp, #16
 800212e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002130:	230a      	movs	r3, #10
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	2301      	movs	r3, #1
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	f107 030f 	add.w	r3, r7, #15
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2301      	movs	r3, #1
 8002140:	2275      	movs	r2, #117	@ 0x75
 8002142:	21d0      	movs	r1, #208	@ 0xd0
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f004 fbe1 	bl	800690c <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	2b68      	cmp	r3, #104	@ 0x68
 800214e:	d13d      	bne.n	80021cc <MPU6050_Init_Module+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002154:	230a      	movs	r3, #10
 8002156:	9302      	str	r3, [sp, #8]
 8002158:	2301      	movs	r3, #1
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	f107 030e 	add.w	r3, r7, #14
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2301      	movs	r3, #1
 8002164:	226b      	movs	r2, #107	@ 0x6b
 8002166:	21d0      	movs	r1, #208	@ 0xd0
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f004 fad5 	bl	8006718 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800216e:	2307      	movs	r3, #7
 8002170:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002172:	230a      	movs	r3, #10
 8002174:	9302      	str	r3, [sp, #8]
 8002176:	2301      	movs	r3, #1
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	f107 030e 	add.w	r3, r7, #14
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2301      	movs	r3, #1
 8002182:	2219      	movs	r2, #25
 8002184:	21d0      	movs	r1, #208	@ 0xd0
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f004 fac6 	bl	8006718 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x18;
 800218c:	2318      	movs	r3, #24
 800218e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002190:	230a      	movs	r3, #10
 8002192:	9302      	str	r3, [sp, #8]
 8002194:	2301      	movs	r3, #1
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	f107 030e 	add.w	r3, r7, #14
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2301      	movs	r3, #1
 80021a0:	221c      	movs	r2, #28
 80021a2:	21d0      	movs	r1, #208	@ 0xd0
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f004 fab7 	bl	8006718 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x18;
 80021aa:	2318      	movs	r3, #24
 80021ac:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80021ae:	230a      	movs	r3, #10
 80021b0:	9302      	str	r3, [sp, #8]
 80021b2:	2301      	movs	r3, #1
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	f107 030e 	add.w	r3, r7, #14
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2301      	movs	r3, #1
 80021be:	221b      	movs	r2, #27
 80021c0:	21d0      	movs	r1, #208	@ 0xd0
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f004 faa8 	bl	8006718 <HAL_I2C_Mem_Write>
        return 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e000      	b.n	80021ce <MPU6050_Init_Module+0xa6>
    }
    return 1;
 80021cc:	2301      	movs	r3, #1
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	@ 0x28
 80021dc:	af04      	add	r7, sp, #16
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80021e2:	230a      	movs	r3, #10
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	230e      	movs	r3, #14
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	f107 0308 	add.w	r3, r7, #8
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2301      	movs	r3, #1
 80021f2:	223b      	movs	r2, #59	@ 0x3b
 80021f4:	21d0      	movs	r1, #208	@ 0xd0
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f004 fb88 	bl	800690c <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = ((int16_t) (Rec_Data[0] << 8 | Rec_Data[1]) - DataStruct->OffSet.Ax_Offset);
 80021fc:	7a3b      	ldrb	r3, [r7, #8]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	b21a      	sxth	r2, r3
 8002202:	7a7b      	ldrb	r3, [r7, #9]
 8002204:	b21b      	sxth	r3, r3
 8002206:	4313      	orrs	r3, r2
 8002208:	b21b      	sxth	r3, r3
 800220a:	b29a      	uxth	r2, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	@ 0xa4
 8002212:	b29b      	uxth	r3, r3
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	b29b      	uxth	r3, r3
 8002218:	b21a      	sxth	r2, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = ((int16_t) (Rec_Data[2] << 8 | Rec_Data[3]) - DataStruct->OffSet.Ay_Offset);
 800221e:	7abb      	ldrb	r3, [r7, #10]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	b21a      	sxth	r2, r3
 8002224:	7afb      	ldrb	r3, [r7, #11]
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b21b      	sxth	r3, r3
 800222c:	b29a      	uxth	r2, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8002234:	b29b      	uxth	r3, r3
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	b29b      	uxth	r3, r3
 800223a:	b21a      	sxth	r2, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = ((int16_t) (Rec_Data[4] << 8 | Rec_Data[5]) - DataStruct->OffSet.Az_Offset);
 8002240:	7b3b      	ldrb	r3, [r7, #12]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	b21a      	sxth	r2, r3
 8002246:	7b7b      	ldrb	r3, [r7, #13]
 8002248:	b21b      	sxth	r3, r3
 800224a:	4313      	orrs	r3, r2
 800224c:	b21b      	sxth	r3, r3
 800224e:	b29a      	uxth	r2, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	@ 0xa8
 8002256:	b29b      	uxth	r3, r3
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	b29b      	uxth	r3, r3
 800225c:	b21a      	sxth	r2, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002262:	7bbb      	ldrb	r3, [r7, #14]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	b21a      	sxth	r2, r3
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	b21b      	sxth	r3, r3
 800226c:	4313      	orrs	r3, r2
 800226e:	82fb      	strh	r3, [r7, #22]
    DataStruct->Gyro_X_RAW = ((int16_t) (Rec_Data[8] << 8 | Rec_Data[9])  - DataStruct->OffSet.Gx_Offset);
 8002270:	7c3b      	ldrb	r3, [r7, #16]
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	b21a      	sxth	r2, r3
 8002276:	7c7b      	ldrb	r3, [r7, #17]
 8002278:	b21b      	sxth	r3, r3
 800227a:	4313      	orrs	r3, r2
 800227c:	b21b      	sxth	r3, r3
 800227e:	b29a      	uxth	r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 8002286:	b29b      	uxth	r3, r3
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	b29b      	uxth	r3, r3
 800228c:	b21a      	sxth	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = ((int16_t) (Rec_Data[10] << 8 | Rec_Data[11])- DataStruct->OffSet.Gy_Offset);
 8002292:	7cbb      	ldrb	r3, [r7, #18]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	b21a      	sxth	r2, r3
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	b21b      	sxth	r3, r3
 800229c:	4313      	orrs	r3, r2
 800229e:	b21b      	sxth	r3, r3
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	b21a      	sxth	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = ((int16_t) (Rec_Data[12] << 8 | Rec_Data[13])- DataStruct->OffSet.Gz_Offset);
 80022b4:	7d3b      	ldrb	r3, [r7, #20]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	b21a      	sxth	r2, r3
 80022ba:	7d7b      	ldrb	r3, [r7, #21]
 80022bc:	b21b      	sxth	r3, r3
 80022be:	4313      	orrs	r3, r2
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 2048.0;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f8cd 	bl	800047c <__aeabi_i2d>
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	4b38      	ldr	r3, [pc, #224]	@ (80023c8 <MPU6050_Read_All+0x1f0>)
 80022e8:	f7fe fa5c 	bl	80007a4 <__aeabi_ddiv>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	6839      	ldr	r1, [r7, #0]
 80022f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 2048.0;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f8bd 	bl	800047c <__aeabi_i2d>
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	4b30      	ldr	r3, [pc, #192]	@ (80023c8 <MPU6050_Read_All+0x1f0>)
 8002308:	f7fe fa4c 	bl	80007a4 <__aeabi_ddiv>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	6839      	ldr	r1, [r7, #0]
 8002312:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f8ad 	bl	800047c <__aeabi_i2d>
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	4b28      	ldr	r3, [pc, #160]	@ (80023c8 <MPU6050_Read_All+0x1f0>)
 8002328:	f7fe fa3c 	bl	80007a4 <__aeabi_ddiv>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002336:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002342:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80023cc <MPU6050_Read_All+0x1f4>
 8002346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800234a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80023d0 <MPU6050_Read_All+0x1f8>
 800234e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 16.4;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe f88c 	bl	800047c <__aeabi_i2d>
 8002364:	a316      	add	r3, pc, #88	@ (adr r3, 80023c0 <MPU6050_Read_All+0x1e8>)
 8002366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236a:	f7fe fa1b 	bl	80007a4 <__aeabi_ddiv>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	6839      	ldr	r1, [r7, #0]
 8002374:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 16.4;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f87c 	bl	800047c <__aeabi_i2d>
 8002384:	a30e      	add	r3, pc, #56	@ (adr r3, 80023c0 <MPU6050_Read_All+0x1e8>)
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	f7fe fa0b 	bl	80007a4 <__aeabi_ddiv>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 16.4;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f86c 	bl	800047c <__aeabi_i2d>
 80023a4:	a306      	add	r3, pc, #24	@ (adr r3, 80023c0 <MPU6050_Read_All+0x1e8>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	f7fe f9fb 	bl	80007a4 <__aeabi_ddiv>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	6839      	ldr	r1, [r7, #0]
 80023b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

}
 80023b8:	bf00      	nop
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	66666666 	.word	0x66666666
 80023c4:	40306666 	.word	0x40306666
 80023c8:	40a00000 	.word	0x40a00000
 80023cc:	43aa0000 	.word	0x43aa0000
 80023d0:	42121eb8 	.word	0x42121eb8

080023d4 <MPU6050_Init>:



void MPU6050_Init(void){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0

	MPU6050_Init_Module(&hi2c1);
 80023d8:	4804      	ldr	r0, [pc, #16]	@ (80023ec <MPU6050_Init+0x18>)
 80023da:	f7ff fea5 	bl	8002128 <MPU6050_Init_Module>
	MPU6050_Init_Module(&hi2c2);
 80023de:	4804      	ldr	r0, [pc, #16]	@ (80023f0 <MPU6050_Init+0x1c>)
 80023e0:	f7ff fea2 	bl	8002128 <MPU6050_Init_Module>
	MPU6050_memoryRefresh();
 80023e4:	f7ff fd9e 	bl	8001f24 <MPU6050_memoryRefresh>

}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200008b8 	.word	0x200008b8
 80023f0:	2000090c 	.word	0x2000090c

080023f4 <Refresh_data>:
extern BMP280_t BMP280;

char pahtName[7] = "Data000";
char fileName[] = "FD000.csv";

void Refresh_data(void){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
	BLACKBOX.AccX = (int16_t)(MPU6050.Data.Ax*100);
 80023f8:	4b48      	ldr	r3, [pc, #288]	@ (800251c <Refresh_data+0x128>)
 80023fa:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	@ 0x168
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	4b47      	ldr	r3, [pc, #284]	@ (8002520 <Refresh_data+0x12c>)
 8002404:	f7fe f8a4 	bl	8000550 <__aeabi_dmul>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	f7fe fb4e 	bl	8000ab0 <__aeabi_d2iz>
 8002414:	4603      	mov	r3, r0
 8002416:	b21a      	sxth	r2, r3
 8002418:	4b42      	ldr	r3, [pc, #264]	@ (8002524 <Refresh_data+0x130>)
 800241a:	801a      	strh	r2, [r3, #0]
	BLACKBOX.AccY = (int16_t)(MPU6050.Data.Ay*100);
 800241c:	4b3f      	ldr	r3, [pc, #252]	@ (800251c <Refresh_data+0x128>)
 800241e:	e9d3 015c 	ldrd	r0, r1, [r3, #368]	@ 0x170
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	4b3e      	ldr	r3, [pc, #248]	@ (8002520 <Refresh_data+0x12c>)
 8002428:	f7fe f892 	bl	8000550 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7fe fb3c 	bl	8000ab0 <__aeabi_d2iz>
 8002438:	4603      	mov	r3, r0
 800243a:	b21a      	sxth	r2, r3
 800243c:	4b39      	ldr	r3, [pc, #228]	@ (8002524 <Refresh_data+0x130>)
 800243e:	805a      	strh	r2, [r3, #2]
	BLACKBOX.AccZ = (int16_t)(MPU6050.Data.Az*100);
 8002440:	4b36      	ldr	r3, [pc, #216]	@ (800251c <Refresh_data+0x128>)
 8002442:	e9d3 015e 	ldrd	r0, r1, [r3, #376]	@ 0x178
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	4b35      	ldr	r3, [pc, #212]	@ (8002520 <Refresh_data+0x12c>)
 800244c:	f7fe f880 	bl	8000550 <__aeabi_dmul>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	f7fe fb2a 	bl	8000ab0 <__aeabi_d2iz>
 800245c:	4603      	mov	r3, r0
 800245e:	b21a      	sxth	r2, r3
 8002460:	4b30      	ldr	r3, [pc, #192]	@ (8002524 <Refresh_data+0x130>)
 8002462:	809a      	strh	r2, [r3, #4]
	BLACKBOX.GyroX = (int16_t)(MPU6050.Data.Gx*100);
 8002464:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <Refresh_data+0x128>)
 8002466:	e9d3 0162 	ldrd	r0, r1, [r3, #392]	@ 0x188
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	4b2c      	ldr	r3, [pc, #176]	@ (8002520 <Refresh_data+0x12c>)
 8002470:	f7fe f86e 	bl	8000550 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f7fe fb18 	bl	8000ab0 <__aeabi_d2iz>
 8002480:	4603      	mov	r3, r0
 8002482:	b21a      	sxth	r2, r3
 8002484:	4b27      	ldr	r3, [pc, #156]	@ (8002524 <Refresh_data+0x130>)
 8002486:	80da      	strh	r2, [r3, #6]
	BLACKBOX.GyroY = (int16_t)(MPU6050.Data.Gy*100);
 8002488:	4b24      	ldr	r3, [pc, #144]	@ (800251c <Refresh_data+0x128>)
 800248a:	e9d3 0164 	ldrd	r0, r1, [r3, #400]	@ 0x190
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b23      	ldr	r3, [pc, #140]	@ (8002520 <Refresh_data+0x12c>)
 8002494:	f7fe f85c 	bl	8000550 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fb06 	bl	8000ab0 <__aeabi_d2iz>
 80024a4:	4603      	mov	r3, r0
 80024a6:	b21a      	sxth	r2, r3
 80024a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002524 <Refresh_data+0x130>)
 80024aa:	811a      	strh	r2, [r3, #8]
	BLACKBOX.GyroZ = (int16_t)(MPU6050.Data.Gz*100);
 80024ac:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <Refresh_data+0x128>)
 80024ae:	e9d3 0166 	ldrd	r0, r1, [r3, #408]	@ 0x198
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <Refresh_data+0x12c>)
 80024b8:	f7fe f84a 	bl	8000550 <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe faf4 	bl	8000ab0 <__aeabi_d2iz>
 80024c8:	4603      	mov	r3, r0
 80024ca:	b21a      	sxth	r2, r3
 80024cc:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <Refresh_data+0x130>)
 80024ce:	815a      	strh	r2, [r3, #10]
	BLACKBOX.AngX = (int16_t)(MPU6050.KalmanAngleX*100);
 80024d0:	4b12      	ldr	r3, [pc, #72]	@ (800251c <Refresh_data+0x128>)
 80024d2:	e9d3 0184 	ldrd	r0, r1, [r3, #528]	@ 0x210
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <Refresh_data+0x12c>)
 80024dc:	f7fe f838 	bl	8000550 <__aeabi_dmul>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	f7fe fae2 	bl	8000ab0 <__aeabi_d2iz>
 80024ec:	4603      	mov	r3, r0
 80024ee:	b21a      	sxth	r2, r3
 80024f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <Refresh_data+0x130>)
 80024f2:	819a      	strh	r2, [r3, #12]
	BLACKBOX.AngY = (int16_t)(MPU6050.KalmanAngleY*100);
 80024f4:	4b09      	ldr	r3, [pc, #36]	@ (800251c <Refresh_data+0x128>)
 80024f6:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	@ 0x218
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <Refresh_data+0x12c>)
 8002500:	f7fe f826 	bl	8000550 <__aeabi_dmul>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f7fe fad0 	bl	8000ab0 <__aeabi_d2iz>
 8002510:	4603      	mov	r3, r0
 8002512:	b21a      	sxth	r2, r3
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <Refresh_data+0x130>)
 8002516:	81da      	strh	r2, [r3, #14]

}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000198 	.word	0x20000198
 8002520:	40590000 	.word	0x40590000
 8002524:	20000824 	.word	0x20000824

08002528 <Get_NewDir>:

void Get_NewDir(void){
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
	uint8_t Buffer;
	Buffer = MEMORY.str.STATUS.Reset_Number;
 800252e:	4b27      	ldr	r3, [pc, #156]	@ (80025cc <Get_NewDir+0xa4>)
 8002530:	7f1b      	ldrb	r3, [r3, #28]
 8002532:	71fb      	strb	r3, [r7, #7]


	pahtName[4] = Buffer/100 + 48;
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	4a26      	ldr	r2, [pc, #152]	@ (80025d0 <Get_NewDir+0xa8>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3330      	adds	r3, #48	@ 0x30
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b23      	ldr	r3, [pc, #140]	@ (80025d4 <Get_NewDir+0xac>)
 8002546:	711a      	strb	r2, [r3, #4]
	Buffer = Buffer - (Buffer/100)*100;
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	4a21      	ldr	r2, [pc, #132]	@ (80025d0 <Get_NewDir+0xa8>)
 800254c:	fba2 2303 	umull	r2, r3, r2, r3
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	b2db      	uxtb	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	0092      	lsls	r2, r2, #2
 8002558:	441a      	add	r2, r3
 800255a:	00d2      	lsls	r2, r2, #3
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	b2da      	uxtb	r2, r3
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	4413      	add	r3, r2
 8002566:	71fb      	strb	r3, [r7, #7]
	pahtName[5]= Buffer/10 + 48;
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	4a1b      	ldr	r2, [pc, #108]	@ (80025d8 <Get_NewDir+0xb0>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	3330      	adds	r3, #48	@ 0x30
 8002576:	b2da      	uxtb	r2, r3
 8002578:	4b16      	ldr	r3, [pc, #88]	@ (80025d4 <Get_NewDir+0xac>)
 800257a:	715a      	strb	r2, [r3, #5]
	Buffer = Buffer - (Buffer/10)*10;
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	4a16      	ldr	r2, [pc, #88]	@ (80025d8 <Get_NewDir+0xb0>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	08db      	lsrs	r3, r3, #3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	0152      	lsls	r2, r2, #5
 800258c:	1ad2      	subs	r2, r2, r3
 800258e:	0092      	lsls	r2, r2, #2
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	b2da      	uxtb	r2, r3
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	4413      	add	r3, r2
 800259a:	71fb      	strb	r3, [r7, #7]
	pahtName[6] = Buffer + 48;
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	3330      	adds	r3, #48	@ 0x30
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <Get_NewDir+0xac>)
 80025a4:	719a      	strb	r2, [r3, #6]

	fresult = f_mkdir(pahtName);
 80025a6:	480b      	ldr	r0, [pc, #44]	@ (80025d4 <Get_NewDir+0xac>)
 80025a8:	f00a fbfe 	bl	800cda8 <f_mkdir>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <Get_NewDir+0xb4>)
 80025b2:	701a      	strb	r2, [r3, #0]
	fresult = f_chdir(pahtName);
 80025b4:	4807      	ldr	r0, [pc, #28]	@ (80025d4 <Get_NewDir+0xac>)
 80025b6:	f00a f9a4 	bl	800c902 <f_chdir>
 80025ba:	4603      	mov	r3, r0
 80025bc:	461a      	mov	r2, r3
 80025be:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <Get_NewDir+0xb4>)
 80025c0:	701a      	strb	r2, [r3, #0]
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000848 	.word	0x20000848
 80025d0:	51eb851f 	.word	0x51eb851f
 80025d4:	20000000 	.word	0x20000000
 80025d8:	cccccccd 	.word	0xcccccccd
 80025dc:	20000820 	.word	0x20000820

080025e0 <BLACKBOX_Init>:

void BLACKBOX_Init(void){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 80025e4:	2201      	movs	r2, #1
 80025e6:	4911      	ldr	r1, [pc, #68]	@ (800262c <BLACKBOX_Init+0x4c>)
 80025e8:	4811      	ldr	r0, [pc, #68]	@ (8002630 <BLACKBOX_Init+0x50>)
 80025ea:	f009 fd6d 	bl	800c0c8 <f_mount>
 80025ee:	4603      	mov	r3, r0
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b10      	ldr	r3, [pc, #64]	@ (8002634 <BLACKBOX_Init+0x54>)
 80025f4:	701a      	strb	r2, [r3, #0]
	  Get_NewDir();
 80025f6:	f7ff ff97 	bl	8002528 <Get_NewDir>
	  f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80025fa:	2213      	movs	r2, #19
 80025fc:	490e      	ldr	r1, [pc, #56]	@ (8002638 <BLACKBOX_Init+0x58>)
 80025fe:	480f      	ldr	r0, [pc, #60]	@ (800263c <BLACKBOX_Init+0x5c>)
 8002600:	f009 fda8 	bl	800c154 <f_open>
	  fresult = f_lseek(&fil , f_size(&fil));
 8002604:	4b0d      	ldr	r3, [pc, #52]	@ (800263c <BLACKBOX_Init+0x5c>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4619      	mov	r1, r3
 800260a:	480c      	ldr	r0, [pc, #48]	@ (800263c <BLACKBOX_Init+0x5c>)
 800260c:	f00a f9c3 	bl	800c996 <f_lseek>
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	4b07      	ldr	r3, [pc, #28]	@ (8002634 <BLACKBOX_Init+0x54>)
 8002616:	701a      	strb	r2, [r3, #0]
	  f_printf(&fil,"Nmsg,AccX,AccY,AccZ,GyroX,GyroY,GyroZ,AngX,AngY,Alt,Pressure,Temp,Parachute,Peripheral\n");
 8002618:	4909      	ldr	r1, [pc, #36]	@ (8002640 <BLACKBOX_Init+0x60>)
 800261a:	4808      	ldr	r0, [pc, #32]	@ (800263c <BLACKBOX_Init+0x5c>)
 800261c:	f00a fd50 	bl	800d0c0 <f_printf>
	  f_close(&fil);
 8002620:	4806      	ldr	r0, [pc, #24]	@ (800263c <BLACKBOX_Init+0x5c>)
 8002622:	f00a f944 	bl	800c8ae <f_close>
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	0800e118 	.word	0x0800e118
 8002630:	200003bc 	.word	0x200003bc
 8002634:	20000820 	.word	0x20000820
 8002638:	20000008 	.word	0x20000008
 800263c:	200005f0 	.word	0x200005f0
 8002640:	0800e11c 	.word	0x0800e11c

08002644 <BLACKBOX_NewFile>:

void BLACKBOX_NewFile(void){
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	  f_close(&fil);
 8002648:	4820      	ldr	r0, [pc, #128]	@ (80026cc <BLACKBOX_NewFile+0x88>)
 800264a:	f00a f930 	bl	800c8ae <f_close>
	  static uint8_t r,r2,r3 = 0;
	  r++;
 800264e:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <BLACKBOX_NewFile+0x8c>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	3301      	adds	r3, #1
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <BLACKBOX_NewFile+0x8c>)
 8002658:	701a      	strb	r2, [r3, #0]
	  fileName[4] = 48+r;
 800265a:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <BLACKBOX_NewFile+0x8c>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	3330      	adds	r3, #48	@ 0x30
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4b1c      	ldr	r3, [pc, #112]	@ (80026d4 <BLACKBOX_NewFile+0x90>)
 8002664:	711a      	strb	r2, [r3, #4]
	  if(r==10){
 8002666:	4b1a      	ldr	r3, [pc, #104]	@ (80026d0 <BLACKBOX_NewFile+0x8c>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b0a      	cmp	r3, #10
 800266c:	d127      	bne.n	80026be <BLACKBOX_NewFile+0x7a>
		  r2++;
 800266e:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <BLACKBOX_NewFile+0x94>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	3301      	adds	r3, #1
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <BLACKBOX_NewFile+0x94>)
 8002678:	701a      	strb	r2, [r3, #0]
		  r=0;
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <BLACKBOX_NewFile+0x8c>)
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
		  fileName[3] = 48 + r2;
 8002680:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <BLACKBOX_NewFile+0x94>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	3330      	adds	r3, #48	@ 0x30
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <BLACKBOX_NewFile+0x90>)
 800268a:	70da      	strb	r2, [r3, #3]
		  fileName[2] = 48;
 800268c:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <BLACKBOX_NewFile+0x90>)
 800268e:	2230      	movs	r2, #48	@ 0x30
 8002690:	709a      	strb	r2, [r3, #2]
		  if(r2==10){
 8002692:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <BLACKBOX_NewFile+0x94>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b0a      	cmp	r3, #10
 8002698:	d111      	bne.n	80026be <BLACKBOX_NewFile+0x7a>
			  r3++;
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <BLACKBOX_NewFile+0x98>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <BLACKBOX_NewFile+0x98>)
 80026a4:	701a      	strb	r2, [r3, #0]
			  r2=0;
 80026a6:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <BLACKBOX_NewFile+0x94>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
			  fileName[4] = 48 + r3;
 80026ac:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <BLACKBOX_NewFile+0x98>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	3330      	adds	r3, #48	@ 0x30
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	4b07      	ldr	r3, [pc, #28]	@ (80026d4 <BLACKBOX_NewFile+0x90>)
 80026b6:	711a      	strb	r2, [r3, #4]
			  fileName[3] = 48;
 80026b8:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <BLACKBOX_NewFile+0x90>)
 80026ba:	2230      	movs	r2, #48	@ 0x30
 80026bc:	70da      	strb	r2, [r3, #3]
		  }
	  }
	  f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80026be:	2213      	movs	r2, #19
 80026c0:	4904      	ldr	r1, [pc, #16]	@ (80026d4 <BLACKBOX_NewFile+0x90>)
 80026c2:	4802      	ldr	r0, [pc, #8]	@ (80026cc <BLACKBOX_NewFile+0x88>)
 80026c4:	f009 fd46 	bl	800c154 <f_open>
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	200005f0 	.word	0x200005f0
 80026d0:	2000083a 	.word	0x2000083a
 80026d4:	20000008 	.word	0x20000008
 80026d8:	2000083b 	.word	0x2000083b
 80026dc:	2000083c 	.word	0x2000083c

080026e0 <BLACKBOX_StoreData>:

void BLACKBOX_StoreData(void){
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e2:	b093      	sub	sp, #76	@ 0x4c
 80026e4:	af0c      	add	r7, sp, #48	@ 0x30
	static uint32_t N_MSG = 0;
	static uint16_t RstCont = 0;
	static uint8_t SaveChanges = 100;

	if(RstCont>=48000){
 80026e6:	4b3c      	ldr	r3, [pc, #240]	@ (80027d8 <BLACKBOX_StoreData+0xf8>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d904      	bls.n	80026fc <BLACKBOX_StoreData+0x1c>
		BLACKBOX_NewFile();
 80026f2:	f7ff ffa7 	bl	8002644 <BLACKBOX_NewFile>
		RstCont = 0;
 80026f6:	4b38      	ldr	r3, [pc, #224]	@ (80027d8 <BLACKBOX_StoreData+0xf8>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	801a      	strh	r2, [r3, #0]
	}

	if(SaveChanges == 100){
 80026fc:	4b37      	ldr	r3, [pc, #220]	@ (80027dc <BLACKBOX_StoreData+0xfc>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b64      	cmp	r3, #100	@ 0x64
 8002702:	d10a      	bne.n	800271a <BLACKBOX_StoreData+0x3a>
		f_close(&fil);
 8002704:	4836      	ldr	r0, [pc, #216]	@ (80027e0 <BLACKBOX_StoreData+0x100>)
 8002706:	f00a f8d2 	bl	800c8ae <f_close>
		f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800270a:	2213      	movs	r2, #19
 800270c:	4935      	ldr	r1, [pc, #212]	@ (80027e4 <BLACKBOX_StoreData+0x104>)
 800270e:	4834      	ldr	r0, [pc, #208]	@ (80027e0 <BLACKBOX_StoreData+0x100>)
 8002710:	f009 fd20 	bl	800c154 <f_open>
		SaveChanges = 0;
 8002714:	4b31      	ldr	r3, [pc, #196]	@ (80027dc <BLACKBOX_StoreData+0xfc>)
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
	}
	Refresh_data();
 800271a:	f7ff fe6b 	bl	80023f4 <Refresh_data>
	f_lseek(&fil , f_size(&fil));
 800271e:	4b30      	ldr	r3, [pc, #192]	@ (80027e0 <BLACKBOX_StoreData+0x100>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	4619      	mov	r1, r3
 8002724:	482e      	ldr	r0, [pc, #184]	@ (80027e0 <BLACKBOX_StoreData+0x100>)
 8002726:	f00a f936 	bl	800c996 <f_lseek>
	f_printf(&fil,"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",N_MSG,BLACKBOX.AccX,BLACKBOX.AccY,BLACKBOX.AccZ,BLACKBOX.GyroX,BLACKBOX.GyroY,BLACKBOX.GyroZ,BLACKBOX.AngX,BLACKBOX.AngY,BMP280.Barometric_Altitude\
 800272a:	4b2f      	ldr	r3, [pc, #188]	@ (80027e8 <BLACKBOX_StoreData+0x108>)
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	4b2f      	ldr	r3, [pc, #188]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002734:	469c      	mov	ip, r3
 8002736:	4b2d      	ldr	r3, [pc, #180]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002738:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800273c:	461c      	mov	r4, r3
 800273e:	4b2b      	ldr	r3, [pc, #172]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002740:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002744:	461d      	mov	r5, r3
 8002746:	4b29      	ldr	r3, [pc, #164]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002748:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800274c:	461e      	mov	r6, r3
 800274e:	4b27      	ldr	r3, [pc, #156]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002750:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	4b25      	ldr	r3, [pc, #148]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002758:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b23      	ldr	r3, [pc, #140]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002760:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b21      	ldr	r3, [pc, #132]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002768:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <BLACKBOX_StoreData+0x110>)
 8002770:	8a1b      	ldrh	r3, [r3, #16]
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	4b1e      	ldr	r3, [pc, #120]	@ (80027f0 <BLACKBOX_StoreData+0x110>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a1d      	ldr	r2, [pc, #116]	@ (80027f0 <BLACKBOX_StoreData+0x110>)
 800277a:	6852      	ldr	r2, [r2, #4]
 800277c:	481d      	ldr	r0, [pc, #116]	@ (80027f4 <BLACKBOX_StoreData+0x114>)
 800277e:	7800      	ldrb	r0, [r0, #0]
 8002780:	900a      	str	r0, [sp, #40]	@ 0x28
 8002782:	9209      	str	r2, [sp, #36]	@ 0x24
 8002784:	9308      	str	r3, [sp, #32]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	9207      	str	r2, [sp, #28]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	9206      	str	r2, [sp, #24]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	9205      	str	r2, [sp, #20]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	9204      	str	r2, [sp, #16]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	9303      	str	r3, [sp, #12]
 800279a:	9602      	str	r6, [sp, #8]
 800279c:	9501      	str	r5, [sp, #4]
 800279e:	9400      	str	r4, [sp, #0]
 80027a0:	4663      	mov	r3, ip
 80027a2:	460a      	mov	r2, r1
 80027a4:	4914      	ldr	r1, [pc, #80]	@ (80027f8 <BLACKBOX_StoreData+0x118>)
 80027a6:	480e      	ldr	r0, [pc, #56]	@ (80027e0 <BLACKBOX_StoreData+0x100>)
 80027a8:	f00a fc8a 	bl	800d0c0 <f_printf>
			,BMP280.Pressure,BMP280.Temp, Parachute_Status);

	N_MSG++;
 80027ac:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <BLACKBOX_StoreData+0x108>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	4a0d      	ldr	r2, [pc, #52]	@ (80027e8 <BLACKBOX_StoreData+0x108>)
 80027b4:	6013      	str	r3, [r2, #0]
	SaveChanges++;
 80027b6:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <BLACKBOX_StoreData+0xfc>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	3301      	adds	r3, #1
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <BLACKBOX_StoreData+0xfc>)
 80027c0:	701a      	strb	r2, [r3, #0]
	RstCont++;
 80027c2:	4b05      	ldr	r3, [pc, #20]	@ (80027d8 <BLACKBOX_StoreData+0xf8>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <BLACKBOX_StoreData+0xf8>)
 80027cc:	801a      	strh	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000083e 	.word	0x2000083e
 80027dc:	20000012 	.word	0x20000012
 80027e0:	200005f0 	.word	0x200005f0
 80027e4:	20000008 	.word	0x20000008
 80027e8:	20000840 	.word	0x20000840
 80027ec:	20000824 	.word	0x20000824
 80027f0:	2000014c 	.word	0x2000014c
 80027f4:	20000869 	.word	0x20000869
 80027f8:	0800e174 	.word	0x0800e174

080027fc <get_ACC>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

void get_ACC(void){
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0


	if(!(SYSTEM_STATUS.peripheral_Flags & (MPU60501_ERRORMASK | MPU60502_ERRORMASK))){
 8002800:	4bb1      	ldr	r3, [pc, #708]	@ (8002ac8 <get_ACC+0x2cc>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b00      	cmp	r3, #0
 800280a:	f040 8102 	bne.w	8002a12 <get_ACC+0x216>
		MPU6050_Read_All(&hi2c1, &MPU6050.Module_1);
 800280e:	49af      	ldr	r1, [pc, #700]	@ (8002acc <get_ACC+0x2d0>)
 8002810:	48af      	ldr	r0, [pc, #700]	@ (8002ad0 <get_ACC+0x2d4>)
 8002812:	f7ff fce1 	bl	80021d8 <MPU6050_Read_All>
		MPU6050_Read_All(&hi2c2, &MPU6050.Module_2);
 8002816:	49af      	ldr	r1, [pc, #700]	@ (8002ad4 <get_ACC+0x2d8>)
 8002818:	48af      	ldr	r0, [pc, #700]	@ (8002ad8 <get_ACC+0x2dc>)
 800281a:	f7ff fcdd 	bl	80021d8 <MPU6050_Read_All>

		MPU6050_getPromModule(&MPU6050.Module_1);
 800281e:	48ab      	ldr	r0, [pc, #684]	@ (8002acc <get_ACC+0x2d0>)
 8002820:	f7ff f978 	bl	8001b14 <MPU6050_getPromModule>
		MPU6050_getPromModule(&MPU6050.Module_2);
 8002824:	48ab      	ldr	r0, [pc, #684]	@ (8002ad4 <get_ACC+0x2d8>)
 8002826:	f7ff f975 	bl	8001b14 <MPU6050_getPromModule>

		MPU6050.Data.Accel_X_RAW = (MPU6050.Module_1.Accel_X_RAW + MPU6050.Module_2.Accel_X_RAW)/2;
 800282a:	4ba8      	ldr	r3, [pc, #672]	@ (8002acc <get_ACC+0x2d0>)
 800282c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002830:	461a      	mov	r2, r3
 8002832:	4ba6      	ldr	r3, [pc, #664]	@ (8002acc <get_ACC+0x2d0>)
 8002834:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	@ 0xb0
 8002838:	4413      	add	r3, r2
 800283a:	0fda      	lsrs	r2, r3, #31
 800283c:	4413      	add	r3, r2
 800283e:	105b      	asrs	r3, r3, #1
 8002840:	b21a      	sxth	r2, r3
 8002842:	4ba2      	ldr	r3, [pc, #648]	@ (8002acc <get_ACC+0x2d0>)
 8002844:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
		MPU6050.Data.Accel_Y_RAW = (MPU6050.Module_1.Accel_Y_RAW + MPU6050.Module_2.Accel_Y_RAW)/2;
 8002848:	4ba0      	ldr	r3, [pc, #640]	@ (8002acc <get_ACC+0x2d0>)
 800284a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800284e:	461a      	mov	r2, r3
 8002850:	4b9e      	ldr	r3, [pc, #632]	@ (8002acc <get_ACC+0x2d0>)
 8002852:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	@ 0xb2
 8002856:	4413      	add	r3, r2
 8002858:	0fda      	lsrs	r2, r3, #31
 800285a:	4413      	add	r3, r2
 800285c:	105b      	asrs	r3, r3, #1
 800285e:	b21a      	sxth	r2, r3
 8002860:	4b9a      	ldr	r3, [pc, #616]	@ (8002acc <get_ACC+0x2d0>)
 8002862:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		MPU6050.Data.Accel_Z_RAW = (MPU6050.Module_1.Accel_Z_RAW + MPU6050.Module_2.Accel_Z_RAW)/2;
 8002866:	4b99      	ldr	r3, [pc, #612]	@ (8002acc <get_ACC+0x2d0>)
 8002868:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800286c:	461a      	mov	r2, r3
 800286e:	4b97      	ldr	r3, [pc, #604]	@ (8002acc <get_ACC+0x2d0>)
 8002870:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8002874:	4413      	add	r3, r2
 8002876:	0fda      	lsrs	r2, r3, #31
 8002878:	4413      	add	r3, r2
 800287a:	105b      	asrs	r3, r3, #1
 800287c:	b21a      	sxth	r2, r3
 800287e:	4b93      	ldr	r3, [pc, #588]	@ (8002acc <get_ACC+0x2d0>)
 8002880:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

		MPU6050.Data.Gyro_X_RAW  = (MPU6050.Module_1.Gyro_X_RAW + MPU6050.Module_2.Gyro_X_RAW)/2;
 8002884:	4b91      	ldr	r3, [pc, #580]	@ (8002acc <get_ACC+0x2d0>)
 8002886:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800288a:	461a      	mov	r2, r3
 800288c:	4b8f      	ldr	r3, [pc, #572]	@ (8002acc <get_ACC+0x2d0>)
 800288e:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 8002892:	4413      	add	r3, r2
 8002894:	0fda      	lsrs	r2, r3, #31
 8002896:	4413      	add	r3, r2
 8002898:	105b      	asrs	r3, r3, #1
 800289a:	b21a      	sxth	r2, r3
 800289c:	4b8b      	ldr	r3, [pc, #556]	@ (8002acc <get_ACC+0x2d0>)
 800289e:	f8a3 2180 	strh.w	r2, [r3, #384]	@ 0x180
		MPU6050.Data.Gyro_Y_RAW  = (MPU6050.Module_1.Gyro_Y_RAW + MPU6050.Module_2.Gyro_Y_RAW)/2;
 80028a2:	4b8a      	ldr	r3, [pc, #552]	@ (8002acc <get_ACC+0x2d0>)
 80028a4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b88      	ldr	r3, [pc, #544]	@ (8002acc <get_ACC+0x2d0>)
 80028ac:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	@ 0xd2
 80028b0:	4413      	add	r3, r2
 80028b2:	0fda      	lsrs	r2, r3, #31
 80028b4:	4413      	add	r3, r2
 80028b6:	105b      	asrs	r3, r3, #1
 80028b8:	b21a      	sxth	r2, r3
 80028ba:	4b84      	ldr	r3, [pc, #528]	@ (8002acc <get_ACC+0x2d0>)
 80028bc:	f8a3 2182 	strh.w	r2, [r3, #386]	@ 0x182
		MPU6050.Data.Gyro_Z_RAW  = (MPU6050.Module_1.Gyro_Z_RAW + MPU6050.Module_2.Gyro_Z_RAW)/2;
 80028c0:	4b82      	ldr	r3, [pc, #520]	@ (8002acc <get_ACC+0x2d0>)
 80028c2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80028c6:	461a      	mov	r2, r3
 80028c8:	4b80      	ldr	r3, [pc, #512]	@ (8002acc <get_ACC+0x2d0>)
 80028ca:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	@ 0xd4
 80028ce:	4413      	add	r3, r2
 80028d0:	0fda      	lsrs	r2, r3, #31
 80028d2:	4413      	add	r3, r2
 80028d4:	105b      	asrs	r3, r3, #1
 80028d6:	b21a      	sxth	r2, r3
 80028d8:	4b7c      	ldr	r3, [pc, #496]	@ (8002acc <get_ACC+0x2d0>)
 80028da:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

		MPU6050.Data.Ax			 = (MPU6050.Module_1.Ax + MPU6050.Module_2.Ax)/2;
 80028de:	4b7b      	ldr	r3, [pc, #492]	@ (8002acc <get_ACC+0x2d0>)
 80028e0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80028e4:	4b79      	ldr	r3, [pc, #484]	@ (8002acc <get_ACC+0x2d0>)
 80028e6:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 80028ea:	f7fd fc7b 	bl	80001e4 <__adddf3>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80028fe:	f7fd ff51 	bl	80007a4 <__aeabi_ddiv>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4971      	ldr	r1, [pc, #452]	@ (8002acc <get_ACC+0x2d0>)
 8002908:	e9c1 235a 	strd	r2, r3, [r1, #360]	@ 0x168
		MPU6050.Data.Ay			 = (MPU6050.Module_1.Ay + MPU6050.Module_2.Ay)/2;
 800290c:	4b6f      	ldr	r3, [pc, #444]	@ (8002acc <get_ACC+0x2d0>)
 800290e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002912:	4b6e      	ldr	r3, [pc, #440]	@ (8002acc <get_ACC+0x2d0>)
 8002914:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8002918:	f7fd fc64 	bl	80001e4 <__adddf3>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800292c:	f7fd ff3a 	bl	80007a4 <__aeabi_ddiv>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4965      	ldr	r1, [pc, #404]	@ (8002acc <get_ACC+0x2d0>)
 8002936:	e9c1 235c 	strd	r2, r3, [r1, #368]	@ 0x170
		MPU6050.Data.Az			 = (MPU6050.Module_1.Az + MPU6050.Module_2.Az)/2;
 800293a:	4b64      	ldr	r3, [pc, #400]	@ (8002acc <get_ACC+0x2d0>)
 800293c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002940:	4b62      	ldr	r3, [pc, #392]	@ (8002acc <get_ACC+0x2d0>)
 8002942:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8002946:	f7fd fc4d 	bl	80001e4 <__adddf3>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800295a:	f7fd ff23 	bl	80007a4 <__aeabi_ddiv>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	495a      	ldr	r1, [pc, #360]	@ (8002acc <get_ACC+0x2d0>)
 8002964:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178

		MPU6050.Data.Gx			 = (MPU6050.Module_1.Gx + MPU6050.Module_2.Gx)/2;
 8002968:	4b58      	ldr	r3, [pc, #352]	@ (8002acc <get_ACC+0x2d0>)
 800296a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800296e:	4b57      	ldr	r3, [pc, #348]	@ (8002acc <get_ACC+0x2d0>)
 8002970:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	@ 0xd8
 8002974:	f7fd fc36 	bl	80001e4 <__adddf3>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002988:	f7fd ff0c 	bl	80007a4 <__aeabi_ddiv>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	494e      	ldr	r1, [pc, #312]	@ (8002acc <get_ACC+0x2d0>)
 8002992:	e9c1 2362 	strd	r2, r3, [r1, #392]	@ 0x188
		MPU6050.Data.Gy			 = (MPU6050.Module_1.Gy + MPU6050.Module_2.Gy)/2;
 8002996:	4b4d      	ldr	r3, [pc, #308]	@ (8002acc <get_ACC+0x2d0>)
 8002998:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800299c:	4b4b      	ldr	r3, [pc, #300]	@ (8002acc <get_ACC+0x2d0>)
 800299e:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 80029a2:	f7fd fc1f 	bl	80001e4 <__adddf3>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80029b6:	f7fd fef5 	bl	80007a4 <__aeabi_ddiv>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4943      	ldr	r1, [pc, #268]	@ (8002acc <get_ACC+0x2d0>)
 80029c0:	e9c1 2364 	strd	r2, r3, [r1, #400]	@ 0x190
		MPU6050.Data.Gz			 = (MPU6050.Module_1.Gz + MPU6050.Module_2.Gz)/2;
 80029c4:	4b41      	ldr	r3, [pc, #260]	@ (8002acc <get_ACC+0x2d0>)
 80029c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80029ca:	4b40      	ldr	r3, [pc, #256]	@ (8002acc <get_ACC+0x2d0>)
 80029cc:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 80029d0:	f7fd fc08 	bl	80001e4 <__adddf3>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80029e4:	f7fd fede 	bl	80007a4 <__aeabi_ddiv>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4937      	ldr	r1, [pc, #220]	@ (8002acc <get_ACC+0x2d0>)
 80029ee:	e9c1 2366 	strd	r2, r3, [r1, #408]	@ 0x198

		MPU6050.Data.Temperature = (MPU6050.Module_1.Temperature + MPU6050.Module_2.Temperature)/2;
 80029f2:	4b36      	ldr	r3, [pc, #216]	@ (8002acc <get_ACC+0x2d0>)
 80029f4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80029f8:	4b34      	ldr	r3, [pc, #208]	@ (8002acc <get_ACC+0x2d0>)
 80029fa:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 80029fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a02:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a0a:	4b30      	ldr	r3, [pc, #192]	@ (8002acc <get_ACC+0x2d0>)
 8002a0c:	edc3 7a68 	vstr	s15, [r3, #416]	@ 0x1a0
 8002a10:	e0bf      	b.n	8002b92 <get_ACC+0x396>
	}
	else if(!(SYSTEM_STATUS.peripheral_Flags & MPU60501_ERRORMASK)){
 8002a12:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac8 <get_ACC+0x2cc>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d15e      	bne.n	8002adc <get_ACC+0x2e0>
		MPU6050_Read_All(&hi2c1, &MPU6050.Module_1);
 8002a1e:	492b      	ldr	r1, [pc, #172]	@ (8002acc <get_ACC+0x2d0>)
 8002a20:	482b      	ldr	r0, [pc, #172]	@ (8002ad0 <get_ACC+0x2d4>)
 8002a22:	f7ff fbd9 	bl	80021d8 <MPU6050_Read_All>
		MPU6050_getPromModule(&MPU6050.Module_1);
 8002a26:	4829      	ldr	r0, [pc, #164]	@ (8002acc <get_ACC+0x2d0>)
 8002a28:	f7ff f874 	bl	8001b14 <MPU6050_getPromModule>

		MPU6050.Data.Accel_X_RAW = MPU6050.Module_1.Accel_X_RAW;
 8002a2c:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <get_ACC+0x2d0>)
 8002a2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a32:	4b26      	ldr	r3, [pc, #152]	@ (8002acc <get_ACC+0x2d0>)
 8002a34:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
		MPU6050.Data.Accel_Y_RAW = MPU6050.Module_1.Accel_Y_RAW;
 8002a38:	4b24      	ldr	r3, [pc, #144]	@ (8002acc <get_ACC+0x2d0>)
 8002a3a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002a3e:	4b23      	ldr	r3, [pc, #140]	@ (8002acc <get_ACC+0x2d0>)
 8002a40:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		MPU6050.Data.Accel_Z_RAW = MPU6050.Module_1.Accel_Z_RAW;
 8002a44:	4b21      	ldr	r3, [pc, #132]	@ (8002acc <get_ACC+0x2d0>)
 8002a46:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002a4a:	4b20      	ldr	r3, [pc, #128]	@ (8002acc <get_ACC+0x2d0>)
 8002a4c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

		MPU6050.Data.Gyro_X_RAW  = MPU6050.Module_1.Gyro_X_RAW;
 8002a50:	4b1e      	ldr	r3, [pc, #120]	@ (8002acc <get_ACC+0x2d0>)
 8002a52:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002a56:	4b1d      	ldr	r3, [pc, #116]	@ (8002acc <get_ACC+0x2d0>)
 8002a58:	f8a3 2180 	strh.w	r2, [r3, #384]	@ 0x180
		MPU6050.Data.Gyro_Y_RAW  = MPU6050.Module_1.Gyro_Y_RAW;
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002acc <get_ACC+0x2d0>)
 8002a5e:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8002a62:	4b1a      	ldr	r3, [pc, #104]	@ (8002acc <get_ACC+0x2d0>)
 8002a64:	f8a3 2182 	strh.w	r2, [r3, #386]	@ 0x182
		MPU6050.Data.Gyro_Z_RAW  = MPU6050.Module_1.Gyro_Z_RAW;
 8002a68:	4b18      	ldr	r3, [pc, #96]	@ (8002acc <get_ACC+0x2d0>)
 8002a6a:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 8002a6e:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <get_ACC+0x2d0>)
 8002a70:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

		MPU6050.Data.Ax			 = MPU6050.Module_1.Ax;
 8002a74:	4b15      	ldr	r3, [pc, #84]	@ (8002acc <get_ACC+0x2d0>)
 8002a76:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a7a:	4914      	ldr	r1, [pc, #80]	@ (8002acc <get_ACC+0x2d0>)
 8002a7c:	e9c1 235a 	strd	r2, r3, [r1, #360]	@ 0x168
		MPU6050.Data.Ay			 = MPU6050.Module_1.Ay;
 8002a80:	4b12      	ldr	r3, [pc, #72]	@ (8002acc <get_ACC+0x2d0>)
 8002a82:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a86:	4911      	ldr	r1, [pc, #68]	@ (8002acc <get_ACC+0x2d0>)
 8002a88:	e9c1 235c 	strd	r2, r3, [r1, #368]	@ 0x170
		MPU6050.Data.Az			 = MPU6050.Module_1.Az;
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <get_ACC+0x2d0>)
 8002a8e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a92:	490e      	ldr	r1, [pc, #56]	@ (8002acc <get_ACC+0x2d0>)
 8002a94:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178

		MPU6050.Data.Gx			 = MPU6050.Module_1.Gx;
 8002a98:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <get_ACC+0x2d0>)
 8002a9a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002a9e:	490b      	ldr	r1, [pc, #44]	@ (8002acc <get_ACC+0x2d0>)
 8002aa0:	e9c1 2362 	strd	r2, r3, [r1, #392]	@ 0x188
		MPU6050.Data.Gy			 = MPU6050.Module_1.Gy;
 8002aa4:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <get_ACC+0x2d0>)
 8002aa6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002aaa:	4908      	ldr	r1, [pc, #32]	@ (8002acc <get_ACC+0x2d0>)
 8002aac:	e9c1 2364 	strd	r2, r3, [r1, #400]	@ 0x190
		MPU6050.Data.Gz			 = MPU6050.Module_1.Gz;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <get_ACC+0x2d0>)
 8002ab2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002ab6:	4905      	ldr	r1, [pc, #20]	@ (8002acc <get_ACC+0x2d0>)
 8002ab8:	e9c1 2366 	strd	r2, r3, [r1, #408]	@ 0x198

		MPU6050.Data.Temperature = MPU6050.Module_1.Temperature;
 8002abc:	4b03      	ldr	r3, [pc, #12]	@ (8002acc <get_ACC+0x2d0>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	4a02      	ldr	r2, [pc, #8]	@ (8002acc <get_ACC+0x2d0>)
 8002ac2:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
 8002ac6:	e064      	b.n	8002b92 <get_ACC+0x396>
 8002ac8:	20000868 	.word	0x20000868
 8002acc:	20000198 	.word	0x20000198
 8002ad0:	200008b8 	.word	0x200008b8
 8002ad4:	20000248 	.word	0x20000248
 8002ad8:	2000090c 	.word	0x2000090c
	}
	else if(!(SYSTEM_STATUS.peripheral_Flags & MPU60502_ERRORMASK)){
 8002adc:	4b2f      	ldr	r3, [pc, #188]	@ (8002b9c <get_ACC+0x3a0>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d154      	bne.n	8002b92 <get_ACC+0x396>
		MPU6050_Read_All(&hi2c2, &MPU6050.Module_2);
 8002ae8:	492d      	ldr	r1, [pc, #180]	@ (8002ba0 <get_ACC+0x3a4>)
 8002aea:	482e      	ldr	r0, [pc, #184]	@ (8002ba4 <get_ACC+0x3a8>)
 8002aec:	f7ff fb74 	bl	80021d8 <MPU6050_Read_All>
		MPU6050_getPromModule(&MPU6050.Module_2);
 8002af0:	482b      	ldr	r0, [pc, #172]	@ (8002ba0 <get_ACC+0x3a4>)
 8002af2:	f7ff f80f 	bl	8001b14 <MPU6050_getPromModule>

		MPU6050.Data.Accel_X_RAW = MPU6050.Module_2.Accel_X_RAW;
 8002af6:	4b2c      	ldr	r3, [pc, #176]	@ (8002ba8 <get_ACC+0x3ac>)
 8002af8:	f9b3 20b0 	ldrsh.w	r2, [r3, #176]	@ 0xb0
 8002afc:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba8 <get_ACC+0x3ac>)
 8002afe:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
		MPU6050.Data.Accel_Y_RAW = MPU6050.Module_2.Accel_Y_RAW;
 8002b02:	4b29      	ldr	r3, [pc, #164]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b04:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	@ 0xb2
 8002b08:	4b27      	ldr	r3, [pc, #156]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b0a:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		MPU6050.Data.Accel_Z_RAW = MPU6050.Module_2.Accel_Z_RAW;
 8002b0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b10:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	@ 0xb4
 8002b14:	4b24      	ldr	r3, [pc, #144]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b16:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

		MPU6050.Data.Gyro_X_RAW  = MPU6050.Module_2.Gyro_X_RAW;
 8002b1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b1c:	f9b3 20d0 	ldrsh.w	r2, [r3, #208]	@ 0xd0
 8002b20:	4b21      	ldr	r3, [pc, #132]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b22:	f8a3 2180 	strh.w	r2, [r3, #384]	@ 0x180
		MPU6050.Data.Gyro_Y_RAW  = MPU6050.Module_2.Gyro_Y_RAW;
 8002b26:	4b20      	ldr	r3, [pc, #128]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b28:	f9b3 20d2 	ldrsh.w	r2, [r3, #210]	@ 0xd2
 8002b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b2e:	f8a3 2182 	strh.w	r2, [r3, #386]	@ 0x182
		MPU6050.Data.Gyro_Z_RAW  = MPU6050.Module_2.Gyro_Z_RAW;
 8002b32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b34:	f9b3 20d4 	ldrsh.w	r2, [r3, #212]	@ 0xd4
 8002b38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b3a:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

		MPU6050.Data.Ax			 = MPU6050.Module_2.Ax;
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b40:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8002b44:	4918      	ldr	r1, [pc, #96]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b46:	e9c1 235a 	strd	r2, r3, [r1, #360]	@ 0x168
		MPU6050.Data.Ay			 = MPU6050.Module_2.Ay;
 8002b4a:	4b17      	ldr	r3, [pc, #92]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b4c:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8002b50:	4915      	ldr	r1, [pc, #84]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b52:	e9c1 235c 	strd	r2, r3, [r1, #368]	@ 0x170
		MPU6050.Data.Az			 = MPU6050.Module_2.Az;
 8002b56:	4b14      	ldr	r3, [pc, #80]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b58:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8002b5c:	4912      	ldr	r1, [pc, #72]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b5e:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178

		MPU6050.Data.Gx			 = MPU6050.Module_2.Gx;
 8002b62:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b64:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	@ 0xd8
 8002b68:	490f      	ldr	r1, [pc, #60]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b6a:	e9c1 2362 	strd	r2, r3, [r1, #392]	@ 0x188
		MPU6050.Data.Gy			 = MPU6050.Module_2.Gy;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b70:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8002b74:	490c      	ldr	r1, [pc, #48]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b76:	e9c1 2364 	strd	r2, r3, [r1, #400]	@ 0x190
		MPU6050.Data.Gz			 = MPU6050.Module_2.Gz;
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b7c:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 8002b80:	4909      	ldr	r1, [pc, #36]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b82:	e9c1 2366 	strd	r2, r3, [r1, #408]	@ 0x198

		MPU6050.Data.Temperature = MPU6050.Module_2.Temperature;
 8002b86:	4b08      	ldr	r3, [pc, #32]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b8c:	4a06      	ldr	r2, [pc, #24]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b8e:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
	}
	MPU6050_getPromModule(&MPU6050.Data);
 8002b92:	4806      	ldr	r0, [pc, #24]	@ (8002bac <get_ACC+0x3b0>)
 8002b94:	f7fe ffbe 	bl	8001b14 <MPU6050_getPromModule>
}
 8002b98:	bf00      	nop
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000868 	.word	0x20000868
 8002ba0:	20000248 	.word	0x20000248
 8002ba4:	2000090c 	.word	0x2000090c
 8002ba8:	20000198 	.word	0x20000198
 8002bac:	200002f8 	.word	0x200002f8

08002bb0 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b096      	sub	sp, #88	@ 0x58
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	61f8      	str	r0, [r7, #28]
 8002bb8:	ed87 0b04 	vstr	d0, [r7, #16]
 8002bbc:	ed87 1b02 	vstr	d1, [r7, #8]
 8002bc0:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002bca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bce:	f7fd fb07 	bl	80001e0 <__aeabi_dsub>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002be0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002be8:	f7fd fcb2 	bl	8000550 <__aeabi_dmul>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	f7fd faf6 	bl	80001e4 <__adddf3>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	69f9      	ldr	r1, [r7, #28]
 8002bfe:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c12:	f7fd fc9d 	bl	8000550 <__aeabi_dmul>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002c24:	f7fd fadc 	bl	80001e0 <__aeabi_dsub>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002c36:	f7fd fad3 	bl	80001e0 <__aeabi_dsub>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4610      	mov	r0, r2
 8002c40:	4619      	mov	r1, r3
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c48:	f7fd facc 	bl	80001e4 <__adddf3>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c58:	f7fd fc7a 	bl	8000550 <__aeabi_dmul>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4620      	mov	r0, r4
 8002c62:	4629      	mov	r1, r5
 8002c64:	f7fd fabe 	bl	80001e4 <__adddf3>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	69f9      	ldr	r1, [r7, #28]
 8002c6e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c82:	f7fd fc65 	bl	8000550 <__aeabi_dmul>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	f7fd faa7 	bl	80001e0 <__aeabi_dsub>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	69f9      	ldr	r1, [r7, #28]
 8002c98:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cac:	f7fd fc50 	bl	8000550 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	f7fd fa92 	bl	80001e0 <__aeabi_dsub>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	69f9      	ldr	r1, [r7, #28]
 8002cc2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cd6:	f7fd fc3b 	bl	8000550 <__aeabi_dmul>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4620      	mov	r0, r4
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	f7fd fa7f 	bl	80001e4 <__adddf3>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	69f9      	ldr	r1, [r7, #28]
 8002cec:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cfc:	f7fd fa72 	bl	80001e4 <__adddf3>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002d0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d12:	f7fd fd47 	bl	80007a4 <__aeabi_ddiv>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002d24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d28:	f7fd fd3c 	bl	80007a4 <__aeabi_ddiv>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d3e:	f7fd fa4f 	bl	80001e0 <__aeabi_dsub>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002d50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d58:	f7fd fbfa 	bl	8000550 <__aeabi_dmul>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4620      	mov	r0, r4
 8002d62:	4629      	mov	r1, r5
 8002d64:	f7fd fa3e 	bl	80001e4 <__adddf3>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	69f9      	ldr	r1, [r7, #28]
 8002d6e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002d78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d80:	f7fd fbe6 	bl	8000550 <__aeabi_dmul>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4620      	mov	r0, r4
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	f7fd fa2a 	bl	80001e4 <__adddf3>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	69f9      	ldr	r1, [r7, #28]
 8002d96:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002da0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002daa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8002db4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002dbc:	f7fd fbc8 	bl	8000550 <__aeabi_dmul>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	f7fd fa0a 	bl	80001e0 <__aeabi_dsub>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	69f9      	ldr	r1, [r7, #28]
 8002dd2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002ddc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002de0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002de4:	f7fd fbb4 	bl	8000550 <__aeabi_dmul>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4620      	mov	r0, r4
 8002dee:	4629      	mov	r1, r5
 8002df0:	f7fd f9f6 	bl	80001e0 <__aeabi_dsub>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	69f9      	ldr	r1, [r7, #28]
 8002dfa:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002e04:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e0c:	f7fd fba0 	bl	8000550 <__aeabi_dmul>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4620      	mov	r0, r4
 8002e16:	4629      	mov	r1, r5
 8002e18:	f7fd f9e2 	bl	80001e0 <__aeabi_dsub>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	69f9      	ldr	r1, [r7, #28]
 8002e22:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002e2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e34:	f7fd fb8c 	bl	8000550 <__aeabi_dmul>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f7fd f9ce 	bl	80001e0 <__aeabi_dsub>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	69f9      	ldr	r1, [r7, #28]
 8002e4a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e54:	ec43 2b17 	vmov	d7, r2, r3
};
 8002e58:	eeb0 0a47 	vmov.f32	s0, s14
 8002e5c:	eef0 0a67 	vmov.f32	s1, s15
 8002e60:	3758      	adds	r7, #88	@ 0x58
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002e68 <get_ATTS>:

void get_ATTS(MPU6050_modules_t *DataStruct){
 8002e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e6c:	b08a      	sub	sp, #40	@ 0x28
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002e72:	f001 ffdf 	bl	8004e34 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	4b83      	ldr	r3, [pc, #524]	@ (8003088 <get_ATTS+0x220>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd faec 	bl	800045c <__aeabi_ui2d>
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	4b80      	ldr	r3, [pc, #512]	@ (800308c <get_ATTS+0x224>)
 8002e8a:	f7fd fc8b 	bl	80007a4 <__aeabi_ddiv>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	e9c7 2306 	strd	r2, r3, [r7, #24]
    timer = HAL_GetTick();
 8002e96:	f001 ffcd 	bl	8004e34 <HAL_GetTick>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4a7a      	ldr	r2, [pc, #488]	@ (8003088 <get_ATTS+0x220>)
 8002e9e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Data.Prom.Accel_X_RAW * DataStruct->Data.Prom.Accel_X_RAW + DataStruct->Data.Prom.Accel_Z_RAW * DataStruct->Data.Prom.Accel_Z_RAW);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	@ 0x1f4
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	@ 0x1f4
 8002eae:	fb03 f202 	mul.w	r2, r3, r2
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	@ 0x1f8
 8002eb8:	4619      	mov	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	@ 0x1f8
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fad8 	bl	800047c <__aeabi_i2d>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	ec43 2b10 	vmov	d0, r2, r3
 8002ed4:	f00a fbe2 	bl	800d69c <sqrt>
 8002ed8:	ed87 0b04 	vstr	d0, [r7, #16]
    if (roll_sqrt != 0.0) {
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ee8:	f7fd fd9a 	bl	8000a20 <__aeabi_dcmpeq>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d11f      	bne.n	8002f32 <get_ATTS+0xca>
        roll = atan(DataStruct->Data.Prom.Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	@ 0x1f6
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fabf 	bl	800047c <__aeabi_i2d>
 8002efe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f02:	f7fd fc4f 	bl	80007a4 <__aeabi_ddiv>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	ec43 2b17 	vmov	d7, r2, r3
 8002f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f12:	eef0 0a67 	vmov.f32	s1, s15
 8002f16:	f00a fbef 	bl	800d6f8 <atan>
 8002f1a:	ec51 0b10 	vmov	r0, r1, d0
 8002f1e:	a358      	add	r3, pc, #352	@ (adr r3, 8003080 <get_ATTS+0x218>)
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f7fd fb14 	bl	8000550 <__aeabi_dmul>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002f30:	e005      	b.n	8002f3e <get_ATTS+0xd6>
    } else {
        roll = 0.0;
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
    double pitch = atan2(-DataStruct->Data.Prom.Accel_X_RAW, DataStruct->Data.Prom.Accel_Z_RAW) * RAD_TO_DEG;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	@ 0x1f4
 8002f44:	425b      	negs	r3, r3
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fa98 	bl	800047c <__aeabi_i2d>
 8002f4c:	4682      	mov	sl, r0
 8002f4e:	468b      	mov	fp, r1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	@ 0x1f8
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd fa90 	bl	800047c <__aeabi_i2d>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	ec43 2b11 	vmov	d1, r2, r3
 8002f64:	ec4b ab10 	vmov	d0, sl, fp
 8002f68:	f00a fb56 	bl	800d618 <atan2>
 8002f6c:	ec51 0b10 	vmov	r0, r1, d0
 8002f70:	a343      	add	r3, pc, #268	@ (adr r3, 8003080 <get_ATTS+0x218>)
 8002f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f76:	f7fd faeb 	bl	8000550 <__aeabi_dmul>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	4b42      	ldr	r3, [pc, #264]	@ (8003090 <get_ATTS+0x228>)
 8002f88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f8c:	f7fd fd52 	bl	8000a34 <__aeabi_dcmplt>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <get_ATTS+0x144>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	@ 0x218
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	4b3c      	ldr	r3, [pc, #240]	@ (8003094 <get_ATTS+0x22c>)
 8002fa2:	f7fd fd65 	bl	8000a70 <__aeabi_dcmpgt>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d114      	bne.n	8002fd6 <get_ATTS+0x16e>
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	4b38      	ldr	r3, [pc, #224]	@ (8003094 <get_ATTS+0x22c>)
 8002fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fb6:	f7fd fd5b 	bl	8000a70 <__aeabi_dcmpgt>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d015      	beq.n	8002fec <get_ATTS+0x184>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	@ 0x218
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	4b31      	ldr	r3, [pc, #196]	@ (8003090 <get_ATTS+0x228>)
 8002fcc:	f7fd fd32 	bl	8000a34 <__aeabi_dcmplt>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <get_ATTS+0x184>
        KalmanY.angle = pitch;
 8002fd6:	4930      	ldr	r1, [pc, #192]	@ (8003098 <get_ATTS+0x230>)
 8002fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fdc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe6:	e9c1 2386 	strd	r2, r3, [r1, #536]	@ 0x218
 8002fea:	e014      	b.n	8003016 <get_ATTS+0x1ae>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Data.Gy, dt);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	ed93 7b64 	vldr	d7, [r3, #400]	@ 0x190
 8002ff2:	ed97 2b06 	vldr	d2, [r7, #24]
 8002ff6:	eeb0 1a47 	vmov.f32	s2, s14
 8002ffa:	eef0 1a67 	vmov.f32	s3, s15
 8002ffe:	ed97 0b02 	vldr	d0, [r7, #8]
 8003002:	4825      	ldr	r0, [pc, #148]	@ (8003098 <get_ATTS+0x230>)
 8003004:	f7ff fdd4 	bl	8002bb0 <Kalman_getAngle>
 8003008:	eeb0 7a40 	vmov.f32	s14, s0
 800300c:	eef0 7a60 	vmov.f32	s15, s1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	ed83 7b86 	vstr	d7, [r3, #536]	@ 0x218
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	@ 0x218
 800301c:	4690      	mov	r8, r2
 800301e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	4b1b      	ldr	r3, [pc, #108]	@ (8003094 <get_ATTS+0x22c>)
 8003028:	4640      	mov	r0, r8
 800302a:	4649      	mov	r1, r9
 800302c:	f7fd fd20 	bl	8000a70 <__aeabi_dcmpgt>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <get_ATTS+0x1e0>
        DataStruct->Data.Gx = -DataStruct->Data.Gx;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	@ 0x188
 800303c:	4614      	mov	r4, r2
 800303e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	e9c3 4562 	strd	r4, r5, [r3, #392]	@ 0x188
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Data.Gy, dt);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	ed93 7b64 	vldr	d7, [r3, #400]	@ 0x190
 800304e:	ed97 2b06 	vldr	d2, [r7, #24]
 8003052:	eeb0 1a47 	vmov.f32	s2, s14
 8003056:	eef0 1a67 	vmov.f32	s3, s15
 800305a:	ed97 0b08 	vldr	d0, [r7, #32]
 800305e:	480f      	ldr	r0, [pc, #60]	@ (800309c <get_ATTS+0x234>)
 8003060:	f7ff fda6 	bl	8002bb0 <Kalman_getAngle>
 8003064:	eeb0 7a40 	vmov.f32	s14, s0
 8003068:	eef0 7a60 	vmov.f32	s15, s1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	ed83 7b84 	vstr	d7, [r3, #528]	@ 0x210

}
 8003072:	bf00      	nop
 8003074:	3728      	adds	r7, #40	@ 0x28
 8003076:	46bd      	mov	sp, r7
 8003078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800307c:	f3af 8000 	nop.w
 8003080:	1a63c1f8 	.word	0x1a63c1f8
 8003084:	404ca5dc 	.word	0x404ca5dc
 8003088:	20000844 	.word	0x20000844
 800308c:	408f4000 	.word	0x408f4000
 8003090:	c0568000 	.word	0xc0568000
 8003094:	40568000 	.word	0x40568000
 8003098:	20000060 	.word	0x20000060
 800309c:	20000018 	.word	0x20000018

080030a0 <MEMORY_init>:

#include "Modules/Status/memory.h"

MEMORY_u MEMORY;

void MEMORY_init(void){
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
	Flash_Read(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 80030a4:	2208      	movs	r2, #8
 80030a6:	4908      	ldr	r1, [pc, #32]	@ (80030c8 <MEMORY_init+0x28>)
 80030a8:	4808      	ldr	r0, [pc, #32]	@ (80030cc <MEMORY_init+0x2c>)
 80030aa:	f7fe fd15 	bl	8001ad8 <Flash_Read>
	MEMORY.str.STATUS.Reset_Number++;
 80030ae:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <MEMORY_init+0x28>)
 80030b0:	7f1b      	ldrb	r3, [r3, #28]
 80030b2:	3301      	adds	r3, #1
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4b04      	ldr	r3, [pc, #16]	@ (80030c8 <MEMORY_init+0x28>)
 80030b8:	771a      	strb	r2, [r3, #28]
	Flash_Write(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 80030ba:	2208      	movs	r2, #8
 80030bc:	4902      	ldr	r1, [pc, #8]	@ (80030c8 <MEMORY_init+0x28>)
 80030be:	4803      	ldr	r0, [pc, #12]	@ (80030cc <MEMORY_init+0x2c>)
 80030c0:	f7fe fcb2 	bl	8001a28 <Flash_Write>
}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20000848 	.word	0x20000848
 80030cc:	08020000 	.word	0x08020000

080030d0 <MEMORY_write>:


void MEMORY_write(void){
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
	Flash_Write(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 80030d4:	2208      	movs	r2, #8
 80030d6:	4903      	ldr	r1, [pc, #12]	@ (80030e4 <MEMORY_write+0x14>)
 80030d8:	4803      	ldr	r0, [pc, #12]	@ (80030e8 <MEMORY_write+0x18>)
 80030da:	f7fe fca5 	bl	8001a28 <Flash_Write>
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000848 	.word	0x20000848
 80030e8:	08020000 	.word	0x08020000

080030ec <get_STATUS>:

#include "Modules/Status/status.h"

status_t SYSTEM_STATUS;

void get_STATUS(void){
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
	SYSTEM_STATUS.peripheral_Flags = MPU6050_status();
 80030f0:	f7fe feba 	bl	8001e68 <MPU6050_status>
 80030f4:	4603      	mov	r3, r0
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b01      	ldr	r3, [pc, #4]	@ (8003100 <get_STATUS+0x14>)
 80030fa:	701a      	strb	r2, [r3, #0]
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000868 	.word	0x20000868

08003104 <DeployParachute>:

uint8_t Parachute_Status = 0x00;



void DeployParachute(void){
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
	Parachute_Status = 0x00;
 8003108:	4b2c      	ldr	r3, [pc, #176]	@ (80031bc <DeployParachute+0xb8>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]

	if(((abs((int)MPU6050.KalmanAngleX)) > 70 || (abs((int)MPU6050.KalmanAngleY)) > 70)){
 800310e:	4b2c      	ldr	r3, [pc, #176]	@ (80031c0 <DeployParachute+0xbc>)
 8003110:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	@ 0x210
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	f7fd fcca 	bl	8000ab0 <__aeabi_d2iz>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	bfb8      	it	lt
 8003122:	425b      	neglt	r3, r3
 8003124:	2b46      	cmp	r3, #70	@ 0x46
 8003126:	dc0c      	bgt.n	8003142 <DeployParachute+0x3e>
 8003128:	4b25      	ldr	r3, [pc, #148]	@ (80031c0 <DeployParachute+0xbc>)
 800312a:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	@ 0x218
 800312e:	4610      	mov	r0, r2
 8003130:	4619      	mov	r1, r3
 8003132:	f7fd fcbd 	bl	8000ab0 <__aeabi_d2iz>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	bfb8      	it	lt
 800313c:	425b      	neglt	r3, r3
 800313e:	2b46      	cmp	r3, #70	@ 0x46
 8003140:	dd0d      	ble.n	800315e <DeployParachute+0x5a>
		Parachute_Status |= Desplegar;
 8003142:	4b1e      	ldr	r3, [pc, #120]	@ (80031bc <DeployParachute+0xb8>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	f043 0310 	orr.w	r3, r3, #16
 800314a:	b2da      	uxtb	r2, r3
 800314c:	4b1b      	ldr	r3, [pc, #108]	@ (80031bc <DeployParachute+0xb8>)
 800314e:	701a      	strb	r2, [r3, #0]
		Parachute_Status |= Desp_Ang;
 8003150:	4b1a      	ldr	r3, [pc, #104]	@ (80031bc <DeployParachute+0xb8>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4b18      	ldr	r3, [pc, #96]	@ (80031bc <DeployParachute+0xb8>)
 800315c:	701a      	strb	r2, [r3, #0]
	}

	if((BMP280.Barometric_Altitude + 10) < BMP280.Max_Altitude){
 800315e:	4b19      	ldr	r3, [pc, #100]	@ (80031c4 <DeployParachute+0xc0>)
 8003160:	8a1b      	ldrh	r3, [r3, #16]
 8003162:	330a      	adds	r3, #10
 8003164:	4a17      	ldr	r2, [pc, #92]	@ (80031c4 <DeployParachute+0xc0>)
 8003166:	8a52      	ldrh	r2, [r2, #18]
 8003168:	4293      	cmp	r3, r2
 800316a:	da0d      	bge.n	8003188 <DeployParachute+0x84>
		Parachute_Status |= Desplegar;
 800316c:	4b13      	ldr	r3, [pc, #76]	@ (80031bc <DeployParachute+0xb8>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	f043 0310 	orr.w	r3, r3, #16
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <DeployParachute+0xb8>)
 8003178:	701a      	strb	r2, [r3, #0]
		Parachute_Status |= Desp_Alt;
 800317a:	4b10      	ldr	r3, [pc, #64]	@ (80031bc <DeployParachute+0xb8>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	f043 0302 	orr.w	r3, r3, #2
 8003182:	b2da      	uxtb	r2, r3
 8003184:	4b0d      	ldr	r3, [pc, #52]	@ (80031bc <DeployParachute+0xb8>)
 8003186:	701a      	strb	r2, [r3, #0]
	}

	if(Parachute_Status){
 8003188:	4b0c      	ldr	r3, [pc, #48]	@ (80031bc <DeployParachute+0xb8>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d009      	beq.n	80031a4 <DeployParachute+0xa0>
		  TIM2->CCR4 = 2000;
 8003190:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003194:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003198:	641a      	str	r2, [r3, #64]	@ 0x40
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800319a:	210c      	movs	r1, #12
 800319c:	480a      	ldr	r0, [pc, #40]	@ (80031c8 <DeployParachute+0xc4>)
 800319e:	f005 fddd 	bl	8008d5c <HAL_TIM_PWM_Start>
	}
	else{
		  TIM2->CCR4 = 1000;
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
	}
}
 80031a2:	e008      	b.n	80031b6 <DeployParachute+0xb2>
		  TIM2->CCR4 = 1000;
 80031a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80031a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031ac:	641a      	str	r2, [r3, #64]	@ 0x40
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80031ae:	210c      	movs	r1, #12
 80031b0:	4805      	ldr	r0, [pc, #20]	@ (80031c8 <DeployParachute+0xc4>)
 80031b2:	f005 fdd3 	bl	8008d5c <HAL_TIM_PWM_Start>
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000869 	.word	0x20000869
 80031c0:	20000198 	.word	0x20000198
 80031c4:	2000014c 	.word	0x2000014c
 80031c8:	20000c30 	.word	0x20000c30

080031cc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031d2:	463b      	mov	r3, r7
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80031de:	4b21      	ldr	r3, [pc, #132]	@ (8003264 <MX_ADC1_Init+0x98>)
 80031e0:	4a21      	ldr	r2, [pc, #132]	@ (8003268 <MX_ADC1_Init+0x9c>)
 80031e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80031e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003264 <MX_ADC1_Init+0x98>)
 80031e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80031ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003264 <MX_ADC1_Init+0x98>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80031f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003264 <MX_ADC1_Init+0x98>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80031f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003264 <MX_ADC1_Init+0x98>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031fe:	4b19      	ldr	r3, [pc, #100]	@ (8003264 <MX_ADC1_Init+0x98>)
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003206:	4b17      	ldr	r3, [pc, #92]	@ (8003264 <MX_ADC1_Init+0x98>)
 8003208:	2200      	movs	r2, #0
 800320a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800320c:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <MX_ADC1_Init+0x98>)
 800320e:	4a17      	ldr	r2, [pc, #92]	@ (800326c <MX_ADC1_Init+0xa0>)
 8003210:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003212:	4b14      	ldr	r3, [pc, #80]	@ (8003264 <MX_ADC1_Init+0x98>)
 8003214:	2200      	movs	r2, #0
 8003216:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003218:	4b12      	ldr	r3, [pc, #72]	@ (8003264 <MX_ADC1_Init+0x98>)
 800321a:	2201      	movs	r2, #1
 800321c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800321e:	4b11      	ldr	r3, [pc, #68]	@ (8003264 <MX_ADC1_Init+0x98>)
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003226:	4b0f      	ldr	r3, [pc, #60]	@ (8003264 <MX_ADC1_Init+0x98>)
 8003228:	2201      	movs	r2, #1
 800322a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800322c:	480d      	ldr	r0, [pc, #52]	@ (8003264 <MX_ADC1_Init+0x98>)
 800322e:	f001 fe0d 	bl	8004e4c <HAL_ADC_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003238:	f001 f878 	bl	800432c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800323c:	2301      	movs	r3, #1
 800323e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003240:	2301      	movs	r3, #1
 8003242:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003244:	2300      	movs	r3, #0
 8003246:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003248:	463b      	mov	r3, r7
 800324a:	4619      	mov	r1, r3
 800324c:	4805      	ldr	r0, [pc, #20]	@ (8003264 <MX_ADC1_Init+0x98>)
 800324e:	f001 fe41 	bl	8004ed4 <HAL_ADC_ConfigChannel>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003258:	f001 f868 	bl	800432c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	2000086c 	.word	0x2000086c
 8003268:	40012000 	.word	0x40012000
 800326c:	0f000001 	.word	0x0f000001

08003270 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	@ 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a17      	ldr	r2, [pc, #92]	@ (80032ec <HAL_ADC_MspInit+0x7c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d127      	bne.n	80032e2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	4b16      	ldr	r3, [pc, #88]	@ (80032f0 <HAL_ADC_MspInit+0x80>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	4a15      	ldr	r2, [pc, #84]	@ (80032f0 <HAL_ADC_MspInit+0x80>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032a2:	4b13      	ldr	r3, [pc, #76]	@ (80032f0 <HAL_ADC_MspInit+0x80>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	4b0f      	ldr	r3, [pc, #60]	@ (80032f0 <HAL_ADC_MspInit+0x80>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	4a0e      	ldr	r2, [pc, #56]	@ (80032f0 <HAL_ADC_MspInit+0x80>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032be:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <HAL_ADC_MspInit+0x80>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_VBat_Pin;
 80032ca:	2302      	movs	r3, #2
 80032cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032ce:	2303      	movs	r3, #3
 80032d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VBat_GPIO_Port, &GPIO_InitStruct);
 80032d6:	f107 0314 	add.w	r3, r7, #20
 80032da:	4619      	mov	r1, r3
 80032dc:	4805      	ldr	r0, [pc, #20]	@ (80032f4 <HAL_ADC_MspInit+0x84>)
 80032de:	f002 ff39 	bl	8006154 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80032e2:	bf00      	nop
 80032e4:	3728      	adds	r7, #40	@ 0x28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40012000 	.word	0x40012000
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40020000 	.word	0x40020000

080032f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	4b14      	ldr	r3, [pc, #80]	@ (8003354 <MX_DMA_Init+0x5c>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	4a13      	ldr	r2, [pc, #76]	@ (8003354 <MX_DMA_Init+0x5c>)
 8003308:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800330c:	6313      	str	r3, [r2, #48]	@ 0x30
 800330e:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <MX_DMA_Init+0x5c>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	2103      	movs	r1, #3
 800331e:	200b      	movs	r0, #11
 8003320:	f002 f8e1 	bl	80054e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003324:	200b      	movs	r0, #11
 8003326:	f002 f8fa 	bl	800551e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 3, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	2103      	movs	r1, #3
 800332e:	200e      	movs	r0, #14
 8003330:	f002 f8d9 	bl	80054e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003334:	200e      	movs	r0, #14
 8003336:	f002 f8f2 	bl	800551e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 3, 0);
 800333a:	2200      	movs	r2, #0
 800333c:	2103      	movs	r1, #3
 800333e:	2010      	movs	r0, #16
 8003340:	f002 f8d1 	bl	80054e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003344:	2010      	movs	r0, #16
 8003346:	f002 f8ea 	bl	800551e <HAL_NVIC_EnableIRQ>

}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800

08003358 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800335c:	2200      	movs	r2, #0
 800335e:	2101      	movs	r1, #1
 8003360:	4802      	ldr	r0, [pc, #8]	@ (800336c <SELECT+0x14>)
 8003362:	f003 f87b 	bl	800645c <HAL_GPIO_WritePin>
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40020400 	.word	0x40020400

08003370 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003374:	2201      	movs	r2, #1
 8003376:	2101      	movs	r1, #1
 8003378:	4802      	ldr	r0, [pc, #8]	@ (8003384 <DESELECT+0x14>)
 800337a:	f003 f86f 	bl	800645c <HAL_GPIO_WritePin>
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40020400 	.word	0x40020400

08003388 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003392:	bf00      	nop
 8003394:	4808      	ldr	r0, [pc, #32]	@ (80033b8 <SPI_TxByte+0x30>)
 8003396:	f005 fa71 	bl	800887c <HAL_SPI_GetState>
 800339a:	4603      	mov	r3, r0
 800339c:	2b01      	cmp	r3, #1
 800339e:	d1f9      	bne.n	8003394 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80033a0:	1df9      	adds	r1, r7, #7
 80033a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033a6:	2201      	movs	r2, #1
 80033a8:	4803      	ldr	r0, [pc, #12]	@ (80033b8 <SPI_TxByte+0x30>)
 80033aa:	f004 fd62 	bl	8007e72 <HAL_SPI_Transmit>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200009bc 	.word	0x200009bc

080033bc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80033c2:	23ff      	movs	r3, #255	@ 0xff
 80033c4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80033ca:	bf00      	nop
 80033cc:	4809      	ldr	r0, [pc, #36]	@ (80033f4 <SPI_RxByte+0x38>)
 80033ce:	f005 fa55 	bl	800887c <HAL_SPI_GetState>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d1f9      	bne.n	80033cc <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80033d8:	1dba      	adds	r2, r7, #6
 80033da:	1df9      	adds	r1, r7, #7
 80033dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	2301      	movs	r3, #1
 80033e4:	4803      	ldr	r0, [pc, #12]	@ (80033f4 <SPI_RxByte+0x38>)
 80033e6:	f004 ffa1 	bl	800832c <HAL_SPI_TransmitReceive>

  return data;
 80033ea:	79bb      	ldrb	r3, [r7, #6]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	200009bc 	.word	0x200009bc

080033f8 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8003400:	f7ff ffdc 	bl	80033bc <SPI_RxByte>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	701a      	strb	r2, [r3, #0]
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800341a:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <SD_ReadyWait+0x34>)
 800341c:	2232      	movs	r2, #50	@ 0x32
 800341e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8003420:	f7ff ffcc 	bl	80033bc <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8003424:	f7ff ffca 	bl	80033bc <SPI_RxByte>
 8003428:	4603      	mov	r3, r0
 800342a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	2bff      	cmp	r3, #255	@ 0xff
 8003430:	d004      	beq.n	800343c <SD_ReadyWait+0x28>
 8003432:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <SD_ReadyWait+0x34>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f3      	bne.n	8003424 <SD_ReadyWait+0x10>

  return res;
 800343c:	79fb      	ldrb	r3, [r7, #7]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000be6 	.word	0x20000be6

0800344c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8003452:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8003456:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8003458:	f7ff ff8a 	bl	8003370 <DESELECT>

  for(int i = 0; i < 10; i++)
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	e005      	b.n	800346e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8003462:	20ff      	movs	r0, #255	@ 0xff
 8003464:	f7ff ff90 	bl	8003388 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	3301      	adds	r3, #1
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2b09      	cmp	r3, #9
 8003472:	ddf6      	ble.n	8003462 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8003474:	f7ff ff70 	bl	8003358 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8003478:	2340      	movs	r3, #64	@ 0x40
 800347a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800348c:	2395      	movs	r3, #149	@ 0x95
 800348e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	e009      	b.n	80034aa <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8003496:	1d3a      	adds	r2, r7, #4
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4413      	add	r3, r2
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ff72 	bl	8003388 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3301      	adds	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b05      	cmp	r3, #5
 80034ae:	ddf2      	ble.n	8003496 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80034b0:	e002      	b.n	80034b8 <SD_PowerOn+0x6c>
  {
    Count--;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80034b8:	f7ff ff80 	bl	80033bc <SPI_RxByte>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d002      	beq.n	80034c8 <SD_PowerOn+0x7c>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f4      	bne.n	80034b2 <SD_PowerOn+0x66>
  }

  DESELECT();
 80034c8:	f7ff ff52 	bl	8003370 <DESELECT>
  SPI_TxByte(0XFF);
 80034cc:	20ff      	movs	r0, #255	@ 0xff
 80034ce:	f7ff ff5b 	bl	8003388 <SPI_TxByte>

  PowerFlag = 1;
 80034d2:	4b03      	ldr	r3, [pc, #12]	@ (80034e0 <SD_PowerOn+0x94>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
}
 80034d8:	bf00      	nop
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	200008b5 	.word	0x200008b5

080034e4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80034e8:	4b03      	ldr	r3, [pc, #12]	@ (80034f8 <SD_PowerOff+0x14>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	200008b5 	.word	0x200008b5

080034fc <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8003500:	4b03      	ldr	r3, [pc, #12]	@ (8003510 <SD_CheckPower+0x14>)
 8003502:	781b      	ldrb	r3, [r3, #0]
}
 8003504:	4618      	mov	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	200008b5 	.word	0x200008b5

08003514 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800351e:	4b17      	ldr	r3, [pc, #92]	@ (800357c <SD_RxDataBlock+0x68>)
 8003520:	220a      	movs	r2, #10
 8003522:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8003524:	f7ff ff4a 	bl	80033bc <SPI_RxByte>
 8003528:	4603      	mov	r3, r0
 800352a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2bff      	cmp	r3, #255	@ 0xff
 8003530:	d104      	bne.n	800353c <SD_RxDataBlock+0x28>
 8003532:	4b12      	ldr	r3, [pc, #72]	@ (800357c <SD_RxDataBlock+0x68>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f3      	bne.n	8003524 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003540:	d001      	beq.n	8003546 <SD_RxDataBlock+0x32>
    return FALSE;
 8003542:	2300      	movs	r3, #0
 8003544:	e016      	b.n	8003574 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff53 	bl	80033f8 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff4d 	bl	80033f8 <SPI_RxBytePtr>
  } while(btr -= 2);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	3b02      	subs	r3, #2
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1ed      	bne.n	8003546 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800356a:	f7ff ff27 	bl	80033bc <SPI_RxByte>
  SPI_RxByte();
 800356e:	f7ff ff25 	bl	80033bc <SPI_RxByte>

  return TRUE;
 8003572:	2301      	movs	r3, #1
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000be5 	.word	0x20000be5

08003580 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8003590:	f7ff ff40 	bl	8003414 <SD_ReadyWait>
 8003594:	4603      	mov	r3, r0
 8003596:	2bff      	cmp	r3, #255	@ 0xff
 8003598:	d001      	beq.n	800359e <SD_TxDataBlock+0x1e>
    return FALSE;
 800359a:	2300      	movs	r3, #0
 800359c:	e040      	b.n	8003620 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800359e:	78fb      	ldrb	r3, [r7, #3]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fef1 	bl	8003388 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	2bfd      	cmp	r3, #253	@ 0xfd
 80035aa:	d031      	beq.n	8003610 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fee5 	bl	8003388 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fede 	bl	8003388 <SPI_TxByte>
    } while (--wc);
 80035cc:	7bbb      	ldrb	r3, [r7, #14]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	73bb      	strb	r3, [r7, #14]
 80035d2:	7bbb      	ldrb	r3, [r7, #14]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1eb      	bne.n	80035b0 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80035d8:	f7ff fef0 	bl	80033bc <SPI_RxByte>
    SPI_RxByte();
 80035dc:	f7ff feee 	bl	80033bc <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80035e0:	e00b      	b.n	80035fa <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80035e2:	f7ff feeb 	bl	80033bc <SPI_RxByte>
 80035e6:	4603      	mov	r3, r0
 80035e8:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d006      	beq.n	8003602 <SD_TxDataBlock+0x82>
        break;

      i++;
 80035f4:	7b7b      	ldrb	r3, [r7, #13]
 80035f6:	3301      	adds	r3, #1
 80035f8:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80035fa:	7b7b      	ldrb	r3, [r7, #13]
 80035fc:	2b40      	cmp	r3, #64	@ 0x40
 80035fe:	d9f0      	bls.n	80035e2 <SD_TxDataBlock+0x62>
 8003600:	e000      	b.n	8003604 <SD_TxDataBlock+0x84>
        break;
 8003602:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8003604:	bf00      	nop
 8003606:	f7ff fed9 	bl	80033bc <SPI_RxByte>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0fa      	beq.n	8003606 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2b05      	cmp	r3, #5
 8003618:	d101      	bne.n	800361e <SD_TxDataBlock+0x9e>
    return TRUE;
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	6039      	str	r1, [r7, #0]
 8003632:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8003634:	f7ff feee 	bl	8003414 <SD_ReadyWait>
 8003638:	4603      	mov	r3, r0
 800363a:	2bff      	cmp	r3, #255	@ 0xff
 800363c:	d001      	beq.n	8003642 <SD_SendCmd+0x1a>
    return 0xFF;
 800363e:	23ff      	movs	r3, #255	@ 0xff
 8003640:	e040      	b.n	80036c4 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fe9f 	bl	8003388 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	0e1b      	lsrs	r3, r3, #24
 800364e:	b2db      	uxtb	r3, r3
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fe99 	bl	8003388 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	0c1b      	lsrs	r3, r3, #16
 800365a:	b2db      	uxtb	r3, r3
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fe93 	bl	8003388 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	b2db      	uxtb	r3, r3
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fe8d 	bl	8003388 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fe88 	bl	8003388 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	2b40      	cmp	r3, #64	@ 0x40
 8003680:	d101      	bne.n	8003686 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8003682:	2395      	movs	r3, #149	@ 0x95
 8003684:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	2b48      	cmp	r3, #72	@ 0x48
 800368a:	d101      	bne.n	8003690 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800368c:	2387      	movs	r3, #135	@ 0x87
 800368e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fe78 	bl	8003388 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	2b4c      	cmp	r3, #76	@ 0x4c
 800369c:	d101      	bne.n	80036a2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800369e:	f7ff fe8d 	bl	80033bc <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80036a2:	230a      	movs	r3, #10
 80036a4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80036a6:	f7ff fe89 	bl	80033bc <SPI_RxByte>
 80036aa:	4603      	mov	r3, r0
 80036ac:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80036ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	da05      	bge.n	80036c2 <SD_SendCmd+0x9a>
 80036b6:	7bbb      	ldrb	r3, [r7, #14]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	73bb      	strb	r3, [r7, #14]
 80036bc:	7bbb      	ldrb	r3, [r7, #14]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f1      	bne.n	80036a6 <SD_SendCmd+0x7e>

  return res;
 80036c2:	7b7b      	ldrb	r3, [r7, #13]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0d5      	b.n	800388c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80036e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003894 <SD_disk_initialize+0x1c8>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <SD_disk_initialize+0x2a>
    return Stat;
 80036ee:	4b69      	ldr	r3, [pc, #420]	@ (8003894 <SD_disk_initialize+0x1c8>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	e0ca      	b.n	800388c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80036f6:	f7ff fea9 	bl	800344c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80036fa:	f7ff fe2d 	bl	8003358 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8003702:	2100      	movs	r1, #0
 8003704:	2040      	movs	r0, #64	@ 0x40
 8003706:	f7ff ff8f 	bl	8003628 <SD_SendCmd>
 800370a:	4603      	mov	r3, r0
 800370c:	2b01      	cmp	r3, #1
 800370e:	f040 80a5 	bne.w	800385c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8003712:	4b61      	ldr	r3, [pc, #388]	@ (8003898 <SD_disk_initialize+0x1cc>)
 8003714:	2264      	movs	r2, #100	@ 0x64
 8003716:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003718:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800371c:	2048      	movs	r0, #72	@ 0x48
 800371e:	f7ff ff83 	bl	8003628 <SD_SendCmd>
 8003722:	4603      	mov	r3, r0
 8003724:	2b01      	cmp	r3, #1
 8003726:	d158      	bne.n	80037da <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]
 800372c:	e00c      	b.n	8003748 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800372e:	7bfc      	ldrb	r4, [r7, #15]
 8003730:	f7ff fe44 	bl	80033bc <SPI_RxByte>
 8003734:	4603      	mov	r3, r0
 8003736:	461a      	mov	r2, r3
 8003738:	f104 0310 	add.w	r3, r4, #16
 800373c:	443b      	add	r3, r7
 800373e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	3301      	adds	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d9ef      	bls.n	800372e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800374e:	7abb      	ldrb	r3, [r7, #10]
 8003750:	2b01      	cmp	r3, #1
 8003752:	f040 8083 	bne.w	800385c <SD_disk_initialize+0x190>
 8003756:	7afb      	ldrb	r3, [r7, #11]
 8003758:	2baa      	cmp	r3, #170	@ 0xaa
 800375a:	d17f      	bne.n	800385c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800375c:	2100      	movs	r1, #0
 800375e:	2077      	movs	r0, #119	@ 0x77
 8003760:	f7ff ff62 	bl	8003628 <SD_SendCmd>
 8003764:	4603      	mov	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d807      	bhi.n	800377a <SD_disk_initialize+0xae>
 800376a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800376e:	2069      	movs	r0, #105	@ 0x69
 8003770:	f7ff ff5a 	bl	8003628 <SD_SendCmd>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800377a:	4b47      	ldr	r3, [pc, #284]	@ (8003898 <SD_disk_initialize+0x1cc>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1eb      	bne.n	800375c <SD_disk_initialize+0x90>
 8003784:	e000      	b.n	8003788 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8003786:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003788:	4b43      	ldr	r3, [pc, #268]	@ (8003898 <SD_disk_initialize+0x1cc>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d064      	beq.n	800385c <SD_disk_initialize+0x190>
 8003792:	2100      	movs	r1, #0
 8003794:	207a      	movs	r0, #122	@ 0x7a
 8003796:	f7ff ff47 	bl	8003628 <SD_SendCmd>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d15d      	bne.n	800385c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	73fb      	strb	r3, [r7, #15]
 80037a4:	e00c      	b.n	80037c0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80037a6:	7bfc      	ldrb	r4, [r7, #15]
 80037a8:	f7ff fe08 	bl	80033bc <SPI_RxByte>
 80037ac:	4603      	mov	r3, r0
 80037ae:	461a      	mov	r2, r3
 80037b0:	f104 0310 	add.w	r3, r4, #16
 80037b4:	443b      	add	r3, r7
 80037b6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	3301      	adds	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d9ef      	bls.n	80037a6 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80037c6:	7a3b      	ldrb	r3, [r7, #8]
 80037c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <SD_disk_initialize+0x108>
 80037d0:	2306      	movs	r3, #6
 80037d2:	e000      	b.n	80037d6 <SD_disk_initialize+0x10a>
 80037d4:	2302      	movs	r3, #2
 80037d6:	73bb      	strb	r3, [r7, #14]
 80037d8:	e040      	b.n	800385c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80037da:	2100      	movs	r1, #0
 80037dc:	2077      	movs	r0, #119	@ 0x77
 80037de:	f7ff ff23 	bl	8003628 <SD_SendCmd>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d808      	bhi.n	80037fa <SD_disk_initialize+0x12e>
 80037e8:	2100      	movs	r1, #0
 80037ea:	2069      	movs	r0, #105	@ 0x69
 80037ec:	f7ff ff1c 	bl	8003628 <SD_SendCmd>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d801      	bhi.n	80037fa <SD_disk_initialize+0x12e>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e000      	b.n	80037fc <SD_disk_initialize+0x130>
 80037fa:	2301      	movs	r3, #1
 80037fc:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80037fe:	7bbb      	ldrb	r3, [r7, #14]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d10e      	bne.n	8003822 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8003804:	2100      	movs	r1, #0
 8003806:	2077      	movs	r0, #119	@ 0x77
 8003808:	f7ff ff0e 	bl	8003628 <SD_SendCmd>
 800380c:	4603      	mov	r3, r0
 800380e:	2b01      	cmp	r3, #1
 8003810:	d80e      	bhi.n	8003830 <SD_disk_initialize+0x164>
 8003812:	2100      	movs	r1, #0
 8003814:	2069      	movs	r0, #105	@ 0x69
 8003816:	f7ff ff07 	bl	8003628 <SD_SendCmd>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d107      	bne.n	8003830 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8003820:	e00d      	b.n	800383e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8003822:	2100      	movs	r1, #0
 8003824:	2041      	movs	r0, #65	@ 0x41
 8003826:	f7ff feff 	bl	8003628 <SD_SendCmd>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8003830:	4b19      	ldr	r3, [pc, #100]	@ (8003898 <SD_disk_initialize+0x1cc>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e1      	bne.n	80037fe <SD_disk_initialize+0x132>
 800383a:	e000      	b.n	800383e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800383c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800383e:	4b16      	ldr	r3, [pc, #88]	@ (8003898 <SD_disk_initialize+0x1cc>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <SD_disk_initialize+0x18c>
 8003848:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800384c:	2050      	movs	r0, #80	@ 0x50
 800384e:	f7ff feeb 	bl	8003628 <SD_SendCmd>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 800385c:	4a0f      	ldr	r2, [pc, #60]	@ (800389c <SD_disk_initialize+0x1d0>)
 800385e:	7bbb      	ldrb	r3, [r7, #14]
 8003860:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8003862:	f7ff fd85 	bl	8003370 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8003866:	f7ff fda9 	bl	80033bc <SPI_RxByte>

  if (type)
 800386a:	7bbb      	ldrb	r3, [r7, #14]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8003870:	4b08      	ldr	r3, [pc, #32]	@ (8003894 <SD_disk_initialize+0x1c8>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f023 0301 	bic.w	r3, r3, #1
 800387a:	b2da      	uxtb	r2, r3
 800387c:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <SD_disk_initialize+0x1c8>)
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e001      	b.n	8003886 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8003882:	f7ff fe2f 	bl	80034e4 <SD_PowerOff>
  }

  return Stat;
 8003886:	4b03      	ldr	r3, [pc, #12]	@ (8003894 <SD_disk_initialize+0x1c8>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b2db      	uxtb	r3, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	bd90      	pop	{r4, r7, pc}
 8003894:	200000a8 	.word	0x200000a8
 8003898:	20000be5 	.word	0x20000be5
 800389c:	200008b4 	.word	0x200008b4

080038a0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <SD_disk_status+0x14>
    return STA_NOINIT;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e002      	b.n	80038ba <SD_disk_status+0x1a>

  return Stat;
 80038b4:	4b04      	ldr	r3, [pc, #16]	@ (80038c8 <SD_disk_status+0x28>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	b2db      	uxtb	r3, r3
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	200000a8 	.word	0x200000a8

080038cc <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4603      	mov	r3, r0
 80038da:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d102      	bne.n	80038e8 <SD_disk_read+0x1c>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <SD_disk_read+0x20>
    return RES_PARERR;
 80038e8:	2304      	movs	r3, #4
 80038ea:	e051      	b.n	8003990 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80038ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003998 <SD_disk_read+0xcc>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <SD_disk_read+0x32>
    return RES_NOTRDY;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e048      	b.n	8003990 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80038fe:	4b27      	ldr	r3, [pc, #156]	@ (800399c <SD_disk_read+0xd0>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d102      	bne.n	8003910 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	025b      	lsls	r3, r3, #9
 800390e:	607b      	str	r3, [r7, #4]

  SELECT();
 8003910:	f7ff fd22 	bl	8003358 <SELECT>

  if (count == 1)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d111      	bne.n	800393e <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	2051      	movs	r0, #81	@ 0x51
 800391e:	f7ff fe83 	bl	8003628 <SD_SendCmd>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d129      	bne.n	800397c <SD_disk_read+0xb0>
 8003928:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800392c:	68b8      	ldr	r0, [r7, #8]
 800392e:	f7ff fdf1 	bl	8003514 <SD_RxDataBlock>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d021      	beq.n	800397c <SD_disk_read+0xb0>
      count = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	e01e      	b.n	800397c <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	2052      	movs	r0, #82	@ 0x52
 8003942:	f7ff fe71 	bl	8003628 <SD_SendCmd>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d117      	bne.n	800397c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 800394c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003950:	68b8      	ldr	r0, [r7, #8]
 8003952:	f7ff fddf 	bl	8003514 <SD_RxDataBlock>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <SD_disk_read+0xa6>
          break;

        buff += 512;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003962:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	3b01      	subs	r3, #1
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ed      	bne.n	800394c <SD_disk_read+0x80>
 8003970:	e000      	b.n	8003974 <SD_disk_read+0xa8>
          break;
 8003972:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8003974:	2100      	movs	r1, #0
 8003976:	204c      	movs	r0, #76	@ 0x4c
 8003978:	f7ff fe56 	bl	8003628 <SD_SendCmd>
    }
  }

  DESELECT();
 800397c:	f7ff fcf8 	bl	8003370 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8003980:	f7ff fd1c 	bl	80033bc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	bf14      	ite	ne
 800398a:	2301      	movne	r3, #1
 800398c:	2300      	moveq	r3, #0
 800398e:	b2db      	uxtb	r3, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	200000a8 	.word	0x200000a8
 800399c:	200008b4 	.word	0x200008b4

080039a0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	4603      	mov	r3, r0
 80039ae:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d102      	bne.n	80039bc <SD_disk_write+0x1c>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <SD_disk_write+0x20>
    return RES_PARERR;
 80039bc:	2304      	movs	r3, #4
 80039be:	e06b      	b.n	8003a98 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80039c0:	4b37      	ldr	r3, [pc, #220]	@ (8003aa0 <SD_disk_write+0x100>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e062      	b.n	8003a98 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80039d2:	4b33      	ldr	r3, [pc, #204]	@ (8003aa0 <SD_disk_write+0x100>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <SD_disk_write+0x44>
    return RES_WRPRT;
 80039e0:	2302      	movs	r3, #2
 80039e2:	e059      	b.n	8003a98 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80039e4:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa4 <SD_disk_write+0x104>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d102      	bne.n	80039f6 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	025b      	lsls	r3, r3, #9
 80039f4:	607b      	str	r3, [r7, #4]

  SELECT();
 80039f6:	f7ff fcaf 	bl	8003358 <SELECT>

  if (count == 1)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d110      	bne.n	8003a22 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	2058      	movs	r0, #88	@ 0x58
 8003a04:	f7ff fe10 	bl	8003628 <SD_SendCmd>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d13a      	bne.n	8003a84 <SD_disk_write+0xe4>
 8003a0e:	21fe      	movs	r1, #254	@ 0xfe
 8003a10:	68b8      	ldr	r0, [r7, #8]
 8003a12:	f7ff fdb5 	bl	8003580 <SD_TxDataBlock>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d033      	beq.n	8003a84 <SD_disk_write+0xe4>
      count = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	e030      	b.n	8003a84 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8003a22:	4b20      	ldr	r3, [pc, #128]	@ (8003aa4 <SD_disk_write+0x104>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8003a2e:	2100      	movs	r1, #0
 8003a30:	2077      	movs	r0, #119	@ 0x77
 8003a32:	f7ff fdf9 	bl	8003628 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8003a36:	6839      	ldr	r1, [r7, #0]
 8003a38:	2057      	movs	r0, #87	@ 0x57
 8003a3a:	f7ff fdf5 	bl	8003628 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	2059      	movs	r0, #89	@ 0x59
 8003a42:	f7ff fdf1 	bl	8003628 <SD_SendCmd>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d11b      	bne.n	8003a84 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8003a4c:	21fc      	movs	r1, #252	@ 0xfc
 8003a4e:	68b8      	ldr	r0, [r7, #8]
 8003a50:	f7ff fd96 	bl	8003580 <SD_TxDataBlock>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003a60:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1ee      	bne.n	8003a4c <SD_disk_write+0xac>
 8003a6e:	e000      	b.n	8003a72 <SD_disk_write+0xd2>
          break;
 8003a70:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8003a72:	21fd      	movs	r1, #253	@ 0xfd
 8003a74:	2000      	movs	r0, #0
 8003a76:	f7ff fd83 	bl	8003580 <SD_TxDataBlock>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <SD_disk_write+0xe4>
      {
        count = 1;
 8003a80:	2301      	movs	r3, #1
 8003a82:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8003a84:	f7ff fc74 	bl	8003370 <DESELECT>
  SPI_RxByte();
 8003a88:	f7ff fc98 	bl	80033bc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	200000a8 	.word	0x200000a8
 8003aa4:	200008b4 	.word	0x200008b4

08003aa8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003aa8:	b590      	push	{r4, r7, lr}
 8003aaa:	b08b      	sub	sp, #44	@ 0x2c
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	603a      	str	r2, [r7, #0]
 8003ab2:	71fb      	strb	r3, [r7, #7]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8003ac2:	2304      	movs	r3, #4
 8003ac4:	e119      	b.n	8003cfa <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8003acc:	79bb      	ldrb	r3, [r7, #6]
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	d129      	bne.n	8003b26 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d017      	beq.n	8003b0a <SD_disk_ioctl+0x62>
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	dc1f      	bgt.n	8003b1e <SD_disk_ioctl+0x76>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <SD_disk_ioctl+0x40>
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d00b      	beq.n	8003afe <SD_disk_ioctl+0x56>
 8003ae6:	e01a      	b.n	8003b1e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8003ae8:	f7ff fd08 	bl	80034fc <SD_CheckPower>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8003af2:	f7ff fcf7 	bl	80034e4 <SD_PowerOff>
      res = RES_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003afc:	e0fb      	b.n	8003cf6 <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8003afe:	f7ff fca5 	bl	800344c <SD_PowerOn>
      res = RES_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003b08:	e0f5      	b.n	8003cf6 <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	1c5c      	adds	r4, r3, #1
 8003b0e:	f7ff fcf5 	bl	80034fc <SD_CheckPower>
 8003b12:	4603      	mov	r3, r0
 8003b14:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8003b16:	2300      	movs	r3, #0
 8003b18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003b1c:	e0eb      	b.n	8003cf6 <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8003b1e:	2304      	movs	r3, #4
 8003b20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003b24:	e0e7      	b.n	8003cf6 <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8003b26:	4b77      	ldr	r3, [pc, #476]	@ (8003d04 <SD_disk_ioctl+0x25c>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e0e0      	b.n	8003cfa <SD_disk_ioctl+0x252>

    SELECT();
 8003b38:	f7ff fc0e 	bl	8003358 <SELECT>

    switch (ctrl)
 8003b3c:	79bb      	ldrb	r3, [r7, #6]
 8003b3e:	2b0d      	cmp	r3, #13
 8003b40:	f200 80ca 	bhi.w	8003cd8 <SD_disk_ioctl+0x230>
 8003b44:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <SD_disk_ioctl+0xa4>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003c43 	.word	0x08003c43
 8003b50:	08003b85 	.word	0x08003b85
 8003b54:	08003c33 	.word	0x08003c33
 8003b58:	08003cd9 	.word	0x08003cd9
 8003b5c:	08003cd9 	.word	0x08003cd9
 8003b60:	08003cd9 	.word	0x08003cd9
 8003b64:	08003cd9 	.word	0x08003cd9
 8003b68:	08003cd9 	.word	0x08003cd9
 8003b6c:	08003cd9 	.word	0x08003cd9
 8003b70:	08003cd9 	.word	0x08003cd9
 8003b74:	08003cd9 	.word	0x08003cd9
 8003b78:	08003c55 	.word	0x08003c55
 8003b7c:	08003c79 	.word	0x08003c79
 8003b80:	08003c9d 	.word	0x08003c9d
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003b84:	2100      	movs	r1, #0
 8003b86:	2049      	movs	r0, #73	@ 0x49
 8003b88:	f7ff fd4e 	bl	8003628 <SD_SendCmd>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f040 80a6 	bne.w	8003ce0 <SD_disk_ioctl+0x238>
 8003b94:	f107 030c 	add.w	r3, r7, #12
 8003b98:	2110      	movs	r1, #16
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff fcba 	bl	8003514 <SD_RxDataBlock>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 809c 	beq.w	8003ce0 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 8003ba8:	7b3b      	ldrb	r3, [r7, #12]
 8003baa:	099b      	lsrs	r3, r3, #6
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d10d      	bne.n	8003bce <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003bb2:	7d7b      	ldrb	r3, [r7, #21]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	7d3b      	ldrb	r3, [r7, #20]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8003bc4:	8bfb      	ldrh	r3, [r7, #30]
 8003bc6:	029a      	lsls	r2, r3, #10
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	e02d      	b.n	8003c2a <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003bce:	7c7b      	ldrb	r3, [r7, #17]
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	7dbb      	ldrb	r3, [r7, #22]
 8003bd8:	09db      	lsrs	r3, r3, #7
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	7d7b      	ldrb	r3, [r7, #21]
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f003 0306 	and.w	r3, r3, #6
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003bf6:	7d3b      	ldrb	r3, [r7, #20]
 8003bf8:	099b      	lsrs	r3, r3, #6
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	7cfb      	ldrb	r3, [r7, #19]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	4413      	add	r3, r2
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	7cbb      	ldrb	r3, [r7, #18]
 8003c0a:	029b      	lsls	r3, r3, #10
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3301      	adds	r3, #1
 8003c1a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003c1c:	8bfa      	ldrh	r2, [r7, #30]
 8003c1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c22:	3b09      	subs	r3, #9
 8003c24:	409a      	lsls	r2, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8003c30:	e056      	b.n	8003ce0 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c38:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c40:	e055      	b.n	8003cee <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8003c42:	f7ff fbe7 	bl	8003414 <SD_ReadyWait>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2bff      	cmp	r3, #255	@ 0xff
 8003c4a:	d14b      	bne.n	8003ce4 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c52:	e047      	b.n	8003ce4 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8003c54:	2100      	movs	r1, #0
 8003c56:	2049      	movs	r0, #73	@ 0x49
 8003c58:	f7ff fce6 	bl	8003628 <SD_SendCmd>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d142      	bne.n	8003ce8 <SD_disk_ioctl+0x240>
 8003c62:	2110      	movs	r1, #16
 8003c64:	6a38      	ldr	r0, [r7, #32]
 8003c66:	f7ff fc55 	bl	8003514 <SD_RxDataBlock>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d03b      	beq.n	8003ce8 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c76:	e037      	b.n	8003ce8 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8003c78:	2100      	movs	r1, #0
 8003c7a:	204a      	movs	r0, #74	@ 0x4a
 8003c7c:	f7ff fcd4 	bl	8003628 <SD_SendCmd>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d132      	bne.n	8003cec <SD_disk_ioctl+0x244>
 8003c86:	2110      	movs	r1, #16
 8003c88:	6a38      	ldr	r0, [r7, #32]
 8003c8a:	f7ff fc43 	bl	8003514 <SD_RxDataBlock>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d02b      	beq.n	8003cec <SD_disk_ioctl+0x244>
        res = RES_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c9a:	e027      	b.n	8003cec <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	207a      	movs	r0, #122	@ 0x7a
 8003ca0:	f7ff fcc2 	bl	8003628 <SD_SendCmd>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d116      	bne.n	8003cd8 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 8003caa:	2300      	movs	r3, #0
 8003cac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003cb0:	e00b      	b.n	8003cca <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8003cb2:	6a3c      	ldr	r4, [r7, #32]
 8003cb4:	1c63      	adds	r3, r4, #1
 8003cb6:	623b      	str	r3, [r7, #32]
 8003cb8:	f7ff fb80 	bl	80033bc <SPI_RxByte>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003cc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003cca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d9ef      	bls.n	8003cb2 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 8003cd8:	2304      	movs	r3, #4
 8003cda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003cde:	e006      	b.n	8003cee <SD_disk_ioctl+0x246>
      break;
 8003ce0:	bf00      	nop
 8003ce2:	e004      	b.n	8003cee <SD_disk_ioctl+0x246>
      break;
 8003ce4:	bf00      	nop
 8003ce6:	e002      	b.n	8003cee <SD_disk_ioctl+0x246>
      break;
 8003ce8:	bf00      	nop
 8003cea:	e000      	b.n	8003cee <SD_disk_ioctl+0x246>
      break;
 8003cec:	bf00      	nop
    }

    DESELECT();
 8003cee:	f7ff fb3f 	bl	8003370 <DESELECT>
    SPI_RxByte();
 8003cf2:	f7ff fb63 	bl	80033bc <SPI_RxByte>
  }

  return res;
 8003cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	372c      	adds	r7, #44	@ 0x2c
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd90      	pop	{r4, r7, pc}
 8003d02:	bf00      	nop
 8003d04:	200000a8 	.word	0x200000a8

08003d08 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	@ 0x28
 8003d0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d0e:	f107 0314 	add.w	r3, r7, #20
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	609a      	str	r2, [r3, #8]
 8003d1a:	60da      	str	r2, [r3, #12]
 8003d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	4b56      	ldr	r3, [pc, #344]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d26:	4a55      	ldr	r2, [pc, #340]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d28:	f043 0304 	orr.w	r3, r3, #4
 8003d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d2e:	4b53      	ldr	r3, [pc, #332]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	4b4f      	ldr	r3, [pc, #316]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	4a4e      	ldr	r2, [pc, #312]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	4b48      	ldr	r3, [pc, #288]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	4a47      	ldr	r2, [pc, #284]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d66:	4b45      	ldr	r3, [pc, #276]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	4b41      	ldr	r3, [pc, #260]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7a:	4a40      	ldr	r2, [pc, #256]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d82:	4b3e      	ldr	r3, [pc, #248]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	607b      	str	r3, [r7, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d94:	483a      	ldr	r0, [pc, #232]	@ (8003e80 <MX_GPIO_Init+0x178>)
 8003d96:	f002 fb61 	bl	800645c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|BMP_CS_Pin, GPIO_PIN_RESET);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2105      	movs	r1, #5
 8003d9e:	4839      	ldr	r0, [pc, #228]	@ (8003e84 <MX_GPIO_Init+0x17c>)
 8003da0:	f002 fb5c 	bl	800645c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, uLed_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8003da4:	2200      	movs	r2, #0
 8003da6:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8003daa:	4837      	ldr	r0, [pc, #220]	@ (8003e88 <MX_GPIO_Init+0x180>)
 8003dac:	f002 fb56 	bl	800645c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CS_Pin;
 8003db0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003db6:	2301      	movs	r3, #1
 8003db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CS_GPIO_Port, &GPIO_InitStruct);
 8003dc2:	f107 0314 	add.w	r3, r7, #20
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	482d      	ldr	r0, [pc, #180]	@ (8003e80 <MX_GPIO_Init+0x178>)
 8003dca:	f002 f9c3 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003dce:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ddc:	f107 0314 	add.w	r3, r7, #20
 8003de0:	4619      	mov	r1, r3
 8003de2:	4827      	ldr	r0, [pc, #156]	@ (8003e80 <MX_GPIO_Init+0x178>)
 8003de4:	f002 f9b6 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA4 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_12;
 8003de8:	f241 0315 	movw	r3, #4117	@ 0x1015
 8003dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dee:	2303      	movs	r3, #3
 8003df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df6:	f107 0314 	add.w	r3, r7, #20
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4822      	ldr	r0, [pc, #136]	@ (8003e88 <MX_GPIO_Init+0x180>)
 8003dfe:	f002 f9a9 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|BMP_CS_Pin;
 8003e02:	2305      	movs	r3, #5
 8003e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e06:	2301      	movs	r3, #1
 8003e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e12:	f107 0314 	add.w	r3, r7, #20
 8003e16:	4619      	mov	r1, r3
 8003e18:	481a      	ldr	r0, [pc, #104]	@ (8003e84 <MX_GPIO_Init+0x17c>)
 8003e1a:	f002 f99b 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 8003e1e:	f240 2302 	movw	r3, #514	@ 0x202
 8003e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e24:	2303      	movs	r3, #3
 8003e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e2c:	f107 0314 	add.w	r3, r7, #20
 8003e30:	4619      	mov	r1, r3
 8003e32:	4814      	ldr	r0, [pc, #80]	@ (8003e84 <MX_GPIO_Init+0x17c>)
 8003e34:	f002 f98e 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uLed_Pin;
 8003e38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e46:	2300      	movs	r3, #0
 8003e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uLed_GPIO_Port, &GPIO_InitStruct);
 8003e4a:	f107 0314 	add.w	r3, r7, #20
 8003e4e:	4619      	mov	r1, r3
 8003e50:	480d      	ldr	r0, [pc, #52]	@ (8003e88 <MX_GPIO_Init+0x180>)
 8003e52:	f002 f97f 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8003e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e64:	2302      	movs	r3, #2
 8003e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8003e68:	f107 0314 	add.w	r3, r7, #20
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4806      	ldr	r0, [pc, #24]	@ (8003e88 <MX_GPIO_Init+0x180>)
 8003e70:	f002 f970 	bl	8006154 <HAL_GPIO_Init>

}
 8003e74:	bf00      	nop
 8003e76:	3728      	adds	r7, #40	@ 0x28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40020800 	.word	0x40020800
 8003e84:	40020400 	.word	0x40020400
 8003e88:	40020000 	.word	0x40020000

08003e8c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e90:	4b13      	ldr	r3, [pc, #76]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003e92:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <MX_I2C1_Init+0x58>)
 8003e94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 8003e96:	4b12      	ldr	r3, [pc, #72]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003e98:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8003e9c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003eac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003eb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003eb8:	4b09      	ldr	r3, [pc, #36]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ebe:	4b08      	ldr	r3, [pc, #32]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ec4:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003eca:	4805      	ldr	r0, [pc, #20]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003ecc:	f002 fae0 	bl	8006490 <HAL_I2C_Init>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8003ed6:	f000 fa29 	bl	800432c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	200008b8 	.word	0x200008b8
 8003ee4:	40005400 	.word	0x40005400

08003ee8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003eec:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003eee:	4a13      	ldr	r2, [pc, #76]	@ (8003f3c <MX_I2C2_Init+0x54>)
 8003ef0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 200000;
 8003ef2:	4b11      	ldr	r3, [pc, #68]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003ef4:	4a12      	ldr	r2, [pc, #72]	@ (8003f40 <MX_I2C2_Init+0x58>)
 8003ef6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003efe:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f04:	4b0c      	ldr	r3, [pc, #48]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003f06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f0a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003f12:	4b09      	ldr	r3, [pc, #36]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f18:	4b07      	ldr	r3, [pc, #28]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f1e:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003f24:	4804      	ldr	r0, [pc, #16]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003f26:	f002 fab3 	bl	8006490 <HAL_I2C_Init>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003f30:	f000 f9fc 	bl	800432c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003f34:	bf00      	nop
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	2000090c 	.word	0x2000090c
 8003f3c:	40005800 	.word	0x40005800
 8003f40:	00030d40 	.word	0x00030d40

08003f44 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003f48:	4b12      	ldr	r3, [pc, #72]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f4a:	4a13      	ldr	r2, [pc, #76]	@ (8003f98 <MX_I2C3_Init+0x54>)
 8003f4c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003f4e:	4b11      	ldr	r3, [pc, #68]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f50:	4a12      	ldr	r2, [pc, #72]	@ (8003f9c <MX_I2C3_Init+0x58>)
 8003f52:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f54:	4b0f      	ldr	r3, [pc, #60]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f60:	4b0c      	ldr	r3, [pc, #48]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f66:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f68:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003f6e:	4b09      	ldr	r3, [pc, #36]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f74:	4b07      	ldr	r3, [pc, #28]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f7a:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003f80:	4804      	ldr	r0, [pc, #16]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f82:	f002 fa85 	bl	8006490 <HAL_I2C_Init>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003f8c:	f000 f9ce 	bl	800432c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003f90:	bf00      	nop
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000960 	.word	0x20000960
 8003f98:	40005c00 	.word	0x40005c00
 8003f9c:	000186a0 	.word	0x000186a0

08003fa0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08e      	sub	sp, #56	@ 0x38
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a63      	ldr	r2, [pc, #396]	@ (800414c <HAL_I2C_MspInit+0x1ac>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d12c      	bne.n	800401c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	623b      	str	r3, [r7, #32]
 8003fc6:	4b62      	ldr	r3, [pc, #392]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fca:	4a61      	ldr	r2, [pc, #388]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8003fcc:	f043 0302 	orr.w	r3, r3, #2
 8003fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	623b      	str	r3, [r7, #32]
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fde:	23c0      	movs	r3, #192	@ 0xc0
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fe2:	2312      	movs	r3, #18
 8003fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fea:	2303      	movs	r3, #3
 8003fec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fee:	2304      	movs	r3, #4
 8003ff0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4856      	ldr	r0, [pc, #344]	@ (8004154 <HAL_I2C_MspInit+0x1b4>)
 8003ffa:	f002 f8ab 	bl	8006154 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	4b53      	ldr	r3, [pc, #332]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	4a52      	ldr	r2, [pc, #328]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8004008:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800400c:	6413      	str	r3, [r2, #64]	@ 0x40
 800400e:	4b50      	ldr	r3, [pc, #320]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800401a:	e093      	b.n	8004144 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a4d      	ldr	r2, [pc, #308]	@ (8004158 <HAL_I2C_MspInit+0x1b8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d13d      	bne.n	80040a2 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	4b49      	ldr	r3, [pc, #292]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	4a48      	ldr	r2, [pc, #288]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8004030:	f043 0302 	orr.w	r3, r3, #2
 8004034:	6313      	str	r3, [r2, #48]	@ 0x30
 8004036:	4b46      	ldr	r3, [pc, #280]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004042:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004048:	2312      	movs	r3, #18
 800404a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404c:	2300      	movs	r3, #0
 800404e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004050:	2303      	movs	r3, #3
 8004052:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004054:	2304      	movs	r3, #4
 8004056:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800405c:	4619      	mov	r1, r3
 800405e:	483d      	ldr	r0, [pc, #244]	@ (8004154 <HAL_I2C_MspInit+0x1b4>)
 8004060:	f002 f878 	bl	8006154 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004064:	2308      	movs	r3, #8
 8004066:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004068:	2312      	movs	r3, #18
 800406a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406c:	2300      	movs	r3, #0
 800406e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004070:	2303      	movs	r3, #3
 8004072:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004074:	2309      	movs	r3, #9
 8004076:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800407c:	4619      	mov	r1, r3
 800407e:	4835      	ldr	r0, [pc, #212]	@ (8004154 <HAL_I2C_MspInit+0x1b4>)
 8004080:	f002 f868 	bl	8006154 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	4b31      	ldr	r3, [pc, #196]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	4a30      	ldr	r2, [pc, #192]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 800408e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004092:	6413      	str	r3, [r2, #64]	@ 0x40
 8004094:	4b2e      	ldr	r3, [pc, #184]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	697b      	ldr	r3, [r7, #20]
}
 80040a0:	e050      	b.n	8004144 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C3)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a2d      	ldr	r2, [pc, #180]	@ (800415c <HAL_I2C_MspInit+0x1bc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d14b      	bne.n	8004144 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	4b27      	ldr	r3, [pc, #156]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 80040b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b4:	4a26      	ldr	r2, [pc, #152]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80040bc:	4b24      	ldr	r3, [pc, #144]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 80040be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	4b20      	ldr	r3, [pc, #128]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 80040ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 80040d2:	f043 0302 	orr.w	r3, r3, #2
 80040d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80040d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 80040da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAG_SCL_Pin;
 80040e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040ea:	2312      	movs	r3, #18
 80040ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f2:	2303      	movs	r3, #3
 80040f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80040f6:	2304      	movs	r3, #4
 80040f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SCL_GPIO_Port, &GPIO_InitStruct);
 80040fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040fe:	4619      	mov	r1, r3
 8004100:	4817      	ldr	r0, [pc, #92]	@ (8004160 <HAL_I2C_MspInit+0x1c0>)
 8004102:	f002 f827 	bl	8006154 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAG_SDA_Pin;
 8004106:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800410a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800410c:	2312      	movs	r3, #18
 800410e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2300      	movs	r3, #0
 8004112:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004114:	2303      	movs	r3, #3
 8004116:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8004118:	2309      	movs	r3, #9
 800411a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SDA_GPIO_Port, &GPIO_InitStruct);
 800411c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004120:	4619      	mov	r1, r3
 8004122:	480c      	ldr	r0, [pc, #48]	@ (8004154 <HAL_I2C_MspInit+0x1b4>)
 8004124:	f002 f816 	bl	8006154 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004128:	2300      	movs	r3, #0
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	4b08      	ldr	r3, [pc, #32]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	4a07      	ldr	r2, [pc, #28]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8004132:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004136:	6413      	str	r3, [r2, #64]	@ 0x40
 8004138:	4b05      	ldr	r3, [pc, #20]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	68bb      	ldr	r3, [r7, #8]
}
 8004144:	bf00      	nop
 8004146:	3738      	adds	r7, #56	@ 0x38
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40005400 	.word	0x40005400
 8004150:	40023800 	.word	0x40023800
 8004154:	40020400 	.word	0x40020400
 8004158:	40005800 	.word	0x40005800
 800415c:	40005c00 	.word	0x40005c00
 8004160:	40020000 	.word	0x40020000

08004164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004168:	f000 fdfe 	bl	8004d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800416c:	f000 f856 	bl	800421c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004170:	f7ff fdca 	bl	8003d08 <MX_GPIO_Init>
  MX_DMA_Init();
 8004174:	f7ff f8c0 	bl	80032f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8004178:	f7ff f828 	bl	80031cc <MX_ADC1_Init>
  MX_I2C1_Init();
 800417c:	f7ff fe86 	bl	8003e8c <MX_I2C1_Init>
  MX_I2C2_Init();
 8004180:	f7ff feb2 	bl	8003ee8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8004184:	f7ff fede 	bl	8003f44 <MX_I2C3_Init>
  MX_SPI1_Init();
 8004188:	f000 f8d6 	bl	8004338 <MX_SPI1_Init>
  MX_SPI2_Init();
 800418c:	f000 f90a 	bl	80043a4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8004190:	f000 f93e 	bl	8004410 <MX_SPI3_Init>
  MX_TIM2_Init();
 8004194:	f000 fc36 	bl	8004a04 <MX_TIM2_Init>
  MX_FATFS_Init();
 8004198:	f006 f98c 	bl	800a4b4 <MX_FATFS_Init>
  MX_TIM5_Init();
 800419c:	f000 fca8 	bl	8004af0 <MX_TIM5_Init>
  MX_TIM1_Init();
 80041a0:	f000 fbac 	bl	80048fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  MEMORY_init();
 80041a4:	f7fe ff7c 	bl	80030a0 <MEMORY_init>
  BLACKBOX_Init();
 80041a8:	f7fe fa1a 	bl	80025e0 <BLACKBOX_Init>
  MPU6050_Init();
 80041ac:	f7fe f912 	bl	80023d4 <MPU6050_Init>
  BMP280_init();
 80041b0:	f7fd fb68 	bl	8001884 <BMP280_init>

  TIM2->CCR4 = 1500;
 80041b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80041b8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80041bc:	641a      	str	r2, [r3, #64]	@ 0x40

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80041be:	210c      	movs	r1, #12
 80041c0:	4811      	ldr	r0, [pc, #68]	@ (8004208 <main+0xa4>)
 80041c2:	f004 fdcb 	bl	8008d5c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80041c6:	4811      	ldr	r0, [pc, #68]	@ (800420c <main+0xa8>)
 80041c8:	f004 fd0c 	bl	8008be4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80041cc:	2104      	movs	r1, #4
 80041ce:	4810      	ldr	r0, [pc, #64]	@ (8004210 <main+0xac>)
 80041d0:	f004 ff92 	bl	80090f8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 80041d4:	2100      	movs	r1, #0
 80041d6:	480e      	ldr	r0, [pc, #56]	@ (8004210 <main+0xac>)
 80041d8:	f004 fec0 	bl	8008f5c <HAL_TIM_IC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		get_ACC();
 80041dc:	f7fe fb0e 	bl	80027fc <get_ACC>
		get_STATUS();
 80041e0:	f7fe ff84 	bl	80030ec <get_STATUS>
		BMP280_calculate();
 80041e4:	f7fd fb72 	bl	80018cc <BMP280_calculate>
		get_ATTS(&MPU6050);
 80041e8:	480a      	ldr	r0, [pc, #40]	@ (8004214 <main+0xb0>)
 80041ea:	f7fe fe3d 	bl	8002e68 <get_ATTS>
		DeployParachute();
 80041ee:	f7fe ff89 	bl	8003104 <DeployParachute>
		if(test){
 80041f2:	4b09      	ldr	r3, [pc, #36]	@ (8004218 <main+0xb4>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <main+0x78>
			MPU6050_calibration();
 80041fa:	f7fd fee7 	bl	8001fcc <MPU6050_calibration>
			test=0;
 80041fe:	4b06      	ldr	r3, [pc, #24]	@ (8004218 <main+0xb4>)
 8004200:	2200      	movs	r2, #0
 8004202:	701a      	strb	r2, [r3, #0]
		get_ACC();
 8004204:	e7ea      	b.n	80041dc <main+0x78>
 8004206:	bf00      	nop
 8004208:	20000c30 	.word	0x20000c30
 800420c:	20000c78 	.word	0x20000c78
 8004210:	20000be8 	.word	0x20000be8
 8004214:	20000198 	.word	0x20000198
 8004218:	200009b4 	.word	0x200009b4

0800421c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b094      	sub	sp, #80	@ 0x50
 8004220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004222:	f107 0320 	add.w	r3, r7, #32
 8004226:	2230      	movs	r2, #48	@ 0x30
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f009 f9c1 	bl	800d5b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004230:	f107 030c 	add.w	r3, r7, #12
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	605a      	str	r2, [r3, #4]
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	60da      	str	r2, [r3, #12]
 800423e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004240:	2300      	movs	r3, #0
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	4b27      	ldr	r3, [pc, #156]	@ (80042e4 <SystemClock_Config+0xc8>)
 8004246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004248:	4a26      	ldr	r2, [pc, #152]	@ (80042e4 <SystemClock_Config+0xc8>)
 800424a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800424e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004250:	4b24      	ldr	r3, [pc, #144]	@ (80042e4 <SystemClock_Config+0xc8>)
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800425c:	2300      	movs	r3, #0
 800425e:	607b      	str	r3, [r7, #4]
 8004260:	4b21      	ldr	r3, [pc, #132]	@ (80042e8 <SystemClock_Config+0xcc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a20      	ldr	r2, [pc, #128]	@ (80042e8 <SystemClock_Config+0xcc>)
 8004266:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	4b1e      	ldr	r3, [pc, #120]	@ (80042e8 <SystemClock_Config+0xcc>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004274:	607b      	str	r3, [r7, #4]
 8004276:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004278:	2301      	movs	r3, #1
 800427a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800427c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004282:	2302      	movs	r3, #2
 8004284:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004286:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800428a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800428c:	230c      	movs	r3, #12
 800428e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8004290:	2360      	movs	r3, #96	@ 0x60
 8004292:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004294:	2302      	movs	r3, #2
 8004296:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004298:	2304      	movs	r3, #4
 800429a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800429c:	f107 0320 	add.w	r3, r7, #32
 80042a0:	4618      	mov	r0, r3
 80042a2:	f003 f919 	bl	80074d8 <HAL_RCC_OscConfig>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80042ac:	f000 f83e 	bl	800432c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042b0:	230f      	movs	r3, #15
 80042b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042b4:	2302      	movs	r3, #2
 80042b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80042bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80042c6:	f107 030c 	add.w	r3, r7, #12
 80042ca:	2103      	movs	r1, #3
 80042cc:	4618      	mov	r0, r3
 80042ce:	f003 fb7b 	bl	80079c8 <HAL_RCC_ClockConfig>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80042d8:	f000 f828 	bl	800432c <Error_Handler>
  }
}
 80042dc:	bf00      	nop
 80042de:	3750      	adds	r7, #80	@ 0x50
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40007000 	.word	0x40007000

080042ec <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // If the interrupt is triggered by channel 1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	7f1b      	ldrb	r3, [r3, #28]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d106      	bne.n	800430a <HAL_TIM_IC_CaptureCallback+0x1e>
	{
		// Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80042fc:	2104      	movs	r1, #4
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f005 fb6c 	bl	80099dc <HAL_TIM_ReadCapturedValue>
 8004304:	4603      	mov	r3, r0
 8004306:	4a03      	ldr	r2, [pc, #12]	@ (8004314 <HAL_TIM_IC_CaptureCallback+0x28>)
 8004308:	6013      	str	r3, [r2, #0]
	}
}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	200009b8 	.word	0x200009b8

08004318 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
	BLACKBOX_StoreData();
 8004320:	f7fe f9de 	bl	80026e0 <BLACKBOX_StoreData>
}
 8004324:	bf00      	nop
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004330:	b672      	cpsid	i
}
 8004332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004334:	bf00      	nop
 8004336:	e7fd      	b.n	8004334 <Error_Handler+0x8>

08004338 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800433c:	4b17      	ldr	r3, [pc, #92]	@ (800439c <MX_SPI1_Init+0x64>)
 800433e:	4a18      	ldr	r2, [pc, #96]	@ (80043a0 <MX_SPI1_Init+0x68>)
 8004340:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004342:	4b16      	ldr	r3, [pc, #88]	@ (800439c <MX_SPI1_Init+0x64>)
 8004344:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004348:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800434a:	4b14      	ldr	r3, [pc, #80]	@ (800439c <MX_SPI1_Init+0x64>)
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004350:	4b12      	ldr	r3, [pc, #72]	@ (800439c <MX_SPI1_Init+0x64>)
 8004352:	2200      	movs	r2, #0
 8004354:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004356:	4b11      	ldr	r3, [pc, #68]	@ (800439c <MX_SPI1_Init+0x64>)
 8004358:	2200      	movs	r2, #0
 800435a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800435c:	4b0f      	ldr	r3, [pc, #60]	@ (800439c <MX_SPI1_Init+0x64>)
 800435e:	2200      	movs	r2, #0
 8004360:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004362:	4b0e      	ldr	r3, [pc, #56]	@ (800439c <MX_SPI1_Init+0x64>)
 8004364:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004368:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800436a:	4b0c      	ldr	r3, [pc, #48]	@ (800439c <MX_SPI1_Init+0x64>)
 800436c:	2200      	movs	r2, #0
 800436e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004370:	4b0a      	ldr	r3, [pc, #40]	@ (800439c <MX_SPI1_Init+0x64>)
 8004372:	2200      	movs	r2, #0
 8004374:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004376:	4b09      	ldr	r3, [pc, #36]	@ (800439c <MX_SPI1_Init+0x64>)
 8004378:	2200      	movs	r2, #0
 800437a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800437c:	4b07      	ldr	r3, [pc, #28]	@ (800439c <MX_SPI1_Init+0x64>)
 800437e:	2200      	movs	r2, #0
 8004380:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004382:	4b06      	ldr	r3, [pc, #24]	@ (800439c <MX_SPI1_Init+0x64>)
 8004384:	220a      	movs	r2, #10
 8004386:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004388:	4804      	ldr	r0, [pc, #16]	@ (800439c <MX_SPI1_Init+0x64>)
 800438a:	f003 fce9 	bl	8007d60 <HAL_SPI_Init>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004394:	f7ff ffca 	bl	800432c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004398:	bf00      	nop
 800439a:	bd80      	pop	{r7, pc}
 800439c:	200009bc 	.word	0x200009bc
 80043a0:	40013000 	.word	0x40013000

080043a4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80043a8:	4b17      	ldr	r3, [pc, #92]	@ (8004408 <MX_SPI2_Init+0x64>)
 80043aa:	4a18      	ldr	r2, [pc, #96]	@ (800440c <MX_SPI2_Init+0x68>)
 80043ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80043ae:	4b16      	ldr	r3, [pc, #88]	@ (8004408 <MX_SPI2_Init+0x64>)
 80043b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80043b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80043b6:	4b14      	ldr	r3, [pc, #80]	@ (8004408 <MX_SPI2_Init+0x64>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80043bc:	4b12      	ldr	r3, [pc, #72]	@ (8004408 <MX_SPI2_Init+0x64>)
 80043be:	2200      	movs	r2, #0
 80043c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043c2:	4b11      	ldr	r3, [pc, #68]	@ (8004408 <MX_SPI2_Init+0x64>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004408 <MX_SPI2_Init+0x64>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80043ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004408 <MX_SPI2_Init+0x64>)
 80043d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80043d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004408 <MX_SPI2_Init+0x64>)
 80043d8:	2218      	movs	r2, #24
 80043da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004408 <MX_SPI2_Init+0x64>)
 80043de:	2200      	movs	r2, #0
 80043e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80043e2:	4b09      	ldr	r3, [pc, #36]	@ (8004408 <MX_SPI2_Init+0x64>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043e8:	4b07      	ldr	r3, [pc, #28]	@ (8004408 <MX_SPI2_Init+0x64>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80043ee:	4b06      	ldr	r3, [pc, #24]	@ (8004408 <MX_SPI2_Init+0x64>)
 80043f0:	220a      	movs	r2, #10
 80043f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80043f4:	4804      	ldr	r0, [pc, #16]	@ (8004408 <MX_SPI2_Init+0x64>)
 80043f6:	f003 fcb3 	bl	8007d60 <HAL_SPI_Init>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004400:	f7ff ff94 	bl	800432c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004404:	bf00      	nop
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20000a14 	.word	0x20000a14
 800440c:	40003800 	.word	0x40003800

08004410 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004414:	4b17      	ldr	r3, [pc, #92]	@ (8004474 <MX_SPI3_Init+0x64>)
 8004416:	4a18      	ldr	r2, [pc, #96]	@ (8004478 <MX_SPI3_Init+0x68>)
 8004418:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800441a:	4b16      	ldr	r3, [pc, #88]	@ (8004474 <MX_SPI3_Init+0x64>)
 800441c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004420:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004422:	4b14      	ldr	r3, [pc, #80]	@ (8004474 <MX_SPI3_Init+0x64>)
 8004424:	2200      	movs	r2, #0
 8004426:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004428:	4b12      	ldr	r3, [pc, #72]	@ (8004474 <MX_SPI3_Init+0x64>)
 800442a:	2200      	movs	r2, #0
 800442c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800442e:	4b11      	ldr	r3, [pc, #68]	@ (8004474 <MX_SPI3_Init+0x64>)
 8004430:	2200      	movs	r2, #0
 8004432:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004434:	4b0f      	ldr	r3, [pc, #60]	@ (8004474 <MX_SPI3_Init+0x64>)
 8004436:	2200      	movs	r2, #0
 8004438:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800443a:	4b0e      	ldr	r3, [pc, #56]	@ (8004474 <MX_SPI3_Init+0x64>)
 800443c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004440:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004442:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <MX_SPI3_Init+0x64>)
 8004444:	2210      	movs	r2, #16
 8004446:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004448:	4b0a      	ldr	r3, [pc, #40]	@ (8004474 <MX_SPI3_Init+0x64>)
 800444a:	2200      	movs	r2, #0
 800444c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800444e:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <MX_SPI3_Init+0x64>)
 8004450:	2200      	movs	r2, #0
 8004452:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004454:	4b07      	ldr	r3, [pc, #28]	@ (8004474 <MX_SPI3_Init+0x64>)
 8004456:	2200      	movs	r2, #0
 8004458:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800445a:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <MX_SPI3_Init+0x64>)
 800445c:	220a      	movs	r2, #10
 800445e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004460:	4804      	ldr	r0, [pc, #16]	@ (8004474 <MX_SPI3_Init+0x64>)
 8004462:	f003 fc7d 	bl	8007d60 <HAL_SPI_Init>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800446c:	f7ff ff5e 	bl	800432c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004470:	bf00      	nop
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20000a6c 	.word	0x20000a6c
 8004478:	40003c00 	.word	0x40003c00

0800447c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08e      	sub	sp, #56	@ 0x38
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	605a      	str	r2, [r3, #4]
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	60da      	str	r2, [r3, #12]
 8004492:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a9d      	ldr	r2, [pc, #628]	@ (8004710 <HAL_SPI_MspInit+0x294>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d12c      	bne.n	80044f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	623b      	str	r3, [r7, #32]
 80044a2:	4b9c      	ldr	r3, [pc, #624]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a6:	4a9b      	ldr	r2, [pc, #620]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 80044a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80044ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80044ae:	4b99      	ldr	r3, [pc, #612]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044b6:	623b      	str	r3, [r7, #32]
 80044b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
 80044be:	4b95      	ldr	r3, [pc, #596]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c2:	4a94      	ldr	r2, [pc, #592]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ca:	4b92      	ldr	r3, [pc, #584]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80044d6:	23e0      	movs	r3, #224	@ 0xe0
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044da:	2302      	movs	r3, #2
 80044dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e2:	2303      	movs	r3, #3
 80044e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044e6:	2305      	movs	r3, #5
 80044e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044ee:	4619      	mov	r1, r3
 80044f0:	4889      	ldr	r0, [pc, #548]	@ (8004718 <HAL_SPI_MspInit+0x29c>)
 80044f2:	f001 fe2f 	bl	8006154 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80044f6:	e106      	b.n	8004706 <HAL_SPI_MspInit+0x28a>
  else if(spiHandle->Instance==SPI2)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a87      	ldr	r2, [pc, #540]	@ (800471c <HAL_SPI_MspInit+0x2a0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d162      	bne.n	80045c8 <HAL_SPI_MspInit+0x14c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	4b83      	ldr	r3, [pc, #524]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	4a82      	ldr	r2, [pc, #520]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 800450c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004510:	6413      	str	r3, [r2, #64]	@ 0x40
 8004512:	4b80      	ldr	r3, [pc, #512]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	4b7c      	ldr	r3, [pc, #496]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004526:	4a7b      	ldr	r2, [pc, #492]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 8004528:	f043 0302 	orr.w	r3, r3, #2
 800452c:	6313      	str	r3, [r2, #48]	@ 0x30
 800452e:	4b79      	ldr	r3, [pc, #484]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 800453a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004540:	2302      	movs	r3, #2
 8004542:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004544:	2300      	movs	r3, #0
 8004546:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004548:	2303      	movs	r3, #3
 800454a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800454c:	2305      	movs	r3, #5
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004550:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004554:	4619      	mov	r1, r3
 8004556:	4872      	ldr	r0, [pc, #456]	@ (8004720 <HAL_SPI_MspInit+0x2a4>)
 8004558:	f001 fdfc 	bl	8006154 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800455c:	4b71      	ldr	r3, [pc, #452]	@ (8004724 <HAL_SPI_MspInit+0x2a8>)
 800455e:	4a72      	ldr	r2, [pc, #456]	@ (8004728 <HAL_SPI_MspInit+0x2ac>)
 8004560:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8004562:	4b70      	ldr	r3, [pc, #448]	@ (8004724 <HAL_SPI_MspInit+0x2a8>)
 8004564:	2200      	movs	r2, #0
 8004566:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004568:	4b6e      	ldr	r3, [pc, #440]	@ (8004724 <HAL_SPI_MspInit+0x2a8>)
 800456a:	2200      	movs	r2, #0
 800456c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800456e:	4b6d      	ldr	r3, [pc, #436]	@ (8004724 <HAL_SPI_MspInit+0x2a8>)
 8004570:	2200      	movs	r2, #0
 8004572:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004574:	4b6b      	ldr	r3, [pc, #428]	@ (8004724 <HAL_SPI_MspInit+0x2a8>)
 8004576:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800457a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800457c:	4b69      	ldr	r3, [pc, #420]	@ (8004724 <HAL_SPI_MspInit+0x2a8>)
 800457e:	2200      	movs	r2, #0
 8004580:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004582:	4b68      	ldr	r3, [pc, #416]	@ (8004724 <HAL_SPI_MspInit+0x2a8>)
 8004584:	2200      	movs	r2, #0
 8004586:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004588:	4b66      	ldr	r3, [pc, #408]	@ (8004724 <HAL_SPI_MspInit+0x2a8>)
 800458a:	2200      	movs	r2, #0
 800458c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800458e:	4b65      	ldr	r3, [pc, #404]	@ (8004724 <HAL_SPI_MspInit+0x2a8>)
 8004590:	2200      	movs	r2, #0
 8004592:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004594:	4b63      	ldr	r3, [pc, #396]	@ (8004724 <HAL_SPI_MspInit+0x2a8>)
 8004596:	2200      	movs	r2, #0
 8004598:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800459a:	4862      	ldr	r0, [pc, #392]	@ (8004724 <HAL_SPI_MspInit+0x2a8>)
 800459c:	f000 ffda 	bl	8005554 <HAL_DMA_Init>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 80045a6:	f7ff fec1 	bl	800432c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a5d      	ldr	r2, [pc, #372]	@ (8004724 <HAL_SPI_MspInit+0x2a8>)
 80045ae:	64da      	str	r2, [r3, #76]	@ 0x4c
 80045b0:	4a5c      	ldr	r2, [pc, #368]	@ (8004724 <HAL_SPI_MspInit+0x2a8>)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80045b6:	2200      	movs	r2, #0
 80045b8:	2100      	movs	r1, #0
 80045ba:	2024      	movs	r0, #36	@ 0x24
 80045bc:	f000 ff93 	bl	80054e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80045c0:	2024      	movs	r0, #36	@ 0x24
 80045c2:	f000 ffac 	bl	800551e <HAL_NVIC_EnableIRQ>
}
 80045c6:	e09e      	b.n	8004706 <HAL_SPI_MspInit+0x28a>
  else if(spiHandle->Instance==SPI3)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a57      	ldr	r2, [pc, #348]	@ (800472c <HAL_SPI_MspInit+0x2b0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	f040 8099 	bne.w	8004706 <HAL_SPI_MspInit+0x28a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80045d4:	2300      	movs	r3, #0
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 80045da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045dc:	4a4d      	ldr	r2, [pc, #308]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 80045de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80045e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 80045e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	4b47      	ldr	r3, [pc, #284]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 80045f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f8:	4a46      	ldr	r2, [pc, #280]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 80045fa:	f043 0302 	orr.w	r3, r3, #2
 80045fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8004600:	4b44      	ldr	r3, [pc, #272]	@ (8004714 <HAL_SPI_MspInit+0x298>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NRF_SCK_Pin;
 800460c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004610:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004612:	2302      	movs	r3, #2
 8004614:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004616:	2300      	movs	r3, #0
 8004618:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461a:	2303      	movs	r3, #3
 800461c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800461e:	2307      	movs	r3, #7
 8004620:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 8004622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004626:	4619      	mov	r1, r3
 8004628:	483d      	ldr	r0, [pc, #244]	@ (8004720 <HAL_SPI_MspInit+0x2a4>)
 800462a:	f001 fd93 	bl	8006154 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NRF_MISO_Pin|NRF_MOSI_Pin;
 800462e:	2330      	movs	r3, #48	@ 0x30
 8004630:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004632:	2302      	movs	r3, #2
 8004634:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004636:	2300      	movs	r3, #0
 8004638:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800463a:	2303      	movs	r3, #3
 800463c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800463e:	2306      	movs	r3, #6
 8004640:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004642:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004646:	4619      	mov	r1, r3
 8004648:	4835      	ldr	r0, [pc, #212]	@ (8004720 <HAL_SPI_MspInit+0x2a4>)
 800464a:	f001 fd83 	bl	8006154 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800464e:	4b38      	ldr	r3, [pc, #224]	@ (8004730 <HAL_SPI_MspInit+0x2b4>)
 8004650:	4a38      	ldr	r2, [pc, #224]	@ (8004734 <HAL_SPI_MspInit+0x2b8>)
 8004652:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8004654:	4b36      	ldr	r3, [pc, #216]	@ (8004730 <HAL_SPI_MspInit+0x2b4>)
 8004656:	2200      	movs	r2, #0
 8004658:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800465a:	4b35      	ldr	r3, [pc, #212]	@ (8004730 <HAL_SPI_MspInit+0x2b4>)
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004660:	4b33      	ldr	r3, [pc, #204]	@ (8004730 <HAL_SPI_MspInit+0x2b4>)
 8004662:	2200      	movs	r2, #0
 8004664:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004666:	4b32      	ldr	r3, [pc, #200]	@ (8004730 <HAL_SPI_MspInit+0x2b4>)
 8004668:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800466c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800466e:	4b30      	ldr	r3, [pc, #192]	@ (8004730 <HAL_SPI_MspInit+0x2b4>)
 8004670:	2200      	movs	r2, #0
 8004672:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004674:	4b2e      	ldr	r3, [pc, #184]	@ (8004730 <HAL_SPI_MspInit+0x2b4>)
 8004676:	2200      	movs	r2, #0
 8004678:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800467a:	4b2d      	ldr	r3, [pc, #180]	@ (8004730 <HAL_SPI_MspInit+0x2b4>)
 800467c:	2200      	movs	r2, #0
 800467e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004680:	4b2b      	ldr	r3, [pc, #172]	@ (8004730 <HAL_SPI_MspInit+0x2b4>)
 8004682:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004686:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004688:	4b29      	ldr	r3, [pc, #164]	@ (8004730 <HAL_SPI_MspInit+0x2b4>)
 800468a:	2200      	movs	r2, #0
 800468c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800468e:	4828      	ldr	r0, [pc, #160]	@ (8004730 <HAL_SPI_MspInit+0x2b4>)
 8004690:	f000 ff60 	bl	8005554 <HAL_DMA_Init>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800469a:	f7ff fe47 	bl	800432c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a23      	ldr	r2, [pc, #140]	@ (8004730 <HAL_SPI_MspInit+0x2b4>)
 80046a2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80046a4:	4a22      	ldr	r2, [pc, #136]	@ (8004730 <HAL_SPI_MspInit+0x2b4>)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80046aa:	4b23      	ldr	r3, [pc, #140]	@ (8004738 <HAL_SPI_MspInit+0x2bc>)
 80046ac:	4a23      	ldr	r2, [pc, #140]	@ (800473c <HAL_SPI_MspInit+0x2c0>)
 80046ae:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80046b0:	4b21      	ldr	r3, [pc, #132]	@ (8004738 <HAL_SPI_MspInit+0x2bc>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046b6:	4b20      	ldr	r3, [pc, #128]	@ (8004738 <HAL_SPI_MspInit+0x2bc>)
 80046b8:	2240      	movs	r2, #64	@ 0x40
 80046ba:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80046bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004738 <HAL_SPI_MspInit+0x2bc>)
 80046be:	2200      	movs	r2, #0
 80046c0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80046c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004738 <HAL_SPI_MspInit+0x2bc>)
 80046c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046c8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004738 <HAL_SPI_MspInit+0x2bc>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046d0:	4b19      	ldr	r3, [pc, #100]	@ (8004738 <HAL_SPI_MspInit+0x2bc>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80046d6:	4b18      	ldr	r3, [pc, #96]	@ (8004738 <HAL_SPI_MspInit+0x2bc>)
 80046d8:	2200      	movs	r2, #0
 80046da:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80046dc:	4b16      	ldr	r3, [pc, #88]	@ (8004738 <HAL_SPI_MspInit+0x2bc>)
 80046de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80046e2:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046e4:	4b14      	ldr	r3, [pc, #80]	@ (8004738 <HAL_SPI_MspInit+0x2bc>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80046ea:	4813      	ldr	r0, [pc, #76]	@ (8004738 <HAL_SPI_MspInit+0x2bc>)
 80046ec:	f000 ff32 	bl	8005554 <HAL_DMA_Init>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 80046f6:	f7ff fe19 	bl	800432c <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a0e      	ldr	r2, [pc, #56]	@ (8004738 <HAL_SPI_MspInit+0x2bc>)
 80046fe:	649a      	str	r2, [r3, #72]	@ 0x48
 8004700:	4a0d      	ldr	r2, [pc, #52]	@ (8004738 <HAL_SPI_MspInit+0x2bc>)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004706:	bf00      	nop
 8004708:	3738      	adds	r7, #56	@ 0x38
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40013000 	.word	0x40013000
 8004714:	40023800 	.word	0x40023800
 8004718:	40020000 	.word	0x40020000
 800471c:	40003800 	.word	0x40003800
 8004720:	40020400 	.word	0x40020400
 8004724:	20000ac4 	.word	0x20000ac4
 8004728:	40026058 	.word	0x40026058
 800472c:	40003c00 	.word	0x40003c00
 8004730:	20000b24 	.word	0x20000b24
 8004734:	40026010 	.word	0x40026010
 8004738:	20000b84 	.word	0x20000b84
 800473c:	40026088 	.word	0x40026088

08004740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	607b      	str	r3, [r7, #4]
 800474a:	4b10      	ldr	r3, [pc, #64]	@ (800478c <HAL_MspInit+0x4c>)
 800474c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474e:	4a0f      	ldr	r2, [pc, #60]	@ (800478c <HAL_MspInit+0x4c>)
 8004750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004754:	6453      	str	r3, [r2, #68]	@ 0x44
 8004756:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <HAL_MspInit+0x4c>)
 8004758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800475e:	607b      	str	r3, [r7, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004762:	2300      	movs	r3, #0
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	4b09      	ldr	r3, [pc, #36]	@ (800478c <HAL_MspInit+0x4c>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	4a08      	ldr	r2, [pc, #32]	@ (800478c <HAL_MspInit+0x4c>)
 800476c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004770:	6413      	str	r3, [r2, #64]	@ 0x40
 8004772:	4b06      	ldr	r3, [pc, #24]	@ (800478c <HAL_MspInit+0x4c>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800

08004790 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004794:	4b0e      	ldr	r3, [pc, #56]	@ (80047d0 <SDTimer_Handler+0x40>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d006      	beq.n	80047ac <SDTimer_Handler+0x1c>
    Timer1--;
 800479e:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <SDTimer_Handler+0x40>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	4b09      	ldr	r3, [pc, #36]	@ (80047d0 <SDTimer_Handler+0x40>)
 80047aa:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80047ac:	4b09      	ldr	r3, [pc, #36]	@ (80047d4 <SDTimer_Handler+0x44>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d006      	beq.n	80047c4 <SDTimer_Handler+0x34>
    Timer2--;
 80047b6:	4b07      	ldr	r3, [pc, #28]	@ (80047d4 <SDTimer_Handler+0x44>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	4b04      	ldr	r3, [pc, #16]	@ (80047d4 <SDTimer_Handler+0x44>)
 80047c2:	701a      	strb	r2, [r3, #0]
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	20000be5 	.word	0x20000be5
 80047d4:	20000be6 	.word	0x20000be6

080047d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80047dc:	bf00      	nop
 80047de:	e7fd      	b.n	80047dc <NMI_Handler+0x4>

080047e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047e4:	bf00      	nop
 80047e6:	e7fd      	b.n	80047e4 <HardFault_Handler+0x4>

080047e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047ec:	bf00      	nop
 80047ee:	e7fd      	b.n	80047ec <MemManage_Handler+0x4>

080047f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047f4:	bf00      	nop
 80047f6:	e7fd      	b.n	80047f4 <BusFault_Handler+0x4>

080047f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047fc:	bf00      	nop
 80047fe:	e7fd      	b.n	80047fc <UsageFault_Handler+0x4>

08004800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800480e:	b480      	push	{r7}
 8004810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004812:	bf00      	nop
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004820:	bf00      	nop
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
	...

0800482c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8004830:	4b0a      	ldr	r3, [pc, #40]	@ (800485c <SysTick_Handler+0x30>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	3301      	adds	r3, #1
 8004838:	b2da      	uxtb	r2, r3
 800483a:	4b08      	ldr	r3, [pc, #32]	@ (800485c <SysTick_Handler+0x30>)
 800483c:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800483e:	4b07      	ldr	r3, [pc, #28]	@ (800485c <SysTick_Handler+0x30>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b09      	cmp	r3, #9
 8004846:	d904      	bls.n	8004852 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8004848:	4b04      	ldr	r3, [pc, #16]	@ (800485c <SysTick_Handler+0x30>)
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800484e:	f7ff ff9f 	bl	8004790 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004852:	f000 fadb 	bl	8004e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004856:	bf00      	nop
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000be4 	.word	0x20000be4

08004860 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8004864:	4802      	ldr	r0, [pc, #8]	@ (8004870 <DMA1_Stream0_IRQHandler+0x10>)
 8004866:	f000 ff45 	bl	80056f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800486a:	bf00      	nop
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000b24 	.word	0x20000b24

08004874 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004878:	4802      	ldr	r0, [pc, #8]	@ (8004884 <DMA1_Stream3_IRQHandler+0x10>)
 800487a:	f000 ff3b 	bl	80056f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800487e:	bf00      	nop
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000ac4 	.word	0x20000ac4

08004888 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800488c:	4802      	ldr	r0, [pc, #8]	@ (8004898 <DMA1_Stream5_IRQHandler+0x10>)
 800488e:	f000 ff31 	bl	80056f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004892:	bf00      	nop
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000b84 	.word	0x20000b84

0800489c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048a0:	4802      	ldr	r0, [pc, #8]	@ (80048ac <TIM1_CC_IRQHandler+0x10>)
 80048a2:	f004 fd43 	bl	800932c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000be8 	.word	0x20000be8

080048b0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80048b4:	4802      	ldr	r0, [pc, #8]	@ (80048c0 <SPI2_IRQHandler+0x10>)
 80048b6:	f003 fee3 	bl	8008680 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80048ba:	bf00      	nop
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000a14 	.word	0x20000a14

080048c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80048c8:	4802      	ldr	r0, [pc, #8]	@ (80048d4 <TIM5_IRQHandler+0x10>)
 80048ca:	f004 fd2f 	bl	800932c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80048ce:	bf00      	nop
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20000c78 	.word	0x20000c78

080048d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048dc:	4b06      	ldr	r3, [pc, #24]	@ (80048f8 <SystemInit+0x20>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e2:	4a05      	ldr	r2, [pc, #20]	@ (80048f8 <SystemInit+0x20>)
 80048e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80048e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048ec:	bf00      	nop
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08c      	sub	sp, #48	@ 0x30
 8004900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004902:	f107 031c 	add.w	r3, r7, #28
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	605a      	str	r2, [r3, #4]
 800490c:	609a      	str	r2, [r3, #8]
 800490e:	60da      	str	r2, [r3, #12]
 8004910:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004912:	f107 030c 	add.w	r3, r7, #12
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	605a      	str	r2, [r3, #4]
 800491c:	609a      	str	r2, [r3, #8]
 800491e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004920:	1d3b      	adds	r3, r7, #4
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004928:	4b34      	ldr	r3, [pc, #208]	@ (80049fc <MX_TIM1_Init+0x100>)
 800492a:	4a35      	ldr	r2, [pc, #212]	@ (8004a00 <MX_TIM1_Init+0x104>)
 800492c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800492e:	4b33      	ldr	r3, [pc, #204]	@ (80049fc <MX_TIM1_Init+0x100>)
 8004930:	2200      	movs	r2, #0
 8004932:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004934:	4b31      	ldr	r3, [pc, #196]	@ (80049fc <MX_TIM1_Init+0x100>)
 8004936:	2200      	movs	r2, #0
 8004938:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800493a:	4b30      	ldr	r3, [pc, #192]	@ (80049fc <MX_TIM1_Init+0x100>)
 800493c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004940:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004942:	4b2e      	ldr	r3, [pc, #184]	@ (80049fc <MX_TIM1_Init+0x100>)
 8004944:	2200      	movs	r2, #0
 8004946:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004948:	4b2c      	ldr	r3, [pc, #176]	@ (80049fc <MX_TIM1_Init+0x100>)
 800494a:	2200      	movs	r2, #0
 800494c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800494e:	4b2b      	ldr	r3, [pc, #172]	@ (80049fc <MX_TIM1_Init+0x100>)
 8004950:	2200      	movs	r2, #0
 8004952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8004954:	4829      	ldr	r0, [pc, #164]	@ (80049fc <MX_TIM1_Init+0x100>)
 8004956:	f004 fab1 	bl	8008ebc <HAL_TIM_IC_Init>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8004960:	f7ff fce4 	bl	800432c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004964:	2304      	movs	r3, #4
 8004966:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8004968:	2360      	movs	r3, #96	@ 0x60
 800496a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800496c:	2302      	movs	r3, #2
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8004970:	2300      	movs	r3, #0
 8004972:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8004978:	f107 031c 	add.w	r3, r7, #28
 800497c:	4619      	mov	r1, r3
 800497e:	481f      	ldr	r0, [pc, #124]	@ (80049fc <MX_TIM1_Init+0x100>)
 8004980:	f004 ffe9 	bl	8009956 <HAL_TIM_SlaveConfigSynchro>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800498a:	f7ff fccf 	bl	800432c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004992:	2302      	movs	r3, #2
 8004994:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800499a:	2300      	movs	r3, #0
 800499c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800499e:	f107 030c 	add.w	r3, r7, #12
 80049a2:	2200      	movs	r2, #0
 80049a4:	4619      	mov	r1, r3
 80049a6:	4815      	ldr	r0, [pc, #84]	@ (80049fc <MX_TIM1_Init+0x100>)
 80049a8:	f004 fdb0 	bl	800950c <HAL_TIM_IC_ConfigChannel>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80049b2:	f7ff fcbb 	bl	800432c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80049b6:	2302      	movs	r3, #2
 80049b8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80049ba:	2301      	movs	r3, #1
 80049bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80049be:	f107 030c 	add.w	r3, r7, #12
 80049c2:	2204      	movs	r2, #4
 80049c4:	4619      	mov	r1, r3
 80049c6:	480d      	ldr	r0, [pc, #52]	@ (80049fc <MX_TIM1_Init+0x100>)
 80049c8:	f004 fda0 	bl	800950c <HAL_TIM_IC_ConfigChannel>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80049d2:	f7ff fcab 	bl	800432c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049d6:	2300      	movs	r3, #0
 80049d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049da:	2300      	movs	r3, #0
 80049dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80049de:	1d3b      	adds	r3, r7, #4
 80049e0:	4619      	mov	r1, r3
 80049e2:	4806      	ldr	r0, [pc, #24]	@ (80049fc <MX_TIM1_Init+0x100>)
 80049e4:	f005 fce4 	bl	800a3b0 <HAL_TIMEx_MasterConfigSynchronization>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80049ee:	f7ff fc9d 	bl	800432c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80049f2:	bf00      	nop
 80049f4:	3730      	adds	r7, #48	@ 0x30
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000be8 	.word	0x20000be8
 8004a00:	40010000 	.word	0x40010000

08004a04 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08e      	sub	sp, #56	@ 0x38
 8004a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	605a      	str	r2, [r3, #4]
 8004a14:	609a      	str	r2, [r3, #8]
 8004a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a18:	f107 0320 	add.w	r3, r7, #32
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a22:	1d3b      	adds	r3, r7, #4
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	605a      	str	r2, [r3, #4]
 8004a2a:	609a      	str	r2, [r3, #8]
 8004a2c:	60da      	str	r2, [r3, #12]
 8004a2e:	611a      	str	r2, [r3, #16]
 8004a30:	615a      	str	r2, [r3, #20]
 8004a32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004a34:	4b2d      	ldr	r3, [pc, #180]	@ (8004aec <MX_TIM2_Init+0xe8>)
 8004a36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004a3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8004a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004aec <MX_TIM2_Init+0xe8>)
 8004a3e:	2263      	movs	r2, #99	@ 0x63
 8004a40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a42:	4b2a      	ldr	r3, [pc, #168]	@ (8004aec <MX_TIM2_Init+0xe8>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8004a48:	4b28      	ldr	r3, [pc, #160]	@ (8004aec <MX_TIM2_Init+0xe8>)
 8004a4a:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004a4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a50:	4b26      	ldr	r3, [pc, #152]	@ (8004aec <MX_TIM2_Init+0xe8>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a56:	4b25      	ldr	r3, [pc, #148]	@ (8004aec <MX_TIM2_Init+0xe8>)
 8004a58:	2280      	movs	r2, #128	@ 0x80
 8004a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004a5c:	4823      	ldr	r0, [pc, #140]	@ (8004aec <MX_TIM2_Init+0xe8>)
 8004a5e:	f004 f871 	bl	8008b44 <HAL_TIM_Base_Init>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004a68:	f7ff fc60 	bl	800432c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004a72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004a76:	4619      	mov	r1, r3
 8004a78:	481c      	ldr	r0, [pc, #112]	@ (8004aec <MX_TIM2_Init+0xe8>)
 8004a7a:	f004 fea5 	bl	80097c8 <HAL_TIM_ConfigClockSource>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004a84:	f7ff fc52 	bl	800432c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004a88:	4818      	ldr	r0, [pc, #96]	@ (8004aec <MX_TIM2_Init+0xe8>)
 8004a8a:	f004 f90d 	bl	8008ca8 <HAL_TIM_PWM_Init>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004a94:	f7ff fc4a 	bl	800432c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004aa0:	f107 0320 	add.w	r3, r7, #32
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4811      	ldr	r0, [pc, #68]	@ (8004aec <MX_TIM2_Init+0xe8>)
 8004aa8:	f005 fc82 	bl	800a3b0 <HAL_TIMEx_MasterConfigSynchronization>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004ab2:	f7ff fc3b 	bl	800432c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ab6:	2360      	movs	r3, #96	@ 0x60
 8004ab8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004ac6:	1d3b      	adds	r3, r7, #4
 8004ac8:	220c      	movs	r2, #12
 8004aca:	4619      	mov	r1, r3
 8004acc:	4807      	ldr	r0, [pc, #28]	@ (8004aec <MX_TIM2_Init+0xe8>)
 8004ace:	f004 fdb9 	bl	8009644 <HAL_TIM_PWM_ConfigChannel>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004ad8:	f7ff fc28 	bl	800432c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004adc:	4803      	ldr	r0, [pc, #12]	@ (8004aec <MX_TIM2_Init+0xe8>)
 8004ade:	f000 f8e1 	bl	8004ca4 <HAL_TIM_MspPostInit>

}
 8004ae2:	bf00      	nop
 8004ae4:	3738      	adds	r7, #56	@ 0x38
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000c30 	.word	0x20000c30

08004af0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004af6:	f107 0308 	add.w	r3, r7, #8
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	605a      	str	r2, [r3, #4]
 8004b00:	609a      	str	r2, [r3, #8]
 8004b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b04:	463b      	mov	r3, r7
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b84 <MX_TIM5_Init+0x94>)
 8004b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004b88 <MX_TIM5_Init+0x98>)
 8004b10:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1000-1;
 8004b12:	4b1c      	ldr	r3, [pc, #112]	@ (8004b84 <MX_TIM5_Init+0x94>)
 8004b14:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004b18:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b84 <MX_TIM5_Init+0x94>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8004b20:	4b18      	ldr	r3, [pc, #96]	@ (8004b84 <MX_TIM5_Init+0x94>)
 8004b22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004b26:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b28:	4b16      	ldr	r3, [pc, #88]	@ (8004b84 <MX_TIM5_Init+0x94>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b2e:	4b15      	ldr	r3, [pc, #84]	@ (8004b84 <MX_TIM5_Init+0x94>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004b34:	4813      	ldr	r0, [pc, #76]	@ (8004b84 <MX_TIM5_Init+0x94>)
 8004b36:	f004 f805 	bl	8008b44 <HAL_TIM_Base_Init>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004b40:	f7ff fbf4 	bl	800432c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004b4a:	f107 0308 	add.w	r3, r7, #8
 8004b4e:	4619      	mov	r1, r3
 8004b50:	480c      	ldr	r0, [pc, #48]	@ (8004b84 <MX_TIM5_Init+0x94>)
 8004b52:	f004 fe39 	bl	80097c8 <HAL_TIM_ConfigClockSource>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004b5c:	f7ff fbe6 	bl	800432c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b60:	2300      	movs	r3, #0
 8004b62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b64:	2300      	movs	r3, #0
 8004b66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004b68:	463b      	mov	r3, r7
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4805      	ldr	r0, [pc, #20]	@ (8004b84 <MX_TIM5_Init+0x94>)
 8004b6e:	f005 fc1f 	bl	800a3b0 <HAL_TIMEx_MasterConfigSynchronization>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004b78:	f7ff fbd8 	bl	800432c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004b7c:	bf00      	nop
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20000c78 	.word	0x20000c78
 8004b88:	40000c00 	.word	0x40000c00

08004b8c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	@ 0x28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b94:	f107 0314 	add.w	r3, r7, #20
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c20 <HAL_TIM_IC_MspInit+0x94>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d134      	bne.n	8004c18 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004bae:	2300      	movs	r3, #0
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c24 <HAL_TIM_IC_MspInit+0x98>)
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c24 <HAL_TIM_IC_MspInit+0x98>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bbe:	4b19      	ldr	r3, [pc, #100]	@ (8004c24 <HAL_TIM_IC_MspInit+0x98>)
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	4b15      	ldr	r3, [pc, #84]	@ (8004c24 <HAL_TIM_IC_MspInit+0x98>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd2:	4a14      	ldr	r2, [pc, #80]	@ (8004c24 <HAL_TIM_IC_MspInit+0x98>)
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bda:	4b12      	ldr	r3, [pc, #72]	@ (8004c24 <HAL_TIM_IC_MspInit+0x98>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004be6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bec:	2302      	movs	r3, #2
 8004bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bfc:	f107 0314 	add.w	r3, r7, #20
 8004c00:	4619      	mov	r1, r3
 8004c02:	4809      	ldr	r0, [pc, #36]	@ (8004c28 <HAL_TIM_IC_MspInit+0x9c>)
 8004c04:	f001 faa6 	bl	8006154 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	201b      	movs	r0, #27
 8004c0e:	f000 fc6a 	bl	80054e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004c12:	201b      	movs	r0, #27
 8004c14:	f000 fc83 	bl	800551e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004c18:	bf00      	nop
 8004c1a:	3728      	adds	r7, #40	@ 0x28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40010000 	.word	0x40010000
 8004c24:	40023800 	.word	0x40023800
 8004c28:	40020000 	.word	0x40020000

08004c2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c3c:	d10e      	bne.n	8004c5c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	4b16      	ldr	r3, [pc, #88]	@ (8004c9c <HAL_TIM_Base_MspInit+0x70>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	4a15      	ldr	r2, [pc, #84]	@ (8004c9c <HAL_TIM_Base_MspInit+0x70>)
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c4e:	4b13      	ldr	r3, [pc, #76]	@ (8004c9c <HAL_TIM_Base_MspInit+0x70>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004c5a:	e01a      	b.n	8004c92 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a0f      	ldr	r2, [pc, #60]	@ (8004ca0 <HAL_TIM_Base_MspInit+0x74>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d115      	bne.n	8004c92 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c9c <HAL_TIM_Base_MspInit+0x70>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8004c9c <HAL_TIM_Base_MspInit+0x70>)
 8004c70:	f043 0308 	orr.w	r3, r3, #8
 8004c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c76:	4b09      	ldr	r3, [pc, #36]	@ (8004c9c <HAL_TIM_Base_MspInit+0x70>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	60bb      	str	r3, [r7, #8]
 8004c80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004c82:	2200      	movs	r2, #0
 8004c84:	2100      	movs	r1, #0
 8004c86:	2032      	movs	r0, #50	@ 0x32
 8004c88:	f000 fc2d 	bl	80054e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004c8c:	2032      	movs	r0, #50	@ 0x32
 8004c8e:	f000 fc46 	bl	800551e <HAL_NVIC_EnableIRQ>
}
 8004c92:	bf00      	nop
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	40000c00 	.word	0x40000c00

08004ca4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cac:	f107 030c 	add.w	r3, r7, #12
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	60da      	str	r2, [r3, #12]
 8004cba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc4:	d11d      	bne.n	8004d02 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	4b10      	ldr	r3, [pc, #64]	@ (8004d0c <HAL_TIM_MspPostInit+0x68>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cce:	4a0f      	ldr	r2, [pc, #60]	@ (8004d0c <HAL_TIM_MspPostInit+0x68>)
 8004cd0:	f043 0301 	orr.w	r3, r3, #1
 8004cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d0c <HAL_TIM_MspPostInit+0x68>)
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	60bb      	str	r3, [r7, #8]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf6:	f107 030c 	add.w	r3, r7, #12
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4804      	ldr	r0, [pc, #16]	@ (8004d10 <HAL_TIM_MspPostInit+0x6c>)
 8004cfe:	f001 fa29 	bl	8006154 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004d02:	bf00      	nop
 8004d04:	3720      	adds	r7, #32
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	40020000 	.word	0x40020000

08004d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004d14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004d4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004d18:	f7ff fdde 	bl	80048d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004d1c:	480c      	ldr	r0, [pc, #48]	@ (8004d50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004d1e:	490d      	ldr	r1, [pc, #52]	@ (8004d54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004d20:	4a0d      	ldr	r2, [pc, #52]	@ (8004d58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d24:	e002      	b.n	8004d2c <LoopCopyDataInit>

08004d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d2a:	3304      	adds	r3, #4

08004d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d30:	d3f9      	bcc.n	8004d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d32:	4a0a      	ldr	r2, [pc, #40]	@ (8004d5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004d34:	4c0a      	ldr	r4, [pc, #40]	@ (8004d60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d38:	e001      	b.n	8004d3e <LoopFillZerobss>

08004d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d3c:	3204      	adds	r2, #4

08004d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d40:	d3fb      	bcc.n	8004d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004d42:	f008 fc45 	bl	800d5d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d46:	f7ff fa0d 	bl	8004164 <main>
  bx  lr    
 8004d4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d54:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8004d58:	0800e308 	.word	0x0800e308
  ldr r2, =_sbss
 8004d5c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8004d60:	20000e58 	.word	0x20000e58

08004d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d64:	e7fe      	b.n	8004d64 <ADC_IRQHandler>
	...

08004d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004da8 <HAL_Init+0x40>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a0d      	ldr	r2, [pc, #52]	@ (8004da8 <HAL_Init+0x40>)
 8004d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d78:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <HAL_Init+0x40>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8004da8 <HAL_Init+0x40>)
 8004d7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d84:	4b08      	ldr	r3, [pc, #32]	@ (8004da8 <HAL_Init+0x40>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a07      	ldr	r2, [pc, #28]	@ (8004da8 <HAL_Init+0x40>)
 8004d8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d90:	2003      	movs	r0, #3
 8004d92:	f000 fb9d 	bl	80054d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d96:	2001      	movs	r0, #1
 8004d98:	f000 f808 	bl	8004dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d9c:	f7ff fcd0 	bl	8004740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40023c00 	.word	0x40023c00

08004dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004db4:	4b12      	ldr	r3, [pc, #72]	@ (8004e00 <HAL_InitTick+0x54>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	4b12      	ldr	r3, [pc, #72]	@ (8004e04 <HAL_InitTick+0x58>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fbb5 	bl	800553a <HAL_SYSTICK_Config>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e00e      	b.n	8004df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b0f      	cmp	r3, #15
 8004dde:	d80a      	bhi.n	8004df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004de0:	2200      	movs	r2, #0
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295
 8004de8:	f000 fb7d 	bl	80054e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004dec:	4a06      	ldr	r2, [pc, #24]	@ (8004e08 <HAL_InitTick+0x5c>)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e000      	b.n	8004df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	200000ac 	.word	0x200000ac
 8004e04:	200000b4 	.word	0x200000b4
 8004e08:	200000b0 	.word	0x200000b0

08004e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e10:	4b06      	ldr	r3, [pc, #24]	@ (8004e2c <HAL_IncTick+0x20>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <HAL_IncTick+0x24>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	4a04      	ldr	r2, [pc, #16]	@ (8004e30 <HAL_IncTick+0x24>)
 8004e1e:	6013      	str	r3, [r2, #0]
}
 8004e20:	bf00      	nop
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	200000b4 	.word	0x200000b4
 8004e30:	20000cc0 	.word	0x20000cc0

08004e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  return uwTick;
 8004e38:	4b03      	ldr	r3, [pc, #12]	@ (8004e48 <HAL_GetTick+0x14>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	20000cc0 	.word	0x20000cc0

08004e4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e54:	2300      	movs	r3, #0
 8004e56:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e033      	b.n	8004eca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fe fa00 	bl	8003270 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d118      	bne.n	8004ebc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004e92:	f023 0302 	bic.w	r3, r3, #2
 8004e96:	f043 0202 	orr.w	r2, r3, #2
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f94a 	bl	8005138 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	f023 0303 	bic.w	r3, r3, #3
 8004eb2:	f043 0201 	orr.w	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8004eba:	e001      	b.n	8004ec0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d101      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x1c>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e113      	b.n	8005118 <HAL_ADC_ConfigChannel+0x244>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b09      	cmp	r3, #9
 8004efe:	d925      	bls.n	8004f4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68d9      	ldr	r1, [r3, #12]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4613      	mov	r3, r2
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	4413      	add	r3, r2
 8004f14:	3b1e      	subs	r3, #30
 8004f16:	2207      	movs	r2, #7
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	43da      	mvns	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	400a      	ands	r2, r1
 8004f24:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68d9      	ldr	r1, [r3, #12]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	4618      	mov	r0, r3
 8004f38:	4603      	mov	r3, r0
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	4403      	add	r3, r0
 8004f3e:	3b1e      	subs	r3, #30
 8004f40:	409a      	lsls	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	60da      	str	r2, [r3, #12]
 8004f4a:	e022      	b.n	8004f92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6919      	ldr	r1, [r3, #16]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	4413      	add	r3, r2
 8004f60:	2207      	movs	r2, #7
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	43da      	mvns	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	400a      	ands	r2, r1
 8004f6e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6919      	ldr	r1, [r3, #16]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	4618      	mov	r0, r3
 8004f82:	4603      	mov	r3, r0
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	4403      	add	r3, r0
 8004f88:	409a      	lsls	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b06      	cmp	r3, #6
 8004f98:	d824      	bhi.n	8004fe4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	3b05      	subs	r3, #5
 8004fac:	221f      	movs	r2, #31
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	43da      	mvns	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	400a      	ands	r2, r1
 8004fba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	4618      	mov	r0, r3
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	3b05      	subs	r3, #5
 8004fd6:	fa00 f203 	lsl.w	r2, r0, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	635a      	str	r2, [r3, #52]	@ 0x34
 8004fe2:	e04c      	b.n	800507e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b0c      	cmp	r3, #12
 8004fea:	d824      	bhi.n	8005036 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3b23      	subs	r3, #35	@ 0x23
 8004ffe:	221f      	movs	r2, #31
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	43da      	mvns	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	400a      	ands	r2, r1
 800500c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	b29b      	uxth	r3, r3
 800501a:	4618      	mov	r0, r3
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	3b23      	subs	r3, #35	@ 0x23
 8005028:	fa00 f203 	lsl.w	r2, r0, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	631a      	str	r2, [r3, #48]	@ 0x30
 8005034:	e023      	b.n	800507e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	3b41      	subs	r3, #65	@ 0x41
 8005048:	221f      	movs	r2, #31
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43da      	mvns	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	400a      	ands	r2, r1
 8005056:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	4618      	mov	r0, r3
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	3b41      	subs	r3, #65	@ 0x41
 8005072:	fa00 f203 	lsl.w	r2, r0, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800507e:	4b29      	ldr	r3, [pc, #164]	@ (8005124 <HAL_ADC_ConfigChannel+0x250>)
 8005080:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a28      	ldr	r2, [pc, #160]	@ (8005128 <HAL_ADC_ConfigChannel+0x254>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d10f      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x1d8>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b12      	cmp	r3, #18
 8005092:	d10b      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005128 <HAL_ADC_ConfigChannel+0x254>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d12b      	bne.n	800510e <HAL_ADC_ConfigChannel+0x23a>
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1c      	ldr	r2, [pc, #112]	@ (800512c <HAL_ADC_ConfigChannel+0x258>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <HAL_ADC_ConfigChannel+0x1f4>
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b11      	cmp	r3, #17
 80050c6:	d122      	bne.n	800510e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a11      	ldr	r2, [pc, #68]	@ (800512c <HAL_ADC_ConfigChannel+0x258>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d111      	bne.n	800510e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80050ea:	4b11      	ldr	r3, [pc, #68]	@ (8005130 <HAL_ADC_ConfigChannel+0x25c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a11      	ldr	r2, [pc, #68]	@ (8005134 <HAL_ADC_ConfigChannel+0x260>)
 80050f0:	fba2 2303 	umull	r2, r3, r2, r3
 80050f4:	0c9a      	lsrs	r2, r3, #18
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005100:	e002      	b.n	8005108 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	3b01      	subs	r3, #1
 8005106:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f9      	bne.n	8005102 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	40012300 	.word	0x40012300
 8005128:	40012000 	.word	0x40012000
 800512c:	10000012 	.word	0x10000012
 8005130:	200000ac 	.word	0x200000ac
 8005134:	431bde83 	.word	0x431bde83

08005138 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005140:	4b79      	ldr	r3, [pc, #484]	@ (8005328 <ADC_Init+0x1f0>)
 8005142:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	431a      	orrs	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800516c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6859      	ldr	r1, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	021a      	lsls	r2, r3, #8
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005190:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6859      	ldr	r1, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689a      	ldr	r2, [r3, #8]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6899      	ldr	r1, [r3, #8]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ca:	4a58      	ldr	r2, [pc, #352]	@ (800532c <ADC_Init+0x1f4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d022      	beq.n	8005216 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80051de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6899      	ldr	r1, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005200:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6899      	ldr	r1, [r3, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	609a      	str	r2, [r3, #8]
 8005214:	e00f      	b.n	8005236 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005224:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005234:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0202 	bic.w	r2, r2, #2
 8005244:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6899      	ldr	r1, [r3, #8]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	7e1b      	ldrb	r3, [r3, #24]
 8005250:	005a      	lsls	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d01b      	beq.n	800529c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005272:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005282:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6859      	ldr	r1, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528e:	3b01      	subs	r3, #1
 8005290:	035a      	lsls	r2, r3, #13
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]
 800529a:	e007      	b.n	80052ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80052ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	051a      	lsls	r2, r3, #20
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80052e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6899      	ldr	r1, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80052ee:	025a      	lsls	r2, r3, #9
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6899      	ldr	r1, [r3, #8]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	029a      	lsls	r2, r3, #10
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	609a      	str	r2, [r3, #8]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	40012300 	.word	0x40012300
 800532c:	0f000001 	.word	0x0f000001

08005330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005340:	4b0c      	ldr	r3, [pc, #48]	@ (8005374 <__NVIC_SetPriorityGrouping+0x44>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800534c:	4013      	ands	r3, r2
 800534e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800535c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005362:	4a04      	ldr	r2, [pc, #16]	@ (8005374 <__NVIC_SetPriorityGrouping+0x44>)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	60d3      	str	r3, [r2, #12]
}
 8005368:	bf00      	nop
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	e000ed00 	.word	0xe000ed00

08005378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800537c:	4b04      	ldr	r3, [pc, #16]	@ (8005390 <__NVIC_GetPriorityGrouping+0x18>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	0a1b      	lsrs	r3, r3, #8
 8005382:	f003 0307 	and.w	r3, r3, #7
}
 8005386:	4618      	mov	r0, r3
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	e000ed00 	.word	0xe000ed00

08005394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800539e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	db0b      	blt.n	80053be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	f003 021f 	and.w	r2, r3, #31
 80053ac:	4907      	ldr	r1, [pc, #28]	@ (80053cc <__NVIC_EnableIRQ+0x38>)
 80053ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b2:	095b      	lsrs	r3, r3, #5
 80053b4:	2001      	movs	r0, #1
 80053b6:	fa00 f202 	lsl.w	r2, r0, r2
 80053ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	e000e100 	.word	0xe000e100

080053d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	4603      	mov	r3, r0
 80053d8:	6039      	str	r1, [r7, #0]
 80053da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	db0a      	blt.n	80053fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	490c      	ldr	r1, [pc, #48]	@ (800541c <__NVIC_SetPriority+0x4c>)
 80053ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ee:	0112      	lsls	r2, r2, #4
 80053f0:	b2d2      	uxtb	r2, r2
 80053f2:	440b      	add	r3, r1
 80053f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053f8:	e00a      	b.n	8005410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	4908      	ldr	r1, [pc, #32]	@ (8005420 <__NVIC_SetPriority+0x50>)
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	3b04      	subs	r3, #4
 8005408:	0112      	lsls	r2, r2, #4
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	440b      	add	r3, r1
 800540e:	761a      	strb	r2, [r3, #24]
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	e000e100 	.word	0xe000e100
 8005420:	e000ed00 	.word	0xe000ed00

08005424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005424:	b480      	push	{r7}
 8005426:	b089      	sub	sp, #36	@ 0x24
 8005428:	af00      	add	r7, sp, #0
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	f1c3 0307 	rsb	r3, r3, #7
 800543e:	2b04      	cmp	r3, #4
 8005440:	bf28      	it	cs
 8005442:	2304      	movcs	r3, #4
 8005444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	3304      	adds	r3, #4
 800544a:	2b06      	cmp	r3, #6
 800544c:	d902      	bls.n	8005454 <NVIC_EncodePriority+0x30>
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	3b03      	subs	r3, #3
 8005452:	e000      	b.n	8005456 <NVIC_EncodePriority+0x32>
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005458:	f04f 32ff 	mov.w	r2, #4294967295
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43da      	mvns	r2, r3
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	401a      	ands	r2, r3
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800546c:	f04f 31ff 	mov.w	r1, #4294967295
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	fa01 f303 	lsl.w	r3, r1, r3
 8005476:	43d9      	mvns	r1, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800547c:	4313      	orrs	r3, r2
         );
}
 800547e:	4618      	mov	r0, r3
 8005480:	3724      	adds	r7, #36	@ 0x24
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3b01      	subs	r3, #1
 8005498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800549c:	d301      	bcc.n	80054a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800549e:	2301      	movs	r3, #1
 80054a0:	e00f      	b.n	80054c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054a2:	4a0a      	ldr	r2, [pc, #40]	@ (80054cc <SysTick_Config+0x40>)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054aa:	210f      	movs	r1, #15
 80054ac:	f04f 30ff 	mov.w	r0, #4294967295
 80054b0:	f7ff ff8e 	bl	80053d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054b4:	4b05      	ldr	r3, [pc, #20]	@ (80054cc <SysTick_Config+0x40>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80054ba:	4b04      	ldr	r3, [pc, #16]	@ (80054cc <SysTick_Config+0x40>)
 80054bc:	2207      	movs	r2, #7
 80054be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	e000e010 	.word	0xe000e010

080054d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff ff29 	bl	8005330 <__NVIC_SetPriorityGrouping>
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b086      	sub	sp, #24
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	4603      	mov	r3, r0
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054f8:	f7ff ff3e 	bl	8005378 <__NVIC_GetPriorityGrouping>
 80054fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	6978      	ldr	r0, [r7, #20]
 8005504:	f7ff ff8e 	bl	8005424 <NVIC_EncodePriority>
 8005508:	4602      	mov	r2, r0
 800550a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800550e:	4611      	mov	r1, r2
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff ff5d 	bl	80053d0 <__NVIC_SetPriority>
}
 8005516:	bf00      	nop
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	4603      	mov	r3, r0
 8005526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff ff31 	bl	8005394 <__NVIC_EnableIRQ>
}
 8005532:	bf00      	nop
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b082      	sub	sp, #8
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff ffa2 	bl	800548c <SysTick_Config>
 8005548:	4603      	mov	r3, r0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005560:	f7ff fc68 	bl	8004e34 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e099      	b.n	80056a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0201 	bic.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005590:	e00f      	b.n	80055b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005592:	f7ff fc4f 	bl	8004e34 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b05      	cmp	r3, #5
 800559e:	d908      	bls.n	80055b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2203      	movs	r2, #3
 80055aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e078      	b.n	80056a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e8      	bne.n	8005592 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4b38      	ldr	r3, [pc, #224]	@ (80056ac <HAL_DMA_Init+0x158>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005608:	2b04      	cmp	r3, #4
 800560a:	d107      	bne.n	800561c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005614:	4313      	orrs	r3, r2
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	f023 0307 	bic.w	r3, r3, #7
 8005632:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005642:	2b04      	cmp	r3, #4
 8005644:	d117      	bne.n	8005676 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00e      	beq.n	8005676 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fa0b 	bl	8005a74 <DMA_CheckFifoParam>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2240      	movs	r2, #64	@ 0x40
 8005668:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005672:	2301      	movs	r3, #1
 8005674:	e016      	b.n	80056a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f9c2 	bl	8005a08 <DMA_CalcBaseAndBitshift>
 8005684:	4603      	mov	r3, r0
 8005686:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800568c:	223f      	movs	r2, #63	@ 0x3f
 800568e:	409a      	lsls	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	f010803f 	.word	0xf010803f

080056b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d004      	beq.n	80056ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2280      	movs	r2, #128	@ 0x80
 80056c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e00c      	b.n	80056e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2205      	movs	r2, #5
 80056d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0201 	bic.w	r2, r2, #1
 80056e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005700:	4b8e      	ldr	r3, [pc, #568]	@ (800593c <HAL_DMA_IRQHandler+0x248>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a8e      	ldr	r2, [pc, #568]	@ (8005940 <HAL_DMA_IRQHandler+0x24c>)
 8005706:	fba2 2303 	umull	r2, r3, r2, r3
 800570a:	0a9b      	lsrs	r3, r3, #10
 800570c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005712:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571e:	2208      	movs	r2, #8
 8005720:	409a      	lsls	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4013      	ands	r3, r2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d01a      	beq.n	8005760 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d013      	beq.n	8005760 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0204 	bic.w	r2, r2, #4
 8005746:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800574c:	2208      	movs	r2, #8
 800574e:	409a      	lsls	r2, r3
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005758:	f043 0201 	orr.w	r2, r3, #1
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005764:	2201      	movs	r2, #1
 8005766:	409a      	lsls	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4013      	ands	r3, r2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d012      	beq.n	8005796 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00b      	beq.n	8005796 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005782:	2201      	movs	r2, #1
 8005784:	409a      	lsls	r2, r3
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578e:	f043 0202 	orr.w	r2, r3, #2
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579a:	2204      	movs	r2, #4
 800579c:	409a      	lsls	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4013      	ands	r3, r2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d012      	beq.n	80057cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00b      	beq.n	80057cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b8:	2204      	movs	r2, #4
 80057ba:	409a      	lsls	r2, r3
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c4:	f043 0204 	orr.w	r2, r3, #4
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d0:	2210      	movs	r2, #16
 80057d2:	409a      	lsls	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d043      	beq.n	8005864 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0308 	and.w	r3, r3, #8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d03c      	beq.n	8005864 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ee:	2210      	movs	r2, #16
 80057f0:	409a      	lsls	r2, r3
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d018      	beq.n	8005836 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d108      	bne.n	8005824 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	d024      	beq.n	8005864 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
 8005822:	e01f      	b.n	8005864 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005828:	2b00      	cmp	r3, #0
 800582a:	d01b      	beq.n	8005864 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	4798      	blx	r3
 8005834:	e016      	b.n	8005864 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005840:	2b00      	cmp	r3, #0
 8005842:	d107      	bne.n	8005854 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0208 	bic.w	r2, r2, #8
 8005852:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005868:	2220      	movs	r2, #32
 800586a:	409a      	lsls	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4013      	ands	r3, r2
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 808f 	beq.w	8005994 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8087 	beq.w	8005994 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800588a:	2220      	movs	r2, #32
 800588c:	409a      	lsls	r2, r3
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b05      	cmp	r3, #5
 800589c:	d136      	bne.n	800590c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0216 	bic.w	r2, r2, #22
 80058ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695a      	ldr	r2, [r3, #20]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d103      	bne.n	80058ce <HAL_DMA_IRQHandler+0x1da>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0208 	bic.w	r2, r2, #8
 80058dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058e2:	223f      	movs	r2, #63	@ 0x3f
 80058e4:	409a      	lsls	r2, r3
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d07e      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	4798      	blx	r3
        }
        return;
 800590a:	e079      	b.n	8005a00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01d      	beq.n	8005956 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10d      	bne.n	8005944 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592c:	2b00      	cmp	r3, #0
 800592e:	d031      	beq.n	8005994 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	4798      	blx	r3
 8005938:	e02c      	b.n	8005994 <HAL_DMA_IRQHandler+0x2a0>
 800593a:	bf00      	nop
 800593c:	200000ac 	.word	0x200000ac
 8005940:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d023      	beq.n	8005994 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	4798      	blx	r3
 8005954:	e01e      	b.n	8005994 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10f      	bne.n	8005984 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0210 	bic.w	r2, r2, #16
 8005972:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005998:	2b00      	cmp	r3, #0
 800599a:	d032      	beq.n	8005a02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d022      	beq.n	80059ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2205      	movs	r2, #5
 80059ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0201 	bic.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	3301      	adds	r3, #1
 80059c4:	60bb      	str	r3, [r7, #8]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d307      	bcc.n	80059dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f2      	bne.n	80059c0 <HAL_DMA_IRQHandler+0x2cc>
 80059da:	e000      	b.n	80059de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80059dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	4798      	blx	r3
 80059fe:	e000      	b.n	8005a02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005a00:	bf00      	nop
    }
  }
}
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	3b10      	subs	r3, #16
 8005a18:	4a14      	ldr	r2, [pc, #80]	@ (8005a6c <DMA_CalcBaseAndBitshift+0x64>)
 8005a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1e:	091b      	lsrs	r3, r3, #4
 8005a20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a22:	4a13      	ldr	r2, [pc, #76]	@ (8005a70 <DMA_CalcBaseAndBitshift+0x68>)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d909      	bls.n	8005a4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	1d1a      	adds	r2, r3, #4
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a48:	e007      	b.n	8005a5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a52:	f023 0303 	bic.w	r3, r3, #3
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	aaaaaaab 	.word	0xaaaaaaab
 8005a70:	0800e1f8 	.word	0x0800e1f8

08005a74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d11f      	bne.n	8005ace <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d856      	bhi.n	8005b42 <DMA_CheckFifoParam+0xce>
 8005a94:	a201      	add	r2, pc, #4	@ (adr r2, 8005a9c <DMA_CheckFifoParam+0x28>)
 8005a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005aad 	.word	0x08005aad
 8005aa0:	08005abf 	.word	0x08005abf
 8005aa4:	08005aad 	.word	0x08005aad
 8005aa8:	08005b43 	.word	0x08005b43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d046      	beq.n	8005b46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005abc:	e043      	b.n	8005b46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ac6:	d140      	bne.n	8005b4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005acc:	e03d      	b.n	8005b4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ad6:	d121      	bne.n	8005b1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d837      	bhi.n	8005b4e <DMA_CheckFifoParam+0xda>
 8005ade:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae4 <DMA_CheckFifoParam+0x70>)
 8005ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae4:	08005af5 	.word	0x08005af5
 8005ae8:	08005afb 	.word	0x08005afb
 8005aec:	08005af5 	.word	0x08005af5
 8005af0:	08005b0d 	.word	0x08005b0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	73fb      	strb	r3, [r7, #15]
      break;
 8005af8:	e030      	b.n	8005b5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d025      	beq.n	8005b52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b0a:	e022      	b.n	8005b52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b14:	d11f      	bne.n	8005b56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b1a:	e01c      	b.n	8005b56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d903      	bls.n	8005b2a <DMA_CheckFifoParam+0xb6>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d003      	beq.n	8005b30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b28:	e018      	b.n	8005b5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b2e:	e015      	b.n	8005b5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00e      	beq.n	8005b5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b40:	e00b      	b.n	8005b5a <DMA_CheckFifoParam+0xe6>
      break;
 8005b42:	bf00      	nop
 8005b44:	e00a      	b.n	8005b5c <DMA_CheckFifoParam+0xe8>
      break;
 8005b46:	bf00      	nop
 8005b48:	e008      	b.n	8005b5c <DMA_CheckFifoParam+0xe8>
      break;
 8005b4a:	bf00      	nop
 8005b4c:	e006      	b.n	8005b5c <DMA_CheckFifoParam+0xe8>
      break;
 8005b4e:	bf00      	nop
 8005b50:	e004      	b.n	8005b5c <DMA_CheckFifoParam+0xe8>
      break;
 8005b52:	bf00      	nop
 8005b54:	e002      	b.n	8005b5c <DMA_CheckFifoParam+0xe8>
      break;   
 8005b56:	bf00      	nop
 8005b58:	e000      	b.n	8005b5c <DMA_CheckFifoParam+0xe8>
      break;
 8005b5a:	bf00      	nop
    }
  } 
  
  return status; 
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop

08005b6c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b7e:	4b23      	ldr	r3, [pc, #140]	@ (8005c0c <HAL_FLASH_Program+0xa0>)
 8005b80:	7e1b      	ldrb	r3, [r3, #24]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_FLASH_Program+0x1e>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e03b      	b.n	8005c02 <HAL_FLASH_Program+0x96>
 8005b8a:	4b20      	ldr	r3, [pc, #128]	@ (8005c0c <HAL_FLASH_Program+0xa0>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b90:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005b94:	f000 f87c 	bl	8005c90 <FLASH_WaitForLastOperation>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d12b      	bne.n	8005bfa <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d105      	bne.n	8005bb4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005ba8:	783b      	ldrb	r3, [r7, #0]
 8005baa:	4619      	mov	r1, r3
 8005bac:	68b8      	ldr	r0, [r7, #8]
 8005bae:	f000 f927 	bl	8005e00 <FLASH_Program_Byte>
 8005bb2:	e016      	b.n	8005be2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d105      	bne.n	8005bc6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005bba:	883b      	ldrh	r3, [r7, #0]
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	68b8      	ldr	r0, [r7, #8]
 8005bc0:	f000 f8fa 	bl	8005db8 <FLASH_Program_HalfWord>
 8005bc4:	e00d      	b.n	8005be2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d105      	bne.n	8005bd8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	68b8      	ldr	r0, [r7, #8]
 8005bd2:	f000 f8cf 	bl	8005d74 <FLASH_Program_Word>
 8005bd6:	e004      	b.n	8005be2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bdc:	68b8      	ldr	r0, [r7, #8]
 8005bde:	f000 f897 	bl	8005d10 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005be2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005be6:	f000 f853 	bl	8005c90 <FLASH_WaitForLastOperation>
 8005bea:	4603      	mov	r3, r0
 8005bec:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005bee:	4b08      	ldr	r3, [pc, #32]	@ (8005c10 <HAL_FLASH_Program+0xa4>)
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	4a07      	ldr	r2, [pc, #28]	@ (8005c10 <HAL_FLASH_Program+0xa4>)
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005bfa:	4b04      	ldr	r3, [pc, #16]	@ (8005c0c <HAL_FLASH_Program+0xa0>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	761a      	strb	r2, [r3, #24]

  return status;
 8005c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000cc4 	.word	0x20000cc4
 8005c10:	40023c00 	.word	0x40023c00

08005c14 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c4c <HAL_FLASH_Unlock+0x38>)
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	da0b      	bge.n	8005c3e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005c26:	4b09      	ldr	r3, [pc, #36]	@ (8005c4c <HAL_FLASH_Unlock+0x38>)
 8005c28:	4a09      	ldr	r2, [pc, #36]	@ (8005c50 <HAL_FLASH_Unlock+0x3c>)
 8005c2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005c2c:	4b07      	ldr	r3, [pc, #28]	@ (8005c4c <HAL_FLASH_Unlock+0x38>)
 8005c2e:	4a09      	ldr	r2, [pc, #36]	@ (8005c54 <HAL_FLASH_Unlock+0x40>)
 8005c30:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c32:	4b06      	ldr	r3, [pc, #24]	@ (8005c4c <HAL_FLASH_Unlock+0x38>)
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	da01      	bge.n	8005c3e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	40023c00 	.word	0x40023c00
 8005c50:	45670123 	.word	0x45670123
 8005c54:	cdef89ab 	.word	0xcdef89ab

08005c58 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005c5c:	4b05      	ldr	r3, [pc, #20]	@ (8005c74 <HAL_FLASH_Lock+0x1c>)
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	4a04      	ldr	r2, [pc, #16]	@ (8005c74 <HAL_FLASH_Lock+0x1c>)
 8005c62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c66:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	40023c00 	.word	0x40023c00

08005c78 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag
  */
uint32_t HAL_FLASH_GetError(void)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8005c7c:	4b03      	ldr	r3, [pc, #12]	@ (8005c8c <HAL_FLASH_GetError+0x14>)
 8005c7e:	69db      	ldr	r3, [r3, #28]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000cc4 	.word	0x20000cc4

08005c90 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005d08 <FLASH_WaitForLastOperation+0x78>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005ca2:	f7ff f8c7 	bl	8004e34 <HAL_GetTick>
 8005ca6:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8005ca8:	e010      	b.n	8005ccc <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d00c      	beq.n	8005ccc <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d007      	beq.n	8005cc8 <FLASH_WaitForLastOperation+0x38>
 8005cb8:	f7ff f8bc 	bl	8004e34 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d201      	bcs.n	8005ccc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	e019      	b.n	8005d00 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8005d0c <FLASH_WaitForLastOperation+0x7c>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1e8      	bne.n	8005caa <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d0c <FLASH_WaitForLastOperation+0x7c>)
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005ce4:	4b09      	ldr	r3, [pc, #36]	@ (8005d0c <FLASH_WaitForLastOperation+0x7c>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005cea:	4b08      	ldr	r3, [pc, #32]	@ (8005d0c <FLASH_WaitForLastOperation+0x7c>)
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005cf6:	f000 f8a5 	bl	8005e44 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e000      	b.n	8005d00 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0

}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	20000cc4 	.word	0x20000cc4
 8005d0c:	40023c00 	.word	0x40023c00

08005d10 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d1c:	4b14      	ldr	r3, [pc, #80]	@ (8005d70 <FLASH_Program_DoubleWord+0x60>)
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	4a13      	ldr	r2, [pc, #76]	@ (8005d70 <FLASH_Program_DoubleWord+0x60>)
 8005d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005d28:	4b11      	ldr	r3, [pc, #68]	@ (8005d70 <FLASH_Program_DoubleWord+0x60>)
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	4a10      	ldr	r2, [pc, #64]	@ (8005d70 <FLASH_Program_DoubleWord+0x60>)
 8005d2e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005d32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005d34:	4b0e      	ldr	r3, [pc, #56]	@ (8005d70 <FLASH_Program_DoubleWord+0x60>)
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	4a0d      	ldr	r2, [pc, #52]	@ (8005d70 <FLASH_Program_DoubleWord+0x60>)
 8005d3a:	f043 0301 	orr.w	r3, r3, #1
 8005d3e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005d46:	f3bf 8f6f 	isb	sy
}
 8005d4a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8005d4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	000a      	movs	r2, r1
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	68f9      	ldr	r1, [r7, #12]
 8005d5e:	3104      	adds	r1, #4
 8005d60:	4613      	mov	r3, r2
 8005d62:	600b      	str	r3, [r1, #0]
}
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	40023c00 	.word	0x40023c00

08005d74 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005db4 <FLASH_Program_Word+0x40>)
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	4a0c      	ldr	r2, [pc, #48]	@ (8005db4 <FLASH_Program_Word+0x40>)
 8005d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005db4 <FLASH_Program_Word+0x40>)
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	4a09      	ldr	r2, [pc, #36]	@ (8005db4 <FLASH_Program_Word+0x40>)
 8005d90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005d96:	4b07      	ldr	r3, [pc, #28]	@ (8005db4 <FLASH_Program_Word+0x40>)
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	4a06      	ldr	r2, [pc, #24]	@ (8005db4 <FLASH_Program_Word+0x40>)
 8005d9c:	f043 0301 	orr.w	r3, r3, #1
 8005da0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	601a      	str	r2, [r3, #0]
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	40023c00 	.word	0x40023c00

08005db8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8005dfc <FLASH_Program_HalfWord+0x44>)
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8005dfc <FLASH_Program_HalfWord+0x44>)
 8005dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8005dfc <FLASH_Program_HalfWord+0x44>)
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	4a09      	ldr	r2, [pc, #36]	@ (8005dfc <FLASH_Program_HalfWord+0x44>)
 8005dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005ddc:	4b07      	ldr	r3, [pc, #28]	@ (8005dfc <FLASH_Program_HalfWord+0x44>)
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	4a06      	ldr	r2, [pc, #24]	@ (8005dfc <FLASH_Program_HalfWord+0x44>)
 8005de2:	f043 0301 	orr.w	r3, r3, #1
 8005de6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	887a      	ldrh	r2, [r7, #2]
 8005dec:	801a      	strh	r2, [r3, #0]
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40023c00 	.word	0x40023c00

08005e00 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e40 <FLASH_Program_Byte+0x40>)
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	4a0b      	ldr	r2, [pc, #44]	@ (8005e40 <FLASH_Program_Byte+0x40>)
 8005e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005e18:	4b09      	ldr	r3, [pc, #36]	@ (8005e40 <FLASH_Program_Byte+0x40>)
 8005e1a:	4a09      	ldr	r2, [pc, #36]	@ (8005e40 <FLASH_Program_Byte+0x40>)
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005e20:	4b07      	ldr	r3, [pc, #28]	@ (8005e40 <FLASH_Program_Byte+0x40>)
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	4a06      	ldr	r2, [pc, #24]	@ (8005e40 <FLASH_Program_Byte+0x40>)
 8005e26:	f043 0301 	orr.w	r3, r3, #1
 8005e2a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	78fa      	ldrb	r2, [r7, #3]
 8005e30:	701a      	strb	r2, [r3, #0]
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40023c00 	.word	0x40023c00

08005e44 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005e48:	4b2f      	ldr	r3, [pc, #188]	@ (8005f08 <FLASH_SetErrorCode+0xc4>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f003 0310 	and.w	r3, r3, #16
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005e54:	4b2d      	ldr	r3, [pc, #180]	@ (8005f0c <FLASH_SetErrorCode+0xc8>)
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	f043 0310 	orr.w	r3, r3, #16
 8005e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8005f0c <FLASH_SetErrorCode+0xc8>)
 8005e5e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005e60:	4b29      	ldr	r3, [pc, #164]	@ (8005f08 <FLASH_SetErrorCode+0xc4>)
 8005e62:	2210      	movs	r2, #16
 8005e64:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005e66:	4b28      	ldr	r3, [pc, #160]	@ (8005f08 <FLASH_SetErrorCode+0xc4>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005e72:	4b26      	ldr	r3, [pc, #152]	@ (8005f0c <FLASH_SetErrorCode+0xc8>)
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f043 0308 	orr.w	r3, r3, #8
 8005e7a:	4a24      	ldr	r2, [pc, #144]	@ (8005f0c <FLASH_SetErrorCode+0xc8>)
 8005e7c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005e7e:	4b22      	ldr	r3, [pc, #136]	@ (8005f08 <FLASH_SetErrorCode+0xc4>)
 8005e80:	2220      	movs	r2, #32
 8005e82:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005e84:	4b20      	ldr	r3, [pc, #128]	@ (8005f08 <FLASH_SetErrorCode+0xc4>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005e90:	4b1e      	ldr	r3, [pc, #120]	@ (8005f0c <FLASH_SetErrorCode+0xc8>)
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	f043 0304 	orr.w	r3, r3, #4
 8005e98:	4a1c      	ldr	r2, [pc, #112]	@ (8005f0c <FLASH_SetErrorCode+0xc8>)
 8005e9a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005f08 <FLASH_SetErrorCode+0xc4>)
 8005e9e:	2240      	movs	r2, #64	@ 0x40
 8005ea0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005ea2:	4b19      	ldr	r3, [pc, #100]	@ (8005f08 <FLASH_SetErrorCode+0xc4>)
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d008      	beq.n	8005ec0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005eae:	4b17      	ldr	r3, [pc, #92]	@ (8005f0c <FLASH_SetErrorCode+0xc8>)
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	f043 0302 	orr.w	r3, r3, #2
 8005eb6:	4a15      	ldr	r2, [pc, #84]	@ (8005f0c <FLASH_SetErrorCode+0xc8>)
 8005eb8:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005eba:	4b13      	ldr	r3, [pc, #76]	@ (8005f08 <FLASH_SetErrorCode+0xc4>)
 8005ebc:	2280      	movs	r2, #128	@ 0x80
 8005ebe:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005ec0:	4b11      	ldr	r3, [pc, #68]	@ (8005f08 <FLASH_SetErrorCode+0xc4>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d009      	beq.n	8005ee0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8005f0c <FLASH_SetErrorCode+0xc8>)
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	f043 0301 	orr.w	r3, r3, #1
 8005ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8005f0c <FLASH_SetErrorCode+0xc8>)
 8005ed6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8005f08 <FLASH_SetErrorCode+0xc4>)
 8005eda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ede:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005ee0:	4b09      	ldr	r3, [pc, #36]	@ (8005f08 <FLASH_SetErrorCode+0xc4>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d008      	beq.n	8005efe <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005eec:	4b07      	ldr	r3, [pc, #28]	@ (8005f0c <FLASH_SetErrorCode+0xc8>)
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	f043 0320 	orr.w	r3, r3, #32
 8005ef4:	4a05      	ldr	r2, [pc, #20]	@ (8005f0c <FLASH_SetErrorCode+0xc8>)
 8005ef6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005ef8:	4b03      	ldr	r3, [pc, #12]	@ (8005f08 <FLASH_SetErrorCode+0xc4>)
 8005efa:	2202      	movs	r2, #2
 8005efc:	60da      	str	r2, [r3, #12]
  }
}
 8005efe:	bf00      	nop
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	40023c00 	.word	0x40023c00
 8005f0c:	20000cc4 	.word	0x20000cc4

08005f10 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005f22:	4b31      	ldr	r3, [pc, #196]	@ (8005fe8 <HAL_FLASHEx_Erase+0xd8>)
 8005f24:	7e1b      	ldrb	r3, [r3, #24]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <HAL_FLASHEx_Erase+0x1e>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e058      	b.n	8005fe0 <HAL_FLASHEx_Erase+0xd0>
 8005f2e:	4b2e      	ldr	r3, [pc, #184]	@ (8005fe8 <HAL_FLASHEx_Erase+0xd8>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f34:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005f38:	f7ff feaa 	bl	8005c90 <FLASH_WaitForLastOperation>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d148      	bne.n	8005fd8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	f04f 32ff 	mov.w	r2, #4294967295
 8005f4c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d115      	bne.n	8005f82 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f000 f844 	bl	8005ff0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f68:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005f6c:	f7ff fe90 	bl	8005c90 <FLASH_WaitForLastOperation>
 8005f70:	4603      	mov	r3, r0
 8005f72:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005f74:	4b1d      	ldr	r3, [pc, #116]	@ (8005fec <HAL_FLASHEx_Erase+0xdc>)
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	4a1c      	ldr	r2, [pc, #112]	@ (8005fec <HAL_FLASHEx_Erase+0xdc>)
 8005f7a:	f023 0304 	bic.w	r3, r3, #4
 8005f7e:	6113      	str	r3, [r2, #16]
 8005f80:	e028      	b.n	8005fd4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	60bb      	str	r3, [r7, #8]
 8005f88:	e01c      	b.n	8005fc4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	4619      	mov	r1, r3
 8005f92:	68b8      	ldr	r0, [r7, #8]
 8005f94:	f000 f850 	bl	8006038 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f98:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005f9c:	f7ff fe78 	bl	8005c90 <FLASH_WaitForLastOperation>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005fa4:	4b11      	ldr	r3, [pc, #68]	@ (8005fec <HAL_FLASHEx_Erase+0xdc>)
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	4a10      	ldr	r2, [pc, #64]	@ (8005fec <HAL_FLASHEx_Erase+0xdc>)
 8005faa:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8005fae:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	601a      	str	r2, [r3, #0]
          break;
 8005fbc:	e00a      	b.n	8005fd4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	60bb      	str	r3, [r7, #8]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68da      	ldr	r2, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	4413      	add	r3, r2
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d3da      	bcc.n	8005f8a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005fd4:	f000 f878 	bl	80060c8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005fd8:	4b03      	ldr	r3, [pc, #12]	@ (8005fe8 <HAL_FLASHEx_Erase+0xd8>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	761a      	strb	r2, [r3, #24]

  return status;
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	20000cc4 	.word	0x20000cc4
 8005fec:	40023c00 	.word	0x40023c00

08005ff0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	6039      	str	r1, [r7, #0]
 8005ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8006034 <FLASH_MassErase+0x44>)
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	4a0c      	ldr	r2, [pc, #48]	@ (8006034 <FLASH_MassErase+0x44>)
 8006002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006006:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006008:	4b0a      	ldr	r3, [pc, #40]	@ (8006034 <FLASH_MassErase+0x44>)
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	4a09      	ldr	r2, [pc, #36]	@ (8006034 <FLASH_MassErase+0x44>)
 800600e:	f043 0304 	orr.w	r3, r3, #4
 8006012:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8006014:	4b07      	ldr	r3, [pc, #28]	@ (8006034 <FLASH_MassErase+0x44>)
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	021b      	lsls	r3, r3, #8
 800601c:	4313      	orrs	r3, r2
 800601e:	4a05      	ldr	r2, [pc, #20]	@ (8006034 <FLASH_MassErase+0x44>)
 8006020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006024:	6113      	str	r3, [r2, #16]
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40023c00 	.word	0x40023c00

08006038 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d102      	bne.n	8006054 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	e010      	b.n	8006076 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d103      	bne.n	8006062 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800605a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	e009      	b.n	8006076 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d103      	bne.n	8006070 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006068:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	e002      	b.n	8006076 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006070:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006074:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006076:	4b13      	ldr	r3, [pc, #76]	@ (80060c4 <FLASH_Erase_Sector+0x8c>)
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	4a12      	ldr	r2, [pc, #72]	@ (80060c4 <FLASH_Erase_Sector+0x8c>)
 800607c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006080:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006082:	4b10      	ldr	r3, [pc, #64]	@ (80060c4 <FLASH_Erase_Sector+0x8c>)
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	490f      	ldr	r1, [pc, #60]	@ (80060c4 <FLASH_Erase_Sector+0x8c>)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800608e:	4b0d      	ldr	r3, [pc, #52]	@ (80060c4 <FLASH_Erase_Sector+0x8c>)
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	4a0c      	ldr	r2, [pc, #48]	@ (80060c4 <FLASH_Erase_Sector+0x8c>)
 8006094:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006098:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800609a:	4b0a      	ldr	r3, [pc, #40]	@ (80060c4 <FLASH_Erase_Sector+0x8c>)
 800609c:	691a      	ldr	r2, [r3, #16]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	4313      	orrs	r3, r2
 80060a4:	4a07      	ldr	r2, [pc, #28]	@ (80060c4 <FLASH_Erase_Sector+0x8c>)
 80060a6:	f043 0302 	orr.w	r3, r3, #2
 80060aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80060ac:	4b05      	ldr	r3, [pc, #20]	@ (80060c4 <FLASH_Erase_Sector+0x8c>)
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	4a04      	ldr	r2, [pc, #16]	@ (80060c4 <FLASH_Erase_Sector+0x8c>)
 80060b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060b6:	6113      	str	r3, [r2, #16]
}
 80060b8:	bf00      	nop
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	40023c00 	.word	0x40023c00

080060c8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80060cc:	4b20      	ldr	r3, [pc, #128]	@ (8006150 <FLASH_FlushCaches+0x88>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d017      	beq.n	8006108 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80060d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006150 <FLASH_FlushCaches+0x88>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006150 <FLASH_FlushCaches+0x88>)
 80060de:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060e2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80060e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006150 <FLASH_FlushCaches+0x88>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a19      	ldr	r2, [pc, #100]	@ (8006150 <FLASH_FlushCaches+0x88>)
 80060ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	4b17      	ldr	r3, [pc, #92]	@ (8006150 <FLASH_FlushCaches+0x88>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a16      	ldr	r2, [pc, #88]	@ (8006150 <FLASH_FlushCaches+0x88>)
 80060f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80060fc:	4b14      	ldr	r3, [pc, #80]	@ (8006150 <FLASH_FlushCaches+0x88>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a13      	ldr	r2, [pc, #76]	@ (8006150 <FLASH_FlushCaches+0x88>)
 8006102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006106:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006108:	4b11      	ldr	r3, [pc, #68]	@ (8006150 <FLASH_FlushCaches+0x88>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006110:	2b00      	cmp	r3, #0
 8006112:	d017      	beq.n	8006144 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006114:	4b0e      	ldr	r3, [pc, #56]	@ (8006150 <FLASH_FlushCaches+0x88>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a0d      	ldr	r2, [pc, #52]	@ (8006150 <FLASH_FlushCaches+0x88>)
 800611a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800611e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006120:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <FLASH_FlushCaches+0x88>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a0a      	ldr	r2, [pc, #40]	@ (8006150 <FLASH_FlushCaches+0x88>)
 8006126:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	4b08      	ldr	r3, [pc, #32]	@ (8006150 <FLASH_FlushCaches+0x88>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a07      	ldr	r2, [pc, #28]	@ (8006150 <FLASH_FlushCaches+0x88>)
 8006132:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006136:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006138:	4b05      	ldr	r3, [pc, #20]	@ (8006150 <FLASH_FlushCaches+0x88>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a04      	ldr	r2, [pc, #16]	@ (8006150 <FLASH_FlushCaches+0x88>)
 800613e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006142:	6013      	str	r3, [r2, #0]
  }
}
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40023c00 	.word	0x40023c00

08006154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006154:	b480      	push	{r7}
 8006156:	b089      	sub	sp, #36	@ 0x24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800615e:	2300      	movs	r3, #0
 8006160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006162:	2300      	movs	r3, #0
 8006164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006166:	2300      	movs	r3, #0
 8006168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800616a:	2300      	movs	r3, #0
 800616c:	61fb      	str	r3, [r7, #28]
 800616e:	e159      	b.n	8006424 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006170:	2201      	movs	r2, #1
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4013      	ands	r3, r2
 8006182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	429a      	cmp	r2, r3
 800618a:	f040 8148 	bne.w	800641e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	2b01      	cmp	r3, #1
 8006198:	d005      	beq.n	80061a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d130      	bne.n	8006208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	2203      	movs	r2, #3
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	43db      	mvns	r3, r3
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	4013      	ands	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68da      	ldr	r2, [r3, #12]
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061dc:	2201      	movs	r2, #1
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	fa02 f303 	lsl.w	r3, r2, r3
 80061e4:	43db      	mvns	r3, r3
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	4013      	ands	r3, r2
 80061ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	091b      	lsrs	r3, r3, #4
 80061f2:	f003 0201 	and.w	r2, r3, #1
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	4313      	orrs	r3, r2
 8006200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f003 0303 	and.w	r3, r3, #3
 8006210:	2b03      	cmp	r3, #3
 8006212:	d017      	beq.n	8006244 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	2203      	movs	r2, #3
 8006220:	fa02 f303 	lsl.w	r3, r2, r3
 8006224:	43db      	mvns	r3, r3
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	4013      	ands	r3, r2
 800622a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	4313      	orrs	r3, r2
 800623c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d123      	bne.n	8006298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	08da      	lsrs	r2, r3, #3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3208      	adds	r2, #8
 8006258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800625c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	f003 0307 	and.w	r3, r3, #7
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	220f      	movs	r2, #15
 8006268:	fa02 f303 	lsl.w	r3, r2, r3
 800626c:	43db      	mvns	r3, r3
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	4013      	ands	r3, r2
 8006272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	fa02 f303 	lsl.w	r3, r2, r3
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	4313      	orrs	r3, r2
 8006288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	08da      	lsrs	r2, r3, #3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3208      	adds	r2, #8
 8006292:	69b9      	ldr	r1, [r7, #24]
 8006294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	2203      	movs	r2, #3
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	43db      	mvns	r3, r3
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	4013      	ands	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f003 0203 	and.w	r2, r3, #3
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	005b      	lsls	r3, r3, #1
 80062bc:	fa02 f303 	lsl.w	r3, r2, r3
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 80a2 	beq.w	800641e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	4b57      	ldr	r3, [pc, #348]	@ (800643c <HAL_GPIO_Init+0x2e8>)
 80062e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e2:	4a56      	ldr	r2, [pc, #344]	@ (800643c <HAL_GPIO_Init+0x2e8>)
 80062e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80062ea:	4b54      	ldr	r3, [pc, #336]	@ (800643c <HAL_GPIO_Init+0x2e8>)
 80062ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062f6:	4a52      	ldr	r2, [pc, #328]	@ (8006440 <HAL_GPIO_Init+0x2ec>)
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	089b      	lsrs	r3, r3, #2
 80062fc:	3302      	adds	r3, #2
 80062fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	220f      	movs	r2, #15
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	43db      	mvns	r3, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	4013      	ands	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a49      	ldr	r2, [pc, #292]	@ (8006444 <HAL_GPIO_Init+0x2f0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d019      	beq.n	8006356 <HAL_GPIO_Init+0x202>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a48      	ldr	r2, [pc, #288]	@ (8006448 <HAL_GPIO_Init+0x2f4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d013      	beq.n	8006352 <HAL_GPIO_Init+0x1fe>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a47      	ldr	r2, [pc, #284]	@ (800644c <HAL_GPIO_Init+0x2f8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d00d      	beq.n	800634e <HAL_GPIO_Init+0x1fa>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a46      	ldr	r2, [pc, #280]	@ (8006450 <HAL_GPIO_Init+0x2fc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d007      	beq.n	800634a <HAL_GPIO_Init+0x1f6>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a45      	ldr	r2, [pc, #276]	@ (8006454 <HAL_GPIO_Init+0x300>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d101      	bne.n	8006346 <HAL_GPIO_Init+0x1f2>
 8006342:	2304      	movs	r3, #4
 8006344:	e008      	b.n	8006358 <HAL_GPIO_Init+0x204>
 8006346:	2307      	movs	r3, #7
 8006348:	e006      	b.n	8006358 <HAL_GPIO_Init+0x204>
 800634a:	2303      	movs	r3, #3
 800634c:	e004      	b.n	8006358 <HAL_GPIO_Init+0x204>
 800634e:	2302      	movs	r3, #2
 8006350:	e002      	b.n	8006358 <HAL_GPIO_Init+0x204>
 8006352:	2301      	movs	r3, #1
 8006354:	e000      	b.n	8006358 <HAL_GPIO_Init+0x204>
 8006356:	2300      	movs	r3, #0
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	f002 0203 	and.w	r2, r2, #3
 800635e:	0092      	lsls	r2, r2, #2
 8006360:	4093      	lsls	r3, r2
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	4313      	orrs	r3, r2
 8006366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006368:	4935      	ldr	r1, [pc, #212]	@ (8006440 <HAL_GPIO_Init+0x2ec>)
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	089b      	lsrs	r3, r3, #2
 800636e:	3302      	adds	r3, #2
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006376:	4b38      	ldr	r3, [pc, #224]	@ (8006458 <HAL_GPIO_Init+0x304>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	43db      	mvns	r3, r3
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	4013      	ands	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800639a:	4a2f      	ldr	r2, [pc, #188]	@ (8006458 <HAL_GPIO_Init+0x304>)
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006458 <HAL_GPIO_Init+0x304>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	43db      	mvns	r3, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	4013      	ands	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063c4:	4a24      	ldr	r2, [pc, #144]	@ (8006458 <HAL_GPIO_Init+0x304>)
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063ca:	4b23      	ldr	r3, [pc, #140]	@ (8006458 <HAL_GPIO_Init+0x304>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	43db      	mvns	r3, r3
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	4013      	ands	r3, r2
 80063d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006458 <HAL_GPIO_Init+0x304>)
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063f4:	4b18      	ldr	r3, [pc, #96]	@ (8006458 <HAL_GPIO_Init+0x304>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	43db      	mvns	r3, r3
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	4013      	ands	r3, r2
 8006402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006418:	4a0f      	ldr	r2, [pc, #60]	@ (8006458 <HAL_GPIO_Init+0x304>)
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	3301      	adds	r3, #1
 8006422:	61fb      	str	r3, [r7, #28]
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	2b0f      	cmp	r3, #15
 8006428:	f67f aea2 	bls.w	8006170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800642c:	bf00      	nop
 800642e:	bf00      	nop
 8006430:	3724      	adds	r7, #36	@ 0x24
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40023800 	.word	0x40023800
 8006440:	40013800 	.word	0x40013800
 8006444:	40020000 	.word	0x40020000
 8006448:	40020400 	.word	0x40020400
 800644c:	40020800 	.word	0x40020800
 8006450:	40020c00 	.word	0x40020c00
 8006454:	40021000 	.word	0x40021000
 8006458:	40013c00 	.word	0x40013c00

0800645c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	460b      	mov	r3, r1
 8006466:	807b      	strh	r3, [r7, #2]
 8006468:	4613      	mov	r3, r2
 800646a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800646c:	787b      	ldrb	r3, [r7, #1]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006472:	887a      	ldrh	r2, [r7, #2]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006478:	e003      	b.n	8006482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800647a:	887b      	ldrh	r3, [r7, #2]
 800647c:	041a      	lsls	r2, r3, #16
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	619a      	str	r2, [r3, #24]
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e12b      	b.n	80066fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7fd fd72 	bl	8003fa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2224      	movs	r2, #36	@ 0x24
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 0201 	bic.w	r2, r2, #1
 80064d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80064f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80064f4:	f001 fc20 	bl	8007d38 <HAL_RCC_GetPCLK1Freq>
 80064f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	4a81      	ldr	r2, [pc, #516]	@ (8006704 <HAL_I2C_Init+0x274>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d807      	bhi.n	8006514 <HAL_I2C_Init+0x84>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4a80      	ldr	r2, [pc, #512]	@ (8006708 <HAL_I2C_Init+0x278>)
 8006508:	4293      	cmp	r3, r2
 800650a:	bf94      	ite	ls
 800650c:	2301      	movls	r3, #1
 800650e:	2300      	movhi	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	e006      	b.n	8006522 <HAL_I2C_Init+0x92>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4a7d      	ldr	r2, [pc, #500]	@ (800670c <HAL_I2C_Init+0x27c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	bf94      	ite	ls
 800651c:	2301      	movls	r3, #1
 800651e:	2300      	movhi	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e0e7      	b.n	80066fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4a78      	ldr	r2, [pc, #480]	@ (8006710 <HAL_I2C_Init+0x280>)
 800652e:	fba2 2303 	umull	r2, r3, r2, r3
 8006532:	0c9b      	lsrs	r3, r3, #18
 8006534:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	430a      	orrs	r2, r1
 8006548:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	4a6a      	ldr	r2, [pc, #424]	@ (8006704 <HAL_I2C_Init+0x274>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d802      	bhi.n	8006564 <HAL_I2C_Init+0xd4>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	3301      	adds	r3, #1
 8006562:	e009      	b.n	8006578 <HAL_I2C_Init+0xe8>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800656a:	fb02 f303 	mul.w	r3, r2, r3
 800656e:	4a69      	ldr	r2, [pc, #420]	@ (8006714 <HAL_I2C_Init+0x284>)
 8006570:	fba2 2303 	umull	r2, r3, r2, r3
 8006574:	099b      	lsrs	r3, r3, #6
 8006576:	3301      	adds	r3, #1
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6812      	ldr	r2, [r2, #0]
 800657c:	430b      	orrs	r3, r1
 800657e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800658a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	495c      	ldr	r1, [pc, #368]	@ (8006704 <HAL_I2C_Init+0x274>)
 8006594:	428b      	cmp	r3, r1
 8006596:	d819      	bhi.n	80065cc <HAL_I2C_Init+0x13c>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	1e59      	subs	r1, r3, #1
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80065a6:	1c59      	adds	r1, r3, #1
 80065a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80065ac:	400b      	ands	r3, r1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00a      	beq.n	80065c8 <HAL_I2C_Init+0x138>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	1e59      	subs	r1, r3, #1
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80065c0:	3301      	adds	r3, #1
 80065c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065c6:	e051      	b.n	800666c <HAL_I2C_Init+0x1dc>
 80065c8:	2304      	movs	r3, #4
 80065ca:	e04f      	b.n	800666c <HAL_I2C_Init+0x1dc>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d111      	bne.n	80065f8 <HAL_I2C_Init+0x168>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	1e58      	subs	r0, r3, #1
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6859      	ldr	r1, [r3, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	440b      	add	r3, r1
 80065e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065e6:	3301      	adds	r3, #1
 80065e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	bf0c      	ite	eq
 80065f0:	2301      	moveq	r3, #1
 80065f2:	2300      	movne	r3, #0
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	e012      	b.n	800661e <HAL_I2C_Init+0x18e>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	1e58      	subs	r0, r3, #1
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6859      	ldr	r1, [r3, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	0099      	lsls	r1, r3, #2
 8006608:	440b      	add	r3, r1
 800660a:	fbb0 f3f3 	udiv	r3, r0, r3
 800660e:	3301      	adds	r3, #1
 8006610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006614:	2b00      	cmp	r3, #0
 8006616:	bf0c      	ite	eq
 8006618:	2301      	moveq	r3, #1
 800661a:	2300      	movne	r3, #0
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <HAL_I2C_Init+0x196>
 8006622:	2301      	movs	r3, #1
 8006624:	e022      	b.n	800666c <HAL_I2C_Init+0x1dc>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10e      	bne.n	800664c <HAL_I2C_Init+0x1bc>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1e58      	subs	r0, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6859      	ldr	r1, [r3, #4]
 8006636:	460b      	mov	r3, r1
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	440b      	add	r3, r1
 800663c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006640:	3301      	adds	r3, #1
 8006642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800664a:	e00f      	b.n	800666c <HAL_I2C_Init+0x1dc>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	1e58      	subs	r0, r3, #1
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6859      	ldr	r1, [r3, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	440b      	add	r3, r1
 800665a:	0099      	lsls	r1, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006662:	3301      	adds	r3, #1
 8006664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006668:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	6809      	ldr	r1, [r1, #0]
 8006670:	4313      	orrs	r3, r2
 8006672:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69da      	ldr	r2, [r3, #28]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800669a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6911      	ldr	r1, [r2, #16]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	68d2      	ldr	r2, [r2, #12]
 80066a6:	4311      	orrs	r1, r2
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6812      	ldr	r2, [r2, #0]
 80066ac:	430b      	orrs	r3, r1
 80066ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	695a      	ldr	r2, [r3, #20]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0201 	orr.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	000186a0 	.word	0x000186a0
 8006708:	001e847f 	.word	0x001e847f
 800670c:	003d08ff 	.word	0x003d08ff
 8006710:	431bde83 	.word	0x431bde83
 8006714:	10624dd3 	.word	0x10624dd3

08006718 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af02      	add	r7, sp, #8
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	4608      	mov	r0, r1
 8006722:	4611      	mov	r1, r2
 8006724:	461a      	mov	r2, r3
 8006726:	4603      	mov	r3, r0
 8006728:	817b      	strh	r3, [r7, #10]
 800672a:	460b      	mov	r3, r1
 800672c:	813b      	strh	r3, [r7, #8]
 800672e:	4613      	mov	r3, r2
 8006730:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006732:	f7fe fb7f 	bl	8004e34 <HAL_GetTick>
 8006736:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b20      	cmp	r3, #32
 8006742:	f040 80d9 	bne.w	80068f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	2319      	movs	r3, #25
 800674c:	2201      	movs	r2, #1
 800674e:	496d      	ldr	r1, [pc, #436]	@ (8006904 <HAL_I2C_Mem_Write+0x1ec>)
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 fc8b 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800675c:	2302      	movs	r3, #2
 800675e:	e0cc      	b.n	80068fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_I2C_Mem_Write+0x56>
 800676a:	2302      	movs	r3, #2
 800676c:	e0c5      	b.n	80068fa <HAL_I2C_Mem_Write+0x1e2>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b01      	cmp	r3, #1
 8006782:	d007      	beq.n	8006794 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0201 	orr.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2221      	movs	r2, #33	@ 0x21
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2240      	movs	r2, #64	@ 0x40
 80067b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a3a      	ldr	r2, [r7, #32]
 80067be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80067c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4a4d      	ldr	r2, [pc, #308]	@ (8006908 <HAL_I2C_Mem_Write+0x1f0>)
 80067d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067d6:	88f8      	ldrh	r0, [r7, #6]
 80067d8:	893a      	ldrh	r2, [r7, #8]
 80067da:	8979      	ldrh	r1, [r7, #10]
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	4603      	mov	r3, r0
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 fac2 	bl	8006d70 <I2C_RequestMemoryWrite>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d052      	beq.n	8006898 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e081      	b.n	80068fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 fd50 	bl	80072a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00d      	beq.n	8006822 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680a:	2b04      	cmp	r3, #4
 800680c:	d107      	bne.n	800681e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800681c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e06b      	b.n	80068fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006826:	781a      	ldrb	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b01      	subs	r3, #1
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b04      	cmp	r3, #4
 800685e:	d11b      	bne.n	8006898 <HAL_I2C_Mem_Write+0x180>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006864:	2b00      	cmp	r3, #0
 8006866:	d017      	beq.n	8006898 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686c:	781a      	ldrb	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006882:	3b01      	subs	r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800688e:	b29b      	uxth	r3, r3
 8006890:	3b01      	subs	r3, #1
 8006892:	b29a      	uxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1aa      	bne.n	80067f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 fd43 	bl	8007330 <I2C_WaitOnBTFFlagUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00d      	beq.n	80068cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d107      	bne.n	80068c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e016      	b.n	80068fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	e000      	b.n	80068fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80068f8:	2302      	movs	r3, #2
  }
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	00100002 	.word	0x00100002
 8006908:	ffff0000 	.word	0xffff0000

0800690c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08c      	sub	sp, #48	@ 0x30
 8006910:	af02      	add	r7, sp, #8
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	4608      	mov	r0, r1
 8006916:	4611      	mov	r1, r2
 8006918:	461a      	mov	r2, r3
 800691a:	4603      	mov	r3, r0
 800691c:	817b      	strh	r3, [r7, #10]
 800691e:	460b      	mov	r3, r1
 8006920:	813b      	strh	r3, [r7, #8]
 8006922:	4613      	mov	r3, r2
 8006924:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006926:	f7fe fa85 	bl	8004e34 <HAL_GetTick>
 800692a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b20      	cmp	r3, #32
 8006936:	f040 8214 	bne.w	8006d62 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	2319      	movs	r3, #25
 8006940:	2201      	movs	r2, #1
 8006942:	497b      	ldr	r1, [pc, #492]	@ (8006b30 <HAL_I2C_Mem_Read+0x224>)
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 fb91 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006950:	2302      	movs	r3, #2
 8006952:	e207      	b.n	8006d64 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <HAL_I2C_Mem_Read+0x56>
 800695e:	2302      	movs	r3, #2
 8006960:	e200      	b.n	8006d64 <HAL_I2C_Mem_Read+0x458>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b01      	cmp	r3, #1
 8006976:	d007      	beq.n	8006988 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006996:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2222      	movs	r2, #34	@ 0x22
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2240      	movs	r2, #64	@ 0x40
 80069a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80069b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4a5b      	ldr	r2, [pc, #364]	@ (8006b34 <HAL_I2C_Mem_Read+0x228>)
 80069c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069ca:	88f8      	ldrh	r0, [r7, #6]
 80069cc:	893a      	ldrh	r2, [r7, #8]
 80069ce:	8979      	ldrh	r1, [r7, #10]
 80069d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d2:	9301      	str	r3, [sp, #4]
 80069d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	4603      	mov	r3, r0
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 fa5e 	bl	8006e9c <I2C_RequestMemoryRead>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e1bc      	b.n	8006d64 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d113      	bne.n	8006a1a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069f2:	2300      	movs	r3, #0
 80069f4:	623b      	str	r3, [r7, #32]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	623b      	str	r3, [r7, #32]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	623b      	str	r3, [r7, #32]
 8006a06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	e190      	b.n	8006d3c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d11b      	bne.n	8006a5a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a32:	2300      	movs	r3, #0
 8006a34:	61fb      	str	r3, [r7, #28]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	e170      	b.n	8006d3c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d11b      	bne.n	8006a9a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a82:	2300      	movs	r3, #0
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	61bb      	str	r3, [r7, #24]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	e150      	b.n	8006d3c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ab0:	e144      	b.n	8006d3c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	f200 80f1 	bhi.w	8006c9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d123      	bne.n	8006b0c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ac6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 fc79 	bl	80073c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d001      	beq.n	8006ad8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e145      	b.n	8006d64 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691a      	ldr	r2, [r3, #16]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006b0a:	e117      	b.n	8006d3c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d14e      	bne.n	8006bb2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	4906      	ldr	r1, [pc, #24]	@ (8006b38 <HAL_I2C_Mem_Read+0x22c>)
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 faa4 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d008      	beq.n	8006b3c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e11a      	b.n	8006d64 <HAL_I2C_Mem_Read+0x458>
 8006b2e:	bf00      	nop
 8006b30:	00100002 	.word	0x00100002
 8006b34:	ffff0000 	.word	0xffff0000
 8006b38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691a      	ldr	r2, [r3, #16]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	691a      	ldr	r2, [r3, #16]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006bb0:	e0c4      	b.n	8006d3c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb8:	2200      	movs	r2, #0
 8006bba:	496c      	ldr	r1, [pc, #432]	@ (8006d6c <HAL_I2C_Mem_Read+0x460>)
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fa55 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0cb      	b.n	8006d64 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691a      	ldr	r2, [r3, #16]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c14:	2200      	movs	r2, #0
 8006c16:	4955      	ldr	r1, [pc, #340]	@ (8006d6c <HAL_I2C_Mem_Read+0x460>)
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fa27 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e09d      	b.n	8006d64 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	691a      	ldr	r2, [r3, #16]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	3b01      	subs	r3, #1
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c9c:	e04e      	b.n	8006d3c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ca0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fb8c 	bl	80073c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e058      	b.n	8006d64 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	691a      	ldr	r2, [r3, #16]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbc:	b2d2      	uxtb	r2, r2
 8006cbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	f003 0304 	and.w	r3, r3, #4
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	d124      	bne.n	8006d3c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d107      	bne.n	8006d0a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d08:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	691a      	ldr	r2, [r3, #16]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d14:	b2d2      	uxtb	r2, r2
 8006d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d26:	3b01      	subs	r3, #1
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	3b01      	subs	r3, #1
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f47f aeb6 	bne.w	8006ab2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e000      	b.n	8006d64 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006d62:	2302      	movs	r3, #2
  }
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3728      	adds	r7, #40	@ 0x28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	00010004 	.word	0x00010004

08006d70 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af02      	add	r7, sp, #8
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	4608      	mov	r0, r1
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	4603      	mov	r3, r0
 8006d80:	817b      	strh	r3, [r7, #10]
 8006d82:	460b      	mov	r3, r1
 8006d84:	813b      	strh	r3, [r7, #8]
 8006d86:	4613      	mov	r3, r2
 8006d88:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f960 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00d      	beq.n	8006dce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dc0:	d103      	bne.n	8006dca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e05f      	b.n	8006e8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006dce:	897b      	ldrh	r3, [r7, #10]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ddc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de0:	6a3a      	ldr	r2, [r7, #32]
 8006de2:	492d      	ldr	r1, [pc, #180]	@ (8006e98 <I2C_RequestMemoryWrite+0x128>)
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 f9bb 	bl	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e04c      	b.n	8006e8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006df4:	2300      	movs	r3, #0
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e0c:	6a39      	ldr	r1, [r7, #32]
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 fa46 	bl	80072a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00d      	beq.n	8006e36 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d107      	bne.n	8006e32 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e02b      	b.n	8006e8e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e36:	88fb      	ldrh	r3, [r7, #6]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d105      	bne.n	8006e48 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e3c:	893b      	ldrh	r3, [r7, #8]
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	611a      	str	r2, [r3, #16]
 8006e46:	e021      	b.n	8006e8c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e48:	893b      	ldrh	r3, [r7, #8]
 8006e4a:	0a1b      	lsrs	r3, r3, #8
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e58:	6a39      	ldr	r1, [r7, #32]
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 fa20 	bl	80072a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00d      	beq.n	8006e82 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d107      	bne.n	8006e7e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e005      	b.n	8006e8e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e82:	893b      	ldrh	r3, [r7, #8]
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	00010002 	.word	0x00010002

08006e9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4603      	mov	r3, r0
 8006eac:	817b      	strh	r3, [r7, #10]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	813b      	strh	r3, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ec4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ed4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 f8c2 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00d      	beq.n	8006f0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006efc:	d103      	bne.n	8006f06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e0aa      	b.n	8007060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f0a:	897b      	ldrh	r3, [r7, #10]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	6a3a      	ldr	r2, [r7, #32]
 8006f1e:	4952      	ldr	r1, [pc, #328]	@ (8007068 <I2C_RequestMemoryRead+0x1cc>)
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f91d 	bl	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e097      	b.n	8007060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	617b      	str	r3, [r7, #20]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f48:	6a39      	ldr	r1, [r7, #32]
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 f9a8 	bl	80072a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00d      	beq.n	8006f72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d107      	bne.n	8006f6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e076      	b.n	8007060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d105      	bne.n	8006f84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f78:	893b      	ldrh	r3, [r7, #8]
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	611a      	str	r2, [r3, #16]
 8006f82:	e021      	b.n	8006fc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f84:	893b      	ldrh	r3, [r7, #8]
 8006f86:	0a1b      	lsrs	r3, r3, #8
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f94:	6a39      	ldr	r1, [r7, #32]
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f000 f982 	bl	80072a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00d      	beq.n	8006fbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d107      	bne.n	8006fba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e050      	b.n	8007060 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fbe:	893b      	ldrh	r3, [r7, #8]
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fca:	6a39      	ldr	r1, [r7, #32]
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 f967 	bl	80072a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00d      	beq.n	8006ff4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d107      	bne.n	8006ff0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e035      	b.n	8007060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007002:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	2200      	movs	r2, #0
 800700c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 f82b 	bl	800706c <I2C_WaitOnFlagUntilTimeout>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00d      	beq.n	8007038 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800702a:	d103      	bne.n	8007034 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007032:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e013      	b.n	8007060 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007038:	897b      	ldrh	r3, [r7, #10]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	f043 0301 	orr.w	r3, r3, #1
 8007040:	b2da      	uxtb	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704a:	6a3a      	ldr	r2, [r7, #32]
 800704c:	4906      	ldr	r1, [pc, #24]	@ (8007068 <I2C_RequestMemoryRead+0x1cc>)
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 f886 	bl	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3718      	adds	r7, #24
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	00010002 	.word	0x00010002

0800706c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	4613      	mov	r3, r2
 800707a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800707c:	e048      	b.n	8007110 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007084:	d044      	beq.n	8007110 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007086:	f7fd fed5 	bl	8004e34 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d302      	bcc.n	800709c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d139      	bne.n	8007110 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	0c1b      	lsrs	r3, r3, #16
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d10d      	bne.n	80070c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	43da      	mvns	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	4013      	ands	r3, r2
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bf0c      	ite	eq
 80070b8:	2301      	moveq	r3, #1
 80070ba:	2300      	movne	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	461a      	mov	r2, r3
 80070c0:	e00c      	b.n	80070dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	43da      	mvns	r2, r3
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	4013      	ands	r3, r2
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bf0c      	ite	eq
 80070d4:	2301      	moveq	r3, #1
 80070d6:	2300      	movne	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	461a      	mov	r2, r3
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d116      	bne.n	8007110 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fc:	f043 0220 	orr.w	r2, r3, #32
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e023      	b.n	8007158 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	0c1b      	lsrs	r3, r3, #16
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b01      	cmp	r3, #1
 8007118:	d10d      	bne.n	8007136 <I2C_WaitOnFlagUntilTimeout+0xca>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	43da      	mvns	r2, r3
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	4013      	ands	r3, r2
 8007126:	b29b      	uxth	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	bf0c      	ite	eq
 800712c:	2301      	moveq	r3, #1
 800712e:	2300      	movne	r3, #0
 8007130:	b2db      	uxtb	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	e00c      	b.n	8007150 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	43da      	mvns	r2, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4013      	ands	r3, r2
 8007142:	b29b      	uxth	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	bf0c      	ite	eq
 8007148:	2301      	moveq	r3, #1
 800714a:	2300      	movne	r3, #0
 800714c:	b2db      	uxtb	r3, r3
 800714e:	461a      	mov	r2, r3
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	429a      	cmp	r2, r3
 8007154:	d093      	beq.n	800707e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800716e:	e071      	b.n	8007254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800717a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800717e:	d123      	bne.n	80071c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800718e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007198:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b4:	f043 0204 	orr.w	r2, r3, #4
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e067      	b.n	8007298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ce:	d041      	beq.n	8007254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071d0:	f7fd fe30 	bl	8004e34 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d302      	bcc.n	80071e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d136      	bne.n	8007254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	0c1b      	lsrs	r3, r3, #16
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d10c      	bne.n	800720a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	43da      	mvns	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4013      	ands	r3, r2
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bf14      	ite	ne
 8007202:	2301      	movne	r3, #1
 8007204:	2300      	moveq	r3, #0
 8007206:	b2db      	uxtb	r3, r3
 8007208:	e00b      	b.n	8007222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	43da      	mvns	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	4013      	ands	r3, r2
 8007216:	b29b      	uxth	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	bf14      	ite	ne
 800721c:	2301      	movne	r3, #1
 800721e:	2300      	moveq	r3, #0
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d016      	beq.n	8007254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2220      	movs	r2, #32
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007240:	f043 0220 	orr.w	r2, r3, #32
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e021      	b.n	8007298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	0c1b      	lsrs	r3, r3, #16
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b01      	cmp	r3, #1
 800725c:	d10c      	bne.n	8007278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	43da      	mvns	r2, r3
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	4013      	ands	r3, r2
 800726a:	b29b      	uxth	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	bf14      	ite	ne
 8007270:	2301      	movne	r3, #1
 8007272:	2300      	moveq	r3, #0
 8007274:	b2db      	uxtb	r3, r3
 8007276:	e00b      	b.n	8007290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	43da      	mvns	r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	4013      	ands	r3, r2
 8007284:	b29b      	uxth	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	bf14      	ite	ne
 800728a:	2301      	movne	r3, #1
 800728c:	2300      	moveq	r3, #0
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	f47f af6d 	bne.w	8007170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3710      	adds	r7, #16
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072ac:	e034      	b.n	8007318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f8e3 	bl	800747a <I2C_IsAcknowledgeFailed>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e034      	b.n	8007328 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d028      	beq.n	8007318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c6:	f7fd fdb5 	bl	8004e34 <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d302      	bcc.n	80072dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d11d      	bne.n	8007318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e6:	2b80      	cmp	r3, #128	@ 0x80
 80072e8:	d016      	beq.n	8007318 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007304:	f043 0220 	orr.w	r2, r3, #32
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e007      	b.n	8007328 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007322:	2b80      	cmp	r3, #128	@ 0x80
 8007324:	d1c3      	bne.n	80072ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800733c:	e034      	b.n	80073a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 f89b 	bl	800747a <I2C_IsAcknowledgeFailed>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e034      	b.n	80073b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007354:	d028      	beq.n	80073a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007356:	f7fd fd6d 	bl	8004e34 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	429a      	cmp	r2, r3
 8007364:	d302      	bcc.n	800736c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d11d      	bne.n	80073a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	f003 0304 	and.w	r3, r3, #4
 8007376:	2b04      	cmp	r3, #4
 8007378:	d016      	beq.n	80073a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007394:	f043 0220 	orr.w	r2, r3, #32
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e007      	b.n	80073b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d1c3      	bne.n	800733e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073cc:	e049      	b.n	8007462 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	f003 0310 	and.w	r3, r3, #16
 80073d8:	2b10      	cmp	r3, #16
 80073da:	d119      	bne.n	8007410 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f06f 0210 	mvn.w	r2, #16
 80073e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e030      	b.n	8007472 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007410:	f7fd fd10 	bl	8004e34 <HAL_GetTick>
 8007414:	4602      	mov	r2, r0
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	429a      	cmp	r2, r3
 800741e:	d302      	bcc.n	8007426 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d11d      	bne.n	8007462 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007430:	2b40      	cmp	r3, #64	@ 0x40
 8007432:	d016      	beq.n	8007462 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2220      	movs	r2, #32
 800743e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800744e:	f043 0220 	orr.w	r2, r3, #32
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e007      	b.n	8007472 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800746c:	2b40      	cmp	r3, #64	@ 0x40
 800746e:	d1ae      	bne.n	80073ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800747a:	b480      	push	{r7}
 800747c:	b083      	sub	sp, #12
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800748c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007490:	d11b      	bne.n	80074ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800749a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b6:	f043 0204 	orr.w	r2, r3, #4
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e267      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d075      	beq.n	80075e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80074f6:	4b88      	ldr	r3, [pc, #544]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f003 030c 	and.w	r3, r3, #12
 80074fe:	2b04      	cmp	r3, #4
 8007500:	d00c      	beq.n	800751c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007502:	4b85      	ldr	r3, [pc, #532]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800750a:	2b08      	cmp	r3, #8
 800750c:	d112      	bne.n	8007534 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800750e:	4b82      	ldr	r3, [pc, #520]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007516:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800751a:	d10b      	bne.n	8007534 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800751c:	4b7e      	ldr	r3, [pc, #504]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d05b      	beq.n	80075e0 <HAL_RCC_OscConfig+0x108>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d157      	bne.n	80075e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e242      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800753c:	d106      	bne.n	800754c <HAL_RCC_OscConfig+0x74>
 800753e:	4b76      	ldr	r3, [pc, #472]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a75      	ldr	r2, [pc, #468]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	e01d      	b.n	8007588 <HAL_RCC_OscConfig+0xb0>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007554:	d10c      	bne.n	8007570 <HAL_RCC_OscConfig+0x98>
 8007556:	4b70      	ldr	r3, [pc, #448]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a6f      	ldr	r2, [pc, #444]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 800755c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007560:	6013      	str	r3, [r2, #0]
 8007562:	4b6d      	ldr	r3, [pc, #436]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a6c      	ldr	r2, [pc, #432]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	e00b      	b.n	8007588 <HAL_RCC_OscConfig+0xb0>
 8007570:	4b69      	ldr	r3, [pc, #420]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a68      	ldr	r2, [pc, #416]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	4b66      	ldr	r3, [pc, #408]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a65      	ldr	r2, [pc, #404]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d013      	beq.n	80075b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007590:	f7fd fc50 	bl	8004e34 <HAL_GetTick>
 8007594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007596:	e008      	b.n	80075aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007598:	f7fd fc4c 	bl	8004e34 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b64      	cmp	r3, #100	@ 0x64
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e207      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075aa:	4b5b      	ldr	r3, [pc, #364]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d0f0      	beq.n	8007598 <HAL_RCC_OscConfig+0xc0>
 80075b6:	e014      	b.n	80075e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075b8:	f7fd fc3c 	bl	8004e34 <HAL_GetTick>
 80075bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075be:	e008      	b.n	80075d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075c0:	f7fd fc38 	bl	8004e34 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b64      	cmp	r3, #100	@ 0x64
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e1f3      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075d2:	4b51      	ldr	r3, [pc, #324]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f0      	bne.n	80075c0 <HAL_RCC_OscConfig+0xe8>
 80075de:	e000      	b.n	80075e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d063      	beq.n	80076b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80075ee:	4b4a      	ldr	r3, [pc, #296]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f003 030c 	and.w	r3, r3, #12
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00b      	beq.n	8007612 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075fa:	4b47      	ldr	r3, [pc, #284]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007602:	2b08      	cmp	r3, #8
 8007604:	d11c      	bne.n	8007640 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007606:	4b44      	ldr	r3, [pc, #272]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d116      	bne.n	8007640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007612:	4b41      	ldr	r3, [pc, #260]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0302 	and.w	r3, r3, #2
 800761a:	2b00      	cmp	r3, #0
 800761c:	d005      	beq.n	800762a <HAL_RCC_OscConfig+0x152>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d001      	beq.n	800762a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e1c7      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800762a:	4b3b      	ldr	r3, [pc, #236]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	4937      	ldr	r1, [pc, #220]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 800763a:	4313      	orrs	r3, r2
 800763c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800763e:	e03a      	b.n	80076b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d020      	beq.n	800768a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007648:	4b34      	ldr	r3, [pc, #208]	@ (800771c <HAL_RCC_OscConfig+0x244>)
 800764a:	2201      	movs	r2, #1
 800764c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764e:	f7fd fbf1 	bl	8004e34 <HAL_GetTick>
 8007652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007654:	e008      	b.n	8007668 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007656:	f7fd fbed 	bl	8004e34 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d901      	bls.n	8007668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e1a8      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007668:	4b2b      	ldr	r3, [pc, #172]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0302 	and.w	r3, r3, #2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0f0      	beq.n	8007656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007674:	4b28      	ldr	r3, [pc, #160]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	4925      	ldr	r1, [pc, #148]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 8007684:	4313      	orrs	r3, r2
 8007686:	600b      	str	r3, [r1, #0]
 8007688:	e015      	b.n	80076b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800768a:	4b24      	ldr	r3, [pc, #144]	@ (800771c <HAL_RCC_OscConfig+0x244>)
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007690:	f7fd fbd0 	bl	8004e34 <HAL_GetTick>
 8007694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007696:	e008      	b.n	80076aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007698:	f7fd fbcc 	bl	8004e34 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d901      	bls.n	80076aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e187      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1f0      	bne.n	8007698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0308 	and.w	r3, r3, #8
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d036      	beq.n	8007730 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d016      	beq.n	80076f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076ca:	4b15      	ldr	r3, [pc, #84]	@ (8007720 <HAL_RCC_OscConfig+0x248>)
 80076cc:	2201      	movs	r2, #1
 80076ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d0:	f7fd fbb0 	bl	8004e34 <HAL_GetTick>
 80076d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076d6:	e008      	b.n	80076ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076d8:	f7fd fbac 	bl	8004e34 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e167      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007718 <HAL_RCC_OscConfig+0x240>)
 80076ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0f0      	beq.n	80076d8 <HAL_RCC_OscConfig+0x200>
 80076f6:	e01b      	b.n	8007730 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076f8:	4b09      	ldr	r3, [pc, #36]	@ (8007720 <HAL_RCC_OscConfig+0x248>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076fe:	f7fd fb99 	bl	8004e34 <HAL_GetTick>
 8007702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007704:	e00e      	b.n	8007724 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007706:	f7fd fb95 	bl	8004e34 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	2b02      	cmp	r3, #2
 8007712:	d907      	bls.n	8007724 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e150      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
 8007718:	40023800 	.word	0x40023800
 800771c:	42470000 	.word	0x42470000
 8007720:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007724:	4b88      	ldr	r3, [pc, #544]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007728:	f003 0302 	and.w	r3, r3, #2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1ea      	bne.n	8007706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 8097 	beq.w	800786c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800773e:	2300      	movs	r3, #0
 8007740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007742:	4b81      	ldr	r3, [pc, #516]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10f      	bne.n	800776e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800774e:	2300      	movs	r3, #0
 8007750:	60bb      	str	r3, [r7, #8]
 8007752:	4b7d      	ldr	r3, [pc, #500]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007756:	4a7c      	ldr	r2, [pc, #496]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800775c:	6413      	str	r3, [r2, #64]	@ 0x40
 800775e:	4b7a      	ldr	r3, [pc, #488]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007766:	60bb      	str	r3, [r7, #8]
 8007768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800776a:	2301      	movs	r3, #1
 800776c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800776e:	4b77      	ldr	r3, [pc, #476]	@ (800794c <HAL_RCC_OscConfig+0x474>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007776:	2b00      	cmp	r3, #0
 8007778:	d118      	bne.n	80077ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800777a:	4b74      	ldr	r3, [pc, #464]	@ (800794c <HAL_RCC_OscConfig+0x474>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a73      	ldr	r2, [pc, #460]	@ (800794c <HAL_RCC_OscConfig+0x474>)
 8007780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007786:	f7fd fb55 	bl	8004e34 <HAL_GetTick>
 800778a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800778c:	e008      	b.n	80077a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800778e:	f7fd fb51 	bl	8004e34 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e10c      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077a0:	4b6a      	ldr	r3, [pc, #424]	@ (800794c <HAL_RCC_OscConfig+0x474>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d0f0      	beq.n	800778e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d106      	bne.n	80077c2 <HAL_RCC_OscConfig+0x2ea>
 80077b4:	4b64      	ldr	r3, [pc, #400]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077b8:	4a63      	ldr	r2, [pc, #396]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	6713      	str	r3, [r2, #112]	@ 0x70
 80077c0:	e01c      	b.n	80077fc <HAL_RCC_OscConfig+0x324>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	2b05      	cmp	r3, #5
 80077c8:	d10c      	bne.n	80077e4 <HAL_RCC_OscConfig+0x30c>
 80077ca:	4b5f      	ldr	r3, [pc, #380]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ce:	4a5e      	ldr	r2, [pc, #376]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077d0:	f043 0304 	orr.w	r3, r3, #4
 80077d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80077d6:	4b5c      	ldr	r3, [pc, #368]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077da:	4a5b      	ldr	r2, [pc, #364]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077dc:	f043 0301 	orr.w	r3, r3, #1
 80077e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80077e2:	e00b      	b.n	80077fc <HAL_RCC_OscConfig+0x324>
 80077e4:	4b58      	ldr	r3, [pc, #352]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e8:	4a57      	ldr	r2, [pc, #348]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077ea:	f023 0301 	bic.w	r3, r3, #1
 80077ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80077f0:	4b55      	ldr	r3, [pc, #340]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077f4:	4a54      	ldr	r2, [pc, #336]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80077f6:	f023 0304 	bic.w	r3, r3, #4
 80077fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d015      	beq.n	8007830 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007804:	f7fd fb16 	bl	8004e34 <HAL_GetTick>
 8007808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800780a:	e00a      	b.n	8007822 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800780c:	f7fd fb12 	bl	8004e34 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800781a:	4293      	cmp	r3, r2
 800781c:	d901      	bls.n	8007822 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e0cb      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007822:	4b49      	ldr	r3, [pc, #292]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0ee      	beq.n	800780c <HAL_RCC_OscConfig+0x334>
 800782e:	e014      	b.n	800785a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007830:	f7fd fb00 	bl	8004e34 <HAL_GetTick>
 8007834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007836:	e00a      	b.n	800784e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007838:	f7fd fafc 	bl	8004e34 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007846:	4293      	cmp	r3, r2
 8007848:	d901      	bls.n	800784e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e0b5      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800784e:	4b3e      	ldr	r3, [pc, #248]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1ee      	bne.n	8007838 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d105      	bne.n	800786c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007860:	4b39      	ldr	r3, [pc, #228]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007864:	4a38      	ldr	r2, [pc, #224]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800786a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80a1 	beq.w	80079b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007876:	4b34      	ldr	r3, [pc, #208]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f003 030c 	and.w	r3, r3, #12
 800787e:	2b08      	cmp	r3, #8
 8007880:	d05c      	beq.n	800793c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d141      	bne.n	800790e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800788a:	4b31      	ldr	r3, [pc, #196]	@ (8007950 <HAL_RCC_OscConfig+0x478>)
 800788c:	2200      	movs	r2, #0
 800788e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007890:	f7fd fad0 	bl	8004e34 <HAL_GetTick>
 8007894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007896:	e008      	b.n	80078aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007898:	f7fd facc 	bl	8004e34 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e087      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078aa:	4b27      	ldr	r3, [pc, #156]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1f0      	bne.n	8007898 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	69da      	ldr	r2, [r3, #28]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	431a      	orrs	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c4:	019b      	lsls	r3, r3, #6
 80078c6:	431a      	orrs	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078cc:	085b      	lsrs	r3, r3, #1
 80078ce:	3b01      	subs	r3, #1
 80078d0:	041b      	lsls	r3, r3, #16
 80078d2:	431a      	orrs	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d8:	061b      	lsls	r3, r3, #24
 80078da:	491b      	ldr	r1, [pc, #108]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007950 <HAL_RCC_OscConfig+0x478>)
 80078e2:	2201      	movs	r2, #1
 80078e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078e6:	f7fd faa5 	bl	8004e34 <HAL_GetTick>
 80078ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078ec:	e008      	b.n	8007900 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078ee:	f7fd faa1 	bl	8004e34 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d901      	bls.n	8007900 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e05c      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007900:	4b11      	ldr	r3, [pc, #68]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d0f0      	beq.n	80078ee <HAL_RCC_OscConfig+0x416>
 800790c:	e054      	b.n	80079b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800790e:	4b10      	ldr	r3, [pc, #64]	@ (8007950 <HAL_RCC_OscConfig+0x478>)
 8007910:	2200      	movs	r2, #0
 8007912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007914:	f7fd fa8e 	bl	8004e34 <HAL_GetTick>
 8007918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800791a:	e008      	b.n	800792e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800791c:	f7fd fa8a 	bl	8004e34 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	2b02      	cmp	r3, #2
 8007928:	d901      	bls.n	800792e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e045      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800792e:	4b06      	ldr	r3, [pc, #24]	@ (8007948 <HAL_RCC_OscConfig+0x470>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1f0      	bne.n	800791c <HAL_RCC_OscConfig+0x444>
 800793a:	e03d      	b.n	80079b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d107      	bne.n	8007954 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e038      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
 8007948:	40023800 	.word	0x40023800
 800794c:	40007000 	.word	0x40007000
 8007950:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007954:	4b1b      	ldr	r3, [pc, #108]	@ (80079c4 <HAL_RCC_OscConfig+0x4ec>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d028      	beq.n	80079b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800796c:	429a      	cmp	r2, r3
 800796e:	d121      	bne.n	80079b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800797a:	429a      	cmp	r2, r3
 800797c:	d11a      	bne.n	80079b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007984:	4013      	ands	r3, r2
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800798a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800798c:	4293      	cmp	r3, r2
 800798e:	d111      	bne.n	80079b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799a:	085b      	lsrs	r3, r3, #1
 800799c:	3b01      	subs	r3, #1
 800799e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d107      	bne.n	80079b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d001      	beq.n	80079b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e000      	b.n	80079ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3718      	adds	r7, #24
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	40023800 	.word	0x40023800

080079c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e0cc      	b.n	8007b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079dc:	4b68      	ldr	r3, [pc, #416]	@ (8007b80 <HAL_RCC_ClockConfig+0x1b8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0307 	and.w	r3, r3, #7
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d90c      	bls.n	8007a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ea:	4b65      	ldr	r3, [pc, #404]	@ (8007b80 <HAL_RCC_ClockConfig+0x1b8>)
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	b2d2      	uxtb	r2, r2
 80079f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079f2:	4b63      	ldr	r3, [pc, #396]	@ (8007b80 <HAL_RCC_ClockConfig+0x1b8>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d001      	beq.n	8007a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e0b8      	b.n	8007b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d020      	beq.n	8007a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d005      	beq.n	8007a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a1c:	4b59      	ldr	r3, [pc, #356]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	4a58      	ldr	r2, [pc, #352]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007a26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0308 	and.w	r3, r3, #8
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a34:	4b53      	ldr	r3, [pc, #332]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	4a52      	ldr	r2, [pc, #328]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a40:	4b50      	ldr	r3, [pc, #320]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	494d      	ldr	r1, [pc, #308]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d044      	beq.n	8007ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d107      	bne.n	8007a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a66:	4b47      	ldr	r3, [pc, #284]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d119      	bne.n	8007aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e07f      	b.n	8007b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d003      	beq.n	8007a86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d107      	bne.n	8007a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a86:	4b3f      	ldr	r3, [pc, #252]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d109      	bne.n	8007aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e06f      	b.n	8007b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a96:	4b3b      	ldr	r3, [pc, #236]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e067      	b.n	8007b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007aa6:	4b37      	ldr	r3, [pc, #220]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f023 0203 	bic.w	r2, r3, #3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	4934      	ldr	r1, [pc, #208]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ab8:	f7fd f9bc 	bl	8004e34 <HAL_GetTick>
 8007abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007abe:	e00a      	b.n	8007ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ac0:	f7fd f9b8 	bl	8004e34 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e04f      	b.n	8007b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f003 020c 	and.w	r2, r3, #12
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d1eb      	bne.n	8007ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ae8:	4b25      	ldr	r3, [pc, #148]	@ (8007b80 <HAL_RCC_ClockConfig+0x1b8>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d20c      	bcs.n	8007b10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007af6:	4b22      	ldr	r3, [pc, #136]	@ (8007b80 <HAL_RCC_ClockConfig+0x1b8>)
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	b2d2      	uxtb	r2, r2
 8007afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007afe:	4b20      	ldr	r3, [pc, #128]	@ (8007b80 <HAL_RCC_ClockConfig+0x1b8>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0307 	and.w	r3, r3, #7
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d001      	beq.n	8007b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e032      	b.n	8007b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d008      	beq.n	8007b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b1c:	4b19      	ldr	r3, [pc, #100]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	4916      	ldr	r1, [pc, #88]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0308 	and.w	r3, r3, #8
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d009      	beq.n	8007b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b3a:	4b12      	ldr	r3, [pc, #72]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	490e      	ldr	r1, [pc, #56]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b4e:	f000 f821 	bl	8007b94 <HAL_RCC_GetSysClockFreq>
 8007b52:	4602      	mov	r2, r0
 8007b54:	4b0b      	ldr	r3, [pc, #44]	@ (8007b84 <HAL_RCC_ClockConfig+0x1bc>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	091b      	lsrs	r3, r3, #4
 8007b5a:	f003 030f 	and.w	r3, r3, #15
 8007b5e:	490a      	ldr	r1, [pc, #40]	@ (8007b88 <HAL_RCC_ClockConfig+0x1c0>)
 8007b60:	5ccb      	ldrb	r3, [r1, r3]
 8007b62:	fa22 f303 	lsr.w	r3, r2, r3
 8007b66:	4a09      	ldr	r2, [pc, #36]	@ (8007b8c <HAL_RCC_ClockConfig+0x1c4>)
 8007b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007b6a:	4b09      	ldr	r3, [pc, #36]	@ (8007b90 <HAL_RCC_ClockConfig+0x1c8>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fd f91c 	bl	8004dac <HAL_InitTick>

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	40023c00 	.word	0x40023c00
 8007b84:	40023800 	.word	0x40023800
 8007b88:	0800e1e0 	.word	0x0800e1e0
 8007b8c:	200000ac 	.word	0x200000ac
 8007b90:	200000b0 	.word	0x200000b0

08007b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b98:	b090      	sub	sp, #64	@ 0x40
 8007b9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007bac:	4b59      	ldr	r3, [pc, #356]	@ (8007d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f003 030c 	and.w	r3, r3, #12
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d00d      	beq.n	8007bd4 <HAL_RCC_GetSysClockFreq+0x40>
 8007bb8:	2b08      	cmp	r3, #8
 8007bba:	f200 80a1 	bhi.w	8007d00 <HAL_RCC_GetSysClockFreq+0x16c>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <HAL_RCC_GetSysClockFreq+0x34>
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	d003      	beq.n	8007bce <HAL_RCC_GetSysClockFreq+0x3a>
 8007bc6:	e09b      	b.n	8007d00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007bc8:	4b53      	ldr	r3, [pc, #332]	@ (8007d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8007bca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007bcc:	e09b      	b.n	8007d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007bce:	4b53      	ldr	r3, [pc, #332]	@ (8007d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8007bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007bd2:	e098      	b.n	8007d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8007d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bdc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bde:	4b4d      	ldr	r3, [pc, #308]	@ (8007d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d028      	beq.n	8007c3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bea:	4b4a      	ldr	r3, [pc, #296]	@ (8007d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	099b      	lsrs	r3, r3, #6
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	623b      	str	r3, [r7, #32]
 8007bf4:	627a      	str	r2, [r7, #36]	@ 0x24
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	4b47      	ldr	r3, [pc, #284]	@ (8007d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8007c00:	fb03 f201 	mul.w	r2, r3, r1
 8007c04:	2300      	movs	r3, #0
 8007c06:	fb00 f303 	mul.w	r3, r0, r3
 8007c0a:	4413      	add	r3, r2
 8007c0c:	4a43      	ldr	r2, [pc, #268]	@ (8007d1c <HAL_RCC_GetSysClockFreq+0x188>)
 8007c0e:	fba0 1202 	umull	r1, r2, r0, r2
 8007c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c14:	460a      	mov	r2, r1
 8007c16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c1a:	4413      	add	r3, r2
 8007c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c20:	2200      	movs	r2, #0
 8007c22:	61bb      	str	r3, [r7, #24]
 8007c24:	61fa      	str	r2, [r7, #28]
 8007c26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007c2e:	f7f8 ffd7 	bl	8000be0 <__aeabi_uldivmod>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	4613      	mov	r3, r2
 8007c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c3a:	e053      	b.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c3c:	4b35      	ldr	r3, [pc, #212]	@ (8007d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	099b      	lsrs	r3, r3, #6
 8007c42:	2200      	movs	r2, #0
 8007c44:	613b      	str	r3, [r7, #16]
 8007c46:	617a      	str	r2, [r7, #20]
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007c4e:	f04f 0b00 	mov.w	fp, #0
 8007c52:	4652      	mov	r2, sl
 8007c54:	465b      	mov	r3, fp
 8007c56:	f04f 0000 	mov.w	r0, #0
 8007c5a:	f04f 0100 	mov.w	r1, #0
 8007c5e:	0159      	lsls	r1, r3, #5
 8007c60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c64:	0150      	lsls	r0, r2, #5
 8007c66:	4602      	mov	r2, r0
 8007c68:	460b      	mov	r3, r1
 8007c6a:	ebb2 080a 	subs.w	r8, r2, sl
 8007c6e:	eb63 090b 	sbc.w	r9, r3, fp
 8007c72:	f04f 0200 	mov.w	r2, #0
 8007c76:	f04f 0300 	mov.w	r3, #0
 8007c7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007c7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007c82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007c86:	ebb2 0408 	subs.w	r4, r2, r8
 8007c8a:	eb63 0509 	sbc.w	r5, r3, r9
 8007c8e:	f04f 0200 	mov.w	r2, #0
 8007c92:	f04f 0300 	mov.w	r3, #0
 8007c96:	00eb      	lsls	r3, r5, #3
 8007c98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c9c:	00e2      	lsls	r2, r4, #3
 8007c9e:	4614      	mov	r4, r2
 8007ca0:	461d      	mov	r5, r3
 8007ca2:	eb14 030a 	adds.w	r3, r4, sl
 8007ca6:	603b      	str	r3, [r7, #0]
 8007ca8:	eb45 030b 	adc.w	r3, r5, fp
 8007cac:	607b      	str	r3, [r7, #4]
 8007cae:	f04f 0200 	mov.w	r2, #0
 8007cb2:	f04f 0300 	mov.w	r3, #0
 8007cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007cba:	4629      	mov	r1, r5
 8007cbc:	028b      	lsls	r3, r1, #10
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	028a      	lsls	r2, r1, #10
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cce:	2200      	movs	r2, #0
 8007cd0:	60bb      	str	r3, [r7, #8]
 8007cd2:	60fa      	str	r2, [r7, #12]
 8007cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cd8:	f7f8 ff82 	bl	8000be0 <__aeabi_uldivmod>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8007d14 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	0c1b      	lsrs	r3, r3, #16
 8007cea:	f003 0303 	and.w	r3, r3, #3
 8007cee:	3301      	adds	r3, #1
 8007cf0:	005b      	lsls	r3, r3, #1
 8007cf2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007cf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007cfe:	e002      	b.n	8007d06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d00:	4b05      	ldr	r3, [pc, #20]	@ (8007d18 <HAL_RCC_GetSysClockFreq+0x184>)
 8007d02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3740      	adds	r7, #64	@ 0x40
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d12:	bf00      	nop
 8007d14:	40023800 	.word	0x40023800
 8007d18:	00f42400 	.word	0x00f42400
 8007d1c:	017d7840 	.word	0x017d7840

08007d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d24:	4b03      	ldr	r3, [pc, #12]	@ (8007d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d26:	681b      	ldr	r3, [r3, #0]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	200000ac 	.word	0x200000ac

08007d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d3c:	f7ff fff0 	bl	8007d20 <HAL_RCC_GetHCLKFreq>
 8007d40:	4602      	mov	r2, r0
 8007d42:	4b05      	ldr	r3, [pc, #20]	@ (8007d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	0a9b      	lsrs	r3, r3, #10
 8007d48:	f003 0307 	and.w	r3, r3, #7
 8007d4c:	4903      	ldr	r1, [pc, #12]	@ (8007d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d4e:	5ccb      	ldrb	r3, [r1, r3]
 8007d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	40023800 	.word	0x40023800
 8007d5c:	0800e1f0 	.word	0x0800e1f0

08007d60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e07b      	b.n	8007e6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d108      	bne.n	8007d8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d82:	d009      	beq.n	8007d98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	61da      	str	r2, [r3, #28]
 8007d8a:	e005      	b.n	8007d98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d106      	bne.n	8007db8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7fc fb62 	bl	800447c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007dce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007de0:	431a      	orrs	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dea:	431a      	orrs	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	431a      	orrs	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a1b      	ldr	r3, [r3, #32]
 8007e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e1c:	ea42 0103 	orr.w	r1, r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	0c1b      	lsrs	r3, r3, #16
 8007e36:	f003 0104 	and.w	r1, r3, #4
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3e:	f003 0210 	and.w	r2, r3, #16
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	69da      	ldr	r2, [r3, #28]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b088      	sub	sp, #32
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	603b      	str	r3, [r7, #0]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e82:	f7fc ffd7 	bl	8004e34 <HAL_GetTick>
 8007e86:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007e88:	88fb      	ldrh	r3, [r7, #6]
 8007e8a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d001      	beq.n	8007e9c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e12a      	b.n	80080f2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <HAL_SPI_Transmit+0x36>
 8007ea2:	88fb      	ldrh	r3, [r7, #6]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d101      	bne.n	8007eac <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e122      	b.n	80080f2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d101      	bne.n	8007eba <HAL_SPI_Transmit+0x48>
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	e11b      	b.n	80080f2 <HAL_SPI_Transmit+0x280>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2203      	movs	r2, #3
 8007ec6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	88fa      	ldrh	r2, [r7, #6]
 8007eda:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	88fa      	ldrh	r2, [r7, #6]
 8007ee0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f08:	d10f      	bne.n	8007f2a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f34:	2b40      	cmp	r3, #64	@ 0x40
 8007f36:	d007      	beq.n	8007f48 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f50:	d152      	bne.n	8007ff8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <HAL_SPI_Transmit+0xee>
 8007f5a:	8b7b      	ldrh	r3, [r7, #26]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d145      	bne.n	8007fec <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f64:	881a      	ldrh	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f70:	1c9a      	adds	r2, r3, #2
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007f84:	e032      	b.n	8007fec <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d112      	bne.n	8007fba <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f98:	881a      	ldrh	r2, [r3, #0]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa4:	1c9a      	adds	r2, r3, #2
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007fb8:	e018      	b.n	8007fec <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fba:	f7fc ff3b 	bl	8004e34 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d803      	bhi.n	8007fd2 <HAL_SPI_Transmit+0x160>
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd0:	d102      	bne.n	8007fd8 <HAL_SPI_Transmit+0x166>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d109      	bne.n	8007fec <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e082      	b.n	80080f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1c7      	bne.n	8007f86 <HAL_SPI_Transmit+0x114>
 8007ff6:	e053      	b.n	80080a0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <HAL_SPI_Transmit+0x194>
 8008000:	8b7b      	ldrh	r3, [r7, #26]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d147      	bne.n	8008096 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	330c      	adds	r3, #12
 8008010:	7812      	ldrb	r2, [r2, #0]
 8008012:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008022:	b29b      	uxth	r3, r3
 8008024:	3b01      	subs	r3, #1
 8008026:	b29a      	uxth	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800802c:	e033      	b.n	8008096 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b02      	cmp	r3, #2
 800803a:	d113      	bne.n	8008064 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	330c      	adds	r3, #12
 8008046:	7812      	ldrb	r2, [r2, #0]
 8008048:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008058:	b29b      	uxth	r3, r3
 800805a:	3b01      	subs	r3, #1
 800805c:	b29a      	uxth	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008062:	e018      	b.n	8008096 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008064:	f7fc fee6 	bl	8004e34 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	429a      	cmp	r2, r3
 8008072:	d803      	bhi.n	800807c <HAL_SPI_Transmit+0x20a>
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807a:	d102      	bne.n	8008082 <HAL_SPI_Transmit+0x210>
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d109      	bne.n	8008096 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e02d      	b.n	80080f2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800809a:	b29b      	uxth	r3, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1c6      	bne.n	800802e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080a0:	69fa      	ldr	r2, [r7, #28]
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 fcf9 	bl	8008a9c <SPI_EndRxTxTransaction>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d002      	beq.n	80080b6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2220      	movs	r2, #32
 80080b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080be:	2300      	movs	r3, #0
 80080c0:	617b      	str	r3, [r7, #20]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	617b      	str	r3, [r7, #20]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	617b      	str	r3, [r7, #20]
 80080d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e000      	b.n	80080f2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80080f0:	2300      	movs	r3, #0
  }
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3720      	adds	r7, #32
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b088      	sub	sp, #32
 80080fe:	af02      	add	r7, sp, #8
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	603b      	str	r3, [r7, #0]
 8008106:	4613      	mov	r3, r2
 8008108:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b01      	cmp	r3, #1
 8008114:	d001      	beq.n	800811a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008116:	2302      	movs	r3, #2
 8008118:	e104      	b.n	8008324 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008122:	d112      	bne.n	800814a <HAL_SPI_Receive+0x50>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10e      	bne.n	800814a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2204      	movs	r2, #4
 8008130:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008134:	88fa      	ldrh	r2, [r7, #6]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	4613      	mov	r3, r2
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	68b9      	ldr	r1, [r7, #8]
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f000 f8f3 	bl	800832c <HAL_SPI_TransmitReceive>
 8008146:	4603      	mov	r3, r0
 8008148:	e0ec      	b.n	8008324 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800814a:	f7fc fe73 	bl	8004e34 <HAL_GetTick>
 800814e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d002      	beq.n	800815c <HAL_SPI_Receive+0x62>
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e0e1      	b.n	8008324 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008166:	2b01      	cmp	r3, #1
 8008168:	d101      	bne.n	800816e <HAL_SPI_Receive+0x74>
 800816a:	2302      	movs	r3, #2
 800816c:	e0da      	b.n	8008324 <HAL_SPI_Receive+0x22a>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2204      	movs	r2, #4
 800817a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	88fa      	ldrh	r2, [r7, #6]
 800818e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	88fa      	ldrh	r2, [r7, #6]
 8008194:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081bc:	d10f      	bne.n	80081de <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80081dc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e8:	2b40      	cmp	r3, #64	@ 0x40
 80081ea:	d007      	beq.n	80081fc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081fa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d170      	bne.n	80082e6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008204:	e035      	b.n	8008272 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	2b01      	cmp	r3, #1
 8008212:	d115      	bne.n	8008240 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f103 020c 	add.w	r2, r3, #12
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008220:	7812      	ldrb	r2, [r2, #0]
 8008222:	b2d2      	uxtb	r2, r2
 8008224:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008234:	b29b      	uxth	r3, r3
 8008236:	3b01      	subs	r3, #1
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800823e:	e018      	b.n	8008272 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008240:	f7fc fdf8 	bl	8004e34 <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	429a      	cmp	r2, r3
 800824e:	d803      	bhi.n	8008258 <HAL_SPI_Receive+0x15e>
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008256:	d102      	bne.n	800825e <HAL_SPI_Receive+0x164>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d109      	bne.n	8008272 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800826e:	2303      	movs	r3, #3
 8008270:	e058      	b.n	8008324 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008276:	b29b      	uxth	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1c4      	bne.n	8008206 <HAL_SPI_Receive+0x10c>
 800827c:	e038      	b.n	80082f0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b01      	cmp	r3, #1
 800828a:	d113      	bne.n	80082b4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68da      	ldr	r2, [r3, #12]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008296:	b292      	uxth	r2, r2
 8008298:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829e:	1c9a      	adds	r2, r3, #2
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	3b01      	subs	r3, #1
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80082b2:	e018      	b.n	80082e6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082b4:	f7fc fdbe 	bl	8004e34 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d803      	bhi.n	80082cc <HAL_SPI_Receive+0x1d2>
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ca:	d102      	bne.n	80082d2 <HAL_SPI_Receive+0x1d8>
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d109      	bne.n	80082e6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e01e      	b.n	8008324 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1c6      	bne.n	800827e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 fb6b 	bl	80089d0 <SPI_EndRxTransaction>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2220      	movs	r2, #32
 8008304:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e000      	b.n	8008324 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8008322:	2300      	movs	r3, #0
  }
}
 8008324:	4618      	mov	r0, r3
 8008326:	3718      	adds	r7, #24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b08a      	sub	sp, #40	@ 0x28
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800833a:	2301      	movs	r3, #1
 800833c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800833e:	f7fc fd79 	bl	8004e34 <HAL_GetTick>
 8008342:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800834a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008352:	887b      	ldrh	r3, [r7, #2]
 8008354:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008356:	7ffb      	ldrb	r3, [r7, #31]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d00c      	beq.n	8008376 <HAL_SPI_TransmitReceive+0x4a>
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008362:	d106      	bne.n	8008372 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d102      	bne.n	8008372 <HAL_SPI_TransmitReceive+0x46>
 800836c:	7ffb      	ldrb	r3, [r7, #31]
 800836e:	2b04      	cmp	r3, #4
 8008370:	d001      	beq.n	8008376 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8008372:	2302      	movs	r3, #2
 8008374:	e17f      	b.n	8008676 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d005      	beq.n	8008388 <HAL_SPI_TransmitReceive+0x5c>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <HAL_SPI_TransmitReceive+0x5c>
 8008382:	887b      	ldrh	r3, [r7, #2]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e174      	b.n	8008676 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008392:	2b01      	cmp	r3, #1
 8008394:	d101      	bne.n	800839a <HAL_SPI_TransmitReceive+0x6e>
 8008396:	2302      	movs	r3, #2
 8008398:	e16d      	b.n	8008676 <HAL_SPI_TransmitReceive+0x34a>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b04      	cmp	r3, #4
 80083ac:	d003      	beq.n	80083b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2205      	movs	r2, #5
 80083b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	887a      	ldrh	r2, [r7, #2]
 80083c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	887a      	ldrh	r2, [r7, #2]
 80083cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	887a      	ldrh	r2, [r7, #2]
 80083d8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	887a      	ldrh	r2, [r7, #2]
 80083de:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f6:	2b40      	cmp	r3, #64	@ 0x40
 80083f8:	d007      	beq.n	800840a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008408:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008412:	d17e      	bne.n	8008512 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <HAL_SPI_TransmitReceive+0xf6>
 800841c:	8afb      	ldrh	r3, [r7, #22]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d16c      	bne.n	80084fc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008426:	881a      	ldrh	r2, [r3, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008432:	1c9a      	adds	r2, r3, #2
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800843c:	b29b      	uxth	r3, r3
 800843e:	3b01      	subs	r3, #1
 8008440:	b29a      	uxth	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008446:	e059      	b.n	80084fc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	f003 0302 	and.w	r3, r3, #2
 8008452:	2b02      	cmp	r3, #2
 8008454:	d11b      	bne.n	800848e <HAL_SPI_TransmitReceive+0x162>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800845a:	b29b      	uxth	r3, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	d016      	beq.n	800848e <HAL_SPI_TransmitReceive+0x162>
 8008460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008462:	2b01      	cmp	r3, #1
 8008464:	d113      	bne.n	800848e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800846a:	881a      	ldrh	r2, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008476:	1c9a      	adds	r2, r3, #2
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008480:	b29b      	uxth	r3, r3
 8008482:	3b01      	subs	r3, #1
 8008484:	b29a      	uxth	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800848a:	2300      	movs	r3, #0
 800848c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b01      	cmp	r3, #1
 800849a:	d119      	bne.n	80084d0 <HAL_SPI_TransmitReceive+0x1a4>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d014      	beq.n	80084d0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b0:	b292      	uxth	r2, r2
 80084b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b8:	1c9a      	adds	r2, r3, #2
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084cc:	2301      	movs	r3, #1
 80084ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80084d0:	f7fc fcb0 	bl	8004e34 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	6a3b      	ldr	r3, [r7, #32]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084dc:	429a      	cmp	r2, r3
 80084de:	d80d      	bhi.n	80084fc <HAL_SPI_TransmitReceive+0x1d0>
 80084e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e6:	d009      	beq.n	80084fc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e0bc      	b.n	8008676 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008500:	b29b      	uxth	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1a0      	bne.n	8008448 <HAL_SPI_TransmitReceive+0x11c>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800850a:	b29b      	uxth	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d19b      	bne.n	8008448 <HAL_SPI_TransmitReceive+0x11c>
 8008510:	e082      	b.n	8008618 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <HAL_SPI_TransmitReceive+0x1f4>
 800851a:	8afb      	ldrh	r3, [r7, #22]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d171      	bne.n	8008604 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	330c      	adds	r3, #12
 800852a:	7812      	ldrb	r2, [r2, #0]
 800852c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800853c:	b29b      	uxth	r3, r3
 800853e:	3b01      	subs	r3, #1
 8008540:	b29a      	uxth	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008546:	e05d      	b.n	8008604 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b02      	cmp	r3, #2
 8008554:	d11c      	bne.n	8008590 <HAL_SPI_TransmitReceive+0x264>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800855a:	b29b      	uxth	r3, r3
 800855c:	2b00      	cmp	r3, #0
 800855e:	d017      	beq.n	8008590 <HAL_SPI_TransmitReceive+0x264>
 8008560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008562:	2b01      	cmp	r3, #1
 8008564:	d114      	bne.n	8008590 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	330c      	adds	r3, #12
 8008570:	7812      	ldrb	r2, [r2, #0]
 8008572:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008582:	b29b      	uxth	r3, r3
 8008584:	3b01      	subs	r3, #1
 8008586:	b29a      	uxth	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800858c:	2300      	movs	r3, #0
 800858e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f003 0301 	and.w	r3, r3, #1
 800859a:	2b01      	cmp	r3, #1
 800859c:	d119      	bne.n	80085d2 <HAL_SPI_TransmitReceive+0x2a6>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d014      	beq.n	80085d2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68da      	ldr	r2, [r3, #12]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b2:	b2d2      	uxtb	r2, r2
 80085b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ba:	1c5a      	adds	r2, r3, #1
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	3b01      	subs	r3, #1
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085ce:	2301      	movs	r3, #1
 80085d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085d2:	f7fc fc2f 	bl	8004e34 <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085de:	429a      	cmp	r2, r3
 80085e0:	d803      	bhi.n	80085ea <HAL_SPI_TransmitReceive+0x2be>
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e8:	d102      	bne.n	80085f0 <HAL_SPI_TransmitReceive+0x2c4>
 80085ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d109      	bne.n	8008604 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e038      	b.n	8008676 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008608:	b29b      	uxth	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d19c      	bne.n	8008548 <HAL_SPI_TransmitReceive+0x21c>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008612:	b29b      	uxth	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	d197      	bne.n	8008548 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008618:	6a3a      	ldr	r2, [r7, #32]
 800861a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f000 fa3d 	bl	8008a9c <SPI_EndRxTxTransaction>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d008      	beq.n	800863a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2220      	movs	r2, #32
 800862c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e01d      	b.n	8008676 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10a      	bne.n	8008658 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008642:	2300      	movs	r3, #0
 8008644:	613b      	str	r3, [r7, #16]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	613b      	str	r3, [r7, #16]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	613b      	str	r3, [r7, #16]
 8008656:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e000      	b.n	8008676 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008674:	2300      	movs	r3, #0
  }
}
 8008676:	4618      	mov	r0, r3
 8008678:	3728      	adds	r7, #40	@ 0x28
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10e      	bne.n	80086c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d009      	beq.n	80086c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d004      	beq.n	80086c0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	4798      	blx	r3
    return;
 80086be:	e0ce      	b.n	800885e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <HAL_SPI_IRQHandler+0x5e>
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d004      	beq.n	80086de <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	4798      	blx	r3
    return;
 80086dc:	e0bf      	b.n	800885e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	f003 0320 	and.w	r3, r3, #32
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10a      	bne.n	80086fe <HAL_SPI_IRQHandler+0x7e>
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d105      	bne.n	80086fe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 80b0 	beq.w	800885e <HAL_SPI_IRQHandler+0x1de>
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	f003 0320 	and.w	r3, r3, #32
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 80aa 	beq.w	800885e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008710:	2b00      	cmp	r3, #0
 8008712:	d023      	beq.n	800875c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800871a:	b2db      	uxtb	r3, r3
 800871c:	2b03      	cmp	r3, #3
 800871e:	d011      	beq.n	8008744 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008724:	f043 0204 	orr.w	r2, r3, #4
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800872c:	2300      	movs	r3, #0
 800872e:	617b      	str	r3, [r7, #20]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	617b      	str	r3, [r7, #20]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	e00b      	b.n	800875c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008744:	2300      	movs	r3, #0
 8008746:	613b      	str	r3, [r7, #16]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	613b      	str	r3, [r7, #16]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	613b      	str	r3, [r7, #16]
 8008758:	693b      	ldr	r3, [r7, #16]
        return;
 800875a:	e080      	b.n	800885e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	f003 0320 	and.w	r3, r3, #32
 8008762:	2b00      	cmp	r3, #0
 8008764:	d014      	beq.n	8008790 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800876a:	f043 0201 	orr.w	r2, r3, #1
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008772:	2300      	movs	r3, #0
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00c      	beq.n	80087b4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800879e:	f043 0208 	orr.w	r2, r3, #8
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80087a6:	2300      	movs	r3, #0
 80087a8:	60bb      	str	r3, [r7, #8]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	60bb      	str	r3, [r7, #8]
 80087b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d04f      	beq.n	800885c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685a      	ldr	r2, [r3, #4]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80087ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d104      	bne.n	80087e8 <HAL_SPI_IRQHandler+0x168>
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d034      	beq.n	8008852 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0203 	bic.w	r2, r2, #3
 80087f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d011      	beq.n	8008824 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008804:	4a17      	ldr	r2, [pc, #92]	@ (8008864 <HAL_SPI_IRQHandler+0x1e4>)
 8008806:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800880c:	4618      	mov	r0, r3
 800880e:	f7fc ff4f 	bl	80056b0 <HAL_DMA_Abort_IT>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d005      	beq.n	8008824 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800881c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008828:	2b00      	cmp	r3, #0
 800882a:	d016      	beq.n	800885a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008830:	4a0c      	ldr	r2, [pc, #48]	@ (8008864 <HAL_SPI_IRQHandler+0x1e4>)
 8008832:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008838:	4618      	mov	r0, r3
 800883a:	f7fc ff39 	bl	80056b0 <HAL_DMA_Abort_IT>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00a      	beq.n	800885a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008848:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8008850:	e003      	b.n	800885a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f808 	bl	8008868 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008858:	e000      	b.n	800885c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800885a:	bf00      	nop
    return;
 800885c:	bf00      	nop
  }
}
 800885e:	3720      	adds	r7, #32
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	08008899 	.word	0x08008899

08008868 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800888a:	b2db      	uxtb	r3, r3
}
 800888c:	4618      	mov	r0, r3
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff ffd8 	bl	8008868 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80088b8:	bf00      	nop
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b088      	sub	sp, #32
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	603b      	str	r3, [r7, #0]
 80088cc:	4613      	mov	r3, r2
 80088ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80088d0:	f7fc fab0 	bl	8004e34 <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088d8:	1a9b      	subs	r3, r3, r2
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	4413      	add	r3, r2
 80088de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80088e0:	f7fc faa8 	bl	8004e34 <HAL_GetTick>
 80088e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80088e6:	4b39      	ldr	r3, [pc, #228]	@ (80089cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	015b      	lsls	r3, r3, #5
 80088ec:	0d1b      	lsrs	r3, r3, #20
 80088ee:	69fa      	ldr	r2, [r7, #28]
 80088f0:	fb02 f303 	mul.w	r3, r2, r3
 80088f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088f6:	e054      	b.n	80089a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fe:	d050      	beq.n	80089a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008900:	f7fc fa98 	bl	8004e34 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	69fa      	ldr	r2, [r7, #28]
 800890c:	429a      	cmp	r2, r3
 800890e:	d902      	bls.n	8008916 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d13d      	bne.n	8008992 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008924:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800892e:	d111      	bne.n	8008954 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008938:	d004      	beq.n	8008944 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008942:	d107      	bne.n	8008954 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008952:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800895c:	d10f      	bne.n	800897e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800896c:	601a      	str	r2, [r3, #0]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800897c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e017      	b.n	80089c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008998:	2300      	movs	r3, #0
 800899a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	3b01      	subs	r3, #1
 80089a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689a      	ldr	r2, [r3, #8]
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4013      	ands	r3, r2
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	bf0c      	ite	eq
 80089b2:	2301      	moveq	r3, #1
 80089b4:	2300      	movne	r3, #0
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	461a      	mov	r2, r3
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d19b      	bne.n	80088f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3720      	adds	r7, #32
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	200000ac 	.word	0x200000ac

080089d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af02      	add	r7, sp, #8
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089e4:	d111      	bne.n	8008a0a <SPI_EndRxTransaction+0x3a>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089ee:	d004      	beq.n	80089fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089f8:	d107      	bne.n	8008a0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a12:	d12a      	bne.n	8008a6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a1c:	d012      	beq.n	8008a44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2200      	movs	r2, #0
 8008a26:	2180      	movs	r1, #128	@ 0x80
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f7ff ff49 	bl	80088c0 <SPI_WaitFlagStateUntilTimeout>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d02d      	beq.n	8008a90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a38:	f043 0220 	orr.w	r2, r3, #32
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e026      	b.n	8008a92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f7ff ff36 	bl	80088c0 <SPI_WaitFlagStateUntilTimeout>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d01a      	beq.n	8008a90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a5e:	f043 0220 	orr.w	r2, r3, #32
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e013      	b.n	8008a92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	2200      	movs	r2, #0
 8008a72:	2101      	movs	r1, #1
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f7ff ff23 	bl	80088c0 <SPI_WaitFlagStateUntilTimeout>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d007      	beq.n	8008a90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a84:	f043 0220 	orr.w	r2, r3, #32
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e000      	b.n	8008a92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b088      	sub	sp, #32
 8008aa0:	af02      	add	r7, sp, #8
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	2102      	movs	r1, #2
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f7ff ff04 	bl	80088c0 <SPI_WaitFlagStateUntilTimeout>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d007      	beq.n	8008ace <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ac2:	f043 0220 	orr.w	r2, r3, #32
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e032      	b.n	8008b34 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008ace:	4b1b      	ldr	r3, [pc, #108]	@ (8008b3c <SPI_EndRxTxTransaction+0xa0>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8008b40 <SPI_EndRxTxTransaction+0xa4>)
 8008ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad8:	0d5b      	lsrs	r3, r3, #21
 8008ada:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008ade:	fb02 f303 	mul.w	r3, r2, r3
 8008ae2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008aec:	d112      	bne.n	8008b14 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2200      	movs	r2, #0
 8008af6:	2180      	movs	r1, #128	@ 0x80
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f7ff fee1 	bl	80088c0 <SPI_WaitFlagStateUntilTimeout>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d016      	beq.n	8008b32 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b08:	f043 0220 	orr.w	r2, r3, #32
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e00f      	b.n	8008b34 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b2a:	2b80      	cmp	r3, #128	@ 0x80
 8008b2c:	d0f2      	beq.n	8008b14 <SPI_EndRxTxTransaction+0x78>
 8008b2e:	e000      	b.n	8008b32 <SPI_EndRxTxTransaction+0x96>
        break;
 8008b30:	bf00      	nop
  }

  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	200000ac 	.word	0x200000ac
 8008b40:	165e9f81 	.word	0x165e9f81

08008b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e041      	b.n	8008bda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d106      	bne.n	8008b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7fc f85e 	bl	8004c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4619      	mov	r1, r3
 8008b82:	4610      	mov	r0, r2
 8008b84:	f000 ff8c 	bl	8009aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d001      	beq.n	8008bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e044      	b.n	8008c86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68da      	ldr	r2, [r3, #12]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f042 0201 	orr.w	r2, r2, #1
 8008c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a1e      	ldr	r2, [pc, #120]	@ (8008c94 <HAL_TIM_Base_Start_IT+0xb0>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d018      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x6c>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c26:	d013      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x6c>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8008c98 <HAL_TIM_Base_Start_IT+0xb4>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d00e      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x6c>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a19      	ldr	r2, [pc, #100]	@ (8008c9c <HAL_TIM_Base_Start_IT+0xb8>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d009      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x6c>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a17      	ldr	r2, [pc, #92]	@ (8008ca0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d004      	beq.n	8008c50 <HAL_TIM_Base_Start_IT+0x6c>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a16      	ldr	r2, [pc, #88]	@ (8008ca4 <HAL_TIM_Base_Start_IT+0xc0>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d111      	bne.n	8008c74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 0307 	and.w	r3, r3, #7
 8008c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2b06      	cmp	r3, #6
 8008c60:	d010      	beq.n	8008c84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f042 0201 	orr.w	r2, r2, #1
 8008c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c72:	e007      	b.n	8008c84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f042 0201 	orr.w	r2, r2, #1
 8008c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	40010000 	.word	0x40010000
 8008c98:	40000400 	.word	0x40000400
 8008c9c:	40000800 	.word	0x40000800
 8008ca0:	40000c00 	.word	0x40000c00
 8008ca4:	40014000 	.word	0x40014000

08008ca8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e041      	b.n	8008d3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d106      	bne.n	8008cd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f839 	bl	8008d46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f000 feda 	bl	8009aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b083      	sub	sp, #12
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d4e:	bf00      	nop
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
	...

08008d5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d109      	bne.n	8008d80 <HAL_TIM_PWM_Start+0x24>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	bf14      	ite	ne
 8008d78:	2301      	movne	r3, #1
 8008d7a:	2300      	moveq	r3, #0
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	e022      	b.n	8008dc6 <HAL_TIM_PWM_Start+0x6a>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	d109      	bne.n	8008d9a <HAL_TIM_PWM_Start+0x3e>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	bf14      	ite	ne
 8008d92:	2301      	movne	r3, #1
 8008d94:	2300      	moveq	r3, #0
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	e015      	b.n	8008dc6 <HAL_TIM_PWM_Start+0x6a>
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b08      	cmp	r3, #8
 8008d9e:	d109      	bne.n	8008db4 <HAL_TIM_PWM_Start+0x58>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	bf14      	ite	ne
 8008dac:	2301      	movne	r3, #1
 8008dae:	2300      	moveq	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	e008      	b.n	8008dc6 <HAL_TIM_PWM_Start+0x6a>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	bf14      	ite	ne
 8008dc0:	2301      	movne	r3, #1
 8008dc2:	2300      	moveq	r3, #0
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e068      	b.n	8008ea0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d104      	bne.n	8008dde <HAL_TIM_PWM_Start+0x82>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ddc:	e013      	b.n	8008e06 <HAL_TIM_PWM_Start+0xaa>
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	d104      	bne.n	8008dee <HAL_TIM_PWM_Start+0x92>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2202      	movs	r2, #2
 8008de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008dec:	e00b      	b.n	8008e06 <HAL_TIM_PWM_Start+0xaa>
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	2b08      	cmp	r3, #8
 8008df2:	d104      	bne.n	8008dfe <HAL_TIM_PWM_Start+0xa2>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008dfc:	e003      	b.n	8008e06 <HAL_TIM_PWM_Start+0xaa>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2202      	movs	r2, #2
 8008e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f001 faa8 	bl	800a364 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a23      	ldr	r2, [pc, #140]	@ (8008ea8 <HAL_TIM_PWM_Start+0x14c>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d107      	bne.n	8008e2e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a1d      	ldr	r2, [pc, #116]	@ (8008ea8 <HAL_TIM_PWM_Start+0x14c>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d018      	beq.n	8008e6a <HAL_TIM_PWM_Start+0x10e>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e40:	d013      	beq.n	8008e6a <HAL_TIM_PWM_Start+0x10e>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a19      	ldr	r2, [pc, #100]	@ (8008eac <HAL_TIM_PWM_Start+0x150>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d00e      	beq.n	8008e6a <HAL_TIM_PWM_Start+0x10e>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a17      	ldr	r2, [pc, #92]	@ (8008eb0 <HAL_TIM_PWM_Start+0x154>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d009      	beq.n	8008e6a <HAL_TIM_PWM_Start+0x10e>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a16      	ldr	r2, [pc, #88]	@ (8008eb4 <HAL_TIM_PWM_Start+0x158>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d004      	beq.n	8008e6a <HAL_TIM_PWM_Start+0x10e>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a14      	ldr	r2, [pc, #80]	@ (8008eb8 <HAL_TIM_PWM_Start+0x15c>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d111      	bne.n	8008e8e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	f003 0307 	and.w	r3, r3, #7
 8008e74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2b06      	cmp	r3, #6
 8008e7a:	d010      	beq.n	8008e9e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f042 0201 	orr.w	r2, r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e8c:	e007      	b.n	8008e9e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f042 0201 	orr.w	r2, r2, #1
 8008e9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	40010000 	.word	0x40010000
 8008eac:	40000400 	.word	0x40000400
 8008eb0:	40000800 	.word	0x40000800
 8008eb4:	40000c00 	.word	0x40000c00
 8008eb8:	40014000 	.word	0x40014000

08008ebc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e041      	b.n	8008f52 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d106      	bne.n	8008ee8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7fb fe52 	bl	8004b8c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2202      	movs	r2, #2
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	3304      	adds	r3, #4
 8008ef8:	4619      	mov	r1, r3
 8008efa:	4610      	mov	r0, r2
 8008efc:	f000 fdd0 	bl	8009aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
	...

08008f5c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d104      	bne.n	8008f76 <HAL_TIM_IC_Start+0x1a>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	e013      	b.n	8008f9e <HAL_TIM_IC_Start+0x42>
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b04      	cmp	r3, #4
 8008f7a:	d104      	bne.n	8008f86 <HAL_TIM_IC_Start+0x2a>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	e00b      	b.n	8008f9e <HAL_TIM_IC_Start+0x42>
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d104      	bne.n	8008f96 <HAL_TIM_IC_Start+0x3a>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	e003      	b.n	8008f9e <HAL_TIM_IC_Start+0x42>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d104      	bne.n	8008fb0 <HAL_TIM_IC_Start+0x54>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	e013      	b.n	8008fd8 <HAL_TIM_IC_Start+0x7c>
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	2b04      	cmp	r3, #4
 8008fb4:	d104      	bne.n	8008fc0 <HAL_TIM_IC_Start+0x64>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	e00b      	b.n	8008fd8 <HAL_TIM_IC_Start+0x7c>
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	2b08      	cmp	r3, #8
 8008fc4:	d104      	bne.n	8008fd0 <HAL_TIM_IC_Start+0x74>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	e003      	b.n	8008fd8 <HAL_TIM_IC_Start+0x7c>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d102      	bne.n	8008fe6 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d001      	beq.n	8008fea <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e077      	b.n	80090da <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d104      	bne.n	8008ffa <HAL_TIM_IC_Start+0x9e>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ff8:	e013      	b.n	8009022 <HAL_TIM_IC_Start+0xc6>
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	2b04      	cmp	r3, #4
 8008ffe:	d104      	bne.n	800900a <HAL_TIM_IC_Start+0xae>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2202      	movs	r2, #2
 8009004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009008:	e00b      	b.n	8009022 <HAL_TIM_IC_Start+0xc6>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b08      	cmp	r3, #8
 800900e:	d104      	bne.n	800901a <HAL_TIM_IC_Start+0xbe>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2202      	movs	r2, #2
 8009014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009018:	e003      	b.n	8009022 <HAL_TIM_IC_Start+0xc6>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2202      	movs	r2, #2
 800901e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d104      	bne.n	8009032 <HAL_TIM_IC_Start+0xd6>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009030:	e013      	b.n	800905a <HAL_TIM_IC_Start+0xfe>
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	2b04      	cmp	r3, #4
 8009036:	d104      	bne.n	8009042 <HAL_TIM_IC_Start+0xe6>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009040:	e00b      	b.n	800905a <HAL_TIM_IC_Start+0xfe>
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2b08      	cmp	r3, #8
 8009046:	d104      	bne.n	8009052 <HAL_TIM_IC_Start+0xf6>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2202      	movs	r2, #2
 800904c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009050:	e003      	b.n	800905a <HAL_TIM_IC_Start+0xfe>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2202      	movs	r2, #2
 8009056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2201      	movs	r2, #1
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	4618      	mov	r0, r3
 8009064:	f001 f97e 	bl	800a364 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a1d      	ldr	r2, [pc, #116]	@ (80090e4 <HAL_TIM_IC_Start+0x188>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d018      	beq.n	80090a4 <HAL_TIM_IC_Start+0x148>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800907a:	d013      	beq.n	80090a4 <HAL_TIM_IC_Start+0x148>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a19      	ldr	r2, [pc, #100]	@ (80090e8 <HAL_TIM_IC_Start+0x18c>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d00e      	beq.n	80090a4 <HAL_TIM_IC_Start+0x148>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a18      	ldr	r2, [pc, #96]	@ (80090ec <HAL_TIM_IC_Start+0x190>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d009      	beq.n	80090a4 <HAL_TIM_IC_Start+0x148>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a16      	ldr	r2, [pc, #88]	@ (80090f0 <HAL_TIM_IC_Start+0x194>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d004      	beq.n	80090a4 <HAL_TIM_IC_Start+0x148>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a15      	ldr	r2, [pc, #84]	@ (80090f4 <HAL_TIM_IC_Start+0x198>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d111      	bne.n	80090c8 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f003 0307 	and.w	r3, r3, #7
 80090ae:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2b06      	cmp	r3, #6
 80090b4:	d010      	beq.n	80090d8 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f042 0201 	orr.w	r2, r2, #1
 80090c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090c6:	e007      	b.n	80090d8 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f042 0201 	orr.w	r2, r2, #1
 80090d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	40010000 	.word	0x40010000
 80090e8:	40000400 	.word	0x40000400
 80090ec:	40000800 	.word	0x40000800
 80090f0:	40000c00 	.word	0x40000c00
 80090f4:	40014000 	.word	0x40014000

080090f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d104      	bne.n	8009116 <HAL_TIM_IC_Start_IT+0x1e>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009112:	b2db      	uxtb	r3, r3
 8009114:	e013      	b.n	800913e <HAL_TIM_IC_Start_IT+0x46>
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	2b04      	cmp	r3, #4
 800911a:	d104      	bne.n	8009126 <HAL_TIM_IC_Start_IT+0x2e>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009122:	b2db      	uxtb	r3, r3
 8009124:	e00b      	b.n	800913e <HAL_TIM_IC_Start_IT+0x46>
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	2b08      	cmp	r3, #8
 800912a:	d104      	bne.n	8009136 <HAL_TIM_IC_Start_IT+0x3e>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009132:	b2db      	uxtb	r3, r3
 8009134:	e003      	b.n	800913e <HAL_TIM_IC_Start_IT+0x46>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800913c:	b2db      	uxtb	r3, r3
 800913e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d104      	bne.n	8009150 <HAL_TIM_IC_Start_IT+0x58>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800914c:	b2db      	uxtb	r3, r3
 800914e:	e013      	b.n	8009178 <HAL_TIM_IC_Start_IT+0x80>
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2b04      	cmp	r3, #4
 8009154:	d104      	bne.n	8009160 <HAL_TIM_IC_Start_IT+0x68>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800915c:	b2db      	uxtb	r3, r3
 800915e:	e00b      	b.n	8009178 <HAL_TIM_IC_Start_IT+0x80>
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2b08      	cmp	r3, #8
 8009164:	d104      	bne.n	8009170 <HAL_TIM_IC_Start_IT+0x78>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800916c:	b2db      	uxtb	r3, r3
 800916e:	e003      	b.n	8009178 <HAL_TIM_IC_Start_IT+0x80>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009176:	b2db      	uxtb	r3, r3
 8009178:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800917a:	7bbb      	ldrb	r3, [r7, #14]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d102      	bne.n	8009186 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009180:	7b7b      	ldrb	r3, [r7, #13]
 8009182:	2b01      	cmp	r3, #1
 8009184:	d001      	beq.n	800918a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e0c2      	b.n	8009310 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d104      	bne.n	800919a <HAL_TIM_IC_Start_IT+0xa2>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2202      	movs	r2, #2
 8009194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009198:	e013      	b.n	80091c2 <HAL_TIM_IC_Start_IT+0xca>
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b04      	cmp	r3, #4
 800919e:	d104      	bne.n	80091aa <HAL_TIM_IC_Start_IT+0xb2>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2202      	movs	r2, #2
 80091a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091a8:	e00b      	b.n	80091c2 <HAL_TIM_IC_Start_IT+0xca>
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	2b08      	cmp	r3, #8
 80091ae:	d104      	bne.n	80091ba <HAL_TIM_IC_Start_IT+0xc2>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2202      	movs	r2, #2
 80091b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091b8:	e003      	b.n	80091c2 <HAL_TIM_IC_Start_IT+0xca>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2202      	movs	r2, #2
 80091be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d104      	bne.n	80091d2 <HAL_TIM_IC_Start_IT+0xda>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2202      	movs	r2, #2
 80091cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091d0:	e013      	b.n	80091fa <HAL_TIM_IC_Start_IT+0x102>
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	2b04      	cmp	r3, #4
 80091d6:	d104      	bne.n	80091e2 <HAL_TIM_IC_Start_IT+0xea>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2202      	movs	r2, #2
 80091dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80091e0:	e00b      	b.n	80091fa <HAL_TIM_IC_Start_IT+0x102>
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	2b08      	cmp	r3, #8
 80091e6:	d104      	bne.n	80091f2 <HAL_TIM_IC_Start_IT+0xfa>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2202      	movs	r2, #2
 80091ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091f0:	e003      	b.n	80091fa <HAL_TIM_IC_Start_IT+0x102>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2202      	movs	r2, #2
 80091f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2b0c      	cmp	r3, #12
 80091fe:	d841      	bhi.n	8009284 <HAL_TIM_IC_Start_IT+0x18c>
 8009200:	a201      	add	r2, pc, #4	@ (adr r2, 8009208 <HAL_TIM_IC_Start_IT+0x110>)
 8009202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009206:	bf00      	nop
 8009208:	0800923d 	.word	0x0800923d
 800920c:	08009285 	.word	0x08009285
 8009210:	08009285 	.word	0x08009285
 8009214:	08009285 	.word	0x08009285
 8009218:	0800924f 	.word	0x0800924f
 800921c:	08009285 	.word	0x08009285
 8009220:	08009285 	.word	0x08009285
 8009224:	08009285 	.word	0x08009285
 8009228:	08009261 	.word	0x08009261
 800922c:	08009285 	.word	0x08009285
 8009230:	08009285 	.word	0x08009285
 8009234:	08009285 	.word	0x08009285
 8009238:	08009273 	.word	0x08009273
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0202 	orr.w	r2, r2, #2
 800924a:	60da      	str	r2, [r3, #12]
      break;
 800924c:	e01d      	b.n	800928a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68da      	ldr	r2, [r3, #12]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f042 0204 	orr.w	r2, r2, #4
 800925c:	60da      	str	r2, [r3, #12]
      break;
 800925e:	e014      	b.n	800928a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68da      	ldr	r2, [r3, #12]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f042 0208 	orr.w	r2, r2, #8
 800926e:	60da      	str	r2, [r3, #12]
      break;
 8009270:	e00b      	b.n	800928a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68da      	ldr	r2, [r3, #12]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f042 0210 	orr.w	r2, r2, #16
 8009280:	60da      	str	r2, [r3, #12]
      break;
 8009282:	e002      	b.n	800928a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	73fb      	strb	r3, [r7, #15]
      break;
 8009288:	bf00      	nop
  }

  if (status == HAL_OK)
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d13e      	bne.n	800930e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2201      	movs	r2, #1
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	4618      	mov	r0, r3
 800929a:	f001 f863 	bl	800a364 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a1d      	ldr	r2, [pc, #116]	@ (8009318 <HAL_TIM_IC_Start_IT+0x220>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d018      	beq.n	80092da <HAL_TIM_IC_Start_IT+0x1e2>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092b0:	d013      	beq.n	80092da <HAL_TIM_IC_Start_IT+0x1e2>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a19      	ldr	r2, [pc, #100]	@ (800931c <HAL_TIM_IC_Start_IT+0x224>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d00e      	beq.n	80092da <HAL_TIM_IC_Start_IT+0x1e2>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a17      	ldr	r2, [pc, #92]	@ (8009320 <HAL_TIM_IC_Start_IT+0x228>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d009      	beq.n	80092da <HAL_TIM_IC_Start_IT+0x1e2>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a16      	ldr	r2, [pc, #88]	@ (8009324 <HAL_TIM_IC_Start_IT+0x22c>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d004      	beq.n	80092da <HAL_TIM_IC_Start_IT+0x1e2>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a14      	ldr	r2, [pc, #80]	@ (8009328 <HAL_TIM_IC_Start_IT+0x230>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d111      	bne.n	80092fe <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f003 0307 	and.w	r3, r3, #7
 80092e4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2b06      	cmp	r3, #6
 80092ea:	d010      	beq.n	800930e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f042 0201 	orr.w	r2, r2, #1
 80092fa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092fc:	e007      	b.n	800930e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f042 0201 	orr.w	r2, r2, #1
 800930c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800930e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	40010000 	.word	0x40010000
 800931c:	40000400 	.word	0x40000400
 8009320:	40000800 	.word	0x40000800
 8009324:	40000c00 	.word	0x40000c00
 8009328:	40014000 	.word	0x40014000

0800932c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	691b      	ldr	r3, [r3, #16]
 8009342:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	2b00      	cmp	r3, #0
 800934c:	d020      	beq.n	8009390 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f003 0302 	and.w	r3, r3, #2
 8009354:	2b00      	cmp	r3, #0
 8009356:	d01b      	beq.n	8009390 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f06f 0202 	mvn.w	r2, #2
 8009360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	f003 0303 	and.w	r3, r3, #3
 8009372:	2b00      	cmp	r3, #0
 8009374:	d003      	beq.n	800937e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7fa ffb8 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 800937c:	e005      	b.n	800938a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fb70 	bl	8009a64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fb77 	bl	8009a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	d020      	beq.n	80093dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f003 0304 	and.w	r3, r3, #4
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d01b      	beq.n	80093dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f06f 0204 	mvn.w	r2, #4
 80093ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2202      	movs	r2, #2
 80093b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d003      	beq.n	80093ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7fa ff92 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 80093c8:	e005      	b.n	80093d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fb4a 	bl	8009a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fb51 	bl	8009a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	f003 0308 	and.w	r3, r3, #8
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d020      	beq.n	8009428 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f003 0308 	and.w	r3, r3, #8
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d01b      	beq.n	8009428 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f06f 0208 	mvn.w	r2, #8
 80093f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2204      	movs	r2, #4
 80093fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	69db      	ldr	r3, [r3, #28]
 8009406:	f003 0303 	and.w	r3, r3, #3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7fa ff6c 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8009414:	e005      	b.n	8009422 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fb24 	bl	8009a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fb2b 	bl	8009a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	f003 0310 	and.w	r3, r3, #16
 800942e:	2b00      	cmp	r3, #0
 8009430:	d020      	beq.n	8009474 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f003 0310 	and.w	r3, r3, #16
 8009438:	2b00      	cmp	r3, #0
 800943a:	d01b      	beq.n	8009474 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f06f 0210 	mvn.w	r2, #16
 8009444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2208      	movs	r2, #8
 800944a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7fa ff46 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8009460:	e005      	b.n	800946e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fafe 	bl	8009a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fb05 	bl	8009a78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00c      	beq.n	8009498 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b00      	cmp	r3, #0
 8009486:	d007      	beq.n	8009498 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f06f 0201 	mvn.w	r2, #1
 8009490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7fa ff40 	bl	8004318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00c      	beq.n	80094bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d007      	beq.n	80094bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80094b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fff2 	bl	800a4a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00c      	beq.n	80094e0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d007      	beq.n	80094e0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80094d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fad6 	bl	8009a8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f003 0320 	and.w	r3, r3, #32
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00c      	beq.n	8009504 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f003 0320 	and.w	r3, r3, #32
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d007      	beq.n	8009504 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f06f 0220 	mvn.w	r2, #32
 80094fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 ffc4 	bl	800a48c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009504:	bf00      	nop
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009522:	2b01      	cmp	r3, #1
 8009524:	d101      	bne.n	800952a <HAL_TIM_IC_ConfigChannel+0x1e>
 8009526:	2302      	movs	r3, #2
 8009528:	e088      	b.n	800963c <HAL_TIM_IC_ConfigChannel+0x130>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d11b      	bne.n	8009570 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009548:	f000 fd54 	bl	8009ff4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	699a      	ldr	r2, [r3, #24]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f022 020c 	bic.w	r2, r2, #12
 800955a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6999      	ldr	r1, [r3, #24]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	689a      	ldr	r2, [r3, #8]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	619a      	str	r2, [r3, #24]
 800956e:	e060      	b.n	8009632 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2b04      	cmp	r3, #4
 8009574:	d11c      	bne.n	80095b0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009586:	f000 fdcc 	bl	800a122 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	699a      	ldr	r2, [r3, #24]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009598:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6999      	ldr	r1, [r3, #24]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	021a      	lsls	r2, r3, #8
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	430a      	orrs	r2, r1
 80095ac:	619a      	str	r2, [r3, #24]
 80095ae:	e040      	b.n	8009632 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b08      	cmp	r3, #8
 80095b4:	d11b      	bne.n	80095ee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80095c6:	f000 fe19 	bl	800a1fc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	69da      	ldr	r2, [r3, #28]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f022 020c 	bic.w	r2, r2, #12
 80095d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	69d9      	ldr	r1, [r3, #28]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	430a      	orrs	r2, r1
 80095ea:	61da      	str	r2, [r3, #28]
 80095ec:	e021      	b.n	8009632 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b0c      	cmp	r3, #12
 80095f2:	d11c      	bne.n	800962e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009604:	f000 fe36 	bl	800a274 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	69da      	ldr	r2, [r3, #28]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8009616:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	69d9      	ldr	r1, [r3, #28]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	021a      	lsls	r2, r3, #8
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	61da      	str	r2, [r3, #28]
 800962c:	e001      	b.n	8009632 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800963a:	7dfb      	ldrb	r3, [r7, #23]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800965a:	2b01      	cmp	r3, #1
 800965c:	d101      	bne.n	8009662 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800965e:	2302      	movs	r3, #2
 8009660:	e0ae      	b.n	80097c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2b0c      	cmp	r3, #12
 800966e:	f200 809f 	bhi.w	80097b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009672:	a201      	add	r2, pc, #4	@ (adr r2, 8009678 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009678:	080096ad 	.word	0x080096ad
 800967c:	080097b1 	.word	0x080097b1
 8009680:	080097b1 	.word	0x080097b1
 8009684:	080097b1 	.word	0x080097b1
 8009688:	080096ed 	.word	0x080096ed
 800968c:	080097b1 	.word	0x080097b1
 8009690:	080097b1 	.word	0x080097b1
 8009694:	080097b1 	.word	0x080097b1
 8009698:	0800972f 	.word	0x0800972f
 800969c:	080097b1 	.word	0x080097b1
 80096a0:	080097b1 	.word	0x080097b1
 80096a4:	080097b1 	.word	0x080097b1
 80096a8:	0800976f 	.word	0x0800976f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68b9      	ldr	r1, [r7, #8]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 fa80 	bl	8009bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	699a      	ldr	r2, [r3, #24]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f042 0208 	orr.w	r2, r2, #8
 80096c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	699a      	ldr	r2, [r3, #24]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f022 0204 	bic.w	r2, r2, #4
 80096d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6999      	ldr	r1, [r3, #24]
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	691a      	ldr	r2, [r3, #16]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	619a      	str	r2, [r3, #24]
      break;
 80096ea:	e064      	b.n	80097b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68b9      	ldr	r1, [r7, #8]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 fac6 	bl	8009c84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	699a      	ldr	r2, [r3, #24]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	699a      	ldr	r2, [r3, #24]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	6999      	ldr	r1, [r3, #24]
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	021a      	lsls	r2, r3, #8
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	430a      	orrs	r2, r1
 800972a:	619a      	str	r2, [r3, #24]
      break;
 800972c:	e043      	b.n	80097b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68b9      	ldr	r1, [r7, #8]
 8009734:	4618      	mov	r0, r3
 8009736:	f000 fb11 	bl	8009d5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	69da      	ldr	r2, [r3, #28]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f042 0208 	orr.w	r2, r2, #8
 8009748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	69da      	ldr	r2, [r3, #28]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f022 0204 	bic.w	r2, r2, #4
 8009758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	69d9      	ldr	r1, [r3, #28]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	691a      	ldr	r2, [r3, #16]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	430a      	orrs	r2, r1
 800976a:	61da      	str	r2, [r3, #28]
      break;
 800976c:	e023      	b.n	80097b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68b9      	ldr	r1, [r7, #8]
 8009774:	4618      	mov	r0, r3
 8009776:	f000 fb5b 	bl	8009e30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	69da      	ldr	r2, [r3, #28]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	69da      	ldr	r2, [r3, #28]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	69d9      	ldr	r1, [r3, #28]
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	021a      	lsls	r2, r3, #8
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	430a      	orrs	r2, r1
 80097ac:	61da      	str	r2, [r3, #28]
      break;
 80097ae:	e002      	b.n	80097b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	75fb      	strb	r3, [r7, #23]
      break;
 80097b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80097be:	7dfb      	ldrb	r3, [r7, #23]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3718      	adds	r7, #24
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d101      	bne.n	80097e4 <HAL_TIM_ConfigClockSource+0x1c>
 80097e0:	2302      	movs	r3, #2
 80097e2:	e0b4      	b.n	800994e <HAL_TIM_ConfigClockSource+0x186>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2202      	movs	r2, #2
 80097f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800980a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800981c:	d03e      	beq.n	800989c <HAL_TIM_ConfigClockSource+0xd4>
 800981e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009822:	f200 8087 	bhi.w	8009934 <HAL_TIM_ConfigClockSource+0x16c>
 8009826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800982a:	f000 8086 	beq.w	800993a <HAL_TIM_ConfigClockSource+0x172>
 800982e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009832:	d87f      	bhi.n	8009934 <HAL_TIM_ConfigClockSource+0x16c>
 8009834:	2b70      	cmp	r3, #112	@ 0x70
 8009836:	d01a      	beq.n	800986e <HAL_TIM_ConfigClockSource+0xa6>
 8009838:	2b70      	cmp	r3, #112	@ 0x70
 800983a:	d87b      	bhi.n	8009934 <HAL_TIM_ConfigClockSource+0x16c>
 800983c:	2b60      	cmp	r3, #96	@ 0x60
 800983e:	d050      	beq.n	80098e2 <HAL_TIM_ConfigClockSource+0x11a>
 8009840:	2b60      	cmp	r3, #96	@ 0x60
 8009842:	d877      	bhi.n	8009934 <HAL_TIM_ConfigClockSource+0x16c>
 8009844:	2b50      	cmp	r3, #80	@ 0x50
 8009846:	d03c      	beq.n	80098c2 <HAL_TIM_ConfigClockSource+0xfa>
 8009848:	2b50      	cmp	r3, #80	@ 0x50
 800984a:	d873      	bhi.n	8009934 <HAL_TIM_ConfigClockSource+0x16c>
 800984c:	2b40      	cmp	r3, #64	@ 0x40
 800984e:	d058      	beq.n	8009902 <HAL_TIM_ConfigClockSource+0x13a>
 8009850:	2b40      	cmp	r3, #64	@ 0x40
 8009852:	d86f      	bhi.n	8009934 <HAL_TIM_ConfigClockSource+0x16c>
 8009854:	2b30      	cmp	r3, #48	@ 0x30
 8009856:	d064      	beq.n	8009922 <HAL_TIM_ConfigClockSource+0x15a>
 8009858:	2b30      	cmp	r3, #48	@ 0x30
 800985a:	d86b      	bhi.n	8009934 <HAL_TIM_ConfigClockSource+0x16c>
 800985c:	2b20      	cmp	r3, #32
 800985e:	d060      	beq.n	8009922 <HAL_TIM_ConfigClockSource+0x15a>
 8009860:	2b20      	cmp	r3, #32
 8009862:	d867      	bhi.n	8009934 <HAL_TIM_ConfigClockSource+0x16c>
 8009864:	2b00      	cmp	r3, #0
 8009866:	d05c      	beq.n	8009922 <HAL_TIM_ConfigClockSource+0x15a>
 8009868:	2b10      	cmp	r3, #16
 800986a:	d05a      	beq.n	8009922 <HAL_TIM_ConfigClockSource+0x15a>
 800986c:	e062      	b.n	8009934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800987e:	f000 fd51 	bl	800a324 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	609a      	str	r2, [r3, #8]
      break;
 800989a:	e04f      	b.n	800993c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098ac:	f000 fd3a 	bl	800a324 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	689a      	ldr	r2, [r3, #8]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80098be:	609a      	str	r2, [r3, #8]
      break;
 80098c0:	e03c      	b.n	800993c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098ce:	461a      	mov	r2, r3
 80098d0:	f000 fbf8 	bl	800a0c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2150      	movs	r1, #80	@ 0x50
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 fd07 	bl	800a2ee <TIM_ITRx_SetConfig>
      break;
 80098e0:	e02c      	b.n	800993c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098ee:	461a      	mov	r2, r3
 80098f0:	f000 fc54 	bl	800a19c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2160      	movs	r1, #96	@ 0x60
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 fcf7 	bl	800a2ee <TIM_ITRx_SetConfig>
      break;
 8009900:	e01c      	b.n	800993c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800990e:	461a      	mov	r2, r3
 8009910:	f000 fbd8 	bl	800a0c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2140      	movs	r1, #64	@ 0x40
 800991a:	4618      	mov	r0, r3
 800991c:	f000 fce7 	bl	800a2ee <TIM_ITRx_SetConfig>
      break;
 8009920:	e00c      	b.n	800993c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4619      	mov	r1, r3
 800992c:	4610      	mov	r0, r2
 800992e:	f000 fcde 	bl	800a2ee <TIM_ITRx_SetConfig>
      break;
 8009932:	e003      	b.n	800993c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	73fb      	strb	r3, [r7, #15]
      break;
 8009938:	e000      	b.n	800993c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800993a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800994c:	7bfb      	ldrb	r3, [r7, #15]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b082      	sub	sp, #8
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009966:	2b01      	cmp	r3, #1
 8009968:	d101      	bne.n	800996e <HAL_TIM_SlaveConfigSynchro+0x18>
 800996a:	2302      	movs	r3, #2
 800996c:	e031      	b.n	80099d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2202      	movs	r2, #2
 800997a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 faa5 	bl	8009ed0 <TIM_SlaveTimer_SetConfig>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d009      	beq.n	80099a0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	e018      	b.n	80099d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68da      	ldr	r2, [r3, #12]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099ae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68da      	ldr	r2, [r3, #12]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80099be:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	2b0c      	cmp	r3, #12
 80099ee:	d831      	bhi.n	8009a54 <HAL_TIM_ReadCapturedValue+0x78>
 80099f0:	a201      	add	r2, pc, #4	@ (adr r2, 80099f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80099f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f6:	bf00      	nop
 80099f8:	08009a2d 	.word	0x08009a2d
 80099fc:	08009a55 	.word	0x08009a55
 8009a00:	08009a55 	.word	0x08009a55
 8009a04:	08009a55 	.word	0x08009a55
 8009a08:	08009a37 	.word	0x08009a37
 8009a0c:	08009a55 	.word	0x08009a55
 8009a10:	08009a55 	.word	0x08009a55
 8009a14:	08009a55 	.word	0x08009a55
 8009a18:	08009a41 	.word	0x08009a41
 8009a1c:	08009a55 	.word	0x08009a55
 8009a20:	08009a55 	.word	0x08009a55
 8009a24:	08009a55 	.word	0x08009a55
 8009a28:	08009a4b 	.word	0x08009a4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a32:	60fb      	str	r3, [r7, #12]

      break;
 8009a34:	e00f      	b.n	8009a56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a3c:	60fb      	str	r3, [r7, #12]

      break;
 8009a3e:	e00a      	b.n	8009a56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a46:	60fb      	str	r3, [r7, #12]

      break;
 8009a48:	e005      	b.n	8009a56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a50:	60fb      	str	r3, [r7, #12]

      break;
 8009a52:	e000      	b.n	8009a56 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009a54:	bf00      	nop
  }

  return tmpreg;
 8009a56:	68fb      	ldr	r3, [r7, #12]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3714      	adds	r7, #20
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a3a      	ldr	r2, [pc, #232]	@ (8009b9c <TIM_Base_SetConfig+0xfc>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d00f      	beq.n	8009ad8 <TIM_Base_SetConfig+0x38>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009abe:	d00b      	beq.n	8009ad8 <TIM_Base_SetConfig+0x38>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a37      	ldr	r2, [pc, #220]	@ (8009ba0 <TIM_Base_SetConfig+0x100>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d007      	beq.n	8009ad8 <TIM_Base_SetConfig+0x38>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a36      	ldr	r2, [pc, #216]	@ (8009ba4 <TIM_Base_SetConfig+0x104>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d003      	beq.n	8009ad8 <TIM_Base_SetConfig+0x38>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a35      	ldr	r2, [pc, #212]	@ (8009ba8 <TIM_Base_SetConfig+0x108>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d108      	bne.n	8009aea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a2b      	ldr	r2, [pc, #172]	@ (8009b9c <TIM_Base_SetConfig+0xfc>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d01b      	beq.n	8009b2a <TIM_Base_SetConfig+0x8a>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009af8:	d017      	beq.n	8009b2a <TIM_Base_SetConfig+0x8a>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a28      	ldr	r2, [pc, #160]	@ (8009ba0 <TIM_Base_SetConfig+0x100>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d013      	beq.n	8009b2a <TIM_Base_SetConfig+0x8a>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a27      	ldr	r2, [pc, #156]	@ (8009ba4 <TIM_Base_SetConfig+0x104>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d00f      	beq.n	8009b2a <TIM_Base_SetConfig+0x8a>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a26      	ldr	r2, [pc, #152]	@ (8009ba8 <TIM_Base_SetConfig+0x108>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d00b      	beq.n	8009b2a <TIM_Base_SetConfig+0x8a>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a25      	ldr	r2, [pc, #148]	@ (8009bac <TIM_Base_SetConfig+0x10c>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d007      	beq.n	8009b2a <TIM_Base_SetConfig+0x8a>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a24      	ldr	r2, [pc, #144]	@ (8009bb0 <TIM_Base_SetConfig+0x110>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d003      	beq.n	8009b2a <TIM_Base_SetConfig+0x8a>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a23      	ldr	r2, [pc, #140]	@ (8009bb4 <TIM_Base_SetConfig+0x114>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d108      	bne.n	8009b3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	689a      	ldr	r2, [r3, #8]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a0e      	ldr	r2, [pc, #56]	@ (8009b9c <TIM_Base_SetConfig+0xfc>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d103      	bne.n	8009b70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	691a      	ldr	r2, [r3, #16]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d105      	bne.n	8009b8e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	f023 0201 	bic.w	r2, r3, #1
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	611a      	str	r2, [r3, #16]
  }
}
 8009b8e:	bf00      	nop
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	40010000 	.word	0x40010000
 8009ba0:	40000400 	.word	0x40000400
 8009ba4:	40000800 	.word	0x40000800
 8009ba8:	40000c00 	.word	0x40000c00
 8009bac:	40014000 	.word	0x40014000
 8009bb0:	40014400 	.word	0x40014400
 8009bb4:	40014800 	.word	0x40014800

08009bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b087      	sub	sp, #28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	f023 0201 	bic.w	r2, r3, #1
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f023 0303 	bic.w	r3, r3, #3
 8009bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f023 0302 	bic.w	r3, r3, #2
 8009c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8009c80 <TIM_OC1_SetConfig+0xc8>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d10c      	bne.n	8009c2e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	f023 0308 	bic.w	r3, r3, #8
 8009c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	697a      	ldr	r2, [r7, #20]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f023 0304 	bic.w	r3, r3, #4
 8009c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a13      	ldr	r2, [pc, #76]	@ (8009c80 <TIM_OC1_SetConfig+0xc8>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d111      	bne.n	8009c5a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	693a      	ldr	r2, [r7, #16]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	693a      	ldr	r2, [r7, #16]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	685a      	ldr	r2, [r3, #4]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	697a      	ldr	r2, [r7, #20]
 8009c72:	621a      	str	r2, [r3, #32]
}
 8009c74:	bf00      	nop
 8009c76:	371c      	adds	r7, #28
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr
 8009c80:	40010000 	.word	0x40010000

08009c84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	f023 0210 	bic.w	r2, r3, #16
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	021b      	lsls	r3, r3, #8
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	f023 0320 	bic.w	r3, r3, #32
 8009cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	011b      	lsls	r3, r3, #4
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a1e      	ldr	r2, [pc, #120]	@ (8009d58 <TIM_OC2_SetConfig+0xd4>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d10d      	bne.n	8009d00 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	011b      	lsls	r3, r3, #4
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a15      	ldr	r2, [pc, #84]	@ (8009d58 <TIM_OC2_SetConfig+0xd4>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d113      	bne.n	8009d30 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	699b      	ldr	r3, [r3, #24]
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	693a      	ldr	r2, [r7, #16]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	685a      	ldr	r2, [r3, #4]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	621a      	str	r2, [r3, #32]
}
 8009d4a:	bf00      	nop
 8009d4c:	371c      	adds	r7, #28
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	40010000 	.word	0x40010000

08009d5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b087      	sub	sp, #28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a1b      	ldr	r3, [r3, #32]
 8009d70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f023 0303 	bic.w	r3, r3, #3
 8009d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	021b      	lsls	r3, r3, #8
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a1d      	ldr	r2, [pc, #116]	@ (8009e2c <TIM_OC3_SetConfig+0xd0>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d10d      	bne.n	8009dd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	021b      	lsls	r3, r3, #8
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a14      	ldr	r2, [pc, #80]	@ (8009e2c <TIM_OC3_SetConfig+0xd0>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d113      	bne.n	8009e06 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	011b      	lsls	r3, r3, #4
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	699b      	ldr	r3, [r3, #24]
 8009dfe:	011b      	lsls	r3, r3, #4
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	693a      	ldr	r2, [r7, #16]
 8009e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	685a      	ldr	r2, [r3, #4]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	621a      	str	r2, [r3, #32]
}
 8009e20:	bf00      	nop
 8009e22:	371c      	adds	r7, #28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	40010000 	.word	0x40010000

08009e30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b087      	sub	sp, #28
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
 8009e3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a1b      	ldr	r3, [r3, #32]
 8009e44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	69db      	ldr	r3, [r3, #28]
 8009e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	021b      	lsls	r3, r3, #8
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009e7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	031b      	lsls	r3, r3, #12
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a10      	ldr	r2, [pc, #64]	@ (8009ecc <TIM_OC4_SetConfig+0x9c>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d109      	bne.n	8009ea4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	019b      	lsls	r3, r3, #6
 8009e9e:	697a      	ldr	r2, [r7, #20]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	697a      	ldr	r2, [r7, #20]
 8009ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	68fa      	ldr	r2, [r7, #12]
 8009eae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	621a      	str	r2, [r3, #32]
}
 8009ebe:	bf00      	nop
 8009ec0:	371c      	adds	r7, #28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	40010000 	.word	0x40010000

08009ed0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009eda:	2300      	movs	r3, #0
 8009edc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eec:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	f023 0307 	bic.w	r3, r3, #7
 8009efe:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	2b70      	cmp	r3, #112	@ 0x70
 8009f18:	d01a      	beq.n	8009f50 <TIM_SlaveTimer_SetConfig+0x80>
 8009f1a:	2b70      	cmp	r3, #112	@ 0x70
 8009f1c:	d860      	bhi.n	8009fe0 <TIM_SlaveTimer_SetConfig+0x110>
 8009f1e:	2b60      	cmp	r3, #96	@ 0x60
 8009f20:	d054      	beq.n	8009fcc <TIM_SlaveTimer_SetConfig+0xfc>
 8009f22:	2b60      	cmp	r3, #96	@ 0x60
 8009f24:	d85c      	bhi.n	8009fe0 <TIM_SlaveTimer_SetConfig+0x110>
 8009f26:	2b50      	cmp	r3, #80	@ 0x50
 8009f28:	d046      	beq.n	8009fb8 <TIM_SlaveTimer_SetConfig+0xe8>
 8009f2a:	2b50      	cmp	r3, #80	@ 0x50
 8009f2c:	d858      	bhi.n	8009fe0 <TIM_SlaveTimer_SetConfig+0x110>
 8009f2e:	2b40      	cmp	r3, #64	@ 0x40
 8009f30:	d019      	beq.n	8009f66 <TIM_SlaveTimer_SetConfig+0x96>
 8009f32:	2b40      	cmp	r3, #64	@ 0x40
 8009f34:	d854      	bhi.n	8009fe0 <TIM_SlaveTimer_SetConfig+0x110>
 8009f36:	2b30      	cmp	r3, #48	@ 0x30
 8009f38:	d055      	beq.n	8009fe6 <TIM_SlaveTimer_SetConfig+0x116>
 8009f3a:	2b30      	cmp	r3, #48	@ 0x30
 8009f3c:	d850      	bhi.n	8009fe0 <TIM_SlaveTimer_SetConfig+0x110>
 8009f3e:	2b20      	cmp	r3, #32
 8009f40:	d051      	beq.n	8009fe6 <TIM_SlaveTimer_SetConfig+0x116>
 8009f42:	2b20      	cmp	r3, #32
 8009f44:	d84c      	bhi.n	8009fe0 <TIM_SlaveTimer_SetConfig+0x110>
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d04d      	beq.n	8009fe6 <TIM_SlaveTimer_SetConfig+0x116>
 8009f4a:	2b10      	cmp	r3, #16
 8009f4c:	d04b      	beq.n	8009fe6 <TIM_SlaveTimer_SetConfig+0x116>
 8009f4e:	e047      	b.n	8009fe0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009f60:	f000 f9e0 	bl	800a324 <TIM_ETR_SetConfig>
      break;
 8009f64:	e040      	b.n	8009fe8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b05      	cmp	r3, #5
 8009f6c:	d101      	bne.n	8009f72 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e03b      	b.n	8009fea <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6a1b      	ldr	r3, [r3, #32]
 8009f78:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6a1a      	ldr	r2, [r3, #32]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 0201 	bic.w	r2, r2, #1
 8009f88:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f98:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	011b      	lsls	r3, r3, #4
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	621a      	str	r2, [r3, #32]
      break;
 8009fb6:	e017      	b.n	8009fe8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	f000 f87d 	bl	800a0c4 <TIM_TI1_ConfigInputStage>
      break;
 8009fca:	e00d      	b.n	8009fe8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fd8:	461a      	mov	r2, r3
 8009fda:	f000 f8df 	bl	800a19c <TIM_TI2_ConfigInputStage>
      break;
 8009fde:	e003      	b.n	8009fe8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8009fe4:	e000      	b.n	8009fe8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009fe6:	bf00      	nop
  }

  return status;
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3718      	adds	r7, #24
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
	...

08009ff4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b087      	sub	sp, #28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
 800a000:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6a1b      	ldr	r3, [r3, #32]
 800a00c:	f023 0201 	bic.w	r2, r3, #1
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	4a24      	ldr	r2, [pc, #144]	@ (800a0b0 <TIM_TI1_SetConfig+0xbc>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d013      	beq.n	800a04a <TIM_TI1_SetConfig+0x56>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a028:	d00f      	beq.n	800a04a <TIM_TI1_SetConfig+0x56>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	4a21      	ldr	r2, [pc, #132]	@ (800a0b4 <TIM_TI1_SetConfig+0xc0>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d00b      	beq.n	800a04a <TIM_TI1_SetConfig+0x56>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	4a20      	ldr	r2, [pc, #128]	@ (800a0b8 <TIM_TI1_SetConfig+0xc4>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d007      	beq.n	800a04a <TIM_TI1_SetConfig+0x56>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	4a1f      	ldr	r2, [pc, #124]	@ (800a0bc <TIM_TI1_SetConfig+0xc8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d003      	beq.n	800a04a <TIM_TI1_SetConfig+0x56>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	4a1e      	ldr	r2, [pc, #120]	@ (800a0c0 <TIM_TI1_SetConfig+0xcc>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d101      	bne.n	800a04e <TIM_TI1_SetConfig+0x5a>
 800a04a:	2301      	movs	r3, #1
 800a04c:	e000      	b.n	800a050 <TIM_TI1_SetConfig+0x5c>
 800a04e:	2300      	movs	r3, #0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d008      	beq.n	800a066 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	f023 0303 	bic.w	r3, r3, #3
 800a05a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4313      	orrs	r3, r2
 800a062:	617b      	str	r3, [r7, #20]
 800a064:	e003      	b.n	800a06e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	f043 0301 	orr.w	r3, r3, #1
 800a06c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	011b      	lsls	r3, r3, #4
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	4313      	orrs	r3, r2
 800a080:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	f023 030a 	bic.w	r3, r3, #10
 800a088:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	f003 030a 	and.w	r3, r3, #10
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	4313      	orrs	r3, r2
 800a094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	621a      	str	r2, [r3, #32]
}
 800a0a2:	bf00      	nop
 800a0a4:	371c      	adds	r7, #28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	40010000 	.word	0x40010000
 800a0b4:	40000400 	.word	0x40000400
 800a0b8:	40000800 	.word	0x40000800
 800a0bc:	40000c00 	.word	0x40000c00
 800a0c0:	40014000 	.word	0x40014000

0800a0c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b087      	sub	sp, #28
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6a1b      	ldr	r3, [r3, #32]
 800a0d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	f023 0201 	bic.w	r2, r3, #1
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	011b      	lsls	r3, r3, #4
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	f023 030a 	bic.w	r3, r3, #10
 800a100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	4313      	orrs	r3, r2
 800a108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	621a      	str	r2, [r3, #32]
}
 800a116:	bf00      	nop
 800a118:	371c      	adds	r7, #28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a122:	b480      	push	{r7}
 800a124:	b087      	sub	sp, #28
 800a126:	af00      	add	r7, sp, #0
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	60b9      	str	r1, [r7, #8]
 800a12c:	607a      	str	r2, [r7, #4]
 800a12e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6a1b      	ldr	r3, [r3, #32]
 800a134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	f023 0210 	bic.w	r2, r3, #16
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a14e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	021b      	lsls	r3, r3, #8
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	4313      	orrs	r3, r2
 800a158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	031b      	lsls	r3, r3, #12
 800a166:	b29b      	uxth	r3, r3
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a174:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	011b      	lsls	r3, r3, #4
 800a17a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	4313      	orrs	r3, r2
 800a182:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	621a      	str	r2, [r3, #32]
}
 800a190:	bf00      	nop
 800a192:	371c      	adds	r7, #28
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b087      	sub	sp, #28
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	f023 0210 	bic.w	r2, r3, #16
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a1c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	031b      	lsls	r3, r3, #12
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a1d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	011b      	lsls	r3, r3, #4
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	697a      	ldr	r2, [r7, #20]
 800a1ee:	621a      	str	r2, [r3, #32]
}
 800a1f0:	bf00      	nop
 800a1f2:	371c      	adds	r7, #28
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
 800a208:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f023 0303 	bic.w	r3, r3, #3
 800a228:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4313      	orrs	r3, r2
 800a230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a238:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	011b      	lsls	r3, r3, #4
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	4313      	orrs	r3, r2
 800a244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a24c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	021b      	lsls	r3, r3, #8
 800a252:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	4313      	orrs	r3, r2
 800a25a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	697a      	ldr	r2, [r7, #20]
 800a266:	621a      	str	r2, [r3, #32]
}
 800a268:	bf00      	nop
 800a26a:	371c      	adds	r7, #28
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
 800a280:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6a1b      	ldr	r3, [r3, #32]
 800a28c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	69db      	ldr	r3, [r3, #28]
 800a298:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	021b      	lsls	r3, r3, #8
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a2b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	031b      	lsls	r3, r3, #12
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a2c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	031b      	lsls	r3, r3, #12
 800a2cc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	621a      	str	r2, [r3, #32]
}
 800a2e2:	bf00      	nop
 800a2e4:	371c      	adds	r7, #28
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b085      	sub	sp, #20
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a304:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	f043 0307 	orr.w	r3, r3, #7
 800a310:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	609a      	str	r2, [r3, #8]
}
 800a318:	bf00      	nop
 800a31a:	3714      	adds	r7, #20
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a324:	b480      	push	{r7}
 800a326:	b087      	sub	sp, #28
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
 800a330:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a33e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	021a      	lsls	r2, r3, #8
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	431a      	orrs	r2, r3
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	4313      	orrs	r3, r2
 800a350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	609a      	str	r2, [r3, #8]
}
 800a358:	bf00      	nop
 800a35a:	371c      	adds	r7, #28
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a364:	b480      	push	{r7}
 800a366:	b087      	sub	sp, #28
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	f003 031f 	and.w	r3, r3, #31
 800a376:	2201      	movs	r2, #1
 800a378:	fa02 f303 	lsl.w	r3, r2, r3
 800a37c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6a1a      	ldr	r2, [r3, #32]
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	43db      	mvns	r3, r3
 800a386:	401a      	ands	r2, r3
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6a1a      	ldr	r2, [r3, #32]
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	f003 031f 	and.w	r3, r3, #31
 800a396:	6879      	ldr	r1, [r7, #4]
 800a398:	fa01 f303 	lsl.w	r3, r1, r3
 800a39c:	431a      	orrs	r2, r3
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	621a      	str	r2, [r3, #32]
}
 800a3a2:	bf00      	nop
 800a3a4:	371c      	adds	r7, #28
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
	...

0800a3b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d101      	bne.n	800a3c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	e050      	b.n	800a46a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	689b      	ldr	r3, [r3, #8]
 800a3e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a1c      	ldr	r2, [pc, #112]	@ (800a478 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d018      	beq.n	800a43e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a414:	d013      	beq.n	800a43e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a18      	ldr	r2, [pc, #96]	@ (800a47c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d00e      	beq.n	800a43e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a16      	ldr	r2, [pc, #88]	@ (800a480 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d009      	beq.n	800a43e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a15      	ldr	r2, [pc, #84]	@ (800a484 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d004      	beq.n	800a43e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a13      	ldr	r2, [pc, #76]	@ (800a488 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d10c      	bne.n	800a458 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	40010000 	.word	0x40010000
 800a47c:	40000400 	.word	0x40000400
 800a480:	40000800 	.word	0x40000800
 800a484:	40000c00 	.word	0x40000c00
 800a488:	40014000 	.word	0x40014000

0800a48c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a4b8:	4904      	ldr	r1, [pc, #16]	@ (800a4cc <MX_FATFS_Init+0x18>)
 800a4ba:	4805      	ldr	r0, [pc, #20]	@ (800a4d0 <MX_FATFS_Init+0x1c>)
 800a4bc:	f003 f86a 	bl	800d594 <FATFS_LinkDriver>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	4b03      	ldr	r3, [pc, #12]	@ (800a4d4 <MX_FATFS_Init+0x20>)
 800a4c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a4c8:	bf00      	nop
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	20000ce8 	.word	0x20000ce8
 800a4d0:	200000b8 	.word	0x200000b8
 800a4d4:	20000ce4 	.word	0x20000ce4

0800a4d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a4dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 800a4f2:	79fb      	ldrb	r3, [r7, #7]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7f9 f8e9 	bl	80036cc <SD_disk_initialize>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	4b04      	ldr	r3, [pc, #16]	@ (800a510 <USER_initialize+0x28>)
 800a500:	701a      	strb	r2, [r3, #0]
    return Stat;
 800a502:	4b03      	ldr	r3, [pc, #12]	@ (800a510 <USER_initialize+0x28>)
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	200000b5 	.word	0x200000b5

0800a514 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	4603      	mov	r3, r0
 800a51c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	4618      	mov	r0, r3
 800a522:	f7f9 f9bd 	bl	80038a0 <SD_disk_status>
 800a526:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	60b9      	str	r1, [r7, #8]
 800a538:	607a      	str	r2, [r7, #4]
 800a53a:	603b      	str	r3, [r7, #0]
 800a53c:	4603      	mov	r3, r0
 800a53e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800a540:	7bf8      	ldrb	r0, [r7, #15]
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	68b9      	ldr	r1, [r7, #8]
 800a548:	f7f9 f9c0 	bl	80038cc <SD_disk_read>
 800a54c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
 800a560:	603b      	str	r3, [r7, #0]
 800a562:	4603      	mov	r3, r0
 800a564:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800a566:	7bf8      	ldrb	r0, [r7, #15]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	68b9      	ldr	r1, [r7, #8]
 800a56e:	f7f9 fa17 	bl	80039a0 <SD_disk_write>
 800a572:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	4603      	mov	r3, r0
 800a584:	603a      	str	r2, [r7, #0]
 800a586:	71fb      	strb	r3, [r7, #7]
 800a588:	460b      	mov	r3, r1
 800a58a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800a58c:	79b9      	ldrb	r1, [r7, #6]
 800a58e:	79fb      	ldrb	r3, [r7, #7]
 800a590:	683a      	ldr	r2, [r7, #0]
 800a592:	4618      	mov	r0, r3
 800a594:	f7f9 fa88 	bl	8003aa8 <SD_disk_ioctl>
 800a598:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a5ae:	79fb      	ldrb	r3, [r7, #7]
 800a5b0:	4a08      	ldr	r2, [pc, #32]	@ (800a5d4 <disk_status+0x30>)
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4413      	add	r3, r2
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	79fa      	ldrb	r2, [r7, #7]
 800a5bc:	4905      	ldr	r1, [pc, #20]	@ (800a5d4 <disk_status+0x30>)
 800a5be:	440a      	add	r2, r1
 800a5c0:	7a12      	ldrb	r2, [r2, #8]
 800a5c2:	4610      	mov	r0, r2
 800a5c4:	4798      	blx	r3
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3710      	adds	r7, #16
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	20000d14 	.word	0x20000d14

0800a5d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	4603      	mov	r3, r0
 800a5e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a5e6:	79fb      	ldrb	r3, [r7, #7]
 800a5e8:	4a0e      	ldr	r2, [pc, #56]	@ (800a624 <disk_initialize+0x4c>)
 800a5ea:	5cd3      	ldrb	r3, [r2, r3]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d114      	bne.n	800a61a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a5f0:	79fb      	ldrb	r3, [r7, #7]
 800a5f2:	4a0c      	ldr	r2, [pc, #48]	@ (800a624 <disk_initialize+0x4c>)
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4413      	add	r3, r2
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	79fa      	ldrb	r2, [r7, #7]
 800a5fe:	4909      	ldr	r1, [pc, #36]	@ (800a624 <disk_initialize+0x4c>)
 800a600:	440a      	add	r2, r1
 800a602:	7a12      	ldrb	r2, [r2, #8]
 800a604:	4610      	mov	r0, r2
 800a606:	4798      	blx	r3
 800a608:	4603      	mov	r3, r0
 800a60a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a60c:	7bfb      	ldrb	r3, [r7, #15]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d103      	bne.n	800a61a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a612:	79fb      	ldrb	r3, [r7, #7]
 800a614:	4a03      	ldr	r2, [pc, #12]	@ (800a624 <disk_initialize+0x4c>)
 800a616:	2101      	movs	r1, #1
 800a618:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	20000d14 	.word	0x20000d14

0800a628 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a628:	b590      	push	{r4, r7, lr}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60b9      	str	r1, [r7, #8]
 800a630:	607a      	str	r2, [r7, #4]
 800a632:	603b      	str	r3, [r7, #0]
 800a634:	4603      	mov	r3, r0
 800a636:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a638:	7bfb      	ldrb	r3, [r7, #15]
 800a63a:	4a0a      	ldr	r2, [pc, #40]	@ (800a664 <disk_read+0x3c>)
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	4413      	add	r3, r2
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	689c      	ldr	r4, [r3, #8]
 800a644:	7bfb      	ldrb	r3, [r7, #15]
 800a646:	4a07      	ldr	r2, [pc, #28]	@ (800a664 <disk_read+0x3c>)
 800a648:	4413      	add	r3, r2
 800a64a:	7a18      	ldrb	r0, [r3, #8]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	68b9      	ldr	r1, [r7, #8]
 800a652:	47a0      	blx	r4
 800a654:	4603      	mov	r3, r0
 800a656:	75fb      	strb	r3, [r7, #23]
  return res;
 800a658:	7dfb      	ldrb	r3, [r7, #23]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	371c      	adds	r7, #28
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd90      	pop	{r4, r7, pc}
 800a662:	bf00      	nop
 800a664:	20000d14 	.word	0x20000d14

0800a668 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a668:	b590      	push	{r4, r7, lr}
 800a66a:	b087      	sub	sp, #28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60b9      	str	r1, [r7, #8]
 800a670:	607a      	str	r2, [r7, #4]
 800a672:	603b      	str	r3, [r7, #0]
 800a674:	4603      	mov	r3, r0
 800a676:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a678:	7bfb      	ldrb	r3, [r7, #15]
 800a67a:	4a0a      	ldr	r2, [pc, #40]	@ (800a6a4 <disk_write+0x3c>)
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4413      	add	r3, r2
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	68dc      	ldr	r4, [r3, #12]
 800a684:	7bfb      	ldrb	r3, [r7, #15]
 800a686:	4a07      	ldr	r2, [pc, #28]	@ (800a6a4 <disk_write+0x3c>)
 800a688:	4413      	add	r3, r2
 800a68a:	7a18      	ldrb	r0, [r3, #8]
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	68b9      	ldr	r1, [r7, #8]
 800a692:	47a0      	blx	r4
 800a694:	4603      	mov	r3, r0
 800a696:	75fb      	strb	r3, [r7, #23]
  return res;
 800a698:	7dfb      	ldrb	r3, [r7, #23]
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	371c      	adds	r7, #28
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd90      	pop	{r4, r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20000d14 	.word	0x20000d14

0800a6a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	603a      	str	r2, [r7, #0]
 800a6b2:	71fb      	strb	r3, [r7, #7]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a6b8:	79fb      	ldrb	r3, [r7, #7]
 800a6ba:	4a09      	ldr	r2, [pc, #36]	@ (800a6e0 <disk_ioctl+0x38>)
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	79fa      	ldrb	r2, [r7, #7]
 800a6c6:	4906      	ldr	r1, [pc, #24]	@ (800a6e0 <disk_ioctl+0x38>)
 800a6c8:	440a      	add	r2, r1
 800a6ca:	7a10      	ldrb	r0, [r2, #8]
 800a6cc:	79b9      	ldrb	r1, [r7, #6]
 800a6ce:	683a      	ldr	r2, [r7, #0]
 800a6d0:	4798      	blx	r3
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	73fb      	strb	r3, [r7, #15]
  return res;
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	20000d14 	.word	0x20000d14

0800a6e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a6f4:	89fb      	ldrh	r3, [r7, #14]
 800a6f6:	021b      	lsls	r3, r3, #8
 800a6f8:	b21a      	sxth	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	b21b      	sxth	r3, r3
 800a700:	4313      	orrs	r3, r2
 800a702:	b21b      	sxth	r3, r3
 800a704:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a706:	89fb      	ldrh	r3, [r7, #14]
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a714:	b480      	push	{r7}
 800a716:	b085      	sub	sp, #20
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3303      	adds	r3, #3
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	021b      	lsls	r3, r3, #8
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	3202      	adds	r2, #2
 800a72c:	7812      	ldrb	r2, [r2, #0]
 800a72e:	4313      	orrs	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	021b      	lsls	r3, r3, #8
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	3201      	adds	r2, #1
 800a73a:	7812      	ldrb	r2, [r2, #0]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	021b      	lsls	r3, r3, #8
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	7812      	ldrb	r2, [r2, #0]
 800a748:	4313      	orrs	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]
	return rv;
 800a74c:	68fb      	ldr	r3, [r7, #12]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3714      	adds	r7, #20
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a75a:	b480      	push	{r7}
 800a75c:	b083      	sub	sp, #12
 800a75e:	af00      	add	r7, sp, #0
 800a760:	6078      	str	r0, [r7, #4]
 800a762:	460b      	mov	r3, r1
 800a764:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	1c5a      	adds	r2, r3, #1
 800a76a:	607a      	str	r2, [r7, #4]
 800a76c:	887a      	ldrh	r2, [r7, #2]
 800a76e:	b2d2      	uxtb	r2, r2
 800a770:	701a      	strb	r2, [r3, #0]
 800a772:	887b      	ldrh	r3, [r7, #2]
 800a774:	0a1b      	lsrs	r3, r3, #8
 800a776:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	1c5a      	adds	r2, r3, #1
 800a77c:	607a      	str	r2, [r7, #4]
 800a77e:	887a      	ldrh	r2, [r7, #2]
 800a780:	b2d2      	uxtb	r2, r2
 800a782:	701a      	strb	r2, [r3, #0]
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	1c5a      	adds	r2, r3, #1
 800a79e:	607a      	str	r2, [r7, #4]
 800a7a0:	683a      	ldr	r2, [r7, #0]
 800a7a2:	b2d2      	uxtb	r2, r2
 800a7a4:	701a      	strb	r2, [r3, #0]
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	0a1b      	lsrs	r3, r3, #8
 800a7aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	1c5a      	adds	r2, r3, #1
 800a7b0:	607a      	str	r2, [r7, #4]
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	b2d2      	uxtb	r2, r2
 800a7b6:	701a      	strb	r2, [r3, #0]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	0a1b      	lsrs	r3, r3, #8
 800a7bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	607a      	str	r2, [r7, #4]
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	b2d2      	uxtb	r2, r2
 800a7c8:	701a      	strb	r2, [r3, #0]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	0a1b      	lsrs	r3, r3, #8
 800a7ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	1c5a      	adds	r2, r3, #1
 800a7d4:	607a      	str	r2, [r7, #4]
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	b2d2      	uxtb	r2, r2
 800a7da:	701a      	strb	r2, [r3, #0]
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a7e8:	b480      	push	{r7}
 800a7ea:	b087      	sub	sp, #28
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00d      	beq.n	800a81e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a802:	693a      	ldr	r2, [r7, #16]
 800a804:	1c53      	adds	r3, r2, #1
 800a806:	613b      	str	r3, [r7, #16]
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	1c59      	adds	r1, r3, #1
 800a80c:	6179      	str	r1, [r7, #20]
 800a80e:	7812      	ldrb	r2, [r2, #0]
 800a810:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	3b01      	subs	r3, #1
 800a816:	607b      	str	r3, [r7, #4]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1f1      	bne.n	800a802 <mem_cpy+0x1a>
	}
}
 800a81e:	bf00      	nop
 800a820:	371c      	adds	r7, #28
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a82a:	b480      	push	{r7}
 800a82c:	b087      	sub	sp, #28
 800a82e:	af00      	add	r7, sp, #0
 800a830:	60f8      	str	r0, [r7, #12]
 800a832:	60b9      	str	r1, [r7, #8]
 800a834:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	617a      	str	r2, [r7, #20]
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	b2d2      	uxtb	r2, r2
 800a844:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	3b01      	subs	r3, #1
 800a84a:	607b      	str	r3, [r7, #4]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1f3      	bne.n	800a83a <mem_set+0x10>
}
 800a852:	bf00      	nop
 800a854:	bf00      	nop
 800a856:	371c      	adds	r7, #28
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a860:	b480      	push	{r7}
 800a862:	b089      	sub	sp, #36	@ 0x24
 800a864:	af00      	add	r7, sp, #0
 800a866:	60f8      	str	r0, [r7, #12]
 800a868:	60b9      	str	r1, [r7, #8]
 800a86a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	61fb      	str	r3, [r7, #28]
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	1c5a      	adds	r2, r3, #1
 800a87c:	61fa      	str	r2, [r7, #28]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	4619      	mov	r1, r3
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	1c5a      	adds	r2, r3, #1
 800a886:	61ba      	str	r2, [r7, #24]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	1acb      	subs	r3, r1, r3
 800a88c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	3b01      	subs	r3, #1
 800a892:	607b      	str	r3, [r7, #4]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d002      	beq.n	800a8a0 <mem_cmp+0x40>
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d0eb      	beq.n	800a878 <mem_cmp+0x18>

	return r;
 800a8a0:	697b      	ldr	r3, [r7, #20]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3724      	adds	r7, #36	@ 0x24
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr

0800a8ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a8ae:	b480      	push	{r7}
 800a8b0:	b083      	sub	sp, #12
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a8b8:	e002      	b.n	800a8c0 <chk_chr+0x12>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	607b      	str	r3, [r7, #4]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d005      	beq.n	800a8d4 <chk_chr+0x26>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d1f2      	bne.n	800a8ba <chk_chr+0xc>
	return *str;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60bb      	str	r3, [r7, #8]
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	60fb      	str	r3, [r7, #12]
 800a8f6:	e029      	b.n	800a94c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a8f8:	4a27      	ldr	r2, [pc, #156]	@ (800a998 <chk_lock+0xb4>)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	011b      	lsls	r3, r3, #4
 800a8fe:	4413      	add	r3, r2
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d01d      	beq.n	800a942 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a906:	4a24      	ldr	r2, [pc, #144]	@ (800a998 <chk_lock+0xb4>)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	011b      	lsls	r3, r3, #4
 800a90c:	4413      	add	r3, r2
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	429a      	cmp	r2, r3
 800a916:	d116      	bne.n	800a946 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a918:	4a1f      	ldr	r2, [pc, #124]	@ (800a998 <chk_lock+0xb4>)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	011b      	lsls	r3, r3, #4
 800a91e:	4413      	add	r3, r2
 800a920:	3304      	adds	r3, #4
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a928:	429a      	cmp	r2, r3
 800a92a:	d10c      	bne.n	800a946 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a92c:	4a1a      	ldr	r2, [pc, #104]	@ (800a998 <chk_lock+0xb4>)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	011b      	lsls	r3, r3, #4
 800a932:	4413      	add	r3, r2
 800a934:	3308      	adds	r3, #8
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d102      	bne.n	800a946 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a940:	e007      	b.n	800a952 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a942:	2301      	movs	r3, #1
 800a944:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	3301      	adds	r3, #1
 800a94a:	60fb      	str	r3, [r7, #12]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d9d2      	bls.n	800a8f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2b02      	cmp	r3, #2
 800a956:	d109      	bne.n	800a96c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d102      	bne.n	800a964 <chk_lock+0x80>
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2b02      	cmp	r3, #2
 800a962:	d101      	bne.n	800a968 <chk_lock+0x84>
 800a964:	2300      	movs	r3, #0
 800a966:	e010      	b.n	800a98a <chk_lock+0xa6>
 800a968:	2312      	movs	r3, #18
 800a96a:	e00e      	b.n	800a98a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d108      	bne.n	800a984 <chk_lock+0xa0>
 800a972:	4a09      	ldr	r2, [pc, #36]	@ (800a998 <chk_lock+0xb4>)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	011b      	lsls	r3, r3, #4
 800a978:	4413      	add	r3, r2
 800a97a:	330c      	adds	r3, #12
 800a97c:	881b      	ldrh	r3, [r3, #0]
 800a97e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a982:	d101      	bne.n	800a988 <chk_lock+0xa4>
 800a984:	2310      	movs	r3, #16
 800a986:	e000      	b.n	800a98a <chk_lock+0xa6>
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3714      	adds	r7, #20
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	20000cf4 	.word	0x20000cf4

0800a99c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	607b      	str	r3, [r7, #4]
 800a9a6:	e002      	b.n	800a9ae <enq_lock+0x12>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	607b      	str	r3, [r7, #4]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d806      	bhi.n	800a9c2 <enq_lock+0x26>
 800a9b4:	4a09      	ldr	r2, [pc, #36]	@ (800a9dc <enq_lock+0x40>)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	011b      	lsls	r3, r3, #4
 800a9ba:	4413      	add	r3, r2
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d1f2      	bne.n	800a9a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	bf14      	ite	ne
 800a9c8:	2301      	movne	r3, #1
 800a9ca:	2300      	moveq	r3, #0
 800a9cc:	b2db      	uxtb	r3, r3
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	20000cf4 	.word	0x20000cf4

0800a9e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	60fb      	str	r3, [r7, #12]
 800a9ee:	e01f      	b.n	800aa30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a9f0:	4a41      	ldr	r2, [pc, #260]	@ (800aaf8 <inc_lock+0x118>)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	011b      	lsls	r3, r3, #4
 800a9f6:	4413      	add	r3, r2
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d113      	bne.n	800aa2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800aa02:	4a3d      	ldr	r2, [pc, #244]	@ (800aaf8 <inc_lock+0x118>)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	011b      	lsls	r3, r3, #4
 800aa08:	4413      	add	r3, r2
 800aa0a:	3304      	adds	r3, #4
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d109      	bne.n	800aa2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800aa16:	4a38      	ldr	r2, [pc, #224]	@ (800aaf8 <inc_lock+0x118>)
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	011b      	lsls	r3, r3, #4
 800aa1c:	4413      	add	r3, r2
 800aa1e:	3308      	adds	r3, #8
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d006      	beq.n	800aa38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	60fb      	str	r3, [r7, #12]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d9dc      	bls.n	800a9f0 <inc_lock+0x10>
 800aa36:	e000      	b.n	800aa3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800aa38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d132      	bne.n	800aaa6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aa40:	2300      	movs	r3, #0
 800aa42:	60fb      	str	r3, [r7, #12]
 800aa44:	e002      	b.n	800aa4c <inc_lock+0x6c>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	60fb      	str	r3, [r7, #12]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d806      	bhi.n	800aa60 <inc_lock+0x80>
 800aa52:	4a29      	ldr	r2, [pc, #164]	@ (800aaf8 <inc_lock+0x118>)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	011b      	lsls	r3, r3, #4
 800aa58:	4413      	add	r3, r2
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d1f2      	bne.n	800aa46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	d101      	bne.n	800aa6a <inc_lock+0x8a>
 800aa66:	2300      	movs	r3, #0
 800aa68:	e040      	b.n	800aaec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	4922      	ldr	r1, [pc, #136]	@ (800aaf8 <inc_lock+0x118>)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	011b      	lsls	r3, r3, #4
 800aa74:	440b      	add	r3, r1
 800aa76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	689a      	ldr	r2, [r3, #8]
 800aa7c:	491e      	ldr	r1, [pc, #120]	@ (800aaf8 <inc_lock+0x118>)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	011b      	lsls	r3, r3, #4
 800aa82:	440b      	add	r3, r1
 800aa84:	3304      	adds	r3, #4
 800aa86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	695a      	ldr	r2, [r3, #20]
 800aa8c:	491a      	ldr	r1, [pc, #104]	@ (800aaf8 <inc_lock+0x118>)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	011b      	lsls	r3, r3, #4
 800aa92:	440b      	add	r3, r1
 800aa94:	3308      	adds	r3, #8
 800aa96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800aa98:	4a17      	ldr	r2, [pc, #92]	@ (800aaf8 <inc_lock+0x118>)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	011b      	lsls	r3, r3, #4
 800aa9e:	4413      	add	r3, r2
 800aaa0:	330c      	adds	r3, #12
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d009      	beq.n	800aac0 <inc_lock+0xe0>
 800aaac:	4a12      	ldr	r2, [pc, #72]	@ (800aaf8 <inc_lock+0x118>)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	011b      	lsls	r3, r3, #4
 800aab2:	4413      	add	r3, r2
 800aab4:	330c      	adds	r3, #12
 800aab6:	881b      	ldrh	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d001      	beq.n	800aac0 <inc_lock+0xe0>
 800aabc:	2300      	movs	r3, #0
 800aabe:	e015      	b.n	800aaec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d108      	bne.n	800aad8 <inc_lock+0xf8>
 800aac6:	4a0c      	ldr	r2, [pc, #48]	@ (800aaf8 <inc_lock+0x118>)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	011b      	lsls	r3, r3, #4
 800aacc:	4413      	add	r3, r2
 800aace:	330c      	adds	r3, #12
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	3301      	adds	r3, #1
 800aad4:	b29a      	uxth	r2, r3
 800aad6:	e001      	b.n	800aadc <inc_lock+0xfc>
 800aad8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aadc:	4906      	ldr	r1, [pc, #24]	@ (800aaf8 <inc_lock+0x118>)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	011b      	lsls	r3, r3, #4
 800aae2:	440b      	add	r3, r1
 800aae4:	330c      	adds	r3, #12
 800aae6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	3301      	adds	r3, #1
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr
 800aaf8:	20000cf4 	.word	0x20000cf4

0800aafc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	3b01      	subs	r3, #1
 800ab08:	607b      	str	r3, [r7, #4]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d825      	bhi.n	800ab5c <dec_lock+0x60>
		n = Files[i].ctr;
 800ab10:	4a17      	ldr	r2, [pc, #92]	@ (800ab70 <dec_lock+0x74>)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	011b      	lsls	r3, r3, #4
 800ab16:	4413      	add	r3, r2
 800ab18:	330c      	adds	r3, #12
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ab1e:	89fb      	ldrh	r3, [r7, #14]
 800ab20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab24:	d101      	bne.n	800ab2a <dec_lock+0x2e>
 800ab26:	2300      	movs	r3, #0
 800ab28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ab2a:	89fb      	ldrh	r3, [r7, #14]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <dec_lock+0x3a>
 800ab30:	89fb      	ldrh	r3, [r7, #14]
 800ab32:	3b01      	subs	r3, #1
 800ab34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ab36:	4a0e      	ldr	r2, [pc, #56]	@ (800ab70 <dec_lock+0x74>)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	011b      	lsls	r3, r3, #4
 800ab3c:	4413      	add	r3, r2
 800ab3e:	330c      	adds	r3, #12
 800ab40:	89fa      	ldrh	r2, [r7, #14]
 800ab42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ab44:	89fb      	ldrh	r3, [r7, #14]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d105      	bne.n	800ab56 <dec_lock+0x5a>
 800ab4a:	4a09      	ldr	r2, [pc, #36]	@ (800ab70 <dec_lock+0x74>)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	011b      	lsls	r3, r3, #4
 800ab50:	4413      	add	r3, r2
 800ab52:	2200      	movs	r2, #0
 800ab54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	737b      	strb	r3, [r7, #13]
 800ab5a:	e001      	b.n	800ab60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ab60:	7b7b      	ldrb	r3, [r7, #13]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3714      	adds	r7, #20
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	20000cf4 	.word	0x20000cf4

0800ab74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	60fb      	str	r3, [r7, #12]
 800ab80:	e010      	b.n	800aba4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ab82:	4a0d      	ldr	r2, [pc, #52]	@ (800abb8 <clear_lock+0x44>)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	011b      	lsls	r3, r3, #4
 800ab88:	4413      	add	r3, r2
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d105      	bne.n	800ab9e <clear_lock+0x2a>
 800ab92:	4a09      	ldr	r2, [pc, #36]	@ (800abb8 <clear_lock+0x44>)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	011b      	lsls	r3, r3, #4
 800ab98:	4413      	add	r3, r2
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	3301      	adds	r3, #1
 800aba2:	60fb      	str	r3, [r7, #12]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d9eb      	bls.n	800ab82 <clear_lock+0xe>
	}
}
 800abaa:	bf00      	nop
 800abac:	bf00      	nop
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	20000cf4 	.word	0x20000cf4

0800abbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	78db      	ldrb	r3, [r3, #3]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d034      	beq.n	800ac3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	7858      	ldrb	r0, [r3, #1]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800abe0:	2301      	movs	r3, #1
 800abe2:	697a      	ldr	r2, [r7, #20]
 800abe4:	f7ff fd40 	bl	800a668 <disk_write>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d002      	beq.n	800abf4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800abee:	2301      	movs	r3, #1
 800abf0:	73fb      	strb	r3, [r7, #15]
 800abf2:	e022      	b.n	800ac3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2200      	movs	r2, #0
 800abf8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	1ad2      	subs	r2, r2, r3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	69db      	ldr	r3, [r3, #28]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d217      	bcs.n	800ac3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	789b      	ldrb	r3, [r3, #2]
 800ac0e:	613b      	str	r3, [r7, #16]
 800ac10:	e010      	b.n	800ac34 <sync_window+0x78>
					wsect += fs->fsize;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	4413      	add	r3, r2
 800ac1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	7858      	ldrb	r0, [r3, #1]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ac26:	2301      	movs	r3, #1
 800ac28:	697a      	ldr	r2, [r7, #20]
 800ac2a:	f7ff fd1d 	bl	800a668 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	3b01      	subs	r3, #1
 800ac32:	613b      	str	r3, [r7, #16]
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d8eb      	bhi.n	800ac12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3718      	adds	r7, #24
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac56:	683a      	ldr	r2, [r7, #0]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d01b      	beq.n	800ac94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f7ff ffad 	bl	800abbc <sync_window>
 800ac62:	4603      	mov	r3, r0
 800ac64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ac66:	7bfb      	ldrb	r3, [r7, #15]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d113      	bne.n	800ac94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	7858      	ldrb	r0, [r3, #1]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ac76:	2301      	movs	r3, #1
 800ac78:	683a      	ldr	r2, [r7, #0]
 800ac7a:	f7ff fcd5 	bl	800a628 <disk_read>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d004      	beq.n	800ac8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ac84:	f04f 33ff 	mov.w	r3, #4294967295
 800ac88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800ac94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
	...

0800aca0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7ff ff87 	bl	800abbc <sync_window>
 800acae:	4603      	mov	r3, r0
 800acb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800acb2:	7bfb      	ldrb	r3, [r7, #15]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d158      	bne.n	800ad6a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	2b03      	cmp	r3, #3
 800acbe:	d148      	bne.n	800ad52 <sync_fs+0xb2>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	791b      	ldrb	r3, [r3, #4]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d144      	bne.n	800ad52 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	3334      	adds	r3, #52	@ 0x34
 800accc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800acd0:	2100      	movs	r1, #0
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7ff fda9 	bl	800a82a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	3334      	adds	r3, #52	@ 0x34
 800acdc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ace0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7ff fd38 	bl	800a75a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	3334      	adds	r3, #52	@ 0x34
 800acee:	4921      	ldr	r1, [pc, #132]	@ (800ad74 <sync_fs+0xd4>)
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7ff fd4d 	bl	800a790 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	3334      	adds	r3, #52	@ 0x34
 800acfa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800acfe:	491e      	ldr	r1, [pc, #120]	@ (800ad78 <sync_fs+0xd8>)
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7ff fd45 	bl	800a790 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	3334      	adds	r3, #52	@ 0x34
 800ad0a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	4619      	mov	r1, r3
 800ad14:	4610      	mov	r0, r2
 800ad16:	f7ff fd3b 	bl	800a790 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	3334      	adds	r3, #52	@ 0x34
 800ad1e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	4619      	mov	r1, r3
 800ad28:	4610      	mov	r0, r2
 800ad2a:	f7ff fd31 	bl	800a790 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	1c5a      	adds	r2, r3, #1
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	7858      	ldrb	r0, [r3, #1]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad46:	2301      	movs	r3, #1
 800ad48:	f7ff fc8e 	bl	800a668 <disk_write>
			fs->fsi_flag = 0;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	785b      	ldrb	r3, [r3, #1]
 800ad56:	2200      	movs	r2, #0
 800ad58:	2100      	movs	r1, #0
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7ff fca4 	bl	800a6a8 <disk_ioctl>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d001      	beq.n	800ad6a <sync_fs+0xca>
 800ad66:	2301      	movs	r3, #1
 800ad68:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	41615252 	.word	0x41615252
 800ad78:	61417272 	.word	0x61417272

0800ad7c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	3b02      	subs	r3, #2
 800ad8a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	3b02      	subs	r3, #2
 800ad92:	683a      	ldr	r2, [r7, #0]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d301      	bcc.n	800ad9c <clust2sect+0x20>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	e008      	b.n	800adae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	895b      	ldrh	r3, [r3, #10]
 800ada0:	461a      	mov	r2, r3
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	fb03 f202 	mul.w	r2, r3, r2
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adac:	4413      	add	r3, r2
}
 800adae:	4618      	mov	r0, r3
 800adb0:	370c      	adds	r7, #12
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b086      	sub	sp, #24
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d904      	bls.n	800adda <get_fat+0x20>
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	683a      	ldr	r2, [r7, #0]
 800add6:	429a      	cmp	r2, r3
 800add8:	d302      	bcc.n	800ade0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800adda:	2301      	movs	r3, #1
 800addc:	617b      	str	r3, [r7, #20]
 800adde:	e08e      	b.n	800aefe <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ade0:	f04f 33ff 	mov.w	r3, #4294967295
 800ade4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	2b03      	cmp	r3, #3
 800adec:	d061      	beq.n	800aeb2 <get_fat+0xf8>
 800adee:	2b03      	cmp	r3, #3
 800adf0:	dc7b      	bgt.n	800aeea <get_fat+0x130>
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d002      	beq.n	800adfc <get_fat+0x42>
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d041      	beq.n	800ae7e <get_fat+0xc4>
 800adfa:	e076      	b.n	800aeea <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	085b      	lsrs	r3, r3, #1
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	4413      	add	r3, r2
 800ae08:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	0a5b      	lsrs	r3, r3, #9
 800ae12:	4413      	add	r3, r2
 800ae14:	4619      	mov	r1, r3
 800ae16:	6938      	ldr	r0, [r7, #16]
 800ae18:	f7ff ff14 	bl	800ac44 <move_window>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d166      	bne.n	800aef0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	1c5a      	adds	r2, r3, #1
 800ae26:	60fa      	str	r2, [r7, #12]
 800ae28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae2c:	693a      	ldr	r2, [r7, #16]
 800ae2e:	4413      	add	r3, r2
 800ae30:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ae34:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	0a5b      	lsrs	r3, r3, #9
 800ae3e:	4413      	add	r3, r2
 800ae40:	4619      	mov	r1, r3
 800ae42:	6938      	ldr	r0, [r7, #16]
 800ae44:	f7ff fefe 	bl	800ac44 <move_window>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d152      	bne.n	800aef4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae54:	693a      	ldr	r2, [r7, #16]
 800ae56:	4413      	add	r3, r2
 800ae58:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ae5c:	021b      	lsls	r3, r3, #8
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	f003 0301 	and.w	r3, r3, #1
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d002      	beq.n	800ae74 <get_fat+0xba>
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	091b      	lsrs	r3, r3, #4
 800ae72:	e002      	b.n	800ae7a <get_fat+0xc0>
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae7a:	617b      	str	r3, [r7, #20]
			break;
 800ae7c:	e03f      	b.n	800aefe <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	0a1b      	lsrs	r3, r3, #8
 800ae86:	4413      	add	r3, r2
 800ae88:	4619      	mov	r1, r3
 800ae8a:	6938      	ldr	r0, [r7, #16]
 800ae8c:	f7ff feda 	bl	800ac44 <move_window>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d130      	bne.n	800aef8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	005b      	lsls	r3, r3, #1
 800aea0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800aea4:	4413      	add	r3, r2
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7ff fc1c 	bl	800a6e4 <ld_word>
 800aeac:	4603      	mov	r3, r0
 800aeae:	617b      	str	r3, [r7, #20]
			break;
 800aeb0:	e025      	b.n	800aefe <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	09db      	lsrs	r3, r3, #7
 800aeba:	4413      	add	r3, r2
 800aebc:	4619      	mov	r1, r3
 800aebe:	6938      	ldr	r0, [r7, #16]
 800aec0:	f7ff fec0 	bl	800ac44 <move_window>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d118      	bne.n	800aefc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800aed8:	4413      	add	r3, r2
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7ff fc1a 	bl	800a714 <ld_dword>
 800aee0:	4603      	mov	r3, r0
 800aee2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800aee6:	617b      	str	r3, [r7, #20]
			break;
 800aee8:	e009      	b.n	800aefe <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800aeea:	2301      	movs	r3, #1
 800aeec:	617b      	str	r3, [r7, #20]
 800aeee:	e006      	b.n	800aefe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aef0:	bf00      	nop
 800aef2:	e004      	b.n	800aefe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aef4:	bf00      	nop
 800aef6:	e002      	b.n	800aefe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aef8:	bf00      	nop
 800aefa:	e000      	b.n	800aefe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aefc:	bf00      	nop
		}
	}

	return val;
 800aefe:	697b      	ldr	r3, [r7, #20]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3718      	adds	r7, #24
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800af08:	b590      	push	{r4, r7, lr}
 800af0a:	b089      	sub	sp, #36	@ 0x24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800af14:	2302      	movs	r3, #2
 800af16:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	f240 80d9 	bls.w	800b0d2 <put_fat+0x1ca>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	68ba      	ldr	r2, [r7, #8]
 800af26:	429a      	cmp	r2, r3
 800af28:	f080 80d3 	bcs.w	800b0d2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	2b03      	cmp	r3, #3
 800af32:	f000 8096 	beq.w	800b062 <put_fat+0x15a>
 800af36:	2b03      	cmp	r3, #3
 800af38:	f300 80cb 	bgt.w	800b0d2 <put_fat+0x1ca>
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d002      	beq.n	800af46 <put_fat+0x3e>
 800af40:	2b02      	cmp	r3, #2
 800af42:	d06e      	beq.n	800b022 <put_fat+0x11a>
 800af44:	e0c5      	b.n	800b0d2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	61bb      	str	r3, [r7, #24]
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	085b      	lsrs	r3, r3, #1
 800af4e:	69ba      	ldr	r2, [r7, #24]
 800af50:	4413      	add	r3, r2
 800af52:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	0a5b      	lsrs	r3, r3, #9
 800af5c:	4413      	add	r3, r2
 800af5e:	4619      	mov	r1, r3
 800af60:	68f8      	ldr	r0, [r7, #12]
 800af62:	f7ff fe6f 	bl	800ac44 <move_window>
 800af66:	4603      	mov	r3, r0
 800af68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af6a:	7ffb      	ldrb	r3, [r7, #31]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f040 80a9 	bne.w	800b0c4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	1c59      	adds	r1, r3, #1
 800af7c:	61b9      	str	r1, [r7, #24]
 800af7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af82:	4413      	add	r3, r2
 800af84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00d      	beq.n	800afac <put_fat+0xa4>
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	b25b      	sxtb	r3, r3
 800af96:	f003 030f 	and.w	r3, r3, #15
 800af9a:	b25a      	sxtb	r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	011b      	lsls	r3, r3, #4
 800afa2:	b25b      	sxtb	r3, r3
 800afa4:	4313      	orrs	r3, r2
 800afa6:	b25b      	sxtb	r3, r3
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	e001      	b.n	800afb0 <put_fat+0xa8>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2201      	movs	r2, #1
 800afb8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	0a5b      	lsrs	r3, r3, #9
 800afc2:	4413      	add	r3, r2
 800afc4:	4619      	mov	r1, r3
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f7ff fe3c 	bl	800ac44 <move_window>
 800afcc:	4603      	mov	r3, r0
 800afce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800afd0:	7ffb      	ldrb	r3, [r7, #31]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d178      	bne.n	800b0c8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800afdc:	69bb      	ldr	r3, [r7, #24]
 800afde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afe2:	4413      	add	r3, r2
 800afe4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	f003 0301 	and.w	r3, r3, #1
 800afec:	2b00      	cmp	r3, #0
 800afee:	d003      	beq.n	800aff8 <put_fat+0xf0>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	091b      	lsrs	r3, r3, #4
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	e00e      	b.n	800b016 <put_fat+0x10e>
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	b25b      	sxtb	r3, r3
 800affe:	f023 030f 	bic.w	r3, r3, #15
 800b002:	b25a      	sxtb	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	0a1b      	lsrs	r3, r3, #8
 800b008:	b25b      	sxtb	r3, r3
 800b00a:	f003 030f 	and.w	r3, r3, #15
 800b00e:	b25b      	sxtb	r3, r3
 800b010:	4313      	orrs	r3, r2
 800b012:	b25b      	sxtb	r3, r3
 800b014:	b2db      	uxtb	r3, r3
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2201      	movs	r2, #1
 800b01e:	70da      	strb	r2, [r3, #3]
			break;
 800b020:	e057      	b.n	800b0d2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	0a1b      	lsrs	r3, r3, #8
 800b02a:	4413      	add	r3, r2
 800b02c:	4619      	mov	r1, r3
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f7ff fe08 	bl	800ac44 <move_window>
 800b034:	4603      	mov	r3, r0
 800b036:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b038:	7ffb      	ldrb	r3, [r7, #31]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d146      	bne.n	800b0cc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	005b      	lsls	r3, r3, #1
 800b048:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b04c:	4413      	add	r3, r2
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	b292      	uxth	r2, r2
 800b052:	4611      	mov	r1, r2
 800b054:	4618      	mov	r0, r3
 800b056:	f7ff fb80 	bl	800a75a <st_word>
			fs->wflag = 1;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2201      	movs	r2, #1
 800b05e:	70da      	strb	r2, [r3, #3]
			break;
 800b060:	e037      	b.n	800b0d2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	09db      	lsrs	r3, r3, #7
 800b06a:	4413      	add	r3, r2
 800b06c:	4619      	mov	r1, r3
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f7ff fde8 	bl	800ac44 <move_window>
 800b074:	4603      	mov	r3, r0
 800b076:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b078:	7ffb      	ldrb	r3, [r7, #31]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d128      	bne.n	800b0d0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b092:	4413      	add	r3, r2
 800b094:	4618      	mov	r0, r3
 800b096:	f7ff fb3d 	bl	800a714 <ld_dword>
 800b09a:	4603      	mov	r3, r0
 800b09c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b0a0:	4323      	orrs	r3, r4
 800b0a2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b0b2:	4413      	add	r3, r2
 800b0b4:	6879      	ldr	r1, [r7, #4]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7ff fb6a 	bl	800a790 <st_dword>
			fs->wflag = 1;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	70da      	strb	r2, [r3, #3]
			break;
 800b0c2:	e006      	b.n	800b0d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b0c4:	bf00      	nop
 800b0c6:	e004      	b.n	800b0d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b0c8:	bf00      	nop
 800b0ca:	e002      	b.n	800b0d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b0cc:	bf00      	nop
 800b0ce:	e000      	b.n	800b0d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b0d0:	bf00      	nop
		}
	}
	return res;
 800b0d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3724      	adds	r7, #36	@ 0x24
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd90      	pop	{r4, r7, pc}

0800b0dc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b088      	sub	sp, #32
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d904      	bls.n	800b102 <remove_chain+0x26>
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	699b      	ldr	r3, [r3, #24]
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d301      	bcc.n	800b106 <remove_chain+0x2a>
 800b102:	2302      	movs	r3, #2
 800b104:	e04b      	b.n	800b19e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00c      	beq.n	800b126 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b10c:	f04f 32ff 	mov.w	r2, #4294967295
 800b110:	6879      	ldr	r1, [r7, #4]
 800b112:	69b8      	ldr	r0, [r7, #24]
 800b114:	f7ff fef8 	bl	800af08 <put_fat>
 800b118:	4603      	mov	r3, r0
 800b11a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b11c:	7ffb      	ldrb	r3, [r7, #31]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d001      	beq.n	800b126 <remove_chain+0x4a>
 800b122:	7ffb      	ldrb	r3, [r7, #31]
 800b124:	e03b      	b.n	800b19e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b126:	68b9      	ldr	r1, [r7, #8]
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f7ff fe46 	bl	800adba <get_fat>
 800b12e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d031      	beq.n	800b19a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d101      	bne.n	800b140 <remove_chain+0x64>
 800b13c:	2302      	movs	r3, #2
 800b13e:	e02e      	b.n	800b19e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b146:	d101      	bne.n	800b14c <remove_chain+0x70>
 800b148:	2301      	movs	r3, #1
 800b14a:	e028      	b.n	800b19e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b14c:	2200      	movs	r2, #0
 800b14e:	68b9      	ldr	r1, [r7, #8]
 800b150:	69b8      	ldr	r0, [r7, #24]
 800b152:	f7ff fed9 	bl	800af08 <put_fat>
 800b156:	4603      	mov	r3, r0
 800b158:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b15a:	7ffb      	ldrb	r3, [r7, #31]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d001      	beq.n	800b164 <remove_chain+0x88>
 800b160:	7ffb      	ldrb	r3, [r7, #31]
 800b162:	e01c      	b.n	800b19e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	691a      	ldr	r2, [r3, #16]
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	699b      	ldr	r3, [r3, #24]
 800b16c:	3b02      	subs	r3, #2
 800b16e:	429a      	cmp	r2, r3
 800b170:	d20b      	bcs.n	800b18a <remove_chain+0xae>
			fs->free_clst++;
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	1c5a      	adds	r2, r3, #1
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	791b      	ldrb	r3, [r3, #4]
 800b180:	f043 0301 	orr.w	r3, r3, #1
 800b184:	b2da      	uxtb	r2, r3
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	699b      	ldr	r3, [r3, #24]
 800b192:	68ba      	ldr	r2, [r7, #8]
 800b194:	429a      	cmp	r2, r3
 800b196:	d3c6      	bcc.n	800b126 <remove_chain+0x4a>
 800b198:	e000      	b.n	800b19c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b19a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3720      	adds	r7, #32
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b088      	sub	sp, #32
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10d      	bne.n	800b1d8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d004      	beq.n	800b1d2 <create_chain+0x2c>
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	69ba      	ldr	r2, [r7, #24]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d31b      	bcc.n	800b20a <create_chain+0x64>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	61bb      	str	r3, [r7, #24]
 800b1d6:	e018      	b.n	800b20a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f7ff fded 	bl	800adba <get_fat>
 800b1e0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d801      	bhi.n	800b1ec <create_chain+0x46>
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e070      	b.n	800b2ce <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f2:	d101      	bne.n	800b1f8 <create_chain+0x52>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	e06a      	b.n	800b2ce <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	699b      	ldr	r3, [r3, #24]
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d201      	bcs.n	800b206 <create_chain+0x60>
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	e063      	b.n	800b2ce <create_chain+0x128>
		scl = clst;
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	3301      	adds	r3, #1
 800b212:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	69fa      	ldr	r2, [r7, #28]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d307      	bcc.n	800b22e <create_chain+0x88>
				ncl = 2;
 800b21e:	2302      	movs	r3, #2
 800b220:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b222:	69fa      	ldr	r2, [r7, #28]
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	429a      	cmp	r2, r3
 800b228:	d901      	bls.n	800b22e <create_chain+0x88>
 800b22a:	2300      	movs	r3, #0
 800b22c:	e04f      	b.n	800b2ce <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b22e:	69f9      	ldr	r1, [r7, #28]
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f7ff fdc2 	bl	800adba <get_fat>
 800b236:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d00e      	beq.n	800b25c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d003      	beq.n	800b24c <create_chain+0xa6>
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b24a:	d101      	bne.n	800b250 <create_chain+0xaa>
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	e03e      	b.n	800b2ce <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b250:	69fa      	ldr	r2, [r7, #28]
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	429a      	cmp	r2, r3
 800b256:	d1da      	bne.n	800b20e <create_chain+0x68>
 800b258:	2300      	movs	r3, #0
 800b25a:	e038      	b.n	800b2ce <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b25c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b25e:	f04f 32ff 	mov.w	r2, #4294967295
 800b262:	69f9      	ldr	r1, [r7, #28]
 800b264:	6938      	ldr	r0, [r7, #16]
 800b266:	f7ff fe4f 	bl	800af08 <put_fat>
 800b26a:	4603      	mov	r3, r0
 800b26c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d109      	bne.n	800b288 <create_chain+0xe2>
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d006      	beq.n	800b288 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b27a:	69fa      	ldr	r2, [r7, #28]
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6938      	ldr	r0, [r7, #16]
 800b280:	f7ff fe42 	bl	800af08 <put_fat>
 800b284:	4603      	mov	r3, r0
 800b286:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b288:	7dfb      	ldrb	r3, [r7, #23]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d116      	bne.n	800b2bc <create_chain+0x116>
		fs->last_clst = ncl;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	69fa      	ldr	r2, [r7, #28]
 800b292:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	691a      	ldr	r2, [r3, #16]
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	699b      	ldr	r3, [r3, #24]
 800b29c:	3b02      	subs	r3, #2
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d804      	bhi.n	800b2ac <create_chain+0x106>
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	691b      	ldr	r3, [r3, #16]
 800b2a6:	1e5a      	subs	r2, r3, #1
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	791b      	ldrb	r3, [r3, #4]
 800b2b0:	f043 0301 	orr.w	r3, r3, #1
 800b2b4:	b2da      	uxtb	r2, r3
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	711a      	strb	r2, [r3, #4]
 800b2ba:	e007      	b.n	800b2cc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b2bc:	7dfb      	ldrb	r3, [r7, #23]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d102      	bne.n	800b2c8 <create_chain+0x122>
 800b2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c6:	e000      	b.n	800b2ca <create_chain+0x124>
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b2cc:	69fb      	ldr	r3, [r7, #28]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3720      	adds	r7, #32
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	b087      	sub	sp, #28
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ea:	3304      	adds	r3, #4
 800b2ec:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	0a5b      	lsrs	r3, r3, #9
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	8952      	ldrh	r2, [r2, #10]
 800b2f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	1d1a      	adds	r2, r3, #4
 800b300:	613a      	str	r2, [r7, #16]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <clmt_clust+0x3a>
 800b30c:	2300      	movs	r3, #0
 800b30e:	e010      	b.n	800b332 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	429a      	cmp	r2, r3
 800b316:	d307      	bcc.n	800b328 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	1ad3      	subs	r3, r2, r3
 800b31e:	617b      	str	r3, [r7, #20]
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	3304      	adds	r3, #4
 800b324:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b326:	e7e9      	b.n	800b2fc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b328:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	4413      	add	r3, r2
}
 800b332:	4618      	mov	r0, r3
 800b334:	371c      	adds	r7, #28
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b086      	sub	sp, #24
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b354:	d204      	bcs.n	800b360 <dir_sdi+0x22>
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	f003 031f 	and.w	r3, r3, #31
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d001      	beq.n	800b364 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b360:	2302      	movs	r3, #2
 800b362:	e063      	b.n	800b42c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d106      	bne.n	800b384 <dir_sdi+0x46>
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d902      	bls.n	800b384 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b382:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d10c      	bne.n	800b3a4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	095b      	lsrs	r3, r3, #5
 800b38e:	693a      	ldr	r2, [r7, #16]
 800b390:	8912      	ldrh	r2, [r2, #8]
 800b392:	4293      	cmp	r3, r2
 800b394:	d301      	bcc.n	800b39a <dir_sdi+0x5c>
 800b396:	2302      	movs	r3, #2
 800b398:	e048      	b.n	800b42c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	61da      	str	r2, [r3, #28]
 800b3a2:	e029      	b.n	800b3f8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	895b      	ldrh	r3, [r3, #10]
 800b3a8:	025b      	lsls	r3, r3, #9
 800b3aa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b3ac:	e019      	b.n	800b3e2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6979      	ldr	r1, [r7, #20]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7ff fd01 	bl	800adba <get_fat>
 800b3b8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c0:	d101      	bne.n	800b3c6 <dir_sdi+0x88>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e032      	b.n	800b42c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d904      	bls.n	800b3d6 <dir_sdi+0x98>
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	699b      	ldr	r3, [r3, #24]
 800b3d0:	697a      	ldr	r2, [r7, #20]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d301      	bcc.n	800b3da <dir_sdi+0x9c>
 800b3d6:	2302      	movs	r3, #2
 800b3d8:	e028      	b.n	800b42c <dir_sdi+0xee>
			ofs -= csz;
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d2e1      	bcs.n	800b3ae <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b3ea:	6979      	ldr	r1, [r7, #20]
 800b3ec:	6938      	ldr	r0, [r7, #16]
 800b3ee:	f7ff fcc5 	bl	800ad7c <clust2sect>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	697a      	ldr	r2, [r7, #20]
 800b3fc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	69db      	ldr	r3, [r3, #28]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d101      	bne.n	800b40a <dir_sdi+0xcc>
 800b406:	2302      	movs	r3, #2
 800b408:	e010      	b.n	800b42c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	69da      	ldr	r2, [r3, #28]
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	0a5b      	lsrs	r3, r3, #9
 800b412:	441a      	add	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b424:	441a      	add	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3718      	adds	r7, #24
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b086      	sub	sp, #24
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	695b      	ldr	r3, [r3, #20]
 800b448:	3320      	adds	r3, #32
 800b44a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	69db      	ldr	r3, [r3, #28]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d003      	beq.n	800b45c <dir_next+0x28>
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b45a:	d301      	bcc.n	800b460 <dir_next+0x2c>
 800b45c:	2304      	movs	r3, #4
 800b45e:	e0aa      	b.n	800b5b6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b466:	2b00      	cmp	r3, #0
 800b468:	f040 8098 	bne.w	800b59c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	69db      	ldr	r3, [r3, #28]
 800b470:	1c5a      	adds	r2, r3, #1
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	699b      	ldr	r3, [r3, #24]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10b      	bne.n	800b496 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	095b      	lsrs	r3, r3, #5
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	8912      	ldrh	r2, [r2, #8]
 800b486:	4293      	cmp	r3, r2
 800b488:	f0c0 8088 	bcc.w	800b59c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	61da      	str	r2, [r3, #28]
 800b492:	2304      	movs	r3, #4
 800b494:	e08f      	b.n	800b5b6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	0a5b      	lsrs	r3, r3, #9
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	8952      	ldrh	r2, [r2, #10]
 800b49e:	3a01      	subs	r2, #1
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d17a      	bne.n	800b59c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	699b      	ldr	r3, [r3, #24]
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	f7ff fc83 	bl	800adba <get_fat>
 800b4b4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d801      	bhi.n	800b4c0 <dir_next+0x8c>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	e07a      	b.n	800b5b6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c6:	d101      	bne.n	800b4cc <dir_next+0x98>
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e074      	b.n	800b5b6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	697a      	ldr	r2, [r7, #20]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d358      	bcc.n	800b588 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d104      	bne.n	800b4e6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	61da      	str	r2, [r3, #28]
 800b4e2:	2304      	movs	r3, #4
 800b4e4:	e067      	b.n	800b5b6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	699b      	ldr	r3, [r3, #24]
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	f7ff fe59 	bl	800b1a6 <create_chain>
 800b4f4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d101      	bne.n	800b500 <dir_next+0xcc>
 800b4fc:	2307      	movs	r3, #7
 800b4fe:	e05a      	b.n	800b5b6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d101      	bne.n	800b50a <dir_next+0xd6>
 800b506:	2302      	movs	r3, #2
 800b508:	e055      	b.n	800b5b6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b510:	d101      	bne.n	800b516 <dir_next+0xe2>
 800b512:	2301      	movs	r3, #1
 800b514:	e04f      	b.n	800b5b6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f7ff fb50 	bl	800abbc <sync_window>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d001      	beq.n	800b526 <dir_next+0xf2>
 800b522:	2301      	movs	r3, #1
 800b524:	e047      	b.n	800b5b6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	3334      	adds	r3, #52	@ 0x34
 800b52a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b52e:	2100      	movs	r1, #0
 800b530:	4618      	mov	r0, r3
 800b532:	f7ff f97a 	bl	800a82a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b536:	2300      	movs	r3, #0
 800b538:	613b      	str	r3, [r7, #16]
 800b53a:	6979      	ldr	r1, [r7, #20]
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f7ff fc1d 	bl	800ad7c <clust2sect>
 800b542:	4602      	mov	r2, r0
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	631a      	str	r2, [r3, #48]	@ 0x30
 800b548:	e012      	b.n	800b570 <dir_next+0x13c>
						fs->wflag = 1;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2201      	movs	r2, #1
 800b54e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f7ff fb33 	bl	800abbc <sync_window>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d001      	beq.n	800b560 <dir_next+0x12c>
 800b55c:	2301      	movs	r3, #1
 800b55e:	e02a      	b.n	800b5b6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	3301      	adds	r3, #1
 800b564:	613b      	str	r3, [r7, #16]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b56a:	1c5a      	adds	r2, r3, #1
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	631a      	str	r2, [r3, #48]	@ 0x30
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	895b      	ldrh	r3, [r3, #10]
 800b574:	461a      	mov	r2, r3
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	4293      	cmp	r3, r2
 800b57a:	d3e6      	bcc.n	800b54a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	1ad2      	subs	r2, r2, r3
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b58e:	6979      	ldr	r1, [r7, #20]
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f7ff fbf3 	bl	800ad7c <clust2sect>
 800b596:	4602      	mov	r2, r0
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68ba      	ldr	r2, [r7, #8]
 800b5a0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ae:	441a      	add	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3718      	adds	r7, #24
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b086      	sub	sp, #24
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f7ff feb4 	bl	800b33e <dir_sdi>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b5da:	7dfb      	ldrb	r3, [r7, #23]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d12b      	bne.n	800b638 <dir_alloc+0x7a>
		n = 0;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	69db      	ldr	r3, [r3, #28]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f7ff fb2a 	bl	800ac44 <move_window>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b5f4:	7dfb      	ldrb	r3, [r7, #23]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d11d      	bne.n	800b636 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a1b      	ldr	r3, [r3, #32]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	2be5      	cmp	r3, #229	@ 0xe5
 800b602:	d004      	beq.n	800b60e <dir_alloc+0x50>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a1b      	ldr	r3, [r3, #32]
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d107      	bne.n	800b61e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	3301      	adds	r3, #1
 800b612:	613b      	str	r3, [r7, #16]
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d102      	bne.n	800b622 <dir_alloc+0x64>
 800b61c:	e00c      	b.n	800b638 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b61e:	2300      	movs	r3, #0
 800b620:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b622:	2101      	movs	r1, #1
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f7ff ff05 	bl	800b434 <dir_next>
 800b62a:	4603      	mov	r3, r0
 800b62c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d0d7      	beq.n	800b5e4 <dir_alloc+0x26>
 800b634:	e000      	b.n	800b638 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b636:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b638:	7dfb      	ldrb	r3, [r7, #23]
 800b63a:	2b04      	cmp	r3, #4
 800b63c:	d101      	bne.n	800b642 <dir_alloc+0x84>
 800b63e:	2307      	movs	r3, #7
 800b640:	75fb      	strb	r3, [r7, #23]
	return res;
 800b642:	7dfb      	ldrb	r3, [r7, #23]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3718      	adds	r7, #24
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	331a      	adds	r3, #26
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7ff f842 	bl	800a6e4 <ld_word>
 800b660:	4603      	mov	r3, r0
 800b662:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	2b03      	cmp	r3, #3
 800b66a:	d109      	bne.n	800b680 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	3314      	adds	r3, #20
 800b670:	4618      	mov	r0, r3
 800b672:	f7ff f837 	bl	800a6e4 <ld_word>
 800b676:	4603      	mov	r3, r0
 800b678:	041b      	lsls	r3, r3, #16
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	4313      	orrs	r3, r2
 800b67e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b680:	68fb      	ldr	r3, [r7, #12]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b084      	sub	sp, #16
 800b68e:	af00      	add	r7, sp, #0
 800b690:	60f8      	str	r0, [r7, #12]
 800b692:	60b9      	str	r1, [r7, #8]
 800b694:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	331a      	adds	r3, #26
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	b292      	uxth	r2, r2
 800b69e:	4611      	mov	r1, r2
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7ff f85a 	bl	800a75a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	2b03      	cmp	r3, #3
 800b6ac:	d109      	bne.n	800b6c2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	f103 0214 	add.w	r2, r3, #20
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	0c1b      	lsrs	r3, r3, #16
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	4610      	mov	r0, r2
 800b6be:	f7ff f84c 	bl	800a75a <st_word>
	}
}
 800b6c2:	bf00      	nop
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b086      	sub	sp, #24
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b6d8:	2100      	movs	r1, #0
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7ff fe2f 	bl	800b33e <dir_sdi>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b6e4:	7dfb      	ldrb	r3, [r7, #23]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d001      	beq.n	800b6ee <dir_find+0x24>
 800b6ea:	7dfb      	ldrb	r3, [r7, #23]
 800b6ec:	e03e      	b.n	800b76c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	69db      	ldr	r3, [r3, #28]
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	6938      	ldr	r0, [r7, #16]
 800b6f6:	f7ff faa5 	bl	800ac44 <move_window>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b6fe:	7dfb      	ldrb	r3, [r7, #23]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d12f      	bne.n	800b764 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a1b      	ldr	r3, [r3, #32]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d102      	bne.n	800b718 <dir_find+0x4e>
 800b712:	2304      	movs	r3, #4
 800b714:	75fb      	strb	r3, [r7, #23]
 800b716:	e028      	b.n	800b76a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a1b      	ldr	r3, [r3, #32]
 800b71c:	330b      	adds	r3, #11
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b724:	b2da      	uxtb	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a1b      	ldr	r3, [r3, #32]
 800b72e:	330b      	adds	r3, #11
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	f003 0308 	and.w	r3, r3, #8
 800b736:	2b00      	cmp	r3, #0
 800b738:	d10a      	bne.n	800b750 <dir_find+0x86>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a18      	ldr	r0, [r3, #32]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	3324      	adds	r3, #36	@ 0x24
 800b742:	220b      	movs	r2, #11
 800b744:	4619      	mov	r1, r3
 800b746:	f7ff f88b 	bl	800a860 <mem_cmp>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00b      	beq.n	800b768 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b750:	2100      	movs	r1, #0
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f7ff fe6e 	bl	800b434 <dir_next>
 800b758:	4603      	mov	r3, r0
 800b75a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b75c:	7dfb      	ldrb	r3, [r7, #23]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d0c5      	beq.n	800b6ee <dir_find+0x24>
 800b762:	e002      	b.n	800b76a <dir_find+0xa0>
		if (res != FR_OK) break;
 800b764:	bf00      	nop
 800b766:	e000      	b.n	800b76a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b768:	bf00      	nop

	return res;
 800b76a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3718      	adds	r7, #24
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b782:	2101      	movs	r1, #1
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f7ff ff1a 	bl	800b5be <dir_alloc>
 800b78a:	4603      	mov	r3, r0
 800b78c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b78e:	7bfb      	ldrb	r3, [r7, #15]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d11c      	bne.n	800b7ce <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	69db      	ldr	r3, [r3, #28]
 800b798:	4619      	mov	r1, r3
 800b79a:	68b8      	ldr	r0, [r7, #8]
 800b79c:	f7ff fa52 	bl	800ac44 <move_window>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b7a4:	7bfb      	ldrb	r3, [r7, #15]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d111      	bne.n	800b7ce <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a1b      	ldr	r3, [r3, #32]
 800b7ae:	2220      	movs	r2, #32
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7ff f839 	bl	800a82a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6a18      	ldr	r0, [r3, #32]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	3324      	adds	r3, #36	@ 0x24
 800b7c0:	220b      	movs	r2, #11
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	f7ff f810 	bl	800a7e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b088      	sub	sp, #32
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	60fb      	str	r3, [r7, #12]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	3324      	adds	r3, #36	@ 0x24
 800b7ec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b7ee:	220b      	movs	r2, #11
 800b7f0:	2120      	movs	r1, #32
 800b7f2:	68b8      	ldr	r0, [r7, #8]
 800b7f4:	f7ff f819 	bl	800a82a <mem_set>
	si = i = 0; ni = 8;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	613b      	str	r3, [r7, #16]
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	61fb      	str	r3, [r7, #28]
 800b800:	2308      	movs	r3, #8
 800b802:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800b804:	68fa      	ldr	r2, [r7, #12]
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	4413      	add	r3, r2
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b80e:	d12f      	bne.n	800b870 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	1c5a      	adds	r2, r3, #1
 800b814:	61fa      	str	r2, [r7, #28]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	4413      	add	r3, r2
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 800b81e:	7efb      	ldrb	r3, [r7, #27]
 800b820:	2b2e      	cmp	r3, #46	@ 0x2e
 800b822:	d10a      	bne.n	800b83a <create_name+0x62>
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	2b02      	cmp	r3, #2
 800b828:	d807      	bhi.n	800b83a <create_name+0x62>
			sfn[i++] = c;
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	1c5a      	adds	r2, r3, #1
 800b82e:	613a      	str	r2, [r7, #16]
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	4413      	add	r3, r2
 800b834:	7efa      	ldrb	r2, [r7, #27]
 800b836:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800b838:	e7ea      	b.n	800b810 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800b83a:	7efb      	ldrb	r3, [r7, #27]
 800b83c:	2b2f      	cmp	r3, #47	@ 0x2f
 800b83e:	d007      	beq.n	800b850 <create_name+0x78>
 800b840:	7efb      	ldrb	r3, [r7, #27]
 800b842:	2b5c      	cmp	r3, #92	@ 0x5c
 800b844:	d004      	beq.n	800b850 <create_name+0x78>
 800b846:	7efb      	ldrb	r3, [r7, #27]
 800b848:	2b20      	cmp	r3, #32
 800b84a:	d901      	bls.n	800b850 <create_name+0x78>
 800b84c:	2306      	movs	r3, #6
 800b84e:	e084      	b.n	800b95a <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	441a      	add	r2, r3
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800b85a:	7efb      	ldrb	r3, [r7, #27]
 800b85c:	2b20      	cmp	r3, #32
 800b85e:	d801      	bhi.n	800b864 <create_name+0x8c>
 800b860:	2224      	movs	r2, #36	@ 0x24
 800b862:	e000      	b.n	800b866 <create_name+0x8e>
 800b864:	2220      	movs	r2, #32
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	330b      	adds	r3, #11
 800b86a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800b86c:	2300      	movs	r3, #0
 800b86e:	e074      	b.n	800b95a <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	1c5a      	adds	r2, r3, #1
 800b874:	61fa      	str	r2, [r7, #28]
 800b876:	68fa      	ldr	r2, [r7, #12]
 800b878:	4413      	add	r3, r2
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b87e:	7efb      	ldrb	r3, [r7, #27]
 800b880:	2b20      	cmp	r3, #32
 800b882:	d94e      	bls.n	800b922 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b884:	7efb      	ldrb	r3, [r7, #27]
 800b886:	2b2f      	cmp	r3, #47	@ 0x2f
 800b888:	d006      	beq.n	800b898 <create_name+0xc0>
 800b88a:	7efb      	ldrb	r3, [r7, #27]
 800b88c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b88e:	d110      	bne.n	800b8b2 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b890:	e002      	b.n	800b898 <create_name+0xc0>
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	3301      	adds	r3, #1
 800b896:	61fb      	str	r3, [r7, #28]
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	4413      	add	r3, r2
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	2b2f      	cmp	r3, #47	@ 0x2f
 800b8a2:	d0f6      	beq.n	800b892 <create_name+0xba>
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	2b5c      	cmp	r3, #92	@ 0x5c
 800b8ae:	d0f0      	beq.n	800b892 <create_name+0xba>
			break;
 800b8b0:	e038      	b.n	800b924 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b8b2:	7efb      	ldrb	r3, [r7, #27]
 800b8b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8b6:	d003      	beq.n	800b8c0 <create_name+0xe8>
 800b8b8:	693a      	ldr	r2, [r7, #16]
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d30c      	bcc.n	800b8da <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	2b0b      	cmp	r3, #11
 800b8c4:	d002      	beq.n	800b8cc <create_name+0xf4>
 800b8c6:	7efb      	ldrb	r3, [r7, #27]
 800b8c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8ca:	d001      	beq.n	800b8d0 <create_name+0xf8>
 800b8cc:	2306      	movs	r3, #6
 800b8ce:	e044      	b.n	800b95a <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800b8d0:	2308      	movs	r3, #8
 800b8d2:	613b      	str	r3, [r7, #16]
 800b8d4:	230b      	movs	r3, #11
 800b8d6:	617b      	str	r3, [r7, #20]
			continue;
 800b8d8:	e022      	b.n	800b920 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b8da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	da04      	bge.n	800b8ec <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b8e2:	7efb      	ldrb	r3, [r7, #27]
 800b8e4:	3b80      	subs	r3, #128	@ 0x80
 800b8e6:	4a1f      	ldr	r2, [pc, #124]	@ (800b964 <create_name+0x18c>)
 800b8e8:	5cd3      	ldrb	r3, [r2, r3]
 800b8ea:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b8ec:	7efb      	ldrb	r3, [r7, #27]
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	481d      	ldr	r0, [pc, #116]	@ (800b968 <create_name+0x190>)
 800b8f2:	f7fe ffdc 	bl	800a8ae <chk_chr>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <create_name+0x128>
 800b8fc:	2306      	movs	r3, #6
 800b8fe:	e02c      	b.n	800b95a <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b900:	7efb      	ldrb	r3, [r7, #27]
 800b902:	2b60      	cmp	r3, #96	@ 0x60
 800b904:	d905      	bls.n	800b912 <create_name+0x13a>
 800b906:	7efb      	ldrb	r3, [r7, #27]
 800b908:	2b7a      	cmp	r3, #122	@ 0x7a
 800b90a:	d802      	bhi.n	800b912 <create_name+0x13a>
 800b90c:	7efb      	ldrb	r3, [r7, #27]
 800b90e:	3b20      	subs	r3, #32
 800b910:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	1c5a      	adds	r2, r3, #1
 800b916:	613a      	str	r2, [r7, #16]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	4413      	add	r3, r2
 800b91c:	7efa      	ldrb	r2, [r7, #27]
 800b91e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b920:	e7a6      	b.n	800b870 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b922:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	441a      	add	r2, r3
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d101      	bne.n	800b938 <create_name+0x160>
 800b934:	2306      	movs	r3, #6
 800b936:	e010      	b.n	800b95a <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	2be5      	cmp	r3, #229	@ 0xe5
 800b93e:	d102      	bne.n	800b946 <create_name+0x16e>
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	2205      	movs	r2, #5
 800b944:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b946:	7efb      	ldrb	r3, [r7, #27]
 800b948:	2b20      	cmp	r3, #32
 800b94a:	d801      	bhi.n	800b950 <create_name+0x178>
 800b94c:	2204      	movs	r2, #4
 800b94e:	e000      	b.n	800b952 <create_name+0x17a>
 800b950:	2200      	movs	r2, #0
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	330b      	adds	r3, #11
 800b956:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b958:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3720      	adds	r7, #32
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	0800e200 	.word	0x0800e200
 800b968:	0800e19c 	.word	0x0800e19c

0800b96c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	2b2f      	cmp	r3, #47	@ 0x2f
 800b986:	d00b      	beq.n	800b9a0 <follow_path+0x34>
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b98e:	d007      	beq.n	800b9a0 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	695a      	ldr	r2, [r3, #20]
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	609a      	str	r2, [r3, #8]
 800b998:	e00d      	b.n	800b9b6 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	3301      	adds	r3, #1
 800b99e:	603b      	str	r3, [r7, #0]
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	2b2f      	cmp	r3, #47	@ 0x2f
 800b9a6:	d0f8      	beq.n	800b99a <follow_path+0x2e>
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	2b5c      	cmp	r3, #92	@ 0x5c
 800b9ae:	d0f4      	beq.n	800b99a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	2b1f      	cmp	r3, #31
 800b9bc:	d80a      	bhi.n	800b9d4 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2280      	movs	r2, #128	@ 0x80
 800b9c2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b9c6:	2100      	movs	r1, #0
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f7ff fcb8 	bl	800b33e <dir_sdi>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	75fb      	strb	r3, [r7, #23]
 800b9d2:	e056      	b.n	800ba82 <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b9d4:	463b      	mov	r3, r7
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7ff fefd 	bl	800b7d8 <create_name>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d147      	bne.n	800ba78 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f7ff fe6e 	bl	800b6ca <dir_find>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b9f8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d01b      	beq.n	800ba38 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ba00:	7dfb      	ldrb	r3, [r7, #23]
 800ba02:	2b04      	cmp	r3, #4
 800ba04:	d13a      	bne.n	800ba7c <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800ba06:	7afb      	ldrb	r3, [r7, #11]
 800ba08:	f003 0320 	and.w	r3, r3, #32
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00b      	beq.n	800ba28 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800ba10:	7afb      	ldrb	r3, [r7, #11]
 800ba12:	f003 0304 	and.w	r3, r3, #4
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d02c      	beq.n	800ba74 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2280      	movs	r2, #128	@ 0x80
 800ba1e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 800ba22:	2300      	movs	r3, #0
 800ba24:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800ba26:	e029      	b.n	800ba7c <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ba28:	7afb      	ldrb	r3, [r7, #11]
 800ba2a:	f003 0304 	and.w	r3, r3, #4
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d124      	bne.n	800ba7c <follow_path+0x110>
 800ba32:	2305      	movs	r3, #5
 800ba34:	75fb      	strb	r3, [r7, #23]
				break;
 800ba36:	e021      	b.n	800ba7c <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ba38:	7afb      	ldrb	r3, [r7, #11]
 800ba3a:	f003 0304 	and.w	r3, r3, #4
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d11e      	bne.n	800ba80 <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	799b      	ldrb	r3, [r3, #6]
 800ba46:	f003 0310 	and.w	r3, r3, #16
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d102      	bne.n	800ba54 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800ba4e:	2305      	movs	r3, #5
 800ba50:	75fb      	strb	r3, [r7, #23]
 800ba52:	e016      	b.n	800ba82 <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	695b      	ldr	r3, [r3, #20]
 800ba5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba62:	4413      	add	r3, r2
 800ba64:	4619      	mov	r1, r3
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f7ff fdf0 	bl	800b64c <ld_clust>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	609a      	str	r2, [r3, #8]
 800ba72:	e7af      	b.n	800b9d4 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800ba74:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ba76:	e7ad      	b.n	800b9d4 <follow_path+0x68>
			if (res != FR_OK) break;
 800ba78:	bf00      	nop
 800ba7a:	e002      	b.n	800ba82 <follow_path+0x116>
				break;
 800ba7c:	bf00      	nop
 800ba7e:	e000      	b.n	800ba82 <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ba80:	bf00      	nop
			}
		}
	}

	return res;
 800ba82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b087      	sub	sp, #28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ba94:	f04f 33ff 	mov.w	r3, #4294967295
 800ba98:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d031      	beq.n	800bb06 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	617b      	str	r3, [r7, #20]
 800baa8:	e002      	b.n	800bab0 <get_ldnumber+0x24>
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	3301      	adds	r3, #1
 800baae:	617b      	str	r3, [r7, #20]
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	2b20      	cmp	r3, #32
 800bab6:	d903      	bls.n	800bac0 <get_ldnumber+0x34>
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	2b3a      	cmp	r3, #58	@ 0x3a
 800babe:	d1f4      	bne.n	800baaa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	2b3a      	cmp	r3, #58	@ 0x3a
 800bac6:	d11c      	bne.n	800bb02 <get_ldnumber+0x76>
			tp = *path;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	60fa      	str	r2, [r7, #12]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	3b30      	subs	r3, #48	@ 0x30
 800bad8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	2b09      	cmp	r3, #9
 800bade:	d80e      	bhi.n	800bafe <get_ldnumber+0x72>
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d10a      	bne.n	800bafe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d107      	bne.n	800bafe <get_ldnumber+0x72>
					vol = (int)i;
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	3301      	adds	r3, #1
 800baf6:	617b      	str	r3, [r7, #20]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	697a      	ldr	r2, [r7, #20]
 800bafc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	e002      	b.n	800bb08 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bb02:	2300      	movs	r3, #0
 800bb04:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bb06:	693b      	ldr	r3, [r7, #16]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	371c      	adds	r7, #28
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b082      	sub	sp, #8
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	70da      	strb	r2, [r3, #3]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f04f 32ff 	mov.w	r2, #4294967295
 800bb2a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f7ff f888 	bl	800ac44 <move_window>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <check_fs+0x2a>
 800bb3a:	2304      	movs	r3, #4
 800bb3c:	e038      	b.n	800bbb0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	3334      	adds	r3, #52	@ 0x34
 800bb42:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fe fdcc 	bl	800a6e4 <ld_word>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	461a      	mov	r2, r3
 800bb50:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d001      	beq.n	800bb5c <check_fs+0x48>
 800bb58:	2303      	movs	r3, #3
 800bb5a:	e029      	b.n	800bbb0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bb62:	2be9      	cmp	r3, #233	@ 0xe9
 800bb64:	d009      	beq.n	800bb7a <check_fs+0x66>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bb6c:	2beb      	cmp	r3, #235	@ 0xeb
 800bb6e:	d11e      	bne.n	800bbae <check_fs+0x9a>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800bb76:	2b90      	cmp	r3, #144	@ 0x90
 800bb78:	d119      	bne.n	800bbae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	3334      	adds	r3, #52	@ 0x34
 800bb7e:	3336      	adds	r3, #54	@ 0x36
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7fe fdc7 	bl	800a714 <ld_dword>
 800bb86:	4603      	mov	r3, r0
 800bb88:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bb8c:	4a0a      	ldr	r2, [pc, #40]	@ (800bbb8 <check_fs+0xa4>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d101      	bne.n	800bb96 <check_fs+0x82>
 800bb92:	2300      	movs	r3, #0
 800bb94:	e00c      	b.n	800bbb0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	3334      	adds	r3, #52	@ 0x34
 800bb9a:	3352      	adds	r3, #82	@ 0x52
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fe fdb9 	bl	800a714 <ld_dword>
 800bba2:	4603      	mov	r3, r0
 800bba4:	4a05      	ldr	r2, [pc, #20]	@ (800bbbc <check_fs+0xa8>)
 800bba6:	4293      	cmp	r3, r2
 800bba8:	d101      	bne.n	800bbae <check_fs+0x9a>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	e000      	b.n	800bbb0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bbae:	2302      	movs	r3, #2
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	00544146 	.word	0x00544146
 800bbbc:	33544146 	.word	0x33544146

0800bbc0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b096      	sub	sp, #88	@ 0x58
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	4613      	mov	r3, r2
 800bbcc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	f7ff ff59 	bl	800ba8c <get_ldnumber>
 800bbda:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bbdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	da01      	bge.n	800bbe6 <find_volume+0x26>
 800bbe2:	230b      	movs	r3, #11
 800bbe4:	e230      	b.n	800c048 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bbe6:	4aa1      	ldr	r2, [pc, #644]	@ (800be6c <find_volume+0x2ac>)
 800bbe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bbf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d101      	bne.n	800bbfa <find_volume+0x3a>
 800bbf6:	230c      	movs	r3, #12
 800bbf8:	e226      	b.n	800c048 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bbfe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bc00:	79fb      	ldrb	r3, [r7, #7]
 800bc02:	f023 0301 	bic.w	r3, r3, #1
 800bc06:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bc08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d01a      	beq.n	800bc46 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bc10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc12:	785b      	ldrb	r3, [r3, #1]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7fe fcc5 	bl	800a5a4 <disk_status>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bc20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc24:	f003 0301 	and.w	r3, r3, #1
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10c      	bne.n	800bc46 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bc2c:	79fb      	ldrb	r3, [r7, #7]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d007      	beq.n	800bc42 <find_volume+0x82>
 800bc32:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc36:	f003 0304 	and.w	r3, r3, #4
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d001      	beq.n	800bc42 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bc3e:	230a      	movs	r3, #10
 800bc40:	e202      	b.n	800c048 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800bc42:	2300      	movs	r3, #0
 800bc44:	e200      	b.n	800c048 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bc46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc48:	2200      	movs	r2, #0
 800bc4a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bc4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc4e:	b2da      	uxtb	r2, r3
 800bc50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc52:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bc54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc56:	785b      	ldrb	r3, [r3, #1]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fe fcbd 	bl	800a5d8 <disk_initialize>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bc64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d001      	beq.n	800bc74 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bc70:	2303      	movs	r3, #3
 800bc72:	e1e9      	b.n	800c048 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bc74:	79fb      	ldrb	r3, [r7, #7]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d007      	beq.n	800bc8a <find_volume+0xca>
 800bc7a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc7e:	f003 0304 	and.w	r3, r3, #4
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d001      	beq.n	800bc8a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bc86:	230a      	movs	r3, #10
 800bc88:	e1de      	b.n	800c048 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bc8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bc90:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bc92:	f7ff ff3f 	bl	800bb14 <check_fs>
 800bc96:	4603      	mov	r3, r0
 800bc98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bc9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	d149      	bne.n	800bd38 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bca4:	2300      	movs	r3, #0
 800bca6:	643b      	str	r3, [r7, #64]	@ 0x40
 800bca8:	e01e      	b.n	800bce8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bcaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcac:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bcb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcb2:	011b      	lsls	r3, r3, #4
 800bcb4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800bcb8:	4413      	add	r3, r2
 800bcba:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcbe:	3304      	adds	r3, #4
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d006      	beq.n	800bcd4 <find_volume+0x114>
 800bcc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc8:	3308      	adds	r3, #8
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fe fd22 	bl	800a714 <ld_dword>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	e000      	b.n	800bcd6 <find_volume+0x116>
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	3358      	adds	r3, #88	@ 0x58
 800bcdc:	443b      	add	r3, r7
 800bcde:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bce4:	3301      	adds	r3, #1
 800bce6:	643b      	str	r3, [r7, #64]	@ 0x40
 800bce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcea:	2b03      	cmp	r3, #3
 800bcec:	d9dd      	bls.n	800bcaa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bcee:	2300      	movs	r3, #0
 800bcf0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800bcf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d002      	beq.n	800bcfe <find_volume+0x13e>
 800bcf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bcfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	3358      	adds	r3, #88	@ 0x58
 800bd04:	443b      	add	r3, r7
 800bd06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bd0a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bd0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d005      	beq.n	800bd1e <find_volume+0x15e>
 800bd12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bd14:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bd16:	f7ff fefd 	bl	800bb14 <check_fs>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	e000      	b.n	800bd20 <find_volume+0x160>
 800bd1e:	2303      	movs	r3, #3
 800bd20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bd24:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d905      	bls.n	800bd38 <find_volume+0x178>
 800bd2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd2e:	3301      	adds	r3, #1
 800bd30:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd34:	2b03      	cmp	r3, #3
 800bd36:	d9e2      	bls.n	800bcfe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bd38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bd3c:	2b04      	cmp	r3, #4
 800bd3e:	d101      	bne.n	800bd44 <find_volume+0x184>
 800bd40:	2301      	movs	r3, #1
 800bd42:	e181      	b.n	800c048 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bd44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d901      	bls.n	800bd50 <find_volume+0x190>
 800bd4c:	230d      	movs	r3, #13
 800bd4e:	e17b      	b.n	800c048 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bd50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd52:	3334      	adds	r3, #52	@ 0x34
 800bd54:	330b      	adds	r3, #11
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fe fcc4 	bl	800a6e4 <ld_word>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd62:	d001      	beq.n	800bd68 <find_volume+0x1a8>
 800bd64:	230d      	movs	r3, #13
 800bd66:	e16f      	b.n	800c048 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd6a:	3334      	adds	r3, #52	@ 0x34
 800bd6c:	3316      	adds	r3, #22
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fe fcb8 	bl	800a6e4 <ld_word>
 800bd74:	4603      	mov	r3, r0
 800bd76:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bd78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d106      	bne.n	800bd8c <find_volume+0x1cc>
 800bd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd80:	3334      	adds	r3, #52	@ 0x34
 800bd82:	3324      	adds	r3, #36	@ 0x24
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7fe fcc5 	bl	800a714 <ld_dword>
 800bd8a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800bd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd90:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bd92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd94:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800bd98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd9a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd9e:	789b      	ldrb	r3, [r3, #2]
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d005      	beq.n	800bdb0 <find_volume+0x1f0>
 800bda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bda6:	789b      	ldrb	r3, [r3, #2]
 800bda8:	2b02      	cmp	r3, #2
 800bdaa:	d001      	beq.n	800bdb0 <find_volume+0x1f0>
 800bdac:	230d      	movs	r3, #13
 800bdae:	e14b      	b.n	800c048 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bdb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdb2:	789b      	ldrb	r3, [r3, #2]
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdb8:	fb02 f303 	mul.w	r3, r2, r3
 800bdbc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bdbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdc8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bdca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdcc:	895b      	ldrh	r3, [r3, #10]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d008      	beq.n	800bde4 <find_volume+0x224>
 800bdd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdd4:	895b      	ldrh	r3, [r3, #10]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdda:	895b      	ldrh	r3, [r3, #10]
 800bddc:	3b01      	subs	r3, #1
 800bdde:	4013      	ands	r3, r2
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d001      	beq.n	800bde8 <find_volume+0x228>
 800bde4:	230d      	movs	r3, #13
 800bde6:	e12f      	b.n	800c048 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bde8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdea:	3334      	adds	r3, #52	@ 0x34
 800bdec:	3311      	adds	r3, #17
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7fe fc78 	bl	800a6e4 <ld_word>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdfa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bdfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdfe:	891b      	ldrh	r3, [r3, #8]
 800be00:	f003 030f 	and.w	r3, r3, #15
 800be04:	b29b      	uxth	r3, r3
 800be06:	2b00      	cmp	r3, #0
 800be08:	d001      	beq.n	800be0e <find_volume+0x24e>
 800be0a:	230d      	movs	r3, #13
 800be0c:	e11c      	b.n	800c048 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800be0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be10:	3334      	adds	r3, #52	@ 0x34
 800be12:	3313      	adds	r3, #19
 800be14:	4618      	mov	r0, r3
 800be16:	f7fe fc65 	bl	800a6e4 <ld_word>
 800be1a:	4603      	mov	r3, r0
 800be1c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800be1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be20:	2b00      	cmp	r3, #0
 800be22:	d106      	bne.n	800be32 <find_volume+0x272>
 800be24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be26:	3334      	adds	r3, #52	@ 0x34
 800be28:	3320      	adds	r3, #32
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7fe fc72 	bl	800a714 <ld_dword>
 800be30:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800be32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be34:	3334      	adds	r3, #52	@ 0x34
 800be36:	330e      	adds	r3, #14
 800be38:	4618      	mov	r0, r3
 800be3a:	f7fe fc53 	bl	800a6e4 <ld_word>
 800be3e:	4603      	mov	r3, r0
 800be40:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800be42:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800be44:	2b00      	cmp	r3, #0
 800be46:	d101      	bne.n	800be4c <find_volume+0x28c>
 800be48:	230d      	movs	r3, #13
 800be4a:	e0fd      	b.n	800c048 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800be4c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800be4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be50:	4413      	add	r3, r2
 800be52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be54:	8912      	ldrh	r2, [r2, #8]
 800be56:	0912      	lsrs	r2, r2, #4
 800be58:	b292      	uxth	r2, r2
 800be5a:	4413      	add	r3, r2
 800be5c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800be5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be62:	429a      	cmp	r2, r3
 800be64:	d204      	bcs.n	800be70 <find_volume+0x2b0>
 800be66:	230d      	movs	r3, #13
 800be68:	e0ee      	b.n	800c048 <find_volume+0x488>
 800be6a:	bf00      	nop
 800be6c:	20000cec 	.word	0x20000cec
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800be70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be74:	1ad3      	subs	r3, r2, r3
 800be76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be78:	8952      	ldrh	r2, [r2, #10]
 800be7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800be7e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800be80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be82:	2b00      	cmp	r3, #0
 800be84:	d101      	bne.n	800be8a <find_volume+0x2ca>
 800be86:	230d      	movs	r3, #13
 800be88:	e0de      	b.n	800c048 <find_volume+0x488>
		fmt = FS_FAT32;
 800be8a:	2303      	movs	r3, #3
 800be8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800be90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be92:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800be96:	4293      	cmp	r3, r2
 800be98:	d802      	bhi.n	800bea0 <find_volume+0x2e0>
 800be9a:	2302      	movs	r3, #2
 800be9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d802      	bhi.n	800beb0 <find_volume+0x2f0>
 800beaa:	2301      	movs	r3, #1
 800beac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800beb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb2:	1c9a      	adds	r2, r3, #2
 800beb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beb6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800beb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bebc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bebe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bec2:	441a      	add	r2, r3
 800bec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bec6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800bec8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800beca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800becc:	441a      	add	r2, r3
 800bece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed0:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800bed2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bed6:	2b03      	cmp	r3, #3
 800bed8:	d11e      	bne.n	800bf18 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800beda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bedc:	3334      	adds	r3, #52	@ 0x34
 800bede:	332a      	adds	r3, #42	@ 0x2a
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fe fbff 	bl	800a6e4 <ld_word>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <find_volume+0x330>
 800beec:	230d      	movs	r3, #13
 800beee:	e0ab      	b.n	800c048 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bef2:	891b      	ldrh	r3, [r3, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d001      	beq.n	800befc <find_volume+0x33c>
 800bef8:	230d      	movs	r3, #13
 800befa:	e0a5      	b.n	800c048 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800befc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800befe:	3334      	adds	r3, #52	@ 0x34
 800bf00:	332c      	adds	r3, #44	@ 0x2c
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7fe fc06 	bl	800a714 <ld_dword>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf0c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bf0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf10:	699b      	ldr	r3, [r3, #24]
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf16:	e01f      	b.n	800bf58 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bf18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf1a:	891b      	ldrh	r3, [r3, #8]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d101      	bne.n	800bf24 <find_volume+0x364>
 800bf20:	230d      	movs	r3, #13
 800bf22:	e091      	b.n	800c048 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bf24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf2a:	441a      	add	r2, r3
 800bf2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf2e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bf30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	d103      	bne.n	800bf40 <find_volume+0x380>
 800bf38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	e00a      	b.n	800bf56 <find_volume+0x396>
 800bf40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf42:	699a      	ldr	r2, [r3, #24]
 800bf44:	4613      	mov	r3, r2
 800bf46:	005b      	lsls	r3, r3, #1
 800bf48:	4413      	add	r3, r2
 800bf4a:	085a      	lsrs	r2, r3, #1
 800bf4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	f003 0301 	and.w	r3, r3, #1
 800bf54:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bf56:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bf58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf5a:	69da      	ldr	r2, [r3, #28]
 800bf5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf5e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800bf62:	0a5b      	lsrs	r3, r3, #9
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d201      	bcs.n	800bf6c <find_volume+0x3ac>
 800bf68:	230d      	movs	r3, #13
 800bf6a:	e06d      	b.n	800c048 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf6e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf72:	611a      	str	r2, [r3, #16]
 800bf74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf76:	691a      	ldr	r2, [r3, #16]
 800bf78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf7a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800bf7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf7e:	2280      	movs	r2, #128	@ 0x80
 800bf80:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bf82:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bf86:	2b03      	cmp	r3, #3
 800bf88:	d149      	bne.n	800c01e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bf8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf8c:	3334      	adds	r3, #52	@ 0x34
 800bf8e:	3330      	adds	r3, #48	@ 0x30
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7fe fba7 	bl	800a6e4 <ld_word>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d140      	bne.n	800c01e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bf9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bfa4:	f7fe fe4e 	bl	800ac44 <move_window>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d137      	bne.n	800c01e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800bfae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb6:	3334      	adds	r3, #52	@ 0x34
 800bfb8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7fe fb91 	bl	800a6e4 <ld_word>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d127      	bne.n	800c01e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bfce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfd0:	3334      	adds	r3, #52	@ 0x34
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fe fb9e 	bl	800a714 <ld_dword>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	4a1d      	ldr	r2, [pc, #116]	@ (800c050 <find_volume+0x490>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d11e      	bne.n	800c01e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe2:	3334      	adds	r3, #52	@ 0x34
 800bfe4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fe fb93 	bl	800a714 <ld_dword>
 800bfee:	4603      	mov	r3, r0
 800bff0:	4a18      	ldr	r2, [pc, #96]	@ (800c054 <find_volume+0x494>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d113      	bne.n	800c01e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff8:	3334      	adds	r3, #52	@ 0x34
 800bffa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800bffe:	4618      	mov	r0, r3
 800c000:	f7fe fb88 	bl	800a714 <ld_dword>
 800c004:	4602      	mov	r2, r0
 800c006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c008:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c00c:	3334      	adds	r3, #52	@ 0x34
 800c00e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c012:	4618      	mov	r0, r3
 800c014:	f7fe fb7e 	bl	800a714 <ld_dword>
 800c018:	4602      	mov	r2, r0
 800c01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c01c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c020:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c024:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c026:	4b0c      	ldr	r3, [pc, #48]	@ (800c058 <find_volume+0x498>)
 800c028:	881b      	ldrh	r3, [r3, #0]
 800c02a:	3301      	adds	r3, #1
 800c02c:	b29a      	uxth	r2, r3
 800c02e:	4b0a      	ldr	r3, [pc, #40]	@ (800c058 <find_volume+0x498>)
 800c030:	801a      	strh	r2, [r3, #0]
 800c032:	4b09      	ldr	r3, [pc, #36]	@ (800c058 <find_volume+0x498>)
 800c034:	881a      	ldrh	r2, [r3, #0]
 800c036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c038:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800c03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c03c:	2200      	movs	r2, #0
 800c03e:	615a      	str	r2, [r3, #20]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c040:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c042:	f7fe fd97 	bl	800ab74 <clear_lock>
#endif
	return FR_OK;
 800c046:	2300      	movs	r3, #0
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3758      	adds	r7, #88	@ 0x58
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	41615252 	.word	0x41615252
 800c054:	61417272 	.word	0x61417272
 800c058:	20000cf0 	.word	0x20000cf0

0800c05c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c066:	2309      	movs	r3, #9
 800c068:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d01c      	beq.n	800c0aa <validate+0x4e>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d018      	beq.n	800c0aa <validate+0x4e>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d013      	beq.n	800c0aa <validate+0x4e>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	889a      	ldrh	r2, [r3, #4]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	88db      	ldrh	r3, [r3, #6]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d10c      	bne.n	800c0aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	785b      	ldrb	r3, [r3, #1]
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe fa84 	bl	800a5a4 <disk_status>
 800c09c:	4603      	mov	r3, r0
 800c09e:	f003 0301 	and.w	r3, r3, #1
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <validate+0x4e>
			res = FR_OK;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c0aa:	7bfb      	ldrb	r3, [r7, #15]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d102      	bne.n	800c0b6 <validate+0x5a>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	e000      	b.n	800c0b8 <validate+0x5c>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	6013      	str	r3, [r2, #0]
	return res;
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
	...

0800c0c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b088      	sub	sp, #32
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	4613      	mov	r3, r2
 800c0d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c0da:	f107 0310 	add.w	r3, r7, #16
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7ff fcd4 	bl	800ba8c <get_ldnumber>
 800c0e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	da01      	bge.n	800c0f0 <f_mount+0x28>
 800c0ec:	230b      	movs	r3, #11
 800c0ee:	e02b      	b.n	800c148 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c0f0:	4a17      	ldr	r2, [pc, #92]	@ (800c150 <f_mount+0x88>)
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d005      	beq.n	800c10c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c100:	69b8      	ldr	r0, [r7, #24]
 800c102:	f7fe fd37 	bl	800ab74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	2200      	movs	r2, #0
 800c10a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d002      	beq.n	800c118 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2200      	movs	r2, #0
 800c116:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	490d      	ldr	r1, [pc, #52]	@ (800c150 <f_mount+0x88>)
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d002      	beq.n	800c12e <f_mount+0x66>
 800c128:	79fb      	ldrb	r3, [r7, #7]
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d001      	beq.n	800c132 <f_mount+0x6a>
 800c12e:	2300      	movs	r3, #0
 800c130:	e00a      	b.n	800c148 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c132:	f107 010c 	add.w	r1, r7, #12
 800c136:	f107 0308 	add.w	r3, r7, #8
 800c13a:	2200      	movs	r2, #0
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7ff fd3f 	bl	800bbc0 <find_volume>
 800c142:	4603      	mov	r3, r0
 800c144:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c146:	7dfb      	ldrb	r3, [r7, #23]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3720      	adds	r7, #32
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	20000cec 	.word	0x20000cec

0800c154 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b098      	sub	sp, #96	@ 0x60
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	4613      	mov	r3, r2
 800c160:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d101      	bne.n	800c16c <f_open+0x18>
 800c168:	2309      	movs	r3, #9
 800c16a:	e1a9      	b.n	800c4c0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c16c:	79fb      	ldrb	r3, [r7, #7]
 800c16e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c172:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c174:	79fa      	ldrb	r2, [r7, #7]
 800c176:	f107 0110 	add.w	r1, r7, #16
 800c17a:	f107 0308 	add.w	r3, r7, #8
 800c17e:	4618      	mov	r0, r3
 800c180:	f7ff fd1e 	bl	800bbc0 <find_volume>
 800c184:	4603      	mov	r3, r0
 800c186:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c18a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f040 818d 	bne.w	800c4ae <f_open+0x35a>
		dj.obj.fs = fs;
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	f107 0314 	add.w	r3, r7, #20
 800c19e:	4611      	mov	r1, r2
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f7ff fbe3 	bl	800b96c <follow_path>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c1ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d118      	bne.n	800c1e6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c1b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c1b8:	b25b      	sxtb	r3, r3
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	da03      	bge.n	800c1c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c1be:	2306      	movs	r3, #6
 800c1c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c1c4:	e00f      	b.n	800c1e6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c1c6:	79fb      	ldrb	r3, [r7, #7]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	bf8c      	ite	hi
 800c1cc:	2301      	movhi	r3, #1
 800c1ce:	2300      	movls	r3, #0
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	f107 0314 	add.w	r3, r7, #20
 800c1d8:	4611      	mov	r1, r2
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fe fb82 	bl	800a8e4 <chk_lock>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c1e6:	79fb      	ldrb	r3, [r7, #7]
 800c1e8:	f003 031c 	and.w	r3, r3, #28
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d07f      	beq.n	800c2f0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c1f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d017      	beq.n	800c228 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c1f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c1fc:	2b04      	cmp	r3, #4
 800c1fe:	d10e      	bne.n	800c21e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c200:	f7fe fbcc 	bl	800a99c <enq_lock>
 800c204:	4603      	mov	r3, r0
 800c206:	2b00      	cmp	r3, #0
 800c208:	d006      	beq.n	800c218 <f_open+0xc4>
 800c20a:	f107 0314 	add.w	r3, r7, #20
 800c20e:	4618      	mov	r0, r3
 800c210:	f7ff fab0 	bl	800b774 <dir_register>
 800c214:	4603      	mov	r3, r0
 800c216:	e000      	b.n	800c21a <f_open+0xc6>
 800c218:	2312      	movs	r3, #18
 800c21a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c21e:	79fb      	ldrb	r3, [r7, #7]
 800c220:	f043 0308 	orr.w	r3, r3, #8
 800c224:	71fb      	strb	r3, [r7, #7]
 800c226:	e010      	b.n	800c24a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c228:	7ebb      	ldrb	r3, [r7, #26]
 800c22a:	f003 0311 	and.w	r3, r3, #17
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <f_open+0xe6>
					res = FR_DENIED;
 800c232:	2307      	movs	r3, #7
 800c234:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c238:	e007      	b.n	800c24a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c23a:	79fb      	ldrb	r3, [r7, #7]
 800c23c:	f003 0304 	and.w	r3, r3, #4
 800c240:	2b00      	cmp	r3, #0
 800c242:	d002      	beq.n	800c24a <f_open+0xf6>
 800c244:	2308      	movs	r3, #8
 800c246:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c24a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d168      	bne.n	800c324 <f_open+0x1d0>
 800c252:	79fb      	ldrb	r3, [r7, #7]
 800c254:	f003 0308 	and.w	r3, r3, #8
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d063      	beq.n	800c324 <f_open+0x1d0>
				dw = GET_FATTIME();
 800c25c:	f7fe f93c 	bl	800a4d8 <get_fattime>
 800c260:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c264:	330e      	adds	r3, #14
 800c266:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c268:	4618      	mov	r0, r3
 800c26a:	f7fe fa91 	bl	800a790 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c26e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c270:	3316      	adds	r3, #22
 800c272:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c274:	4618      	mov	r0, r3
 800c276:	f7fe fa8b 	bl	800a790 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c27a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c27c:	330b      	adds	r3, #11
 800c27e:	2220      	movs	r2, #32
 800c280:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c286:	4611      	mov	r1, r2
 800c288:	4618      	mov	r0, r3
 800c28a:	f7ff f9df 	bl	800b64c <ld_clust>
 800c28e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c294:	2200      	movs	r2, #0
 800c296:	4618      	mov	r0, r3
 800c298:	f7ff f9f7 	bl	800b68a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c29c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c29e:	331c      	adds	r3, #28
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fe fa74 	bl	800a790 <st_dword>
					fs->wflag = 1;
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c2ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d037      	beq.n	800c324 <f_open+0x1d0>
						dw = fs->winsect;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2b8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c2ba:	f107 0314 	add.w	r3, r7, #20
 800c2be:	2200      	movs	r2, #0
 800c2c0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7fe ff0a 	bl	800b0dc <remove_chain>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800c2ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d126      	bne.n	800c324 <f_open+0x1d0>
							res = move_window(fs, dw);
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fe fcb2 	bl	800ac44 <move_window>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c2ea:	3a01      	subs	r2, #1
 800c2ec:	60da      	str	r2, [r3, #12]
 800c2ee:	e019      	b.n	800c324 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c2f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d115      	bne.n	800c324 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c2f8:	7ebb      	ldrb	r3, [r7, #26]
 800c2fa:	f003 0310 	and.w	r3, r3, #16
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d003      	beq.n	800c30a <f_open+0x1b6>
					res = FR_NO_FILE;
 800c302:	2304      	movs	r3, #4
 800c304:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c308:	e00c      	b.n	800c324 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c30a:	79fb      	ldrb	r3, [r7, #7]
 800c30c:	f003 0302 	and.w	r3, r3, #2
 800c310:	2b00      	cmp	r3, #0
 800c312:	d007      	beq.n	800c324 <f_open+0x1d0>
 800c314:	7ebb      	ldrb	r3, [r7, #26]
 800c316:	f003 0301 	and.w	r3, r3, #1
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d002      	beq.n	800c324 <f_open+0x1d0>
						res = FR_DENIED;
 800c31e:	2307      	movs	r3, #7
 800c320:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c324:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d126      	bne.n	800c37a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c32c:	79fb      	ldrb	r3, [r7, #7]
 800c32e:	f003 0308 	and.w	r3, r3, #8
 800c332:	2b00      	cmp	r3, #0
 800c334:	d003      	beq.n	800c33e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c336:	79fb      	ldrb	r3, [r7, #7]
 800c338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c33c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c346:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c34c:	79fb      	ldrb	r3, [r7, #7]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	bf8c      	ite	hi
 800c352:	2301      	movhi	r3, #1
 800c354:	2300      	movls	r3, #0
 800c356:	b2db      	uxtb	r3, r3
 800c358:	461a      	mov	r2, r3
 800c35a:	f107 0314 	add.w	r3, r7, #20
 800c35e:	4611      	mov	r1, r2
 800c360:	4618      	mov	r0, r3
 800c362:	f7fe fb3d 	bl	800a9e0 <inc_lock>
 800c366:	4602      	mov	r2, r0
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	691b      	ldr	r3, [r3, #16]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d102      	bne.n	800c37a <f_open+0x226>
 800c374:	2302      	movs	r3, #2
 800c376:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c37a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f040 8095 	bne.w	800c4ae <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c388:	4611      	mov	r1, r2
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7ff f95e 	bl	800b64c <ld_clust>
 800c390:	4602      	mov	r2, r0
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c398:	331c      	adds	r3, #28
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7fe f9ba 	bl	800a714 <ld_dword>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c3ac:	693a      	ldr	r2, [r7, #16]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	88da      	ldrh	r2, [r3, #6]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	79fa      	ldrb	r2, [r7, #7]
 800c3be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3330      	adds	r3, #48	@ 0x30
 800c3d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3da:	2100      	movs	r1, #0
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7fe fa24 	bl	800a82a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c3e2:	79fb      	ldrb	r3, [r7, #7]
 800c3e4:	f003 0320 	and.w	r3, r3, #32
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d060      	beq.n	800c4ae <f_open+0x35a>
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d05c      	beq.n	800c4ae <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	68da      	ldr	r2, [r3, #12]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	895b      	ldrh	r3, [r3, #10]
 800c400:	025b      	lsls	r3, r3, #9
 800c402:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c410:	e016      	b.n	800c440 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c416:	4618      	mov	r0, r3
 800c418:	f7fe fccf 	bl	800adba <get_fat>
 800c41c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c41e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c420:	2b01      	cmp	r3, #1
 800c422:	d802      	bhi.n	800c42a <f_open+0x2d6>
 800c424:	2302      	movs	r3, #2
 800c426:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c42a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c430:	d102      	bne.n	800c438 <f_open+0x2e4>
 800c432:	2301      	movs	r3, #1
 800c434:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c438:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c43a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c43c:	1ad3      	subs	r3, r2, r3
 800c43e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c440:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c444:	2b00      	cmp	r3, #0
 800c446:	d103      	bne.n	800c450 <f_open+0x2fc>
 800c448:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c44a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d8e0      	bhi.n	800c412 <f_open+0x2be>
				}
				fp->clust = clst;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c454:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c456:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d127      	bne.n	800c4ae <f_open+0x35a>
 800c45e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c464:	2b00      	cmp	r3, #0
 800c466:	d022      	beq.n	800c4ae <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fe fc85 	bl	800ad7c <clust2sect>
 800c472:	6478      	str	r0, [r7, #68]	@ 0x44
 800c474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c476:	2b00      	cmp	r3, #0
 800c478:	d103      	bne.n	800c482 <f_open+0x32e>
						res = FR_INT_ERR;
 800c47a:	2302      	movs	r3, #2
 800c47c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c480:	e015      	b.n	800c4ae <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c484:	0a5a      	lsrs	r2, r3, #9
 800c486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c488:	441a      	add	r2, r3
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	7858      	ldrb	r0, [r3, #1]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6a1a      	ldr	r2, [r3, #32]
 800c49c:	2301      	movs	r3, #1
 800c49e:	f7fe f8c3 	bl	800a628 <disk_read>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <f_open+0x35a>
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c4ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d002      	beq.n	800c4bc <f_open+0x368>
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c4bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3760      	adds	r7, #96	@ 0x60
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b08c      	sub	sp, #48	@ 0x30
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
 800c4d4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f107 0210 	add.w	r2, r7, #16
 800c4e6:	4611      	mov	r1, r2
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7ff fdb7 	bl	800c05c <validate>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c4f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d107      	bne.n	800c50c <f_write+0x44>
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	7d5b      	ldrb	r3, [r3, #21]
 800c500:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c504:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d002      	beq.n	800c512 <f_write+0x4a>
 800c50c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c510:	e14b      	b.n	800c7aa <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	7d1b      	ldrb	r3, [r3, #20]
 800c516:	f003 0302 	and.w	r3, r3, #2
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d101      	bne.n	800c522 <f_write+0x5a>
 800c51e:	2307      	movs	r3, #7
 800c520:	e143      	b.n	800c7aa <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	699a      	ldr	r2, [r3, #24]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	441a      	add	r2, r3
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	699b      	ldr	r3, [r3, #24]
 800c52e:	429a      	cmp	r2, r3
 800c530:	f080 812d 	bcs.w	800c78e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	699b      	ldr	r3, [r3, #24]
 800c538:	43db      	mvns	r3, r3
 800c53a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c53c:	e127      	b.n	800c78e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	699b      	ldr	r3, [r3, #24]
 800c542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c546:	2b00      	cmp	r3, #0
 800c548:	f040 80e3 	bne.w	800c712 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	699b      	ldr	r3, [r3, #24]
 800c550:	0a5b      	lsrs	r3, r3, #9
 800c552:	693a      	ldr	r2, [r7, #16]
 800c554:	8952      	ldrh	r2, [r2, #10]
 800c556:	3a01      	subs	r2, #1
 800c558:	4013      	ands	r3, r2
 800c55a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d143      	bne.n	800c5ea <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	699b      	ldr	r3, [r3, #24]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10c      	bne.n	800c584 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c572:	2b00      	cmp	r3, #0
 800c574:	d11a      	bne.n	800c5ac <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2100      	movs	r1, #0
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7fe fe13 	bl	800b1a6 <create_chain>
 800c580:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c582:	e013      	b.n	800c5ac <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d007      	beq.n	800c59c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	699b      	ldr	r3, [r3, #24]
 800c590:	4619      	mov	r1, r3
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f7fe fe9f 	bl	800b2d6 <clmt_clust>
 800c598:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c59a:	e007      	b.n	800c5ac <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	69db      	ldr	r3, [r3, #28]
 800c5a2:	4619      	mov	r1, r3
 800c5a4:	4610      	mov	r0, r2
 800c5a6:	f7fe fdfe 	bl	800b1a6 <create_chain>
 800c5aa:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	f000 80f2 	beq.w	800c798 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d104      	bne.n	800c5c4 <f_write+0xfc>
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2202      	movs	r2, #2
 800c5be:	755a      	strb	r2, [r3, #21]
 800c5c0:	2302      	movs	r3, #2
 800c5c2:	e0f2      	b.n	800c7aa <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ca:	d104      	bne.n	800c5d6 <f_write+0x10e>
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	755a      	strb	r2, [r3, #21]
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e0e9      	b.n	800c7aa <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5da:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d102      	bne.n	800c5ea <f_write+0x122>
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5e8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	7d1b      	ldrb	r3, [r3, #20]
 800c5ee:	b25b      	sxtb	r3, r3
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	da18      	bge.n	800c626 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	7858      	ldrb	r0, [r3, #1]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	6a1a      	ldr	r2, [r3, #32]
 800c602:	2301      	movs	r3, #1
 800c604:	f7fe f830 	bl	800a668 <disk_write>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d004      	beq.n	800c618 <f_write+0x150>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2201      	movs	r2, #1
 800c612:	755a      	strb	r2, [r3, #21]
 800c614:	2301      	movs	r3, #1
 800c616:	e0c8      	b.n	800c7aa <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	7d1b      	ldrb	r3, [r3, #20]
 800c61c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c620:	b2da      	uxtb	r2, r3
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c626:	693a      	ldr	r2, [r7, #16]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	69db      	ldr	r3, [r3, #28]
 800c62c:	4619      	mov	r1, r3
 800c62e:	4610      	mov	r0, r2
 800c630:	f7fe fba4 	bl	800ad7c <clust2sect>
 800c634:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d104      	bne.n	800c646 <f_write+0x17e>
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2202      	movs	r2, #2
 800c640:	755a      	strb	r2, [r3, #21]
 800c642:	2302      	movs	r3, #2
 800c644:	e0b1      	b.n	800c7aa <f_write+0x2e2>
			sect += csect;
 800c646:	697a      	ldr	r2, [r7, #20]
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	4413      	add	r3, r2
 800c64c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	0a5b      	lsrs	r3, r3, #9
 800c652:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c654:	6a3b      	ldr	r3, [r7, #32]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d03c      	beq.n	800c6d4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c65a:	69ba      	ldr	r2, [r7, #24]
 800c65c:	6a3b      	ldr	r3, [r7, #32]
 800c65e:	4413      	add	r3, r2
 800c660:	693a      	ldr	r2, [r7, #16]
 800c662:	8952      	ldrh	r2, [r2, #10]
 800c664:	4293      	cmp	r3, r2
 800c666:	d905      	bls.n	800c674 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	895b      	ldrh	r3, [r3, #10]
 800c66c:	461a      	mov	r2, r3
 800c66e:	69bb      	ldr	r3, [r7, #24]
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	7858      	ldrb	r0, [r3, #1]
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	69f9      	ldr	r1, [r7, #28]
 800c67e:	f7fd fff3 	bl	800a668 <disk_write>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d004      	beq.n	800c692 <f_write+0x1ca>
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2201      	movs	r2, #1
 800c68c:	755a      	strb	r2, [r3, #21]
 800c68e:	2301      	movs	r3, #1
 800c690:	e08b      	b.n	800c7aa <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6a1a      	ldr	r2, [r3, #32]
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	6a3a      	ldr	r2, [r7, #32]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d915      	bls.n	800c6cc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	6a1a      	ldr	r2, [r3, #32]
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	1ad3      	subs	r3, r2, r3
 800c6ae:	025b      	lsls	r3, r3, #9
 800c6b0:	69fa      	ldr	r2, [r7, #28]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c6b8:	4619      	mov	r1, r3
 800c6ba:	f7fe f895 	bl	800a7e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	7d1b      	ldrb	r3, [r3, #20]
 800c6c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6c6:	b2da      	uxtb	r2, r3
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c6cc:	6a3b      	ldr	r3, [r7, #32]
 800c6ce:	025b      	lsls	r3, r3, #9
 800c6d0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c6d2:	e03f      	b.n	800c754 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6a1b      	ldr	r3, [r3, #32]
 800c6d8:	697a      	ldr	r2, [r7, #20]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d016      	beq.n	800c70c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	699a      	ldr	r2, [r3, #24]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d210      	bcs.n	800c70c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	7858      	ldrb	r0, [r3, #1]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	697a      	ldr	r2, [r7, #20]
 800c6f8:	f7fd ff96 	bl	800a628 <disk_read>
 800c6fc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d004      	beq.n	800c70c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2201      	movs	r2, #1
 800c706:	755a      	strb	r2, [r3, #21]
 800c708:	2301      	movs	r3, #1
 800c70a:	e04e      	b.n	800c7aa <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	697a      	ldr	r2, [r7, #20]
 800c710:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	699b      	ldr	r3, [r3, #24]
 800c716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c71a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c71e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	429a      	cmp	r2, r3
 800c726:	d901      	bls.n	800c72c <f_write+0x264>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c73a:	4413      	add	r3, r2
 800c73c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c73e:	69f9      	ldr	r1, [r7, #28]
 800c740:	4618      	mov	r0, r3
 800c742:	f7fe f851 	bl	800a7e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	7d1b      	ldrb	r3, [r3, #20]
 800c74a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c754:	69fa      	ldr	r2, [r7, #28]
 800c756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c758:	4413      	add	r3, r2
 800c75a:	61fb      	str	r3, [r7, #28]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	699a      	ldr	r2, [r3, #24]
 800c760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c762:	441a      	add	r2, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	619a      	str	r2, [r3, #24]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	68da      	ldr	r2, [r3, #12]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	699b      	ldr	r3, [r3, #24]
 800c770:	429a      	cmp	r2, r3
 800c772:	bf38      	it	cc
 800c774:	461a      	movcc	r2, r3
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	60da      	str	r2, [r3, #12]
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c780:	441a      	add	r2, r3
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	601a      	str	r2, [r3, #0]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78a:	1ad3      	subs	r3, r2, r3
 800c78c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2b00      	cmp	r3, #0
 800c792:	f47f aed4 	bne.w	800c53e <f_write+0x76>
 800c796:	e000      	b.n	800c79a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c798:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	7d1b      	ldrb	r3, [r3, #20]
 800c79e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7a2:	b2da      	uxtb	r2, r3
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3730      	adds	r7, #48	@ 0x30
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c7b2:	b580      	push	{r7, lr}
 800c7b4:	b086      	sub	sp, #24
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f107 0208 	add.w	r2, r7, #8
 800c7c0:	4611      	mov	r1, r2
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7ff fc4a 	bl	800c05c <validate>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c7cc:	7dfb      	ldrb	r3, [r7, #23]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d168      	bne.n	800c8a4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	7d1b      	ldrb	r3, [r3, #20]
 800c7d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d062      	beq.n	800c8a4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	7d1b      	ldrb	r3, [r3, #20]
 800c7e2:	b25b      	sxtb	r3, r3
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	da15      	bge.n	800c814 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	7858      	ldrb	r0, [r3, #1]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6a1a      	ldr	r2, [r3, #32]
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	f7fd ff36 	bl	800a668 <disk_write>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d001      	beq.n	800c806 <f_sync+0x54>
 800c802:	2301      	movs	r3, #1
 800c804:	e04f      	b.n	800c8a6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	7d1b      	ldrb	r3, [r3, #20]
 800c80a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c80e:	b2da      	uxtb	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c814:	f7fd fe60 	bl	800a4d8 <get_fattime>
 800c818:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c81a:	68ba      	ldr	r2, [r7, #8]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c820:	4619      	mov	r1, r3
 800c822:	4610      	mov	r0, r2
 800c824:	f7fe fa0e 	bl	800ac44 <move_window>
 800c828:	4603      	mov	r3, r0
 800c82a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c82c:	7dfb      	ldrb	r3, [r7, #23]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d138      	bne.n	800c8a4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c836:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	330b      	adds	r3, #11
 800c83c:	781a      	ldrb	r2, [r3, #0]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	330b      	adds	r3, #11
 800c842:	f042 0220 	orr.w	r2, r2, #32
 800c846:	b2d2      	uxtb	r2, r2
 800c848:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6818      	ldr	r0, [r3, #0]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	689b      	ldr	r3, [r3, #8]
 800c852:	461a      	mov	r2, r3
 800c854:	68f9      	ldr	r1, [r7, #12]
 800c856:	f7fe ff18 	bl	800b68a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f103 021c 	add.w	r2, r3, #28
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	4619      	mov	r1, r3
 800c866:	4610      	mov	r0, r2
 800c868:	f7fd ff92 	bl	800a790 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	3316      	adds	r3, #22
 800c870:	6939      	ldr	r1, [r7, #16]
 800c872:	4618      	mov	r0, r3
 800c874:	f7fd ff8c 	bl	800a790 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	3312      	adds	r3, #18
 800c87c:	2100      	movs	r1, #0
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fd ff6b 	bl	800a75a <st_word>
					fs->wflag = 1;
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	2201      	movs	r2, #1
 800c888:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7fe fa07 	bl	800aca0 <sync_fs>
 800c892:	4603      	mov	r3, r0
 800c894:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	7d1b      	ldrb	r3, [r3, #20]
 800c89a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c8a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3718      	adds	r7, #24
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b084      	sub	sp, #16
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7ff ff7b 	bl	800c7b2 <f_sync>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c8c0:	7bfb      	ldrb	r3, [r7, #15]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d118      	bne.n	800c8f8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f107 0208 	add.w	r2, r7, #8
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7ff fbc4 	bl	800c05c <validate>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d10c      	bne.n	800c8f8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	691b      	ldr	r3, [r3, #16]
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7fe f90a 	bl	800aafc <dec_lock>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d102      	bne.n	800c8f8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3710      	adds	r7, #16
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c902:	b590      	push	{r4, r7, lr}
 800c904:	b091      	sub	sp, #68	@ 0x44
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c90a:	f107 0108 	add.w	r1, r7, #8
 800c90e:	1d3b      	adds	r3, r7, #4
 800c910:	2200      	movs	r2, #0
 800c912:	4618      	mov	r0, r3
 800c914:	f7ff f954 	bl	800bbc0 <find_volume>
 800c918:	4603      	mov	r3, r0
 800c91a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800c91e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c922:	2b00      	cmp	r3, #0
 800c924:	d131      	bne.n	800c98a <f_chdir+0x88>
		dj.obj.fs = fs;
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	f107 030c 	add.w	r3, r7, #12
 800c930:	4611      	mov	r1, r2
 800c932:	4618      	mov	r0, r3
 800c934:	f7ff f81a 	bl	800b96c <follow_path>
 800c938:	4603      	mov	r3, r0
 800c93a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {					/* Follow completed */
 800c93e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c942:	2b00      	cmp	r3, #0
 800c944:	d11a      	bne.n	800c97c <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800c946:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800c94a:	b25b      	sxtb	r3, r3
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	da03      	bge.n	800c958 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	697a      	ldr	r2, [r7, #20]
 800c954:	615a      	str	r2, [r3, #20]
 800c956:	e011      	b.n	800c97c <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 800c958:	7cbb      	ldrb	r3, [r7, #18]
 800c95a:	f003 0310 	and.w	r3, r3, #16
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d009      	beq.n	800c976 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c966:	68bc      	ldr	r4, [r7, #8]
 800c968:	4611      	mov	r1, r2
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fe fe6e 	bl	800b64c <ld_clust>
 800c970:	4603      	mov	r3, r0
 800c972:	6163      	str	r3, [r4, #20]
 800c974:	e002      	b.n	800c97c <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 800c976:	2305      	movs	r3, #5
 800c978:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c97c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c980:	2b04      	cmp	r3, #4
 800c982:	d102      	bne.n	800c98a <f_chdir+0x88>
 800c984:	2305      	movs	r3, #5
 800c986:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	LEAVE_FF(fs, res);
 800c98a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3744      	adds	r7, #68	@ 0x44
 800c992:	46bd      	mov	sp, r7
 800c994:	bd90      	pop	{r4, r7, pc}

0800c996 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b090      	sub	sp, #64	@ 0x40
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
 800c99e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f107 0208 	add.w	r2, r7, #8
 800c9a6:	4611      	mov	r1, r2
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7ff fb57 	bl	800c05c <validate>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c9b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d103      	bne.n	800c9c4 <f_lseek+0x2e>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	7d5b      	ldrb	r3, [r3, #21]
 800c9c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c9c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d002      	beq.n	800c9d2 <f_lseek+0x3c>
 800c9cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c9d0:	e1e6      	b.n	800cda0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 80d1 	beq.w	800cb7e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9e2:	d15a      	bne.n	800ca9a <f_lseek+0x104>
			tbl = fp->cltbl;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e8:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ec:	1d1a      	adds	r2, r3, #4
 800c9ee:	627a      	str	r2, [r7, #36]	@ 0x24
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	617b      	str	r3, [r7, #20]
 800c9f4:	2302      	movs	r3, #2
 800c9f6:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d03a      	beq.n	800ca7a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ca04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca06:	613b      	str	r3, [r7, #16]
 800ca08:	2300      	movs	r3, #0
 800ca0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca0e:	3302      	adds	r3, #2
 800ca10:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ca12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca14:	60fb      	str	r3, [r7, #12]
 800ca16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca18:	3301      	adds	r3, #1
 800ca1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fe f9ca 	bl	800adba <get_fat>
 800ca26:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ca28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d804      	bhi.n	800ca38 <f_lseek+0xa2>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2202      	movs	r2, #2
 800ca32:	755a      	strb	r2, [r3, #21]
 800ca34:	2302      	movs	r3, #2
 800ca36:	e1b3      	b.n	800cda0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca3e:	d104      	bne.n	800ca4a <f_lseek+0xb4>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2201      	movs	r2, #1
 800ca44:	755a      	strb	r2, [r3, #21]
 800ca46:	2301      	movs	r3, #1
 800ca48:	e1aa      	b.n	800cda0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d0de      	beq.n	800ca12 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ca54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d809      	bhi.n	800ca70 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5e:	1d1a      	adds	r2, r3, #4
 800ca60:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca64:	601a      	str	r2, [r3, #0]
 800ca66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca68:	1d1a      	adds	r2, r3, #4
 800ca6a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca6c:	693a      	ldr	r2, [r7, #16]
 800ca6e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	699b      	ldr	r3, [r3, #24]
 800ca74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d3c4      	bcc.n	800ca04 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca80:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ca82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d803      	bhi.n	800ca92 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ca8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	601a      	str	r2, [r3, #0]
 800ca90:	e184      	b.n	800cd9c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ca92:	2311      	movs	r3, #17
 800ca94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800ca98:	e180      	b.n	800cd9c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	683a      	ldr	r2, [r7, #0]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d902      	bls.n	800caaa <f_lseek+0x114>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	683a      	ldr	r2, [r7, #0]
 800caae:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f000 8172 	beq.w	800cd9c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	3b01      	subs	r3, #1
 800cabc:	4619      	mov	r1, r3
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7fe fc09 	bl	800b2d6 <clmt_clust>
 800cac4:	4602      	mov	r2, r0
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	69db      	ldr	r3, [r3, #28]
 800cad0:	4619      	mov	r1, r3
 800cad2:	4610      	mov	r0, r2
 800cad4:	f7fe f952 	bl	800ad7c <clust2sect>
 800cad8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cada:	69bb      	ldr	r3, [r7, #24]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d104      	bne.n	800caea <f_lseek+0x154>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2202      	movs	r2, #2
 800cae4:	755a      	strb	r2, [r3, #21]
 800cae6:	2302      	movs	r3, #2
 800cae8:	e15a      	b.n	800cda0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	3b01      	subs	r3, #1
 800caee:	0a5b      	lsrs	r3, r3, #9
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	8952      	ldrh	r2, [r2, #10]
 800caf4:	3a01      	subs	r2, #1
 800caf6:	4013      	ands	r3, r2
 800caf8:	69ba      	ldr	r2, [r7, #24]
 800cafa:	4413      	add	r3, r2
 800cafc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	699b      	ldr	r3, [r3, #24]
 800cb02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	f000 8148 	beq.w	800cd9c <f_lseek+0x406>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a1b      	ldr	r3, [r3, #32]
 800cb10:	69ba      	ldr	r2, [r7, #24]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	f000 8142 	beq.w	800cd9c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	7d1b      	ldrb	r3, [r3, #20]
 800cb1c:	b25b      	sxtb	r3, r3
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	da18      	bge.n	800cb54 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	7858      	ldrb	r0, [r3, #1]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6a1a      	ldr	r2, [r3, #32]
 800cb30:	2301      	movs	r3, #1
 800cb32:	f7fd fd99 	bl	800a668 <disk_write>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d004      	beq.n	800cb46 <f_lseek+0x1b0>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2201      	movs	r2, #1
 800cb40:	755a      	strb	r2, [r3, #21]
 800cb42:	2301      	movs	r3, #1
 800cb44:	e12c      	b.n	800cda0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	7d1b      	ldrb	r3, [r3, #20]
 800cb4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb4e:	b2da      	uxtb	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	7858      	ldrb	r0, [r3, #1]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb5e:	2301      	movs	r3, #1
 800cb60:	69ba      	ldr	r2, [r7, #24]
 800cb62:	f7fd fd61 	bl	800a628 <disk_read>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d004      	beq.n	800cb76 <f_lseek+0x1e0>
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2201      	movs	r2, #1
 800cb70:	755a      	strb	r2, [r3, #21]
 800cb72:	2301      	movs	r3, #1
 800cb74:	e114      	b.n	800cda0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	69ba      	ldr	r2, [r7, #24]
 800cb7a:	621a      	str	r2, [r3, #32]
 800cb7c:	e10e      	b.n	800cd9c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	683a      	ldr	r2, [r7, #0]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d908      	bls.n	800cb9a <f_lseek+0x204>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	7d1b      	ldrb	r3, [r3, #20]
 800cb8c:	f003 0302 	and.w	r3, r3, #2
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d102      	bne.n	800cb9a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	68db      	ldr	r3, [r3, #12]
 800cb98:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	699b      	ldr	r3, [r3, #24]
 800cb9e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cba0:	2300      	movs	r3, #0
 800cba2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cba8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f000 80a7 	beq.w	800cd00 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	895b      	ldrh	r3, [r3, #10]
 800cbb6:	025b      	lsls	r3, r3, #9
 800cbb8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cbba:	6a3b      	ldr	r3, [r7, #32]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d01b      	beq.n	800cbf8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	1e5a      	subs	r2, r3, #1
 800cbc4:	69fb      	ldr	r3, [r7, #28]
 800cbc6:	fbb2 f2f3 	udiv	r2, r2, r3
 800cbca:	6a3b      	ldr	r3, [r7, #32]
 800cbcc:	1e59      	subs	r1, r3, #1
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d30f      	bcc.n	800cbf8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cbd8:	6a3b      	ldr	r3, [r7, #32]
 800cbda:	1e5a      	subs	r2, r3, #1
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	425b      	negs	r3, r3
 800cbe0:	401a      	ands	r2, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	699b      	ldr	r3, [r3, #24]
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	1ad3      	subs	r3, r2, r3
 800cbee:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	69db      	ldr	r3, [r3, #28]
 800cbf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbf6:	e022      	b.n	800cc3e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cbfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d119      	bne.n	800cc38 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2100      	movs	r1, #0
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7fe facc 	bl	800b1a6 <create_chain>
 800cc0e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cc10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d104      	bne.n	800cc20 <f_lseek+0x28a>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2202      	movs	r2, #2
 800cc1a:	755a      	strb	r2, [r3, #21]
 800cc1c:	2302      	movs	r3, #2
 800cc1e:	e0bf      	b.n	800cda0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc26:	d104      	bne.n	800cc32 <f_lseek+0x29c>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	755a      	strb	r2, [r3, #21]
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e0b6      	b.n	800cda0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc36:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc3c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800cc3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d05d      	beq.n	800cd00 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800cc44:	e03a      	b.n	800ccbc <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800cc46:	683a      	ldr	r2, [r7, #0]
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	1ad3      	subs	r3, r2, r3
 800cc4c:	603b      	str	r3, [r7, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	699a      	ldr	r2, [r3, #24]
 800cc52:	69fb      	ldr	r3, [r7, #28]
 800cc54:	441a      	add	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	7d1b      	ldrb	r3, [r3, #20]
 800cc5e:	f003 0302 	and.w	r3, r3, #2
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00b      	beq.n	800cc7e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fe fa9b 	bl	800b1a6 <create_chain>
 800cc70:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d108      	bne.n	800cc8a <f_lseek+0x2f4>
							ofs = 0; break;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	603b      	str	r3, [r7, #0]
 800cc7c:	e022      	b.n	800ccc4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fe f899 	bl	800adba <get_fat>
 800cc88:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc90:	d104      	bne.n	800cc9c <f_lseek+0x306>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2201      	movs	r2, #1
 800cc96:	755a      	strb	r2, [r3, #21]
 800cc98:	2301      	movs	r3, #1
 800cc9a:	e081      	b.n	800cda0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d904      	bls.n	800ccac <f_lseek+0x316>
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	699b      	ldr	r3, [r3, #24]
 800cca6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	d304      	bcc.n	800ccb6 <f_lseek+0x320>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2202      	movs	r2, #2
 800ccb0:	755a      	strb	r2, [r3, #21]
 800ccb2:	2302      	movs	r3, #2
 800ccb4:	e074      	b.n	800cda0 <f_lseek+0x40a>
					fp->clust = clst;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccba:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ccbc:	683a      	ldr	r2, [r7, #0]
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d8c0      	bhi.n	800cc46 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	699a      	ldr	r2, [r3, #24]
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	441a      	add	r2, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d012      	beq.n	800cd00 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7fe f84c 	bl	800ad7c <clust2sect>
 800cce4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d104      	bne.n	800ccf6 <f_lseek+0x360>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2202      	movs	r2, #2
 800ccf0:	755a      	strb	r2, [r3, #21]
 800ccf2:	2302      	movs	r3, #2
 800ccf4:	e054      	b.n	800cda0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	0a5b      	lsrs	r3, r3, #9
 800ccfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ccfc:	4413      	add	r3, r2
 800ccfe:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	699a      	ldr	r2, [r3, #24]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	68db      	ldr	r3, [r3, #12]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d90a      	bls.n	800cd22 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	699a      	ldr	r2, [r3, #24]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	7d1b      	ldrb	r3, [r3, #20]
 800cd18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	699b      	ldr	r3, [r3, #24]
 800cd26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d036      	beq.n	800cd9c <f_lseek+0x406>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a1b      	ldr	r3, [r3, #32]
 800cd32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d031      	beq.n	800cd9c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	7d1b      	ldrb	r3, [r3, #20]
 800cd3c:	b25b      	sxtb	r3, r3
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	da18      	bge.n	800cd74 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	7858      	ldrb	r0, [r3, #1]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6a1a      	ldr	r2, [r3, #32]
 800cd50:	2301      	movs	r3, #1
 800cd52:	f7fd fc89 	bl	800a668 <disk_write>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d004      	beq.n	800cd66 <f_lseek+0x3d0>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2201      	movs	r2, #1
 800cd60:	755a      	strb	r2, [r3, #21]
 800cd62:	2301      	movs	r3, #1
 800cd64:	e01c      	b.n	800cda0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	7d1b      	ldrb	r3, [r3, #20]
 800cd6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd6e:	b2da      	uxtb	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	7858      	ldrb	r0, [r3, #1]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd7e:	2301      	movs	r3, #1
 800cd80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd82:	f7fd fc51 	bl	800a628 <disk_read>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d004      	beq.n	800cd96 <f_lseek+0x400>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	755a      	strb	r2, [r3, #21]
 800cd92:	2301      	movs	r3, #1
 800cd94:	e004      	b.n	800cda0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd9a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cd9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3740      	adds	r7, #64	@ 0x40
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b096      	sub	sp, #88	@ 0x58
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800cdb0:	f107 0108 	add.w	r1, r7, #8
 800cdb4:	1d3b      	adds	r3, r7, #4
 800cdb6:	2202      	movs	r2, #2
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7fe ff01 	bl	800bbc0 <find_volume>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800cdc8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f040 80f9 	bne.w	800cfc4 <f_mkdir+0x21c>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	f107 030c 	add.w	r3, r7, #12
 800cdd8:	4611      	mov	r1, r2
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fe fdc6 	bl	800b96c <follow_path>
 800cde0:	4603      	mov	r3, r0
 800cde2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800cde6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d102      	bne.n	800cdf4 <f_mkdir+0x4c>
 800cdee:	2308      	movs	r3, #8
 800cdf0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 800cdf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cdf8:	2b04      	cmp	r3, #4
 800cdfa:	d108      	bne.n	800ce0e <f_mkdir+0x66>
 800cdfc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ce00:	f003 0320 	and.w	r3, r3, #32
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d002      	beq.n	800ce0e <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 800ce08:	2306      	movs	r3, #6
 800ce0a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800ce0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce12:	2b04      	cmp	r3, #4
 800ce14:	f040 80d6 	bne.w	800cfc4 <f_mkdir+0x21c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800ce18:	f107 030c 	add.w	r3, r7, #12
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7fe f9c1 	bl	800b1a6 <create_chain>
 800ce24:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	895b      	ldrh	r3, [r3, #10]
 800ce2a:	025b      	lsls	r3, r3, #9
 800ce2c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800ce34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d102      	bne.n	800ce40 <f_mkdir+0x98>
 800ce3a:	2307      	movs	r3, #7
 800ce3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800ce40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d102      	bne.n	800ce4c <f_mkdir+0xa4>
 800ce46:	2302      	movs	r3, #2
 800ce48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ce4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce52:	d102      	bne.n	800ce5a <f_mkdir+0xb2>
 800ce54:	2301      	movs	r3, #1
 800ce56:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800ce5a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <f_mkdir+0xc8>
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	4618      	mov	r0, r3
 800ce66:	f7fd fea9 	bl	800abbc <sync_window>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 800ce70:	f7fd fb32 	bl	800a4d8 <get_fattime>
 800ce74:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800ce76:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d16a      	bne.n	800cf54 <f_mkdir+0x1ac>
				dsc = clust2sect(fs, dcl);
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7fd ff7a 	bl	800ad7c <clust2sect>
 800ce88:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	3334      	adds	r3, #52	@ 0x34
 800ce8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 800ce90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce94:	2100      	movs	r1, #0
 800ce96:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ce98:	f7fd fcc7 	bl	800a82a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800ce9c:	220b      	movs	r2, #11
 800ce9e:	2120      	movs	r1, #32
 800cea0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cea2:	f7fd fcc2 	bl	800a82a <mem_set>
					dir[DIR_Name] = '.';
 800cea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cea8:	222e      	movs	r2, #46	@ 0x2e
 800ceaa:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800ceac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceae:	330b      	adds	r3, #11
 800ceb0:	2210      	movs	r2, #16
 800ceb2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800ceb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ceb6:	3316      	adds	r3, #22
 800ceb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7fd fc68 	bl	800a790 <st_dword>
					st_clust(fs, dir, dcl);
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cec4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fe fbdf 	bl	800b68a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800cecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cece:	3320      	adds	r3, #32
 800ced0:	2220      	movs	r2, #32
 800ced2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7fd fc87 	bl	800a7e8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800ceda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cedc:	3321      	adds	r3, #33	@ 0x21
 800cede:	222e      	movs	r2, #46	@ 0x2e
 800cee0:	701a      	strb	r2, [r3, #0]
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	2b03      	cmp	r3, #3
 800ceec:	d106      	bne.n	800cefc <f_mkdir+0x154>
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cef2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d101      	bne.n	800cefc <f_mkdir+0x154>
 800cef8:	2300      	movs	r3, #0
 800cefa:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800cefc:	68b8      	ldr	r0, [r7, #8]
 800cefe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf00:	3320      	adds	r3, #32
 800cf02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf04:	4619      	mov	r1, r3
 800cf06:	f7fe fbc0 	bl	800b68a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	895b      	ldrh	r3, [r3, #10]
 800cf0e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf10:	e01b      	b.n	800cf4a <f_mkdir+0x1a2>
					fs->winsect = dsc++;
 800cf12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf14:	1c5a      	adds	r2, r3, #1
 800cf16:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7fd fe49 	bl	800abbc <sync_window>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 800cf30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d10c      	bne.n	800cf52 <f_mkdir+0x1aa>
					mem_set(dir, 0, SS(fs));
 800cf38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cf40:	f7fd fc73 	bl	800a82a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800cf44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf46:	3b01      	subs	r3, #1
 800cf48:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d1e0      	bne.n	800cf12 <f_mkdir+0x16a>
 800cf50:	e000      	b.n	800cf54 <f_mkdir+0x1ac>
					if (res != FR_OK) break;
 800cf52:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800cf54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d107      	bne.n	800cf6c <f_mkdir+0x1c4>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800cf5c:	f107 030c 	add.w	r3, r7, #12
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7fe fc07 	bl	800b774 <dir_register>
 800cf66:	4603      	mov	r3, r0
 800cf68:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 800cf6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d120      	bne.n	800cfb6 <f_mkdir+0x20e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800cf74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf76:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800cf78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf7a:	3316      	adds	r3, #22
 800cf7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7fd fc06 	bl	800a790 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fe fb7d 	bl	800b68a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800cf90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf92:	330b      	adds	r3, #11
 800cf94:	2210      	movs	r2, #16
 800cf96:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800cf9e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d10e      	bne.n	800cfc4 <f_mkdir+0x21c>
					res = sync_fs(fs);
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7fd fe79 	bl	800aca0 <sync_fs>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800cfb4:	e006      	b.n	800cfc4 <f_mkdir+0x21c>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800cfb6:	f107 030c 	add.w	r3, r7, #12
 800cfba:	2200      	movs	r2, #0
 800cfbc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fe f88c 	bl	800b0dc <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800cfc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3758      	adds	r7, #88	@ 0x58
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	460b      	mov	r3, r1
 800cfda:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800cfdc:	78fb      	ldrb	r3, [r7, #3]
 800cfde:	2b0a      	cmp	r3, #10
 800cfe0:	d103      	bne.n	800cfea <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800cfe2:	210d      	movs	r1, #13
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7ff fff3 	bl	800cfd0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	db25      	blt.n	800d042 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	1c5a      	adds	r2, r3, #1
 800cffa:	60fa      	str	r2, [r7, #12]
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	4413      	add	r3, r2
 800d000:	78fa      	ldrb	r2, [r7, #3]
 800d002:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2b3c      	cmp	r3, #60	@ 0x3c
 800d008:	dd12      	ble.n	800d030 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6818      	ldr	r0, [r3, #0]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f103 010c 	add.w	r1, r3, #12
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	f107 0308 	add.w	r3, r7, #8
 800d01a:	f7ff fa55 	bl	800c4c8 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	429a      	cmp	r2, r3
 800d024:	d101      	bne.n	800d02a <putc_bfd+0x5a>
 800d026:	2300      	movs	r3, #0
 800d028:	e001      	b.n	800d02e <putc_bfd+0x5e>
 800d02a:	f04f 33ff 	mov.w	r3, #4294967295
 800d02e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	68fa      	ldr	r2, [r7, #12]
 800d034:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	1c5a      	adds	r2, r3, #1
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	609a      	str	r2, [r3, #8]
 800d040:	e000      	b.n	800d044 <putc_bfd+0x74>
	if (i < 0) return;
 800d042:	bf00      	nop
}
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}

0800d04a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b084      	sub	sp, #16
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	db16      	blt.n	800d088 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6818      	ldr	r0, [r3, #0]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f103 010c 	add.w	r1, r3, #12
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	461a      	mov	r2, r3
 800d06a:	f107 030c 	add.w	r3, r7, #12
 800d06e:	f7ff fa2b 	bl	800c4c8 <f_write>
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d107      	bne.n	800d088 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	4293      	cmp	r3, r2
 800d080:	d102      	bne.n	800d088 <putc_flush+0x3e>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	689b      	ldr	r3, [r3, #8]
 800d086:	e001      	b.n	800d08c <putc_flush+0x42>
	return EOF;
 800d088:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	683a      	ldr	r2, [r7, #0]
 800d0a2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	605a      	str	r2, [r3, #4]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	609a      	str	r2, [r3, #8]
}
 800d0b2:	bf00      	nop
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr
	...

0800d0c0 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800d0c0:	b40e      	push	{r1, r2, r3}
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b0a7      	sub	sp, #156	@ 0x9c
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800d0ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d0ce:	6879      	ldr	r1, [r7, #4]
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7ff ffdf 	bl	800d094 <putc_init>

	va_start(arp, fmt);
 800d0d6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800d0da:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 800d0dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d0e0:	1c5a      	adds	r2, r3, #1
 800d0e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 800d0ec:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f000 81f2 	beq.w	800d4da <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800d0f6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d0fa:	2b25      	cmp	r3, #37	@ 0x25
 800d0fc:	d008      	beq.n	800d110 <f_printf+0x50>
			putc_bfd(&pb, c);
 800d0fe:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800d102:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d106:	4611      	mov	r1, r2
 800d108:	4618      	mov	r0, r3
 800d10a:	f7ff ff61 	bl	800cfd0 <putc_bfd>
			continue;
 800d10e:	e1e3      	b.n	800d4d8 <f_printf+0x418>
		}
		w = f = 0;
 800d110:	2300      	movs	r3, #0
 800d112:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d116:	2300      	movs	r3, #0
 800d118:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 800d11c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d120:	1c5a      	adds	r2, r3, #1
 800d122:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800d12c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d130:	2b30      	cmp	r3, #48	@ 0x30
 800d132:	d10b      	bne.n	800d14c <f_printf+0x8c>
			f = 1; c = *fmt++;
 800d134:	2301      	movs	r3, #1
 800d136:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d13a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d13e:	1c5a      	adds	r2, r3, #1
 800d140:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800d14a:	e024      	b.n	800d196 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800d14c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d150:	2b2d      	cmp	r3, #45	@ 0x2d
 800d152:	d120      	bne.n	800d196 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800d154:	2302      	movs	r3, #2
 800d156:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d15a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d15e:	1c5a      	adds	r2, r3, #1
 800d160:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800d16a:	e014      	b.n	800d196 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800d16c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d170:	4613      	mov	r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	4413      	add	r3, r2
 800d176:	005b      	lsls	r3, r3, #1
 800d178:	461a      	mov	r2, r3
 800d17a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d17e:	4413      	add	r3, r2
 800d180:	3b30      	subs	r3, #48	@ 0x30
 800d182:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 800d186:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d18a:	1c5a      	adds	r2, r3, #1
 800d18c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 800d196:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d19a:	2b2f      	cmp	r3, #47	@ 0x2f
 800d19c:	d903      	bls.n	800d1a6 <f_printf+0xe6>
 800d19e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d1a2:	2b39      	cmp	r3, #57	@ 0x39
 800d1a4:	d9e2      	bls.n	800d16c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800d1a6:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d1aa:	2b6c      	cmp	r3, #108	@ 0x6c
 800d1ac:	d003      	beq.n	800d1b6 <f_printf+0xf6>
 800d1ae:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d1b2:	2b4c      	cmp	r3, #76	@ 0x4c
 800d1b4:	d10d      	bne.n	800d1d2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800d1b6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d1ba:	f043 0304 	orr.w	r3, r3, #4
 800d1be:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800d1c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d1c6:	1c5a      	adds	r2, r3, #1
 800d1c8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 800d1d2:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f000 8181 	beq.w	800d4de <f_printf+0x41e>
		d = c;
 800d1dc:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d1e0:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 800d1e4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d1e8:	2b60      	cmp	r3, #96	@ 0x60
 800d1ea:	d908      	bls.n	800d1fe <f_printf+0x13e>
 800d1ec:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d1f0:	2b7a      	cmp	r3, #122	@ 0x7a
 800d1f2:	d804      	bhi.n	800d1fe <f_printf+0x13e>
 800d1f4:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d1f8:	3b20      	subs	r3, #32
 800d1fa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 800d1fe:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d202:	3b42      	subs	r3, #66	@ 0x42
 800d204:	2b16      	cmp	r3, #22
 800d206:	f200 8098 	bhi.w	800d33a <f_printf+0x27a>
 800d20a:	a201      	add	r2, pc, #4	@ (adr r2, 800d210 <f_printf+0x150>)
 800d20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d210:	0800d31b 	.word	0x0800d31b
 800d214:	0800d303 	.word	0x0800d303
 800d218:	0800d32b 	.word	0x0800d32b
 800d21c:	0800d33b 	.word	0x0800d33b
 800d220:	0800d33b 	.word	0x0800d33b
 800d224:	0800d33b 	.word	0x0800d33b
 800d228:	0800d33b 	.word	0x0800d33b
 800d22c:	0800d33b 	.word	0x0800d33b
 800d230:	0800d33b 	.word	0x0800d33b
 800d234:	0800d33b 	.word	0x0800d33b
 800d238:	0800d33b 	.word	0x0800d33b
 800d23c:	0800d33b 	.word	0x0800d33b
 800d240:	0800d33b 	.word	0x0800d33b
 800d244:	0800d323 	.word	0x0800d323
 800d248:	0800d33b 	.word	0x0800d33b
 800d24c:	0800d33b 	.word	0x0800d33b
 800d250:	0800d33b 	.word	0x0800d33b
 800d254:	0800d26d 	.word	0x0800d26d
 800d258:	0800d33b 	.word	0x0800d33b
 800d25c:	0800d32b 	.word	0x0800d32b
 800d260:	0800d33b 	.word	0x0800d33b
 800d264:	0800d33b 	.word	0x0800d33b
 800d268:	0800d333 	.word	0x0800d333
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800d26c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d26e:	1d1a      	adds	r2, r3, #4
 800d270:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 800d276:	2300      	movs	r3, #0
 800d278:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d27c:	e004      	b.n	800d288 <f_printf+0x1c8>
 800d27e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d282:	3301      	adds	r3, #1
 800d284:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d288:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d28a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d28e:	4413      	add	r3, r2
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1f3      	bne.n	800d27e <f_printf+0x1be>
			if (!(f & 2)) {
 800d296:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d29a:	f003 0302 	and.w	r3, r3, #2
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d11a      	bne.n	800d2d8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800d2a2:	e005      	b.n	800d2b0 <f_printf+0x1f0>
 800d2a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d2a8:	2120      	movs	r1, #32
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7ff fe90 	bl	800cfd0 <putc_bfd>
 800d2b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d2b4:	1c5a      	adds	r2, r3, #1
 800d2b6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d2ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d8f0      	bhi.n	800d2a4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800d2c2:	e009      	b.n	800d2d8 <f_printf+0x218>
 800d2c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d2c6:	1c5a      	adds	r2, r3, #1
 800d2c8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d2ca:	781a      	ldrb	r2, [r3, #0]
 800d2cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7ff fe7c 	bl	800cfd0 <putc_bfd>
 800d2d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d1f1      	bne.n	800d2c4 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800d2e0:	e005      	b.n	800d2ee <f_printf+0x22e>
 800d2e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d2e6:	2120      	movs	r1, #32
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7ff fe71 	bl	800cfd0 <putc_bfd>
 800d2ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d2f2:	1c5a      	adds	r2, r3, #1
 800d2f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d2f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d8f0      	bhi.n	800d2e2 <f_printf+0x222>
			continue;
 800d300:	e0ea      	b.n	800d4d8 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800d302:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d304:	1d1a      	adds	r2, r3, #4
 800d306:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	b2da      	uxtb	r2, r3
 800d30c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d310:	4611      	mov	r1, r2
 800d312:	4618      	mov	r0, r3
 800d314:	f7ff fe5c 	bl	800cfd0 <putc_bfd>
 800d318:	e0de      	b.n	800d4d8 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800d31a:	2302      	movs	r3, #2
 800d31c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d320:	e014      	b.n	800d34c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800d322:	2308      	movs	r3, #8
 800d324:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d328:	e010      	b.n	800d34c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800d32a:	230a      	movs	r3, #10
 800d32c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d330:	e00c      	b.n	800d34c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800d332:	2310      	movs	r3, #16
 800d334:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800d338:	e008      	b.n	800d34c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800d33a:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800d33e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d342:	4611      	mov	r1, r2
 800d344:	4618      	mov	r0, r3
 800d346:	f7ff fe43 	bl	800cfd0 <putc_bfd>
 800d34a:	e0c5      	b.n	800d4d8 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800d34c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d350:	f003 0304 	and.w	r3, r3, #4
 800d354:	2b00      	cmp	r3, #0
 800d356:	d004      	beq.n	800d362 <f_printf+0x2a2>
 800d358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d35a:	1d1a      	adds	r2, r3, #4
 800d35c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	e00c      	b.n	800d37c <f_printf+0x2bc>
 800d362:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d366:	2b44      	cmp	r3, #68	@ 0x44
 800d368:	d104      	bne.n	800d374 <f_printf+0x2b4>
 800d36a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d36c:	1d1a      	adds	r2, r3, #4
 800d36e:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	e003      	b.n	800d37c <f_printf+0x2bc>
 800d374:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d376:	1d1a      	adds	r2, r3, #4
 800d378:	67ba      	str	r2, [r7, #120]	@ 0x78
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800d380:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d384:	2b44      	cmp	r3, #68	@ 0x44
 800d386:	d10e      	bne.n	800d3a6 <f_printf+0x2e6>
 800d388:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	da0a      	bge.n	800d3a6 <f_printf+0x2e6>
			v = 0 - v;
 800d390:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d394:	425b      	negs	r3, r3
 800d396:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 800d39a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d39e:	f043 0308 	orr.w	r3, r3, #8
 800d3a2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800d3ac:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 800d3b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d3b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3b8:	fb01 f202 	mul.w	r2, r1, r2
 800d3bc:	1a9b      	subs	r3, r3, r2
 800d3be:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 800d3c2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800d3c6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d3ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800d3d2:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d3d6:	2b09      	cmp	r3, #9
 800d3d8:	d90b      	bls.n	800d3f2 <f_printf+0x332>
 800d3da:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800d3de:	2b78      	cmp	r3, #120	@ 0x78
 800d3e0:	d101      	bne.n	800d3e6 <f_printf+0x326>
 800d3e2:	2227      	movs	r2, #39	@ 0x27
 800d3e4:	e000      	b.n	800d3e8 <f_printf+0x328>
 800d3e6:	2207      	movs	r2, #7
 800d3e8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800d3ec:	4413      	add	r3, r2
 800d3ee:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 800d3f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d3f6:	1c5a      	adds	r2, r3, #1
 800d3f8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800d3fc:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800d400:	3230      	adds	r2, #48	@ 0x30
 800d402:	b2d2      	uxtb	r2, r2
 800d404:	3398      	adds	r3, #152	@ 0x98
 800d406:	443b      	add	r3, r7
 800d408:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800d40c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d410:	2b00      	cmp	r3, #0
 800d412:	d003      	beq.n	800d41c <f_printf+0x35c>
 800d414:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d418:	2b1f      	cmp	r3, #31
 800d41a:	d9c7      	bls.n	800d3ac <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800d41c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d420:	f003 0308 	and.w	r3, r3, #8
 800d424:	2b00      	cmp	r3, #0
 800d426:	d009      	beq.n	800d43c <f_printf+0x37c>
 800d428:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d42c:	1c5a      	adds	r2, r3, #1
 800d42e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800d432:	3398      	adds	r3, #152	@ 0x98
 800d434:	443b      	add	r3, r7
 800d436:	222d      	movs	r2, #45	@ 0x2d
 800d438:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800d43c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d440:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d444:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d448:	f003 0301 	and.w	r3, r3, #1
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d001      	beq.n	800d454 <f_printf+0x394>
 800d450:	2330      	movs	r3, #48	@ 0x30
 800d452:	e000      	b.n	800d456 <f_printf+0x396>
 800d454:	2320      	movs	r3, #32
 800d456:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800d45a:	e007      	b.n	800d46c <f_printf+0x3ac>
 800d45c:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800d460:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d464:	4611      	mov	r1, r2
 800d466:	4618      	mov	r0, r3
 800d468:	f7ff fdb2 	bl	800cfd0 <putc_bfd>
 800d46c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800d470:	f003 0302 	and.w	r3, r3, #2
 800d474:	2b00      	cmp	r3, #0
 800d476:	d108      	bne.n	800d48a <f_printf+0x3ca>
 800d478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d47c:	1c5a      	adds	r2, r3, #1
 800d47e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d482:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d486:	429a      	cmp	r2, r3
 800d488:	d8e8      	bhi.n	800d45c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800d48a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d48e:	3b01      	subs	r3, #1
 800d490:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d494:	f107 020c 	add.w	r2, r7, #12
 800d498:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d49c:	4413      	add	r3, r2
 800d49e:	781a      	ldrb	r2, [r3, #0]
 800d4a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d4a4:	4611      	mov	r1, r2
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7ff fd92 	bl	800cfd0 <putc_bfd>
		} while (i);
 800d4ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d1ea      	bne.n	800d48a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800d4b4:	e007      	b.n	800d4c6 <f_printf+0x406>
 800d4b6:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800d4ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d4be:	4611      	mov	r1, r2
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7ff fd85 	bl	800cfd0 <putc_bfd>
 800d4c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d4ca:	1c5a      	adds	r2, r3, #1
 800d4cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d4d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d8ee      	bhi.n	800d4b6 <f_printf+0x3f6>
		c = *fmt++;
 800d4d8:	e600      	b.n	800d0dc <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800d4da:	bf00      	nop
 800d4dc:	e000      	b.n	800d4e0 <f_printf+0x420>
		if (!c) break;
 800d4de:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800d4e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7ff fdb0 	bl	800d04a <putc_flush>
 800d4ea:	4603      	mov	r3, r0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	379c      	adds	r7, #156	@ 0x9c
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d4f6:	b003      	add	sp, #12
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop

0800d4fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b087      	sub	sp, #28
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	4613      	mov	r3, r2
 800d508:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d50a:	2301      	movs	r3, #1
 800d50c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d50e:	2300      	movs	r3, #0
 800d510:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d512:	4b1f      	ldr	r3, [pc, #124]	@ (800d590 <FATFS_LinkDriverEx+0x94>)
 800d514:	7a5b      	ldrb	r3, [r3, #9]
 800d516:	b2db      	uxtb	r3, r3
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d131      	bne.n	800d580 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d51c:	4b1c      	ldr	r3, [pc, #112]	@ (800d590 <FATFS_LinkDriverEx+0x94>)
 800d51e:	7a5b      	ldrb	r3, [r3, #9]
 800d520:	b2db      	uxtb	r3, r3
 800d522:	461a      	mov	r2, r3
 800d524:	4b1a      	ldr	r3, [pc, #104]	@ (800d590 <FATFS_LinkDriverEx+0x94>)
 800d526:	2100      	movs	r1, #0
 800d528:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d52a:	4b19      	ldr	r3, [pc, #100]	@ (800d590 <FATFS_LinkDriverEx+0x94>)
 800d52c:	7a5b      	ldrb	r3, [r3, #9]
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	4a17      	ldr	r2, [pc, #92]	@ (800d590 <FATFS_LinkDriverEx+0x94>)
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	4413      	add	r3, r2
 800d536:	68fa      	ldr	r2, [r7, #12]
 800d538:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d53a:	4b15      	ldr	r3, [pc, #84]	@ (800d590 <FATFS_LinkDriverEx+0x94>)
 800d53c:	7a5b      	ldrb	r3, [r3, #9]
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	461a      	mov	r2, r3
 800d542:	4b13      	ldr	r3, [pc, #76]	@ (800d590 <FATFS_LinkDriverEx+0x94>)
 800d544:	4413      	add	r3, r2
 800d546:	79fa      	ldrb	r2, [r7, #7]
 800d548:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d54a:	4b11      	ldr	r3, [pc, #68]	@ (800d590 <FATFS_LinkDriverEx+0x94>)
 800d54c:	7a5b      	ldrb	r3, [r3, #9]
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	1c5a      	adds	r2, r3, #1
 800d552:	b2d1      	uxtb	r1, r2
 800d554:	4a0e      	ldr	r2, [pc, #56]	@ (800d590 <FATFS_LinkDriverEx+0x94>)
 800d556:	7251      	strb	r1, [r2, #9]
 800d558:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d55a:	7dbb      	ldrb	r3, [r7, #22]
 800d55c:	3330      	adds	r3, #48	@ 0x30
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	3301      	adds	r3, #1
 800d568:	223a      	movs	r2, #58	@ 0x3a
 800d56a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	3302      	adds	r3, #2
 800d570:	222f      	movs	r2, #47	@ 0x2f
 800d572:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	3303      	adds	r3, #3
 800d578:	2200      	movs	r2, #0
 800d57a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d57c:	2300      	movs	r3, #0
 800d57e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d580:	7dfb      	ldrb	r3, [r7, #23]
}
 800d582:	4618      	mov	r0, r3
 800d584:	371c      	adds	r7, #28
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	20000d14 	.word	0x20000d14

0800d594 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d59e:	2200      	movs	r2, #0
 800d5a0:	6839      	ldr	r1, [r7, #0]
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f7ff ffaa 	bl	800d4fc <FATFS_LinkDriverEx>
 800d5a8:	4603      	mov	r3, r0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3708      	adds	r7, #8
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}

0800d5b2 <memset>:
 800d5b2:	4402      	add	r2, r0
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d100      	bne.n	800d5bc <memset+0xa>
 800d5ba:	4770      	bx	lr
 800d5bc:	f803 1b01 	strb.w	r1, [r3], #1
 800d5c0:	e7f9      	b.n	800d5b6 <memset+0x4>
	...

0800d5c4 <__errno>:
 800d5c4:	4b01      	ldr	r3, [pc, #4]	@ (800d5cc <__errno+0x8>)
 800d5c6:	6818      	ldr	r0, [r3, #0]
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	200000cc 	.word	0x200000cc

0800d5d0 <__libc_init_array>:
 800d5d0:	b570      	push	{r4, r5, r6, lr}
 800d5d2:	4d0d      	ldr	r5, [pc, #52]	@ (800d608 <__libc_init_array+0x38>)
 800d5d4:	4c0d      	ldr	r4, [pc, #52]	@ (800d60c <__libc_init_array+0x3c>)
 800d5d6:	1b64      	subs	r4, r4, r5
 800d5d8:	10a4      	asrs	r4, r4, #2
 800d5da:	2600      	movs	r6, #0
 800d5dc:	42a6      	cmp	r6, r4
 800d5de:	d109      	bne.n	800d5f4 <__libc_init_array+0x24>
 800d5e0:	4d0b      	ldr	r5, [pc, #44]	@ (800d610 <__libc_init_array+0x40>)
 800d5e2:	4c0c      	ldr	r4, [pc, #48]	@ (800d614 <__libc_init_array+0x44>)
 800d5e4:	f000 fd8a 	bl	800e0fc <_init>
 800d5e8:	1b64      	subs	r4, r4, r5
 800d5ea:	10a4      	asrs	r4, r4, #2
 800d5ec:	2600      	movs	r6, #0
 800d5ee:	42a6      	cmp	r6, r4
 800d5f0:	d105      	bne.n	800d5fe <__libc_init_array+0x2e>
 800d5f2:	bd70      	pop	{r4, r5, r6, pc}
 800d5f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5f8:	4798      	blx	r3
 800d5fa:	3601      	adds	r6, #1
 800d5fc:	e7ee      	b.n	800d5dc <__libc_init_array+0xc>
 800d5fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800d602:	4798      	blx	r3
 800d604:	3601      	adds	r6, #1
 800d606:	e7f2      	b.n	800d5ee <__libc_init_array+0x1e>
 800d608:	0800e300 	.word	0x0800e300
 800d60c:	0800e300 	.word	0x0800e300
 800d610:	0800e300 	.word	0x0800e300
 800d614:	0800e304 	.word	0x0800e304

0800d618 <atan2>:
 800d618:	f000 baf2 	b.w	800dc00 <__ieee754_atan2>
 800d61c:	0000      	movs	r0, r0
	...

0800d620 <log>:
 800d620:	b538      	push	{r3, r4, r5, lr}
 800d622:	ed2d 8b02 	vpush	{d8}
 800d626:	ec55 4b10 	vmov	r4, r5, d0
 800d62a:	f000 fbb1 	bl	800dd90 <__ieee754_log>
 800d62e:	4622      	mov	r2, r4
 800d630:	462b      	mov	r3, r5
 800d632:	4620      	mov	r0, r4
 800d634:	4629      	mov	r1, r5
 800d636:	eeb0 8a40 	vmov.f32	s16, s0
 800d63a:	eef0 8a60 	vmov.f32	s17, s1
 800d63e:	f7f3 fa21 	bl	8000a84 <__aeabi_dcmpun>
 800d642:	b998      	cbnz	r0, 800d66c <log+0x4c>
 800d644:	2200      	movs	r2, #0
 800d646:	2300      	movs	r3, #0
 800d648:	4620      	mov	r0, r4
 800d64a:	4629      	mov	r1, r5
 800d64c:	f7f3 fa10 	bl	8000a70 <__aeabi_dcmpgt>
 800d650:	b960      	cbnz	r0, 800d66c <log+0x4c>
 800d652:	2200      	movs	r2, #0
 800d654:	2300      	movs	r3, #0
 800d656:	4620      	mov	r0, r4
 800d658:	4629      	mov	r1, r5
 800d65a:	f7f3 f9e1 	bl	8000a20 <__aeabi_dcmpeq>
 800d65e:	b160      	cbz	r0, 800d67a <log+0x5a>
 800d660:	f7ff ffb0 	bl	800d5c4 <__errno>
 800d664:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800d690 <log+0x70>
 800d668:	2322      	movs	r3, #34	@ 0x22
 800d66a:	6003      	str	r3, [r0, #0]
 800d66c:	eeb0 0a48 	vmov.f32	s0, s16
 800d670:	eef0 0a68 	vmov.f32	s1, s17
 800d674:	ecbd 8b02 	vpop	{d8}
 800d678:	bd38      	pop	{r3, r4, r5, pc}
 800d67a:	f7ff ffa3 	bl	800d5c4 <__errno>
 800d67e:	ecbd 8b02 	vpop	{d8}
 800d682:	2321      	movs	r3, #33	@ 0x21
 800d684:	6003      	str	r3, [r0, #0]
 800d686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d68a:	4803      	ldr	r0, [pc, #12]	@ (800d698 <log+0x78>)
 800d68c:	f000 b9d4 	b.w	800da38 <nan>
 800d690:	00000000 	.word	0x00000000
 800d694:	fff00000 	.word	0xfff00000
 800d698:	0800e280 	.word	0x0800e280

0800d69c <sqrt>:
 800d69c:	b538      	push	{r3, r4, r5, lr}
 800d69e:	ed2d 8b02 	vpush	{d8}
 800d6a2:	ec55 4b10 	vmov	r4, r5, d0
 800d6a6:	f000 f9cf 	bl	800da48 <__ieee754_sqrt>
 800d6aa:	4622      	mov	r2, r4
 800d6ac:	462b      	mov	r3, r5
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	eeb0 8a40 	vmov.f32	s16, s0
 800d6b6:	eef0 8a60 	vmov.f32	s17, s1
 800d6ba:	f7f3 f9e3 	bl	8000a84 <__aeabi_dcmpun>
 800d6be:	b990      	cbnz	r0, 800d6e6 <sqrt+0x4a>
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	f7f3 f9b4 	bl	8000a34 <__aeabi_dcmplt>
 800d6cc:	b158      	cbz	r0, 800d6e6 <sqrt+0x4a>
 800d6ce:	f7ff ff79 	bl	800d5c4 <__errno>
 800d6d2:	2321      	movs	r3, #33	@ 0x21
 800d6d4:	6003      	str	r3, [r0, #0]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	2300      	movs	r3, #0
 800d6da:	4610      	mov	r0, r2
 800d6dc:	4619      	mov	r1, r3
 800d6de:	f7f3 f861 	bl	80007a4 <__aeabi_ddiv>
 800d6e2:	ec41 0b18 	vmov	d8, r0, r1
 800d6e6:	eeb0 0a48 	vmov.f32	s0, s16
 800d6ea:	eef0 0a68 	vmov.f32	s1, s17
 800d6ee:	ecbd 8b02 	vpop	{d8}
 800d6f2:	bd38      	pop	{r3, r4, r5, pc}
 800d6f4:	0000      	movs	r0, r0
	...

0800d6f8 <atan>:
 800d6f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6fc:	ec55 4b10 	vmov	r4, r5, d0
 800d700:	4bbf      	ldr	r3, [pc, #764]	@ (800da00 <atan+0x308>)
 800d702:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d706:	429e      	cmp	r6, r3
 800d708:	46ab      	mov	fp, r5
 800d70a:	d918      	bls.n	800d73e <atan+0x46>
 800d70c:	4bbd      	ldr	r3, [pc, #756]	@ (800da04 <atan+0x30c>)
 800d70e:	429e      	cmp	r6, r3
 800d710:	d801      	bhi.n	800d716 <atan+0x1e>
 800d712:	d109      	bne.n	800d728 <atan+0x30>
 800d714:	b144      	cbz	r4, 800d728 <atan+0x30>
 800d716:	4622      	mov	r2, r4
 800d718:	462b      	mov	r3, r5
 800d71a:	4620      	mov	r0, r4
 800d71c:	4629      	mov	r1, r5
 800d71e:	f7f2 fd61 	bl	80001e4 <__adddf3>
 800d722:	4604      	mov	r4, r0
 800d724:	460d      	mov	r5, r1
 800d726:	e006      	b.n	800d736 <atan+0x3e>
 800d728:	f1bb 0f00 	cmp.w	fp, #0
 800d72c:	f340 812b 	ble.w	800d986 <atan+0x28e>
 800d730:	a597      	add	r5, pc, #604	@ (adr r5, 800d990 <atan+0x298>)
 800d732:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d736:	ec45 4b10 	vmov	d0, r4, r5
 800d73a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d73e:	4bb2      	ldr	r3, [pc, #712]	@ (800da08 <atan+0x310>)
 800d740:	429e      	cmp	r6, r3
 800d742:	d813      	bhi.n	800d76c <atan+0x74>
 800d744:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d748:	429e      	cmp	r6, r3
 800d74a:	d80c      	bhi.n	800d766 <atan+0x6e>
 800d74c:	a392      	add	r3, pc, #584	@ (adr r3, 800d998 <atan+0x2a0>)
 800d74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d752:	4620      	mov	r0, r4
 800d754:	4629      	mov	r1, r5
 800d756:	f7f2 fd45 	bl	80001e4 <__adddf3>
 800d75a:	4bac      	ldr	r3, [pc, #688]	@ (800da0c <atan+0x314>)
 800d75c:	2200      	movs	r2, #0
 800d75e:	f7f3 f987 	bl	8000a70 <__aeabi_dcmpgt>
 800d762:	2800      	cmp	r0, #0
 800d764:	d1e7      	bne.n	800d736 <atan+0x3e>
 800d766:	f04f 3aff 	mov.w	sl, #4294967295
 800d76a:	e029      	b.n	800d7c0 <atan+0xc8>
 800d76c:	f000 f95c 	bl	800da28 <fabs>
 800d770:	4ba7      	ldr	r3, [pc, #668]	@ (800da10 <atan+0x318>)
 800d772:	429e      	cmp	r6, r3
 800d774:	ec55 4b10 	vmov	r4, r5, d0
 800d778:	f200 80bc 	bhi.w	800d8f4 <atan+0x1fc>
 800d77c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d780:	429e      	cmp	r6, r3
 800d782:	f200 809e 	bhi.w	800d8c2 <atan+0x1ca>
 800d786:	4622      	mov	r2, r4
 800d788:	462b      	mov	r3, r5
 800d78a:	4620      	mov	r0, r4
 800d78c:	4629      	mov	r1, r5
 800d78e:	f7f2 fd29 	bl	80001e4 <__adddf3>
 800d792:	4b9e      	ldr	r3, [pc, #632]	@ (800da0c <atan+0x314>)
 800d794:	2200      	movs	r2, #0
 800d796:	f7f2 fd23 	bl	80001e0 <__aeabi_dsub>
 800d79a:	2200      	movs	r2, #0
 800d79c:	4606      	mov	r6, r0
 800d79e:	460f      	mov	r7, r1
 800d7a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	4629      	mov	r1, r5
 800d7a8:	f7f2 fd1c 	bl	80001e4 <__adddf3>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	4639      	mov	r1, r7
 800d7b4:	f7f2 fff6 	bl	80007a4 <__aeabi_ddiv>
 800d7b8:	f04f 0a00 	mov.w	sl, #0
 800d7bc:	4604      	mov	r4, r0
 800d7be:	460d      	mov	r5, r1
 800d7c0:	4622      	mov	r2, r4
 800d7c2:	462b      	mov	r3, r5
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	4629      	mov	r1, r5
 800d7c8:	f7f2 fec2 	bl	8000550 <__aeabi_dmul>
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	4680      	mov	r8, r0
 800d7d2:	4689      	mov	r9, r1
 800d7d4:	f7f2 febc 	bl	8000550 <__aeabi_dmul>
 800d7d8:	a371      	add	r3, pc, #452	@ (adr r3, 800d9a0 <atan+0x2a8>)
 800d7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7de:	4606      	mov	r6, r0
 800d7e0:	460f      	mov	r7, r1
 800d7e2:	f7f2 feb5 	bl	8000550 <__aeabi_dmul>
 800d7e6:	a370      	add	r3, pc, #448	@ (adr r3, 800d9a8 <atan+0x2b0>)
 800d7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ec:	f7f2 fcfa 	bl	80001e4 <__adddf3>
 800d7f0:	4632      	mov	r2, r6
 800d7f2:	463b      	mov	r3, r7
 800d7f4:	f7f2 feac 	bl	8000550 <__aeabi_dmul>
 800d7f8:	a36d      	add	r3, pc, #436	@ (adr r3, 800d9b0 <atan+0x2b8>)
 800d7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fe:	f7f2 fcf1 	bl	80001e4 <__adddf3>
 800d802:	4632      	mov	r2, r6
 800d804:	463b      	mov	r3, r7
 800d806:	f7f2 fea3 	bl	8000550 <__aeabi_dmul>
 800d80a:	a36b      	add	r3, pc, #428	@ (adr r3, 800d9b8 <atan+0x2c0>)
 800d80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d810:	f7f2 fce8 	bl	80001e4 <__adddf3>
 800d814:	4632      	mov	r2, r6
 800d816:	463b      	mov	r3, r7
 800d818:	f7f2 fe9a 	bl	8000550 <__aeabi_dmul>
 800d81c:	a368      	add	r3, pc, #416	@ (adr r3, 800d9c0 <atan+0x2c8>)
 800d81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d822:	f7f2 fcdf 	bl	80001e4 <__adddf3>
 800d826:	4632      	mov	r2, r6
 800d828:	463b      	mov	r3, r7
 800d82a:	f7f2 fe91 	bl	8000550 <__aeabi_dmul>
 800d82e:	a366      	add	r3, pc, #408	@ (adr r3, 800d9c8 <atan+0x2d0>)
 800d830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d834:	f7f2 fcd6 	bl	80001e4 <__adddf3>
 800d838:	4642      	mov	r2, r8
 800d83a:	464b      	mov	r3, r9
 800d83c:	f7f2 fe88 	bl	8000550 <__aeabi_dmul>
 800d840:	a363      	add	r3, pc, #396	@ (adr r3, 800d9d0 <atan+0x2d8>)
 800d842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d846:	4680      	mov	r8, r0
 800d848:	4689      	mov	r9, r1
 800d84a:	4630      	mov	r0, r6
 800d84c:	4639      	mov	r1, r7
 800d84e:	f7f2 fe7f 	bl	8000550 <__aeabi_dmul>
 800d852:	a361      	add	r3, pc, #388	@ (adr r3, 800d9d8 <atan+0x2e0>)
 800d854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d858:	f7f2 fcc2 	bl	80001e0 <__aeabi_dsub>
 800d85c:	4632      	mov	r2, r6
 800d85e:	463b      	mov	r3, r7
 800d860:	f7f2 fe76 	bl	8000550 <__aeabi_dmul>
 800d864:	a35e      	add	r3, pc, #376	@ (adr r3, 800d9e0 <atan+0x2e8>)
 800d866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86a:	f7f2 fcb9 	bl	80001e0 <__aeabi_dsub>
 800d86e:	4632      	mov	r2, r6
 800d870:	463b      	mov	r3, r7
 800d872:	f7f2 fe6d 	bl	8000550 <__aeabi_dmul>
 800d876:	a35c      	add	r3, pc, #368	@ (adr r3, 800d9e8 <atan+0x2f0>)
 800d878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87c:	f7f2 fcb0 	bl	80001e0 <__aeabi_dsub>
 800d880:	4632      	mov	r2, r6
 800d882:	463b      	mov	r3, r7
 800d884:	f7f2 fe64 	bl	8000550 <__aeabi_dmul>
 800d888:	a359      	add	r3, pc, #356	@ (adr r3, 800d9f0 <atan+0x2f8>)
 800d88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88e:	f7f2 fca7 	bl	80001e0 <__aeabi_dsub>
 800d892:	4632      	mov	r2, r6
 800d894:	463b      	mov	r3, r7
 800d896:	f7f2 fe5b 	bl	8000550 <__aeabi_dmul>
 800d89a:	4602      	mov	r2, r0
 800d89c:	460b      	mov	r3, r1
 800d89e:	4640      	mov	r0, r8
 800d8a0:	4649      	mov	r1, r9
 800d8a2:	f7f2 fc9f 	bl	80001e4 <__adddf3>
 800d8a6:	4622      	mov	r2, r4
 800d8a8:	462b      	mov	r3, r5
 800d8aa:	f7f2 fe51 	bl	8000550 <__aeabi_dmul>
 800d8ae:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	d148      	bne.n	800d94a <atan+0x252>
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	4629      	mov	r1, r5
 800d8bc:	f7f2 fc90 	bl	80001e0 <__aeabi_dsub>
 800d8c0:	e72f      	b.n	800d722 <atan+0x2a>
 800d8c2:	4b52      	ldr	r3, [pc, #328]	@ (800da0c <atan+0x314>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	4629      	mov	r1, r5
 800d8ca:	f7f2 fc89 	bl	80001e0 <__aeabi_dsub>
 800d8ce:	4b4f      	ldr	r3, [pc, #316]	@ (800da0c <atan+0x314>)
 800d8d0:	4606      	mov	r6, r0
 800d8d2:	460f      	mov	r7, r1
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	4629      	mov	r1, r5
 800d8da:	f7f2 fc83 	bl	80001e4 <__adddf3>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	4639      	mov	r1, r7
 800d8e6:	f7f2 ff5d 	bl	80007a4 <__aeabi_ddiv>
 800d8ea:	f04f 0a01 	mov.w	sl, #1
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	460d      	mov	r5, r1
 800d8f2:	e765      	b.n	800d7c0 <atan+0xc8>
 800d8f4:	4b47      	ldr	r3, [pc, #284]	@ (800da14 <atan+0x31c>)
 800d8f6:	429e      	cmp	r6, r3
 800d8f8:	d21c      	bcs.n	800d934 <atan+0x23c>
 800d8fa:	4b47      	ldr	r3, [pc, #284]	@ (800da18 <atan+0x320>)
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	4620      	mov	r0, r4
 800d900:	4629      	mov	r1, r5
 800d902:	f7f2 fc6d 	bl	80001e0 <__aeabi_dsub>
 800d906:	4b44      	ldr	r3, [pc, #272]	@ (800da18 <atan+0x320>)
 800d908:	4606      	mov	r6, r0
 800d90a:	460f      	mov	r7, r1
 800d90c:	2200      	movs	r2, #0
 800d90e:	4620      	mov	r0, r4
 800d910:	4629      	mov	r1, r5
 800d912:	f7f2 fe1d 	bl	8000550 <__aeabi_dmul>
 800d916:	4b3d      	ldr	r3, [pc, #244]	@ (800da0c <atan+0x314>)
 800d918:	2200      	movs	r2, #0
 800d91a:	f7f2 fc63 	bl	80001e4 <__adddf3>
 800d91e:	4602      	mov	r2, r0
 800d920:	460b      	mov	r3, r1
 800d922:	4630      	mov	r0, r6
 800d924:	4639      	mov	r1, r7
 800d926:	f7f2 ff3d 	bl	80007a4 <__aeabi_ddiv>
 800d92a:	f04f 0a02 	mov.w	sl, #2
 800d92e:	4604      	mov	r4, r0
 800d930:	460d      	mov	r5, r1
 800d932:	e745      	b.n	800d7c0 <atan+0xc8>
 800d934:	4622      	mov	r2, r4
 800d936:	462b      	mov	r3, r5
 800d938:	4938      	ldr	r1, [pc, #224]	@ (800da1c <atan+0x324>)
 800d93a:	2000      	movs	r0, #0
 800d93c:	f7f2 ff32 	bl	80007a4 <__aeabi_ddiv>
 800d940:	f04f 0a03 	mov.w	sl, #3
 800d944:	4604      	mov	r4, r0
 800d946:	460d      	mov	r5, r1
 800d948:	e73a      	b.n	800d7c0 <atan+0xc8>
 800d94a:	4b35      	ldr	r3, [pc, #212]	@ (800da20 <atan+0x328>)
 800d94c:	4e35      	ldr	r6, [pc, #212]	@ (800da24 <atan+0x32c>)
 800d94e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d956:	f7f2 fc43 	bl	80001e0 <__aeabi_dsub>
 800d95a:	4622      	mov	r2, r4
 800d95c:	462b      	mov	r3, r5
 800d95e:	f7f2 fc3f 	bl	80001e0 <__aeabi_dsub>
 800d962:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d966:	4602      	mov	r2, r0
 800d968:	460b      	mov	r3, r1
 800d96a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d96e:	f7f2 fc37 	bl	80001e0 <__aeabi_dsub>
 800d972:	f1bb 0f00 	cmp.w	fp, #0
 800d976:	4604      	mov	r4, r0
 800d978:	460d      	mov	r5, r1
 800d97a:	f6bf aedc 	bge.w	800d736 <atan+0x3e>
 800d97e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d982:	461d      	mov	r5, r3
 800d984:	e6d7      	b.n	800d736 <atan+0x3e>
 800d986:	a51c      	add	r5, pc, #112	@ (adr r5, 800d9f8 <atan+0x300>)
 800d988:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d98c:	e6d3      	b.n	800d736 <atan+0x3e>
 800d98e:	bf00      	nop
 800d990:	54442d18 	.word	0x54442d18
 800d994:	3ff921fb 	.word	0x3ff921fb
 800d998:	8800759c 	.word	0x8800759c
 800d99c:	7e37e43c 	.word	0x7e37e43c
 800d9a0:	e322da11 	.word	0xe322da11
 800d9a4:	3f90ad3a 	.word	0x3f90ad3a
 800d9a8:	24760deb 	.word	0x24760deb
 800d9ac:	3fa97b4b 	.word	0x3fa97b4b
 800d9b0:	a0d03d51 	.word	0xa0d03d51
 800d9b4:	3fb10d66 	.word	0x3fb10d66
 800d9b8:	c54c206e 	.word	0xc54c206e
 800d9bc:	3fb745cd 	.word	0x3fb745cd
 800d9c0:	920083ff 	.word	0x920083ff
 800d9c4:	3fc24924 	.word	0x3fc24924
 800d9c8:	5555550d 	.word	0x5555550d
 800d9cc:	3fd55555 	.word	0x3fd55555
 800d9d0:	2c6a6c2f 	.word	0x2c6a6c2f
 800d9d4:	bfa2b444 	.word	0xbfa2b444
 800d9d8:	52defd9a 	.word	0x52defd9a
 800d9dc:	3fadde2d 	.word	0x3fadde2d
 800d9e0:	af749a6d 	.word	0xaf749a6d
 800d9e4:	3fb3b0f2 	.word	0x3fb3b0f2
 800d9e8:	fe231671 	.word	0xfe231671
 800d9ec:	3fbc71c6 	.word	0x3fbc71c6
 800d9f0:	9998ebc4 	.word	0x9998ebc4
 800d9f4:	3fc99999 	.word	0x3fc99999
 800d9f8:	54442d18 	.word	0x54442d18
 800d9fc:	bff921fb 	.word	0xbff921fb
 800da00:	440fffff 	.word	0x440fffff
 800da04:	7ff00000 	.word	0x7ff00000
 800da08:	3fdbffff 	.word	0x3fdbffff
 800da0c:	3ff00000 	.word	0x3ff00000
 800da10:	3ff2ffff 	.word	0x3ff2ffff
 800da14:	40038000 	.word	0x40038000
 800da18:	3ff80000 	.word	0x3ff80000
 800da1c:	bff00000 	.word	0xbff00000
 800da20:	0800e288 	.word	0x0800e288
 800da24:	0800e2a8 	.word	0x0800e2a8

0800da28 <fabs>:
 800da28:	ec51 0b10 	vmov	r0, r1, d0
 800da2c:	4602      	mov	r2, r0
 800da2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800da32:	ec43 2b10 	vmov	d0, r2, r3
 800da36:	4770      	bx	lr

0800da38 <nan>:
 800da38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800da40 <nan+0x8>
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	00000000 	.word	0x00000000
 800da44:	7ff80000 	.word	0x7ff80000

0800da48 <__ieee754_sqrt>:
 800da48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da4c:	4a68      	ldr	r2, [pc, #416]	@ (800dbf0 <__ieee754_sqrt+0x1a8>)
 800da4e:	ec55 4b10 	vmov	r4, r5, d0
 800da52:	43aa      	bics	r2, r5
 800da54:	462b      	mov	r3, r5
 800da56:	4621      	mov	r1, r4
 800da58:	d110      	bne.n	800da7c <__ieee754_sqrt+0x34>
 800da5a:	4622      	mov	r2, r4
 800da5c:	4620      	mov	r0, r4
 800da5e:	4629      	mov	r1, r5
 800da60:	f7f2 fd76 	bl	8000550 <__aeabi_dmul>
 800da64:	4602      	mov	r2, r0
 800da66:	460b      	mov	r3, r1
 800da68:	4620      	mov	r0, r4
 800da6a:	4629      	mov	r1, r5
 800da6c:	f7f2 fbba 	bl	80001e4 <__adddf3>
 800da70:	4604      	mov	r4, r0
 800da72:	460d      	mov	r5, r1
 800da74:	ec45 4b10 	vmov	d0, r4, r5
 800da78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da7c:	2d00      	cmp	r5, #0
 800da7e:	dc0e      	bgt.n	800da9e <__ieee754_sqrt+0x56>
 800da80:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800da84:	4322      	orrs	r2, r4
 800da86:	d0f5      	beq.n	800da74 <__ieee754_sqrt+0x2c>
 800da88:	b19d      	cbz	r5, 800dab2 <__ieee754_sqrt+0x6a>
 800da8a:	4622      	mov	r2, r4
 800da8c:	4620      	mov	r0, r4
 800da8e:	4629      	mov	r1, r5
 800da90:	f7f2 fba6 	bl	80001e0 <__aeabi_dsub>
 800da94:	4602      	mov	r2, r0
 800da96:	460b      	mov	r3, r1
 800da98:	f7f2 fe84 	bl	80007a4 <__aeabi_ddiv>
 800da9c:	e7e8      	b.n	800da70 <__ieee754_sqrt+0x28>
 800da9e:	152a      	asrs	r2, r5, #20
 800daa0:	d115      	bne.n	800dace <__ieee754_sqrt+0x86>
 800daa2:	2000      	movs	r0, #0
 800daa4:	e009      	b.n	800daba <__ieee754_sqrt+0x72>
 800daa6:	0acb      	lsrs	r3, r1, #11
 800daa8:	3a15      	subs	r2, #21
 800daaa:	0549      	lsls	r1, r1, #21
 800daac:	2b00      	cmp	r3, #0
 800daae:	d0fa      	beq.n	800daa6 <__ieee754_sqrt+0x5e>
 800dab0:	e7f7      	b.n	800daa2 <__ieee754_sqrt+0x5a>
 800dab2:	462a      	mov	r2, r5
 800dab4:	e7fa      	b.n	800daac <__ieee754_sqrt+0x64>
 800dab6:	005b      	lsls	r3, r3, #1
 800dab8:	3001      	adds	r0, #1
 800daba:	02dc      	lsls	r4, r3, #11
 800dabc:	d5fb      	bpl.n	800dab6 <__ieee754_sqrt+0x6e>
 800dabe:	1e44      	subs	r4, r0, #1
 800dac0:	1b12      	subs	r2, r2, r4
 800dac2:	f1c0 0420 	rsb	r4, r0, #32
 800dac6:	fa21 f404 	lsr.w	r4, r1, r4
 800daca:	4323      	orrs	r3, r4
 800dacc:	4081      	lsls	r1, r0
 800dace:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dad2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800dad6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dada:	07d2      	lsls	r2, r2, #31
 800dadc:	bf5c      	itt	pl
 800dade:	005b      	lslpl	r3, r3, #1
 800dae0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800dae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dae8:	bf58      	it	pl
 800daea:	0049      	lslpl	r1, r1, #1
 800daec:	2600      	movs	r6, #0
 800daee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800daf2:	106d      	asrs	r5, r5, #1
 800daf4:	0049      	lsls	r1, r1, #1
 800daf6:	2016      	movs	r0, #22
 800daf8:	4632      	mov	r2, r6
 800dafa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800dafe:	1917      	adds	r7, r2, r4
 800db00:	429f      	cmp	r7, r3
 800db02:	bfde      	ittt	le
 800db04:	193a      	addle	r2, r7, r4
 800db06:	1bdb      	suble	r3, r3, r7
 800db08:	1936      	addle	r6, r6, r4
 800db0a:	0fcf      	lsrs	r7, r1, #31
 800db0c:	3801      	subs	r0, #1
 800db0e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800db12:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800db16:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800db1a:	d1f0      	bne.n	800dafe <__ieee754_sqrt+0xb6>
 800db1c:	4604      	mov	r4, r0
 800db1e:	2720      	movs	r7, #32
 800db20:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800db24:	429a      	cmp	r2, r3
 800db26:	eb00 0e0c 	add.w	lr, r0, ip
 800db2a:	db02      	blt.n	800db32 <__ieee754_sqrt+0xea>
 800db2c:	d113      	bne.n	800db56 <__ieee754_sqrt+0x10e>
 800db2e:	458e      	cmp	lr, r1
 800db30:	d811      	bhi.n	800db56 <__ieee754_sqrt+0x10e>
 800db32:	f1be 0f00 	cmp.w	lr, #0
 800db36:	eb0e 000c 	add.w	r0, lr, ip
 800db3a:	da42      	bge.n	800dbc2 <__ieee754_sqrt+0x17a>
 800db3c:	2800      	cmp	r0, #0
 800db3e:	db40      	blt.n	800dbc2 <__ieee754_sqrt+0x17a>
 800db40:	f102 0801 	add.w	r8, r2, #1
 800db44:	1a9b      	subs	r3, r3, r2
 800db46:	458e      	cmp	lr, r1
 800db48:	bf88      	it	hi
 800db4a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800db4e:	eba1 010e 	sub.w	r1, r1, lr
 800db52:	4464      	add	r4, ip
 800db54:	4642      	mov	r2, r8
 800db56:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800db5a:	3f01      	subs	r7, #1
 800db5c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800db60:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800db64:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800db68:	d1dc      	bne.n	800db24 <__ieee754_sqrt+0xdc>
 800db6a:	4319      	orrs	r1, r3
 800db6c:	d01b      	beq.n	800dba6 <__ieee754_sqrt+0x15e>
 800db6e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800dbf4 <__ieee754_sqrt+0x1ac>
 800db72:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800dbf8 <__ieee754_sqrt+0x1b0>
 800db76:	e9da 0100 	ldrd	r0, r1, [sl]
 800db7a:	e9db 2300 	ldrd	r2, r3, [fp]
 800db7e:	f7f2 fb2f 	bl	80001e0 <__aeabi_dsub>
 800db82:	e9da 8900 	ldrd	r8, r9, [sl]
 800db86:	4602      	mov	r2, r0
 800db88:	460b      	mov	r3, r1
 800db8a:	4640      	mov	r0, r8
 800db8c:	4649      	mov	r1, r9
 800db8e:	f7f2 ff5b 	bl	8000a48 <__aeabi_dcmple>
 800db92:	b140      	cbz	r0, 800dba6 <__ieee754_sqrt+0x15e>
 800db94:	f1b4 3fff 	cmp.w	r4, #4294967295
 800db98:	e9da 0100 	ldrd	r0, r1, [sl]
 800db9c:	e9db 2300 	ldrd	r2, r3, [fp]
 800dba0:	d111      	bne.n	800dbc6 <__ieee754_sqrt+0x17e>
 800dba2:	3601      	adds	r6, #1
 800dba4:	463c      	mov	r4, r7
 800dba6:	1072      	asrs	r2, r6, #1
 800dba8:	0863      	lsrs	r3, r4, #1
 800dbaa:	07f1      	lsls	r1, r6, #31
 800dbac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800dbb0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800dbb4:	bf48      	it	mi
 800dbb6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800dbba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	e756      	b.n	800da70 <__ieee754_sqrt+0x28>
 800dbc2:	4690      	mov	r8, r2
 800dbc4:	e7be      	b.n	800db44 <__ieee754_sqrt+0xfc>
 800dbc6:	f7f2 fb0d 	bl	80001e4 <__adddf3>
 800dbca:	e9da 8900 	ldrd	r8, r9, [sl]
 800dbce:	4602      	mov	r2, r0
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	4640      	mov	r0, r8
 800dbd4:	4649      	mov	r1, r9
 800dbd6:	f7f2 ff2d 	bl	8000a34 <__aeabi_dcmplt>
 800dbda:	b120      	cbz	r0, 800dbe6 <__ieee754_sqrt+0x19e>
 800dbdc:	1ca0      	adds	r0, r4, #2
 800dbde:	bf08      	it	eq
 800dbe0:	3601      	addeq	r6, #1
 800dbe2:	3402      	adds	r4, #2
 800dbe4:	e7df      	b.n	800dba6 <__ieee754_sqrt+0x15e>
 800dbe6:	1c63      	adds	r3, r4, #1
 800dbe8:	f023 0401 	bic.w	r4, r3, #1
 800dbec:	e7db      	b.n	800dba6 <__ieee754_sqrt+0x15e>
 800dbee:	bf00      	nop
 800dbf0:	7ff00000 	.word	0x7ff00000
 800dbf4:	20000128 	.word	0x20000128
 800dbf8:	20000120 	.word	0x20000120
 800dbfc:	00000000 	.word	0x00000000

0800dc00 <__ieee754_atan2>:
 800dc00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc04:	ec57 6b11 	vmov	r6, r7, d1
 800dc08:	4273      	negs	r3, r6
 800dc0a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800dd88 <__ieee754_atan2+0x188>
 800dc0e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800dc12:	4333      	orrs	r3, r6
 800dc14:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800dc18:	4543      	cmp	r3, r8
 800dc1a:	ec51 0b10 	vmov	r0, r1, d0
 800dc1e:	4635      	mov	r5, r6
 800dc20:	d809      	bhi.n	800dc36 <__ieee754_atan2+0x36>
 800dc22:	4244      	negs	r4, r0
 800dc24:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dc28:	4304      	orrs	r4, r0
 800dc2a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800dc2e:	4544      	cmp	r4, r8
 800dc30:	468e      	mov	lr, r1
 800dc32:	4681      	mov	r9, r0
 800dc34:	d907      	bls.n	800dc46 <__ieee754_atan2+0x46>
 800dc36:	4632      	mov	r2, r6
 800dc38:	463b      	mov	r3, r7
 800dc3a:	f7f2 fad3 	bl	80001e4 <__adddf3>
 800dc3e:	ec41 0b10 	vmov	d0, r0, r1
 800dc42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc46:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800dc4a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800dc4e:	4334      	orrs	r4, r6
 800dc50:	d103      	bne.n	800dc5a <__ieee754_atan2+0x5a>
 800dc52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc56:	f7ff bd4f 	b.w	800d6f8 <atan>
 800dc5a:	17bc      	asrs	r4, r7, #30
 800dc5c:	f004 0402 	and.w	r4, r4, #2
 800dc60:	ea53 0909 	orrs.w	r9, r3, r9
 800dc64:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800dc68:	d107      	bne.n	800dc7a <__ieee754_atan2+0x7a>
 800dc6a:	2c02      	cmp	r4, #2
 800dc6c:	d05f      	beq.n	800dd2e <__ieee754_atan2+0x12e>
 800dc6e:	2c03      	cmp	r4, #3
 800dc70:	d1e5      	bne.n	800dc3e <__ieee754_atan2+0x3e>
 800dc72:	a141      	add	r1, pc, #260	@ (adr r1, 800dd78 <__ieee754_atan2+0x178>)
 800dc74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc78:	e7e1      	b.n	800dc3e <__ieee754_atan2+0x3e>
 800dc7a:	4315      	orrs	r5, r2
 800dc7c:	d106      	bne.n	800dc8c <__ieee754_atan2+0x8c>
 800dc7e:	f1be 0f00 	cmp.w	lr, #0
 800dc82:	da5f      	bge.n	800dd44 <__ieee754_atan2+0x144>
 800dc84:	a13e      	add	r1, pc, #248	@ (adr r1, 800dd80 <__ieee754_atan2+0x180>)
 800dc86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc8a:	e7d8      	b.n	800dc3e <__ieee754_atan2+0x3e>
 800dc8c:	4542      	cmp	r2, r8
 800dc8e:	d10f      	bne.n	800dcb0 <__ieee754_atan2+0xb0>
 800dc90:	4293      	cmp	r3, r2
 800dc92:	f104 34ff 	add.w	r4, r4, #4294967295
 800dc96:	d107      	bne.n	800dca8 <__ieee754_atan2+0xa8>
 800dc98:	2c02      	cmp	r4, #2
 800dc9a:	d84c      	bhi.n	800dd36 <__ieee754_atan2+0x136>
 800dc9c:	4b34      	ldr	r3, [pc, #208]	@ (800dd70 <__ieee754_atan2+0x170>)
 800dc9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dca2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dca6:	e7ca      	b.n	800dc3e <__ieee754_atan2+0x3e>
 800dca8:	2c02      	cmp	r4, #2
 800dcaa:	d848      	bhi.n	800dd3e <__ieee754_atan2+0x13e>
 800dcac:	4b31      	ldr	r3, [pc, #196]	@ (800dd74 <__ieee754_atan2+0x174>)
 800dcae:	e7f6      	b.n	800dc9e <__ieee754_atan2+0x9e>
 800dcb0:	4543      	cmp	r3, r8
 800dcb2:	d0e4      	beq.n	800dc7e <__ieee754_atan2+0x7e>
 800dcb4:	1a9b      	subs	r3, r3, r2
 800dcb6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800dcba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dcbe:	da1e      	bge.n	800dcfe <__ieee754_atan2+0xfe>
 800dcc0:	2f00      	cmp	r7, #0
 800dcc2:	da01      	bge.n	800dcc8 <__ieee754_atan2+0xc8>
 800dcc4:	323c      	adds	r2, #60	@ 0x3c
 800dcc6:	db1e      	blt.n	800dd06 <__ieee754_atan2+0x106>
 800dcc8:	4632      	mov	r2, r6
 800dcca:	463b      	mov	r3, r7
 800dccc:	f7f2 fd6a 	bl	80007a4 <__aeabi_ddiv>
 800dcd0:	ec41 0b10 	vmov	d0, r0, r1
 800dcd4:	f7ff fea8 	bl	800da28 <fabs>
 800dcd8:	f7ff fd0e 	bl	800d6f8 <atan>
 800dcdc:	ec51 0b10 	vmov	r0, r1, d0
 800dce0:	2c01      	cmp	r4, #1
 800dce2:	d013      	beq.n	800dd0c <__ieee754_atan2+0x10c>
 800dce4:	2c02      	cmp	r4, #2
 800dce6:	d015      	beq.n	800dd14 <__ieee754_atan2+0x114>
 800dce8:	2c00      	cmp	r4, #0
 800dcea:	d0a8      	beq.n	800dc3e <__ieee754_atan2+0x3e>
 800dcec:	a318      	add	r3, pc, #96	@ (adr r3, 800dd50 <__ieee754_atan2+0x150>)
 800dcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf2:	f7f2 fa75 	bl	80001e0 <__aeabi_dsub>
 800dcf6:	a318      	add	r3, pc, #96	@ (adr r3, 800dd58 <__ieee754_atan2+0x158>)
 800dcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcfc:	e014      	b.n	800dd28 <__ieee754_atan2+0x128>
 800dcfe:	a118      	add	r1, pc, #96	@ (adr r1, 800dd60 <__ieee754_atan2+0x160>)
 800dd00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd04:	e7ec      	b.n	800dce0 <__ieee754_atan2+0xe0>
 800dd06:	2000      	movs	r0, #0
 800dd08:	2100      	movs	r1, #0
 800dd0a:	e7e9      	b.n	800dce0 <__ieee754_atan2+0xe0>
 800dd0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd10:	4619      	mov	r1, r3
 800dd12:	e794      	b.n	800dc3e <__ieee754_atan2+0x3e>
 800dd14:	a30e      	add	r3, pc, #56	@ (adr r3, 800dd50 <__ieee754_atan2+0x150>)
 800dd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1a:	f7f2 fa61 	bl	80001e0 <__aeabi_dsub>
 800dd1e:	4602      	mov	r2, r0
 800dd20:	460b      	mov	r3, r1
 800dd22:	a10d      	add	r1, pc, #52	@ (adr r1, 800dd58 <__ieee754_atan2+0x158>)
 800dd24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd28:	f7f2 fa5a 	bl	80001e0 <__aeabi_dsub>
 800dd2c:	e787      	b.n	800dc3e <__ieee754_atan2+0x3e>
 800dd2e:	a10a      	add	r1, pc, #40	@ (adr r1, 800dd58 <__ieee754_atan2+0x158>)
 800dd30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd34:	e783      	b.n	800dc3e <__ieee754_atan2+0x3e>
 800dd36:	a10c      	add	r1, pc, #48	@ (adr r1, 800dd68 <__ieee754_atan2+0x168>)
 800dd38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd3c:	e77f      	b.n	800dc3e <__ieee754_atan2+0x3e>
 800dd3e:	2000      	movs	r0, #0
 800dd40:	2100      	movs	r1, #0
 800dd42:	e77c      	b.n	800dc3e <__ieee754_atan2+0x3e>
 800dd44:	a106      	add	r1, pc, #24	@ (adr r1, 800dd60 <__ieee754_atan2+0x160>)
 800dd46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd4a:	e778      	b.n	800dc3e <__ieee754_atan2+0x3e>
 800dd4c:	f3af 8000 	nop.w
 800dd50:	33145c07 	.word	0x33145c07
 800dd54:	3ca1a626 	.word	0x3ca1a626
 800dd58:	54442d18 	.word	0x54442d18
 800dd5c:	400921fb 	.word	0x400921fb
 800dd60:	54442d18 	.word	0x54442d18
 800dd64:	3ff921fb 	.word	0x3ff921fb
 800dd68:	54442d18 	.word	0x54442d18
 800dd6c:	3fe921fb 	.word	0x3fe921fb
 800dd70:	0800e2e0 	.word	0x0800e2e0
 800dd74:	0800e2c8 	.word	0x0800e2c8
 800dd78:	54442d18 	.word	0x54442d18
 800dd7c:	c00921fb 	.word	0xc00921fb
 800dd80:	54442d18 	.word	0x54442d18
 800dd84:	bff921fb 	.word	0xbff921fb
 800dd88:	7ff00000 	.word	0x7ff00000
 800dd8c:	00000000 	.word	0x00000000

0800dd90 <__ieee754_log>:
 800dd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd94:	ec51 0b10 	vmov	r0, r1, d0
 800dd98:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800dd9c:	b087      	sub	sp, #28
 800dd9e:	460d      	mov	r5, r1
 800dda0:	da26      	bge.n	800ddf0 <__ieee754_log+0x60>
 800dda2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dda6:	4303      	orrs	r3, r0
 800dda8:	4602      	mov	r2, r0
 800ddaa:	d10a      	bne.n	800ddc2 <__ieee754_log+0x32>
 800ddac:	49ce      	ldr	r1, [pc, #824]	@ (800e0e8 <__ieee754_log+0x358>)
 800ddae:	2200      	movs	r2, #0
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	2000      	movs	r0, #0
 800ddb4:	f7f2 fcf6 	bl	80007a4 <__aeabi_ddiv>
 800ddb8:	ec41 0b10 	vmov	d0, r0, r1
 800ddbc:	b007      	add	sp, #28
 800ddbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc2:	2900      	cmp	r1, #0
 800ddc4:	da05      	bge.n	800ddd2 <__ieee754_log+0x42>
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	f7f2 fa0a 	bl	80001e0 <__aeabi_dsub>
 800ddcc:	2200      	movs	r2, #0
 800ddce:	2300      	movs	r3, #0
 800ddd0:	e7f0      	b.n	800ddb4 <__ieee754_log+0x24>
 800ddd2:	4bc6      	ldr	r3, [pc, #792]	@ (800e0ec <__ieee754_log+0x35c>)
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	f7f2 fbbb 	bl	8000550 <__aeabi_dmul>
 800ddda:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800ddde:	460d      	mov	r5, r1
 800dde0:	4ac3      	ldr	r2, [pc, #780]	@ (800e0f0 <__ieee754_log+0x360>)
 800dde2:	4295      	cmp	r5, r2
 800dde4:	dd06      	ble.n	800ddf4 <__ieee754_log+0x64>
 800dde6:	4602      	mov	r2, r0
 800dde8:	460b      	mov	r3, r1
 800ddea:	f7f2 f9fb 	bl	80001e4 <__adddf3>
 800ddee:	e7e3      	b.n	800ddb8 <__ieee754_log+0x28>
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	e7f5      	b.n	800dde0 <__ieee754_log+0x50>
 800ddf4:	152c      	asrs	r4, r5, #20
 800ddf6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800ddfa:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ddfe:	441c      	add	r4, r3
 800de00:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800de04:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800de08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800de0c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800de10:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800de14:	ea42 0105 	orr.w	r1, r2, r5
 800de18:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800de1c:	2200      	movs	r2, #0
 800de1e:	4bb5      	ldr	r3, [pc, #724]	@ (800e0f4 <__ieee754_log+0x364>)
 800de20:	f7f2 f9de 	bl	80001e0 <__aeabi_dsub>
 800de24:	1cab      	adds	r3, r5, #2
 800de26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de2a:	2b02      	cmp	r3, #2
 800de2c:	4682      	mov	sl, r0
 800de2e:	468b      	mov	fp, r1
 800de30:	f04f 0200 	mov.w	r2, #0
 800de34:	dc53      	bgt.n	800dede <__ieee754_log+0x14e>
 800de36:	2300      	movs	r3, #0
 800de38:	f7f2 fdf2 	bl	8000a20 <__aeabi_dcmpeq>
 800de3c:	b1d0      	cbz	r0, 800de74 <__ieee754_log+0xe4>
 800de3e:	2c00      	cmp	r4, #0
 800de40:	f000 8120 	beq.w	800e084 <__ieee754_log+0x2f4>
 800de44:	4620      	mov	r0, r4
 800de46:	f7f2 fb19 	bl	800047c <__aeabi_i2d>
 800de4a:	a391      	add	r3, pc, #580	@ (adr r3, 800e090 <__ieee754_log+0x300>)
 800de4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de50:	4606      	mov	r6, r0
 800de52:	460f      	mov	r7, r1
 800de54:	f7f2 fb7c 	bl	8000550 <__aeabi_dmul>
 800de58:	a38f      	add	r3, pc, #572	@ (adr r3, 800e098 <__ieee754_log+0x308>)
 800de5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5e:	4604      	mov	r4, r0
 800de60:	460d      	mov	r5, r1
 800de62:	4630      	mov	r0, r6
 800de64:	4639      	mov	r1, r7
 800de66:	f7f2 fb73 	bl	8000550 <__aeabi_dmul>
 800de6a:	4602      	mov	r2, r0
 800de6c:	460b      	mov	r3, r1
 800de6e:	4620      	mov	r0, r4
 800de70:	4629      	mov	r1, r5
 800de72:	e7ba      	b.n	800ddea <__ieee754_log+0x5a>
 800de74:	a38a      	add	r3, pc, #552	@ (adr r3, 800e0a0 <__ieee754_log+0x310>)
 800de76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7a:	4650      	mov	r0, sl
 800de7c:	4659      	mov	r1, fp
 800de7e:	f7f2 fb67 	bl	8000550 <__aeabi_dmul>
 800de82:	4602      	mov	r2, r0
 800de84:	460b      	mov	r3, r1
 800de86:	2000      	movs	r0, #0
 800de88:	499b      	ldr	r1, [pc, #620]	@ (800e0f8 <__ieee754_log+0x368>)
 800de8a:	f7f2 f9a9 	bl	80001e0 <__aeabi_dsub>
 800de8e:	4652      	mov	r2, sl
 800de90:	4606      	mov	r6, r0
 800de92:	460f      	mov	r7, r1
 800de94:	465b      	mov	r3, fp
 800de96:	4650      	mov	r0, sl
 800de98:	4659      	mov	r1, fp
 800de9a:	f7f2 fb59 	bl	8000550 <__aeabi_dmul>
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	4630      	mov	r0, r6
 800dea4:	4639      	mov	r1, r7
 800dea6:	f7f2 fb53 	bl	8000550 <__aeabi_dmul>
 800deaa:	4606      	mov	r6, r0
 800deac:	460f      	mov	r7, r1
 800deae:	b914      	cbnz	r4, 800deb6 <__ieee754_log+0x126>
 800deb0:	4632      	mov	r2, r6
 800deb2:	463b      	mov	r3, r7
 800deb4:	e0a0      	b.n	800dff8 <__ieee754_log+0x268>
 800deb6:	4620      	mov	r0, r4
 800deb8:	f7f2 fae0 	bl	800047c <__aeabi_i2d>
 800debc:	a374      	add	r3, pc, #464	@ (adr r3, 800e090 <__ieee754_log+0x300>)
 800debe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec2:	4680      	mov	r8, r0
 800dec4:	4689      	mov	r9, r1
 800dec6:	f7f2 fb43 	bl	8000550 <__aeabi_dmul>
 800deca:	a373      	add	r3, pc, #460	@ (adr r3, 800e098 <__ieee754_log+0x308>)
 800decc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded0:	4604      	mov	r4, r0
 800ded2:	460d      	mov	r5, r1
 800ded4:	4640      	mov	r0, r8
 800ded6:	4649      	mov	r1, r9
 800ded8:	f7f2 fb3a 	bl	8000550 <__aeabi_dmul>
 800dedc:	e0a5      	b.n	800e02a <__ieee754_log+0x29a>
 800dede:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dee2:	f7f2 f97f 	bl	80001e4 <__adddf3>
 800dee6:	4602      	mov	r2, r0
 800dee8:	460b      	mov	r3, r1
 800deea:	4650      	mov	r0, sl
 800deec:	4659      	mov	r1, fp
 800deee:	f7f2 fc59 	bl	80007a4 <__aeabi_ddiv>
 800def2:	e9cd 0100 	strd	r0, r1, [sp]
 800def6:	4620      	mov	r0, r4
 800def8:	f7f2 fac0 	bl	800047c <__aeabi_i2d>
 800defc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df04:	4610      	mov	r0, r2
 800df06:	4619      	mov	r1, r3
 800df08:	f7f2 fb22 	bl	8000550 <__aeabi_dmul>
 800df0c:	4602      	mov	r2, r0
 800df0e:	460b      	mov	r3, r1
 800df10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800df14:	f7f2 fb1c 	bl	8000550 <__aeabi_dmul>
 800df18:	a363      	add	r3, pc, #396	@ (adr r3, 800e0a8 <__ieee754_log+0x318>)
 800df1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1e:	4680      	mov	r8, r0
 800df20:	4689      	mov	r9, r1
 800df22:	f7f2 fb15 	bl	8000550 <__aeabi_dmul>
 800df26:	a362      	add	r3, pc, #392	@ (adr r3, 800e0b0 <__ieee754_log+0x320>)
 800df28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2c:	f7f2 f95a 	bl	80001e4 <__adddf3>
 800df30:	4642      	mov	r2, r8
 800df32:	464b      	mov	r3, r9
 800df34:	f7f2 fb0c 	bl	8000550 <__aeabi_dmul>
 800df38:	a35f      	add	r3, pc, #380	@ (adr r3, 800e0b8 <__ieee754_log+0x328>)
 800df3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3e:	f7f2 f951 	bl	80001e4 <__adddf3>
 800df42:	4642      	mov	r2, r8
 800df44:	464b      	mov	r3, r9
 800df46:	f7f2 fb03 	bl	8000550 <__aeabi_dmul>
 800df4a:	a35d      	add	r3, pc, #372	@ (adr r3, 800e0c0 <__ieee754_log+0x330>)
 800df4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df50:	f7f2 f948 	bl	80001e4 <__adddf3>
 800df54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df58:	f7f2 fafa 	bl	8000550 <__aeabi_dmul>
 800df5c:	a35a      	add	r3, pc, #360	@ (adr r3, 800e0c8 <__ieee754_log+0x338>)
 800df5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df66:	4640      	mov	r0, r8
 800df68:	4649      	mov	r1, r9
 800df6a:	f7f2 faf1 	bl	8000550 <__aeabi_dmul>
 800df6e:	a358      	add	r3, pc, #352	@ (adr r3, 800e0d0 <__ieee754_log+0x340>)
 800df70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df74:	f7f2 f936 	bl	80001e4 <__adddf3>
 800df78:	4642      	mov	r2, r8
 800df7a:	464b      	mov	r3, r9
 800df7c:	f7f2 fae8 	bl	8000550 <__aeabi_dmul>
 800df80:	a355      	add	r3, pc, #340	@ (adr r3, 800e0d8 <__ieee754_log+0x348>)
 800df82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df86:	f7f2 f92d 	bl	80001e4 <__adddf3>
 800df8a:	4642      	mov	r2, r8
 800df8c:	464b      	mov	r3, r9
 800df8e:	f7f2 fadf 	bl	8000550 <__aeabi_dmul>
 800df92:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800df96:	4602      	mov	r2, r0
 800df98:	460b      	mov	r3, r1
 800df9a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800df9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfa2:	f7f2 f91f 	bl	80001e4 <__adddf3>
 800dfa6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800dfaa:	3551      	adds	r5, #81	@ 0x51
 800dfac:	4335      	orrs	r5, r6
 800dfae:	2d00      	cmp	r5, #0
 800dfb0:	4680      	mov	r8, r0
 800dfb2:	4689      	mov	r9, r1
 800dfb4:	dd48      	ble.n	800e048 <__ieee754_log+0x2b8>
 800dfb6:	4b50      	ldr	r3, [pc, #320]	@ (800e0f8 <__ieee754_log+0x368>)
 800dfb8:	2200      	movs	r2, #0
 800dfba:	4650      	mov	r0, sl
 800dfbc:	4659      	mov	r1, fp
 800dfbe:	f7f2 fac7 	bl	8000550 <__aeabi_dmul>
 800dfc2:	4652      	mov	r2, sl
 800dfc4:	465b      	mov	r3, fp
 800dfc6:	f7f2 fac3 	bl	8000550 <__aeabi_dmul>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	460b      	mov	r3, r1
 800dfce:	4606      	mov	r6, r0
 800dfd0:	460f      	mov	r7, r1
 800dfd2:	4640      	mov	r0, r8
 800dfd4:	4649      	mov	r1, r9
 800dfd6:	f7f2 f905 	bl	80001e4 <__adddf3>
 800dfda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfde:	f7f2 fab7 	bl	8000550 <__aeabi_dmul>
 800dfe2:	4680      	mov	r8, r0
 800dfe4:	4689      	mov	r9, r1
 800dfe6:	b964      	cbnz	r4, 800e002 <__ieee754_log+0x272>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	460b      	mov	r3, r1
 800dfec:	4630      	mov	r0, r6
 800dfee:	4639      	mov	r1, r7
 800dff0:	f7f2 f8f6 	bl	80001e0 <__aeabi_dsub>
 800dff4:	4602      	mov	r2, r0
 800dff6:	460b      	mov	r3, r1
 800dff8:	4650      	mov	r0, sl
 800dffa:	4659      	mov	r1, fp
 800dffc:	f7f2 f8f0 	bl	80001e0 <__aeabi_dsub>
 800e000:	e6da      	b.n	800ddb8 <__ieee754_log+0x28>
 800e002:	a323      	add	r3, pc, #140	@ (adr r3, 800e090 <__ieee754_log+0x300>)
 800e004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e00c:	f7f2 faa0 	bl	8000550 <__aeabi_dmul>
 800e010:	a321      	add	r3, pc, #132	@ (adr r3, 800e098 <__ieee754_log+0x308>)
 800e012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e016:	4604      	mov	r4, r0
 800e018:	460d      	mov	r5, r1
 800e01a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e01e:	f7f2 fa97 	bl	8000550 <__aeabi_dmul>
 800e022:	4642      	mov	r2, r8
 800e024:	464b      	mov	r3, r9
 800e026:	f7f2 f8dd 	bl	80001e4 <__adddf3>
 800e02a:	4602      	mov	r2, r0
 800e02c:	460b      	mov	r3, r1
 800e02e:	4630      	mov	r0, r6
 800e030:	4639      	mov	r1, r7
 800e032:	f7f2 f8d5 	bl	80001e0 <__aeabi_dsub>
 800e036:	4652      	mov	r2, sl
 800e038:	465b      	mov	r3, fp
 800e03a:	f7f2 f8d1 	bl	80001e0 <__aeabi_dsub>
 800e03e:	4602      	mov	r2, r0
 800e040:	460b      	mov	r3, r1
 800e042:	4620      	mov	r0, r4
 800e044:	4629      	mov	r1, r5
 800e046:	e7d9      	b.n	800dffc <__ieee754_log+0x26c>
 800e048:	4602      	mov	r2, r0
 800e04a:	460b      	mov	r3, r1
 800e04c:	4650      	mov	r0, sl
 800e04e:	4659      	mov	r1, fp
 800e050:	f7f2 f8c6 	bl	80001e0 <__aeabi_dsub>
 800e054:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e058:	f7f2 fa7a 	bl	8000550 <__aeabi_dmul>
 800e05c:	4606      	mov	r6, r0
 800e05e:	460f      	mov	r7, r1
 800e060:	2c00      	cmp	r4, #0
 800e062:	f43f af25 	beq.w	800deb0 <__ieee754_log+0x120>
 800e066:	a30a      	add	r3, pc, #40	@ (adr r3, 800e090 <__ieee754_log+0x300>)
 800e068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e06c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e070:	f7f2 fa6e 	bl	8000550 <__aeabi_dmul>
 800e074:	a308      	add	r3, pc, #32	@ (adr r3, 800e098 <__ieee754_log+0x308>)
 800e076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07a:	4604      	mov	r4, r0
 800e07c:	460d      	mov	r5, r1
 800e07e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e082:	e729      	b.n	800ded8 <__ieee754_log+0x148>
 800e084:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800e0e0 <__ieee754_log+0x350>
 800e088:	e698      	b.n	800ddbc <__ieee754_log+0x2c>
 800e08a:	bf00      	nop
 800e08c:	f3af 8000 	nop.w
 800e090:	fee00000 	.word	0xfee00000
 800e094:	3fe62e42 	.word	0x3fe62e42
 800e098:	35793c76 	.word	0x35793c76
 800e09c:	3dea39ef 	.word	0x3dea39ef
 800e0a0:	55555555 	.word	0x55555555
 800e0a4:	3fd55555 	.word	0x3fd55555
 800e0a8:	df3e5244 	.word	0xdf3e5244
 800e0ac:	3fc2f112 	.word	0x3fc2f112
 800e0b0:	96cb03de 	.word	0x96cb03de
 800e0b4:	3fc74664 	.word	0x3fc74664
 800e0b8:	94229359 	.word	0x94229359
 800e0bc:	3fd24924 	.word	0x3fd24924
 800e0c0:	55555593 	.word	0x55555593
 800e0c4:	3fe55555 	.word	0x3fe55555
 800e0c8:	d078c69f 	.word	0xd078c69f
 800e0cc:	3fc39a09 	.word	0x3fc39a09
 800e0d0:	1d8e78af 	.word	0x1d8e78af
 800e0d4:	3fcc71c5 	.word	0x3fcc71c5
 800e0d8:	9997fa04 	.word	0x9997fa04
 800e0dc:	3fd99999 	.word	0x3fd99999
	...
 800e0e8:	c3500000 	.word	0xc3500000
 800e0ec:	43500000 	.word	0x43500000
 800e0f0:	7fefffff 	.word	0x7fefffff
 800e0f4:	3ff00000 	.word	0x3ff00000
 800e0f8:	3fe00000 	.word	0x3fe00000

0800e0fc <_init>:
 800e0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0fe:	bf00      	nop
 800e100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e102:	bc08      	pop	{r3}
 800e104:	469e      	mov	lr, r3
 800e106:	4770      	bx	lr

0800e108 <_fini>:
 800e108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10a:	bf00      	nop
 800e10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e10e:	bc08      	pop	{r3}
 800e110:	469e      	mov	lr, r3
 800e112:	4770      	bx	lr
