
RFC_SD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da14  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800dbb0  0800dbb0  0000ebb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd90  0800dd90  0000f130  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd90  0800dd90  0000ed90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd98  0800dd98  0000f130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd98  0800dd98  0000ed98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd9c  0800dd9c  0000ed9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  0800dda0  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d24  20000130  0800ded0  0000f130  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e54  0800ded0  0000fe54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cd73  00000000  00000000  0000f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cb3  00000000  00000000  0002bed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001998  00000000  00000000  00030b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013d7  00000000  00000000  00032520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce89  00000000  00000000  000338f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026f00  00000000  00000000  00050780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a15a1  00000000  00000000  00077680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118c21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006de8  00000000  00000000  00118c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0011fa4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800db94 	.word	0x0800db94

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	0800db94 	.word	0x0800db94

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_ldivmod>:
 8000b40:	b97b      	cbnz	r3, 8000b62 <__aeabi_ldivmod+0x22>
 8000b42:	b972      	cbnz	r2, 8000b62 <__aeabi_ldivmod+0x22>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bfbe      	ittt	lt
 8000b48:	2000      	movlt	r0, #0
 8000b4a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b4e:	e006      	blt.n	8000b5e <__aeabi_ldivmod+0x1e>
 8000b50:	bf08      	it	eq
 8000b52:	2800      	cmpeq	r0, #0
 8000b54:	bf1c      	itt	ne
 8000b56:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b5a:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5e:	f000 b9b5 	b.w	8000ecc <__aeabi_idiv0>
 8000b62:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b66:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	db09      	blt.n	8000b82 <__aeabi_ldivmod+0x42>
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db1a      	blt.n	8000ba8 <__aeabi_ldivmod+0x68>
 8000b72:	f000 f84d 	bl	8000c10 <__udivmoddi4>
 8000b76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7e:	b004      	add	sp, #16
 8000b80:	4770      	bx	lr
 8000b82:	4240      	negs	r0, r0
 8000b84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db1b      	blt.n	8000bc4 <__aeabi_ldivmod+0x84>
 8000b8c:	f000 f840 	bl	8000c10 <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	4770      	bx	lr
 8000ba8:	4252      	negs	r2, r2
 8000baa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bae:	f000 f82f 	bl	8000c10 <__udivmoddi4>
 8000bb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bba:	b004      	add	sp, #16
 8000bbc:	4240      	negs	r0, r0
 8000bbe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc2:	4770      	bx	lr
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bca:	f000 f821 	bl	8000c10 <__udivmoddi4>
 8000bce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd6:	b004      	add	sp, #16
 8000bd8:	4252      	negs	r2, r2
 8000bda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bde:	4770      	bx	lr

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b96a 	b.w	8000ecc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9d08      	ldr	r5, [sp, #32]
 8000c16:	460c      	mov	r4, r1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d14e      	bne.n	8000cba <__udivmoddi4+0xaa>
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	458c      	cmp	ip, r1
 8000c20:	4686      	mov	lr, r0
 8000c22:	fab2 f282 	clz	r2, r2
 8000c26:	d962      	bls.n	8000cee <__udivmoddi4+0xde>
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0320 	rsb	r3, r2, #32
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	fa20 f303 	lsr.w	r3, r0, r3
 8000c34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c38:	4319      	orrs	r1, r3
 8000c3a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c42:	fa1f f68c 	uxth.w	r6, ip
 8000c46:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c4e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c56:	fb04 f106 	mul.w	r1, r4, r6
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x64>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c66:	f080 8112 	bcs.w	8000e8e <__udivmoddi4+0x27e>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 810f 	bls.w	8000e8e <__udivmoddi4+0x27e>
 8000c70:	3c02      	subs	r4, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1a59      	subs	r1, r3, r1
 8000c76:	fa1f f38e 	uxth.w	r3, lr
 8000c7a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c7e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c86:	fb00 f606 	mul.w	r6, r0, r6
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x94>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c96:	f080 80fc 	bcs.w	8000e92 <__udivmoddi4+0x282>
 8000c9a:	429e      	cmp	r6, r3
 8000c9c:	f240 80f9 	bls.w	8000e92 <__udivmoddi4+0x282>
 8000ca0:	4463      	add	r3, ip
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000caa:	2100      	movs	r1, #0
 8000cac:	b11d      	cbz	r5, 8000cb6 <__udivmoddi4+0xa6>
 8000cae:	40d3      	lsrs	r3, r2
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d905      	bls.n	8000cca <__udivmoddi4+0xba>
 8000cbe:	b10d      	cbz	r5, 8000cc4 <__udivmoddi4+0xb4>
 8000cc0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e7f5      	b.n	8000cb6 <__udivmoddi4+0xa6>
 8000cca:	fab3 f183 	clz	r1, r3
 8000cce:	2900      	cmp	r1, #0
 8000cd0:	d146      	bne.n	8000d60 <__udivmoddi4+0x150>
 8000cd2:	42a3      	cmp	r3, r4
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xcc>
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	f0c0 80f0 	bcc.w	8000ebc <__udivmoddi4+0x2ac>
 8000cdc:	1a86      	subs	r6, r0, r2
 8000cde:	eb64 0303 	sbc.w	r3, r4, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	2d00      	cmp	r5, #0
 8000ce6:	d0e6      	beq.n	8000cb6 <__udivmoddi4+0xa6>
 8000ce8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cec:	e7e3      	b.n	8000cb6 <__udivmoddi4+0xa6>
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	f040 8090 	bne.w	8000e14 <__udivmoddi4+0x204>
 8000cf4:	eba1 040c 	sub.w	r4, r1, ip
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	2101      	movs	r1, #1
 8000d02:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d0a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb07 f006 	mul.w	r0, r7, r6
 8000d16:	4298      	cmp	r0, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x11c>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x11a>
 8000d24:	4298      	cmp	r0, r3
 8000d26:	f200 80cd 	bhi.w	8000ec4 <__udivmoddi4+0x2b4>
 8000d2a:	4626      	mov	r6, r4
 8000d2c:	1a1c      	subs	r4, r3, r0
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d36:	fb08 4410 	mls	r4, r8, r0, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb00 f707 	mul.w	r7, r0, r7
 8000d42:	429f      	cmp	r7, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x148>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x146>
 8000d50:	429f      	cmp	r7, r3
 8000d52:	f200 80b0 	bhi.w	8000eb6 <__udivmoddi4+0x2a6>
 8000d56:	4620      	mov	r0, r4
 8000d58:	1bdb      	subs	r3, r3, r7
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	e7a5      	b.n	8000cac <__udivmoddi4+0x9c>
 8000d60:	f1c1 0620 	rsb	r6, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6a:	431f      	orrs	r7, r3
 8000d6c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d70:	fa04 f301 	lsl.w	r3, r4, r1
 8000d74:	ea43 030c 	orr.w	r3, r3, ip
 8000d78:	40f4      	lsrs	r4, r6
 8000d7a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d7e:	0c38      	lsrs	r0, r7, #16
 8000d80:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d84:	fbb4 fef0 	udiv	lr, r4, r0
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d90:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d94:	fb0e f90c 	mul.w	r9, lr, ip
 8000d98:	45a1      	cmp	r9, r4
 8000d9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x1a6>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000da6:	f080 8084 	bcs.w	8000eb2 <__udivmoddi4+0x2a2>
 8000daa:	45a1      	cmp	r9, r4
 8000dac:	f240 8081 	bls.w	8000eb2 <__udivmoddi4+0x2a2>
 8000db0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	eba4 0409 	sub.w	r4, r4, r9
 8000dba:	fa1f f983 	uxth.w	r9, r3
 8000dbe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dc2:	fb00 4413 	mls	r4, r0, r3, r4
 8000dc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dca:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d907      	bls.n	8000de2 <__udivmoddi4+0x1d2>
 8000dd2:	193c      	adds	r4, r7, r4
 8000dd4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd8:	d267      	bcs.n	8000eaa <__udivmoddi4+0x29a>
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d965      	bls.n	8000eaa <__udivmoddi4+0x29a>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000de6:	fba0 9302 	umull	r9, r3, r0, r2
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	429c      	cmp	r4, r3
 8000df0:	46ce      	mov	lr, r9
 8000df2:	469c      	mov	ip, r3
 8000df4:	d351      	bcc.n	8000e9a <__udivmoddi4+0x28a>
 8000df6:	d04e      	beq.n	8000e96 <__udivmoddi4+0x286>
 8000df8:	b155      	cbz	r5, 8000e10 <__udivmoddi4+0x200>
 8000dfa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dfe:	eb64 040c 	sbc.w	r4, r4, ip
 8000e02:	fa04 f606 	lsl.w	r6, r4, r6
 8000e06:	40cb      	lsrs	r3, r1
 8000e08:	431e      	orrs	r6, r3
 8000e0a:	40cc      	lsrs	r4, r1
 8000e0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e10:	2100      	movs	r1, #0
 8000e12:	e750      	b.n	8000cb6 <__udivmoddi4+0xa6>
 8000e14:	f1c2 0320 	rsb	r3, r2, #32
 8000e18:	fa20 f103 	lsr.w	r1, r0, r3
 8000e1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e20:	fa24 f303 	lsr.w	r3, r4, r3
 8000e24:	4094      	lsls	r4, r2
 8000e26:	430c      	orrs	r4, r1
 8000e28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e38:	fb08 3110 	mls	r1, r8, r0, r3
 8000e3c:	0c23      	lsrs	r3, r4, #16
 8000e3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e42:	fb00 f107 	mul.w	r1, r0, r7
 8000e46:	4299      	cmp	r1, r3
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x24c>
 8000e4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e52:	d22c      	bcs.n	8000eae <__udivmoddi4+0x29e>
 8000e54:	4299      	cmp	r1, r3
 8000e56:	d92a      	bls.n	8000eae <__udivmoddi4+0x29e>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	4463      	add	r3, ip
 8000e5c:	1a5b      	subs	r3, r3, r1
 8000e5e:	b2a4      	uxth	r4, r4
 8000e60:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e64:	fb08 3311 	mls	r3, r8, r1, r3
 8000e68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e6c:	fb01 f307 	mul.w	r3, r1, r7
 8000e70:	42a3      	cmp	r3, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x276>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e7c:	d213      	bcs.n	8000ea6 <__udivmoddi4+0x296>
 8000e7e:	42a3      	cmp	r3, r4
 8000e80:	d911      	bls.n	8000ea6 <__udivmoddi4+0x296>
 8000e82:	3902      	subs	r1, #2
 8000e84:	4464      	add	r4, ip
 8000e86:	1ae4      	subs	r4, r4, r3
 8000e88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e8c:	e739      	b.n	8000d02 <__udivmoddi4+0xf2>
 8000e8e:	4604      	mov	r4, r0
 8000e90:	e6f0      	b.n	8000c74 <__udivmoddi4+0x64>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e706      	b.n	8000ca4 <__udivmoddi4+0x94>
 8000e96:	45c8      	cmp	r8, r9
 8000e98:	d2ae      	bcs.n	8000df8 <__udivmoddi4+0x1e8>
 8000e9a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e9e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ea2:	3801      	subs	r0, #1
 8000ea4:	e7a8      	b.n	8000df8 <__udivmoddi4+0x1e8>
 8000ea6:	4631      	mov	r1, r6
 8000ea8:	e7ed      	b.n	8000e86 <__udivmoddi4+0x276>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	e799      	b.n	8000de2 <__udivmoddi4+0x1d2>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e7d4      	b.n	8000e5c <__udivmoddi4+0x24c>
 8000eb2:	46d6      	mov	lr, sl
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1a6>
 8000eb6:	4463      	add	r3, ip
 8000eb8:	3802      	subs	r0, #2
 8000eba:	e74d      	b.n	8000d58 <__udivmoddi4+0x148>
 8000ebc:	4606      	mov	r6, r0
 8000ebe:	4623      	mov	r3, r4
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e70f      	b.n	8000ce4 <__udivmoddi4+0xd4>
 8000ec4:	3e02      	subs	r6, #2
 8000ec6:	4463      	add	r3, ip
 8000ec8:	e730      	b.n	8000d2c <__udivmoddi4+0x11c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460a      	mov	r2, r1
 8000eda:	71fb      	strb	r3, [r7, #7]
 8000edc:	4613      	mov	r3, r2
 8000ede:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	480e      	ldr	r0, [pc, #56]	@ (8000f20 <BMP280_write+0x50>)
 8000ee6:	f005 fa2d 	bl	8006344 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000ef4:	1df9      	adds	r1, r7, #7
 8000ef6:	2364      	movs	r3, #100	@ 0x64
 8000ef8:	2201      	movs	r2, #1
 8000efa:	480a      	ldr	r0, [pc, #40]	@ (8000f24 <BMP280_write+0x54>)
 8000efc:	f006 ff41 	bl	8007d82 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000f00:	1db9      	adds	r1, r7, #6
 8000f02:	2364      	movs	r3, #100	@ 0x64
 8000f04:	2201      	movs	r2, #1
 8000f06:	4807      	ldr	r0, [pc, #28]	@ (8000f24 <BMP280_write+0x54>)
 8000f08:	f006 ff3b 	bl	8007d82 <HAL_SPI_Transmit>

	BMP280_unselect();
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2104      	movs	r1, #4
 8000f10:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <BMP280_write+0x50>)
 8000f12:	f005 fa17 	bl	8006344 <HAL_GPIO_WritePin>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40020400 	.word	0x40020400
 8000f24:	20000a10 	.word	0x20000a10

08000f28 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2104      	movs	r1, #4
 8000f40:	480f      	ldr	r0, [pc, #60]	@ (8000f80 <BMP280_read+0x58>)
 8000f42:	f005 f9ff 	bl	8006344 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000f46:	f107 010f 	add.w	r1, r7, #15
 8000f4a:	2364      	movs	r3, #100	@ 0x64
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	480d      	ldr	r0, [pc, #52]	@ (8000f84 <BMP280_read+0x5c>)
 8000f50:	f006 ff17 	bl	8007d82 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8000f54:	f107 010f 	add.w	r1, r7, #15
 8000f58:	2364      	movs	r3, #100	@ 0x64
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4809      	ldr	r0, [pc, #36]	@ (8000f84 <BMP280_read+0x5c>)
 8000f5e:	f007 f854 	bl	800800a <HAL_SPI_Receive>
	BMP280_unselect();
 8000f62:	2201      	movs	r2, #1
 8000f64:	2104      	movs	r1, #4
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <BMP280_read+0x58>)
 8000f68:	f005 f9ec 	bl	8006344 <HAL_GPIO_WritePin>

	BMP280.Temp = 2500;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <BMP280_read+0x60>)
 8000f6e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000f72:	605a      	str	r2, [r3, #4]

	return Buffer;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020400 	.word	0x40020400
 8000f84:	20000a10 	.word	0x20000a10
 8000f88:	2000014c 	.word	0x2000014c

08000f8c <BMP280_config>:

void BMP280_config(void){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8000f90:	2157      	movs	r1, #87	@ 0x57
 8000f92:	20f4      	movs	r0, #244	@ 0xf4
 8000f94:	f7ff ff9c 	bl	8000ed0 <BMP280_write>
	BMP280_write(config, 0x10);
 8000f98:	2110      	movs	r1, #16
 8000f9a:	20f5      	movs	r0, #245	@ 0xf5
 8000f9c:	f7ff ff98 	bl	8000ed0 <BMP280_write>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000faa:	2388      	movs	r3, #136	@ 0x88
 8000fac:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]
	BMP280_select();
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4843      	ldr	r0, [pc, #268]	@ (80010d4 <BMP280_calibrationData+0x130>)
 8000fc8:	f005 f9bc 	bl	8006344 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000fcc:	f107 011f 	add.w	r1, r7, #31
 8000fd0:	2364      	movs	r3, #100	@ 0x64
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4840      	ldr	r0, [pc, #256]	@ (80010d8 <BMP280_calibrationData+0x134>)
 8000fd6:	f006 fed4 	bl	8007d82 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000fda:	1d39      	adds	r1, r7, #4
 8000fdc:	2364      	movs	r3, #100	@ 0x64
 8000fde:	2218      	movs	r2, #24
 8000fe0:	483d      	ldr	r0, [pc, #244]	@ (80010d8 <BMP280_calibrationData+0x134>)
 8000fe2:	f007 f812 	bl	800800a <HAL_SPI_Receive>
	BMP280_unselect();
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	2104      	movs	r1, #4
 8000fea:	483a      	ldr	r0, [pc, #232]	@ (80010d4 <BMP280_calibrationData+0x130>)
 8000fec:	f005 f9aa 	bl	8006344 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8000ff0:	797b      	ldrb	r3, [r7, #5]
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	793b      	ldrb	r3, [r7, #4]
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b36      	ldr	r3, [pc, #216]	@ (80010dc <BMP280_calibrationData+0x138>)
 8001002:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	b21a      	sxth	r2, r3
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21a      	sxth	r2, r3
 8001012:	4b33      	ldr	r3, [pc, #204]	@ (80010e0 <BMP280_calibrationData+0x13c>)
 8001014:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8001016:	7a7b      	ldrb	r3, [r7, #9]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b21a      	sxth	r2, r3
 800101c:	7a3b      	ldrb	r3, [r7, #8]
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <BMP280_calibrationData+0x140>)
 8001026:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b21a      	sxth	r2, r3
 800102e:	7abb      	ldrb	r3, [r7, #10]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21b      	sxth	r3, r3
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b2b      	ldr	r3, [pc, #172]	@ (80010e8 <BMP280_calibrationData+0x144>)
 800103a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 800103c:	7b7b      	ldrb	r3, [r7, #13]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	7b3b      	ldrb	r3, [r7, #12]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21a      	sxth	r2, r3
 800104a:	4b28      	ldr	r3, [pc, #160]	@ (80010ec <BMP280_calibrationData+0x148>)
 800104c:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21a      	sxth	r2, r3
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21a      	sxth	r2, r3
 800105c:	4b24      	ldr	r3, [pc, #144]	@ (80010f0 <BMP280_calibrationData+0x14c>)
 800105e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8001060:	7c7b      	ldrb	r3, [r7, #17]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	7c3b      	ldrb	r3, [r7, #16]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <BMP280_calibrationData+0x150>)
 8001070:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8001072:	7cfb      	ldrb	r3, [r7, #19]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	7cbb      	ldrb	r3, [r7, #18]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <BMP280_calibrationData+0x154>)
 8001082:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8001084:	7d7b      	ldrb	r3, [r7, #21]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7d3b      	ldrb	r3, [r7, #20]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <BMP280_calibrationData+0x158>)
 8001094:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8001096:	7dfb      	ldrb	r3, [r7, #23]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7dbb      	ldrb	r3, [r7, #22]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <BMP280_calibrationData+0x15c>)
 80010a6:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 80010a8:	7e7b      	ldrb	r3, [r7, #25]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7e3b      	ldrb	r3, [r7, #24]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <BMP280_calibrationData+0x160>)
 80010b8:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80010ba:	7efb      	ldrb	r3, [r7, #27]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7ebb      	ldrb	r3, [r7, #26]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <BMP280_calibrationData+0x164>)
 80010ca:	801a      	strh	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40020400 	.word	0x40020400
 80010d8:	20000a10 	.word	0x20000a10
 80010dc:	20000160 	.word	0x20000160
 80010e0:	20000164 	.word	0x20000164
 80010e4:	20000166 	.word	0x20000166
 80010e8:	20000162 	.word	0x20000162
 80010ec:	20000168 	.word	0x20000168
 80010f0:	2000016a 	.word	0x2000016a
 80010f4:	2000016c 	.word	0x2000016c
 80010f8:	2000016e 	.word	0x2000016e
 80010fc:	20000170 	.word	0x20000170
 8001100:	20000172 	.word	0x20000172
 8001104:	20000174 	.word	0x20000174
 8001108:	20000176 	.word	0x20000176

0800110c <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8001112:	23f7      	movs	r3, #247	@ 0xf7
 8001114:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	2300      	movs	r3, #0
 800111c:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 800111e:	2200      	movs	r2, #0
 8001120:	2104      	movs	r1, #4
 8001122:	4817      	ldr	r0, [pc, #92]	@ (8001180 <BMP280_readRawValues+0x74>)
 8001124:	f005 f90e 	bl	8006344 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8001128:	1df9      	adds	r1, r7, #7
 800112a:	2364      	movs	r3, #100	@ 0x64
 800112c:	2201      	movs	r2, #1
 800112e:	4815      	ldr	r0, [pc, #84]	@ (8001184 <BMP280_readRawValues+0x78>)
 8001130:	f006 fe27 	bl	8007d82 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8001134:	4639      	mov	r1, r7
 8001136:	2364      	movs	r3, #100	@ 0x64
 8001138:	2206      	movs	r2, #6
 800113a:	4812      	ldr	r0, [pc, #72]	@ (8001184 <BMP280_readRawValues+0x78>)
 800113c:	f006 ff65 	bl	800800a <HAL_SPI_Receive>
	BMP280_unselect();
 8001140:	2201      	movs	r2, #1
 8001142:	2104      	movs	r1, #4
 8001144:	480e      	ldr	r0, [pc, #56]	@ (8001180 <BMP280_readRawValues+0x74>)
 8001146:	f005 f8fd 	bl	8006344 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 800114a:	783b      	ldrb	r3, [r7, #0]
 800114c:	031a      	lsls	r2, r3, #12
 800114e:	787b      	ldrb	r3, [r7, #1]
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	4313      	orrs	r3, r2
 8001154:	78ba      	ldrb	r2, [r7, #2]
 8001156:	0912      	lsrs	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	4313      	orrs	r3, r2
 800115c:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <BMP280_readRawValues+0x7c>)
 800115e:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	031a      	lsls	r2, r3, #12
 8001164:	793b      	ldrb	r3, [r7, #4]
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	4313      	orrs	r3, r2
 800116a:	797a      	ldrb	r2, [r7, #5]
 800116c:	0912      	lsrs	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	4313      	orrs	r3, r2
 8001172:	4a06      	ldr	r2, [pc, #24]	@ (800118c <BMP280_readRawValues+0x80>)
 8001174:	6013      	str	r3, [r2, #0]
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40020400 	.word	0x40020400
 8001184:	20000a10 	.word	0x20000a10
 8001188:	2000017c 	.word	0x2000017c
 800118c:	20000178 	.word	0x20000178

08001190 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001198:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <BMP280_measureT+0x74>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	10da      	asrs	r2, r3, #3
 800119e:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <BMP280_measureT+0x78>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	4a19      	ldr	r2, [pc, #100]	@ (800120c <BMP280_measureT+0x7c>)
 80011a8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011ac:	fb02 f303 	mul.w	r3, r2, r3
 80011b0:	12db      	asrs	r3, r3, #11
 80011b2:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	111b      	asrs	r3, r3, #4
 80011b8:	4a13      	ldr	r2, [pc, #76]	@ (8001208 <BMP280_measureT+0x78>)
 80011ba:	8812      	ldrh	r2, [r2, #0]
 80011bc:	1a9b      	subs	r3, r3, r2
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	1112      	asrs	r2, r2, #4
 80011c2:	4911      	ldr	r1, [pc, #68]	@ (8001208 <BMP280_measureT+0x78>)
 80011c4:	8809      	ldrh	r1, [r1, #0]
 80011c6:	1a52      	subs	r2, r2, r1
 80011c8:	fb02 f303 	mul.w	r3, r2, r3
 80011cc:	131b      	asrs	r3, r3, #12
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <BMP280_measureT+0x80>)
 80011d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	139b      	asrs	r3, r3, #14
 80011da:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001214 <BMP280_measureT+0x84>)
 80011e4:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <BMP280_measureT+0x84>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	3380      	adds	r3, #128	@ 0x80
 80011f2:	121b      	asrs	r3, r3, #8
 80011f4:	60fb      	str	r3, [r7, #12]
	return T;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	20000178 	.word	0x20000178
 8001208:	20000160 	.word	0x20000160
 800120c:	20000164 	.word	0x20000164
 8001210:	20000166 	.word	0x20000166
 8001214:	20000180 	.word	0x20000180

08001218 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8001218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800121c:	b0ca      	sub	sp, #296	@ 0x128
 800121e:	af00      	add	r7, sp, #0
 8001220:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001224:	4baf      	ldr	r3, [pc, #700]	@ (80014e4 <BMP280_measureP+0x2cc>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	17da      	asrs	r2, r3, #31
 800122a:	461c      	mov	r4, r3
 800122c:	4615      	mov	r5, r2
 800122e:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001232:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001236:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800123a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800123e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001242:	fb03 f102 	mul.w	r1, r3, r2
 8001246:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800124a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	18ca      	adds	r2, r1, r3
 8001254:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001258:	fba3 8903 	umull	r8, r9, r3, r3
 800125c:	eb02 0309 	add.w	r3, r2, r9
 8001260:	4699      	mov	r9, r3
 8001262:	4ba1      	ldr	r3, [pc, #644]	@ (80014e8 <BMP280_measureP+0x2d0>)
 8001264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001268:	b21b      	sxth	r3, r3
 800126a:	17da      	asrs	r2, r3, #31
 800126c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001270:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001274:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001278:	4603      	mov	r3, r0
 800127a:	fb03 f209 	mul.w	r2, r3, r9
 800127e:	460b      	mov	r3, r1
 8001280:	fb08 f303 	mul.w	r3, r8, r3
 8001284:	4413      	add	r3, r2
 8001286:	4602      	mov	r2, r0
 8001288:	fba8 1202 	umull	r1, r2, r8, r2
 800128c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001290:	460a      	mov	r2, r1
 8001292:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001296:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800129a:	4413      	add	r3, r2
 800129c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80012a0:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80012a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80012a8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80012ac:	4b8f      	ldr	r3, [pc, #572]	@ (80014ec <BMP280_measureP+0x2d4>)
 80012ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	17da      	asrs	r2, r3, #31
 80012b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80012ba:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80012be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012c2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80012c6:	462a      	mov	r2, r5
 80012c8:	fb02 f203 	mul.w	r2, r2, r3
 80012cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012d0:	4621      	mov	r1, r4
 80012d2:	fb01 f303 	mul.w	r3, r1, r3
 80012d6:	441a      	add	r2, r3
 80012d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012dc:	4621      	mov	r1, r4
 80012de:	fba3 1301 	umull	r1, r3, r3, r1
 80012e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80012e6:	460b      	mov	r3, r1
 80012e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80012ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80012f0:	18d3      	adds	r3, r2, r3
 80012f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80012f6:	f04f 0000 	mov.w	r0, #0
 80012fa:	f04f 0100 	mov.w	r1, #0
 80012fe:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001302:	462b      	mov	r3, r5
 8001304:	0459      	lsls	r1, r3, #17
 8001306:	4623      	mov	r3, r4
 8001308:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800130c:	4623      	mov	r3, r4
 800130e:	0458      	lsls	r0, r3, #17
 8001310:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001314:	1814      	adds	r4, r2, r0
 8001316:	643c      	str	r4, [r7, #64]	@ 0x40
 8001318:	414b      	adcs	r3, r1
 800131a:	647b      	str	r3, [r7, #68]	@ 0x44
 800131c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001320:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001324:	4b72      	ldr	r3, [pc, #456]	@ (80014f0 <BMP280_measureP+0x2d8>)
 8001326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132a:	b21b      	sxth	r3, r3
 800132c:	17da      	asrs	r2, r3, #31
 800132e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001332:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001336:	f04f 0000 	mov.w	r0, #0
 800133a:	f04f 0100 	mov.w	r1, #0
 800133e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001342:	00d9      	lsls	r1, r3, #3
 8001344:	2000      	movs	r0, #0
 8001346:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800134a:	1814      	adds	r4, r2, r0
 800134c:	63bc      	str	r4, [r7, #56]	@ 0x38
 800134e:	414b      	adcs	r3, r1
 8001350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001352:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001356:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800135a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800135e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001362:	fb03 f102 	mul.w	r1, r3, r2
 8001366:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800136a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	18ca      	adds	r2, r1, r3
 8001374:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001378:	fba3 1303 	umull	r1, r3, r3, r3
 800137c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001380:	460b      	mov	r3, r1
 8001382:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800138a:	18d3      	adds	r3, r2, r3
 800138c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001390:	4b58      	ldr	r3, [pc, #352]	@ (80014f4 <BMP280_measureP+0x2dc>)
 8001392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001396:	b21b      	sxth	r3, r3
 8001398:	17da      	asrs	r2, r3, #31
 800139a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800139e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80013a2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80013a6:	462b      	mov	r3, r5
 80013a8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80013ac:	4642      	mov	r2, r8
 80013ae:	fb02 f203 	mul.w	r2, r2, r3
 80013b2:	464b      	mov	r3, r9
 80013b4:	4621      	mov	r1, r4
 80013b6:	fb01 f303 	mul.w	r3, r1, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	4622      	mov	r2, r4
 80013be:	4641      	mov	r1, r8
 80013c0:	fba2 1201 	umull	r1, r2, r2, r1
 80013c4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80013c8:	460a      	mov	r2, r1
 80013ca:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80013ce:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80013d2:	4413      	add	r3, r2
 80013d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80013d8:	f04f 0000 	mov.w	r0, #0
 80013dc:	f04f 0100 	mov.w	r1, #0
 80013e0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80013e4:	4623      	mov	r3, r4
 80013e6:	0a18      	lsrs	r0, r3, #8
 80013e8:	462b      	mov	r3, r5
 80013ea:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80013ee:	462b      	mov	r3, r5
 80013f0:	1219      	asrs	r1, r3, #8
 80013f2:	4b41      	ldr	r3, [pc, #260]	@ (80014f8 <BMP280_measureP+0x2e0>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	17da      	asrs	r2, r3, #31
 80013fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001400:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001404:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001408:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800140c:	464a      	mov	r2, r9
 800140e:	fb02 f203 	mul.w	r2, r2, r3
 8001412:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001416:	4644      	mov	r4, r8
 8001418:	fb04 f303 	mul.w	r3, r4, r3
 800141c:	441a      	add	r2, r3
 800141e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001422:	4644      	mov	r4, r8
 8001424:	fba3 4304 	umull	r4, r3, r3, r4
 8001428:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800142c:	4623      	mov	r3, r4
 800142e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001432:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001436:	18d3      	adds	r3, r2, r3
 8001438:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001448:	464c      	mov	r4, r9
 800144a:	0323      	lsls	r3, r4, #12
 800144c:	4644      	mov	r4, r8
 800144e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001452:	4644      	mov	r4, r8
 8001454:	0322      	lsls	r2, r4, #12
 8001456:	1884      	adds	r4, r0, r2
 8001458:	633c      	str	r4, [r7, #48]	@ 0x30
 800145a:	eb41 0303 	adc.w	r3, r1, r3
 800145e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001460:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001464:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001468:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800146c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001470:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001474:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001478:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <BMP280_measureP+0x2e4>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	2200      	movs	r2, #0
 8001480:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001484:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001488:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800148c:	462b      	mov	r3, r5
 800148e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001492:	4642      	mov	r2, r8
 8001494:	fb02 f203 	mul.w	r2, r2, r3
 8001498:	464b      	mov	r3, r9
 800149a:	4621      	mov	r1, r4
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	4622      	mov	r2, r4
 80014a4:	4641      	mov	r1, r8
 80014a6:	fba2 1201 	umull	r1, r2, r2, r1
 80014aa:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80014ae:	460a      	mov	r2, r1
 80014b0:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80014b4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80014b8:	4413      	add	r3, r2
 80014ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80014ca:	4629      	mov	r1, r5
 80014cc:	104a      	asrs	r2, r1, #1
 80014ce:	4629      	mov	r1, r5
 80014d0:	17cb      	asrs	r3, r1, #31
 80014d2:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 80014d6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014da:	4313      	orrs	r3, r2
 80014dc:	d110      	bne.n	8001500 <BMP280_measureP+0x2e8>
	{
	return 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	e154      	b.n	800178c <BMP280_measureP+0x574>
 80014e2:	bf00      	nop
 80014e4:	20000180 	.word	0x20000180
 80014e8:	20000170 	.word	0x20000170
 80014ec:	2000016e 	.word	0x2000016e
 80014f0:	2000016c 	.word	0x2000016c
 80014f4:	2000016a 	.word	0x2000016a
 80014f8:	20000168 	.word	0x20000168
 80014fc:	20000162 	.word	0x20000162
	}
	p = 1048576-adc_P;
 8001500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001504:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001508:	17da      	asrs	r2, r3, #31
 800150a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800150c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800150e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001512:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001516:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800151a:	105b      	asrs	r3, r3, #1
 800151c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001520:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001524:	07db      	lsls	r3, r3, #31
 8001526:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800152a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800152e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001532:	4621      	mov	r1, r4
 8001534:	1a89      	subs	r1, r1, r2
 8001536:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001538:	4629      	mov	r1, r5
 800153a:	eb61 0303 	sbc.w	r3, r1, r3
 800153e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001540:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001544:	4622      	mov	r2, r4
 8001546:	462b      	mov	r3, r5
 8001548:	1891      	adds	r1, r2, r2
 800154a:	6239      	str	r1, [r7, #32]
 800154c:	415b      	adcs	r3, r3
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001550:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001554:	4621      	mov	r1, r4
 8001556:	1851      	adds	r1, r2, r1
 8001558:	61b9      	str	r1, [r7, #24]
 800155a:	4629      	mov	r1, r5
 800155c:	414b      	adcs	r3, r1
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800156c:	4649      	mov	r1, r9
 800156e:	018b      	lsls	r3, r1, #6
 8001570:	4641      	mov	r1, r8
 8001572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001576:	4641      	mov	r1, r8
 8001578:	018a      	lsls	r2, r1, #6
 800157a:	4641      	mov	r1, r8
 800157c:	1889      	adds	r1, r1, r2
 800157e:	6139      	str	r1, [r7, #16]
 8001580:	4649      	mov	r1, r9
 8001582:	eb43 0101 	adc.w	r1, r3, r1
 8001586:	6179      	str	r1, [r7, #20]
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001594:	4649      	mov	r1, r9
 8001596:	008b      	lsls	r3, r1, #2
 8001598:	4641      	mov	r1, r8
 800159a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800159e:	4641      	mov	r1, r8
 80015a0:	008a      	lsls	r2, r1, #2
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	4603      	mov	r3, r0
 80015a8:	4622      	mov	r2, r4
 80015aa:	189b      	adds	r3, r3, r2
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	460b      	mov	r3, r1
 80015b0:	462a      	mov	r2, r5
 80015b2:	eb42 0303 	adc.w	r3, r2, r3
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015c4:	4649      	mov	r1, r9
 80015c6:	008b      	lsls	r3, r1, #2
 80015c8:	4641      	mov	r1, r8
 80015ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015ce:	4641      	mov	r1, r8
 80015d0:	008a      	lsls	r2, r1, #2
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	4603      	mov	r3, r0
 80015d8:	4622      	mov	r2, r4
 80015da:	189b      	adds	r3, r3, r2
 80015dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80015de:	462b      	mov	r3, r5
 80015e0:	460a      	mov	r2, r1
 80015e2:	eb42 0303 	adc.w	r3, r2, r3
 80015e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80015e8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80015ec:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80015f0:	f7ff faa6 	bl	8000b40 <__aeabi_ldivmod>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80015fc:	4b66      	ldr	r3, [pc, #408]	@ (8001798 <BMP280_measureP+0x580>)
 80015fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001602:	b21b      	sxth	r3, r3
 8001604:	17da      	asrs	r2, r3, #31
 8001606:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001608:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800160a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800160e:	f04f 0000 	mov.w	r0, #0
 8001612:	f04f 0100 	mov.w	r1, #0
 8001616:	0b50      	lsrs	r0, r2, #13
 8001618:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800161c:	1359      	asrs	r1, r3, #13
 800161e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001622:	462b      	mov	r3, r5
 8001624:	fb00 f203 	mul.w	r2, r0, r3
 8001628:	4623      	mov	r3, r4
 800162a:	fb03 f301 	mul.w	r3, r3, r1
 800162e:	4413      	add	r3, r2
 8001630:	4622      	mov	r2, r4
 8001632:	fba2 1200 	umull	r1, r2, r2, r0
 8001636:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800163a:	460a      	mov	r2, r1
 800163c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001640:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001644:	4413      	add	r3, r2
 8001646:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800164a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800164e:	f04f 0000 	mov.w	r0, #0
 8001652:	f04f 0100 	mov.w	r1, #0
 8001656:	0b50      	lsrs	r0, r2, #13
 8001658:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800165c:	1359      	asrs	r1, r3, #13
 800165e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001662:	462b      	mov	r3, r5
 8001664:	fb00 f203 	mul.w	r2, r0, r3
 8001668:	4623      	mov	r3, r4
 800166a:	fb03 f301 	mul.w	r3, r3, r1
 800166e:	4413      	add	r3, r2
 8001670:	4622      	mov	r2, r4
 8001672:	fba2 1200 	umull	r1, r2, r2, r0
 8001676:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800167a:	460a      	mov	r2, r1
 800167c:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001680:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001684:	4413      	add	r3, r2
 8001686:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001696:	4621      	mov	r1, r4
 8001698:	0e4a      	lsrs	r2, r1, #25
 800169a:	4629      	mov	r1, r5
 800169c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016a0:	4629      	mov	r1, r5
 80016a2:	164b      	asrs	r3, r1, #25
 80016a4:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80016a8:	4b3c      	ldr	r3, [pc, #240]	@ (800179c <BMP280_measureP+0x584>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	17da      	asrs	r2, r3, #31
 80016b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80016b4:	667a      	str	r2, [r7, #100]	@ 0x64
 80016b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016ba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016be:	462a      	mov	r2, r5
 80016c0:	fb02 f203 	mul.w	r2, r2, r3
 80016c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016c8:	4621      	mov	r1, r4
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80016d4:	4621      	mov	r1, r4
 80016d6:	fba2 1201 	umull	r1, r2, r2, r1
 80016da:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80016de:	460a      	mov	r2, r1
 80016e0:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80016e4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80016e8:	4413      	add	r3, r2
 80016ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80016fa:	4621      	mov	r1, r4
 80016fc:	0cca      	lsrs	r2, r1, #19
 80016fe:	4629      	mov	r1, r5
 8001700:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001704:	4629      	mov	r1, r5
 8001706:	14cb      	asrs	r3, r1, #19
 8001708:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 800170c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001710:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001714:	1884      	adds	r4, r0, r2
 8001716:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001718:	eb41 0303 	adc.w	r3, r1, r3
 800171c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800171e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001722:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001726:	4621      	mov	r1, r4
 8001728:	1889      	adds	r1, r1, r2
 800172a:	6539      	str	r1, [r7, #80]	@ 0x50
 800172c:	4629      	mov	r1, r5
 800172e:	eb43 0101 	adc.w	r1, r3, r1
 8001732:	6579      	str	r1, [r7, #84]	@ 0x54
 8001734:	f04f 0000 	mov.w	r0, #0
 8001738:	f04f 0100 	mov.w	r1, #0
 800173c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001740:	4623      	mov	r3, r4
 8001742:	0a18      	lsrs	r0, r3, #8
 8001744:	462b      	mov	r3, r5
 8001746:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800174a:	462b      	mov	r3, r5
 800174c:	1219      	asrs	r1, r3, #8
 800174e:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <BMP280_measureP+0x588>)
 8001750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001754:	b21b      	sxth	r3, r3
 8001756:	17da      	asrs	r2, r3, #31
 8001758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800175a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001768:	464c      	mov	r4, r9
 800176a:	0123      	lsls	r3, r4, #4
 800176c:	4644      	mov	r4, r8
 800176e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001772:	4644      	mov	r4, r8
 8001774:	0122      	lsls	r2, r4, #4
 8001776:	1884      	adds	r4, r0, r2
 8001778:	603c      	str	r4, [r7, #0]
 800177a:	eb41 0303 	adc.w	r3, r1, r3
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001784:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001788:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 800178c:	4618      	mov	r0, r3
 800178e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001792:	46bd      	mov	sp, r7
 8001794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001798:	20000176 	.word	0x20000176
 800179c:	20000174 	.word	0x20000174
 80017a0:	20000172 	.word	0x20000172
 80017a4:	00000000 	.word	0x00000000

080017a8 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <BMP280_measureH+0x14>
 80017b8:	2300      	movs	r3, #0
 80017ba:	e051      	b.n	8001860 <BMP280_measureH+0xb8>
	var1 = -log(((double)Pres)/101325);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7fe fe4d 	bl	800045c <__aeabi_ui2d>
 80017c2:	a32e      	add	r3, pc, #184	@ (adr r3, 800187c <BMP280_measureH+0xd4>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe ffec 	bl	80007a4 <__aeabi_ddiv>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	ec43 2b17 	vmov	d7, r2, r3
 80017d4:	eeb0 0a47 	vmov.f32	s0, s14
 80017d8:	eef0 0a67 	vmov.f32	s1, s15
 80017dc:	f00b fc6c 	bl	800d0b8 <log>
 80017e0:	ec53 2b10 	vmov	r2, r3, d0
 80017e4:	4611      	mov	r1, r2
 80017e6:	61b9      	str	r1, [r7, #24]
 80017e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80017ec:	61fb      	str	r3, [r7, #28]

	if(var1 == 0) return 0;
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	f04f 0300 	mov.w	r3, #0
 80017f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017fa:	f7ff f911 	bl	8000a20 <__aeabi_dcmpeq>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <BMP280_measureH+0x60>
 8001804:	2300      	movs	r3, #0
 8001806:	e02b      	b.n	8001860 <BMP280_measureH+0xb8>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8001808:	6838      	ldr	r0, [r7, #0]
 800180a:	f7fe fe37 	bl	800047c <__aeabi_i2d>
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <BMP280_measureH+0xd0>)
 8001814:	f7fe ffc6 	bl	80007a4 <__aeabi_ddiv>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	a311      	add	r3, pc, #68	@ (adr r3, 8001868 <BMP280_measureH+0xc0>)
 8001822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001826:	f7fe fcdd 	bl	80001e4 <__adddf3>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	a110      	add	r1, pc, #64	@ (adr r1, 8001870 <BMP280_measureH+0xc8>)
 8001830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001834:	f7fe ffb6 	bl	80007a4 <__aeabi_ddiv>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	h = var1/var2;
 8001840:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001844:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001848:	f7fe ffac 	bl	80007a4 <__aeabi_ddiv>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (uint16_t)h;
 8001854:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001858:	f7ff f952 	bl	8000b00 <__aeabi_d2uiz>
 800185c:	4603      	mov	r3, r0
 800185e:	b29b      	uxth	r3, r3
}
 8001860:	4618      	mov	r0, r3
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	66666666 	.word	0x66666666
 800186c:	40711266 	.word	0x40711266
 8001870:	ca402a92 	.word	0xca402a92
 8001874:	3fa17e3e 	.word	0x3fa17e3e
 8001878:	40590000 	.word	0x40590000
 800187c:	00000000 	.word	0x00000000
 8001880:	40f8bcd0 	.word	0x40f8bcd0

08001884 <BMP280_init>:

void BMP280_init(void){
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001888:	2201      	movs	r2, #1
 800188a:	2104      	movs	r1, #4
 800188c:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <BMP280_init+0x3c>)
 800188e:	f004 fd59 	bl	8006344 <HAL_GPIO_WritePin>
	BMP280_config();
 8001892:	f7ff fb7b 	bl	8000f8c <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 8001896:	2089      	movs	r0, #137	@ 0x89
 8001898:	f7ff fb46 	bl	8000f28 <BMP280_read>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <BMP280_init+0x40>)
 80018a2:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 80018a4:	f7ff fb7e 	bl	8000fa4 <BMP280_calibrationData>
	BMP280_readRawValues();
 80018a8:	f7ff fc30 	bl	800110c <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <BMP280_init+0x44>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fc6d 	bl	8001190 <BMP280_measureT>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a02      	ldr	r2, [pc, #8]	@ (80018c4 <BMP280_init+0x40>)
 80018ba:	6093      	str	r3, [r2, #8]
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40020400 	.word	0x40020400
 80018c4:	2000014c 	.word	0x2000014c
 80018c8:	20000178 	.word	0x20000178

080018cc <BMP280_calculate>:

void BMP280_calculate(void){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	BMP280_readRawValues();
 80018d0:	f7ff fc1c 	bl	800110c <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 80018d4:	4b14      	ldr	r3, [pc, #80]	@ (8001928 <BMP280_calculate+0x5c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fc59 	bl	8001190 <BMP280_measureT>
 80018de:	4603      	mov	r3, r0
 80018e0:	4a12      	ldr	r2, [pc, #72]	@ (800192c <BMP280_calculate+0x60>)
 80018e2:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <BMP280_calculate+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fc95 	bl	8001218 <BMP280_measureP>
 80018ee:	4603      	mov	r3, r0
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	4a0e      	ldr	r2, [pc, #56]	@ (800192c <BMP280_calculate+0x60>)
 80018f4:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 80018f6:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <BMP280_calculate+0x60>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	4a0c      	ldr	r2, [pc, #48]	@ (800192c <BMP280_calculate+0x60>)
 80018fc:	6892      	ldr	r2, [r2, #8]
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff51 	bl	80017a8 <BMP280_measureH>
 8001906:	4603      	mov	r3, r0
 8001908:	461a      	mov	r2, r3
 800190a:	4b08      	ldr	r3, [pc, #32]	@ (800192c <BMP280_calculate+0x60>)
 800190c:	821a      	strh	r2, [r3, #16]

	if(BMP280.Barometric_Altitude > BMP280.Max_Altitude) BMP280.Max_Altitude = BMP280.Barometric_Altitude;
 800190e:	4b07      	ldr	r3, [pc, #28]	@ (800192c <BMP280_calculate+0x60>)
 8001910:	8a1a      	ldrh	r2, [r3, #16]
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <BMP280_calculate+0x60>)
 8001914:	8a5b      	ldrh	r3, [r3, #18]
 8001916:	429a      	cmp	r2, r3
 8001918:	d903      	bls.n	8001922 <BMP280_calculate+0x56>
 800191a:	4b04      	ldr	r3, [pc, #16]	@ (800192c <BMP280_calculate+0x60>)
 800191c:	8a1a      	ldrh	r2, [r3, #16]
 800191e:	4b03      	ldr	r3, [pc, #12]	@ (800192c <BMP280_calculate+0x60>)
 8001920:	825a      	strh	r2, [r3, #18]
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000178 	.word	0x20000178
 800192c:	2000014c 	.word	0x2000014c
 8001930:	2000017c 	.word	0x2000017c

08001934 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a2e      	ldr	r2, [pc, #184]	@ (80019fc <GetSector+0xc8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d806      	bhi.n	8001956 <GetSector+0x22>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800194e:	d302      	bcc.n	8001956 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	e04b      	b.n	80019ee <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a29      	ldr	r2, [pc, #164]	@ (8001a00 <GetSector+0xcc>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d806      	bhi.n	800196c <GetSector+0x38>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a28      	ldr	r2, [pc, #160]	@ (8001a04 <GetSector+0xd0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d302      	bcc.n	800196c <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8001966:	2301      	movs	r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	e040      	b.n	80019ee <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a26      	ldr	r2, [pc, #152]	@ (8001a08 <GetSector+0xd4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d806      	bhi.n	8001982 <GetSector+0x4e>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a25      	ldr	r2, [pc, #148]	@ (8001a0c <GetSector+0xd8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d302      	bcc.n	8001982 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 800197c:	2302      	movs	r3, #2
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e035      	b.n	80019ee <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a22      	ldr	r2, [pc, #136]	@ (8001a10 <GetSector+0xdc>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d206      	bcs.n	8001998 <GetSector+0x64>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a21      	ldr	r2, [pc, #132]	@ (8001a14 <GetSector+0xe0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d302      	bcc.n	8001998 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001992:	2303      	movs	r3, #3
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	e02a      	b.n	80019ee <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a1f      	ldr	r2, [pc, #124]	@ (8001a18 <GetSector+0xe4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d206      	bcs.n	80019ae <GetSector+0x7a>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a10 <GetSector+0xdc>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d902      	bls.n	80019ae <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80019a8:	2304      	movs	r3, #4
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e01f      	b.n	80019ee <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a1a      	ldr	r2, [pc, #104]	@ (8001a1c <GetSector+0xe8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d206      	bcs.n	80019c4 <GetSector+0x90>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a17      	ldr	r2, [pc, #92]	@ (8001a18 <GetSector+0xe4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d902      	bls.n	80019c4 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 80019be:	2305      	movs	r3, #5
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e014      	b.n	80019ee <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a16      	ldr	r2, [pc, #88]	@ (8001a20 <GetSector+0xec>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d206      	bcs.n	80019da <GetSector+0xa6>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a13      	ldr	r2, [pc, #76]	@ (8001a1c <GetSector+0xe8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d902      	bls.n	80019da <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 80019d4:	2306      	movs	r3, #6
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e009      	b.n	80019ee <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a11      	ldr	r2, [pc, #68]	@ (8001a24 <GetSector+0xf0>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d205      	bcs.n	80019ee <GetSector+0xba>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001a20 <GetSector+0xec>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80019ea:	2307      	movs	r3, #7
 80019ec:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 80019ee:	68fb      	ldr	r3, [r7, #12]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	08003ffe 	.word	0x08003ffe
 8001a00:	08007ffe 	.word	0x08007ffe
 8001a04:	08004000 	.word	0x08004000
 8001a08:	0800bffe 	.word	0x0800bffe
 8001a0c:	08008000 	.word	0x08008000
 8001a10:	0800ffff 	.word	0x0800ffff
 8001a14:	0800c000 	.word	0x0800c000
 8001a18:	0801ffff 	.word	0x0801ffff
 8001a1c:	0803ffff 	.word	0x0803ffff
 8001a20:	0805ffff 	.word	0x0805ffff
 8001a24:	0807ffff 	.word	0x0807ffff

08001a28 <Flash_Write>:


uint32_t Flash_Write (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	4613      	mov	r3, r2
 8001a34:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8001a3a:	f004 f85f 	bl	8005afc <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f7ff ff78 	bl	8001934 <GetSector>
 8001a44:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001a52:	69f8      	ldr	r0, [r7, #28]
 8001a54:	f7ff ff6e 	bl	8001934 <GetSector>
 8001a58:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <Flash_Write+0xac>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad4 <Flash_Write+0xac>)
 8001a62:	2202      	movs	r2, #2
 8001a64:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8001a66:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad4 <Flash_Write+0xac>)
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	3301      	adds	r3, #1
 8001a74:	4a17      	ldr	r2, [pc, #92]	@ (8001ad4 <Flash_Write+0xac>)
 8001a76:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4815      	ldr	r0, [pc, #84]	@ (8001ad4 <Flash_Write+0xac>)
 8001a80:	f004 f9ba 	bl	8005df8 <HAL_FLASHEx_Erase>

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
 8001a84:	e01b      	b.n	8001abe <Flash_Write+0x96>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	461c      	mov	r4, r3
 8001a94:	4615      	mov	r5, r2
 8001a96:	4622      	mov	r2, r4
 8001a98:	462b      	mov	r3, r5
 8001a9a:	68f9      	ldr	r1, [r7, #12]
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f003 ffd9 	bl	8005a54 <HAL_FLASH_Program>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d106      	bne.n	8001ab6 <Flash_Write+0x8e>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ab4:	e003      	b.n	8001abe <Flash_Write+0x96>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001ab6:	f004 f853 	bl	8005b60 <HAL_FLASH_GetError>
 8001aba:	4603      	mov	r3, r0
 8001abc:	e006      	b.n	8001acc <Flash_Write+0xa4>
	   while (sofar<numberofwords)
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	dbdf      	blt.n	8001a86 <Flash_Write+0x5e>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001ac6:	f004 f83b 	bl	8005b40 <HAL_FLASH_Lock>

	   return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3728      	adds	r7, #40	@ 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad4:	20000184 	.word	0x20000184

08001ad8 <Flash_Read>:


void Flash_Read (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3304      	adds	r3, #4
 8001af2:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	3304      	adds	r3, #4
 8001af8:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	1e5a      	subs	r2, r3, #1
 8001afe:	80fa      	strh	r2, [r7, #6]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d000      	beq.n	8001b06 <Flash_Read+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001b04:	e7ef      	b.n	8001ae6 <Flash_Read+0xe>
		if (!(numberofwords--)) break;
 8001b06:	bf00      	nop
	}
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <MPU6050_getPromModule>:

#define MPU6050_ADDR 0xD0
const uint16_t i2c_timeout = 10;
const double Accel_Z_corrector = 2048.0;

void MPU6050_getPromModule(MPU6050_t *DataStruct){
 8001b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b18:	b09e      	sub	sp, #120	@ 0x78
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int64_t Buffer = 0;
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	int32_t AuxBuffer[5] = {0};
 8001b2a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8001b2e:	2300      	movs	r3, #0
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	6053      	str	r3, [r2, #4]
 8001b34:	6093      	str	r3, [r2, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
 8001b38:	6113      	str	r3, [r2, #16]

	for(uint8_t n = 0;n<5;n++){
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001b40:	e016      	b.n	8001b70 <MPU6050_getPromModule+0x5c>
		AuxBuffer[n] = DataStruct->PromBuffer[n].Accel_X_RAW;
 8001b42:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b48:	3304      	adds	r3, #4
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3304      	adds	r3, #4
 8001b50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b54:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	3330      	adds	r3, #48	@ 0x30
 8001b5c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001b60:	440b      	add	r3, r1
 8001b62:	f843 2c24 	str.w	r2, [r3, #-36]
	for(uint8_t n = 0;n<5;n++){
 8001b66:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001b70:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d9e4      	bls.n	8001b42 <MPU6050_getPromModule+0x2e>
	}
	for(uint8_t n = 0;n<4;n++){
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8001b7e:	e02d      	b.n	8001bdc <MPU6050_getPromModule+0xc8>

		DataStruct->PromBuffer[n+1].Accel_X_RAW = AuxBuffer[n];
 8001b80:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	3330      	adds	r3, #48	@ 0x30
 8001b88:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8001b92:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001b96:	3301      	adds	r3, #1
 8001b98:	b211      	sxth	r1, r2
 8001b9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	4413      	add	r3, r2
 8001ba2:	1d1a      	adds	r2, r3, #4
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	8013      	strh	r3, [r2, #0]
		Buffer += DataStruct->PromBuffer[n].Accel_X_RAW;
 8001ba8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001bac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bae:	3304      	adds	r3, #4
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	17da      	asrs	r2, r3, #31
 8001bbe:	461c      	mov	r4, r3
 8001bc0:	4615      	mov	r5, r2
 8001bc2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001bc6:	eb12 0804 	adds.w	r8, r2, r4
 8001bca:	eb43 0905 	adc.w	r9, r3, r5
 8001bce:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
	for(uint8_t n = 0;n<4;n++){
 8001bd2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8001bdc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d9cd      	bls.n	8001b80 <MPU6050_getPromModule+0x6c>
	}
	DataStruct->PromBuffer[0].Accel_X_RAW = DataStruct->Accel_X_RAW;
 8001be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bec:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
	Buffer += DataStruct->PromBuffer[0].Accel_X_RAW;
 8001bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bf2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	17da      	asrs	r2, r3, #31
 8001bfa:	469a      	mov	sl, r3
 8001bfc:	4693      	mov	fp, r2
 8001bfe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c02:	eb12 010a 	adds.w	r1, r2, sl
 8001c06:	6239      	str	r1, [r7, #32]
 8001c08:	eb43 030b 	adc.w	r3, r3, fp
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001c12:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	DataStruct->Prom.Accel_X_RAW = Buffer / 5;
 8001c16:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001c1a:	f04f 0205 	mov.w	r2, #5
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	f7fe ff8d 	bl	8000b40 <__aeabi_ldivmod>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	b213      	sxth	r3, r2
 8001c2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c2e:	f8a2 3094 	strh.w	r3, [r2, #148]	@ 0x94

	Buffer = 0;
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	for(uint8_t n = 0;n<5;n++){
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8001c44:	e016      	b.n	8001c74 <MPU6050_getPromModule+0x160>
		AuxBuffer[n] = DataStruct->PromBuffer[n].Accel_Y_RAW;
 8001c46:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001c4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4413      	add	r3, r2
 8001c52:	3306      	adds	r3, #6
 8001c54:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c58:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	3330      	adds	r3, #48	@ 0x30
 8001c60:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001c64:	440b      	add	r3, r1
 8001c66:	f843 2c24 	str.w	r2, [r3, #-36]
	for(uint8_t n = 0;n<5;n++){
 8001c6a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001c6e:	3301      	adds	r3, #1
 8001c70:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8001c74:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d9e4      	bls.n	8001c46 <MPU6050_getPromModule+0x132>
	}
	for(uint8_t n = 0;n<4;n++){
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8001c82:	e033      	b.n	8001cec <MPU6050_getPromModule+0x1d8>

		DataStruct->PromBuffer[n+1].Accel_Y_RAW = AuxBuffer[n];
 8001c84:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	3330      	adds	r3, #48	@ 0x30
 8001c8c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001c90:	4413      	add	r3, r2
 8001c92:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8001c96:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	b211      	sxth	r1, r2
 8001c9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4413      	add	r3, r2
 8001ca6:	1d9a      	adds	r2, r3, #6
 8001ca8:	460b      	mov	r3, r1
 8001caa:	8013      	strh	r3, [r2, #0]
		Buffer += DataStruct->PromBuffer[n].Accel_Y_RAW;
 8001cac:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001cb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3306      	adds	r3, #6
 8001cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	17da      	asrs	r2, r3, #31
 8001cc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cc4:	647a      	str	r2, [r7, #68]	@ 0x44
 8001cc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001cca:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001cce:	4621      	mov	r1, r4
 8001cd0:	1851      	adds	r1, r2, r1
 8001cd2:	61b9      	str	r1, [r7, #24]
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	414b      	adcs	r3, r1
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001cde:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	for(uint8_t n = 0;n<4;n++){
 8001ce2:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8001cec:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d9c7      	bls.n	8001c84 <MPU6050_getPromModule+0x170>
	}
	DataStruct->PromBuffer[0].Accel_Y_RAW = DataStruct->Accel_Y_RAW;
 8001cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cfc:	f8a2 3046 	strh.w	r3, [r2, #70]	@ 0x46
	Buffer += DataStruct->PromBuffer[0].Accel_Y_RAW;
 8001d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d02:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001d06:	b21b      	sxth	r3, r3
 8001d08:	17da      	asrs	r2, r3, #31
 8001d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001d12:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001d16:	4621      	mov	r1, r4
 8001d18:	1851      	adds	r1, r2, r1
 8001d1a:	6139      	str	r1, [r7, #16]
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	eb43 0101 	adc.w	r1, r3, r1
 8001d22:	6179      	str	r1, [r7, #20]
 8001d24:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001d28:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	DataStruct->Prom.Accel_Y_RAW = Buffer / 5;
 8001d2c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001d30:	f04f 0205 	mov.w	r2, #5
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	f7fe ff02 	bl	8000b40 <__aeabi_ldivmod>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	b212      	sxth	r2, r2
 8001d42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d44:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96

	Buffer = 0;
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	for(uint8_t n = 0;n<5;n++){
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8001d5a:	e016      	b.n	8001d8a <MPU6050_getPromModule+0x276>
		AuxBuffer[n] = DataStruct->PromBuffer[n].Accel_Z_RAW;
 8001d5c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001d60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d62:	3304      	adds	r3, #4
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	4413      	add	r3, r2
 8001d68:	3308      	adds	r3, #8
 8001d6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d6e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	3330      	adds	r3, #48	@ 0x30
 8001d76:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f843 2c24 	str.w	r2, [r3, #-36]
	for(uint8_t n = 0;n<5;n++){
 8001d80:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001d84:	3301      	adds	r3, #1
 8001d86:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8001d8a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d9e4      	bls.n	8001d5c <MPU6050_getPromModule+0x248>
	}
	for(uint8_t n = 0;n<4;n++){
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8001d98:	e033      	b.n	8001e02 <MPU6050_getPromModule+0x2ee>

		DataStruct->PromBuffer[n+1].Accel_Z_RAW = AuxBuffer[n];
 8001d9a:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	3330      	adds	r3, #48	@ 0x30
 8001da2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001da6:	4413      	add	r3, r2
 8001da8:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8001dac:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001db0:	3301      	adds	r3, #1
 8001db2:	b211      	sxth	r1, r2
 8001db4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001db6:	3304      	adds	r3, #4
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	4413      	add	r3, r2
 8001dbc:	3308      	adds	r3, #8
 8001dbe:	460a      	mov	r2, r1
 8001dc0:	801a      	strh	r2, [r3, #0]
		Buffer += DataStruct->PromBuffer[n].Accel_Z_RAW;
 8001dc2:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001dc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001dc8:	3304      	adds	r3, #4
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	4413      	add	r3, r2
 8001dce:	3308      	adds	r3, #8
 8001dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd4:	b21b      	sxth	r3, r3
 8001dd6:	17da      	asrs	r2, r3, #31
 8001dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dda:	637a      	str	r2, [r7, #52]	@ 0x34
 8001ddc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001de0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001de4:	4621      	mov	r1, r4
 8001de6:	1851      	adds	r1, r2, r1
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	4629      	mov	r1, r5
 8001dec:	414b      	adcs	r3, r1
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001df4:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	for(uint8_t n = 0;n<4;n++){
 8001df8:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8001e02:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d9c7      	bls.n	8001d9a <MPU6050_getPromModule+0x286>
	}
	DataStruct->PromBuffer[0].Accel_Z_RAW = DataStruct->Accel_Z_RAW;
 8001e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e0c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e12:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	Buffer += DataStruct->PromBuffer[0].Accel_Z_RAW;
 8001e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e18:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	17da      	asrs	r2, r3, #31
 8001e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e24:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001e28:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001e2c:	4621      	mov	r1, r4
 8001e2e:	1851      	adds	r1, r2, r1
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	4629      	mov	r1, r5
 8001e34:	eb43 0101 	adc.w	r1, r3, r1
 8001e38:	6079      	str	r1, [r7, #4]
 8001e3a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e3e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	DataStruct->Prom.Accel_Z_RAW = Buffer / 5;
 8001e42:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001e46:	f04f 0205 	mov.w	r2, #5
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	f7fe fe77 	bl	8000b40 <__aeabi_ldivmod>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	b212      	sxth	r2, r2
 8001e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e5a:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98


}
 8001e5e:	bf00      	nop
 8001e60:	3778      	adds	r7, #120	@ 0x78
 8001e62:	46bd      	mov	sp, r7
 8001e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001e68 <MPU6050_status>:

uint8_t MPU6050_status(void){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af04      	add	r7, sp, #16
	uint8_t check  = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	71fb      	strb	r3, [r7, #7]

	static uint8_t eCont1 = 0, eCont2 = 0;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001e76:	230a      	movs	r3, #10
 8001e78:	9302      	str	r3, [sp, #8]
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	1dbb      	adds	r3, r7, #6
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2301      	movs	r3, #1
 8001e84:	2275      	movs	r2, #117	@ 0x75
 8001e86:	21d0      	movs	r1, #208	@ 0xd0
 8001e88:	4822      	ldr	r0, [pc, #136]	@ (8001f14 <MPU6050_status+0xac>)
 8001e8a:	f004 fcb3 	bl	80067f4 <HAL_I2C_Mem_Read>
	if(check != 104){
 8001e8e:	79bb      	ldrb	r3, [r7, #6]
 8001e90:	2b68      	cmp	r3, #104	@ 0x68
 8001e92:	d011      	beq.n	8001eb8 <MPU6050_status+0x50>
		eCont1++;
 8001e94:	4b20      	ldr	r3, [pc, #128]	@ (8001f18 <MPU6050_status+0xb0>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f18 <MPU6050_status+0xb0>)
 8001e9e:	701a      	strb	r2, [r3, #0]
		if(eCont1 > 2){
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f18 <MPU6050_status+0xb0>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d90a      	bls.n	8001ebe <MPU6050_status+0x56>
			status |= 0x01;
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	71fb      	strb	r3, [r7, #7]
			eCont1 = 3;
 8001eb0:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <MPU6050_status+0xb0>)
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	e002      	b.n	8001ebe <MPU6050_status+0x56>
		}
	}
	else{
		eCont1 = 0;
 8001eb8:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <MPU6050_status+0xb0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
	}
	check = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001ec2:	230a      	movs	r3, #10
 8001ec4:	9302      	str	r3, [sp, #8]
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	1dbb      	adds	r3, r7, #6
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	2275      	movs	r2, #117	@ 0x75
 8001ed2:	21d0      	movs	r1, #208	@ 0xd0
 8001ed4:	4811      	ldr	r0, [pc, #68]	@ (8001f1c <MPU6050_status+0xb4>)
 8001ed6:	f004 fc8d 	bl	80067f4 <HAL_I2C_Mem_Read>
	if(check != 104){
 8001eda:	79bb      	ldrb	r3, [r7, #6]
 8001edc:	2b68      	cmp	r3, #104	@ 0x68
 8001ede:	d011      	beq.n	8001f04 <MPU6050_status+0x9c>
		eCont2++;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <MPU6050_status+0xb8>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <MPU6050_status+0xb8>)
 8001eea:	701a      	strb	r2, [r3, #0]
		if(eCont1 > 2){
 8001eec:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <MPU6050_status+0xb0>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d90a      	bls.n	8001f0a <MPU6050_status+0xa2>
			status |= 0x01;
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	71fb      	strb	r3, [r7, #7]
			eCont2 = 3;
 8001efc:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <MPU6050_status+0xb8>)
 8001efe:	2203      	movs	r2, #3
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e002      	b.n	8001f0a <MPU6050_status+0xa2>
		}
	}
	else{
		eCont2 = 0;
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <MPU6050_status+0xb8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200008b8 	.word	0x200008b8
 8001f18:	200003b8 	.word	0x200003b8
 8001f1c:	2000090c 	.word	0x2000090c
 8001f20:	200003b9 	.word	0x200003b9

08001f24 <MPU6050_memoryRefresh>:

void MPU6050_memoryRefresh(void){
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
	MPU6050.Module_1.OffSet.Ax_Offset = MEMORY.str.MPU6050_1.Ax_Offset;
 8001f28:	4b26      	ldr	r3, [pc, #152]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f2e:	4b26      	ldr	r3, [pc, #152]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f30:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	MPU6050.Module_1.OffSet.Ay_Offset = MEMORY.str.MPU6050_1.Ay_Offset;
 8001f34:	4b23      	ldr	r3, [pc, #140]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f36:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001f3a:	4b23      	ldr	r3, [pc, #140]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f3c:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
	MPU6050.Module_1.OffSet.Az_Offset = MEMORY.str.MPU6050_1.Az_Offset;
 8001f40:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f42:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001f46:	4b20      	ldr	r3, [pc, #128]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f48:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8

	MPU6050.Module_1.OffSet.Gx_Offset = MEMORY.str.MPU6050_1.Gx_Offset;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f4e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001f52:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f54:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
	MPU6050.Module_1.OffSet.Gy_Offset = MEMORY.str.MPU6050_1.Gy_Offset;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f5a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f60:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	MPU6050.Module_1.OffSet.Gz_Offset = MEMORY.str.MPU6050_1.Gz_Offset;
 8001f64:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f66:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001f6a:	4b17      	ldr	r3, [pc, #92]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f6c:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae

	MPU6050.Module_2.OffSet.Ax_Offset = MEMORY.str.MPU6050_2.Ax_Offset;
 8001f70:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f72:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8001f76:	4b14      	ldr	r3, [pc, #80]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f78:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	MPU6050.Module_2.OffSet.Ay_Offset = MEMORY.str.MPU6050_2.Ay_Offset;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f7e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8001f82:	4b11      	ldr	r3, [pc, #68]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f84:	f8a3 2156 	strh.w	r2, [r3, #342]	@ 0x156
	MPU6050.Module_2.OffSet.Az_Offset = MEMORY.str.MPU6050_2.Az_Offset;
 8001f88:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f8a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f90:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158

	MPU6050.Module_2.OffSet.Gx_Offset = MEMORY.str.MPU6050_2.Gx_Offset;
 8001f94:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001f96:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001f9c:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a
	MPU6050.Module_2.OffSet.Gy_Offset = MEMORY.str.MPU6050_2.Gy_Offset;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001fa2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8001fa6:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001fa8:	f8a3 215c 	strh.w	r2, [r3, #348]	@ 0x15c
	MPU6050.Module_2.OffSet.Gz_Offset = MEMORY.str.MPU6050_2.Gz_Offset;
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <MPU6050_memoryRefresh+0xa0>)
 8001fae:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8001fb2:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <MPU6050_memoryRefresh+0xa4>)
 8001fb4:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000848 	.word	0x20000848
 8001fc8:	20000198 	.word	0x20000198

08001fcc <MPU6050_calibration>:

void MPU6050_calibration(void){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0



    MEMORY.str.MPU6050_1.Ax_Offset += MPU6050.Module_1.Accel_X_RAW;
 8001fd0:	4b53      	ldr	r3, [pc, #332]	@ (8002120 <MPU6050_calibration+0x154>)
 8001fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b52      	ldr	r3, [pc, #328]	@ (8002124 <MPU6050_calibration+0x158>)
 8001fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	b21a      	sxth	r2, r3
 8001fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8002120 <MPU6050_calibration+0x154>)
 8001fe8:	801a      	strh	r2, [r3, #0]
    MEMORY.str.MPU6050_1.Ay_Offset += MPU6050.Module_1.Accel_Y_RAW;
 8001fea:	4b4d      	ldr	r3, [pc, #308]	@ (8002120 <MPU6050_calibration+0x154>)
 8001fec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	4b4c      	ldr	r3, [pc, #304]	@ (8002124 <MPU6050_calibration+0x158>)
 8001ff4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	4b47      	ldr	r3, [pc, #284]	@ (8002120 <MPU6050_calibration+0x154>)
 8002002:	805a      	strh	r2, [r3, #2]
    MEMORY.str.MPU6050_1.Az_Offset += MPU6050.Module_1.Accel_Z_RAW - 2048;
 8002004:	4b46      	ldr	r3, [pc, #280]	@ (8002120 <MPU6050_calibration+0x154>)
 8002006:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800200a:	b29a      	uxth	r2, r3
 800200c:	4b45      	ldr	r3, [pc, #276]	@ (8002124 <MPU6050_calibration+0x158>)
 800200e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002012:	b29b      	uxth	r3, r3
 8002014:	4413      	add	r3, r2
 8002016:	b29b      	uxth	r3, r3
 8002018:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800201c:	b29b      	uxth	r3, r3
 800201e:	b21a      	sxth	r2, r3
 8002020:	4b3f      	ldr	r3, [pc, #252]	@ (8002120 <MPU6050_calibration+0x154>)
 8002022:	809a      	strh	r2, [r3, #4]

    MEMORY.str.MPU6050_2.Ax_Offset += MPU6050.Module_2.Accel_X_RAW;
 8002024:	4b3e      	ldr	r3, [pc, #248]	@ (8002120 <MPU6050_calibration+0x154>)
 8002026:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b3d      	ldr	r3, [pc, #244]	@ (8002124 <MPU6050_calibration+0x158>)
 800202e:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	@ 0xb0
 8002032:	b29b      	uxth	r3, r3
 8002034:	4413      	add	r3, r2
 8002036:	b29b      	uxth	r3, r3
 8002038:	b21a      	sxth	r2, r3
 800203a:	4b39      	ldr	r3, [pc, #228]	@ (8002120 <MPU6050_calibration+0x154>)
 800203c:	819a      	strh	r2, [r3, #12]
    MEMORY.str.MPU6050_2.Ay_Offset += MPU6050.Module_2.Accel_Y_RAW;
 800203e:	4b38      	ldr	r3, [pc, #224]	@ (8002120 <MPU6050_calibration+0x154>)
 8002040:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002044:	b29a      	uxth	r2, r3
 8002046:	4b37      	ldr	r3, [pc, #220]	@ (8002124 <MPU6050_calibration+0x158>)
 8002048:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	@ 0xb2
 800204c:	b29b      	uxth	r3, r3
 800204e:	4413      	add	r3, r2
 8002050:	b29b      	uxth	r3, r3
 8002052:	b21a      	sxth	r2, r3
 8002054:	4b32      	ldr	r3, [pc, #200]	@ (8002120 <MPU6050_calibration+0x154>)
 8002056:	81da      	strh	r2, [r3, #14]
    MEMORY.str.MPU6050_2.Az_Offset += MPU6050.Module_2.Accel_Z_RAW - 2048;
 8002058:	4b31      	ldr	r3, [pc, #196]	@ (8002120 <MPU6050_calibration+0x154>)
 800205a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b30      	ldr	r3, [pc, #192]	@ (8002124 <MPU6050_calibration+0x158>)
 8002062:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8002066:	b29b      	uxth	r3, r3
 8002068:	4413      	add	r3, r2
 800206a:	b29b      	uxth	r3, r3
 800206c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8002070:	b29b      	uxth	r3, r3
 8002072:	b21a      	sxth	r2, r3
 8002074:	4b2a      	ldr	r3, [pc, #168]	@ (8002120 <MPU6050_calibration+0x154>)
 8002076:	821a      	strh	r2, [r3, #16]

    MEMORY.str.MPU6050_1.Gx_Offset += MPU6050.Module_1.Gyro_X_RAW;
 8002078:	4b29      	ldr	r3, [pc, #164]	@ (8002120 <MPU6050_calibration+0x154>)
 800207a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800207e:	b29a      	uxth	r2, r3
 8002080:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <MPU6050_calibration+0x158>)
 8002082:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002086:	b29b      	uxth	r3, r3
 8002088:	4413      	add	r3, r2
 800208a:	b29b      	uxth	r3, r3
 800208c:	b21a      	sxth	r2, r3
 800208e:	4b24      	ldr	r3, [pc, #144]	@ (8002120 <MPU6050_calibration+0x154>)
 8002090:	80da      	strh	r2, [r3, #6]
    MEMORY.str.MPU6050_1.Gy_Offset += MPU6050.Module_1.Gyro_Y_RAW;
 8002092:	4b23      	ldr	r3, [pc, #140]	@ (8002120 <MPU6050_calibration+0x154>)
 8002094:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b22      	ldr	r3, [pc, #136]	@ (8002124 <MPU6050_calibration+0x158>)
 800209c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	b21a      	sxth	r2, r3
 80020a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <MPU6050_calibration+0x154>)
 80020aa:	811a      	strh	r2, [r3, #8]
    MEMORY.str.MPU6050_1.Gz_Offset += MPU6050.Module_1.Gyro_Z_RAW;
 80020ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002120 <MPU6050_calibration+0x154>)
 80020ae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <MPU6050_calibration+0x158>)
 80020b6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4413      	add	r3, r2
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	4b17      	ldr	r3, [pc, #92]	@ (8002120 <MPU6050_calibration+0x154>)
 80020c4:	815a      	strh	r2, [r3, #10]

    MEMORY.str.MPU6050_2.Gx_Offset += MPU6050.Module_2.Gyro_X_RAW;
 80020c6:	4b16      	ldr	r3, [pc, #88]	@ (8002120 <MPU6050_calibration+0x154>)
 80020c8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <MPU6050_calibration+0x158>)
 80020d0:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	b29b      	uxth	r3, r3
 80020da:	b21a      	sxth	r2, r3
 80020dc:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <MPU6050_calibration+0x154>)
 80020de:	825a      	strh	r2, [r3, #18]
    MEMORY.str.MPU6050_2.Gy_Offset += MPU6050.Module_2.Gyro_Y_RAW;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002120 <MPU6050_calibration+0x154>)
 80020e2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <MPU6050_calibration+0x158>)
 80020ea:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	@ 0xd2
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	b21a      	sxth	r2, r3
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <MPU6050_calibration+0x154>)
 80020f8:	829a      	strh	r2, [r3, #20]
    MEMORY.str.MPU6050_2.Gz_Offset += MPU6050.Module_2.Gyro_Z_RAW;
 80020fa:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <MPU6050_calibration+0x154>)
 80020fc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002100:	b29a      	uxth	r2, r3
 8002102:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <MPU6050_calibration+0x158>)
 8002104:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	@ 0xd4
 8002108:	b29b      	uxth	r3, r3
 800210a:	4413      	add	r3, r2
 800210c:	b29b      	uxth	r3, r3
 800210e:	b21a      	sxth	r2, r3
 8002110:	4b03      	ldr	r3, [pc, #12]	@ (8002120 <MPU6050_calibration+0x154>)
 8002112:	82da      	strh	r2, [r3, #22]

    MPU6050_memoryRefresh();
 8002114:	f7ff ff06 	bl	8001f24 <MPU6050_memoryRefresh>
    MEMORY_write();
 8002118:	f000 ffda 	bl	80030d0 <MEMORY_write>
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000848 	.word	0x20000848
 8002124:	20000198 	.word	0x20000198

08002128 <MPU6050_Init_Module>:



uint8_t MPU6050_Init_Module(I2C_HandleTypeDef *I2Cx) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af04      	add	r7, sp, #16
 800212e:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002130:	230a      	movs	r3, #10
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	2301      	movs	r3, #1
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	f107 030f 	add.w	r3, r7, #15
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2301      	movs	r3, #1
 8002140:	2275      	movs	r2, #117	@ 0x75
 8002142:	21d0      	movs	r1, #208	@ 0xd0
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f004 fb55 	bl	80067f4 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	2b68      	cmp	r3, #104	@ 0x68
 800214e:	d13d      	bne.n	80021cc <MPU6050_Init_Module+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002154:	230a      	movs	r3, #10
 8002156:	9302      	str	r3, [sp, #8]
 8002158:	2301      	movs	r3, #1
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	f107 030e 	add.w	r3, r7, #14
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2301      	movs	r3, #1
 8002164:	226b      	movs	r2, #107	@ 0x6b
 8002166:	21d0      	movs	r1, #208	@ 0xd0
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f004 fa49 	bl	8006600 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800216e:	2307      	movs	r3, #7
 8002170:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002172:	230a      	movs	r3, #10
 8002174:	9302      	str	r3, [sp, #8]
 8002176:	2301      	movs	r3, #1
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	f107 030e 	add.w	r3, r7, #14
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2301      	movs	r3, #1
 8002182:	2219      	movs	r2, #25
 8002184:	21d0      	movs	r1, #208	@ 0xd0
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f004 fa3a 	bl	8006600 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x18;
 800218c:	2318      	movs	r3, #24
 800218e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002190:	230a      	movs	r3, #10
 8002192:	9302      	str	r3, [sp, #8]
 8002194:	2301      	movs	r3, #1
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	f107 030e 	add.w	r3, r7, #14
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2301      	movs	r3, #1
 80021a0:	221c      	movs	r2, #28
 80021a2:	21d0      	movs	r1, #208	@ 0xd0
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f004 fa2b 	bl	8006600 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x18;
 80021aa:	2318      	movs	r3, #24
 80021ac:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80021ae:	230a      	movs	r3, #10
 80021b0:	9302      	str	r3, [sp, #8]
 80021b2:	2301      	movs	r3, #1
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	f107 030e 	add.w	r3, r7, #14
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2301      	movs	r3, #1
 80021be:	221b      	movs	r2, #27
 80021c0:	21d0      	movs	r1, #208	@ 0xd0
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f004 fa1c 	bl	8006600 <HAL_I2C_Mem_Write>
        return 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	e000      	b.n	80021ce <MPU6050_Init_Module+0xa6>
    }
    return 1;
 80021cc:	2301      	movs	r3, #1
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	@ 0x28
 80021dc:	af04      	add	r7, sp, #16
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80021e2:	230a      	movs	r3, #10
 80021e4:	9302      	str	r3, [sp, #8]
 80021e6:	230e      	movs	r3, #14
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	f107 0308 	add.w	r3, r7, #8
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2301      	movs	r3, #1
 80021f2:	223b      	movs	r2, #59	@ 0x3b
 80021f4:	21d0      	movs	r1, #208	@ 0xd0
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f004 fafc 	bl	80067f4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = ((int16_t) (Rec_Data[0] << 8 | Rec_Data[1]) - DataStruct->OffSet.Ax_Offset);
 80021fc:	7a3b      	ldrb	r3, [r7, #8]
 80021fe:	021b      	lsls	r3, r3, #8
 8002200:	b21a      	sxth	r2, r3
 8002202:	7a7b      	ldrb	r3, [r7, #9]
 8002204:	b21b      	sxth	r3, r3
 8002206:	4313      	orrs	r3, r2
 8002208:	b21b      	sxth	r3, r3
 800220a:	b29a      	uxth	r2, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	@ 0xa4
 8002212:	b29b      	uxth	r3, r3
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	b29b      	uxth	r3, r3
 8002218:	b21a      	sxth	r2, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = ((int16_t) (Rec_Data[2] << 8 | Rec_Data[3]) - DataStruct->OffSet.Ay_Offset);
 800221e:	7abb      	ldrb	r3, [r7, #10]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	b21a      	sxth	r2, r3
 8002224:	7afb      	ldrb	r3, [r7, #11]
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b21b      	sxth	r3, r3
 800222c:	b29a      	uxth	r2, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8002234:	b29b      	uxth	r3, r3
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	b29b      	uxth	r3, r3
 800223a:	b21a      	sxth	r2, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = ((int16_t) (Rec_Data[4] << 8 | Rec_Data[5]) - DataStruct->OffSet.Az_Offset);
 8002240:	7b3b      	ldrb	r3, [r7, #12]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	b21a      	sxth	r2, r3
 8002246:	7b7b      	ldrb	r3, [r7, #13]
 8002248:	b21b      	sxth	r3, r3
 800224a:	4313      	orrs	r3, r2
 800224c:	b21b      	sxth	r3, r3
 800224e:	b29a      	uxth	r2, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	@ 0xa8
 8002256:	b29b      	uxth	r3, r3
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	b29b      	uxth	r3, r3
 800225c:	b21a      	sxth	r2, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8002262:	7bbb      	ldrb	r3, [r7, #14]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	b21a      	sxth	r2, r3
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	b21b      	sxth	r3, r3
 800226c:	4313      	orrs	r3, r2
 800226e:	82fb      	strh	r3, [r7, #22]
    DataStruct->Gyro_X_RAW = ((int16_t) (Rec_Data[8] << 8 | Rec_Data[9])  - DataStruct->OffSet.Gx_Offset);
 8002270:	7c3b      	ldrb	r3, [r7, #16]
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	b21a      	sxth	r2, r3
 8002276:	7c7b      	ldrb	r3, [r7, #17]
 8002278:	b21b      	sxth	r3, r3
 800227a:	4313      	orrs	r3, r2
 800227c:	b21b      	sxth	r3, r3
 800227e:	b29a      	uxth	r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 8002286:	b29b      	uxth	r3, r3
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	b29b      	uxth	r3, r3
 800228c:	b21a      	sxth	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = ((int16_t) (Rec_Data[10] << 8 | Rec_Data[11])- DataStruct->OffSet.Gy_Offset);
 8002292:	7cbb      	ldrb	r3, [r7, #18]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	b21a      	sxth	r2, r3
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	b21b      	sxth	r3, r3
 800229c:	4313      	orrs	r3, r2
 800229e:	b21b      	sxth	r3, r3
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	b21a      	sxth	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = ((int16_t) (Rec_Data[12] << 8 | Rec_Data[13])- DataStruct->OffSet.Gz_Offset);
 80022b4:	7d3b      	ldrb	r3, [r7, #20]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	b21a      	sxth	r2, r3
 80022ba:	7d7b      	ldrb	r3, [r7, #21]
 80022bc:	b21b      	sxth	r3, r3
 80022be:	4313      	orrs	r3, r2
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 2048.0;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f8cd 	bl	800047c <__aeabi_i2d>
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	4b38      	ldr	r3, [pc, #224]	@ (80023c8 <MPU6050_Read_All+0x1f0>)
 80022e8:	f7fe fa5c 	bl	80007a4 <__aeabi_ddiv>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	6839      	ldr	r1, [r7, #0]
 80022f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 2048.0;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f8bd 	bl	800047c <__aeabi_i2d>
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	4b30      	ldr	r3, [pc, #192]	@ (80023c8 <MPU6050_Read_All+0x1f0>)
 8002308:	f7fe fa4c 	bl	80007a4 <__aeabi_ddiv>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	6839      	ldr	r1, [r7, #0]
 8002312:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f8ad 	bl	800047c <__aeabi_i2d>
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	4b28      	ldr	r3, [pc, #160]	@ (80023c8 <MPU6050_Read_All+0x1f0>)
 8002328:	f7fe fa3c 	bl	80007a4 <__aeabi_ddiv>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002336:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002342:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80023cc <MPU6050_Read_All+0x1f4>
 8002346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800234a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80023d0 <MPU6050_Read_All+0x1f8>
 800234e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 16.4;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe f88c 	bl	800047c <__aeabi_i2d>
 8002364:	a316      	add	r3, pc, #88	@ (adr r3, 80023c0 <MPU6050_Read_All+0x1e8>)
 8002366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236a:	f7fe fa1b 	bl	80007a4 <__aeabi_ddiv>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	6839      	ldr	r1, [r7, #0]
 8002374:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 16.4;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f87c 	bl	800047c <__aeabi_i2d>
 8002384:	a30e      	add	r3, pc, #56	@ (adr r3, 80023c0 <MPU6050_Read_All+0x1e8>)
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	f7fe fa0b 	bl	80007a4 <__aeabi_ddiv>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 16.4;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f86c 	bl	800047c <__aeabi_i2d>
 80023a4:	a306      	add	r3, pc, #24	@ (adr r3, 80023c0 <MPU6050_Read_All+0x1e8>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	f7fe f9fb 	bl	80007a4 <__aeabi_ddiv>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	6839      	ldr	r1, [r7, #0]
 80023b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

}
 80023b8:	bf00      	nop
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	66666666 	.word	0x66666666
 80023c4:	40306666 	.word	0x40306666
 80023c8:	40a00000 	.word	0x40a00000
 80023cc:	43aa0000 	.word	0x43aa0000
 80023d0:	42121eb8 	.word	0x42121eb8

080023d4 <MPU6050_Init>:



void MPU6050_Init(void){
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0

	MPU6050_Init_Module(&hi2c1);
 80023d8:	4804      	ldr	r0, [pc, #16]	@ (80023ec <MPU6050_Init+0x18>)
 80023da:	f7ff fea5 	bl	8002128 <MPU6050_Init_Module>
	MPU6050_Init_Module(&hi2c2);
 80023de:	4804      	ldr	r0, [pc, #16]	@ (80023f0 <MPU6050_Init+0x1c>)
 80023e0:	f7ff fea2 	bl	8002128 <MPU6050_Init_Module>
	MPU6050_memoryRefresh();
 80023e4:	f7ff fd9e 	bl	8001f24 <MPU6050_memoryRefresh>

}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200008b8 	.word	0x200008b8
 80023f0:	2000090c 	.word	0x2000090c

080023f4 <Refresh_data>:
extern BMP280_t BMP280;

char pahtName[7] = "Data000";
char fileName[] = "FD000.csv";

void Refresh_data(void){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
	BLACKBOX.AccX = (int16_t)(MPU6050.Data.Ax*100);
 80023f8:	4b48      	ldr	r3, [pc, #288]	@ (800251c <Refresh_data+0x128>)
 80023fa:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	@ 0x168
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	4b47      	ldr	r3, [pc, #284]	@ (8002520 <Refresh_data+0x12c>)
 8002404:	f7fe f8a4 	bl	8000550 <__aeabi_dmul>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4610      	mov	r0, r2
 800240e:	4619      	mov	r1, r3
 8002410:	f7fe fb4e 	bl	8000ab0 <__aeabi_d2iz>
 8002414:	4603      	mov	r3, r0
 8002416:	b21a      	sxth	r2, r3
 8002418:	4b42      	ldr	r3, [pc, #264]	@ (8002524 <Refresh_data+0x130>)
 800241a:	801a      	strh	r2, [r3, #0]
	BLACKBOX.AccY = (int16_t)(MPU6050.Data.Ay*100);
 800241c:	4b3f      	ldr	r3, [pc, #252]	@ (800251c <Refresh_data+0x128>)
 800241e:	e9d3 015c 	ldrd	r0, r1, [r3, #368]	@ 0x170
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	4b3e      	ldr	r3, [pc, #248]	@ (8002520 <Refresh_data+0x12c>)
 8002428:	f7fe f892 	bl	8000550 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7fe fb3c 	bl	8000ab0 <__aeabi_d2iz>
 8002438:	4603      	mov	r3, r0
 800243a:	b21a      	sxth	r2, r3
 800243c:	4b39      	ldr	r3, [pc, #228]	@ (8002524 <Refresh_data+0x130>)
 800243e:	805a      	strh	r2, [r3, #2]
	BLACKBOX.AccZ = (int16_t)(MPU6050.Data.Az*100);
 8002440:	4b36      	ldr	r3, [pc, #216]	@ (800251c <Refresh_data+0x128>)
 8002442:	e9d3 015e 	ldrd	r0, r1, [r3, #376]	@ 0x178
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	4b35      	ldr	r3, [pc, #212]	@ (8002520 <Refresh_data+0x12c>)
 800244c:	f7fe f880 	bl	8000550 <__aeabi_dmul>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	f7fe fb2a 	bl	8000ab0 <__aeabi_d2iz>
 800245c:	4603      	mov	r3, r0
 800245e:	b21a      	sxth	r2, r3
 8002460:	4b30      	ldr	r3, [pc, #192]	@ (8002524 <Refresh_data+0x130>)
 8002462:	809a      	strh	r2, [r3, #4]
	BLACKBOX.GyroX = (int16_t)(MPU6050.Data.Gx*100);
 8002464:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <Refresh_data+0x128>)
 8002466:	e9d3 0162 	ldrd	r0, r1, [r3, #392]	@ 0x188
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	4b2c      	ldr	r3, [pc, #176]	@ (8002520 <Refresh_data+0x12c>)
 8002470:	f7fe f86e 	bl	8000550 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f7fe fb18 	bl	8000ab0 <__aeabi_d2iz>
 8002480:	4603      	mov	r3, r0
 8002482:	b21a      	sxth	r2, r3
 8002484:	4b27      	ldr	r3, [pc, #156]	@ (8002524 <Refresh_data+0x130>)
 8002486:	80da      	strh	r2, [r3, #6]
	BLACKBOX.GyroY = (int16_t)(MPU6050.Data.Gy*100);
 8002488:	4b24      	ldr	r3, [pc, #144]	@ (800251c <Refresh_data+0x128>)
 800248a:	e9d3 0164 	ldrd	r0, r1, [r3, #400]	@ 0x190
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b23      	ldr	r3, [pc, #140]	@ (8002520 <Refresh_data+0x12c>)
 8002494:	f7fe f85c 	bl	8000550 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe fb06 	bl	8000ab0 <__aeabi_d2iz>
 80024a4:	4603      	mov	r3, r0
 80024a6:	b21a      	sxth	r2, r3
 80024a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002524 <Refresh_data+0x130>)
 80024aa:	811a      	strh	r2, [r3, #8]
	BLACKBOX.GyroZ = (int16_t)(MPU6050.Data.Gz*100);
 80024ac:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <Refresh_data+0x128>)
 80024ae:	e9d3 0166 	ldrd	r0, r1, [r3, #408]	@ 0x198
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <Refresh_data+0x12c>)
 80024b8:	f7fe f84a 	bl	8000550 <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe faf4 	bl	8000ab0 <__aeabi_d2iz>
 80024c8:	4603      	mov	r3, r0
 80024ca:	b21a      	sxth	r2, r3
 80024cc:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <Refresh_data+0x130>)
 80024ce:	815a      	strh	r2, [r3, #10]
	BLACKBOX.AngX = (int16_t)(MPU6050.KalmanAngleX*100);
 80024d0:	4b12      	ldr	r3, [pc, #72]	@ (800251c <Refresh_data+0x128>)
 80024d2:	e9d3 0184 	ldrd	r0, r1, [r3, #528]	@ 0x210
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <Refresh_data+0x12c>)
 80024dc:	f7fe f838 	bl	8000550 <__aeabi_dmul>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	f7fe fae2 	bl	8000ab0 <__aeabi_d2iz>
 80024ec:	4603      	mov	r3, r0
 80024ee:	b21a      	sxth	r2, r3
 80024f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <Refresh_data+0x130>)
 80024f2:	819a      	strh	r2, [r3, #12]
	BLACKBOX.AngY = (int16_t)(MPU6050.KalmanAngleY*100);
 80024f4:	4b09      	ldr	r3, [pc, #36]	@ (800251c <Refresh_data+0x128>)
 80024f6:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	@ 0x218
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <Refresh_data+0x12c>)
 8002500:	f7fe f826 	bl	8000550 <__aeabi_dmul>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	f7fe fad0 	bl	8000ab0 <__aeabi_d2iz>
 8002510:	4603      	mov	r3, r0
 8002512:	b21a      	sxth	r2, r3
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <Refresh_data+0x130>)
 8002516:	81da      	strh	r2, [r3, #14]

}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000198 	.word	0x20000198
 8002520:	40590000 	.word	0x40590000
 8002524:	20000824 	.word	0x20000824

08002528 <Get_NewDir>:

void Get_NewDir(void){
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
	uint8_t Buffer;
	Buffer = MEMORY.str.STATUS.Reset_Number;
 800252e:	4b27      	ldr	r3, [pc, #156]	@ (80025cc <Get_NewDir+0xa4>)
 8002530:	7f1b      	ldrb	r3, [r3, #28]
 8002532:	71fb      	strb	r3, [r7, #7]


	pahtName[4] = Buffer/100 + 48;
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	4a26      	ldr	r2, [pc, #152]	@ (80025d0 <Get_NewDir+0xa8>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3330      	adds	r3, #48	@ 0x30
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b23      	ldr	r3, [pc, #140]	@ (80025d4 <Get_NewDir+0xac>)
 8002546:	711a      	strb	r2, [r3, #4]
	Buffer = Buffer - (Buffer/100)*100;
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	4a21      	ldr	r2, [pc, #132]	@ (80025d0 <Get_NewDir+0xa8>)
 800254c:	fba2 2303 	umull	r2, r3, r2, r3
 8002550:	095b      	lsrs	r3, r3, #5
 8002552:	b2db      	uxtb	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	0092      	lsls	r2, r2, #2
 8002558:	441a      	add	r2, r3
 800255a:	00d2      	lsls	r2, r2, #3
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	b2da      	uxtb	r2, r3
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	4413      	add	r3, r2
 8002566:	71fb      	strb	r3, [r7, #7]
	pahtName[5]= Buffer/10 + 48;
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	4a1b      	ldr	r2, [pc, #108]	@ (80025d8 <Get_NewDir+0xb0>)
 800256c:	fba2 2303 	umull	r2, r3, r2, r3
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	3330      	adds	r3, #48	@ 0x30
 8002576:	b2da      	uxtb	r2, r3
 8002578:	4b16      	ldr	r3, [pc, #88]	@ (80025d4 <Get_NewDir+0xac>)
 800257a:	715a      	strb	r2, [r3, #5]
	Buffer = Buffer - (Buffer/10)*10;
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	4a16      	ldr	r2, [pc, #88]	@ (80025d8 <Get_NewDir+0xb0>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	08db      	lsrs	r3, r3, #3
 8002586:	b2db      	uxtb	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	0152      	lsls	r2, r2, #5
 800258c:	1ad2      	subs	r2, r2, r3
 800258e:	0092      	lsls	r2, r2, #2
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	b2da      	uxtb	r2, r3
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	4413      	add	r3, r2
 800259a:	71fb      	strb	r3, [r7, #7]
	pahtName[6] = Buffer + 48;
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	3330      	adds	r3, #48	@ 0x30
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <Get_NewDir+0xac>)
 80025a4:	719a      	strb	r2, [r3, #6]

	fresult = f_mkdir(pahtName);
 80025a6:	480b      	ldr	r0, [pc, #44]	@ (80025d4 <Get_NewDir+0xac>)
 80025a8:	f00a f94a 	bl	800c840 <f_mkdir>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <Get_NewDir+0xb4>)
 80025b2:	701a      	strb	r2, [r3, #0]
	fresult = f_chdir(pahtName);
 80025b4:	4807      	ldr	r0, [pc, #28]	@ (80025d4 <Get_NewDir+0xac>)
 80025b6:	f009 fef0 	bl	800c39a <f_chdir>
 80025ba:	4603      	mov	r3, r0
 80025bc:	461a      	mov	r2, r3
 80025be:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <Get_NewDir+0xb4>)
 80025c0:	701a      	strb	r2, [r3, #0]
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000848 	.word	0x20000848
 80025d0:	51eb851f 	.word	0x51eb851f
 80025d4:	20000000 	.word	0x20000000
 80025d8:	cccccccd 	.word	0xcccccccd
 80025dc:	20000820 	.word	0x20000820

080025e0 <BLACKBOX_Init>:

void BLACKBOX_Init(void){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "/", 1);
 80025e4:	2201      	movs	r2, #1
 80025e6:	4911      	ldr	r1, [pc, #68]	@ (800262c <BLACKBOX_Init+0x4c>)
 80025e8:	4811      	ldr	r0, [pc, #68]	@ (8002630 <BLACKBOX_Init+0x50>)
 80025ea:	f009 fab9 	bl	800bb60 <f_mount>
 80025ee:	4603      	mov	r3, r0
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b10      	ldr	r3, [pc, #64]	@ (8002634 <BLACKBOX_Init+0x54>)
 80025f4:	701a      	strb	r2, [r3, #0]
	  Get_NewDir();
 80025f6:	f7ff ff97 	bl	8002528 <Get_NewDir>
	  f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80025fa:	2213      	movs	r2, #19
 80025fc:	490e      	ldr	r1, [pc, #56]	@ (8002638 <BLACKBOX_Init+0x58>)
 80025fe:	480f      	ldr	r0, [pc, #60]	@ (800263c <BLACKBOX_Init+0x5c>)
 8002600:	f009 faf4 	bl	800bbec <f_open>
	  fresult = f_lseek(&fil , f_size(&fil));
 8002604:	4b0d      	ldr	r3, [pc, #52]	@ (800263c <BLACKBOX_Init+0x5c>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4619      	mov	r1, r3
 800260a:	480c      	ldr	r0, [pc, #48]	@ (800263c <BLACKBOX_Init+0x5c>)
 800260c:	f009 ff0f 	bl	800c42e <f_lseek>
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	4b07      	ldr	r3, [pc, #28]	@ (8002634 <BLACKBOX_Init+0x54>)
 8002616:	701a      	strb	r2, [r3, #0]
	  f_printf(&fil,"Nmsg,AccX,AccY,AccZ,GyroX,GyroY,GyroZ,AngX,AngY,Alt,Pressure,Temp,Parachute,Peripheral\n");
 8002618:	4909      	ldr	r1, [pc, #36]	@ (8002640 <BLACKBOX_Init+0x60>)
 800261a:	4808      	ldr	r0, [pc, #32]	@ (800263c <BLACKBOX_Init+0x5c>)
 800261c:	f00a fa9c 	bl	800cb58 <f_printf>
	  f_close(&fil);
 8002620:	4806      	ldr	r0, [pc, #24]	@ (800263c <BLACKBOX_Init+0x5c>)
 8002622:	f009 fe90 	bl	800c346 <f_close>
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	0800dbb0 	.word	0x0800dbb0
 8002630:	200003bc 	.word	0x200003bc
 8002634:	20000820 	.word	0x20000820
 8002638:	20000008 	.word	0x20000008
 800263c:	200005f0 	.word	0x200005f0
 8002640:	0800dbb4 	.word	0x0800dbb4

08002644 <BLACKBOX_NewFile>:

void BLACKBOX_NewFile(void){
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	  f_close(&fil);
 8002648:	4820      	ldr	r0, [pc, #128]	@ (80026cc <BLACKBOX_NewFile+0x88>)
 800264a:	f009 fe7c 	bl	800c346 <f_close>
	  static uint8_t r,r2,r3 = 0;
	  r++;
 800264e:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <BLACKBOX_NewFile+0x8c>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	3301      	adds	r3, #1
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <BLACKBOX_NewFile+0x8c>)
 8002658:	701a      	strb	r2, [r3, #0]
	  fileName[4] = 48+r;
 800265a:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <BLACKBOX_NewFile+0x8c>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	3330      	adds	r3, #48	@ 0x30
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4b1c      	ldr	r3, [pc, #112]	@ (80026d4 <BLACKBOX_NewFile+0x90>)
 8002664:	711a      	strb	r2, [r3, #4]
	  if(r==10){
 8002666:	4b1a      	ldr	r3, [pc, #104]	@ (80026d0 <BLACKBOX_NewFile+0x8c>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b0a      	cmp	r3, #10
 800266c:	d127      	bne.n	80026be <BLACKBOX_NewFile+0x7a>
		  r2++;
 800266e:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <BLACKBOX_NewFile+0x94>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	3301      	adds	r3, #1
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <BLACKBOX_NewFile+0x94>)
 8002678:	701a      	strb	r2, [r3, #0]
		  r=0;
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <BLACKBOX_NewFile+0x8c>)
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
		  fileName[3] = 48 + r2;
 8002680:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <BLACKBOX_NewFile+0x94>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	3330      	adds	r3, #48	@ 0x30
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <BLACKBOX_NewFile+0x90>)
 800268a:	70da      	strb	r2, [r3, #3]
		  fileName[2] = 48;
 800268c:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <BLACKBOX_NewFile+0x90>)
 800268e:	2230      	movs	r2, #48	@ 0x30
 8002690:	709a      	strb	r2, [r3, #2]
		  if(r2==10){
 8002692:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <BLACKBOX_NewFile+0x94>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b0a      	cmp	r3, #10
 8002698:	d111      	bne.n	80026be <BLACKBOX_NewFile+0x7a>
			  r3++;
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <BLACKBOX_NewFile+0x98>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <BLACKBOX_NewFile+0x98>)
 80026a4:	701a      	strb	r2, [r3, #0]
			  r2=0;
 80026a6:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <BLACKBOX_NewFile+0x94>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
			  fileName[4] = 48 + r3;
 80026ac:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <BLACKBOX_NewFile+0x98>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	3330      	adds	r3, #48	@ 0x30
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	4b07      	ldr	r3, [pc, #28]	@ (80026d4 <BLACKBOX_NewFile+0x90>)
 80026b6:	711a      	strb	r2, [r3, #4]
			  fileName[3] = 48;
 80026b8:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <BLACKBOX_NewFile+0x90>)
 80026ba:	2230      	movs	r2, #48	@ 0x30
 80026bc:	70da      	strb	r2, [r3, #3]
		  }
	  }
	  f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80026be:	2213      	movs	r2, #19
 80026c0:	4904      	ldr	r1, [pc, #16]	@ (80026d4 <BLACKBOX_NewFile+0x90>)
 80026c2:	4802      	ldr	r0, [pc, #8]	@ (80026cc <BLACKBOX_NewFile+0x88>)
 80026c4:	f009 fa92 	bl	800bbec <f_open>
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	200005f0 	.word	0x200005f0
 80026d0:	2000083a 	.word	0x2000083a
 80026d4:	20000008 	.word	0x20000008
 80026d8:	2000083b 	.word	0x2000083b
 80026dc:	2000083c 	.word	0x2000083c

080026e0 <BLACKBOX_StoreData>:

void BLACKBOX_StoreData(void){
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e2:	b093      	sub	sp, #76	@ 0x4c
 80026e4:	af0c      	add	r7, sp, #48	@ 0x30
	static uint32_t N_MSG = 0;
	static uint16_t RstCont = 0;
	static uint8_t SaveChanges = 100;

	if(RstCont>=48000){
 80026e6:	4b3c      	ldr	r3, [pc, #240]	@ (80027d8 <BLACKBOX_StoreData+0xf8>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d904      	bls.n	80026fc <BLACKBOX_StoreData+0x1c>
		BLACKBOX_NewFile();
 80026f2:	f7ff ffa7 	bl	8002644 <BLACKBOX_NewFile>
		RstCont = 0;
 80026f6:	4b38      	ldr	r3, [pc, #224]	@ (80027d8 <BLACKBOX_StoreData+0xf8>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	801a      	strh	r2, [r3, #0]
	}

	if(SaveChanges == 100){
 80026fc:	4b37      	ldr	r3, [pc, #220]	@ (80027dc <BLACKBOX_StoreData+0xfc>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b64      	cmp	r3, #100	@ 0x64
 8002702:	d10a      	bne.n	800271a <BLACKBOX_StoreData+0x3a>
		f_close(&fil);
 8002704:	4836      	ldr	r0, [pc, #216]	@ (80027e0 <BLACKBOX_StoreData+0x100>)
 8002706:	f009 fe1e 	bl	800c346 <f_close>
		f_open(&fil, fileName, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800270a:	2213      	movs	r2, #19
 800270c:	4935      	ldr	r1, [pc, #212]	@ (80027e4 <BLACKBOX_StoreData+0x104>)
 800270e:	4834      	ldr	r0, [pc, #208]	@ (80027e0 <BLACKBOX_StoreData+0x100>)
 8002710:	f009 fa6c 	bl	800bbec <f_open>
		SaveChanges = 0;
 8002714:	4b31      	ldr	r3, [pc, #196]	@ (80027dc <BLACKBOX_StoreData+0xfc>)
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
	}
	Refresh_data();
 800271a:	f7ff fe6b 	bl	80023f4 <Refresh_data>
	f_lseek(&fil , f_size(&fil));
 800271e:	4b30      	ldr	r3, [pc, #192]	@ (80027e0 <BLACKBOX_StoreData+0x100>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	4619      	mov	r1, r3
 8002724:	482e      	ldr	r0, [pc, #184]	@ (80027e0 <BLACKBOX_StoreData+0x100>)
 8002726:	f009 fe82 	bl	800c42e <f_lseek>
	f_printf(&fil,"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",N_MSG,BLACKBOX.AccX,BLACKBOX.AccY,BLACKBOX.AccZ,BLACKBOX.GyroX,BLACKBOX.GyroY,BLACKBOX.GyroZ,BLACKBOX.AngX,BLACKBOX.AngY,BMP280.Barometric_Altitude\
 800272a:	4b2f      	ldr	r3, [pc, #188]	@ (80027e8 <BLACKBOX_StoreData+0x108>)
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	4b2f      	ldr	r3, [pc, #188]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002734:	469c      	mov	ip, r3
 8002736:	4b2d      	ldr	r3, [pc, #180]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002738:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800273c:	461c      	mov	r4, r3
 800273e:	4b2b      	ldr	r3, [pc, #172]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002740:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002744:	461d      	mov	r5, r3
 8002746:	4b29      	ldr	r3, [pc, #164]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002748:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800274c:	461e      	mov	r6, r3
 800274e:	4b27      	ldr	r3, [pc, #156]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002750:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	4b25      	ldr	r3, [pc, #148]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002758:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b23      	ldr	r3, [pc, #140]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002760:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b21      	ldr	r3, [pc, #132]	@ (80027ec <BLACKBOX_StoreData+0x10c>)
 8002768:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <BLACKBOX_StoreData+0x110>)
 8002770:	8a1b      	ldrh	r3, [r3, #16]
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	4b1e      	ldr	r3, [pc, #120]	@ (80027f0 <BLACKBOX_StoreData+0x110>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a1d      	ldr	r2, [pc, #116]	@ (80027f0 <BLACKBOX_StoreData+0x110>)
 800277a:	6852      	ldr	r2, [r2, #4]
 800277c:	481d      	ldr	r0, [pc, #116]	@ (80027f4 <BLACKBOX_StoreData+0x114>)
 800277e:	7800      	ldrb	r0, [r0, #0]
 8002780:	900a      	str	r0, [sp, #40]	@ 0x28
 8002782:	9209      	str	r2, [sp, #36]	@ 0x24
 8002784:	9308      	str	r3, [sp, #32]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	9207      	str	r2, [sp, #28]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	9206      	str	r2, [sp, #24]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	9205      	str	r2, [sp, #20]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	9204      	str	r2, [sp, #16]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	9303      	str	r3, [sp, #12]
 800279a:	9602      	str	r6, [sp, #8]
 800279c:	9501      	str	r5, [sp, #4]
 800279e:	9400      	str	r4, [sp, #0]
 80027a0:	4663      	mov	r3, ip
 80027a2:	460a      	mov	r2, r1
 80027a4:	4914      	ldr	r1, [pc, #80]	@ (80027f8 <BLACKBOX_StoreData+0x118>)
 80027a6:	480e      	ldr	r0, [pc, #56]	@ (80027e0 <BLACKBOX_StoreData+0x100>)
 80027a8:	f00a f9d6 	bl	800cb58 <f_printf>
			,BMP280.Pressure,BMP280.Temp, Parachute_Status);

	N_MSG++;
 80027ac:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <BLACKBOX_StoreData+0x108>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	4a0d      	ldr	r2, [pc, #52]	@ (80027e8 <BLACKBOX_StoreData+0x108>)
 80027b4:	6013      	str	r3, [r2, #0]
	SaveChanges++;
 80027b6:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <BLACKBOX_StoreData+0xfc>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	3301      	adds	r3, #1
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <BLACKBOX_StoreData+0xfc>)
 80027c0:	701a      	strb	r2, [r3, #0]
	RstCont++;
 80027c2:	4b05      	ldr	r3, [pc, #20]	@ (80027d8 <BLACKBOX_StoreData+0xf8>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <BLACKBOX_StoreData+0xf8>)
 80027cc:	801a      	strh	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d6:	bf00      	nop
 80027d8:	2000083e 	.word	0x2000083e
 80027dc:	20000012 	.word	0x20000012
 80027e0:	200005f0 	.word	0x200005f0
 80027e4:	20000008 	.word	0x20000008
 80027e8:	20000840 	.word	0x20000840
 80027ec:	20000824 	.word	0x20000824
 80027f0:	2000014c 	.word	0x2000014c
 80027f4:	20000869 	.word	0x20000869
 80027f8:	0800dc0c 	.word	0x0800dc0c

080027fc <get_ACC>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

void get_ACC(void){
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0


	if(!(SYSTEM_STATUS.peripheral_Flags & (MPU60501_ERRORMASK | MPU60502_ERRORMASK))){
 8002800:	4bb1      	ldr	r3, [pc, #708]	@ (8002ac8 <get_ACC+0x2cc>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b00      	cmp	r3, #0
 800280a:	f040 8102 	bne.w	8002a12 <get_ACC+0x216>
		MPU6050_Read_All(&hi2c1, &MPU6050.Module_1);
 800280e:	49af      	ldr	r1, [pc, #700]	@ (8002acc <get_ACC+0x2d0>)
 8002810:	48af      	ldr	r0, [pc, #700]	@ (8002ad0 <get_ACC+0x2d4>)
 8002812:	f7ff fce1 	bl	80021d8 <MPU6050_Read_All>
		MPU6050_Read_All(&hi2c2, &MPU6050.Module_2);
 8002816:	49af      	ldr	r1, [pc, #700]	@ (8002ad4 <get_ACC+0x2d8>)
 8002818:	48af      	ldr	r0, [pc, #700]	@ (8002ad8 <get_ACC+0x2dc>)
 800281a:	f7ff fcdd 	bl	80021d8 <MPU6050_Read_All>

		MPU6050_getPromModule(&MPU6050.Module_1);
 800281e:	48ab      	ldr	r0, [pc, #684]	@ (8002acc <get_ACC+0x2d0>)
 8002820:	f7ff f978 	bl	8001b14 <MPU6050_getPromModule>
		MPU6050_getPromModule(&MPU6050.Module_2);
 8002824:	48ab      	ldr	r0, [pc, #684]	@ (8002ad4 <get_ACC+0x2d8>)
 8002826:	f7ff f975 	bl	8001b14 <MPU6050_getPromModule>

		MPU6050.Data.Accel_X_RAW = (MPU6050.Module_1.Accel_X_RAW + MPU6050.Module_2.Accel_X_RAW)/2;
 800282a:	4ba8      	ldr	r3, [pc, #672]	@ (8002acc <get_ACC+0x2d0>)
 800282c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002830:	461a      	mov	r2, r3
 8002832:	4ba6      	ldr	r3, [pc, #664]	@ (8002acc <get_ACC+0x2d0>)
 8002834:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	@ 0xb0
 8002838:	4413      	add	r3, r2
 800283a:	0fda      	lsrs	r2, r3, #31
 800283c:	4413      	add	r3, r2
 800283e:	105b      	asrs	r3, r3, #1
 8002840:	b21a      	sxth	r2, r3
 8002842:	4ba2      	ldr	r3, [pc, #648]	@ (8002acc <get_ACC+0x2d0>)
 8002844:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
		MPU6050.Data.Accel_Y_RAW = (MPU6050.Module_1.Accel_Y_RAW + MPU6050.Module_2.Accel_Y_RAW)/2;
 8002848:	4ba0      	ldr	r3, [pc, #640]	@ (8002acc <get_ACC+0x2d0>)
 800284a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800284e:	461a      	mov	r2, r3
 8002850:	4b9e      	ldr	r3, [pc, #632]	@ (8002acc <get_ACC+0x2d0>)
 8002852:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	@ 0xb2
 8002856:	4413      	add	r3, r2
 8002858:	0fda      	lsrs	r2, r3, #31
 800285a:	4413      	add	r3, r2
 800285c:	105b      	asrs	r3, r3, #1
 800285e:	b21a      	sxth	r2, r3
 8002860:	4b9a      	ldr	r3, [pc, #616]	@ (8002acc <get_ACC+0x2d0>)
 8002862:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		MPU6050.Data.Accel_Z_RAW = (MPU6050.Module_1.Accel_Z_RAW + MPU6050.Module_2.Accel_Z_RAW)/2;
 8002866:	4b99      	ldr	r3, [pc, #612]	@ (8002acc <get_ACC+0x2d0>)
 8002868:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800286c:	461a      	mov	r2, r3
 800286e:	4b97      	ldr	r3, [pc, #604]	@ (8002acc <get_ACC+0x2d0>)
 8002870:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8002874:	4413      	add	r3, r2
 8002876:	0fda      	lsrs	r2, r3, #31
 8002878:	4413      	add	r3, r2
 800287a:	105b      	asrs	r3, r3, #1
 800287c:	b21a      	sxth	r2, r3
 800287e:	4b93      	ldr	r3, [pc, #588]	@ (8002acc <get_ACC+0x2d0>)
 8002880:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

		MPU6050.Data.Gyro_X_RAW  = (MPU6050.Module_1.Gyro_X_RAW + MPU6050.Module_2.Gyro_X_RAW)/2;
 8002884:	4b91      	ldr	r3, [pc, #580]	@ (8002acc <get_ACC+0x2d0>)
 8002886:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800288a:	461a      	mov	r2, r3
 800288c:	4b8f      	ldr	r3, [pc, #572]	@ (8002acc <get_ACC+0x2d0>)
 800288e:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 8002892:	4413      	add	r3, r2
 8002894:	0fda      	lsrs	r2, r3, #31
 8002896:	4413      	add	r3, r2
 8002898:	105b      	asrs	r3, r3, #1
 800289a:	b21a      	sxth	r2, r3
 800289c:	4b8b      	ldr	r3, [pc, #556]	@ (8002acc <get_ACC+0x2d0>)
 800289e:	f8a3 2180 	strh.w	r2, [r3, #384]	@ 0x180
		MPU6050.Data.Gyro_Y_RAW  = (MPU6050.Module_1.Gyro_Y_RAW + MPU6050.Module_2.Gyro_Y_RAW)/2;
 80028a2:	4b8a      	ldr	r3, [pc, #552]	@ (8002acc <get_ACC+0x2d0>)
 80028a4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80028a8:	461a      	mov	r2, r3
 80028aa:	4b88      	ldr	r3, [pc, #544]	@ (8002acc <get_ACC+0x2d0>)
 80028ac:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	@ 0xd2
 80028b0:	4413      	add	r3, r2
 80028b2:	0fda      	lsrs	r2, r3, #31
 80028b4:	4413      	add	r3, r2
 80028b6:	105b      	asrs	r3, r3, #1
 80028b8:	b21a      	sxth	r2, r3
 80028ba:	4b84      	ldr	r3, [pc, #528]	@ (8002acc <get_ACC+0x2d0>)
 80028bc:	f8a3 2182 	strh.w	r2, [r3, #386]	@ 0x182
		MPU6050.Data.Gyro_Z_RAW  = (MPU6050.Module_1.Gyro_Z_RAW + MPU6050.Module_2.Gyro_Z_RAW)/2;
 80028c0:	4b82      	ldr	r3, [pc, #520]	@ (8002acc <get_ACC+0x2d0>)
 80028c2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80028c6:	461a      	mov	r2, r3
 80028c8:	4b80      	ldr	r3, [pc, #512]	@ (8002acc <get_ACC+0x2d0>)
 80028ca:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	@ 0xd4
 80028ce:	4413      	add	r3, r2
 80028d0:	0fda      	lsrs	r2, r3, #31
 80028d2:	4413      	add	r3, r2
 80028d4:	105b      	asrs	r3, r3, #1
 80028d6:	b21a      	sxth	r2, r3
 80028d8:	4b7c      	ldr	r3, [pc, #496]	@ (8002acc <get_ACC+0x2d0>)
 80028da:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

		MPU6050.Data.Ax			 = (MPU6050.Module_1.Ax + MPU6050.Module_2.Ax)/2;
 80028de:	4b7b      	ldr	r3, [pc, #492]	@ (8002acc <get_ACC+0x2d0>)
 80028e0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80028e4:	4b79      	ldr	r3, [pc, #484]	@ (8002acc <get_ACC+0x2d0>)
 80028e6:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 80028ea:	f7fd fc7b 	bl	80001e4 <__adddf3>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4610      	mov	r0, r2
 80028f4:	4619      	mov	r1, r3
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80028fe:	f7fd ff51 	bl	80007a4 <__aeabi_ddiv>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	4971      	ldr	r1, [pc, #452]	@ (8002acc <get_ACC+0x2d0>)
 8002908:	e9c1 235a 	strd	r2, r3, [r1, #360]	@ 0x168
		MPU6050.Data.Ay			 = (MPU6050.Module_1.Ay + MPU6050.Module_2.Ay)/2;
 800290c:	4b6f      	ldr	r3, [pc, #444]	@ (8002acc <get_ACC+0x2d0>)
 800290e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002912:	4b6e      	ldr	r3, [pc, #440]	@ (8002acc <get_ACC+0x2d0>)
 8002914:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8002918:	f7fd fc64 	bl	80001e4 <__adddf3>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4610      	mov	r0, r2
 8002922:	4619      	mov	r1, r3
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800292c:	f7fd ff3a 	bl	80007a4 <__aeabi_ddiv>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4965      	ldr	r1, [pc, #404]	@ (8002acc <get_ACC+0x2d0>)
 8002936:	e9c1 235c 	strd	r2, r3, [r1, #368]	@ 0x170
		MPU6050.Data.Az			 = (MPU6050.Module_1.Az + MPU6050.Module_2.Az)/2;
 800293a:	4b64      	ldr	r3, [pc, #400]	@ (8002acc <get_ACC+0x2d0>)
 800293c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002940:	4b62      	ldr	r3, [pc, #392]	@ (8002acc <get_ACC+0x2d0>)
 8002942:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8002946:	f7fd fc4d 	bl	80001e4 <__adddf3>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800295a:	f7fd ff23 	bl	80007a4 <__aeabi_ddiv>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	495a      	ldr	r1, [pc, #360]	@ (8002acc <get_ACC+0x2d0>)
 8002964:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178

		MPU6050.Data.Gx			 = (MPU6050.Module_1.Gx + MPU6050.Module_2.Gx)/2;
 8002968:	4b58      	ldr	r3, [pc, #352]	@ (8002acc <get_ACC+0x2d0>)
 800296a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800296e:	4b57      	ldr	r3, [pc, #348]	@ (8002acc <get_ACC+0x2d0>)
 8002970:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	@ 0xd8
 8002974:	f7fd fc36 	bl	80001e4 <__adddf3>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002988:	f7fd ff0c 	bl	80007a4 <__aeabi_ddiv>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	494e      	ldr	r1, [pc, #312]	@ (8002acc <get_ACC+0x2d0>)
 8002992:	e9c1 2362 	strd	r2, r3, [r1, #392]	@ 0x188
		MPU6050.Data.Gy			 = (MPU6050.Module_1.Gy + MPU6050.Module_2.Gy)/2;
 8002996:	4b4d      	ldr	r3, [pc, #308]	@ (8002acc <get_ACC+0x2d0>)
 8002998:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800299c:	4b4b      	ldr	r3, [pc, #300]	@ (8002acc <get_ACC+0x2d0>)
 800299e:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 80029a2:	f7fd fc1f 	bl	80001e4 <__adddf3>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80029b6:	f7fd fef5 	bl	80007a4 <__aeabi_ddiv>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4943      	ldr	r1, [pc, #268]	@ (8002acc <get_ACC+0x2d0>)
 80029c0:	e9c1 2364 	strd	r2, r3, [r1, #400]	@ 0x190
		MPU6050.Data.Gz			 = (MPU6050.Module_1.Gz + MPU6050.Module_2.Gz)/2;
 80029c4:	4b41      	ldr	r3, [pc, #260]	@ (8002acc <get_ACC+0x2d0>)
 80029c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80029ca:	4b40      	ldr	r3, [pc, #256]	@ (8002acc <get_ACC+0x2d0>)
 80029cc:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 80029d0:	f7fd fc08 	bl	80001e4 <__adddf3>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80029e4:	f7fd fede 	bl	80007a4 <__aeabi_ddiv>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4937      	ldr	r1, [pc, #220]	@ (8002acc <get_ACC+0x2d0>)
 80029ee:	e9c1 2366 	strd	r2, r3, [r1, #408]	@ 0x198

		MPU6050.Data.Temperature = (MPU6050.Module_1.Temperature + MPU6050.Module_2.Temperature)/2;
 80029f2:	4b36      	ldr	r3, [pc, #216]	@ (8002acc <get_ACC+0x2d0>)
 80029f4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80029f8:	4b34      	ldr	r3, [pc, #208]	@ (8002acc <get_ACC+0x2d0>)
 80029fa:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 80029fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a02:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a0a:	4b30      	ldr	r3, [pc, #192]	@ (8002acc <get_ACC+0x2d0>)
 8002a0c:	edc3 7a68 	vstr	s15, [r3, #416]	@ 0x1a0
 8002a10:	e0bf      	b.n	8002b92 <get_ACC+0x396>
	}
	else if(!(SYSTEM_STATUS.peripheral_Flags & MPU60501_ERRORMASK)){
 8002a12:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac8 <get_ACC+0x2cc>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d15e      	bne.n	8002adc <get_ACC+0x2e0>
		MPU6050_Read_All(&hi2c1, &MPU6050.Module_1);
 8002a1e:	492b      	ldr	r1, [pc, #172]	@ (8002acc <get_ACC+0x2d0>)
 8002a20:	482b      	ldr	r0, [pc, #172]	@ (8002ad0 <get_ACC+0x2d4>)
 8002a22:	f7ff fbd9 	bl	80021d8 <MPU6050_Read_All>
		MPU6050_getPromModule(&MPU6050.Module_1);
 8002a26:	4829      	ldr	r0, [pc, #164]	@ (8002acc <get_ACC+0x2d0>)
 8002a28:	f7ff f874 	bl	8001b14 <MPU6050_getPromModule>

		MPU6050.Data.Accel_X_RAW = MPU6050.Module_1.Accel_X_RAW;
 8002a2c:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <get_ACC+0x2d0>)
 8002a2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a32:	4b26      	ldr	r3, [pc, #152]	@ (8002acc <get_ACC+0x2d0>)
 8002a34:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
		MPU6050.Data.Accel_Y_RAW = MPU6050.Module_1.Accel_Y_RAW;
 8002a38:	4b24      	ldr	r3, [pc, #144]	@ (8002acc <get_ACC+0x2d0>)
 8002a3a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002a3e:	4b23      	ldr	r3, [pc, #140]	@ (8002acc <get_ACC+0x2d0>)
 8002a40:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		MPU6050.Data.Accel_Z_RAW = MPU6050.Module_1.Accel_Z_RAW;
 8002a44:	4b21      	ldr	r3, [pc, #132]	@ (8002acc <get_ACC+0x2d0>)
 8002a46:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002a4a:	4b20      	ldr	r3, [pc, #128]	@ (8002acc <get_ACC+0x2d0>)
 8002a4c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

		MPU6050.Data.Gyro_X_RAW  = MPU6050.Module_1.Gyro_X_RAW;
 8002a50:	4b1e      	ldr	r3, [pc, #120]	@ (8002acc <get_ACC+0x2d0>)
 8002a52:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002a56:	4b1d      	ldr	r3, [pc, #116]	@ (8002acc <get_ACC+0x2d0>)
 8002a58:	f8a3 2180 	strh.w	r2, [r3, #384]	@ 0x180
		MPU6050.Data.Gyro_Y_RAW  = MPU6050.Module_1.Gyro_Y_RAW;
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002acc <get_ACC+0x2d0>)
 8002a5e:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8002a62:	4b1a      	ldr	r3, [pc, #104]	@ (8002acc <get_ACC+0x2d0>)
 8002a64:	f8a3 2182 	strh.w	r2, [r3, #386]	@ 0x182
		MPU6050.Data.Gyro_Z_RAW  = MPU6050.Module_1.Gyro_Z_RAW;
 8002a68:	4b18      	ldr	r3, [pc, #96]	@ (8002acc <get_ACC+0x2d0>)
 8002a6a:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 8002a6e:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <get_ACC+0x2d0>)
 8002a70:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

		MPU6050.Data.Ax			 = MPU6050.Module_1.Ax;
 8002a74:	4b15      	ldr	r3, [pc, #84]	@ (8002acc <get_ACC+0x2d0>)
 8002a76:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a7a:	4914      	ldr	r1, [pc, #80]	@ (8002acc <get_ACC+0x2d0>)
 8002a7c:	e9c1 235a 	strd	r2, r3, [r1, #360]	@ 0x168
		MPU6050.Data.Ay			 = MPU6050.Module_1.Ay;
 8002a80:	4b12      	ldr	r3, [pc, #72]	@ (8002acc <get_ACC+0x2d0>)
 8002a82:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a86:	4911      	ldr	r1, [pc, #68]	@ (8002acc <get_ACC+0x2d0>)
 8002a88:	e9c1 235c 	strd	r2, r3, [r1, #368]	@ 0x170
		MPU6050.Data.Az			 = MPU6050.Module_1.Az;
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <get_ACC+0x2d0>)
 8002a8e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a92:	490e      	ldr	r1, [pc, #56]	@ (8002acc <get_ACC+0x2d0>)
 8002a94:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178

		MPU6050.Data.Gx			 = MPU6050.Module_1.Gx;
 8002a98:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <get_ACC+0x2d0>)
 8002a9a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002a9e:	490b      	ldr	r1, [pc, #44]	@ (8002acc <get_ACC+0x2d0>)
 8002aa0:	e9c1 2362 	strd	r2, r3, [r1, #392]	@ 0x188
		MPU6050.Data.Gy			 = MPU6050.Module_1.Gy;
 8002aa4:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <get_ACC+0x2d0>)
 8002aa6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002aaa:	4908      	ldr	r1, [pc, #32]	@ (8002acc <get_ACC+0x2d0>)
 8002aac:	e9c1 2364 	strd	r2, r3, [r1, #400]	@ 0x190
		MPU6050.Data.Gz			 = MPU6050.Module_1.Gz;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <get_ACC+0x2d0>)
 8002ab2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002ab6:	4905      	ldr	r1, [pc, #20]	@ (8002acc <get_ACC+0x2d0>)
 8002ab8:	e9c1 2366 	strd	r2, r3, [r1, #408]	@ 0x198

		MPU6050.Data.Temperature = MPU6050.Module_1.Temperature;
 8002abc:	4b03      	ldr	r3, [pc, #12]	@ (8002acc <get_ACC+0x2d0>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	4a02      	ldr	r2, [pc, #8]	@ (8002acc <get_ACC+0x2d0>)
 8002ac2:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
 8002ac6:	e064      	b.n	8002b92 <get_ACC+0x396>
 8002ac8:	20000868 	.word	0x20000868
 8002acc:	20000198 	.word	0x20000198
 8002ad0:	200008b8 	.word	0x200008b8
 8002ad4:	20000248 	.word	0x20000248
 8002ad8:	2000090c 	.word	0x2000090c
	}
	else if(!(SYSTEM_STATUS.peripheral_Flags & MPU60502_ERRORMASK)){
 8002adc:	4b2f      	ldr	r3, [pc, #188]	@ (8002b9c <get_ACC+0x3a0>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d154      	bne.n	8002b92 <get_ACC+0x396>
		MPU6050_Read_All(&hi2c2, &MPU6050.Module_2);
 8002ae8:	492d      	ldr	r1, [pc, #180]	@ (8002ba0 <get_ACC+0x3a4>)
 8002aea:	482e      	ldr	r0, [pc, #184]	@ (8002ba4 <get_ACC+0x3a8>)
 8002aec:	f7ff fb74 	bl	80021d8 <MPU6050_Read_All>
		MPU6050_getPromModule(&MPU6050.Module_2);
 8002af0:	482b      	ldr	r0, [pc, #172]	@ (8002ba0 <get_ACC+0x3a4>)
 8002af2:	f7ff f80f 	bl	8001b14 <MPU6050_getPromModule>

		MPU6050.Data.Accel_X_RAW = MPU6050.Module_2.Accel_X_RAW;
 8002af6:	4b2c      	ldr	r3, [pc, #176]	@ (8002ba8 <get_ACC+0x3ac>)
 8002af8:	f9b3 20b0 	ldrsh.w	r2, [r3, #176]	@ 0xb0
 8002afc:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba8 <get_ACC+0x3ac>)
 8002afe:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
		MPU6050.Data.Accel_Y_RAW = MPU6050.Module_2.Accel_Y_RAW;
 8002b02:	4b29      	ldr	r3, [pc, #164]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b04:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	@ 0xb2
 8002b08:	4b27      	ldr	r3, [pc, #156]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b0a:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		MPU6050.Data.Accel_Z_RAW = MPU6050.Module_2.Accel_Z_RAW;
 8002b0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b10:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	@ 0xb4
 8002b14:	4b24      	ldr	r3, [pc, #144]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b16:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

		MPU6050.Data.Gyro_X_RAW  = MPU6050.Module_2.Gyro_X_RAW;
 8002b1a:	4b23      	ldr	r3, [pc, #140]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b1c:	f9b3 20d0 	ldrsh.w	r2, [r3, #208]	@ 0xd0
 8002b20:	4b21      	ldr	r3, [pc, #132]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b22:	f8a3 2180 	strh.w	r2, [r3, #384]	@ 0x180
		MPU6050.Data.Gyro_Y_RAW  = MPU6050.Module_2.Gyro_Y_RAW;
 8002b26:	4b20      	ldr	r3, [pc, #128]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b28:	f9b3 20d2 	ldrsh.w	r2, [r3, #210]	@ 0xd2
 8002b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b2e:	f8a3 2182 	strh.w	r2, [r3, #386]	@ 0x182
		MPU6050.Data.Gyro_Z_RAW  = MPU6050.Module_2.Gyro_Z_RAW;
 8002b32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b34:	f9b3 20d4 	ldrsh.w	r2, [r3, #212]	@ 0xd4
 8002b38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b3a:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

		MPU6050.Data.Ax			 = MPU6050.Module_2.Ax;
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b40:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8002b44:	4918      	ldr	r1, [pc, #96]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b46:	e9c1 235a 	strd	r2, r3, [r1, #360]	@ 0x168
		MPU6050.Data.Ay			 = MPU6050.Module_2.Ay;
 8002b4a:	4b17      	ldr	r3, [pc, #92]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b4c:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8002b50:	4915      	ldr	r1, [pc, #84]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b52:	e9c1 235c 	strd	r2, r3, [r1, #368]	@ 0x170
		MPU6050.Data.Az			 = MPU6050.Module_2.Az;
 8002b56:	4b14      	ldr	r3, [pc, #80]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b58:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8002b5c:	4912      	ldr	r1, [pc, #72]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b5e:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178

		MPU6050.Data.Gx			 = MPU6050.Module_2.Gx;
 8002b62:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b64:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	@ 0xd8
 8002b68:	490f      	ldr	r1, [pc, #60]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b6a:	e9c1 2362 	strd	r2, r3, [r1, #392]	@ 0x188
		MPU6050.Data.Gy			 = MPU6050.Module_2.Gy;
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b70:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8002b74:	490c      	ldr	r1, [pc, #48]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b76:	e9c1 2364 	strd	r2, r3, [r1, #400]	@ 0x190
		MPU6050.Data.Gz			 = MPU6050.Module_2.Gz;
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b7c:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 8002b80:	4909      	ldr	r1, [pc, #36]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b82:	e9c1 2366 	strd	r2, r3, [r1, #408]	@ 0x198

		MPU6050.Data.Temperature = MPU6050.Module_2.Temperature;
 8002b86:	4b08      	ldr	r3, [pc, #32]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b8c:	4a06      	ldr	r2, [pc, #24]	@ (8002ba8 <get_ACC+0x3ac>)
 8002b8e:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
	}
	MPU6050_getPromModule(&MPU6050.Data);
 8002b92:	4806      	ldr	r0, [pc, #24]	@ (8002bac <get_ACC+0x3b0>)
 8002b94:	f7fe ffbe 	bl	8001b14 <MPU6050_getPromModule>
}
 8002b98:	bf00      	nop
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000868 	.word	0x20000868
 8002ba0:	20000248 	.word	0x20000248
 8002ba4:	2000090c 	.word	0x2000090c
 8002ba8:	20000198 	.word	0x20000198
 8002bac:	200002f8 	.word	0x200002f8

08002bb0 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b096      	sub	sp, #88	@ 0x58
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	61f8      	str	r0, [r7, #28]
 8002bb8:	ed87 0b04 	vstr	d0, [r7, #16]
 8002bbc:	ed87 1b02 	vstr	d1, [r7, #8]
 8002bc0:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002bca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bce:	f7fd fb07 	bl	80001e0 <__aeabi_dsub>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002be0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002be8:	f7fd fcb2 	bl	8000550 <__aeabi_dmul>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	f7fd faf6 	bl	80001e4 <__adddf3>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	69f9      	ldr	r1, [r7, #28]
 8002bfe:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c12:	f7fd fc9d 	bl	8000550 <__aeabi_dmul>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002c24:	f7fd fadc 	bl	80001e0 <__aeabi_dsub>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002c36:	f7fd fad3 	bl	80001e0 <__aeabi_dsub>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4610      	mov	r0, r2
 8002c40:	4619      	mov	r1, r3
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c48:	f7fd facc 	bl	80001e4 <__adddf3>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c58:	f7fd fc7a 	bl	8000550 <__aeabi_dmul>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4620      	mov	r0, r4
 8002c62:	4629      	mov	r1, r5
 8002c64:	f7fd fabe 	bl	80001e4 <__adddf3>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	69f9      	ldr	r1, [r7, #28]
 8002c6e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c82:	f7fd fc65 	bl	8000550 <__aeabi_dmul>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	f7fd faa7 	bl	80001e0 <__aeabi_dsub>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	69f9      	ldr	r1, [r7, #28]
 8002c98:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cac:	f7fd fc50 	bl	8000550 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	f7fd fa92 	bl	80001e0 <__aeabi_dsub>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	69f9      	ldr	r1, [r7, #28]
 8002cc2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cd6:	f7fd fc3b 	bl	8000550 <__aeabi_dmul>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4620      	mov	r0, r4
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	f7fd fa7f 	bl	80001e4 <__adddf3>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	69f9      	ldr	r1, [r7, #28]
 8002cec:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cfc:	f7fd fa72 	bl	80001e4 <__adddf3>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002d0e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d12:	f7fd fd47 	bl	80007a4 <__aeabi_ddiv>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002d24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d28:	f7fd fd3c 	bl	80007a4 <__aeabi_ddiv>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d3e:	f7fd fa4f 	bl	80001e0 <__aeabi_dsub>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002d50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d58:	f7fd fbfa 	bl	8000550 <__aeabi_dmul>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4620      	mov	r0, r4
 8002d62:	4629      	mov	r1, r5
 8002d64:	f7fd fa3e 	bl	80001e4 <__adddf3>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	69f9      	ldr	r1, [r7, #28]
 8002d6e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002d78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d80:	f7fd fbe6 	bl	8000550 <__aeabi_dmul>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4620      	mov	r0, r4
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	f7fd fa2a 	bl	80001e4 <__adddf3>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	69f9      	ldr	r1, [r7, #28]
 8002d96:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002da0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002daa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8002db4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002dbc:	f7fd fbc8 	bl	8000550 <__aeabi_dmul>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	f7fd fa0a 	bl	80001e0 <__aeabi_dsub>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	69f9      	ldr	r1, [r7, #28]
 8002dd2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002ddc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002de0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002de4:	f7fd fbb4 	bl	8000550 <__aeabi_dmul>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4620      	mov	r0, r4
 8002dee:	4629      	mov	r1, r5
 8002df0:	f7fd f9f6 	bl	80001e0 <__aeabi_dsub>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	69f9      	ldr	r1, [r7, #28]
 8002dfa:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002e04:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e0c:	f7fd fba0 	bl	8000550 <__aeabi_dmul>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4620      	mov	r0, r4
 8002e16:	4629      	mov	r1, r5
 8002e18:	f7fd f9e2 	bl	80001e0 <__aeabi_dsub>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	69f9      	ldr	r1, [r7, #28]
 8002e22:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002e2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e34:	f7fd fb8c 	bl	8000550 <__aeabi_dmul>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f7fd f9ce 	bl	80001e0 <__aeabi_dsub>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	69f9      	ldr	r1, [r7, #28]
 8002e4a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e54:	ec43 2b17 	vmov	d7, r2, r3
};
 8002e58:	eeb0 0a47 	vmov.f32	s0, s14
 8002e5c:	eef0 0a67 	vmov.f32	s1, s15
 8002e60:	3758      	adds	r7, #88	@ 0x58
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002e68 <get_ATTS>:

void get_ATTS(MPU6050_modules_t *DataStruct){
 8002e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e6c:	b08a      	sub	sp, #40	@ 0x28
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002e72:	f001 ff53 	bl	8004d1c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	4b83      	ldr	r3, [pc, #524]	@ (8003088 <get_ATTS+0x220>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd faec 	bl	800045c <__aeabi_ui2d>
 8002e84:	f04f 0200 	mov.w	r2, #0
 8002e88:	4b80      	ldr	r3, [pc, #512]	@ (800308c <get_ATTS+0x224>)
 8002e8a:	f7fd fc8b 	bl	80007a4 <__aeabi_ddiv>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	e9c7 2306 	strd	r2, r3, [r7, #24]
    timer = HAL_GetTick();
 8002e96:	f001 ff41 	bl	8004d1c <HAL_GetTick>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4a7a      	ldr	r2, [pc, #488]	@ (8003088 <get_ATTS+0x220>)
 8002e9e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Data.Prom.Accel_X_RAW * DataStruct->Data.Prom.Accel_X_RAW + DataStruct->Data.Prom.Accel_Z_RAW * DataStruct->Data.Prom.Accel_Z_RAW);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	@ 0x1f4
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	@ 0x1f4
 8002eae:	fb03 f202 	mul.w	r2, r3, r2
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	@ 0x1f8
 8002eb8:	4619      	mov	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	@ 0x1f8
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fad8 	bl	800047c <__aeabi_i2d>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	ec43 2b10 	vmov	d0, r2, r3
 8002ed4:	f00a f92e 	bl	800d134 <sqrt>
 8002ed8:	ed87 0b04 	vstr	d0, [r7, #16]
    if (roll_sqrt != 0.0) {
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ee8:	f7fd fd9a 	bl	8000a20 <__aeabi_dcmpeq>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d11f      	bne.n	8002f32 <get_ATTS+0xca>
        roll = atan(DataStruct->Data.Prom.Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	@ 0x1f6
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fabf 	bl	800047c <__aeabi_i2d>
 8002efe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f02:	f7fd fc4f 	bl	80007a4 <__aeabi_ddiv>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	ec43 2b17 	vmov	d7, r2, r3
 8002f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f12:	eef0 0a67 	vmov.f32	s1, s15
 8002f16:	f00a f93b 	bl	800d190 <atan>
 8002f1a:	ec51 0b10 	vmov	r0, r1, d0
 8002f1e:	a358      	add	r3, pc, #352	@ (adr r3, 8003080 <get_ATTS+0x218>)
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f7fd fb14 	bl	8000550 <__aeabi_dmul>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002f30:	e005      	b.n	8002f3e <get_ATTS+0xd6>
    } else {
        roll = 0.0;
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
    double pitch = atan2(-DataStruct->Data.Prom.Accel_X_RAW, DataStruct->Data.Prom.Accel_Z_RAW) * RAD_TO_DEG;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	@ 0x1f4
 8002f44:	425b      	negs	r3, r3
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fa98 	bl	800047c <__aeabi_i2d>
 8002f4c:	4682      	mov	sl, r0
 8002f4e:	468b      	mov	fp, r1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	@ 0x1f8
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd fa90 	bl	800047c <__aeabi_i2d>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	ec43 2b11 	vmov	d1, r2, r3
 8002f64:	ec4b ab10 	vmov	d0, sl, fp
 8002f68:	f00a f8a2 	bl	800d0b0 <atan2>
 8002f6c:	ec51 0b10 	vmov	r0, r1, d0
 8002f70:	a343      	add	r3, pc, #268	@ (adr r3, 8003080 <get_ATTS+0x218>)
 8002f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f76:	f7fd faeb 	bl	8000550 <__aeabi_dmul>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	4b42      	ldr	r3, [pc, #264]	@ (8003090 <get_ATTS+0x228>)
 8002f88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f8c:	f7fd fd52 	bl	8000a34 <__aeabi_dcmplt>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <get_ATTS+0x144>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	@ 0x218
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	4b3c      	ldr	r3, [pc, #240]	@ (8003094 <get_ATTS+0x22c>)
 8002fa2:	f7fd fd65 	bl	8000a70 <__aeabi_dcmpgt>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d114      	bne.n	8002fd6 <get_ATTS+0x16e>
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	4b38      	ldr	r3, [pc, #224]	@ (8003094 <get_ATTS+0x22c>)
 8002fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fb6:	f7fd fd5b 	bl	8000a70 <__aeabi_dcmpgt>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d015      	beq.n	8002fec <get_ATTS+0x184>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	@ 0x218
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	4b31      	ldr	r3, [pc, #196]	@ (8003090 <get_ATTS+0x228>)
 8002fcc:	f7fd fd32 	bl	8000a34 <__aeabi_dcmplt>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <get_ATTS+0x184>
        KalmanY.angle = pitch;
 8002fd6:	4930      	ldr	r1, [pc, #192]	@ (8003098 <get_ATTS+0x230>)
 8002fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fdc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe6:	e9c1 2386 	strd	r2, r3, [r1, #536]	@ 0x218
 8002fea:	e014      	b.n	8003016 <get_ATTS+0x1ae>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Data.Gy, dt);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	ed93 7b64 	vldr	d7, [r3, #400]	@ 0x190
 8002ff2:	ed97 2b06 	vldr	d2, [r7, #24]
 8002ff6:	eeb0 1a47 	vmov.f32	s2, s14
 8002ffa:	eef0 1a67 	vmov.f32	s3, s15
 8002ffe:	ed97 0b02 	vldr	d0, [r7, #8]
 8003002:	4825      	ldr	r0, [pc, #148]	@ (8003098 <get_ATTS+0x230>)
 8003004:	f7ff fdd4 	bl	8002bb0 <Kalman_getAngle>
 8003008:	eeb0 7a40 	vmov.f32	s14, s0
 800300c:	eef0 7a60 	vmov.f32	s15, s1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	ed83 7b86 	vstr	d7, [r3, #536]	@ 0x218
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	@ 0x218
 800301c:	4690      	mov	r8, r2
 800301e:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	4b1b      	ldr	r3, [pc, #108]	@ (8003094 <get_ATTS+0x22c>)
 8003028:	4640      	mov	r0, r8
 800302a:	4649      	mov	r1, r9
 800302c:	f7fd fd20 	bl	8000a70 <__aeabi_dcmpgt>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <get_ATTS+0x1e0>
        DataStruct->Data.Gx = -DataStruct->Data.Gx;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	@ 0x188
 800303c:	4614      	mov	r4, r2
 800303e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	e9c3 4562 	strd	r4, r5, [r3, #392]	@ 0x188
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Data.Gy, dt);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	ed93 7b64 	vldr	d7, [r3, #400]	@ 0x190
 800304e:	ed97 2b06 	vldr	d2, [r7, #24]
 8003052:	eeb0 1a47 	vmov.f32	s2, s14
 8003056:	eef0 1a67 	vmov.f32	s3, s15
 800305a:	ed97 0b08 	vldr	d0, [r7, #32]
 800305e:	480f      	ldr	r0, [pc, #60]	@ (800309c <get_ATTS+0x234>)
 8003060:	f7ff fda6 	bl	8002bb0 <Kalman_getAngle>
 8003064:	eeb0 7a40 	vmov.f32	s14, s0
 8003068:	eef0 7a60 	vmov.f32	s15, s1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	ed83 7b84 	vstr	d7, [r3, #528]	@ 0x210

}
 8003072:	bf00      	nop
 8003074:	3728      	adds	r7, #40	@ 0x28
 8003076:	46bd      	mov	sp, r7
 8003078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800307c:	f3af 8000 	nop.w
 8003080:	1a63c1f8 	.word	0x1a63c1f8
 8003084:	404ca5dc 	.word	0x404ca5dc
 8003088:	20000844 	.word	0x20000844
 800308c:	408f4000 	.word	0x408f4000
 8003090:	c0568000 	.word	0xc0568000
 8003094:	40568000 	.word	0x40568000
 8003098:	20000060 	.word	0x20000060
 800309c:	20000018 	.word	0x20000018

080030a0 <MEMORY_init>:

#include "Modules/Status/memory.h"

MEMORY_u MEMORY;

void MEMORY_init(void){
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
	Flash_Read(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 80030a4:	2208      	movs	r2, #8
 80030a6:	4908      	ldr	r1, [pc, #32]	@ (80030c8 <MEMORY_init+0x28>)
 80030a8:	4808      	ldr	r0, [pc, #32]	@ (80030cc <MEMORY_init+0x2c>)
 80030aa:	f7fe fd15 	bl	8001ad8 <Flash_Read>
	MEMORY.str.STATUS.Reset_Number++;
 80030ae:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <MEMORY_init+0x28>)
 80030b0:	7f1b      	ldrb	r3, [r3, #28]
 80030b2:	3301      	adds	r3, #1
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4b04      	ldr	r3, [pc, #16]	@ (80030c8 <MEMORY_init+0x28>)
 80030b8:	771a      	strb	r2, [r3, #28]
	Flash_Write(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 80030ba:	2208      	movs	r2, #8
 80030bc:	4902      	ldr	r1, [pc, #8]	@ (80030c8 <MEMORY_init+0x28>)
 80030be:	4803      	ldr	r0, [pc, #12]	@ (80030cc <MEMORY_init+0x2c>)
 80030c0:	f7fe fcb2 	bl	8001a28 <Flash_Write>
}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20000848 	.word	0x20000848
 80030cc:	08020000 	.word	0x08020000

080030d0 <MEMORY_write>:


void MEMORY_write(void){
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
	Flash_Write(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 80030d4:	2208      	movs	r2, #8
 80030d6:	4903      	ldr	r1, [pc, #12]	@ (80030e4 <MEMORY_write+0x14>)
 80030d8:	4803      	ldr	r0, [pc, #12]	@ (80030e8 <MEMORY_write+0x18>)
 80030da:	f7fe fca5 	bl	8001a28 <Flash_Write>
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000848 	.word	0x20000848
 80030e8:	08020000 	.word	0x08020000

080030ec <get_STATUS>:

#include "Modules/Status/status.h"

status_t SYSTEM_STATUS;

void get_STATUS(void){
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
	SYSTEM_STATUS.peripheral_Flags = MPU6050_status();
 80030f0:	f7fe feba 	bl	8001e68 <MPU6050_status>
 80030f4:	4603      	mov	r3, r0
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b01      	ldr	r3, [pc, #4]	@ (8003100 <get_STATUS+0x14>)
 80030fa:	701a      	strb	r2, [r3, #0]
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000868 	.word	0x20000868

08003104 <DeployParachute>:

uint8_t Parachute_Status = 0x00;



void DeployParachute(void){
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
	Parachute_Status = 0x00;
 8003108:	4b2c      	ldr	r3, [pc, #176]	@ (80031bc <DeployParachute+0xb8>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]

	if(((abs((int)MPU6050.KalmanAngleX)) > 70 || (abs((int)MPU6050.KalmanAngleY)) > 70)){
 800310e:	4b2c      	ldr	r3, [pc, #176]	@ (80031c0 <DeployParachute+0xbc>)
 8003110:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	@ 0x210
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	f7fd fcca 	bl	8000ab0 <__aeabi_d2iz>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	bfb8      	it	lt
 8003122:	425b      	neglt	r3, r3
 8003124:	2b46      	cmp	r3, #70	@ 0x46
 8003126:	dc0c      	bgt.n	8003142 <DeployParachute+0x3e>
 8003128:	4b25      	ldr	r3, [pc, #148]	@ (80031c0 <DeployParachute+0xbc>)
 800312a:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	@ 0x218
 800312e:	4610      	mov	r0, r2
 8003130:	4619      	mov	r1, r3
 8003132:	f7fd fcbd 	bl	8000ab0 <__aeabi_d2iz>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	bfb8      	it	lt
 800313c:	425b      	neglt	r3, r3
 800313e:	2b46      	cmp	r3, #70	@ 0x46
 8003140:	dd0d      	ble.n	800315e <DeployParachute+0x5a>
		Parachute_Status |= Desplegar;
 8003142:	4b1e      	ldr	r3, [pc, #120]	@ (80031bc <DeployParachute+0xb8>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	f043 0310 	orr.w	r3, r3, #16
 800314a:	b2da      	uxtb	r2, r3
 800314c:	4b1b      	ldr	r3, [pc, #108]	@ (80031bc <DeployParachute+0xb8>)
 800314e:	701a      	strb	r2, [r3, #0]
		Parachute_Status |= Desp_Ang;
 8003150:	4b1a      	ldr	r3, [pc, #104]	@ (80031bc <DeployParachute+0xb8>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4b18      	ldr	r3, [pc, #96]	@ (80031bc <DeployParachute+0xb8>)
 800315c:	701a      	strb	r2, [r3, #0]
	}

	if((BMP280.Barometric_Altitude + 10) < BMP280.Max_Altitude){
 800315e:	4b19      	ldr	r3, [pc, #100]	@ (80031c4 <DeployParachute+0xc0>)
 8003160:	8a1b      	ldrh	r3, [r3, #16]
 8003162:	330a      	adds	r3, #10
 8003164:	4a17      	ldr	r2, [pc, #92]	@ (80031c4 <DeployParachute+0xc0>)
 8003166:	8a52      	ldrh	r2, [r2, #18]
 8003168:	4293      	cmp	r3, r2
 800316a:	da0d      	bge.n	8003188 <DeployParachute+0x84>
		Parachute_Status |= Desplegar;
 800316c:	4b13      	ldr	r3, [pc, #76]	@ (80031bc <DeployParachute+0xb8>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	f043 0310 	orr.w	r3, r3, #16
 8003174:	b2da      	uxtb	r2, r3
 8003176:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <DeployParachute+0xb8>)
 8003178:	701a      	strb	r2, [r3, #0]
		Parachute_Status |= Desp_Alt;
 800317a:	4b10      	ldr	r3, [pc, #64]	@ (80031bc <DeployParachute+0xb8>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	f043 0302 	orr.w	r3, r3, #2
 8003182:	b2da      	uxtb	r2, r3
 8003184:	4b0d      	ldr	r3, [pc, #52]	@ (80031bc <DeployParachute+0xb8>)
 8003186:	701a      	strb	r2, [r3, #0]
	}

	if(Parachute_Status){
 8003188:	4b0c      	ldr	r3, [pc, #48]	@ (80031bc <DeployParachute+0xb8>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d009      	beq.n	80031a4 <DeployParachute+0xa0>
		  TIM2->CCR4 = 2000;
 8003190:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003194:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003198:	641a      	str	r2, [r3, #64]	@ 0x40
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800319a:	210c      	movs	r1, #12
 800319c:	480a      	ldr	r0, [pc, #40]	@ (80031c8 <DeployParachute+0xc4>)
 800319e:	f005 fd65 	bl	8008c6c <HAL_TIM_PWM_Start>
	}
	else{
		  TIM2->CCR4 = 1000;
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
	}
}
 80031a2:	e008      	b.n	80031b6 <DeployParachute+0xb2>
		  TIM2->CCR4 = 1000;
 80031a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80031a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031ac:	641a      	str	r2, [r3, #64]	@ 0x40
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80031ae:	210c      	movs	r1, #12
 80031b0:	4805      	ldr	r0, [pc, #20]	@ (80031c8 <DeployParachute+0xc4>)
 80031b2:	f005 fd5b 	bl	8008c6c <HAL_TIM_PWM_Start>
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000869 	.word	0x20000869
 80031c0:	20000198 	.word	0x20000198
 80031c4:	2000014c 	.word	0x2000014c
 80031c8:	20000be4 	.word	0x20000be4

080031cc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031d2:	463b      	mov	r3, r7
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80031de:	4b21      	ldr	r3, [pc, #132]	@ (8003264 <MX_ADC1_Init+0x98>)
 80031e0:	4a21      	ldr	r2, [pc, #132]	@ (8003268 <MX_ADC1_Init+0x9c>)
 80031e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80031e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003264 <MX_ADC1_Init+0x98>)
 80031e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80031ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003264 <MX_ADC1_Init+0x98>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80031f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003264 <MX_ADC1_Init+0x98>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80031f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003264 <MX_ADC1_Init+0x98>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031fe:	4b19      	ldr	r3, [pc, #100]	@ (8003264 <MX_ADC1_Init+0x98>)
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003206:	4b17      	ldr	r3, [pc, #92]	@ (8003264 <MX_ADC1_Init+0x98>)
 8003208:	2200      	movs	r2, #0
 800320a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800320c:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <MX_ADC1_Init+0x98>)
 800320e:	4a17      	ldr	r2, [pc, #92]	@ (800326c <MX_ADC1_Init+0xa0>)
 8003210:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003212:	4b14      	ldr	r3, [pc, #80]	@ (8003264 <MX_ADC1_Init+0x98>)
 8003214:	2200      	movs	r2, #0
 8003216:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003218:	4b12      	ldr	r3, [pc, #72]	@ (8003264 <MX_ADC1_Init+0x98>)
 800321a:	2201      	movs	r2, #1
 800321c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800321e:	4b11      	ldr	r3, [pc, #68]	@ (8003264 <MX_ADC1_Init+0x98>)
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003226:	4b0f      	ldr	r3, [pc, #60]	@ (8003264 <MX_ADC1_Init+0x98>)
 8003228:	2201      	movs	r2, #1
 800322a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800322c:	480d      	ldr	r0, [pc, #52]	@ (8003264 <MX_ADC1_Init+0x98>)
 800322e:	f001 fd81 	bl	8004d34 <HAL_ADC_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003238:	f001 f858 	bl	80042ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800323c:	2301      	movs	r3, #1
 800323e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003240:	2301      	movs	r3, #1
 8003242:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003244:	2300      	movs	r3, #0
 8003246:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003248:	463b      	mov	r3, r7
 800324a:	4619      	mov	r1, r3
 800324c:	4805      	ldr	r0, [pc, #20]	@ (8003264 <MX_ADC1_Init+0x98>)
 800324e:	f001 fdb5 	bl	8004dbc <HAL_ADC_ConfigChannel>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003258:	f001 f848 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	2000086c 	.word	0x2000086c
 8003268:	40012000 	.word	0x40012000
 800326c:	0f000001 	.word	0x0f000001

08003270 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	@ 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a17      	ldr	r2, [pc, #92]	@ (80032ec <HAL_ADC_MspInit+0x7c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d127      	bne.n	80032e2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	4b16      	ldr	r3, [pc, #88]	@ (80032f0 <HAL_ADC_MspInit+0x80>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	4a15      	ldr	r2, [pc, #84]	@ (80032f0 <HAL_ADC_MspInit+0x80>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032a2:	4b13      	ldr	r3, [pc, #76]	@ (80032f0 <HAL_ADC_MspInit+0x80>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	4b0f      	ldr	r3, [pc, #60]	@ (80032f0 <HAL_ADC_MspInit+0x80>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	4a0e      	ldr	r2, [pc, #56]	@ (80032f0 <HAL_ADC_MspInit+0x80>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032be:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <HAL_ADC_MspInit+0x80>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_VBat_Pin;
 80032ca:	2302      	movs	r3, #2
 80032cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032ce:	2303      	movs	r3, #3
 80032d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VBat_GPIO_Port, &GPIO_InitStruct);
 80032d6:	f107 0314 	add.w	r3, r7, #20
 80032da:	4619      	mov	r1, r3
 80032dc:	4805      	ldr	r0, [pc, #20]	@ (80032f4 <HAL_ADC_MspInit+0x84>)
 80032de:	f002 fead 	bl	800603c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80032e2:	bf00      	nop
 80032e4:	3728      	adds	r7, #40	@ 0x28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40012000 	.word	0x40012000
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40020000 	.word	0x40020000

080032f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	4b14      	ldr	r3, [pc, #80]	@ (8003354 <MX_DMA_Init+0x5c>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	4a13      	ldr	r2, [pc, #76]	@ (8003354 <MX_DMA_Init+0x5c>)
 8003308:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800330c:	6313      	str	r3, [r2, #48]	@ 0x30
 800330e:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <MX_DMA_Init+0x5c>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	2103      	movs	r1, #3
 800331e:	200b      	movs	r0, #11
 8003320:	f002 f855 	bl	80053ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003324:	200b      	movs	r0, #11
 8003326:	f002 f86e 	bl	8005406 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 3, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	2103      	movs	r1, #3
 800332e:	200e      	movs	r0, #14
 8003330:	f002 f84d 	bl	80053ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003334:	200e      	movs	r0, #14
 8003336:	f002 f866 	bl	8005406 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 3, 0);
 800333a:	2200      	movs	r2, #0
 800333c:	2103      	movs	r1, #3
 800333e:	2010      	movs	r0, #16
 8003340:	f002 f845 	bl	80053ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003344:	2010      	movs	r0, #16
 8003346:	f002 f85e 	bl	8005406 <HAL_NVIC_EnableIRQ>

}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800

08003358 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800335c:	2200      	movs	r2, #0
 800335e:	2101      	movs	r1, #1
 8003360:	4802      	ldr	r0, [pc, #8]	@ (800336c <SELECT+0x14>)
 8003362:	f002 ffef 	bl	8006344 <HAL_GPIO_WritePin>
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40020400 	.word	0x40020400

08003370 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8003374:	2201      	movs	r2, #1
 8003376:	2101      	movs	r1, #1
 8003378:	4802      	ldr	r0, [pc, #8]	@ (8003384 <DESELECT+0x14>)
 800337a:	f002 ffe3 	bl	8006344 <HAL_GPIO_WritePin>
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40020400 	.word	0x40020400

08003388 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003392:	bf00      	nop
 8003394:	4808      	ldr	r0, [pc, #32]	@ (80033b8 <SPI_TxByte+0x30>)
 8003396:	f005 f9f9 	bl	800878c <HAL_SPI_GetState>
 800339a:	4603      	mov	r3, r0
 800339c:	2b01      	cmp	r3, #1
 800339e:	d1f9      	bne.n	8003394 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80033a0:	1df9      	adds	r1, r7, #7
 80033a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033a6:	2201      	movs	r2, #1
 80033a8:	4803      	ldr	r0, [pc, #12]	@ (80033b8 <SPI_TxByte+0x30>)
 80033aa:	f004 fcea 	bl	8007d82 <HAL_SPI_Transmit>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200009b8 	.word	0x200009b8

080033bc <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80033c2:	23ff      	movs	r3, #255	@ 0xff
 80033c4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80033ca:	bf00      	nop
 80033cc:	4809      	ldr	r0, [pc, #36]	@ (80033f4 <SPI_RxByte+0x38>)
 80033ce:	f005 f9dd 	bl	800878c <HAL_SPI_GetState>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d1f9      	bne.n	80033cc <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80033d8:	1dba      	adds	r2, r7, #6
 80033da:	1df9      	adds	r1, r7, #7
 80033dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	2301      	movs	r3, #1
 80033e4:	4803      	ldr	r0, [pc, #12]	@ (80033f4 <SPI_RxByte+0x38>)
 80033e6:	f004 ff29 	bl	800823c <HAL_SPI_TransmitReceive>

  return data;
 80033ea:	79bb      	ldrb	r3, [r7, #6]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	200009b8 	.word	0x200009b8

080033f8 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8003400:	f7ff ffdc 	bl	80033bc <SPI_RxByte>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	701a      	strb	r2, [r3, #0]
}
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800341a:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <SD_ReadyWait+0x34>)
 800341c:	2232      	movs	r2, #50	@ 0x32
 800341e:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8003420:	f7ff ffcc 	bl	80033bc <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8003424:	f7ff ffca 	bl	80033bc <SPI_RxByte>
 8003428:	4603      	mov	r3, r0
 800342a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	2bff      	cmp	r3, #255	@ 0xff
 8003430:	d004      	beq.n	800343c <SD_ReadyWait+0x28>
 8003432:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <SD_ReadyWait+0x34>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f3      	bne.n	8003424 <SD_ReadyWait+0x10>

  return res;
 800343c:	79fb      	ldrb	r3, [r7, #7]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000be2 	.word	0x20000be2

0800344c <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8003452:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8003456:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8003458:	f7ff ff8a 	bl	8003370 <DESELECT>

  for(int i = 0; i < 10; i++)
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	e005      	b.n	800346e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8003462:	20ff      	movs	r0, #255	@ 0xff
 8003464:	f7ff ff90 	bl	8003388 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	3301      	adds	r3, #1
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2b09      	cmp	r3, #9
 8003472:	ddf6      	ble.n	8003462 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8003474:	f7ff ff70 	bl	8003358 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8003478:	2340      	movs	r3, #64	@ 0x40
 800347a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 800348c:	2395      	movs	r3, #149	@ 0x95
 800348e:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	e009      	b.n	80034aa <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8003496:	1d3a      	adds	r2, r7, #4
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4413      	add	r3, r2
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ff72 	bl	8003388 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3301      	adds	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b05      	cmp	r3, #5
 80034ae:	ddf2      	ble.n	8003496 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80034b0:	e002      	b.n	80034b8 <SD_PowerOn+0x6c>
  {
    Count--;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80034b8:	f7ff ff80 	bl	80033bc <SPI_RxByte>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d002      	beq.n	80034c8 <SD_PowerOn+0x7c>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f4      	bne.n	80034b2 <SD_PowerOn+0x66>
  }

  DESELECT();
 80034c8:	f7ff ff52 	bl	8003370 <DESELECT>
  SPI_TxByte(0XFF);
 80034cc:	20ff      	movs	r0, #255	@ 0xff
 80034ce:	f7ff ff5b 	bl	8003388 <SPI_TxByte>

  PowerFlag = 1;
 80034d2:	4b03      	ldr	r3, [pc, #12]	@ (80034e0 <SD_PowerOn+0x94>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
}
 80034d8:	bf00      	nop
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	200008b5 	.word	0x200008b5

080034e4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80034e8:	4b03      	ldr	r3, [pc, #12]	@ (80034f8 <SD_PowerOff+0x14>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	701a      	strb	r2, [r3, #0]
}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	200008b5 	.word	0x200008b5

080034fc <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8003500:	4b03      	ldr	r3, [pc, #12]	@ (8003510 <SD_CheckPower+0x14>)
 8003502:	781b      	ldrb	r3, [r3, #0]
}
 8003504:	4618      	mov	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	200008b5 	.word	0x200008b5

08003514 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800351e:	4b17      	ldr	r3, [pc, #92]	@ (800357c <SD_RxDataBlock+0x68>)
 8003520:	220a      	movs	r2, #10
 8003522:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8003524:	f7ff ff4a 	bl	80033bc <SPI_RxByte>
 8003528:	4603      	mov	r3, r0
 800352a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	2bff      	cmp	r3, #255	@ 0xff
 8003530:	d104      	bne.n	800353c <SD_RxDataBlock+0x28>
 8003532:	4b12      	ldr	r3, [pc, #72]	@ (800357c <SD_RxDataBlock+0x68>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f3      	bne.n	8003524 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2bfe      	cmp	r3, #254	@ 0xfe
 8003540:	d001      	beq.n	8003546 <SD_RxDataBlock+0x32>
    return FALSE;
 8003542:	2300      	movs	r3, #0
 8003544:	e016      	b.n	8003574 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	1c5a      	adds	r2, r3, #1
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff53 	bl	80033f8 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff4d 	bl	80033f8 <SPI_RxBytePtr>
  } while(btr -= 2);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	3b02      	subs	r3, #2
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1ed      	bne.n	8003546 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800356a:	f7ff ff27 	bl	80033bc <SPI_RxByte>
  SPI_RxByte();
 800356e:	f7ff ff25 	bl	80033bc <SPI_RxByte>

  return TRUE;
 8003572:	2301      	movs	r3, #1
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000be1 	.word	0x20000be1

08003580 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8003590:	f7ff ff40 	bl	8003414 <SD_ReadyWait>
 8003594:	4603      	mov	r3, r0
 8003596:	2bff      	cmp	r3, #255	@ 0xff
 8003598:	d001      	beq.n	800359e <SD_TxDataBlock+0x1e>
    return FALSE;
 800359a:	2300      	movs	r3, #0
 800359c:	e040      	b.n	8003620 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 800359e:	78fb      	ldrb	r3, [r7, #3]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fef1 	bl	8003388 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	2bfd      	cmp	r3, #253	@ 0xfd
 80035aa:	d031      	beq.n	8003610 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fee5 	bl	8003388 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fede 	bl	8003388 <SPI_TxByte>
    } while (--wc);
 80035cc:	7bbb      	ldrb	r3, [r7, #14]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	73bb      	strb	r3, [r7, #14]
 80035d2:	7bbb      	ldrb	r3, [r7, #14]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1eb      	bne.n	80035b0 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80035d8:	f7ff fef0 	bl	80033bc <SPI_RxByte>
    SPI_RxByte();
 80035dc:	f7ff feee 	bl	80033bc <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80035e0:	e00b      	b.n	80035fa <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80035e2:	f7ff feeb 	bl	80033bc <SPI_RxByte>
 80035e6:	4603      	mov	r3, r0
 80035e8:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d006      	beq.n	8003602 <SD_TxDataBlock+0x82>
        break;

      i++;
 80035f4:	7b7b      	ldrb	r3, [r7, #13]
 80035f6:	3301      	adds	r3, #1
 80035f8:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80035fa:	7b7b      	ldrb	r3, [r7, #13]
 80035fc:	2b40      	cmp	r3, #64	@ 0x40
 80035fe:	d9f0      	bls.n	80035e2 <SD_TxDataBlock+0x62>
 8003600:	e000      	b.n	8003604 <SD_TxDataBlock+0x84>
        break;
 8003602:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8003604:	bf00      	nop
 8003606:	f7ff fed9 	bl	80033bc <SPI_RxByte>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0fa      	beq.n	8003606 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8003610:	7bfb      	ldrb	r3, [r7, #15]
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2b05      	cmp	r3, #5
 8003618:	d101      	bne.n	800361e <SD_TxDataBlock+0x9e>
    return TRUE;
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	6039      	str	r1, [r7, #0]
 8003632:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8003634:	f7ff feee 	bl	8003414 <SD_ReadyWait>
 8003638:	4603      	mov	r3, r0
 800363a:	2bff      	cmp	r3, #255	@ 0xff
 800363c:	d001      	beq.n	8003642 <SD_SendCmd+0x1a>
    return 0xFF;
 800363e:	23ff      	movs	r3, #255	@ 0xff
 8003640:	e040      	b.n	80036c4 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff fe9f 	bl	8003388 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	0e1b      	lsrs	r3, r3, #24
 800364e:	b2db      	uxtb	r3, r3
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fe99 	bl	8003388 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	0c1b      	lsrs	r3, r3, #16
 800365a:	b2db      	uxtb	r3, r3
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fe93 	bl	8003388 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	b2db      	uxtb	r3, r3
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fe8d 	bl	8003388 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	4618      	mov	r0, r3
 8003674:	f7ff fe88 	bl	8003388 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	2b40      	cmp	r3, #64	@ 0x40
 8003680:	d101      	bne.n	8003686 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8003682:	2395      	movs	r3, #149	@ 0x95
 8003684:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	2b48      	cmp	r3, #72	@ 0x48
 800368a:	d101      	bne.n	8003690 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800368c:	2387      	movs	r3, #135	@ 0x87
 800368e:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fe78 	bl	8003388 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	2b4c      	cmp	r3, #76	@ 0x4c
 800369c:	d101      	bne.n	80036a2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 800369e:	f7ff fe8d 	bl	80033bc <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80036a2:	230a      	movs	r3, #10
 80036a4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80036a6:	f7ff fe89 	bl	80033bc <SPI_RxByte>
 80036aa:	4603      	mov	r3, r0
 80036ac:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80036ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	da05      	bge.n	80036c2 <SD_SendCmd+0x9a>
 80036b6:	7bbb      	ldrb	r3, [r7, #14]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	73bb      	strb	r3, [r7, #14]
 80036bc:	7bbb      	ldrb	r3, [r7, #14]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f1      	bne.n	80036a6 <SD_SendCmd+0x7e>

  return res;
 80036c2:	7b7b      	ldrb	r3, [r7, #13]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0d5      	b.n	800388c <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80036e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003894 <SD_disk_initialize+0x1c8>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <SD_disk_initialize+0x2a>
    return Stat;
 80036ee:	4b69      	ldr	r3, [pc, #420]	@ (8003894 <SD_disk_initialize+0x1c8>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	e0ca      	b.n	800388c <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80036f6:	f7ff fea9 	bl	800344c <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80036fa:	f7ff fe2d 	bl	8003358 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8003702:	2100      	movs	r1, #0
 8003704:	2040      	movs	r0, #64	@ 0x40
 8003706:	f7ff ff8f 	bl	8003628 <SD_SendCmd>
 800370a:	4603      	mov	r3, r0
 800370c:	2b01      	cmp	r3, #1
 800370e:	f040 80a5 	bne.w	800385c <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8003712:	4b61      	ldr	r3, [pc, #388]	@ (8003898 <SD_disk_initialize+0x1cc>)
 8003714:	2264      	movs	r2, #100	@ 0x64
 8003716:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003718:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800371c:	2048      	movs	r0, #72	@ 0x48
 800371e:	f7ff ff83 	bl	8003628 <SD_SendCmd>
 8003722:	4603      	mov	r3, r0
 8003724:	2b01      	cmp	r3, #1
 8003726:	d158      	bne.n	80037da <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]
 800372c:	e00c      	b.n	8003748 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800372e:	7bfc      	ldrb	r4, [r7, #15]
 8003730:	f7ff fe44 	bl	80033bc <SPI_RxByte>
 8003734:	4603      	mov	r3, r0
 8003736:	461a      	mov	r2, r3
 8003738:	f104 0310 	add.w	r3, r4, #16
 800373c:	443b      	add	r3, r7
 800373e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	3301      	adds	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d9ef      	bls.n	800372e <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800374e:	7abb      	ldrb	r3, [r7, #10]
 8003750:	2b01      	cmp	r3, #1
 8003752:	f040 8083 	bne.w	800385c <SD_disk_initialize+0x190>
 8003756:	7afb      	ldrb	r3, [r7, #11]
 8003758:	2baa      	cmp	r3, #170	@ 0xaa
 800375a:	d17f      	bne.n	800385c <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800375c:	2100      	movs	r1, #0
 800375e:	2077      	movs	r0, #119	@ 0x77
 8003760:	f7ff ff62 	bl	8003628 <SD_SendCmd>
 8003764:	4603      	mov	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d807      	bhi.n	800377a <SD_disk_initialize+0xae>
 800376a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800376e:	2069      	movs	r0, #105	@ 0x69
 8003770:	f7ff ff5a 	bl	8003628 <SD_SendCmd>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800377a:	4b47      	ldr	r3, [pc, #284]	@ (8003898 <SD_disk_initialize+0x1cc>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1eb      	bne.n	800375c <SD_disk_initialize+0x90>
 8003784:	e000      	b.n	8003788 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8003786:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8003788:	4b43      	ldr	r3, [pc, #268]	@ (8003898 <SD_disk_initialize+0x1cc>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d064      	beq.n	800385c <SD_disk_initialize+0x190>
 8003792:	2100      	movs	r1, #0
 8003794:	207a      	movs	r0, #122	@ 0x7a
 8003796:	f7ff ff47 	bl	8003628 <SD_SendCmd>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d15d      	bne.n	800385c <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	73fb      	strb	r3, [r7, #15]
 80037a4:	e00c      	b.n	80037c0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80037a6:	7bfc      	ldrb	r4, [r7, #15]
 80037a8:	f7ff fe08 	bl	80033bc <SPI_RxByte>
 80037ac:	4603      	mov	r3, r0
 80037ae:	461a      	mov	r2, r3
 80037b0:	f104 0310 	add.w	r3, r4, #16
 80037b4:	443b      	add	r3, r7
 80037b6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	3301      	adds	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d9ef      	bls.n	80037a6 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80037c6:	7a3b      	ldrb	r3, [r7, #8]
 80037c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <SD_disk_initialize+0x108>
 80037d0:	2306      	movs	r3, #6
 80037d2:	e000      	b.n	80037d6 <SD_disk_initialize+0x10a>
 80037d4:	2302      	movs	r3, #2
 80037d6:	73bb      	strb	r3, [r7, #14]
 80037d8:	e040      	b.n	800385c <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80037da:	2100      	movs	r1, #0
 80037dc:	2077      	movs	r0, #119	@ 0x77
 80037de:	f7ff ff23 	bl	8003628 <SD_SendCmd>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d808      	bhi.n	80037fa <SD_disk_initialize+0x12e>
 80037e8:	2100      	movs	r1, #0
 80037ea:	2069      	movs	r0, #105	@ 0x69
 80037ec:	f7ff ff1c 	bl	8003628 <SD_SendCmd>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d801      	bhi.n	80037fa <SD_disk_initialize+0x12e>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e000      	b.n	80037fc <SD_disk_initialize+0x130>
 80037fa:	2301      	movs	r3, #1
 80037fc:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80037fe:	7bbb      	ldrb	r3, [r7, #14]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d10e      	bne.n	8003822 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8003804:	2100      	movs	r1, #0
 8003806:	2077      	movs	r0, #119	@ 0x77
 8003808:	f7ff ff0e 	bl	8003628 <SD_SendCmd>
 800380c:	4603      	mov	r3, r0
 800380e:	2b01      	cmp	r3, #1
 8003810:	d80e      	bhi.n	8003830 <SD_disk_initialize+0x164>
 8003812:	2100      	movs	r1, #0
 8003814:	2069      	movs	r0, #105	@ 0x69
 8003816:	f7ff ff07 	bl	8003628 <SD_SendCmd>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d107      	bne.n	8003830 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8003820:	e00d      	b.n	800383e <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8003822:	2100      	movs	r1, #0
 8003824:	2041      	movs	r0, #65	@ 0x41
 8003826:	f7ff feff 	bl	8003628 <SD_SendCmd>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8003830:	4b19      	ldr	r3, [pc, #100]	@ (8003898 <SD_disk_initialize+0x1cc>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e1      	bne.n	80037fe <SD_disk_initialize+0x132>
 800383a:	e000      	b.n	800383e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800383c:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800383e:	4b16      	ldr	r3, [pc, #88]	@ (8003898 <SD_disk_initialize+0x1cc>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d007      	beq.n	8003858 <SD_disk_initialize+0x18c>
 8003848:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800384c:	2050      	movs	r0, #80	@ 0x50
 800384e:	f7ff feeb 	bl	8003628 <SD_SendCmd>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 800385c:	4a0f      	ldr	r2, [pc, #60]	@ (800389c <SD_disk_initialize+0x1d0>)
 800385e:	7bbb      	ldrb	r3, [r7, #14]
 8003860:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8003862:	f7ff fd85 	bl	8003370 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8003866:	f7ff fda9 	bl	80033bc <SPI_RxByte>

  if (type)
 800386a:	7bbb      	ldrb	r3, [r7, #14]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8003870:	4b08      	ldr	r3, [pc, #32]	@ (8003894 <SD_disk_initialize+0x1c8>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f023 0301 	bic.w	r3, r3, #1
 800387a:	b2da      	uxtb	r2, r3
 800387c:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <SD_disk_initialize+0x1c8>)
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e001      	b.n	8003886 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8003882:	f7ff fe2f 	bl	80034e4 <SD_PowerOff>
  }

  return Stat;
 8003886:	4b03      	ldr	r3, [pc, #12]	@ (8003894 <SD_disk_initialize+0x1c8>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b2db      	uxtb	r3, r3
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	bd90      	pop	{r4, r7, pc}
 8003894:	200000a8 	.word	0x200000a8
 8003898:	20000be1 	.word	0x20000be1
 800389c:	200008b4 	.word	0x200008b4

080038a0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <SD_disk_status+0x14>
    return STA_NOINIT;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e002      	b.n	80038ba <SD_disk_status+0x1a>

  return Stat;
 80038b4:	4b04      	ldr	r3, [pc, #16]	@ (80038c8 <SD_disk_status+0x28>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	b2db      	uxtb	r3, r3
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	200000a8 	.word	0x200000a8

080038cc <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	4603      	mov	r3, r0
 80038da:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d102      	bne.n	80038e8 <SD_disk_read+0x1c>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <SD_disk_read+0x20>
    return RES_PARERR;
 80038e8:	2304      	movs	r3, #4
 80038ea:	e051      	b.n	8003990 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80038ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003998 <SD_disk_read+0xcc>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <SD_disk_read+0x32>
    return RES_NOTRDY;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e048      	b.n	8003990 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80038fe:	4b27      	ldr	r3, [pc, #156]	@ (800399c <SD_disk_read+0xd0>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d102      	bne.n	8003910 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	025b      	lsls	r3, r3, #9
 800390e:	607b      	str	r3, [r7, #4]

  SELECT();
 8003910:	f7ff fd22 	bl	8003358 <SELECT>

  if (count == 1)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d111      	bne.n	800393e <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	2051      	movs	r0, #81	@ 0x51
 800391e:	f7ff fe83 	bl	8003628 <SD_SendCmd>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d129      	bne.n	800397c <SD_disk_read+0xb0>
 8003928:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800392c:	68b8      	ldr	r0, [r7, #8]
 800392e:	f7ff fdf1 	bl	8003514 <SD_RxDataBlock>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d021      	beq.n	800397c <SD_disk_read+0xb0>
      count = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	e01e      	b.n	800397c <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	2052      	movs	r0, #82	@ 0x52
 8003942:	f7ff fe71 	bl	8003628 <SD_SendCmd>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d117      	bne.n	800397c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 800394c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003950:	68b8      	ldr	r0, [r7, #8]
 8003952:	f7ff fddf 	bl	8003514 <SD_RxDataBlock>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <SD_disk_read+0xa6>
          break;

        buff += 512;
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003962:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	3b01      	subs	r3, #1
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ed      	bne.n	800394c <SD_disk_read+0x80>
 8003970:	e000      	b.n	8003974 <SD_disk_read+0xa8>
          break;
 8003972:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8003974:	2100      	movs	r1, #0
 8003976:	204c      	movs	r0, #76	@ 0x4c
 8003978:	f7ff fe56 	bl	8003628 <SD_SendCmd>
    }
  }

  DESELECT();
 800397c:	f7ff fcf8 	bl	8003370 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8003980:	f7ff fd1c 	bl	80033bc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	bf14      	ite	ne
 800398a:	2301      	movne	r3, #1
 800398c:	2300      	moveq	r3, #0
 800398e:	b2db      	uxtb	r3, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	200000a8 	.word	0x200000a8
 800399c:	200008b4 	.word	0x200008b4

080039a0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	4603      	mov	r3, r0
 80039ae:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d102      	bne.n	80039bc <SD_disk_write+0x1c>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <SD_disk_write+0x20>
    return RES_PARERR;
 80039bc:	2304      	movs	r3, #4
 80039be:	e06b      	b.n	8003a98 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80039c0:	4b37      	ldr	r3, [pc, #220]	@ (8003aa0 <SD_disk_write+0x100>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e062      	b.n	8003a98 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 80039d2:	4b33      	ldr	r3, [pc, #204]	@ (8003aa0 <SD_disk_write+0x100>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <SD_disk_write+0x44>
    return RES_WRPRT;
 80039e0:	2302      	movs	r3, #2
 80039e2:	e059      	b.n	8003a98 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 80039e4:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa4 <SD_disk_write+0x104>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d102      	bne.n	80039f6 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	025b      	lsls	r3, r3, #9
 80039f4:	607b      	str	r3, [r7, #4]

  SELECT();
 80039f6:	f7ff fcaf 	bl	8003358 <SELECT>

  if (count == 1)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d110      	bne.n	8003a22 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	2058      	movs	r0, #88	@ 0x58
 8003a04:	f7ff fe10 	bl	8003628 <SD_SendCmd>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d13a      	bne.n	8003a84 <SD_disk_write+0xe4>
 8003a0e:	21fe      	movs	r1, #254	@ 0xfe
 8003a10:	68b8      	ldr	r0, [r7, #8]
 8003a12:	f7ff fdb5 	bl	8003580 <SD_TxDataBlock>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d033      	beq.n	8003a84 <SD_disk_write+0xe4>
      count = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	e030      	b.n	8003a84 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8003a22:	4b20      	ldr	r3, [pc, #128]	@ (8003aa4 <SD_disk_write+0x104>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8003a2e:	2100      	movs	r1, #0
 8003a30:	2077      	movs	r0, #119	@ 0x77
 8003a32:	f7ff fdf9 	bl	8003628 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8003a36:	6839      	ldr	r1, [r7, #0]
 8003a38:	2057      	movs	r0, #87	@ 0x57
 8003a3a:	f7ff fdf5 	bl	8003628 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	2059      	movs	r0, #89	@ 0x59
 8003a42:	f7ff fdf1 	bl	8003628 <SD_SendCmd>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d11b      	bne.n	8003a84 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8003a4c:	21fc      	movs	r1, #252	@ 0xfc
 8003a4e:	68b8      	ldr	r0, [r7, #8]
 8003a50:	f7ff fd96 	bl	8003580 <SD_TxDataBlock>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003a60:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1ee      	bne.n	8003a4c <SD_disk_write+0xac>
 8003a6e:	e000      	b.n	8003a72 <SD_disk_write+0xd2>
          break;
 8003a70:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8003a72:	21fd      	movs	r1, #253	@ 0xfd
 8003a74:	2000      	movs	r0, #0
 8003a76:	f7ff fd83 	bl	8003580 <SD_TxDataBlock>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <SD_disk_write+0xe4>
      {
        count = 1;
 8003a80:	2301      	movs	r3, #1
 8003a82:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8003a84:	f7ff fc74 	bl	8003370 <DESELECT>
  SPI_RxByte();
 8003a88:	f7ff fc98 	bl	80033bc <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	200000a8 	.word	0x200000a8
 8003aa4:	200008b4 	.word	0x200008b4

08003aa8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003aa8:	b590      	push	{r4, r7, lr}
 8003aaa:	b08b      	sub	sp, #44	@ 0x2c
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	603a      	str	r2, [r7, #0]
 8003ab2:	71fb      	strb	r3, [r7, #7]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8003ac2:	2304      	movs	r3, #4
 8003ac4:	e119      	b.n	8003cfa <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8003acc:	79bb      	ldrb	r3, [r7, #6]
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	d129      	bne.n	8003b26 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d017      	beq.n	8003b0a <SD_disk_ioctl+0x62>
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	dc1f      	bgt.n	8003b1e <SD_disk_ioctl+0x76>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <SD_disk_ioctl+0x40>
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d00b      	beq.n	8003afe <SD_disk_ioctl+0x56>
 8003ae6:	e01a      	b.n	8003b1e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8003ae8:	f7ff fd08 	bl	80034fc <SD_CheckPower>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8003af2:	f7ff fcf7 	bl	80034e4 <SD_PowerOff>
      res = RES_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003afc:	e0fb      	b.n	8003cf6 <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8003afe:	f7ff fca5 	bl	800344c <SD_PowerOn>
      res = RES_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003b08:	e0f5      	b.n	8003cf6 <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	1c5c      	adds	r4, r3, #1
 8003b0e:	f7ff fcf5 	bl	80034fc <SD_CheckPower>
 8003b12:	4603      	mov	r3, r0
 8003b14:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8003b16:	2300      	movs	r3, #0
 8003b18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003b1c:	e0eb      	b.n	8003cf6 <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8003b1e:	2304      	movs	r3, #4
 8003b20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003b24:	e0e7      	b.n	8003cf6 <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8003b26:	4b77      	ldr	r3, [pc, #476]	@ (8003d04 <SD_disk_ioctl+0x25c>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e0e0      	b.n	8003cfa <SD_disk_ioctl+0x252>

    SELECT();
 8003b38:	f7ff fc0e 	bl	8003358 <SELECT>

    switch (ctrl)
 8003b3c:	79bb      	ldrb	r3, [r7, #6]
 8003b3e:	2b0d      	cmp	r3, #13
 8003b40:	f200 80ca 	bhi.w	8003cd8 <SD_disk_ioctl+0x230>
 8003b44:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <SD_disk_ioctl+0xa4>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003c43 	.word	0x08003c43
 8003b50:	08003b85 	.word	0x08003b85
 8003b54:	08003c33 	.word	0x08003c33
 8003b58:	08003cd9 	.word	0x08003cd9
 8003b5c:	08003cd9 	.word	0x08003cd9
 8003b60:	08003cd9 	.word	0x08003cd9
 8003b64:	08003cd9 	.word	0x08003cd9
 8003b68:	08003cd9 	.word	0x08003cd9
 8003b6c:	08003cd9 	.word	0x08003cd9
 8003b70:	08003cd9 	.word	0x08003cd9
 8003b74:	08003cd9 	.word	0x08003cd9
 8003b78:	08003c55 	.word	0x08003c55
 8003b7c:	08003c79 	.word	0x08003c79
 8003b80:	08003c9d 	.word	0x08003c9d
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8003b84:	2100      	movs	r1, #0
 8003b86:	2049      	movs	r0, #73	@ 0x49
 8003b88:	f7ff fd4e 	bl	8003628 <SD_SendCmd>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f040 80a6 	bne.w	8003ce0 <SD_disk_ioctl+0x238>
 8003b94:	f107 030c 	add.w	r3, r7, #12
 8003b98:	2110      	movs	r1, #16
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff fcba 	bl	8003514 <SD_RxDataBlock>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 809c 	beq.w	8003ce0 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 8003ba8:	7b3b      	ldrb	r3, [r7, #12]
 8003baa:	099b      	lsrs	r3, r3, #6
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d10d      	bne.n	8003bce <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003bb2:	7d7b      	ldrb	r3, [r7, #21]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	7d3b      	ldrb	r3, [r7, #20]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8003bc4:	8bfb      	ldrh	r3, [r7, #30]
 8003bc6:	029a      	lsls	r2, r3, #10
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	e02d      	b.n	8003c2a <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003bce:	7c7b      	ldrb	r3, [r7, #17]
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	7dbb      	ldrb	r3, [r7, #22]
 8003bd8:	09db      	lsrs	r3, r3, #7
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	7d7b      	ldrb	r3, [r7, #21]
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f003 0306 	and.w	r3, r3, #6
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	4413      	add	r3, r2
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003bf6:	7d3b      	ldrb	r3, [r7, #20]
 8003bf8:	099b      	lsrs	r3, r3, #6
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	7cfb      	ldrb	r3, [r7, #19]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	4413      	add	r3, r2
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	7cbb      	ldrb	r3, [r7, #18]
 8003c0a:	029b      	lsls	r3, r3, #10
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3301      	adds	r3, #1
 8003c1a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003c1c:	8bfa      	ldrh	r2, [r7, #30]
 8003c1e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003c22:	3b09      	subs	r3, #9
 8003c24:	409a      	lsls	r2, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8003c30:	e056      	b.n	8003ce0 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c38:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c40:	e055      	b.n	8003cee <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8003c42:	f7ff fbe7 	bl	8003414 <SD_ReadyWait>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2bff      	cmp	r3, #255	@ 0xff
 8003c4a:	d14b      	bne.n	8003ce4 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c52:	e047      	b.n	8003ce4 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8003c54:	2100      	movs	r1, #0
 8003c56:	2049      	movs	r0, #73	@ 0x49
 8003c58:	f7ff fce6 	bl	8003628 <SD_SendCmd>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d142      	bne.n	8003ce8 <SD_disk_ioctl+0x240>
 8003c62:	2110      	movs	r1, #16
 8003c64:	6a38      	ldr	r0, [r7, #32]
 8003c66:	f7ff fc55 	bl	8003514 <SD_RxDataBlock>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d03b      	beq.n	8003ce8 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c76:	e037      	b.n	8003ce8 <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8003c78:	2100      	movs	r1, #0
 8003c7a:	204a      	movs	r0, #74	@ 0x4a
 8003c7c:	f7ff fcd4 	bl	8003628 <SD_SendCmd>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d132      	bne.n	8003cec <SD_disk_ioctl+0x244>
 8003c86:	2110      	movs	r1, #16
 8003c88:	6a38      	ldr	r0, [r7, #32]
 8003c8a:	f7ff fc43 	bl	8003514 <SD_RxDataBlock>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d02b      	beq.n	8003cec <SD_disk_ioctl+0x244>
        res = RES_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8003c9a:	e027      	b.n	8003cec <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	207a      	movs	r0, #122	@ 0x7a
 8003ca0:	f7ff fcc2 	bl	8003628 <SD_SendCmd>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d116      	bne.n	8003cd8 <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 8003caa:	2300      	movs	r3, #0
 8003cac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003cb0:	e00b      	b.n	8003cca <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8003cb2:	6a3c      	ldr	r4, [r7, #32]
 8003cb4:	1c63      	adds	r3, r4, #1
 8003cb6:	623b      	str	r3, [r7, #32]
 8003cb8:	f7ff fb80 	bl	80033bc <SPI_RxByte>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003cc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003cca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d9ef      	bls.n	8003cb2 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 8003cd8:	2304      	movs	r3, #4
 8003cda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003cde:	e006      	b.n	8003cee <SD_disk_ioctl+0x246>
      break;
 8003ce0:	bf00      	nop
 8003ce2:	e004      	b.n	8003cee <SD_disk_ioctl+0x246>
      break;
 8003ce4:	bf00      	nop
 8003ce6:	e002      	b.n	8003cee <SD_disk_ioctl+0x246>
      break;
 8003ce8:	bf00      	nop
 8003cea:	e000      	b.n	8003cee <SD_disk_ioctl+0x246>
      break;
 8003cec:	bf00      	nop
    }

    DESELECT();
 8003cee:	f7ff fb3f 	bl	8003370 <DESELECT>
    SPI_RxByte();
 8003cf2:	f7ff fb63 	bl	80033bc <SPI_RxByte>
  }

  return res;
 8003cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	372c      	adds	r7, #44	@ 0x2c
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd90      	pop	{r4, r7, pc}
 8003d02:	bf00      	nop
 8003d04:	200000a8 	.word	0x200000a8

08003d08 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	@ 0x28
 8003d0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d0e:	f107 0314 	add.w	r3, r7, #20
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	609a      	str	r2, [r3, #8]
 8003d1a:	60da      	str	r2, [r3, #12]
 8003d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	4b56      	ldr	r3, [pc, #344]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d26:	4a55      	ldr	r2, [pc, #340]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d28:	f043 0304 	orr.w	r3, r3, #4
 8003d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d2e:	4b53      	ldr	r3, [pc, #332]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	4b4f      	ldr	r3, [pc, #316]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	4a4e      	ldr	r2, [pc, #312]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	4b48      	ldr	r3, [pc, #288]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	4a47      	ldr	r2, [pc, #284]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d66:	4b45      	ldr	r3, [pc, #276]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	60bb      	str	r3, [r7, #8]
 8003d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d72:	2300      	movs	r3, #0
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	4b41      	ldr	r3, [pc, #260]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7a:	4a40      	ldr	r2, [pc, #256]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d7c:	f043 0302 	orr.w	r3, r3, #2
 8003d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d82:	4b3e      	ldr	r3, [pc, #248]	@ (8003e7c <MX_GPIO_Init+0x174>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	607b      	str	r3, [r7, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d94:	483a      	ldr	r0, [pc, #232]	@ (8003e80 <MX_GPIO_Init+0x178>)
 8003d96:	f002 fad5 	bl	8006344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|BMP_CS_Pin, GPIO_PIN_RESET);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2105      	movs	r1, #5
 8003d9e:	4839      	ldr	r0, [pc, #228]	@ (8003e84 <MX_GPIO_Init+0x17c>)
 8003da0:	f002 fad0 	bl	8006344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, uLed_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8003da4:	2200      	movs	r2, #0
 8003da6:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8003daa:	4837      	ldr	r0, [pc, #220]	@ (8003e88 <MX_GPIO_Init+0x180>)
 8003dac:	f002 faca 	bl	8006344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CS_Pin;
 8003db0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003db6:	2301      	movs	r3, #1
 8003db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CS_GPIO_Port, &GPIO_InitStruct);
 8003dc2:	f107 0314 	add.w	r3, r7, #20
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	482d      	ldr	r0, [pc, #180]	@ (8003e80 <MX_GPIO_Init+0x178>)
 8003dca:	f002 f937 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003dce:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ddc:	f107 0314 	add.w	r3, r7, #20
 8003de0:	4619      	mov	r1, r3
 8003de2:	4827      	ldr	r0, [pc, #156]	@ (8003e80 <MX_GPIO_Init+0x178>)
 8003de4:	f002 f92a 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA4 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_12;
 8003de8:	f241 0315 	movw	r3, #4117	@ 0x1015
 8003dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dee:	2303      	movs	r3, #3
 8003df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003df6:	f107 0314 	add.w	r3, r7, #20
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4822      	ldr	r0, [pc, #136]	@ (8003e88 <MX_GPIO_Init+0x180>)
 8003dfe:	f002 f91d 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|BMP_CS_Pin;
 8003e02:	2305      	movs	r3, #5
 8003e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e06:	2301      	movs	r3, #1
 8003e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e12:	f107 0314 	add.w	r3, r7, #20
 8003e16:	4619      	mov	r1, r3
 8003e18:	481a      	ldr	r0, [pc, #104]	@ (8003e84 <MX_GPIO_Init+0x17c>)
 8003e1a:	f002 f90f 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 8003e1e:	f240 2302 	movw	r3, #514	@ 0x202
 8003e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e24:	2303      	movs	r3, #3
 8003e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e2c:	f107 0314 	add.w	r3, r7, #20
 8003e30:	4619      	mov	r1, r3
 8003e32:	4814      	ldr	r0, [pc, #80]	@ (8003e84 <MX_GPIO_Init+0x17c>)
 8003e34:	f002 f902 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uLed_Pin;
 8003e38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e46:	2300      	movs	r3, #0
 8003e48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uLed_GPIO_Port, &GPIO_InitStruct);
 8003e4a:	f107 0314 	add.w	r3, r7, #20
 8003e4e:	4619      	mov	r1, r3
 8003e50:	480d      	ldr	r0, [pc, #52]	@ (8003e88 <MX_GPIO_Init+0x180>)
 8003e52:	f002 f8f3 	bl	800603c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8003e56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e64:	2302      	movs	r3, #2
 8003e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8003e68:	f107 0314 	add.w	r3, r7, #20
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4806      	ldr	r0, [pc, #24]	@ (8003e88 <MX_GPIO_Init+0x180>)
 8003e70:	f002 f8e4 	bl	800603c <HAL_GPIO_Init>

}
 8003e74:	bf00      	nop
 8003e76:	3728      	adds	r7, #40	@ 0x28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40020800 	.word	0x40020800
 8003e84:	40020400 	.word	0x40020400
 8003e88:	40020000 	.word	0x40020000

08003e8c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e90:	4b13      	ldr	r3, [pc, #76]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003e92:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <MX_I2C1_Init+0x58>)
 8003e94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 8003e96:	4b12      	ldr	r3, [pc, #72]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003e98:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8003e9c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003eac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003eb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003eb8:	4b09      	ldr	r3, [pc, #36]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ebe:	4b08      	ldr	r3, [pc, #32]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ec4:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003eca:	4805      	ldr	r0, [pc, #20]	@ (8003ee0 <MX_I2C1_Init+0x54>)
 8003ecc:	f002 fa54 	bl	8006378 <HAL_I2C_Init>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8003ed6:	f000 fa09 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	200008b8 	.word	0x200008b8
 8003ee4:	40005400 	.word	0x40005400

08003ee8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003eec:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003eee:	4a13      	ldr	r2, [pc, #76]	@ (8003f3c <MX_I2C2_Init+0x54>)
 8003ef0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 200000;
 8003ef2:	4b11      	ldr	r3, [pc, #68]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003ef4:	4a12      	ldr	r2, [pc, #72]	@ (8003f40 <MX_I2C2_Init+0x58>)
 8003ef6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003efe:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f04:	4b0c      	ldr	r3, [pc, #48]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003f06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f0a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003f12:	4b09      	ldr	r3, [pc, #36]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f18:	4b07      	ldr	r3, [pc, #28]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f1e:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003f24:	4804      	ldr	r0, [pc, #16]	@ (8003f38 <MX_I2C2_Init+0x50>)
 8003f26:	f002 fa27 	bl	8006378 <HAL_I2C_Init>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003f30:	f000 f9dc 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003f34:	bf00      	nop
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	2000090c 	.word	0x2000090c
 8003f3c:	40005800 	.word	0x40005800
 8003f40:	00030d40 	.word	0x00030d40

08003f44 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003f48:	4b12      	ldr	r3, [pc, #72]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f4a:	4a13      	ldr	r2, [pc, #76]	@ (8003f98 <MX_I2C3_Init+0x54>)
 8003f4c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003f4e:	4b11      	ldr	r3, [pc, #68]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f50:	4a12      	ldr	r2, [pc, #72]	@ (8003f9c <MX_I2C3_Init+0x58>)
 8003f52:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f54:	4b0f      	ldr	r3, [pc, #60]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f60:	4b0c      	ldr	r3, [pc, #48]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f66:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f68:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003f6e:	4b09      	ldr	r3, [pc, #36]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f74:	4b07      	ldr	r3, [pc, #28]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f7a:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003f80:	4804      	ldr	r0, [pc, #16]	@ (8003f94 <MX_I2C3_Init+0x50>)
 8003f82:	f002 f9f9 	bl	8006378 <HAL_I2C_Init>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003f8c:	f000 f9ae 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003f90:	bf00      	nop
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000960 	.word	0x20000960
 8003f98:	40005c00 	.word	0x40005c00
 8003f9c:	000186a0 	.word	0x000186a0

08003fa0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08e      	sub	sp, #56	@ 0x38
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a63      	ldr	r2, [pc, #396]	@ (800414c <HAL_I2C_MspInit+0x1ac>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d12c      	bne.n	800401c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	623b      	str	r3, [r7, #32]
 8003fc6:	4b62      	ldr	r3, [pc, #392]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fca:	4a61      	ldr	r2, [pc, #388]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8003fcc:	f043 0302 	orr.w	r3, r3, #2
 8003fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	623b      	str	r3, [r7, #32]
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fde:	23c0      	movs	r3, #192	@ 0xc0
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fe2:	2312      	movs	r3, #18
 8003fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fea:	2303      	movs	r3, #3
 8003fec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fee:	2304      	movs	r3, #4
 8003ff0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4856      	ldr	r0, [pc, #344]	@ (8004154 <HAL_I2C_MspInit+0x1b4>)
 8003ffa:	f002 f81f 	bl	800603c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	4b53      	ldr	r3, [pc, #332]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	4a52      	ldr	r2, [pc, #328]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8004008:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800400c:	6413      	str	r3, [r2, #64]	@ 0x40
 800400e:	4b50      	ldr	r3, [pc, #320]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800401a:	e093      	b.n	8004144 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a4d      	ldr	r2, [pc, #308]	@ (8004158 <HAL_I2C_MspInit+0x1b8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d13d      	bne.n	80040a2 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	4b49      	ldr	r3, [pc, #292]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	4a48      	ldr	r2, [pc, #288]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8004030:	f043 0302 	orr.w	r3, r3, #2
 8004034:	6313      	str	r3, [r2, #48]	@ 0x30
 8004036:	4b46      	ldr	r3, [pc, #280]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	61bb      	str	r3, [r7, #24]
 8004040:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004042:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004048:	2312      	movs	r3, #18
 800404a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404c:	2300      	movs	r3, #0
 800404e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004050:	2303      	movs	r3, #3
 8004052:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004054:	2304      	movs	r3, #4
 8004056:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800405c:	4619      	mov	r1, r3
 800405e:	483d      	ldr	r0, [pc, #244]	@ (8004154 <HAL_I2C_MspInit+0x1b4>)
 8004060:	f001 ffec 	bl	800603c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004064:	2308      	movs	r3, #8
 8004066:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004068:	2312      	movs	r3, #18
 800406a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406c:	2300      	movs	r3, #0
 800406e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004070:	2303      	movs	r3, #3
 8004072:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004074:	2309      	movs	r3, #9
 8004076:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800407c:	4619      	mov	r1, r3
 800407e:	4835      	ldr	r0, [pc, #212]	@ (8004154 <HAL_I2C_MspInit+0x1b4>)
 8004080:	f001 ffdc 	bl	800603c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	4b31      	ldr	r3, [pc, #196]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	4a30      	ldr	r2, [pc, #192]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 800408e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004092:	6413      	str	r3, [r2, #64]	@ 0x40
 8004094:	4b2e      	ldr	r3, [pc, #184]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	697b      	ldr	r3, [r7, #20]
}
 80040a0:	e050      	b.n	8004144 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C3)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a2d      	ldr	r2, [pc, #180]	@ (800415c <HAL_I2C_MspInit+0x1bc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d14b      	bne.n	8004144 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ac:	2300      	movs	r3, #0
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	4b27      	ldr	r3, [pc, #156]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 80040b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b4:	4a26      	ldr	r2, [pc, #152]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80040bc:	4b24      	ldr	r3, [pc, #144]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 80040be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	4b20      	ldr	r3, [pc, #128]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 80040ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d0:	4a1f      	ldr	r2, [pc, #124]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 80040d2:	f043 0302 	orr.w	r3, r3, #2
 80040d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80040d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 80040da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAG_SCL_Pin;
 80040e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040ea:	2312      	movs	r3, #18
 80040ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f2:	2303      	movs	r3, #3
 80040f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80040f6:	2304      	movs	r3, #4
 80040f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SCL_GPIO_Port, &GPIO_InitStruct);
 80040fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040fe:	4619      	mov	r1, r3
 8004100:	4817      	ldr	r0, [pc, #92]	@ (8004160 <HAL_I2C_MspInit+0x1c0>)
 8004102:	f001 ff9b 	bl	800603c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAG_SDA_Pin;
 8004106:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800410a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800410c:	2312      	movs	r3, #18
 800410e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2300      	movs	r3, #0
 8004112:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004114:	2303      	movs	r3, #3
 8004116:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8004118:	2309      	movs	r3, #9
 800411a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SDA_GPIO_Port, &GPIO_InitStruct);
 800411c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004120:	4619      	mov	r1, r3
 8004122:	480c      	ldr	r0, [pc, #48]	@ (8004154 <HAL_I2C_MspInit+0x1b4>)
 8004124:	f001 ff8a 	bl	800603c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004128:	2300      	movs	r3, #0
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	4b08      	ldr	r3, [pc, #32]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	4a07      	ldr	r2, [pc, #28]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 8004132:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004136:	6413      	str	r3, [r2, #64]	@ 0x40
 8004138:	4b05      	ldr	r3, [pc, #20]	@ (8004150 <HAL_I2C_MspInit+0x1b0>)
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	68bb      	ldr	r3, [r7, #8]
}
 8004144:	bf00      	nop
 8004146:	3738      	adds	r7, #56	@ 0x38
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40005400 	.word	0x40005400
 8004150:	40023800 	.word	0x40023800
 8004154:	40020400 	.word	0x40020400
 8004158:	40005800 	.word	0x40005800
 800415c:	40005c00 	.word	0x40005c00
 8004160:	40020000 	.word	0x40020000

08004164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004168:	f000 fd72 	bl	8004c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800416c:	f000 f84c 	bl	8004208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004170:	f7ff fdca 	bl	8003d08 <MX_GPIO_Init>
  MX_DMA_Init();
 8004174:	f7ff f8c0 	bl	80032f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8004178:	f7ff f828 	bl	80031cc <MX_ADC1_Init>
  MX_I2C1_Init();
 800417c:	f7ff fe86 	bl	8003e8c <MX_I2C1_Init>
  MX_I2C2_Init();
 8004180:	f7ff feb2 	bl	8003ee8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8004184:	f7ff fede 	bl	8003f44 <MX_I2C3_Init>
  MX_SPI1_Init();
 8004188:	f000 f8b6 	bl	80042f8 <MX_SPI1_Init>
  MX_SPI2_Init();
 800418c:	f000 f8ea 	bl	8004364 <MX_SPI2_Init>
  MX_SPI3_Init();
 8004190:	f000 f91e 	bl	80043d0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8004194:	f000 fcc0 	bl	8004b18 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8004198:	f000 fb86 	bl	80048a8 <MX_TIM2_Init>
  MX_FATFS_Init();
 800419c:	f005 fed6 	bl	8009f4c <MX_FATFS_Init>
  MX_TIM5_Init();
 80041a0:	f000 fbf8 	bl	8004994 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  MEMORY_init();
 80041a4:	f7fe ff7c 	bl	80030a0 <MEMORY_init>
  BLACKBOX_Init();
 80041a8:	f7fe fa1a 	bl	80025e0 <BLACKBOX_Init>
  MPU6050_Init();
 80041ac:	f7fe f912 	bl	80023d4 <MPU6050_Init>
  BMP280_init();
 80041b0:	f7fd fb68 	bl	8001884 <BMP280_init>

  TIM2->CCR4 = 1500;
 80041b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80041b8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80041bc:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80041be:	210c      	movs	r1, #12
 80041c0:	480d      	ldr	r0, [pc, #52]	@ (80041f8 <main+0x94>)
 80041c2:	f004 fd53 	bl	8008c6c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80041c6:	480d      	ldr	r0, [pc, #52]	@ (80041fc <main+0x98>)
 80041c8:	f004 fc94 	bl	8008af4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		get_ACC();
 80041cc:	f7fe fb16 	bl	80027fc <get_ACC>
		get_STATUS();
 80041d0:	f7fe ff8c 	bl	80030ec <get_STATUS>
		BMP280_calculate();
 80041d4:	f7fd fb7a 	bl	80018cc <BMP280_calculate>
		get_ATTS(&MPU6050);
 80041d8:	4809      	ldr	r0, [pc, #36]	@ (8004200 <main+0x9c>)
 80041da:	f7fe fe45 	bl	8002e68 <get_ATTS>
		DeployParachute();
 80041de:	f7fe ff91 	bl	8003104 <DeployParachute>
		if(test){
 80041e2:	4b08      	ldr	r3, [pc, #32]	@ (8004204 <main+0xa0>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <main+0x68>
			MPU6050_calibration();
 80041ea:	f7fd feef 	bl	8001fcc <MPU6050_calibration>
			test=0;
 80041ee:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <main+0xa0>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
		get_ACC();
 80041f4:	e7ea      	b.n	80041cc <main+0x68>
 80041f6:	bf00      	nop
 80041f8:	20000be4 	.word	0x20000be4
 80041fc:	20000c2c 	.word	0x20000c2c
 8004200:	20000198 	.word	0x20000198
 8004204:	200009b4 	.word	0x200009b4

08004208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b094      	sub	sp, #80	@ 0x50
 800420c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800420e:	f107 0320 	add.w	r3, r7, #32
 8004212:	2230      	movs	r2, #48	@ 0x30
 8004214:	2100      	movs	r1, #0
 8004216:	4618      	mov	r0, r3
 8004218:	f008 ff17 	bl	800d04a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800421c:	f107 030c 	add.w	r3, r7, #12
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	609a      	str	r2, [r3, #8]
 8004228:	60da      	str	r2, [r3, #12]
 800422a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800422c:	2300      	movs	r3, #0
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	4b27      	ldr	r3, [pc, #156]	@ (80042d0 <SystemClock_Config+0xc8>)
 8004232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004234:	4a26      	ldr	r2, [pc, #152]	@ (80042d0 <SystemClock_Config+0xc8>)
 8004236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800423a:	6413      	str	r3, [r2, #64]	@ 0x40
 800423c:	4b24      	ldr	r3, [pc, #144]	@ (80042d0 <SystemClock_Config+0xc8>)
 800423e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004244:	60bb      	str	r3, [r7, #8]
 8004246:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004248:	2300      	movs	r3, #0
 800424a:	607b      	str	r3, [r7, #4]
 800424c:	4b21      	ldr	r3, [pc, #132]	@ (80042d4 <SystemClock_Config+0xcc>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a20      	ldr	r2, [pc, #128]	@ (80042d4 <SystemClock_Config+0xcc>)
 8004252:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004256:	6013      	str	r3, [r2, #0]
 8004258:	4b1e      	ldr	r3, [pc, #120]	@ (80042d4 <SystemClock_Config+0xcc>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004264:	2301      	movs	r3, #1
 8004266:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004268:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800426c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800426e:	2302      	movs	r3, #2
 8004270:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004272:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004276:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8004278:	230c      	movs	r3, #12
 800427a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800427c:	2360      	movs	r3, #96	@ 0x60
 800427e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004280:	2302      	movs	r3, #2
 8004282:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004284:	2304      	movs	r3, #4
 8004286:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004288:	f107 0320 	add.w	r3, r7, #32
 800428c:	4618      	mov	r0, r3
 800428e:	f003 f897 	bl	80073c0 <HAL_RCC_OscConfig>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004298:	f000 f828 	bl	80042ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800429c:	230f      	movs	r3, #15
 800429e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042a0:	2302      	movs	r3, #2
 80042a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80042a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042ae:	2300      	movs	r3, #0
 80042b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80042b2:	f107 030c 	add.w	r3, r7, #12
 80042b6:	2103      	movs	r1, #3
 80042b8:	4618      	mov	r0, r3
 80042ba:	f003 faf9 	bl	80078b0 <HAL_RCC_ClockConfig>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80042c4:	f000 f812 	bl	80042ec <Error_Handler>
  }
}
 80042c8:	bf00      	nop
 80042ca:	3750      	adds	r7, #80	@ 0x50
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40007000 	.word	0x40007000

080042d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
	BLACKBOX_StoreData();
 80042e0:	f7fe f9fe 	bl	80026e0 <BLACKBOX_StoreData>
}
 80042e4:	bf00      	nop
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042f0:	b672      	cpsid	i
}
 80042f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <Error_Handler+0x8>

080042f8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80042fc:	4b17      	ldr	r3, [pc, #92]	@ (800435c <MX_SPI1_Init+0x64>)
 80042fe:	4a18      	ldr	r2, [pc, #96]	@ (8004360 <MX_SPI1_Init+0x68>)
 8004300:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004302:	4b16      	ldr	r3, [pc, #88]	@ (800435c <MX_SPI1_Init+0x64>)
 8004304:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004308:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800430a:	4b14      	ldr	r3, [pc, #80]	@ (800435c <MX_SPI1_Init+0x64>)
 800430c:	2200      	movs	r2, #0
 800430e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004310:	4b12      	ldr	r3, [pc, #72]	@ (800435c <MX_SPI1_Init+0x64>)
 8004312:	2200      	movs	r2, #0
 8004314:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004316:	4b11      	ldr	r3, [pc, #68]	@ (800435c <MX_SPI1_Init+0x64>)
 8004318:	2200      	movs	r2, #0
 800431a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800431c:	4b0f      	ldr	r3, [pc, #60]	@ (800435c <MX_SPI1_Init+0x64>)
 800431e:	2200      	movs	r2, #0
 8004320:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004322:	4b0e      	ldr	r3, [pc, #56]	@ (800435c <MX_SPI1_Init+0x64>)
 8004324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004328:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800432a:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <MX_SPI1_Init+0x64>)
 800432c:	2200      	movs	r2, #0
 800432e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004330:	4b0a      	ldr	r3, [pc, #40]	@ (800435c <MX_SPI1_Init+0x64>)
 8004332:	2200      	movs	r2, #0
 8004334:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004336:	4b09      	ldr	r3, [pc, #36]	@ (800435c <MX_SPI1_Init+0x64>)
 8004338:	2200      	movs	r2, #0
 800433a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800433c:	4b07      	ldr	r3, [pc, #28]	@ (800435c <MX_SPI1_Init+0x64>)
 800433e:	2200      	movs	r2, #0
 8004340:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004342:	4b06      	ldr	r3, [pc, #24]	@ (800435c <MX_SPI1_Init+0x64>)
 8004344:	220a      	movs	r2, #10
 8004346:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004348:	4804      	ldr	r0, [pc, #16]	@ (800435c <MX_SPI1_Init+0x64>)
 800434a:	f003 fc91 	bl	8007c70 <HAL_SPI_Init>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004354:	f7ff ffca 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004358:	bf00      	nop
 800435a:	bd80      	pop	{r7, pc}
 800435c:	200009b8 	.word	0x200009b8
 8004360:	40013000 	.word	0x40013000

08004364 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004368:	4b17      	ldr	r3, [pc, #92]	@ (80043c8 <MX_SPI2_Init+0x64>)
 800436a:	4a18      	ldr	r2, [pc, #96]	@ (80043cc <MX_SPI2_Init+0x68>)
 800436c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800436e:	4b16      	ldr	r3, [pc, #88]	@ (80043c8 <MX_SPI2_Init+0x64>)
 8004370:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004374:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004376:	4b14      	ldr	r3, [pc, #80]	@ (80043c8 <MX_SPI2_Init+0x64>)
 8004378:	2200      	movs	r2, #0
 800437a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800437c:	4b12      	ldr	r3, [pc, #72]	@ (80043c8 <MX_SPI2_Init+0x64>)
 800437e:	2200      	movs	r2, #0
 8004380:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004382:	4b11      	ldr	r3, [pc, #68]	@ (80043c8 <MX_SPI2_Init+0x64>)
 8004384:	2200      	movs	r2, #0
 8004386:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004388:	4b0f      	ldr	r3, [pc, #60]	@ (80043c8 <MX_SPI2_Init+0x64>)
 800438a:	2200      	movs	r2, #0
 800438c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800438e:	4b0e      	ldr	r3, [pc, #56]	@ (80043c8 <MX_SPI2_Init+0x64>)
 8004390:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004394:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004396:	4b0c      	ldr	r3, [pc, #48]	@ (80043c8 <MX_SPI2_Init+0x64>)
 8004398:	2218      	movs	r2, #24
 800439a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800439c:	4b0a      	ldr	r3, [pc, #40]	@ (80043c8 <MX_SPI2_Init+0x64>)
 800439e:	2200      	movs	r2, #0
 80043a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80043a2:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <MX_SPI2_Init+0x64>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043a8:	4b07      	ldr	r3, [pc, #28]	@ (80043c8 <MX_SPI2_Init+0x64>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80043ae:	4b06      	ldr	r3, [pc, #24]	@ (80043c8 <MX_SPI2_Init+0x64>)
 80043b0:	220a      	movs	r2, #10
 80043b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80043b4:	4804      	ldr	r0, [pc, #16]	@ (80043c8 <MX_SPI2_Init+0x64>)
 80043b6:	f003 fc5b 	bl	8007c70 <HAL_SPI_Init>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80043c0:	f7ff ff94 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80043c4:	bf00      	nop
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20000a10 	.word	0x20000a10
 80043cc:	40003800 	.word	0x40003800

080043d0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80043d4:	4b17      	ldr	r3, [pc, #92]	@ (8004434 <MX_SPI3_Init+0x64>)
 80043d6:	4a18      	ldr	r2, [pc, #96]	@ (8004438 <MX_SPI3_Init+0x68>)
 80043d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80043da:	4b16      	ldr	r3, [pc, #88]	@ (8004434 <MX_SPI3_Init+0x64>)
 80043dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80043e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80043e2:	4b14      	ldr	r3, [pc, #80]	@ (8004434 <MX_SPI3_Init+0x64>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80043e8:	4b12      	ldr	r3, [pc, #72]	@ (8004434 <MX_SPI3_Init+0x64>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043ee:	4b11      	ldr	r3, [pc, #68]	@ (8004434 <MX_SPI3_Init+0x64>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004434 <MX_SPI3_Init+0x64>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80043fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004434 <MX_SPI3_Init+0x64>)
 80043fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004400:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004402:	4b0c      	ldr	r3, [pc, #48]	@ (8004434 <MX_SPI3_Init+0x64>)
 8004404:	2210      	movs	r2, #16
 8004406:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004408:	4b0a      	ldr	r3, [pc, #40]	@ (8004434 <MX_SPI3_Init+0x64>)
 800440a:	2200      	movs	r2, #0
 800440c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800440e:	4b09      	ldr	r3, [pc, #36]	@ (8004434 <MX_SPI3_Init+0x64>)
 8004410:	2200      	movs	r2, #0
 8004412:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004414:	4b07      	ldr	r3, [pc, #28]	@ (8004434 <MX_SPI3_Init+0x64>)
 8004416:	2200      	movs	r2, #0
 8004418:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800441a:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <MX_SPI3_Init+0x64>)
 800441c:	220a      	movs	r2, #10
 800441e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004420:	4804      	ldr	r0, [pc, #16]	@ (8004434 <MX_SPI3_Init+0x64>)
 8004422:	f003 fc25 	bl	8007c70 <HAL_SPI_Init>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800442c:	f7ff ff5e 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004430:	bf00      	nop
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20000a68 	.word	0x20000a68
 8004438:	40003c00 	.word	0x40003c00

0800443c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08e      	sub	sp, #56	@ 0x38
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	609a      	str	r2, [r3, #8]
 8004450:	60da      	str	r2, [r3, #12]
 8004452:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a9d      	ldr	r2, [pc, #628]	@ (80046d0 <HAL_SPI_MspInit+0x294>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d12c      	bne.n	80044b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800445e:	2300      	movs	r3, #0
 8004460:	623b      	str	r3, [r7, #32]
 8004462:	4b9c      	ldr	r3, [pc, #624]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 8004464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004466:	4a9b      	ldr	r2, [pc, #620]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 8004468:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800446c:	6453      	str	r3, [r2, #68]	@ 0x44
 800446e:	4b99      	ldr	r3, [pc, #612]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 8004470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004472:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004476:	623b      	str	r3, [r7, #32]
 8004478:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	4b95      	ldr	r3, [pc, #596]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	4a94      	ldr	r2, [pc, #592]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6313      	str	r3, [r2, #48]	@ 0x30
 800448a:	4b92      	ldr	r3, [pc, #584]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	61fb      	str	r3, [r7, #28]
 8004494:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8004496:	23e0      	movs	r3, #224	@ 0xe0
 8004498:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800449a:	2302      	movs	r3, #2
 800449c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a2:	2303      	movs	r3, #3
 80044a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044a6:	2305      	movs	r3, #5
 80044a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044ae:	4619      	mov	r1, r3
 80044b0:	4889      	ldr	r0, [pc, #548]	@ (80046d8 <HAL_SPI_MspInit+0x29c>)
 80044b2:	f001 fdc3 	bl	800603c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80044b6:	e106      	b.n	80046c6 <HAL_SPI_MspInit+0x28a>
  else if(spiHandle->Instance==SPI2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a87      	ldr	r2, [pc, #540]	@ (80046dc <HAL_SPI_MspInit+0x2a0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d162      	bne.n	8004588 <HAL_SPI_MspInit+0x14c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	4b83      	ldr	r3, [pc, #524]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	4a82      	ldr	r2, [pc, #520]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 80044cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80044d2:	4b80      	ldr	r3, [pc, #512]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044da:	61bb      	str	r3, [r7, #24]
 80044dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	4b7c      	ldr	r3, [pc, #496]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	4a7b      	ldr	r2, [pc, #492]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 80044e8:	f043 0302 	orr.w	r3, r3, #2
 80044ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ee:	4b79      	ldr	r3, [pc, #484]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 80044fa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004500:	2302      	movs	r3, #2
 8004502:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	2300      	movs	r3, #0
 8004506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004508:	2303      	movs	r3, #3
 800450a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800450c:	2305      	movs	r3, #5
 800450e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004514:	4619      	mov	r1, r3
 8004516:	4872      	ldr	r0, [pc, #456]	@ (80046e0 <HAL_SPI_MspInit+0x2a4>)
 8004518:	f001 fd90 	bl	800603c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800451c:	4b71      	ldr	r3, [pc, #452]	@ (80046e4 <HAL_SPI_MspInit+0x2a8>)
 800451e:	4a72      	ldr	r2, [pc, #456]	@ (80046e8 <HAL_SPI_MspInit+0x2ac>)
 8004520:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8004522:	4b70      	ldr	r3, [pc, #448]	@ (80046e4 <HAL_SPI_MspInit+0x2a8>)
 8004524:	2200      	movs	r2, #0
 8004526:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004528:	4b6e      	ldr	r3, [pc, #440]	@ (80046e4 <HAL_SPI_MspInit+0x2a8>)
 800452a:	2200      	movs	r2, #0
 800452c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800452e:	4b6d      	ldr	r3, [pc, #436]	@ (80046e4 <HAL_SPI_MspInit+0x2a8>)
 8004530:	2200      	movs	r2, #0
 8004532:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004534:	4b6b      	ldr	r3, [pc, #428]	@ (80046e4 <HAL_SPI_MspInit+0x2a8>)
 8004536:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800453a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800453c:	4b69      	ldr	r3, [pc, #420]	@ (80046e4 <HAL_SPI_MspInit+0x2a8>)
 800453e:	2200      	movs	r2, #0
 8004540:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004542:	4b68      	ldr	r3, [pc, #416]	@ (80046e4 <HAL_SPI_MspInit+0x2a8>)
 8004544:	2200      	movs	r2, #0
 8004546:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004548:	4b66      	ldr	r3, [pc, #408]	@ (80046e4 <HAL_SPI_MspInit+0x2a8>)
 800454a:	2200      	movs	r2, #0
 800454c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800454e:	4b65      	ldr	r3, [pc, #404]	@ (80046e4 <HAL_SPI_MspInit+0x2a8>)
 8004550:	2200      	movs	r2, #0
 8004552:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004554:	4b63      	ldr	r3, [pc, #396]	@ (80046e4 <HAL_SPI_MspInit+0x2a8>)
 8004556:	2200      	movs	r2, #0
 8004558:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800455a:	4862      	ldr	r0, [pc, #392]	@ (80046e4 <HAL_SPI_MspInit+0x2a8>)
 800455c:	f000 ff6e 	bl	800543c <HAL_DMA_Init>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8004566:	f7ff fec1 	bl	80042ec <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a5d      	ldr	r2, [pc, #372]	@ (80046e4 <HAL_SPI_MspInit+0x2a8>)
 800456e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004570:	4a5c      	ldr	r2, [pc, #368]	@ (80046e4 <HAL_SPI_MspInit+0x2a8>)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004576:	2200      	movs	r2, #0
 8004578:	2100      	movs	r1, #0
 800457a:	2024      	movs	r0, #36	@ 0x24
 800457c:	f000 ff27 	bl	80053ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004580:	2024      	movs	r0, #36	@ 0x24
 8004582:	f000 ff40 	bl	8005406 <HAL_NVIC_EnableIRQ>
}
 8004586:	e09e      	b.n	80046c6 <HAL_SPI_MspInit+0x28a>
  else if(spiHandle->Instance==SPI3)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a57      	ldr	r2, [pc, #348]	@ (80046ec <HAL_SPI_MspInit+0x2b0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	f040 8099 	bne.w	80046c6 <HAL_SPI_MspInit+0x28a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004594:	2300      	movs	r3, #0
 8004596:	613b      	str	r3, [r7, #16]
 8004598:	4b4e      	ldr	r3, [pc, #312]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	4a4d      	ldr	r2, [pc, #308]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 800459e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80045a4:	4b4b      	ldr	r3, [pc, #300]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	4b47      	ldr	r3, [pc, #284]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 80045b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b8:	4a46      	ldr	r2, [pc, #280]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 80045ba:	f043 0302 	orr.w	r3, r3, #2
 80045be:	6313      	str	r3, [r2, #48]	@ 0x30
 80045c0:	4b44      	ldr	r3, [pc, #272]	@ (80046d4 <HAL_SPI_MspInit+0x298>)
 80045c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NRF_SCK_Pin;
 80045cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d2:	2302      	movs	r3, #2
 80045d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045da:	2303      	movs	r3, #3
 80045dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80045de:	2307      	movs	r3, #7
 80045e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 80045e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045e6:	4619      	mov	r1, r3
 80045e8:	483d      	ldr	r0, [pc, #244]	@ (80046e0 <HAL_SPI_MspInit+0x2a4>)
 80045ea:	f001 fd27 	bl	800603c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NRF_MISO_Pin|NRF_MOSI_Pin;
 80045ee:	2330      	movs	r3, #48	@ 0x30
 80045f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f2:	2302      	movs	r3, #2
 80045f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045fa:	2303      	movs	r3, #3
 80045fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80045fe:	2306      	movs	r3, #6
 8004600:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004606:	4619      	mov	r1, r3
 8004608:	4835      	ldr	r0, [pc, #212]	@ (80046e0 <HAL_SPI_MspInit+0x2a4>)
 800460a:	f001 fd17 	bl	800603c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800460e:	4b38      	ldr	r3, [pc, #224]	@ (80046f0 <HAL_SPI_MspInit+0x2b4>)
 8004610:	4a38      	ldr	r2, [pc, #224]	@ (80046f4 <HAL_SPI_MspInit+0x2b8>)
 8004612:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8004614:	4b36      	ldr	r3, [pc, #216]	@ (80046f0 <HAL_SPI_MspInit+0x2b4>)
 8004616:	2200      	movs	r2, #0
 8004618:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800461a:	4b35      	ldr	r3, [pc, #212]	@ (80046f0 <HAL_SPI_MspInit+0x2b4>)
 800461c:	2200      	movs	r2, #0
 800461e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004620:	4b33      	ldr	r3, [pc, #204]	@ (80046f0 <HAL_SPI_MspInit+0x2b4>)
 8004622:	2200      	movs	r2, #0
 8004624:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004626:	4b32      	ldr	r3, [pc, #200]	@ (80046f0 <HAL_SPI_MspInit+0x2b4>)
 8004628:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800462c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800462e:	4b30      	ldr	r3, [pc, #192]	@ (80046f0 <HAL_SPI_MspInit+0x2b4>)
 8004630:	2200      	movs	r2, #0
 8004632:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004634:	4b2e      	ldr	r3, [pc, #184]	@ (80046f0 <HAL_SPI_MspInit+0x2b4>)
 8004636:	2200      	movs	r2, #0
 8004638:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800463a:	4b2d      	ldr	r3, [pc, #180]	@ (80046f0 <HAL_SPI_MspInit+0x2b4>)
 800463c:	2200      	movs	r2, #0
 800463e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004640:	4b2b      	ldr	r3, [pc, #172]	@ (80046f0 <HAL_SPI_MspInit+0x2b4>)
 8004642:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004646:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004648:	4b29      	ldr	r3, [pc, #164]	@ (80046f0 <HAL_SPI_MspInit+0x2b4>)
 800464a:	2200      	movs	r2, #0
 800464c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800464e:	4828      	ldr	r0, [pc, #160]	@ (80046f0 <HAL_SPI_MspInit+0x2b4>)
 8004650:	f000 fef4 	bl	800543c <HAL_DMA_Init>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800465a:	f7ff fe47 	bl	80042ec <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a23      	ldr	r2, [pc, #140]	@ (80046f0 <HAL_SPI_MspInit+0x2b4>)
 8004662:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004664:	4a22      	ldr	r2, [pc, #136]	@ (80046f0 <HAL_SPI_MspInit+0x2b4>)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800466a:	4b23      	ldr	r3, [pc, #140]	@ (80046f8 <HAL_SPI_MspInit+0x2bc>)
 800466c:	4a23      	ldr	r2, [pc, #140]	@ (80046fc <HAL_SPI_MspInit+0x2c0>)
 800466e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8004670:	4b21      	ldr	r3, [pc, #132]	@ (80046f8 <HAL_SPI_MspInit+0x2bc>)
 8004672:	2200      	movs	r2, #0
 8004674:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004676:	4b20      	ldr	r3, [pc, #128]	@ (80046f8 <HAL_SPI_MspInit+0x2bc>)
 8004678:	2240      	movs	r2, #64	@ 0x40
 800467a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800467c:	4b1e      	ldr	r3, [pc, #120]	@ (80046f8 <HAL_SPI_MspInit+0x2bc>)
 800467e:	2200      	movs	r2, #0
 8004680:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004682:	4b1d      	ldr	r3, [pc, #116]	@ (80046f8 <HAL_SPI_MspInit+0x2bc>)
 8004684:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004688:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800468a:	4b1b      	ldr	r3, [pc, #108]	@ (80046f8 <HAL_SPI_MspInit+0x2bc>)
 800468c:	2200      	movs	r2, #0
 800468e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004690:	4b19      	ldr	r3, [pc, #100]	@ (80046f8 <HAL_SPI_MspInit+0x2bc>)
 8004692:	2200      	movs	r2, #0
 8004694:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8004696:	4b18      	ldr	r3, [pc, #96]	@ (80046f8 <HAL_SPI_MspInit+0x2bc>)
 8004698:	2200      	movs	r2, #0
 800469a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800469c:	4b16      	ldr	r3, [pc, #88]	@ (80046f8 <HAL_SPI_MspInit+0x2bc>)
 800469e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80046a2:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046a4:	4b14      	ldr	r3, [pc, #80]	@ (80046f8 <HAL_SPI_MspInit+0x2bc>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80046aa:	4813      	ldr	r0, [pc, #76]	@ (80046f8 <HAL_SPI_MspInit+0x2bc>)
 80046ac:	f000 fec6 	bl	800543c <HAL_DMA_Init>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 80046b6:	f7ff fe19 	bl	80042ec <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a0e      	ldr	r2, [pc, #56]	@ (80046f8 <HAL_SPI_MspInit+0x2bc>)
 80046be:	649a      	str	r2, [r3, #72]	@ 0x48
 80046c0:	4a0d      	ldr	r2, [pc, #52]	@ (80046f8 <HAL_SPI_MspInit+0x2bc>)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80046c6:	bf00      	nop
 80046c8:	3738      	adds	r7, #56	@ 0x38
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40013000 	.word	0x40013000
 80046d4:	40023800 	.word	0x40023800
 80046d8:	40020000 	.word	0x40020000
 80046dc:	40003800 	.word	0x40003800
 80046e0:	40020400 	.word	0x40020400
 80046e4:	20000ac0 	.word	0x20000ac0
 80046e8:	40026058 	.word	0x40026058
 80046ec:	40003c00 	.word	0x40003c00
 80046f0:	20000b20 	.word	0x20000b20
 80046f4:	40026010 	.word	0x40026010
 80046f8:	20000b80 	.word	0x20000b80
 80046fc:	40026088 	.word	0x40026088

08004700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004706:	2300      	movs	r3, #0
 8004708:	607b      	str	r3, [r7, #4]
 800470a:	4b10      	ldr	r3, [pc, #64]	@ (800474c <HAL_MspInit+0x4c>)
 800470c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470e:	4a0f      	ldr	r2, [pc, #60]	@ (800474c <HAL_MspInit+0x4c>)
 8004710:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004714:	6453      	str	r3, [r2, #68]	@ 0x44
 8004716:	4b0d      	ldr	r3, [pc, #52]	@ (800474c <HAL_MspInit+0x4c>)
 8004718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800471e:	607b      	str	r3, [r7, #4]
 8004720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004722:	2300      	movs	r3, #0
 8004724:	603b      	str	r3, [r7, #0]
 8004726:	4b09      	ldr	r3, [pc, #36]	@ (800474c <HAL_MspInit+0x4c>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	4a08      	ldr	r2, [pc, #32]	@ (800474c <HAL_MspInit+0x4c>)
 800472c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004730:	6413      	str	r3, [r2, #64]	@ 0x40
 8004732:	4b06      	ldr	r3, [pc, #24]	@ (800474c <HAL_MspInit+0x4c>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40023800 	.word	0x40023800

08004750 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8004754:	4b0e      	ldr	r3, [pc, #56]	@ (8004790 <SDTimer_Handler+0x40>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d006      	beq.n	800476c <SDTimer_Handler+0x1c>
    Timer1--;
 800475e:	4b0c      	ldr	r3, [pc, #48]	@ (8004790 <SDTimer_Handler+0x40>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b2da      	uxtb	r2, r3
 8004768:	4b09      	ldr	r3, [pc, #36]	@ (8004790 <SDTimer_Handler+0x40>)
 800476a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800476c:	4b09      	ldr	r3, [pc, #36]	@ (8004794 <SDTimer_Handler+0x44>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d006      	beq.n	8004784 <SDTimer_Handler+0x34>
    Timer2--;
 8004776:	4b07      	ldr	r3, [pc, #28]	@ (8004794 <SDTimer_Handler+0x44>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b2da      	uxtb	r2, r3
 8004780:	4b04      	ldr	r3, [pc, #16]	@ (8004794 <SDTimer_Handler+0x44>)
 8004782:	701a      	strb	r2, [r3, #0]
}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20000be1 	.word	0x20000be1
 8004794:	20000be2 	.word	0x20000be2

08004798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800479c:	bf00      	nop
 800479e:	e7fd      	b.n	800479c <NMI_Handler+0x4>

080047a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047a4:	bf00      	nop
 80047a6:	e7fd      	b.n	80047a4 <HardFault_Handler+0x4>

080047a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047ac:	bf00      	nop
 80047ae:	e7fd      	b.n	80047ac <MemManage_Handler+0x4>

080047b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047b4:	bf00      	nop
 80047b6:	e7fd      	b.n	80047b4 <BusFault_Handler+0x4>

080047b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047bc:	bf00      	nop
 80047be:	e7fd      	b.n	80047bc <UsageFault_Handler+0x4>

080047c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80047c4:	bf00      	nop
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047ce:	b480      	push	{r7}
 80047d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047d2:	bf00      	nop
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047e0:	bf00      	nop
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
	...

080047ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 80047f0:	4b0a      	ldr	r3, [pc, #40]	@ (800481c <SysTick_Handler+0x30>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	3301      	adds	r3, #1
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	4b08      	ldr	r3, [pc, #32]	@ (800481c <SysTick_Handler+0x30>)
 80047fc:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80047fe:	4b07      	ldr	r3, [pc, #28]	@ (800481c <SysTick_Handler+0x30>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b09      	cmp	r3, #9
 8004806:	d904      	bls.n	8004812 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8004808:	4b04      	ldr	r3, [pc, #16]	@ (800481c <SysTick_Handler+0x30>)
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800480e:	f7ff ff9f 	bl	8004750 <SDTimer_Handler>
	  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004812:	f000 fa6f 	bl	8004cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004816:	bf00      	nop
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000be0 	.word	0x20000be0

08004820 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8004824:	4802      	ldr	r0, [pc, #8]	@ (8004830 <DMA1_Stream0_IRQHandler+0x10>)
 8004826:	f000 fed9 	bl	80055dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800482a:	bf00      	nop
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20000b20 	.word	0x20000b20

08004834 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004838:	4802      	ldr	r0, [pc, #8]	@ (8004844 <DMA1_Stream3_IRQHandler+0x10>)
 800483a:	f000 fecf 	bl	80055dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000ac0 	.word	0x20000ac0

08004848 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800484c:	4802      	ldr	r0, [pc, #8]	@ (8004858 <DMA1_Stream5_IRQHandler+0x10>)
 800484e:	f000 fec5 	bl	80055dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004852:	bf00      	nop
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000b80 	.word	0x20000b80

0800485c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004860:	4802      	ldr	r0, [pc, #8]	@ (800486c <SPI2_IRQHandler+0x10>)
 8004862:	f003 fe95 	bl	8008590 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004866:	bf00      	nop
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000a10 	.word	0x20000a10

08004870 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004874:	4802      	ldr	r0, [pc, #8]	@ (8004880 <TIM5_IRQHandler+0x10>)
 8004876:	f004 faa9 	bl	8008dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800487a:	bf00      	nop
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000c2c 	.word	0x20000c2c

08004884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004888:	4b06      	ldr	r3, [pc, #24]	@ (80048a4 <SystemInit+0x20>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488e:	4a05      	ldr	r2, [pc, #20]	@ (80048a4 <SystemInit+0x20>)
 8004890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	e000ed00 	.word	0xe000ed00

080048a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08e      	sub	sp, #56	@ 0x38
 80048ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	605a      	str	r2, [r3, #4]
 80048b8:	609a      	str	r2, [r3, #8]
 80048ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048bc:	f107 0320 	add.w	r3, r7, #32
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048c6:	1d3b      	adds	r3, r7, #4
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	609a      	str	r2, [r3, #8]
 80048d0:	60da      	str	r2, [r3, #12]
 80048d2:	611a      	str	r2, [r3, #16]
 80048d4:	615a      	str	r2, [r3, #20]
 80048d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80048d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004990 <MX_TIM2_Init+0xe8>)
 80048da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80048de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 80048e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004990 <MX_TIM2_Init+0xe8>)
 80048e2:	2263      	movs	r2, #99	@ 0x63
 80048e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004990 <MX_TIM2_Init+0xe8>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 80048ec:	4b28      	ldr	r3, [pc, #160]	@ (8004990 <MX_TIM2_Init+0xe8>)
 80048ee:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80048f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048f4:	4b26      	ldr	r3, [pc, #152]	@ (8004990 <MX_TIM2_Init+0xe8>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048fa:	4b25      	ldr	r3, [pc, #148]	@ (8004990 <MX_TIM2_Init+0xe8>)
 80048fc:	2280      	movs	r2, #128	@ 0x80
 80048fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004900:	4823      	ldr	r0, [pc, #140]	@ (8004990 <MX_TIM2_Init+0xe8>)
 8004902:	f004 f8a7 	bl	8008a54 <HAL_TIM_Base_Init>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800490c:	f7ff fcee 	bl	80042ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004910:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004914:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004916:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800491a:	4619      	mov	r1, r3
 800491c:	481c      	ldr	r0, [pc, #112]	@ (8004990 <MX_TIM2_Init+0xe8>)
 800491e:	f004 fc07 	bl	8009130 <HAL_TIM_ConfigClockSource>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004928:	f7ff fce0 	bl	80042ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800492c:	4818      	ldr	r0, [pc, #96]	@ (8004990 <MX_TIM2_Init+0xe8>)
 800492e:	f004 f943 	bl	8008bb8 <HAL_TIM_PWM_Init>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004938:	f7ff fcd8 	bl	80042ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800493c:	2300      	movs	r3, #0
 800493e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004940:	2300      	movs	r3, #0
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004944:	f107 0320 	add.w	r3, r7, #32
 8004948:	4619      	mov	r1, r3
 800494a:	4811      	ldr	r0, [pc, #68]	@ (8004990 <MX_TIM2_Init+0xe8>)
 800494c:	f004 ffb8 	bl	80098c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004956:	f7ff fcc9 	bl	80042ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800495a:	2360      	movs	r3, #96	@ 0x60
 800495c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	220c      	movs	r2, #12
 800496e:	4619      	mov	r1, r3
 8004970:	4807      	ldr	r0, [pc, #28]	@ (8004990 <MX_TIM2_Init+0xe8>)
 8004972:	f004 fb1b 	bl	8008fac <HAL_TIM_PWM_ConfigChannel>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800497c:	f7ff fcb6 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004980:	4803      	ldr	r0, [pc, #12]	@ (8004990 <MX_TIM2_Init+0xe8>)
 8004982:	f000 f891 	bl	8004aa8 <HAL_TIM_MspPostInit>

}
 8004986:	bf00      	nop
 8004988:	3738      	adds	r7, #56	@ 0x38
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000be4 	.word	0x20000be4

08004994 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800499a:	f107 0308 	add.w	r3, r7, #8
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	605a      	str	r2, [r3, #4]
 80049a4:	609a      	str	r2, [r3, #8]
 80049a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049a8:	463b      	mov	r3, r7
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80049b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a28 <MX_TIM5_Init+0x94>)
 80049b2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a2c <MX_TIM5_Init+0x98>)
 80049b4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1000-1;
 80049b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a28 <MX_TIM5_Init+0x94>)
 80049b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80049bc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049be:	4b1a      	ldr	r3, [pc, #104]	@ (8004a28 <MX_TIM5_Init+0x94>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80049c4:	4b18      	ldr	r3, [pc, #96]	@ (8004a28 <MX_TIM5_Init+0x94>)
 80049c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80049ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049cc:	4b16      	ldr	r3, [pc, #88]	@ (8004a28 <MX_TIM5_Init+0x94>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049d2:	4b15      	ldr	r3, [pc, #84]	@ (8004a28 <MX_TIM5_Init+0x94>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80049d8:	4813      	ldr	r0, [pc, #76]	@ (8004a28 <MX_TIM5_Init+0x94>)
 80049da:	f004 f83b 	bl	8008a54 <HAL_TIM_Base_Init>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80049e4:	f7ff fc82 	bl	80042ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80049ee:	f107 0308 	add.w	r3, r7, #8
 80049f2:	4619      	mov	r1, r3
 80049f4:	480c      	ldr	r0, [pc, #48]	@ (8004a28 <MX_TIM5_Init+0x94>)
 80049f6:	f004 fb9b 	bl	8009130 <HAL_TIM_ConfigClockSource>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004a00:	f7ff fc74 	bl	80042ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a04:	2300      	movs	r3, #0
 8004a06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004a0c:	463b      	mov	r3, r7
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4805      	ldr	r0, [pc, #20]	@ (8004a28 <MX_TIM5_Init+0x94>)
 8004a12:	f004 ff55 	bl	80098c0 <HAL_TIMEx_MasterConfigSynchronization>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004a1c:	f7ff fc66 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004a20:	bf00      	nop
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000c2c 	.word	0x20000c2c
 8004a2c:	40000c00 	.word	0x40000c00

08004a30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a40:	d10e      	bne.n	8004a60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	4b16      	ldr	r3, [pc, #88]	@ (8004aa0 <HAL_TIM_Base_MspInit+0x70>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4a:	4a15      	ldr	r2, [pc, #84]	@ (8004aa0 <HAL_TIM_Base_MspInit+0x70>)
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a52:	4b13      	ldr	r3, [pc, #76]	@ (8004aa0 <HAL_TIM_Base_MspInit+0x70>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004a5e:	e01a      	b.n	8004a96 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a0f      	ldr	r2, [pc, #60]	@ (8004aa4 <HAL_TIM_Base_MspInit+0x74>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d115      	bne.n	8004a96 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa0 <HAL_TIM_Base_MspInit+0x70>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a72:	4a0b      	ldr	r2, [pc, #44]	@ (8004aa0 <HAL_TIM_Base_MspInit+0x70>)
 8004a74:	f043 0308 	orr.w	r3, r3, #8
 8004a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a7a:	4b09      	ldr	r3, [pc, #36]	@ (8004aa0 <HAL_TIM_Base_MspInit+0x70>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004a86:	2200      	movs	r2, #0
 8004a88:	2100      	movs	r1, #0
 8004a8a:	2032      	movs	r0, #50	@ 0x32
 8004a8c:	f000 fc9f 	bl	80053ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004a90:	2032      	movs	r0, #50	@ 0x32
 8004a92:	f000 fcb8 	bl	8005406 <HAL_NVIC_EnableIRQ>
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	40000c00 	.word	0x40000c00

08004aa8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab0:	f107 030c 	add.w	r3, r7, #12
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	605a      	str	r2, [r3, #4]
 8004aba:	609a      	str	r2, [r3, #8]
 8004abc:	60da      	str	r2, [r3, #12]
 8004abe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac8:	d11d      	bne.n	8004b06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	4b10      	ldr	r3, [pc, #64]	@ (8004b10 <HAL_TIM_MspPostInit+0x68>)
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad2:	4a0f      	ldr	r2, [pc, #60]	@ (8004b10 <HAL_TIM_MspPostInit+0x68>)
 8004ad4:	f043 0301 	orr.w	r3, r3, #1
 8004ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ada:	4b0d      	ldr	r3, [pc, #52]	@ (8004b10 <HAL_TIM_MspPostInit+0x68>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aea:	2302      	movs	r3, #2
 8004aec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004af6:	2301      	movs	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004afa:	f107 030c 	add.w	r3, r7, #12
 8004afe:	4619      	mov	r1, r3
 8004b00:	4804      	ldr	r0, [pc, #16]	@ (8004b14 <HAL_TIM_MspPostInit+0x6c>)
 8004b02:	f001 fa9b 	bl	800603c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004b06:	bf00      	nop
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40023800 	.word	0x40023800
 8004b14:	40020000 	.word	0x40020000

08004b18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004b1c:	4b11      	ldr	r3, [pc, #68]	@ (8004b64 <MX_USART1_UART_Init+0x4c>)
 8004b1e:	4a12      	ldr	r2, [pc, #72]	@ (8004b68 <MX_USART1_UART_Init+0x50>)
 8004b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004b22:	4b10      	ldr	r3, [pc, #64]	@ (8004b64 <MX_USART1_UART_Init+0x4c>)
 8004b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004b64 <MX_USART1_UART_Init+0x4c>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004b30:	4b0c      	ldr	r3, [pc, #48]	@ (8004b64 <MX_USART1_UART_Init+0x4c>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004b36:	4b0b      	ldr	r3, [pc, #44]	@ (8004b64 <MX_USART1_UART_Init+0x4c>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004b3c:	4b09      	ldr	r3, [pc, #36]	@ (8004b64 <MX_USART1_UART_Init+0x4c>)
 8004b3e:	220c      	movs	r2, #12
 8004b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b42:	4b08      	ldr	r3, [pc, #32]	@ (8004b64 <MX_USART1_UART_Init+0x4c>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b48:	4b06      	ldr	r3, [pc, #24]	@ (8004b64 <MX_USART1_UART_Init+0x4c>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004b4e:	4805      	ldr	r0, [pc, #20]	@ (8004b64 <MX_USART1_UART_Init+0x4c>)
 8004b50:	f004 ff38 	bl	80099c4 <HAL_UART_Init>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004b5a:	f7ff fbc7 	bl	80042ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004b5e:	bf00      	nop
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000c74 	.word	0x20000c74
 8004b68:	40011000 	.word	0x40011000

08004b6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08a      	sub	sp, #40	@ 0x28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b74:	f107 0314 	add.w	r3, r7, #20
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a19      	ldr	r2, [pc, #100]	@ (8004bf0 <HAL_UART_MspInit+0x84>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d12c      	bne.n	8004be8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	4b18      	ldr	r3, [pc, #96]	@ (8004bf4 <HAL_UART_MspInit+0x88>)
 8004b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b96:	4a17      	ldr	r2, [pc, #92]	@ (8004bf4 <HAL_UART_MspInit+0x88>)
 8004b98:	f043 0310 	orr.w	r3, r3, #16
 8004b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b9e:	4b15      	ldr	r3, [pc, #84]	@ (8004bf4 <HAL_UART_MspInit+0x88>)
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba2:	f003 0310 	and.w	r3, r3, #16
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	4b11      	ldr	r3, [pc, #68]	@ (8004bf4 <HAL_UART_MspInit+0x88>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb2:	4a10      	ldr	r2, [pc, #64]	@ (8004bf4 <HAL_UART_MspInit+0x88>)
 8004bb4:	f043 0301 	orr.w	r3, r3, #1
 8004bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bba:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf4 <HAL_UART_MspInit+0x88>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8004bc6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004bd8:	2307      	movs	r3, #7
 8004bda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bdc:	f107 0314 	add.w	r3, r7, #20
 8004be0:	4619      	mov	r1, r3
 8004be2:	4805      	ldr	r0, [pc, #20]	@ (8004bf8 <HAL_UART_MspInit+0x8c>)
 8004be4:	f001 fa2a 	bl	800603c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004be8:	bf00      	nop
 8004bea:	3728      	adds	r7, #40	@ 0x28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40011000 	.word	0x40011000
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	40020000 	.word	0x40020000

08004bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004bfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004c34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004c00:	f7ff fe40 	bl	8004884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004c04:	480c      	ldr	r0, [pc, #48]	@ (8004c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004c06:	490d      	ldr	r1, [pc, #52]	@ (8004c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004c08:	4a0d      	ldr	r2, [pc, #52]	@ (8004c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c0c:	e002      	b.n	8004c14 <LoopCopyDataInit>

08004c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c12:	3304      	adds	r3, #4

08004c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c18:	d3f9      	bcc.n	8004c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8004c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c20:	e001      	b.n	8004c26 <LoopFillZerobss>

08004c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c24:	3204      	adds	r2, #4

08004c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c28:	d3fb      	bcc.n	8004c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c2a:	f008 fa1d 	bl	800d068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c2e:	f7ff fa99 	bl	8004164 <main>
  bx  lr    
 8004c32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c3c:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8004c40:	0800dda0 	.word	0x0800dda0
  ldr r2, =_sbss
 8004c44:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8004c48:	20000e54 	.word	0x20000e54

08004c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c4c:	e7fe      	b.n	8004c4c <ADC_IRQHandler>
	...

08004c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c54:	4b0e      	ldr	r3, [pc, #56]	@ (8004c90 <HAL_Init+0x40>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a0d      	ldr	r2, [pc, #52]	@ (8004c90 <HAL_Init+0x40>)
 8004c5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c60:	4b0b      	ldr	r3, [pc, #44]	@ (8004c90 <HAL_Init+0x40>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a0a      	ldr	r2, [pc, #40]	@ (8004c90 <HAL_Init+0x40>)
 8004c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c6c:	4b08      	ldr	r3, [pc, #32]	@ (8004c90 <HAL_Init+0x40>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a07      	ldr	r2, [pc, #28]	@ (8004c90 <HAL_Init+0x40>)
 8004c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c78:	2003      	movs	r0, #3
 8004c7a:	f000 fb9d 	bl	80053b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c7e:	2001      	movs	r0, #1
 8004c80:	f000 f808 	bl	8004c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c84:	f7ff fd3c 	bl	8004700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40023c00 	.word	0x40023c00

08004c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c9c:	4b12      	ldr	r3, [pc, #72]	@ (8004ce8 <HAL_InitTick+0x54>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	4b12      	ldr	r3, [pc, #72]	@ (8004cec <HAL_InitTick+0x58>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fbb5 	bl	8005422 <HAL_SYSTICK_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e00e      	b.n	8004ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b0f      	cmp	r3, #15
 8004cc6:	d80a      	bhi.n	8004cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cc8:	2200      	movs	r2, #0
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd0:	f000 fb7d 	bl	80053ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cd4:	4a06      	ldr	r2, [pc, #24]	@ (8004cf0 <HAL_InitTick+0x5c>)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e000      	b.n	8004ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	200000ac 	.word	0x200000ac
 8004cec:	200000b4 	.word	0x200000b4
 8004cf0:	200000b0 	.word	0x200000b0

08004cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cf8:	4b06      	ldr	r3, [pc, #24]	@ (8004d14 <HAL_IncTick+0x20>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4b06      	ldr	r3, [pc, #24]	@ (8004d18 <HAL_IncTick+0x24>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4413      	add	r3, r2
 8004d04:	4a04      	ldr	r2, [pc, #16]	@ (8004d18 <HAL_IncTick+0x24>)
 8004d06:	6013      	str	r3, [r2, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	200000b4 	.word	0x200000b4
 8004d18:	20000cbc 	.word	0x20000cbc

08004d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8004d20:	4b03      	ldr	r3, [pc, #12]	@ (8004d30 <HAL_GetTick+0x14>)
 8004d22:	681b      	ldr	r3, [r3, #0]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000cbc 	.word	0x20000cbc

08004d34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e033      	b.n	8004db2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fe fa8c 	bl	8003270 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6a:	f003 0310 	and.w	r3, r3, #16
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d118      	bne.n	8004da4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004d7a:	f023 0302 	bic.w	r3, r3, #2
 8004d7e:	f043 0202 	orr.w	r2, r3, #2
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f94a 	bl	8005020 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	f023 0303 	bic.w	r3, r3, #3
 8004d9a:	f043 0201 	orr.w	r2, r3, #1
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	641a      	str	r2, [r3, #64]	@ 0x40
 8004da2:	e001      	b.n	8004da8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x1c>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e113      	b.n	8005000 <HAL_ADC_ConfigChannel+0x244>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b09      	cmp	r3, #9
 8004de6:	d925      	bls.n	8004e34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68d9      	ldr	r1, [r3, #12]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	4613      	mov	r3, r2
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	4413      	add	r3, r2
 8004dfc:	3b1e      	subs	r3, #30
 8004dfe:	2207      	movs	r2, #7
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	43da      	mvns	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	400a      	ands	r2, r1
 8004e0c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68d9      	ldr	r1, [r3, #12]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	4618      	mov	r0, r3
 8004e20:	4603      	mov	r3, r0
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	4403      	add	r3, r0
 8004e26:	3b1e      	subs	r3, #30
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	60da      	str	r2, [r3, #12]
 8004e32:	e022      	b.n	8004e7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6919      	ldr	r1, [r3, #16]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	4613      	mov	r3, r2
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	4413      	add	r3, r2
 8004e48:	2207      	movs	r2, #7
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	43da      	mvns	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	400a      	ands	r2, r1
 8004e56:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6919      	ldr	r1, [r3, #16]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	4618      	mov	r0, r3
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	4403      	add	r3, r0
 8004e70:	409a      	lsls	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b06      	cmp	r3, #6
 8004e80:	d824      	bhi.n	8004ecc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	3b05      	subs	r3, #5
 8004e94:	221f      	movs	r2, #31
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43da      	mvns	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	400a      	ands	r2, r1
 8004ea2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	3b05      	subs	r3, #5
 8004ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004eca:	e04c      	b.n	8004f66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b0c      	cmp	r3, #12
 8004ed2:	d824      	bhi.n	8004f1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	3b23      	subs	r3, #35	@ 0x23
 8004ee6:	221f      	movs	r2, #31
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	43da      	mvns	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	400a      	ands	r2, r1
 8004ef4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	4618      	mov	r0, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	3b23      	subs	r3, #35	@ 0x23
 8004f10:	fa00 f203 	lsl.w	r2, r0, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f1c:	e023      	b.n	8004f66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3b41      	subs	r3, #65	@ 0x41
 8004f30:	221f      	movs	r2, #31
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	43da      	mvns	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	400a      	ands	r2, r1
 8004f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	3b41      	subs	r3, #65	@ 0x41
 8004f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f66:	4b29      	ldr	r3, [pc, #164]	@ (800500c <HAL_ADC_ConfigChannel+0x250>)
 8004f68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a28      	ldr	r2, [pc, #160]	@ (8005010 <HAL_ADC_ConfigChannel+0x254>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d10f      	bne.n	8004f94 <HAL_ADC_ConfigChannel+0x1d8>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b12      	cmp	r3, #18
 8004f7a:	d10b      	bne.n	8004f94 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1d      	ldr	r2, [pc, #116]	@ (8005010 <HAL_ADC_ConfigChannel+0x254>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d12b      	bne.n	8004ff6 <HAL_ADC_ConfigChannel+0x23a>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8005014 <HAL_ADC_ConfigChannel+0x258>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <HAL_ADC_ConfigChannel+0x1f4>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b11      	cmp	r3, #17
 8004fae:	d122      	bne.n	8004ff6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a11      	ldr	r2, [pc, #68]	@ (8005014 <HAL_ADC_ConfigChannel+0x258>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d111      	bne.n	8004ff6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004fd2:	4b11      	ldr	r3, [pc, #68]	@ (8005018 <HAL_ADC_ConfigChannel+0x25c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a11      	ldr	r2, [pc, #68]	@ (800501c <HAL_ADC_ConfigChannel+0x260>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	0c9a      	lsrs	r2, r3, #18
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004fe8:	e002      	b.n	8004ff0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f9      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	40012300 	.word	0x40012300
 8005010:	40012000 	.word	0x40012000
 8005014:	10000012 	.word	0x10000012
 8005018:	200000ac 	.word	0x200000ac
 800501c:	431bde83 	.word	0x431bde83

08005020 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005028:	4b79      	ldr	r3, [pc, #484]	@ (8005210 <ADC_Init+0x1f0>)
 800502a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	431a      	orrs	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6859      	ldr	r1, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	021a      	lsls	r2, r3, #8
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005078:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6859      	ldr	r1, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800509a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6899      	ldr	r1, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68da      	ldr	r2, [r3, #12]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b2:	4a58      	ldr	r2, [pc, #352]	@ (8005214 <ADC_Init+0x1f4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d022      	beq.n	80050fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80050c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6899      	ldr	r1, [r3, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80050e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6899      	ldr	r1, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	609a      	str	r2, [r3, #8]
 80050fc:	e00f      	b.n	800511e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800510c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800511c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0202 	bic.w	r2, r2, #2
 800512c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6899      	ldr	r1, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	7e1b      	ldrb	r3, [r3, #24]
 8005138:	005a      	lsls	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01b      	beq.n	8005184 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800515a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800516a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6859      	ldr	r1, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005176:	3b01      	subs	r3, #1
 8005178:	035a      	lsls	r2, r3, #13
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	605a      	str	r2, [r3, #4]
 8005182:	e007      	b.n	8005194 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005192:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80051a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	051a      	lsls	r2, r3, #20
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80051c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6899      	ldr	r1, [r3, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80051d6:	025a      	lsls	r2, r3, #9
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6899      	ldr	r1, [r3, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	029a      	lsls	r2, r3, #10
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	609a      	str	r2, [r3, #8]
}
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	40012300 	.word	0x40012300
 8005214:	0f000001 	.word	0x0f000001

08005218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005228:	4b0c      	ldr	r3, [pc, #48]	@ (800525c <__NVIC_SetPriorityGrouping+0x44>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005234:	4013      	ands	r3, r2
 8005236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005240:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800524a:	4a04      	ldr	r2, [pc, #16]	@ (800525c <__NVIC_SetPriorityGrouping+0x44>)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	60d3      	str	r3, [r2, #12]
}
 8005250:	bf00      	nop
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	e000ed00 	.word	0xe000ed00

08005260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005264:	4b04      	ldr	r3, [pc, #16]	@ (8005278 <__NVIC_GetPriorityGrouping+0x18>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	0a1b      	lsrs	r3, r3, #8
 800526a:	f003 0307 	and.w	r3, r3, #7
}
 800526e:	4618      	mov	r0, r3
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	e000ed00 	.word	0xe000ed00

0800527c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800528a:	2b00      	cmp	r3, #0
 800528c:	db0b      	blt.n	80052a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	f003 021f 	and.w	r2, r3, #31
 8005294:	4907      	ldr	r1, [pc, #28]	@ (80052b4 <__NVIC_EnableIRQ+0x38>)
 8005296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	2001      	movs	r0, #1
 800529e:	fa00 f202 	lsl.w	r2, r0, r2
 80052a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	e000e100 	.word	0xe000e100

080052b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	6039      	str	r1, [r7, #0]
 80052c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	db0a      	blt.n	80052e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	490c      	ldr	r1, [pc, #48]	@ (8005304 <__NVIC_SetPriority+0x4c>)
 80052d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d6:	0112      	lsls	r2, r2, #4
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	440b      	add	r3, r1
 80052dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052e0:	e00a      	b.n	80052f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	4908      	ldr	r1, [pc, #32]	@ (8005308 <__NVIC_SetPriority+0x50>)
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	3b04      	subs	r3, #4
 80052f0:	0112      	lsls	r2, r2, #4
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	440b      	add	r3, r1
 80052f6:	761a      	strb	r2, [r3, #24]
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	e000e100 	.word	0xe000e100
 8005308:	e000ed00 	.word	0xe000ed00

0800530c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800530c:	b480      	push	{r7}
 800530e:	b089      	sub	sp, #36	@ 0x24
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f1c3 0307 	rsb	r3, r3, #7
 8005326:	2b04      	cmp	r3, #4
 8005328:	bf28      	it	cs
 800532a:	2304      	movcs	r3, #4
 800532c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	3304      	adds	r3, #4
 8005332:	2b06      	cmp	r3, #6
 8005334:	d902      	bls.n	800533c <NVIC_EncodePriority+0x30>
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	3b03      	subs	r3, #3
 800533a:	e000      	b.n	800533e <NVIC_EncodePriority+0x32>
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005340:	f04f 32ff 	mov.w	r2, #4294967295
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43da      	mvns	r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	401a      	ands	r2, r3
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005354:	f04f 31ff 	mov.w	r1, #4294967295
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	fa01 f303 	lsl.w	r3, r1, r3
 800535e:	43d9      	mvns	r1, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005364:	4313      	orrs	r3, r2
         );
}
 8005366:	4618      	mov	r0, r3
 8005368:	3724      	adds	r7, #36	@ 0x24
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
	...

08005374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3b01      	subs	r3, #1
 8005380:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005384:	d301      	bcc.n	800538a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005386:	2301      	movs	r3, #1
 8005388:	e00f      	b.n	80053aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800538a:	4a0a      	ldr	r2, [pc, #40]	@ (80053b4 <SysTick_Config+0x40>)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3b01      	subs	r3, #1
 8005390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005392:	210f      	movs	r1, #15
 8005394:	f04f 30ff 	mov.w	r0, #4294967295
 8005398:	f7ff ff8e 	bl	80052b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800539c:	4b05      	ldr	r3, [pc, #20]	@ (80053b4 <SysTick_Config+0x40>)
 800539e:	2200      	movs	r2, #0
 80053a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053a2:	4b04      	ldr	r3, [pc, #16]	@ (80053b4 <SysTick_Config+0x40>)
 80053a4:	2207      	movs	r2, #7
 80053a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	e000e010 	.word	0xe000e010

080053b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff ff29 	bl	8005218 <__NVIC_SetPriorityGrouping>
}
 80053c6:	bf00      	nop
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b086      	sub	sp, #24
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	4603      	mov	r3, r0
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053e0:	f7ff ff3e 	bl	8005260 <__NVIC_GetPriorityGrouping>
 80053e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	6978      	ldr	r0, [r7, #20]
 80053ec:	f7ff ff8e 	bl	800530c <NVIC_EncodePriority>
 80053f0:	4602      	mov	r2, r0
 80053f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053f6:	4611      	mov	r1, r2
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff ff5d 	bl	80052b8 <__NVIC_SetPriority>
}
 80053fe:	bf00      	nop
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	4603      	mov	r3, r0
 800540e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff ff31 	bl	800527c <__NVIC_EnableIRQ>
}
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005422:	b580      	push	{r7, lr}
 8005424:	b082      	sub	sp, #8
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff ffa2 	bl	8005374 <SysTick_Config>
 8005430:	4603      	mov	r3, r0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005448:	f7ff fc68 	bl	8004d1c <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e099      	b.n	800558c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0201 	bic.w	r2, r2, #1
 8005476:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005478:	e00f      	b.n	800549a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800547a:	f7ff fc4f 	bl	8004d1c <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b05      	cmp	r3, #5
 8005486:	d908      	bls.n	800549a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2203      	movs	r2, #3
 8005492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e078      	b.n	800558c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1e8      	bne.n	800547a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4b38      	ldr	r3, [pc, #224]	@ (8005594 <HAL_DMA_Init+0x158>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d107      	bne.n	8005504 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fc:	4313      	orrs	r3, r2
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f023 0307 	bic.w	r3, r3, #7
 800551a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552a:	2b04      	cmp	r3, #4
 800552c:	d117      	bne.n	800555e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4313      	orrs	r3, r2
 8005536:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00e      	beq.n	800555e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fa0b 	bl	800595c <DMA_CheckFifoParam>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d008      	beq.n	800555e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2240      	movs	r2, #64	@ 0x40
 8005550:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800555a:	2301      	movs	r3, #1
 800555c:	e016      	b.n	800558c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f9c2 	bl	80058f0 <DMA_CalcBaseAndBitshift>
 800556c:	4603      	mov	r3, r0
 800556e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005574:	223f      	movs	r2, #63	@ 0x3f
 8005576:	409a      	lsls	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	f010803f 	.word	0xf010803f

08005598 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d004      	beq.n	80055b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2280      	movs	r2, #128	@ 0x80
 80055b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e00c      	b.n	80055d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2205      	movs	r2, #5
 80055ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0201 	bic.w	r2, r2, #1
 80055cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055e8:	4b8e      	ldr	r3, [pc, #568]	@ (8005824 <HAL_DMA_IRQHandler+0x248>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a8e      	ldr	r2, [pc, #568]	@ (8005828 <HAL_DMA_IRQHandler+0x24c>)
 80055ee:	fba2 2303 	umull	r2, r3, r2, r3
 80055f2:	0a9b      	lsrs	r3, r3, #10
 80055f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005606:	2208      	movs	r2, #8
 8005608:	409a      	lsls	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4013      	ands	r3, r2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d01a      	beq.n	8005648 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	d013      	beq.n	8005648 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0204 	bic.w	r2, r2, #4
 800562e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005634:	2208      	movs	r2, #8
 8005636:	409a      	lsls	r2, r3
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005640:	f043 0201 	orr.w	r2, r3, #1
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800564c:	2201      	movs	r2, #1
 800564e:	409a      	lsls	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4013      	ands	r3, r2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d012      	beq.n	800567e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00b      	beq.n	800567e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800566a:	2201      	movs	r2, #1
 800566c:	409a      	lsls	r2, r3
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005676:	f043 0202 	orr.w	r2, r3, #2
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005682:	2204      	movs	r2, #4
 8005684:	409a      	lsls	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4013      	ands	r3, r2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d012      	beq.n	80056b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a0:	2204      	movs	r2, #4
 80056a2:	409a      	lsls	r2, r3
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ac:	f043 0204 	orr.w	r2, r3, #4
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b8:	2210      	movs	r2, #16
 80056ba:	409a      	lsls	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4013      	ands	r3, r2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d043      	beq.n	800574c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d03c      	beq.n	800574c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d6:	2210      	movs	r2, #16
 80056d8:	409a      	lsls	r2, r3
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d018      	beq.n	800571e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d108      	bne.n	800570c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d024      	beq.n	800574c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	4798      	blx	r3
 800570a:	e01f      	b.n	800574c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01b      	beq.n	800574c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	4798      	blx	r3
 800571c:	e016      	b.n	800574c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005728:	2b00      	cmp	r3, #0
 800572a:	d107      	bne.n	800573c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0208 	bic.w	r2, r2, #8
 800573a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005750:	2220      	movs	r2, #32
 8005752:	409a      	lsls	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4013      	ands	r3, r2
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 808f 	beq.w	800587c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 8087 	beq.w	800587c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005772:	2220      	movs	r2, #32
 8005774:	409a      	lsls	r2, r3
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b05      	cmp	r3, #5
 8005784:	d136      	bne.n	80057f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0216 	bic.w	r2, r2, #22
 8005794:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695a      	ldr	r2, [r3, #20]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d103      	bne.n	80057b6 <HAL_DMA_IRQHandler+0x1da>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d007      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0208 	bic.w	r2, r2, #8
 80057c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ca:	223f      	movs	r2, #63	@ 0x3f
 80057cc:	409a      	lsls	r2, r3
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d07e      	beq.n	80058e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	4798      	blx	r3
        }
        return;
 80057f2:	e079      	b.n	80058e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01d      	beq.n	800583e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10d      	bne.n	800582c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005814:	2b00      	cmp	r3, #0
 8005816:	d031      	beq.n	800587c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	4798      	blx	r3
 8005820:	e02c      	b.n	800587c <HAL_DMA_IRQHandler+0x2a0>
 8005822:	bf00      	nop
 8005824:	200000ac 	.word	0x200000ac
 8005828:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d023      	beq.n	800587c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
 800583c:	e01e      	b.n	800587c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10f      	bne.n	800586c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0210 	bic.w	r2, r2, #16
 800585a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005880:	2b00      	cmp	r3, #0
 8005882:	d032      	beq.n	80058ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d022      	beq.n	80058d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2205      	movs	r2, #5
 8005894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0201 	bic.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	3301      	adds	r3, #1
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d307      	bcc.n	80058c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f2      	bne.n	80058a8 <HAL_DMA_IRQHandler+0x2cc>
 80058c2:	e000      	b.n	80058c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80058c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d005      	beq.n	80058ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	4798      	blx	r3
 80058e6:	e000      	b.n	80058ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80058e8:	bf00      	nop
    }
  }
}
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	3b10      	subs	r3, #16
 8005900:	4a14      	ldr	r2, [pc, #80]	@ (8005954 <DMA_CalcBaseAndBitshift+0x64>)
 8005902:	fba2 2303 	umull	r2, r3, r2, r3
 8005906:	091b      	lsrs	r3, r3, #4
 8005908:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800590a:	4a13      	ldr	r2, [pc, #76]	@ (8005958 <DMA_CalcBaseAndBitshift+0x68>)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b03      	cmp	r3, #3
 800591c:	d909      	bls.n	8005932 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005926:	f023 0303 	bic.w	r3, r3, #3
 800592a:	1d1a      	adds	r2, r3, #4
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005930:	e007      	b.n	8005942 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800593a:	f023 0303 	bic.w	r3, r3, #3
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	aaaaaaab 	.word	0xaaaaaaab
 8005958:	0800dc90 	.word	0x0800dc90

0800595c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d11f      	bne.n	80059b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2b03      	cmp	r3, #3
 800597a:	d856      	bhi.n	8005a2a <DMA_CheckFifoParam+0xce>
 800597c:	a201      	add	r2, pc, #4	@ (adr r2, 8005984 <DMA_CheckFifoParam+0x28>)
 800597e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005982:	bf00      	nop
 8005984:	08005995 	.word	0x08005995
 8005988:	080059a7 	.word	0x080059a7
 800598c:	08005995 	.word	0x08005995
 8005990:	08005a2b 	.word	0x08005a2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d046      	beq.n	8005a2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059a4:	e043      	b.n	8005a2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80059ae:	d140      	bne.n	8005a32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b4:	e03d      	b.n	8005a32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059be:	d121      	bne.n	8005a04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d837      	bhi.n	8005a36 <DMA_CheckFifoParam+0xda>
 80059c6:	a201      	add	r2, pc, #4	@ (adr r2, 80059cc <DMA_CheckFifoParam+0x70>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	080059dd 	.word	0x080059dd
 80059d0:	080059e3 	.word	0x080059e3
 80059d4:	080059dd 	.word	0x080059dd
 80059d8:	080059f5 	.word	0x080059f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	73fb      	strb	r3, [r7, #15]
      break;
 80059e0:	e030      	b.n	8005a44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d025      	beq.n	8005a3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059f2:	e022      	b.n	8005a3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80059fc:	d11f      	bne.n	8005a3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a02:	e01c      	b.n	8005a3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d903      	bls.n	8005a12 <DMA_CheckFifoParam+0xb6>
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d003      	beq.n	8005a18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a10:	e018      	b.n	8005a44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	73fb      	strb	r3, [r7, #15]
      break;
 8005a16:	e015      	b.n	8005a44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00e      	beq.n	8005a42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	73fb      	strb	r3, [r7, #15]
      break;
 8005a28:	e00b      	b.n	8005a42 <DMA_CheckFifoParam+0xe6>
      break;
 8005a2a:	bf00      	nop
 8005a2c:	e00a      	b.n	8005a44 <DMA_CheckFifoParam+0xe8>
      break;
 8005a2e:	bf00      	nop
 8005a30:	e008      	b.n	8005a44 <DMA_CheckFifoParam+0xe8>
      break;
 8005a32:	bf00      	nop
 8005a34:	e006      	b.n	8005a44 <DMA_CheckFifoParam+0xe8>
      break;
 8005a36:	bf00      	nop
 8005a38:	e004      	b.n	8005a44 <DMA_CheckFifoParam+0xe8>
      break;
 8005a3a:	bf00      	nop
 8005a3c:	e002      	b.n	8005a44 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a3e:	bf00      	nop
 8005a40:	e000      	b.n	8005a44 <DMA_CheckFifoParam+0xe8>
      break;
 8005a42:	bf00      	nop
    }
  } 
  
  return status; 
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop

08005a54 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005a66:	4b23      	ldr	r3, [pc, #140]	@ (8005af4 <HAL_FLASH_Program+0xa0>)
 8005a68:	7e1b      	ldrb	r3, [r3, #24]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_FLASH_Program+0x1e>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e03b      	b.n	8005aea <HAL_FLASH_Program+0x96>
 8005a72:	4b20      	ldr	r3, [pc, #128]	@ (8005af4 <HAL_FLASH_Program+0xa0>)
 8005a74:	2201      	movs	r2, #1
 8005a76:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a78:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005a7c:	f000 f87c 	bl	8005b78 <FLASH_WaitForLastOperation>
 8005a80:	4603      	mov	r3, r0
 8005a82:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005a84:	7dfb      	ldrb	r3, [r7, #23]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d12b      	bne.n	8005ae2 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d105      	bne.n	8005a9c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005a90:	783b      	ldrb	r3, [r7, #0]
 8005a92:	4619      	mov	r1, r3
 8005a94:	68b8      	ldr	r0, [r7, #8]
 8005a96:	f000 f927 	bl	8005ce8 <FLASH_Program_Byte>
 8005a9a:	e016      	b.n	8005aca <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d105      	bne.n	8005aae <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005aa2:	883b      	ldrh	r3, [r7, #0]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	68b8      	ldr	r0, [r7, #8]
 8005aa8:	f000 f8fa 	bl	8005ca0 <FLASH_Program_HalfWord>
 8005aac:	e00d      	b.n	8005aca <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d105      	bne.n	8005ac0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	68b8      	ldr	r0, [r7, #8]
 8005aba:	f000 f8cf 	bl	8005c5c <FLASH_Program_Word>
 8005abe:	e004      	b.n	8005aca <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ac4:	68b8      	ldr	r0, [r7, #8]
 8005ac6:	f000 f897 	bl	8005bf8 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005aca:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005ace:	f000 f853 	bl	8005b78 <FLASH_WaitForLastOperation>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005ad6:	4b08      	ldr	r3, [pc, #32]	@ (8005af8 <HAL_FLASH_Program+0xa4>)
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	4a07      	ldr	r2, [pc, #28]	@ (8005af8 <HAL_FLASH_Program+0xa4>)
 8005adc:	f023 0301 	bic.w	r3, r3, #1
 8005ae0:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005ae2:	4b04      	ldr	r3, [pc, #16]	@ (8005af4 <HAL_FLASH_Program+0xa0>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	761a      	strb	r2, [r3, #24]

  return status;
 8005ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000cc0 	.word	0x20000cc0
 8005af8:	40023c00 	.word	0x40023c00

08005afc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005b06:	4b0b      	ldr	r3, [pc, #44]	@ (8005b34 <HAL_FLASH_Unlock+0x38>)
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	da0b      	bge.n	8005b26 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005b0e:	4b09      	ldr	r3, [pc, #36]	@ (8005b34 <HAL_FLASH_Unlock+0x38>)
 8005b10:	4a09      	ldr	r2, [pc, #36]	@ (8005b38 <HAL_FLASH_Unlock+0x3c>)
 8005b12:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005b14:	4b07      	ldr	r3, [pc, #28]	@ (8005b34 <HAL_FLASH_Unlock+0x38>)
 8005b16:	4a09      	ldr	r2, [pc, #36]	@ (8005b3c <HAL_FLASH_Unlock+0x40>)
 8005b18:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005b1a:	4b06      	ldr	r3, [pc, #24]	@ (8005b34 <HAL_FLASH_Unlock+0x38>)
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	da01      	bge.n	8005b26 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005b26:	79fb      	ldrb	r3, [r7, #7]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	40023c00 	.word	0x40023c00
 8005b38:	45670123 	.word	0x45670123
 8005b3c:	cdef89ab 	.word	0xcdef89ab

08005b40 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005b44:	4b05      	ldr	r3, [pc, #20]	@ (8005b5c <HAL_FLASH_Lock+0x1c>)
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	4a04      	ldr	r2, [pc, #16]	@ (8005b5c <HAL_FLASH_Lock+0x1c>)
 8005b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b4e:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	40023c00 	.word	0x40023c00

08005b60 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag
  */
uint32_t HAL_FLASH_GetError(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8005b64:	4b03      	ldr	r3, [pc, #12]	@ (8005b74 <HAL_FLASH_GetError+0x14>)
 8005b66:	69db      	ldr	r3, [r3, #28]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	20000cc0 	.word	0x20000cc0

08005b78 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b84:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf0 <FLASH_WaitForLastOperation+0x78>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005b8a:	f7ff f8c7 	bl	8004d1c <HAL_GetTick>
 8005b8e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8005b90:	e010      	b.n	8005bb4 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b98:	d00c      	beq.n	8005bb4 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d007      	beq.n	8005bb0 <FLASH_WaitForLastOperation+0x38>
 8005ba0:	f7ff f8bc 	bl	8004d1c <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d201      	bcs.n	8005bb4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e019      	b.n	8005be8 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8005bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf4 <FLASH_WaitForLastOperation+0x7c>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e8      	bne.n	8005b92 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf4 <FLASH_WaitForLastOperation+0x7c>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005bcc:	4b09      	ldr	r3, [pc, #36]	@ (8005bf4 <FLASH_WaitForLastOperation+0x7c>)
 8005bce:	2201      	movs	r2, #1
 8005bd0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005bd2:	4b08      	ldr	r3, [pc, #32]	@ (8005bf4 <FLASH_WaitForLastOperation+0x7c>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005bde:	f000 f8a5 	bl	8005d2c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0

}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	20000cc0 	.word	0x20000cc0
 8005bf4:	40023c00 	.word	0x40023c00

08005bf8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c04:	4b14      	ldr	r3, [pc, #80]	@ (8005c58 <FLASH_Program_DoubleWord+0x60>)
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	4a13      	ldr	r2, [pc, #76]	@ (8005c58 <FLASH_Program_DoubleWord+0x60>)
 8005c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005c10:	4b11      	ldr	r3, [pc, #68]	@ (8005c58 <FLASH_Program_DoubleWord+0x60>)
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	4a10      	ldr	r2, [pc, #64]	@ (8005c58 <FLASH_Program_DoubleWord+0x60>)
 8005c16:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005c1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8005c58 <FLASH_Program_DoubleWord+0x60>)
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	4a0d      	ldr	r2, [pc, #52]	@ (8005c58 <FLASH_Program_DoubleWord+0x60>)
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005c2e:	f3bf 8f6f 	isb	sy
}
 8005c32:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8005c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	000a      	movs	r2, r1
 8005c42:	2300      	movs	r3, #0
 8005c44:	68f9      	ldr	r1, [r7, #12]
 8005c46:	3104      	adds	r1, #4
 8005c48:	4613      	mov	r3, r2
 8005c4a:	600b      	str	r3, [r1, #0]
}
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr
 8005c58:	40023c00 	.word	0x40023c00

08005c5c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c66:	4b0d      	ldr	r3, [pc, #52]	@ (8005c9c <FLASH_Program_Word+0x40>)
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	4a0c      	ldr	r2, [pc, #48]	@ (8005c9c <FLASH_Program_Word+0x40>)
 8005c6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005c72:	4b0a      	ldr	r3, [pc, #40]	@ (8005c9c <FLASH_Program_Word+0x40>)
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	4a09      	ldr	r2, [pc, #36]	@ (8005c9c <FLASH_Program_Word+0x40>)
 8005c78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c7e:	4b07      	ldr	r3, [pc, #28]	@ (8005c9c <FLASH_Program_Word+0x40>)
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	4a06      	ldr	r2, [pc, #24]	@ (8005c9c <FLASH_Program_Word+0x40>)
 8005c84:	f043 0301 	orr.w	r3, r3, #1
 8005c88:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	601a      	str	r2, [r3, #0]
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	40023c00 	.word	0x40023c00

08005ca0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005cac:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce4 <FLASH_Program_HalfWord+0x44>)
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8005ce4 <FLASH_Program_HalfWord+0x44>)
 8005cb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce4 <FLASH_Program_HalfWord+0x44>)
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	4a09      	ldr	r2, [pc, #36]	@ (8005ce4 <FLASH_Program_HalfWord+0x44>)
 8005cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005cc4:	4b07      	ldr	r3, [pc, #28]	@ (8005ce4 <FLASH_Program_HalfWord+0x44>)
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	4a06      	ldr	r2, [pc, #24]	@ (8005ce4 <FLASH_Program_HalfWord+0x44>)
 8005cca:	f043 0301 	orr.w	r3, r3, #1
 8005cce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	887a      	ldrh	r2, [r7, #2]
 8005cd4:	801a      	strh	r2, [r3, #0]
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40023c00 	.word	0x40023c00

08005ce8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8005d28 <FLASH_Program_Byte+0x40>)
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8005d28 <FLASH_Program_Byte+0x40>)
 8005cfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cfe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005d00:	4b09      	ldr	r3, [pc, #36]	@ (8005d28 <FLASH_Program_Byte+0x40>)
 8005d02:	4a09      	ldr	r2, [pc, #36]	@ (8005d28 <FLASH_Program_Byte+0x40>)
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005d08:	4b07      	ldr	r3, [pc, #28]	@ (8005d28 <FLASH_Program_Byte+0x40>)
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	4a06      	ldr	r2, [pc, #24]	@ (8005d28 <FLASH_Program_Byte+0x40>)
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	78fa      	ldrb	r2, [r7, #3]
 8005d18:	701a      	strb	r2, [r3, #0]
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40023c00 	.word	0x40023c00

08005d2c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005d30:	4b2f      	ldr	r3, [pc, #188]	@ (8005df0 <FLASH_SetErrorCode+0xc4>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0310 	and.w	r3, r3, #16
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d008      	beq.n	8005d4e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8005df4 <FLASH_SetErrorCode+0xc8>)
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f043 0310 	orr.w	r3, r3, #16
 8005d44:	4a2b      	ldr	r2, [pc, #172]	@ (8005df4 <FLASH_SetErrorCode+0xc8>)
 8005d46:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005d48:	4b29      	ldr	r3, [pc, #164]	@ (8005df0 <FLASH_SetErrorCode+0xc4>)
 8005d4a:	2210      	movs	r2, #16
 8005d4c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005d4e:	4b28      	ldr	r3, [pc, #160]	@ (8005df0 <FLASH_SetErrorCode+0xc4>)
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d008      	beq.n	8005d6c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005d5a:	4b26      	ldr	r3, [pc, #152]	@ (8005df4 <FLASH_SetErrorCode+0xc8>)
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f043 0308 	orr.w	r3, r3, #8
 8005d62:	4a24      	ldr	r2, [pc, #144]	@ (8005df4 <FLASH_SetErrorCode+0xc8>)
 8005d64:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005d66:	4b22      	ldr	r3, [pc, #136]	@ (8005df0 <FLASH_SetErrorCode+0xc4>)
 8005d68:	2220      	movs	r2, #32
 8005d6a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005d6c:	4b20      	ldr	r3, [pc, #128]	@ (8005df0 <FLASH_SetErrorCode+0xc4>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005d78:	4b1e      	ldr	r3, [pc, #120]	@ (8005df4 <FLASH_SetErrorCode+0xc8>)
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	f043 0304 	orr.w	r3, r3, #4
 8005d80:	4a1c      	ldr	r2, [pc, #112]	@ (8005df4 <FLASH_SetErrorCode+0xc8>)
 8005d82:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005d84:	4b1a      	ldr	r3, [pc, #104]	@ (8005df0 <FLASH_SetErrorCode+0xc4>)
 8005d86:	2240      	movs	r2, #64	@ 0x40
 8005d88:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005d8a:	4b19      	ldr	r3, [pc, #100]	@ (8005df0 <FLASH_SetErrorCode+0xc4>)
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d008      	beq.n	8005da8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005d96:	4b17      	ldr	r3, [pc, #92]	@ (8005df4 <FLASH_SetErrorCode+0xc8>)
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	f043 0302 	orr.w	r3, r3, #2
 8005d9e:	4a15      	ldr	r2, [pc, #84]	@ (8005df4 <FLASH_SetErrorCode+0xc8>)
 8005da0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005da2:	4b13      	ldr	r3, [pc, #76]	@ (8005df0 <FLASH_SetErrorCode+0xc4>)
 8005da4:	2280      	movs	r2, #128	@ 0x80
 8005da6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005da8:	4b11      	ldr	r3, [pc, #68]	@ (8005df0 <FLASH_SetErrorCode+0xc4>)
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d009      	beq.n	8005dc8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005db4:	4b0f      	ldr	r3, [pc, #60]	@ (8005df4 <FLASH_SetErrorCode+0xc8>)
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	f043 0301 	orr.w	r3, r3, #1
 8005dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8005df4 <FLASH_SetErrorCode+0xc8>)
 8005dbe:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005df0 <FLASH_SetErrorCode+0xc4>)
 8005dc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dc6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005dc8:	4b09      	ldr	r3, [pc, #36]	@ (8005df0 <FLASH_SetErrorCode+0xc4>)
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d008      	beq.n	8005de6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005dd4:	4b07      	ldr	r3, [pc, #28]	@ (8005df4 <FLASH_SetErrorCode+0xc8>)
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	f043 0320 	orr.w	r3, r3, #32
 8005ddc:	4a05      	ldr	r2, [pc, #20]	@ (8005df4 <FLASH_SetErrorCode+0xc8>)
 8005dde:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005de0:	4b03      	ldr	r3, [pc, #12]	@ (8005df0 <FLASH_SetErrorCode+0xc4>)
 8005de2:	2202      	movs	r2, #2
 8005de4:	60da      	str	r2, [r3, #12]
  }
}
 8005de6:	bf00      	nop
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	40023c00 	.word	0x40023c00
 8005df4:	20000cc0 	.word	0x20000cc0

08005df8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e0a:	4b31      	ldr	r3, [pc, #196]	@ (8005ed0 <HAL_FLASHEx_Erase+0xd8>)
 8005e0c:	7e1b      	ldrb	r3, [r3, #24]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d101      	bne.n	8005e16 <HAL_FLASHEx_Erase+0x1e>
 8005e12:	2302      	movs	r3, #2
 8005e14:	e058      	b.n	8005ec8 <HAL_FLASHEx_Erase+0xd0>
 8005e16:	4b2e      	ldr	r3, [pc, #184]	@ (8005ed0 <HAL_FLASHEx_Erase+0xd8>)
 8005e18:	2201      	movs	r2, #1
 8005e1a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e1c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005e20:	f7ff feaa 	bl	8005b78 <FLASH_WaitForLastOperation>
 8005e24:	4603      	mov	r3, r0
 8005e26:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d148      	bne.n	8005ec0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	f04f 32ff 	mov.w	r2, #4294967295
 8005e34:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d115      	bne.n	8005e6a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f000 f844 	bl	8005ed8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e50:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005e54:	f7ff fe90 	bl	8005b78 <FLASH_WaitForLastOperation>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed4 <HAL_FLASHEx_Erase+0xdc>)
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed4 <HAL_FLASHEx_Erase+0xdc>)
 8005e62:	f023 0304 	bic.w	r3, r3, #4
 8005e66:	6113      	str	r3, [r2, #16]
 8005e68:	e028      	b.n	8005ebc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	60bb      	str	r3, [r7, #8]
 8005e70:	e01c      	b.n	8005eac <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	4619      	mov	r1, r3
 8005e7a:	68b8      	ldr	r0, [r7, #8]
 8005e7c:	f000 f850 	bl	8005f20 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e80:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005e84:	f7ff fe78 	bl	8005b78 <FLASH_WaitForLastOperation>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005e8c:	4b11      	ldr	r3, [pc, #68]	@ (8005ed4 <HAL_FLASHEx_Erase+0xdc>)
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	4a10      	ldr	r2, [pc, #64]	@ (8005ed4 <HAL_FLASHEx_Erase+0xdc>)
 8005e92:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8005e96:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	601a      	str	r2, [r3, #0]
          break;
 8005ea4:	e00a      	b.n	8005ebc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	60bb      	str	r3, [r7, #8]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d3da      	bcc.n	8005e72 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005ebc:	f000 f878 	bl	8005fb0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005ec0:	4b03      	ldr	r3, [pc, #12]	@ (8005ed0 <HAL_FLASHEx_Erase+0xd8>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	761a      	strb	r2, [r3, #24]

  return status;
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20000cc0 	.word	0x20000cc0
 8005ed4:	40023c00 	.word	0x40023c00

08005ed8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	6039      	str	r1, [r7, #0]
 8005ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8005f1c <FLASH_MassErase+0x44>)
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8005f1c <FLASH_MassErase+0x44>)
 8005eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8005f1c <FLASH_MassErase+0x44>)
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	4a09      	ldr	r2, [pc, #36]	@ (8005f1c <FLASH_MassErase+0x44>)
 8005ef6:	f043 0304 	orr.w	r3, r3, #4
 8005efa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005efc:	4b07      	ldr	r3, [pc, #28]	@ (8005f1c <FLASH_MassErase+0x44>)
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	79fb      	ldrb	r3, [r7, #7]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	4313      	orrs	r3, r2
 8005f06:	4a05      	ldr	r2, [pc, #20]	@ (8005f1c <FLASH_MassErase+0x44>)
 8005f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f0c:	6113      	str	r3, [r2, #16]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40023c00 	.word	0x40023c00

08005f20 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d102      	bne.n	8005f3c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	e010      	b.n	8005f5e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d103      	bne.n	8005f4a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005f42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	e009      	b.n	8005f5e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005f4a:	78fb      	ldrb	r3, [r7, #3]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d103      	bne.n	8005f58 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005f50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	e002      	b.n	8005f5e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005f58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005f5c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005f5e:	4b13      	ldr	r3, [pc, #76]	@ (8005fac <FLASH_Erase_Sector+0x8c>)
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	4a12      	ldr	r2, [pc, #72]	@ (8005fac <FLASH_Erase_Sector+0x8c>)
 8005f64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005f6a:	4b10      	ldr	r3, [pc, #64]	@ (8005fac <FLASH_Erase_Sector+0x8c>)
 8005f6c:	691a      	ldr	r2, [r3, #16]
 8005f6e:	490f      	ldr	r1, [pc, #60]	@ (8005fac <FLASH_Erase_Sector+0x8c>)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005f76:	4b0d      	ldr	r3, [pc, #52]	@ (8005fac <FLASH_Erase_Sector+0x8c>)
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8005fac <FLASH_Erase_Sector+0x8c>)
 8005f7c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005f80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005f82:	4b0a      	ldr	r3, [pc, #40]	@ (8005fac <FLASH_Erase_Sector+0x8c>)
 8005f84:	691a      	ldr	r2, [r3, #16]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	4a07      	ldr	r2, [pc, #28]	@ (8005fac <FLASH_Erase_Sector+0x8c>)
 8005f8e:	f043 0302 	orr.w	r3, r3, #2
 8005f92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005f94:	4b05      	ldr	r3, [pc, #20]	@ (8005fac <FLASH_Erase_Sector+0x8c>)
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	4a04      	ldr	r2, [pc, #16]	@ (8005fac <FLASH_Erase_Sector+0x8c>)
 8005f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f9e:	6113      	str	r3, [r2, #16]
}
 8005fa0:	bf00      	nop
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40023c00 	.word	0x40023c00

08005fb0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005fb4:	4b20      	ldr	r3, [pc, #128]	@ (8006038 <FLASH_FlushCaches+0x88>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d017      	beq.n	8005ff0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8006038 <FLASH_FlushCaches+0x88>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8006038 <FLASH_FlushCaches+0x88>)
 8005fc6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8006038 <FLASH_FlushCaches+0x88>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a19      	ldr	r2, [pc, #100]	@ (8006038 <FLASH_FlushCaches+0x88>)
 8005fd2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	4b17      	ldr	r3, [pc, #92]	@ (8006038 <FLASH_FlushCaches+0x88>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a16      	ldr	r2, [pc, #88]	@ (8006038 <FLASH_FlushCaches+0x88>)
 8005fde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fe2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fe4:	4b14      	ldr	r3, [pc, #80]	@ (8006038 <FLASH_FlushCaches+0x88>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a13      	ldr	r2, [pc, #76]	@ (8006038 <FLASH_FlushCaches+0x88>)
 8005fea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fee:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005ff0:	4b11      	ldr	r3, [pc, #68]	@ (8006038 <FLASH_FlushCaches+0x88>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d017      	beq.n	800602c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8006038 <FLASH_FlushCaches+0x88>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0d      	ldr	r2, [pc, #52]	@ (8006038 <FLASH_FlushCaches+0x88>)
 8006002:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006006:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006008:	4b0b      	ldr	r3, [pc, #44]	@ (8006038 <FLASH_FlushCaches+0x88>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a0a      	ldr	r2, [pc, #40]	@ (8006038 <FLASH_FlushCaches+0x88>)
 800600e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	4b08      	ldr	r3, [pc, #32]	@ (8006038 <FLASH_FlushCaches+0x88>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a07      	ldr	r2, [pc, #28]	@ (8006038 <FLASH_FlushCaches+0x88>)
 800601a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800601e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006020:	4b05      	ldr	r3, [pc, #20]	@ (8006038 <FLASH_FlushCaches+0x88>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a04      	ldr	r2, [pc, #16]	@ (8006038 <FLASH_FlushCaches+0x88>)
 8006026:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800602a:	6013      	str	r3, [r2, #0]
  }
}
 800602c:	bf00      	nop
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40023c00 	.word	0x40023c00

0800603c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800603c:	b480      	push	{r7}
 800603e:	b089      	sub	sp, #36	@ 0x24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006046:	2300      	movs	r3, #0
 8006048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800604a:	2300      	movs	r3, #0
 800604c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800604e:	2300      	movs	r3, #0
 8006050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006052:	2300      	movs	r3, #0
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	e159      	b.n	800630c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006058:	2201      	movs	r2, #1
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4013      	ands	r3, r2
 800606a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	429a      	cmp	r2, r3
 8006072:	f040 8148 	bne.w	8006306 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	2b01      	cmp	r3, #1
 8006080:	d005      	beq.n	800608e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800608a:	2b02      	cmp	r3, #2
 800608c:	d130      	bne.n	80060f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	2203      	movs	r2, #3
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43db      	mvns	r3, r3
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	4013      	ands	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060c4:	2201      	movs	r2, #1
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	fa02 f303 	lsl.w	r3, r2, r3
 80060cc:	43db      	mvns	r3, r3
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	4013      	ands	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	091b      	lsrs	r3, r3, #4
 80060da:	f003 0201 	and.w	r2, r3, #1
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f003 0303 	and.w	r3, r3, #3
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d017      	beq.n	800612c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	2203      	movs	r2, #3
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	43db      	mvns	r3, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4013      	ands	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	4313      	orrs	r3, r2
 8006124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f003 0303 	and.w	r3, r3, #3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d123      	bne.n	8006180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	08da      	lsrs	r2, r3, #3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3208      	adds	r2, #8
 8006140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	220f      	movs	r2, #15
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	43db      	mvns	r3, r3
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	4013      	ands	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	691a      	ldr	r2, [r3, #16]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	4313      	orrs	r3, r2
 8006170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	08da      	lsrs	r2, r3, #3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3208      	adds	r2, #8
 800617a:	69b9      	ldr	r1, [r7, #24]
 800617c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	2203      	movs	r2, #3
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	43db      	mvns	r3, r3
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	4013      	ands	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f003 0203 	and.w	r2, r3, #3
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 80a2 	beq.w	8006306 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	4b57      	ldr	r3, [pc, #348]	@ (8006324 <HAL_GPIO_Init+0x2e8>)
 80061c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ca:	4a56      	ldr	r2, [pc, #344]	@ (8006324 <HAL_GPIO_Init+0x2e8>)
 80061cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80061d2:	4b54      	ldr	r3, [pc, #336]	@ (8006324 <HAL_GPIO_Init+0x2e8>)
 80061d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061de:	4a52      	ldr	r2, [pc, #328]	@ (8006328 <HAL_GPIO_Init+0x2ec>)
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	089b      	lsrs	r3, r3, #2
 80061e4:	3302      	adds	r3, #2
 80061e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	220f      	movs	r2, #15
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	43db      	mvns	r3, r3
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	4013      	ands	r3, r2
 8006200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a49      	ldr	r2, [pc, #292]	@ (800632c <HAL_GPIO_Init+0x2f0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d019      	beq.n	800623e <HAL_GPIO_Init+0x202>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a48      	ldr	r2, [pc, #288]	@ (8006330 <HAL_GPIO_Init+0x2f4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d013      	beq.n	800623a <HAL_GPIO_Init+0x1fe>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a47      	ldr	r2, [pc, #284]	@ (8006334 <HAL_GPIO_Init+0x2f8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00d      	beq.n	8006236 <HAL_GPIO_Init+0x1fa>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a46      	ldr	r2, [pc, #280]	@ (8006338 <HAL_GPIO_Init+0x2fc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d007      	beq.n	8006232 <HAL_GPIO_Init+0x1f6>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a45      	ldr	r2, [pc, #276]	@ (800633c <HAL_GPIO_Init+0x300>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d101      	bne.n	800622e <HAL_GPIO_Init+0x1f2>
 800622a:	2304      	movs	r3, #4
 800622c:	e008      	b.n	8006240 <HAL_GPIO_Init+0x204>
 800622e:	2307      	movs	r3, #7
 8006230:	e006      	b.n	8006240 <HAL_GPIO_Init+0x204>
 8006232:	2303      	movs	r3, #3
 8006234:	e004      	b.n	8006240 <HAL_GPIO_Init+0x204>
 8006236:	2302      	movs	r3, #2
 8006238:	e002      	b.n	8006240 <HAL_GPIO_Init+0x204>
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <HAL_GPIO_Init+0x204>
 800623e:	2300      	movs	r3, #0
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	f002 0203 	and.w	r2, r2, #3
 8006246:	0092      	lsls	r2, r2, #2
 8006248:	4093      	lsls	r3, r2
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	4313      	orrs	r3, r2
 800624e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006250:	4935      	ldr	r1, [pc, #212]	@ (8006328 <HAL_GPIO_Init+0x2ec>)
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	089b      	lsrs	r3, r3, #2
 8006256:	3302      	adds	r3, #2
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800625e:	4b38      	ldr	r3, [pc, #224]	@ (8006340 <HAL_GPIO_Init+0x304>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	43db      	mvns	r3, r3
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	4013      	ands	r3, r2
 800626c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006282:	4a2f      	ldr	r2, [pc, #188]	@ (8006340 <HAL_GPIO_Init+0x304>)
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006288:	4b2d      	ldr	r3, [pc, #180]	@ (8006340 <HAL_GPIO_Init+0x304>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	43db      	mvns	r3, r3
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	4013      	ands	r3, r2
 8006296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062ac:	4a24      	ldr	r2, [pc, #144]	@ (8006340 <HAL_GPIO_Init+0x304>)
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062b2:	4b23      	ldr	r3, [pc, #140]	@ (8006340 <HAL_GPIO_Init+0x304>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	43db      	mvns	r3, r3
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	4013      	ands	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006340 <HAL_GPIO_Init+0x304>)
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062dc:	4b18      	ldr	r3, [pc, #96]	@ (8006340 <HAL_GPIO_Init+0x304>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	43db      	mvns	r3, r3
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	4013      	ands	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006300:	4a0f      	ldr	r2, [pc, #60]	@ (8006340 <HAL_GPIO_Init+0x304>)
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	3301      	adds	r3, #1
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	2b0f      	cmp	r3, #15
 8006310:	f67f aea2 	bls.w	8006058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	3724      	adds	r7, #36	@ 0x24
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40023800 	.word	0x40023800
 8006328:	40013800 	.word	0x40013800
 800632c:	40020000 	.word	0x40020000
 8006330:	40020400 	.word	0x40020400
 8006334:	40020800 	.word	0x40020800
 8006338:	40020c00 	.word	0x40020c00
 800633c:	40021000 	.word	0x40021000
 8006340:	40013c00 	.word	0x40013c00

08006344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	460b      	mov	r3, r1
 800634e:	807b      	strh	r3, [r7, #2]
 8006350:	4613      	mov	r3, r2
 8006352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006354:	787b      	ldrb	r3, [r7, #1]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800635a:	887a      	ldrh	r2, [r7, #2]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006360:	e003      	b.n	800636a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006362:	887b      	ldrh	r3, [r7, #2]
 8006364:	041a      	lsls	r2, r3, #16
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	619a      	str	r2, [r3, #24]
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
	...

08006378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e12b      	b.n	80065e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d106      	bne.n	80063a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7fd fdfe 	bl	8003fa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2224      	movs	r2, #36	@ 0x24
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0201 	bic.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063dc:	f001 fc20 	bl	8007c20 <HAL_RCC_GetPCLK1Freq>
 80063e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	4a81      	ldr	r2, [pc, #516]	@ (80065ec <HAL_I2C_Init+0x274>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d807      	bhi.n	80063fc <HAL_I2C_Init+0x84>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4a80      	ldr	r2, [pc, #512]	@ (80065f0 <HAL_I2C_Init+0x278>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	bf94      	ite	ls
 80063f4:	2301      	movls	r3, #1
 80063f6:	2300      	movhi	r3, #0
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	e006      	b.n	800640a <HAL_I2C_Init+0x92>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4a7d      	ldr	r2, [pc, #500]	@ (80065f4 <HAL_I2C_Init+0x27c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	bf94      	ite	ls
 8006404:	2301      	movls	r3, #1
 8006406:	2300      	movhi	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e0e7      	b.n	80065e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4a78      	ldr	r2, [pc, #480]	@ (80065f8 <HAL_I2C_Init+0x280>)
 8006416:	fba2 2303 	umull	r2, r3, r2, r3
 800641a:	0c9b      	lsrs	r3, r3, #18
 800641c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	430a      	orrs	r2, r1
 8006430:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	4a6a      	ldr	r2, [pc, #424]	@ (80065ec <HAL_I2C_Init+0x274>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d802      	bhi.n	800644c <HAL_I2C_Init+0xd4>
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	3301      	adds	r3, #1
 800644a:	e009      	b.n	8006460 <HAL_I2C_Init+0xe8>
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006452:	fb02 f303 	mul.w	r3, r2, r3
 8006456:	4a69      	ldr	r2, [pc, #420]	@ (80065fc <HAL_I2C_Init+0x284>)
 8006458:	fba2 2303 	umull	r2, r3, r2, r3
 800645c:	099b      	lsrs	r3, r3, #6
 800645e:	3301      	adds	r3, #1
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6812      	ldr	r2, [r2, #0]
 8006464:	430b      	orrs	r3, r1
 8006466:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006472:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	495c      	ldr	r1, [pc, #368]	@ (80065ec <HAL_I2C_Init+0x274>)
 800647c:	428b      	cmp	r3, r1
 800647e:	d819      	bhi.n	80064b4 <HAL_I2C_Init+0x13c>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	1e59      	subs	r1, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	fbb1 f3f3 	udiv	r3, r1, r3
 800648e:	1c59      	adds	r1, r3, #1
 8006490:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006494:	400b      	ands	r3, r1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <HAL_I2C_Init+0x138>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	1e59      	subs	r1, r3, #1
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80064a8:	3301      	adds	r3, #1
 80064aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ae:	e051      	b.n	8006554 <HAL_I2C_Init+0x1dc>
 80064b0:	2304      	movs	r3, #4
 80064b2:	e04f      	b.n	8006554 <HAL_I2C_Init+0x1dc>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d111      	bne.n	80064e0 <HAL_I2C_Init+0x168>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	1e58      	subs	r0, r3, #1
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6859      	ldr	r1, [r3, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	440b      	add	r3, r1
 80064ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80064ce:	3301      	adds	r3, #1
 80064d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	bf0c      	ite	eq
 80064d8:	2301      	moveq	r3, #1
 80064da:	2300      	movne	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	e012      	b.n	8006506 <HAL_I2C_Init+0x18e>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	1e58      	subs	r0, r3, #1
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6859      	ldr	r1, [r3, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	440b      	add	r3, r1
 80064ee:	0099      	lsls	r1, r3, #2
 80064f0:	440b      	add	r3, r1
 80064f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80064f6:	3301      	adds	r3, #1
 80064f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bf0c      	ite	eq
 8006500:	2301      	moveq	r3, #1
 8006502:	2300      	movne	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <HAL_I2C_Init+0x196>
 800650a:	2301      	movs	r3, #1
 800650c:	e022      	b.n	8006554 <HAL_I2C_Init+0x1dc>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10e      	bne.n	8006534 <HAL_I2C_Init+0x1bc>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	1e58      	subs	r0, r3, #1
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6859      	ldr	r1, [r3, #4]
 800651e:	460b      	mov	r3, r1
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	440b      	add	r3, r1
 8006524:	fbb0 f3f3 	udiv	r3, r0, r3
 8006528:	3301      	adds	r3, #1
 800652a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800652e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006532:	e00f      	b.n	8006554 <HAL_I2C_Init+0x1dc>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	1e58      	subs	r0, r3, #1
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6859      	ldr	r1, [r3, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	440b      	add	r3, r1
 8006542:	0099      	lsls	r1, r3, #2
 8006544:	440b      	add	r3, r1
 8006546:	fbb0 f3f3 	udiv	r3, r0, r3
 800654a:	3301      	adds	r3, #1
 800654c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006550:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	6809      	ldr	r1, [r1, #0]
 8006558:	4313      	orrs	r3, r2
 800655a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	69da      	ldr	r2, [r3, #28]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006582:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6911      	ldr	r1, [r2, #16]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	68d2      	ldr	r2, [r2, #12]
 800658e:	4311      	orrs	r1, r2
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	430b      	orrs	r3, r1
 8006596:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	695a      	ldr	r2, [r3, #20]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f042 0201 	orr.w	r2, r2, #1
 80065c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	000186a0 	.word	0x000186a0
 80065f0:	001e847f 	.word	0x001e847f
 80065f4:	003d08ff 	.word	0x003d08ff
 80065f8:	431bde83 	.word	0x431bde83
 80065fc:	10624dd3 	.word	0x10624dd3

08006600 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af02      	add	r7, sp, #8
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	4608      	mov	r0, r1
 800660a:	4611      	mov	r1, r2
 800660c:	461a      	mov	r2, r3
 800660e:	4603      	mov	r3, r0
 8006610:	817b      	strh	r3, [r7, #10]
 8006612:	460b      	mov	r3, r1
 8006614:	813b      	strh	r3, [r7, #8]
 8006616:	4613      	mov	r3, r2
 8006618:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800661a:	f7fe fb7f 	bl	8004d1c <HAL_GetTick>
 800661e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b20      	cmp	r3, #32
 800662a:	f040 80d9 	bne.w	80067e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	2319      	movs	r3, #25
 8006634:	2201      	movs	r2, #1
 8006636:	496d      	ldr	r1, [pc, #436]	@ (80067ec <HAL_I2C_Mem_Write+0x1ec>)
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 fc8b 	bl	8006f54 <I2C_WaitOnFlagUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006644:	2302      	movs	r3, #2
 8006646:	e0cc      	b.n	80067e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800664e:	2b01      	cmp	r3, #1
 8006650:	d101      	bne.n	8006656 <HAL_I2C_Mem_Write+0x56>
 8006652:	2302      	movs	r3, #2
 8006654:	e0c5      	b.n	80067e2 <HAL_I2C_Mem_Write+0x1e2>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b01      	cmp	r3, #1
 800666a:	d007      	beq.n	800667c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800668a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2221      	movs	r2, #33	@ 0x21
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2240      	movs	r2, #64	@ 0x40
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a3a      	ldr	r2, [r7, #32]
 80066a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80066ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4a4d      	ldr	r2, [pc, #308]	@ (80067f0 <HAL_I2C_Mem_Write+0x1f0>)
 80066bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066be:	88f8      	ldrh	r0, [r7, #6]
 80066c0:	893a      	ldrh	r2, [r7, #8]
 80066c2:	8979      	ldrh	r1, [r7, #10]
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	9301      	str	r3, [sp, #4]
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	4603      	mov	r3, r0
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 fac2 	bl	8006c58 <I2C_RequestMemoryWrite>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d052      	beq.n	8006780 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e081      	b.n	80067e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 fd50 	bl	8007188 <I2C_WaitOnTXEFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00d      	beq.n	800670a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	d107      	bne.n	8006706 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006704:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e06b      	b.n	80067e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670e:	781a      	ldrb	r2, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b04      	cmp	r3, #4
 8006746:	d11b      	bne.n	8006780 <HAL_I2C_Mem_Write+0x180>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800674c:	2b00      	cmp	r3, #0
 800674e:	d017      	beq.n	8006780 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006754:	781a      	ldrb	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800676a:	3b01      	subs	r3, #1
 800676c:	b29a      	uxth	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1aa      	bne.n	80066de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 fd43 	bl	8007218 <I2C_WaitOnBTFFlagUntilTimeout>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00d      	beq.n	80067b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679c:	2b04      	cmp	r3, #4
 800679e:	d107      	bne.n	80067b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e016      	b.n	80067e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	e000      	b.n	80067e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80067e0:	2302      	movs	r3, #2
  }
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	00100002 	.word	0x00100002
 80067f0:	ffff0000 	.word	0xffff0000

080067f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08c      	sub	sp, #48	@ 0x30
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	4608      	mov	r0, r1
 80067fe:	4611      	mov	r1, r2
 8006800:	461a      	mov	r2, r3
 8006802:	4603      	mov	r3, r0
 8006804:	817b      	strh	r3, [r7, #10]
 8006806:	460b      	mov	r3, r1
 8006808:	813b      	strh	r3, [r7, #8]
 800680a:	4613      	mov	r3, r2
 800680c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800680e:	f7fe fa85 	bl	8004d1c <HAL_GetTick>
 8006812:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b20      	cmp	r3, #32
 800681e:	f040 8214 	bne.w	8006c4a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	2319      	movs	r3, #25
 8006828:	2201      	movs	r2, #1
 800682a:	497b      	ldr	r1, [pc, #492]	@ (8006a18 <HAL_I2C_Mem_Read+0x224>)
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 fb91 	bl	8006f54 <I2C_WaitOnFlagUntilTimeout>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006838:	2302      	movs	r3, #2
 800683a:	e207      	b.n	8006c4c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_I2C_Mem_Read+0x56>
 8006846:	2302      	movs	r3, #2
 8006848:	e200      	b.n	8006c4c <HAL_I2C_Mem_Read+0x458>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b01      	cmp	r3, #1
 800685e:	d007      	beq.n	8006870 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800687e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2222      	movs	r2, #34	@ 0x22
 8006884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2240      	movs	r2, #64	@ 0x40
 800688c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800689a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80068a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4a5b      	ldr	r2, [pc, #364]	@ (8006a1c <HAL_I2C_Mem_Read+0x228>)
 80068b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068b2:	88f8      	ldrh	r0, [r7, #6]
 80068b4:	893a      	ldrh	r2, [r7, #8]
 80068b6:	8979      	ldrh	r1, [r7, #10]
 80068b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ba:	9301      	str	r3, [sp, #4]
 80068bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	4603      	mov	r3, r0
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 fa5e 	bl	8006d84 <I2C_RequestMemoryRead>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e1bc      	b.n	8006c4c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d113      	bne.n	8006902 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068da:	2300      	movs	r3, #0
 80068dc:	623b      	str	r3, [r7, #32]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	623b      	str	r3, [r7, #32]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	623b      	str	r3, [r7, #32]
 80068ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	e190      	b.n	8006c24 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006906:	2b01      	cmp	r3, #1
 8006908:	d11b      	bne.n	8006942 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800691a:	2300      	movs	r3, #0
 800691c:	61fb      	str	r3, [r7, #28]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	61fb      	str	r3, [r7, #28]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	61fb      	str	r3, [r7, #28]
 800692e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	e170      	b.n	8006c24 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006946:	2b02      	cmp	r3, #2
 8006948:	d11b      	bne.n	8006982 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006958:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006968:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800696a:	2300      	movs	r3, #0
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	61bb      	str	r3, [r7, #24]
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	e150      	b.n	8006c24 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	617b      	str	r3, [r7, #20]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	617b      	str	r3, [r7, #20]
 8006996:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006998:	e144      	b.n	8006c24 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800699e:	2b03      	cmp	r3, #3
 80069a0:	f200 80f1 	bhi.w	8006b86 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d123      	bne.n	80069f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 fc79 	bl	80072a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e145      	b.n	8006c4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691a      	ldr	r2, [r3, #16]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ca:	b2d2      	uxtb	r2, r2
 80069cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d2:	1c5a      	adds	r2, r3, #1
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069dc:	3b01      	subs	r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80069f2:	e117      	b.n	8006c24 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d14e      	bne.n	8006a9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a02:	2200      	movs	r2, #0
 8006a04:	4906      	ldr	r1, [pc, #24]	@ (8006a20 <HAL_I2C_Mem_Read+0x22c>)
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 faa4 	bl	8006f54 <I2C_WaitOnFlagUntilTimeout>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d008      	beq.n	8006a24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e11a      	b.n	8006c4c <HAL_I2C_Mem_Read+0x458>
 8006a16:	bf00      	nop
 8006a18:	00100002 	.word	0x00100002
 8006a1c:	ffff0000 	.word	0xffff0000
 8006a20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691a      	ldr	r2, [r3, #16]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	691a      	ldr	r2, [r3, #16]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006a98:	e0c4      	b.n	8006c24 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	496c      	ldr	r1, [pc, #432]	@ (8006c54 <HAL_I2C_Mem_Read+0x460>)
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 fa55 	bl	8006f54 <I2C_WaitOnFlagUntilTimeout>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e0cb      	b.n	8006c4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691a      	ldr	r2, [r3, #16]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afc:	2200      	movs	r2, #0
 8006afe:	4955      	ldr	r1, [pc, #340]	@ (8006c54 <HAL_I2C_Mem_Read+0x460>)
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 fa27 	bl	8006f54 <I2C_WaitOnFlagUntilTimeout>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e09d      	b.n	8006c4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	691a      	ldr	r2, [r3, #16]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5c:	b2d2      	uxtb	r2, r2
 8006b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006b84:	e04e      	b.n	8006c24 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 fb8c 	bl	80072a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e058      	b.n	8006c4c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bac:	1c5a      	adds	r2, r3, #1
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	b29a      	uxth	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	f003 0304 	and.w	r3, r3, #4
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d124      	bne.n	8006c24 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d107      	bne.n	8006bf2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bf0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c04:	1c5a      	adds	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f47f aeb6 	bne.w	800699a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e000      	b.n	8006c4c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006c4a:	2302      	movs	r3, #2
  }
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3728      	adds	r7, #40	@ 0x28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	00010004 	.word	0x00010004

08006c58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	4608      	mov	r0, r1
 8006c62:	4611      	mov	r1, r2
 8006c64:	461a      	mov	r2, r3
 8006c66:	4603      	mov	r3, r0
 8006c68:	817b      	strh	r3, [r7, #10]
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	813b      	strh	r3, [r7, #8]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 f960 	bl	8006f54 <I2C_WaitOnFlagUntilTimeout>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00d      	beq.n	8006cb6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ca8:	d103      	bne.n	8006cb2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e05f      	b.n	8006d76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cb6:	897b      	ldrh	r3, [r7, #10]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006cc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	6a3a      	ldr	r2, [r7, #32]
 8006cca:	492d      	ldr	r1, [pc, #180]	@ (8006d80 <I2C_RequestMemoryWrite+0x128>)
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 f9bb 	bl	8007048 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e04c      	b.n	8006d76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cdc:	2300      	movs	r3, #0
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	617b      	str	r3, [r7, #20]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	617b      	str	r3, [r7, #20]
 8006cf0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cf4:	6a39      	ldr	r1, [r7, #32]
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f000 fa46 	bl	8007188 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00d      	beq.n	8006d1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d06:	2b04      	cmp	r3, #4
 8006d08:	d107      	bne.n	8006d1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e02b      	b.n	8006d76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d1e:	88fb      	ldrh	r3, [r7, #6]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d105      	bne.n	8006d30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d24:	893b      	ldrh	r3, [r7, #8]
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	611a      	str	r2, [r3, #16]
 8006d2e:	e021      	b.n	8006d74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d30:	893b      	ldrh	r3, [r7, #8]
 8006d32:	0a1b      	lsrs	r3, r3, #8
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d40:	6a39      	ldr	r1, [r7, #32]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fa20 	bl	8007188 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00d      	beq.n	8006d6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d107      	bne.n	8006d66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e005      	b.n	8006d76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d6a:	893b      	ldrh	r3, [r7, #8]
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	00010002 	.word	0x00010002

08006d84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af02      	add	r7, sp, #8
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	4611      	mov	r1, r2
 8006d90:	461a      	mov	r2, r3
 8006d92:	4603      	mov	r3, r0
 8006d94:	817b      	strh	r3, [r7, #10]
 8006d96:	460b      	mov	r3, r1
 8006d98:	813b      	strh	r3, [r7, #8]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006dac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006dbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 f8c2 	bl	8006f54 <I2C_WaitOnFlagUntilTimeout>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00d      	beq.n	8006df2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006de4:	d103      	bne.n	8006dee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e0aa      	b.n	8006f48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006df2:	897b      	ldrh	r3, [r7, #10]
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	461a      	mov	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006e00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	6a3a      	ldr	r2, [r7, #32]
 8006e06:	4952      	ldr	r1, [pc, #328]	@ (8006f50 <I2C_RequestMemoryRead+0x1cc>)
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 f91d 	bl	8007048 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e097      	b.n	8006f48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e18:	2300      	movs	r3, #0
 8006e1a:	617b      	str	r3, [r7, #20]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	617b      	str	r3, [r7, #20]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e30:	6a39      	ldr	r1, [r7, #32]
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 f9a8 	bl	8007188 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00d      	beq.n	8006e5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d107      	bne.n	8006e56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e076      	b.n	8006f48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e5a:	88fb      	ldrh	r3, [r7, #6]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d105      	bne.n	8006e6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e60:	893b      	ldrh	r3, [r7, #8]
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	611a      	str	r2, [r3, #16]
 8006e6a:	e021      	b.n	8006eb0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e6c:	893b      	ldrh	r3, [r7, #8]
 8006e6e:	0a1b      	lsrs	r3, r3, #8
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e7c:	6a39      	ldr	r1, [r7, #32]
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 f982 	bl	8007188 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00d      	beq.n	8006ea6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d107      	bne.n	8006ea2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ea0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e050      	b.n	8006f48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ea6:	893b      	ldrh	r3, [r7, #8]
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eb2:	6a39      	ldr	r1, [r7, #32]
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 f967 	bl	8007188 <I2C_WaitOnTXEFlagUntilTimeout>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00d      	beq.n	8006edc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d107      	bne.n	8006ed8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ed6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e035      	b.n	8006f48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006eea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f82b 	bl	8006f54 <I2C_WaitOnFlagUntilTimeout>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00d      	beq.n	8006f20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f12:	d103      	bne.n	8006f1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e013      	b.n	8006f48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006f20:	897b      	ldrh	r3, [r7, #10]
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	f043 0301 	orr.w	r3, r3, #1
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	6a3a      	ldr	r2, [r7, #32]
 8006f34:	4906      	ldr	r1, [pc, #24]	@ (8006f50 <I2C_RequestMemoryRead+0x1cc>)
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 f886 	bl	8007048 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e000      	b.n	8006f48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	00010002 	.word	0x00010002

08006f54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	4613      	mov	r3, r2
 8006f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f64:	e048      	b.n	8006ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6c:	d044      	beq.n	8006ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f6e:	f7fd fed5 	bl	8004d1c <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d302      	bcc.n	8006f84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d139      	bne.n	8006ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	0c1b      	lsrs	r3, r3, #16
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d10d      	bne.n	8006faa <I2C_WaitOnFlagUntilTimeout+0x56>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	43da      	mvns	r2, r3
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	bf0c      	ite	eq
 8006fa0:	2301      	moveq	r3, #1
 8006fa2:	2300      	movne	r3, #0
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	e00c      	b.n	8006fc4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	43da      	mvns	r2, r3
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bf0c      	ite	eq
 8006fbc:	2301      	moveq	r3, #1
 8006fbe:	2300      	movne	r3, #0
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	79fb      	ldrb	r3, [r7, #7]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d116      	bne.n	8006ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe4:	f043 0220 	orr.w	r2, r3, #32
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e023      	b.n	8007040 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	0c1b      	lsrs	r3, r3, #16
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d10d      	bne.n	800701e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	43da      	mvns	r2, r3
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	4013      	ands	r3, r2
 800700e:	b29b      	uxth	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	bf0c      	ite	eq
 8007014:	2301      	moveq	r3, #1
 8007016:	2300      	movne	r3, #0
 8007018:	b2db      	uxtb	r3, r3
 800701a:	461a      	mov	r2, r3
 800701c:	e00c      	b.n	8007038 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	43da      	mvns	r2, r3
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	4013      	ands	r3, r2
 800702a:	b29b      	uxth	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	bf0c      	ite	eq
 8007030:	2301      	moveq	r3, #1
 8007032:	2300      	movne	r3, #0
 8007034:	b2db      	uxtb	r3, r3
 8007036:	461a      	mov	r2, r3
 8007038:	79fb      	ldrb	r3, [r7, #7]
 800703a:	429a      	cmp	r2, r3
 800703c:	d093      	beq.n	8006f66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007056:	e071      	b.n	800713c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007066:	d123      	bne.n	80070b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007076:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007080:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2220      	movs	r2, #32
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709c:	f043 0204 	orr.w	r2, r3, #4
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e067      	b.n	8007180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b6:	d041      	beq.n	800713c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070b8:	f7fd fe30 	bl	8004d1c <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d302      	bcc.n	80070ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d136      	bne.n	800713c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	0c1b      	lsrs	r3, r3, #16
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d10c      	bne.n	80070f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	43da      	mvns	r2, r3
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	4013      	ands	r3, r2
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	bf14      	ite	ne
 80070ea:	2301      	movne	r3, #1
 80070ec:	2300      	moveq	r3, #0
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	e00b      	b.n	800710a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	43da      	mvns	r2, r3
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4013      	ands	r3, r2
 80070fe:	b29b      	uxth	r3, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	bf14      	ite	ne
 8007104:	2301      	movne	r3, #1
 8007106:	2300      	moveq	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d016      	beq.n	800713c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2220      	movs	r2, #32
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007128:	f043 0220 	orr.w	r2, r3, #32
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e021      	b.n	8007180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	0c1b      	lsrs	r3, r3, #16
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b01      	cmp	r3, #1
 8007144:	d10c      	bne.n	8007160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	43da      	mvns	r2, r3
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	4013      	ands	r3, r2
 8007152:	b29b      	uxth	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	bf14      	ite	ne
 8007158:	2301      	movne	r3, #1
 800715a:	2300      	moveq	r3, #0
 800715c:	b2db      	uxtb	r3, r3
 800715e:	e00b      	b.n	8007178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	43da      	mvns	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4013      	ands	r3, r2
 800716c:	b29b      	uxth	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	bf14      	ite	ne
 8007172:	2301      	movne	r3, #1
 8007174:	2300      	moveq	r3, #0
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	f47f af6d 	bne.w	8007058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007194:	e034      	b.n	8007200 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f8e3 	bl	8007362 <I2C_IsAcknowledgeFailed>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e034      	b.n	8007210 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ac:	d028      	beq.n	8007200 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ae:	f7fd fdb5 	bl	8004d1c <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d302      	bcc.n	80071c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d11d      	bne.n	8007200 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ce:	2b80      	cmp	r3, #128	@ 0x80
 80071d0:	d016      	beq.n	8007200 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2220      	movs	r2, #32
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ec:	f043 0220 	orr.w	r2, r3, #32
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e007      	b.n	8007210 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800720a:	2b80      	cmp	r3, #128	@ 0x80
 800720c:	d1c3      	bne.n	8007196 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007224:	e034      	b.n	8007290 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 f89b 	bl	8007362 <I2C_IsAcknowledgeFailed>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e034      	b.n	80072a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723c:	d028      	beq.n	8007290 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800723e:	f7fd fd6d 	bl	8004d1c <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	429a      	cmp	r2, r3
 800724c:	d302      	bcc.n	8007254 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d11d      	bne.n	8007290 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	f003 0304 	and.w	r3, r3, #4
 800725e:	2b04      	cmp	r3, #4
 8007260:	d016      	beq.n	8007290 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2220      	movs	r2, #32
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727c:	f043 0220 	orr.w	r2, r3, #32
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e007      	b.n	80072a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	f003 0304 	and.w	r3, r3, #4
 800729a:	2b04      	cmp	r3, #4
 800729c:	d1c3      	bne.n	8007226 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072b4:	e049      	b.n	800734a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b10      	cmp	r3, #16
 80072c2:	d119      	bne.n	80072f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f06f 0210 	mvn.w	r2, #16
 80072cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2220      	movs	r2, #32
 80072d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e030      	b.n	800735a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072f8:	f7fd fd10 	bl	8004d1c <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	429a      	cmp	r2, r3
 8007306:	d302      	bcc.n	800730e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d11d      	bne.n	800734a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007318:	2b40      	cmp	r3, #64	@ 0x40
 800731a:	d016      	beq.n	800734a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2220      	movs	r2, #32
 8007326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007336:	f043 0220 	orr.w	r2, r3, #32
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e007      	b.n	800735a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007354:	2b40      	cmp	r3, #64	@ 0x40
 8007356:	d1ae      	bne.n	80072b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007378:	d11b      	bne.n	80073b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007382:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2220      	movs	r2, #32
 800738e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739e:	f043 0204 	orr.w	r2, r3, #4
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e000      	b.n	80073b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e267      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d075      	beq.n	80074ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80073de:	4b88      	ldr	r3, [pc, #544]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f003 030c 	and.w	r3, r3, #12
 80073e6:	2b04      	cmp	r3, #4
 80073e8:	d00c      	beq.n	8007404 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073ea:	4b85      	ldr	r3, [pc, #532]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80073f2:	2b08      	cmp	r3, #8
 80073f4:	d112      	bne.n	800741c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073f6:	4b82      	ldr	r3, [pc, #520]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007402:	d10b      	bne.n	800741c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007404:	4b7e      	ldr	r3, [pc, #504]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d05b      	beq.n	80074c8 <HAL_RCC_OscConfig+0x108>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d157      	bne.n	80074c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e242      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007424:	d106      	bne.n	8007434 <HAL_RCC_OscConfig+0x74>
 8007426:	4b76      	ldr	r3, [pc, #472]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a75      	ldr	r2, [pc, #468]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 800742c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	e01d      	b.n	8007470 <HAL_RCC_OscConfig+0xb0>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800743c:	d10c      	bne.n	8007458 <HAL_RCC_OscConfig+0x98>
 800743e:	4b70      	ldr	r3, [pc, #448]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a6f      	ldr	r2, [pc, #444]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	4b6d      	ldr	r3, [pc, #436]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a6c      	ldr	r2, [pc, #432]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	e00b      	b.n	8007470 <HAL_RCC_OscConfig+0xb0>
 8007458:	4b69      	ldr	r3, [pc, #420]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a68      	ldr	r2, [pc, #416]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 800745e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	4b66      	ldr	r3, [pc, #408]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a65      	ldr	r2, [pc, #404]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 800746a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800746e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d013      	beq.n	80074a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007478:	f7fd fc50 	bl	8004d1c <HAL_GetTick>
 800747c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800747e:	e008      	b.n	8007492 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007480:	f7fd fc4c 	bl	8004d1c <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	2b64      	cmp	r3, #100	@ 0x64
 800748c:	d901      	bls.n	8007492 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e207      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007492:	4b5b      	ldr	r3, [pc, #364]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d0f0      	beq.n	8007480 <HAL_RCC_OscConfig+0xc0>
 800749e:	e014      	b.n	80074ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a0:	f7fd fc3c 	bl	8004d1c <HAL_GetTick>
 80074a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074a6:	e008      	b.n	80074ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074a8:	f7fd fc38 	bl	8004d1c <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b64      	cmp	r3, #100	@ 0x64
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e1f3      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074ba:	4b51      	ldr	r3, [pc, #324]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1f0      	bne.n	80074a8 <HAL_RCC_OscConfig+0xe8>
 80074c6:	e000      	b.n	80074ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d063      	beq.n	800759e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80074d6:	4b4a      	ldr	r3, [pc, #296]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f003 030c 	and.w	r3, r3, #12
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00b      	beq.n	80074fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074e2:	4b47      	ldr	r3, [pc, #284]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80074ea:	2b08      	cmp	r3, #8
 80074ec:	d11c      	bne.n	8007528 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074ee:	4b44      	ldr	r3, [pc, #272]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d116      	bne.n	8007528 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074fa:	4b41      	ldr	r3, [pc, #260]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <HAL_RCC_OscConfig+0x152>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d001      	beq.n	8007512 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e1c7      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007512:	4b3b      	ldr	r3, [pc, #236]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	4937      	ldr	r1, [pc, #220]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007522:	4313      	orrs	r3, r2
 8007524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007526:	e03a      	b.n	800759e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d020      	beq.n	8007572 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007530:	4b34      	ldr	r3, [pc, #208]	@ (8007604 <HAL_RCC_OscConfig+0x244>)
 8007532:	2201      	movs	r2, #1
 8007534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007536:	f7fd fbf1 	bl	8004d1c <HAL_GetTick>
 800753a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800753c:	e008      	b.n	8007550 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800753e:	f7fd fbed 	bl	8004d1c <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d901      	bls.n	8007550 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e1a8      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007550:	4b2b      	ldr	r3, [pc, #172]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b00      	cmp	r3, #0
 800755a:	d0f0      	beq.n	800753e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800755c:	4b28      	ldr	r3, [pc, #160]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	4925      	ldr	r1, [pc, #148]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 800756c:	4313      	orrs	r3, r2
 800756e:	600b      	str	r3, [r1, #0]
 8007570:	e015      	b.n	800759e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007572:	4b24      	ldr	r3, [pc, #144]	@ (8007604 <HAL_RCC_OscConfig+0x244>)
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007578:	f7fd fbd0 	bl	8004d1c <HAL_GetTick>
 800757c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800757e:	e008      	b.n	8007592 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007580:	f7fd fbcc 	bl	8004d1c <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d901      	bls.n	8007592 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e187      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007592:	4b1b      	ldr	r3, [pc, #108]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1f0      	bne.n	8007580 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d036      	beq.n	8007618 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d016      	beq.n	80075e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075b2:	4b15      	ldr	r3, [pc, #84]	@ (8007608 <HAL_RCC_OscConfig+0x248>)
 80075b4:	2201      	movs	r2, #1
 80075b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b8:	f7fd fbb0 	bl	8004d1c <HAL_GetTick>
 80075bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075be:	e008      	b.n	80075d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075c0:	f7fd fbac 	bl	8004d1c <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d901      	bls.n	80075d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e167      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007600 <HAL_RCC_OscConfig+0x240>)
 80075d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0f0      	beq.n	80075c0 <HAL_RCC_OscConfig+0x200>
 80075de:	e01b      	b.n	8007618 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075e0:	4b09      	ldr	r3, [pc, #36]	@ (8007608 <HAL_RCC_OscConfig+0x248>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075e6:	f7fd fb99 	bl	8004d1c <HAL_GetTick>
 80075ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075ec:	e00e      	b.n	800760c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075ee:	f7fd fb95 	bl	8004d1c <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d907      	bls.n	800760c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e150      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
 8007600:	40023800 	.word	0x40023800
 8007604:	42470000 	.word	0x42470000
 8007608:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800760c:	4b88      	ldr	r3, [pc, #544]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 800760e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1ea      	bne.n	80075ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 8097 	beq.w	8007754 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007626:	2300      	movs	r3, #0
 8007628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800762a:	4b81      	ldr	r3, [pc, #516]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 800762c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800762e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10f      	bne.n	8007656 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007636:	2300      	movs	r3, #0
 8007638:	60bb      	str	r3, [r7, #8]
 800763a:	4b7d      	ldr	r3, [pc, #500]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 800763c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763e:	4a7c      	ldr	r2, [pc, #496]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 8007640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007644:	6413      	str	r3, [r2, #64]	@ 0x40
 8007646:	4b7a      	ldr	r3, [pc, #488]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 8007648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800764e:	60bb      	str	r3, [r7, #8]
 8007650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007652:	2301      	movs	r3, #1
 8007654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007656:	4b77      	ldr	r3, [pc, #476]	@ (8007834 <HAL_RCC_OscConfig+0x474>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800765e:	2b00      	cmp	r3, #0
 8007660:	d118      	bne.n	8007694 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007662:	4b74      	ldr	r3, [pc, #464]	@ (8007834 <HAL_RCC_OscConfig+0x474>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a73      	ldr	r2, [pc, #460]	@ (8007834 <HAL_RCC_OscConfig+0x474>)
 8007668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800766c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800766e:	f7fd fb55 	bl	8004d1c <HAL_GetTick>
 8007672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007674:	e008      	b.n	8007688 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007676:	f7fd fb51 	bl	8004d1c <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d901      	bls.n	8007688 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e10c      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007688:	4b6a      	ldr	r3, [pc, #424]	@ (8007834 <HAL_RCC_OscConfig+0x474>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0f0      	beq.n	8007676 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d106      	bne.n	80076aa <HAL_RCC_OscConfig+0x2ea>
 800769c:	4b64      	ldr	r3, [pc, #400]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 800769e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a0:	4a63      	ldr	r2, [pc, #396]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076a2:	f043 0301 	orr.w	r3, r3, #1
 80076a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80076a8:	e01c      	b.n	80076e4 <HAL_RCC_OscConfig+0x324>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	2b05      	cmp	r3, #5
 80076b0:	d10c      	bne.n	80076cc <HAL_RCC_OscConfig+0x30c>
 80076b2:	4b5f      	ldr	r3, [pc, #380]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b6:	4a5e      	ldr	r2, [pc, #376]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076b8:	f043 0304 	orr.w	r3, r3, #4
 80076bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80076be:	4b5c      	ldr	r3, [pc, #368]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076c2:	4a5b      	ldr	r2, [pc, #364]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076c4:	f043 0301 	orr.w	r3, r3, #1
 80076c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80076ca:	e00b      	b.n	80076e4 <HAL_RCC_OscConfig+0x324>
 80076cc:	4b58      	ldr	r3, [pc, #352]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076d0:	4a57      	ldr	r2, [pc, #348]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076d2:	f023 0301 	bic.w	r3, r3, #1
 80076d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80076d8:	4b55      	ldr	r3, [pc, #340]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076dc:	4a54      	ldr	r2, [pc, #336]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80076de:	f023 0304 	bic.w	r3, r3, #4
 80076e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d015      	beq.n	8007718 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ec:	f7fd fb16 	bl	8004d1c <HAL_GetTick>
 80076f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076f2:	e00a      	b.n	800770a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076f4:	f7fd fb12 	bl	8004d1c <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007702:	4293      	cmp	r3, r2
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e0cb      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800770a:	4b49      	ldr	r3, [pc, #292]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 800770c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0ee      	beq.n	80076f4 <HAL_RCC_OscConfig+0x334>
 8007716:	e014      	b.n	8007742 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007718:	f7fd fb00 	bl	8004d1c <HAL_GetTick>
 800771c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800771e:	e00a      	b.n	8007736 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007720:	f7fd fafc 	bl	8004d1c <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800772e:	4293      	cmp	r3, r2
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e0b5      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007736:	4b3e      	ldr	r3, [pc, #248]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 8007738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1ee      	bne.n	8007720 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d105      	bne.n	8007754 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007748:	4b39      	ldr	r3, [pc, #228]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 800774a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774c:	4a38      	ldr	r2, [pc, #224]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 800774e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007752:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80a1 	beq.w	80078a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800775e:	4b34      	ldr	r3, [pc, #208]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f003 030c 	and.w	r3, r3, #12
 8007766:	2b08      	cmp	r3, #8
 8007768:	d05c      	beq.n	8007824 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	2b02      	cmp	r3, #2
 8007770:	d141      	bne.n	80077f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007772:	4b31      	ldr	r3, [pc, #196]	@ (8007838 <HAL_RCC_OscConfig+0x478>)
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007778:	f7fd fad0 	bl	8004d1c <HAL_GetTick>
 800777c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800777e:	e008      	b.n	8007792 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007780:	f7fd facc 	bl	8004d1c <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b02      	cmp	r3, #2
 800778c:	d901      	bls.n	8007792 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e087      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007792:	4b27      	ldr	r3, [pc, #156]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1f0      	bne.n	8007780 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	69da      	ldr	r2, [r3, #28]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ac:	019b      	lsls	r3, r3, #6
 80077ae:	431a      	orrs	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b4:	085b      	lsrs	r3, r3, #1
 80077b6:	3b01      	subs	r3, #1
 80077b8:	041b      	lsls	r3, r3, #16
 80077ba:	431a      	orrs	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c0:	061b      	lsls	r3, r3, #24
 80077c2:	491b      	ldr	r1, [pc, #108]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007838 <HAL_RCC_OscConfig+0x478>)
 80077ca:	2201      	movs	r2, #1
 80077cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077ce:	f7fd faa5 	bl	8004d1c <HAL_GetTick>
 80077d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077d4:	e008      	b.n	80077e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d6:	f7fd faa1 	bl	8004d1c <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d901      	bls.n	80077e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e05c      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077e8:	4b11      	ldr	r3, [pc, #68]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d0f0      	beq.n	80077d6 <HAL_RCC_OscConfig+0x416>
 80077f4:	e054      	b.n	80078a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077f6:	4b10      	ldr	r3, [pc, #64]	@ (8007838 <HAL_RCC_OscConfig+0x478>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077fc:	f7fd fa8e 	bl	8004d1c <HAL_GetTick>
 8007800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007802:	e008      	b.n	8007816 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007804:	f7fd fa8a 	bl	8004d1c <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	2b02      	cmp	r3, #2
 8007810:	d901      	bls.n	8007816 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e045      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007816:	4b06      	ldr	r3, [pc, #24]	@ (8007830 <HAL_RCC_OscConfig+0x470>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1f0      	bne.n	8007804 <HAL_RCC_OscConfig+0x444>
 8007822:	e03d      	b.n	80078a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d107      	bne.n	800783c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e038      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
 8007830:	40023800 	.word	0x40023800
 8007834:	40007000 	.word	0x40007000
 8007838:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800783c:	4b1b      	ldr	r3, [pc, #108]	@ (80078ac <HAL_RCC_OscConfig+0x4ec>)
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d028      	beq.n	800789c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007854:	429a      	cmp	r2, r3
 8007856:	d121      	bne.n	800789c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007862:	429a      	cmp	r2, r3
 8007864:	d11a      	bne.n	800789c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800786c:	4013      	ands	r3, r2
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007872:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007874:	4293      	cmp	r3, r2
 8007876:	d111      	bne.n	800789c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007882:	085b      	lsrs	r3, r3, #1
 8007884:	3b01      	subs	r3, #1
 8007886:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007888:	429a      	cmp	r2, r3
 800788a:	d107      	bne.n	800789c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007896:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007898:	429a      	cmp	r2, r3
 800789a:	d001      	beq.n	80078a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3718      	adds	r7, #24
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	40023800 	.word	0x40023800

080078b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e0cc      	b.n	8007a5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80078c4:	4b68      	ldr	r3, [pc, #416]	@ (8007a68 <HAL_RCC_ClockConfig+0x1b8>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d90c      	bls.n	80078ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078d2:	4b65      	ldr	r3, [pc, #404]	@ (8007a68 <HAL_RCC_ClockConfig+0x1b8>)
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	b2d2      	uxtb	r2, r2
 80078d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078da:	4b63      	ldr	r3, [pc, #396]	@ (8007a68 <HAL_RCC_ClockConfig+0x1b8>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d001      	beq.n	80078ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e0b8      	b.n	8007a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d020      	beq.n	800793a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d005      	beq.n	8007910 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007904:	4b59      	ldr	r3, [pc, #356]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	4a58      	ldr	r2, [pc, #352]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 800790a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800790e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800791c:	4b53      	ldr	r3, [pc, #332]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	4a52      	ldr	r2, [pc, #328]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007922:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007926:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007928:	4b50      	ldr	r3, [pc, #320]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	494d      	ldr	r1, [pc, #308]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007936:	4313      	orrs	r3, r2
 8007938:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d044      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d107      	bne.n	800795e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800794e:	4b47      	ldr	r3, [pc, #284]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d119      	bne.n	800798e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e07f      	b.n	8007a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	2b02      	cmp	r3, #2
 8007964:	d003      	beq.n	800796e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800796a:	2b03      	cmp	r3, #3
 800796c:	d107      	bne.n	800797e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800796e:	4b3f      	ldr	r3, [pc, #252]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d109      	bne.n	800798e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e06f      	b.n	8007a5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800797e:	4b3b      	ldr	r3, [pc, #236]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e067      	b.n	8007a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800798e:	4b37      	ldr	r3, [pc, #220]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f023 0203 	bic.w	r2, r3, #3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	4934      	ldr	r1, [pc, #208]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 800799c:	4313      	orrs	r3, r2
 800799e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079a0:	f7fd f9bc 	bl	8004d1c <HAL_GetTick>
 80079a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079a6:	e00a      	b.n	80079be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079a8:	f7fd f9b8 	bl	8004d1c <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e04f      	b.n	8007a5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079be:	4b2b      	ldr	r3, [pc, #172]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f003 020c 	and.w	r2, r3, #12
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d1eb      	bne.n	80079a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079d0:	4b25      	ldr	r3, [pc, #148]	@ (8007a68 <HAL_RCC_ClockConfig+0x1b8>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d20c      	bcs.n	80079f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079de:	4b22      	ldr	r3, [pc, #136]	@ (8007a68 <HAL_RCC_ClockConfig+0x1b8>)
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	b2d2      	uxtb	r2, r2
 80079e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079e6:	4b20      	ldr	r3, [pc, #128]	@ (8007a68 <HAL_RCC_ClockConfig+0x1b8>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d001      	beq.n	80079f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e032      	b.n	8007a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d008      	beq.n	8007a16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a04:	4b19      	ldr	r3, [pc, #100]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	4916      	ldr	r1, [pc, #88]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0308 	and.w	r3, r3, #8
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d009      	beq.n	8007a36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a22:	4b12      	ldr	r3, [pc, #72]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	490e      	ldr	r1, [pc, #56]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a36:	f000 f821 	bl	8007a7c <HAL_RCC_GetSysClockFreq>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a6c <HAL_RCC_ClockConfig+0x1bc>)
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	091b      	lsrs	r3, r3, #4
 8007a42:	f003 030f 	and.w	r3, r3, #15
 8007a46:	490a      	ldr	r1, [pc, #40]	@ (8007a70 <HAL_RCC_ClockConfig+0x1c0>)
 8007a48:	5ccb      	ldrb	r3, [r1, r3]
 8007a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4e:	4a09      	ldr	r2, [pc, #36]	@ (8007a74 <HAL_RCC_ClockConfig+0x1c4>)
 8007a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007a52:	4b09      	ldr	r3, [pc, #36]	@ (8007a78 <HAL_RCC_ClockConfig+0x1c8>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7fd f91c 	bl	8004c94 <HAL_InitTick>

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	40023c00 	.word	0x40023c00
 8007a6c:	40023800 	.word	0x40023800
 8007a70:	0800dc78 	.word	0x0800dc78
 8007a74:	200000ac 	.word	0x200000ac
 8007a78:	200000b0 	.word	0x200000b0

08007a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a80:	b090      	sub	sp, #64	@ 0x40
 8007a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007a84:	2300      	movs	r3, #0
 8007a86:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a94:	4b59      	ldr	r3, [pc, #356]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f003 030c 	and.w	r3, r3, #12
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d00d      	beq.n	8007abc <HAL_RCC_GetSysClockFreq+0x40>
 8007aa0:	2b08      	cmp	r3, #8
 8007aa2:	f200 80a1 	bhi.w	8007be8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8007aaa:	2b04      	cmp	r3, #4
 8007aac:	d003      	beq.n	8007ab6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007aae:	e09b      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ab0:	4b53      	ldr	r3, [pc, #332]	@ (8007c00 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ab4:	e09b      	b.n	8007bee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ab6:	4b53      	ldr	r3, [pc, #332]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007aba:	e098      	b.n	8007bee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007abc:	4b4f      	ldr	r3, [pc, #316]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ac4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ac6:	4b4d      	ldr	r3, [pc, #308]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d028      	beq.n	8007b24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	099b      	lsrs	r3, r3, #6
 8007ad8:	2200      	movs	r2, #0
 8007ada:	623b      	str	r3, [r7, #32]
 8007adc:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	4b47      	ldr	r3, [pc, #284]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ae8:	fb03 f201 	mul.w	r2, r3, r1
 8007aec:	2300      	movs	r3, #0
 8007aee:	fb00 f303 	mul.w	r3, r0, r3
 8007af2:	4413      	add	r3, r2
 8007af4:	4a43      	ldr	r2, [pc, #268]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x188>)
 8007af6:	fba0 1202 	umull	r1, r2, r0, r2
 8007afa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007afc:	460a      	mov	r2, r1
 8007afe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007b00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b02:	4413      	add	r3, r2
 8007b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b08:	2200      	movs	r2, #0
 8007b0a:	61bb      	str	r3, [r7, #24]
 8007b0c:	61fa      	str	r2, [r7, #28]
 8007b0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007b16:	f7f9 f863 	bl	8000be0 <__aeabi_uldivmod>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4613      	mov	r3, r2
 8007b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b22:	e053      	b.n	8007bcc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b24:	4b35      	ldr	r3, [pc, #212]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	099b      	lsrs	r3, r3, #6
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	613b      	str	r3, [r7, #16]
 8007b2e:	617a      	str	r2, [r7, #20]
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007b36:	f04f 0b00 	mov.w	fp, #0
 8007b3a:	4652      	mov	r2, sl
 8007b3c:	465b      	mov	r3, fp
 8007b3e:	f04f 0000 	mov.w	r0, #0
 8007b42:	f04f 0100 	mov.w	r1, #0
 8007b46:	0159      	lsls	r1, r3, #5
 8007b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b4c:	0150      	lsls	r0, r2, #5
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	ebb2 080a 	subs.w	r8, r2, sl
 8007b56:	eb63 090b 	sbc.w	r9, r3, fp
 8007b5a:	f04f 0200 	mov.w	r2, #0
 8007b5e:	f04f 0300 	mov.w	r3, #0
 8007b62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007b66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007b6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007b6e:	ebb2 0408 	subs.w	r4, r2, r8
 8007b72:	eb63 0509 	sbc.w	r5, r3, r9
 8007b76:	f04f 0200 	mov.w	r2, #0
 8007b7a:	f04f 0300 	mov.w	r3, #0
 8007b7e:	00eb      	lsls	r3, r5, #3
 8007b80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b84:	00e2      	lsls	r2, r4, #3
 8007b86:	4614      	mov	r4, r2
 8007b88:	461d      	mov	r5, r3
 8007b8a:	eb14 030a 	adds.w	r3, r4, sl
 8007b8e:	603b      	str	r3, [r7, #0]
 8007b90:	eb45 030b 	adc.w	r3, r5, fp
 8007b94:	607b      	str	r3, [r7, #4]
 8007b96:	f04f 0200 	mov.w	r2, #0
 8007b9a:	f04f 0300 	mov.w	r3, #0
 8007b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	028b      	lsls	r3, r1, #10
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007bac:	4621      	mov	r1, r4
 8007bae:	028a      	lsls	r2, r1, #10
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	60bb      	str	r3, [r7, #8]
 8007bba:	60fa      	str	r2, [r7, #12]
 8007bbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bc0:	f7f9 f80e 	bl	8000be0 <__aeabi_uldivmod>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4613      	mov	r3, r2
 8007bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	0c1b      	lsrs	r3, r3, #16
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007bdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007be6:	e002      	b.n	8007bee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007be8:	4b05      	ldr	r3, [pc, #20]	@ (8007c00 <HAL_RCC_GetSysClockFreq+0x184>)
 8007bea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3740      	adds	r7, #64	@ 0x40
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bfa:	bf00      	nop
 8007bfc:	40023800 	.word	0x40023800
 8007c00:	00f42400 	.word	0x00f42400
 8007c04:	017d7840 	.word	0x017d7840

08007c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c0c:	4b03      	ldr	r3, [pc, #12]	@ (8007c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	200000ac 	.word	0x200000ac

08007c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c24:	f7ff fff0 	bl	8007c08 <HAL_RCC_GetHCLKFreq>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	4b05      	ldr	r3, [pc, #20]	@ (8007c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	0a9b      	lsrs	r3, r3, #10
 8007c30:	f003 0307 	and.w	r3, r3, #7
 8007c34:	4903      	ldr	r1, [pc, #12]	@ (8007c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c36:	5ccb      	ldrb	r3, [r1, r3]
 8007c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	40023800 	.word	0x40023800
 8007c44:	0800dc88 	.word	0x0800dc88

08007c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c4c:	f7ff ffdc 	bl	8007c08 <HAL_RCC_GetHCLKFreq>
 8007c50:	4602      	mov	r2, r0
 8007c52:	4b05      	ldr	r3, [pc, #20]	@ (8007c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	0b5b      	lsrs	r3, r3, #13
 8007c58:	f003 0307 	and.w	r3, r3, #7
 8007c5c:	4903      	ldr	r1, [pc, #12]	@ (8007c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c5e:	5ccb      	ldrb	r3, [r1, r3]
 8007c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	40023800 	.word	0x40023800
 8007c6c:	0800dc88 	.word	0x0800dc88

08007c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e07b      	b.n	8007d7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d108      	bne.n	8007c9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c92:	d009      	beq.n	8007ca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	61da      	str	r2, [r3, #28]
 8007c9a:	e005      	b.n	8007ca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d106      	bne.n	8007cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7fc fbba 	bl	800443c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cfa:	431a      	orrs	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	431a      	orrs	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	431a      	orrs	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d18:	431a      	orrs	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d22:	431a      	orrs	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d2c:	ea42 0103 	orr.w	r1, r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	0c1b      	lsrs	r3, r3, #16
 8007d46:	f003 0104 	and.w	r1, r3, #4
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4e:	f003 0210 	and.w	r2, r3, #16
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	69da      	ldr	r2, [r3, #28]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b088      	sub	sp, #32
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	60f8      	str	r0, [r7, #12]
 8007d8a:	60b9      	str	r1, [r7, #8]
 8007d8c:	603b      	str	r3, [r7, #0]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d92:	f7fc ffc3 	bl	8004d1c <HAL_GetTick>
 8007d96:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007d98:	88fb      	ldrh	r3, [r7, #6]
 8007d9a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d001      	beq.n	8007dac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007da8:	2302      	movs	r3, #2
 8007daa:	e12a      	b.n	8008002 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d002      	beq.n	8007db8 <HAL_SPI_Transmit+0x36>
 8007db2:	88fb      	ldrh	r3, [r7, #6]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e122      	b.n	8008002 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d101      	bne.n	8007dca <HAL_SPI_Transmit+0x48>
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	e11b      	b.n	8008002 <HAL_SPI_Transmit+0x280>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2203      	movs	r2, #3
 8007dd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	88fa      	ldrh	r2, [r7, #6]
 8007dea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	88fa      	ldrh	r2, [r7, #6]
 8007df0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e18:	d10f      	bne.n	8007e3a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e44:	2b40      	cmp	r3, #64	@ 0x40
 8007e46:	d007      	beq.n	8007e58 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e60:	d152      	bne.n	8007f08 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d002      	beq.n	8007e70 <HAL_SPI_Transmit+0xee>
 8007e6a:	8b7b      	ldrh	r3, [r7, #26]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d145      	bne.n	8007efc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e74:	881a      	ldrh	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e80:	1c9a      	adds	r2, r3, #2
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e94:	e032      	b.n	8007efc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f003 0302 	and.w	r3, r3, #2
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d112      	bne.n	8007eca <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea8:	881a      	ldrh	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb4:	1c9a      	adds	r2, r3, #2
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007ec8:	e018      	b.n	8007efc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007eca:	f7fc ff27 	bl	8004d1c <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d803      	bhi.n	8007ee2 <HAL_SPI_Transmit+0x160>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee0:	d102      	bne.n	8007ee8 <HAL_SPI_Transmit+0x166>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d109      	bne.n	8007efc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e082      	b.n	8008002 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1c7      	bne.n	8007e96 <HAL_SPI_Transmit+0x114>
 8007f06:	e053      	b.n	8007fb0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <HAL_SPI_Transmit+0x194>
 8007f10:	8b7b      	ldrh	r3, [r7, #26]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d147      	bne.n	8007fa6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	330c      	adds	r3, #12
 8007f20:	7812      	ldrb	r2, [r2, #0]
 8007f22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f28:	1c5a      	adds	r2, r3, #1
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	3b01      	subs	r3, #1
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007f3c:	e033      	b.n	8007fa6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f003 0302 	and.w	r3, r3, #2
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d113      	bne.n	8007f74 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	330c      	adds	r3, #12
 8007f56:	7812      	ldrb	r2, [r2, #0]
 8007f58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f5e:	1c5a      	adds	r2, r3, #1
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007f72:	e018      	b.n	8007fa6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f74:	f7fc fed2 	bl	8004d1c <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d803      	bhi.n	8007f8c <HAL_SPI_Transmit+0x20a>
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8a:	d102      	bne.n	8007f92 <HAL_SPI_Transmit+0x210>
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d109      	bne.n	8007fa6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e02d      	b.n	8008002 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1c6      	bne.n	8007f3e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fcf9 	bl	80089ac <SPI_EndRxTxTransaction>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10a      	bne.n	8007fe4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fce:	2300      	movs	r3, #0
 8007fd0:	617b      	str	r3, [r7, #20]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	617b      	str	r3, [r7, #20]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e000      	b.n	8008002 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008000:	2300      	movs	r3, #0
  }
}
 8008002:	4618      	mov	r0, r3
 8008004:	3720      	adds	r7, #32
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b088      	sub	sp, #32
 800800e:	af02      	add	r7, sp, #8
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	60b9      	str	r1, [r7, #8]
 8008014:	603b      	str	r3, [r7, #0]
 8008016:	4613      	mov	r3, r2
 8008018:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b01      	cmp	r3, #1
 8008024:	d001      	beq.n	800802a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008026:	2302      	movs	r3, #2
 8008028:	e104      	b.n	8008234 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008032:	d112      	bne.n	800805a <HAL_SPI_Receive+0x50>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10e      	bne.n	800805a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2204      	movs	r2, #4
 8008040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008044:	88fa      	ldrh	r2, [r7, #6]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	4613      	mov	r3, r2
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 f8f3 	bl	800823c <HAL_SPI_TransmitReceive>
 8008056:	4603      	mov	r3, r0
 8008058:	e0ec      	b.n	8008234 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800805a:	f7fc fe5f 	bl	8004d1c <HAL_GetTick>
 800805e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d002      	beq.n	800806c <HAL_SPI_Receive+0x62>
 8008066:	88fb      	ldrh	r3, [r7, #6]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e0e1      	b.n	8008234 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008076:	2b01      	cmp	r3, #1
 8008078:	d101      	bne.n	800807e <HAL_SPI_Receive+0x74>
 800807a:	2302      	movs	r3, #2
 800807c:	e0da      	b.n	8008234 <HAL_SPI_Receive+0x22a>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2204      	movs	r2, #4
 800808a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	88fa      	ldrh	r2, [r7, #6]
 800809e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	88fa      	ldrh	r2, [r7, #6]
 80080a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080cc:	d10f      	bne.n	80080ee <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80080ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080f8:	2b40      	cmp	r3, #64	@ 0x40
 80080fa:	d007      	beq.n	800810c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800810a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d170      	bne.n	80081f6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008114:	e035      	b.n	8008182 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b01      	cmp	r3, #1
 8008122:	d115      	bne.n	8008150 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f103 020c 	add.w	r2, r3, #12
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008130:	7812      	ldrb	r2, [r2, #0]
 8008132:	b2d2      	uxtb	r2, r2
 8008134:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813a:	1c5a      	adds	r2, r3, #1
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008144:	b29b      	uxth	r3, r3
 8008146:	3b01      	subs	r3, #1
 8008148:	b29a      	uxth	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800814e:	e018      	b.n	8008182 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008150:	f7fc fde4 	bl	8004d1c <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	429a      	cmp	r2, r3
 800815e:	d803      	bhi.n	8008168 <HAL_SPI_Receive+0x15e>
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008166:	d102      	bne.n	800816e <HAL_SPI_Receive+0x164>
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d109      	bne.n	8008182 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e058      	b.n	8008234 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008186:	b29b      	uxth	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1c4      	bne.n	8008116 <HAL_SPI_Receive+0x10c>
 800818c:	e038      	b.n	8008200 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b01      	cmp	r3, #1
 800819a:	d113      	bne.n	80081c4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a6:	b292      	uxth	r2, r2
 80081a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ae:	1c9a      	adds	r2, r3, #2
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b29a      	uxth	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80081c2:	e018      	b.n	80081f6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081c4:	f7fc fdaa 	bl	8004d1c <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d803      	bhi.n	80081dc <HAL_SPI_Receive+0x1d2>
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081da:	d102      	bne.n	80081e2 <HAL_SPI_Receive+0x1d8>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d109      	bne.n	80081f6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e01e      	b.n	8008234 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1c6      	bne.n	800818e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 fb6b 	bl	80088e0 <SPI_EndRxTransaction>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2220      	movs	r2, #32
 8008214:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e000      	b.n	8008234 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8008232:	2300      	movs	r3, #0
  }
}
 8008234:	4618      	mov	r0, r3
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08a      	sub	sp, #40	@ 0x28
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
 8008248:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800824a:	2301      	movs	r3, #1
 800824c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800824e:	f7fc fd65 	bl	8004d1c <HAL_GetTick>
 8008252:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800825a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008262:	887b      	ldrh	r3, [r7, #2]
 8008264:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008266:	7ffb      	ldrb	r3, [r7, #31]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d00c      	beq.n	8008286 <HAL_SPI_TransmitReceive+0x4a>
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008272:	d106      	bne.n	8008282 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d102      	bne.n	8008282 <HAL_SPI_TransmitReceive+0x46>
 800827c:	7ffb      	ldrb	r3, [r7, #31]
 800827e:	2b04      	cmp	r3, #4
 8008280:	d001      	beq.n	8008286 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8008282:	2302      	movs	r3, #2
 8008284:	e17f      	b.n	8008586 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d005      	beq.n	8008298 <HAL_SPI_TransmitReceive+0x5c>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d002      	beq.n	8008298 <HAL_SPI_TransmitReceive+0x5c>
 8008292:	887b      	ldrh	r3, [r7, #2]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e174      	b.n	8008586 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d101      	bne.n	80082aa <HAL_SPI_TransmitReceive+0x6e>
 80082a6:	2302      	movs	r3, #2
 80082a8:	e16d      	b.n	8008586 <HAL_SPI_TransmitReceive+0x34a>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b04      	cmp	r3, #4
 80082bc:	d003      	beq.n	80082c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2205      	movs	r2, #5
 80082c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	887a      	ldrh	r2, [r7, #2]
 80082d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	887a      	ldrh	r2, [r7, #2]
 80082dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	887a      	ldrh	r2, [r7, #2]
 80082e8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	887a      	ldrh	r2, [r7, #2]
 80082ee:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008306:	2b40      	cmp	r3, #64	@ 0x40
 8008308:	d007      	beq.n	800831a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008318:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008322:	d17e      	bne.n	8008422 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <HAL_SPI_TransmitReceive+0xf6>
 800832c:	8afb      	ldrh	r3, [r7, #22]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d16c      	bne.n	800840c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008336:	881a      	ldrh	r2, [r3, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008342:	1c9a      	adds	r2, r3, #2
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800834c:	b29b      	uxth	r3, r3
 800834e:	3b01      	subs	r3, #1
 8008350:	b29a      	uxth	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008356:	e059      	b.n	800840c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b02      	cmp	r3, #2
 8008364:	d11b      	bne.n	800839e <HAL_SPI_TransmitReceive+0x162>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800836a:	b29b      	uxth	r3, r3
 800836c:	2b00      	cmp	r3, #0
 800836e:	d016      	beq.n	800839e <HAL_SPI_TransmitReceive+0x162>
 8008370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008372:	2b01      	cmp	r3, #1
 8008374:	d113      	bne.n	800839e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800837a:	881a      	ldrh	r2, [r3, #0]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008386:	1c9a      	adds	r2, r3, #2
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008390:	b29b      	uxth	r3, r3
 8008392:	3b01      	subs	r3, #1
 8008394:	b29a      	uxth	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d119      	bne.n	80083e0 <HAL_SPI_TransmitReceive+0x1a4>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d014      	beq.n	80083e0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c0:	b292      	uxth	r2, r2
 80083c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c8:	1c9a      	adds	r2, r3, #2
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	3b01      	subs	r3, #1
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083dc:	2301      	movs	r3, #1
 80083de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80083e0:	f7fc fc9c 	bl	8004d1c <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d80d      	bhi.n	800840c <HAL_SPI_TransmitReceive+0x1d0>
 80083f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f6:	d009      	beq.n	800840c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e0bc      	b.n	8008586 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008410:	b29b      	uxth	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1a0      	bne.n	8008358 <HAL_SPI_TransmitReceive+0x11c>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800841a:	b29b      	uxth	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d19b      	bne.n	8008358 <HAL_SPI_TransmitReceive+0x11c>
 8008420:	e082      	b.n	8008528 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d002      	beq.n	8008430 <HAL_SPI_TransmitReceive+0x1f4>
 800842a:	8afb      	ldrh	r3, [r7, #22]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d171      	bne.n	8008514 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	330c      	adds	r3, #12
 800843a:	7812      	ldrb	r2, [r2, #0]
 800843c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008442:	1c5a      	adds	r2, r3, #1
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800844c:	b29b      	uxth	r3, r3
 800844e:	3b01      	subs	r3, #1
 8008450:	b29a      	uxth	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008456:	e05d      	b.n	8008514 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	f003 0302 	and.w	r3, r3, #2
 8008462:	2b02      	cmp	r3, #2
 8008464:	d11c      	bne.n	80084a0 <HAL_SPI_TransmitReceive+0x264>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800846a:	b29b      	uxth	r3, r3
 800846c:	2b00      	cmp	r3, #0
 800846e:	d017      	beq.n	80084a0 <HAL_SPI_TransmitReceive+0x264>
 8008470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008472:	2b01      	cmp	r3, #1
 8008474:	d114      	bne.n	80084a0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	330c      	adds	r3, #12
 8008480:	7812      	ldrb	r2, [r2, #0]
 8008482:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008492:	b29b      	uxth	r3, r3
 8008494:	3b01      	subs	r3, #1
 8008496:	b29a      	uxth	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d119      	bne.n	80084e2 <HAL_SPI_TransmitReceive+0x2a6>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d014      	beq.n	80084e2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68da      	ldr	r2, [r3, #12]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c2:	b2d2      	uxtb	r2, r2
 80084c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ca:	1c5a      	adds	r2, r3, #1
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	b29a      	uxth	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084de:	2301      	movs	r3, #1
 80084e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80084e2:	f7fc fc1b 	bl	8004d1c <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d803      	bhi.n	80084fa <HAL_SPI_TransmitReceive+0x2be>
 80084f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f8:	d102      	bne.n	8008500 <HAL_SPI_TransmitReceive+0x2c4>
 80084fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d109      	bne.n	8008514 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e038      	b.n	8008586 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008518:	b29b      	uxth	r3, r3
 800851a:	2b00      	cmp	r3, #0
 800851c:	d19c      	bne.n	8008458 <HAL_SPI_TransmitReceive+0x21c>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008522:	b29b      	uxth	r3, r3
 8008524:	2b00      	cmp	r3, #0
 8008526:	d197      	bne.n	8008458 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008528:	6a3a      	ldr	r2, [r7, #32]
 800852a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 fa3d 	bl	80089ac <SPI_EndRxTxTransaction>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d008      	beq.n	800854a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2220      	movs	r2, #32
 800853c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e01d      	b.n	8008586 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10a      	bne.n	8008568 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008552:	2300      	movs	r3, #0
 8008554:	613b      	str	r3, [r7, #16]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	613b      	str	r3, [r7, #16]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	613b      	str	r3, [r7, #16]
 8008566:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e000      	b.n	8008586 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008584:	2300      	movs	r3, #0
  }
}
 8008586:	4618      	mov	r0, r3
 8008588:	3728      	adds	r7, #40	@ 0x28
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
	...

08008590 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b088      	sub	sp, #32
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10e      	bne.n	80085d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d009      	beq.n	80085d0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d004      	beq.n	80085d0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	4798      	blx	r3
    return;
 80085ce:	e0ce      	b.n	800876e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d009      	beq.n	80085ee <HAL_SPI_IRQHandler+0x5e>
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d004      	beq.n	80085ee <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	4798      	blx	r3
    return;
 80085ec:	e0bf      	b.n	800876e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	f003 0320 	and.w	r3, r3, #32
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10a      	bne.n	800860e <HAL_SPI_IRQHandler+0x7e>
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d105      	bne.n	800860e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 80b0 	beq.w	800876e <HAL_SPI_IRQHandler+0x1de>
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	f003 0320 	and.w	r3, r3, #32
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 80aa 	beq.w	800876e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008620:	2b00      	cmp	r3, #0
 8008622:	d023      	beq.n	800866c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b03      	cmp	r3, #3
 800862e:	d011      	beq.n	8008654 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008634:	f043 0204 	orr.w	r2, r3, #4
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800863c:	2300      	movs	r3, #0
 800863e:	617b      	str	r3, [r7, #20]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	617b      	str	r3, [r7, #20]
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	e00b      	b.n	800866c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008654:	2300      	movs	r3, #0
 8008656:	613b      	str	r3, [r7, #16]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	613b      	str	r3, [r7, #16]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	613b      	str	r3, [r7, #16]
 8008668:	693b      	ldr	r3, [r7, #16]
        return;
 800866a:	e080      	b.n	800876e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d014      	beq.n	80086a0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800867a:	f043 0201 	orr.w	r2, r3, #1
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	60fb      	str	r3, [r7, #12]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00c      	beq.n	80086c4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ae:	f043 0208 	orr.w	r2, r3, #8
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80086b6:	2300      	movs	r3, #0
 80086b8:	60bb      	str	r3, [r7, #8]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	60bb      	str	r3, [r7, #8]
 80086c2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d04f      	beq.n	800876c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80086da:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d104      	bne.n	80086f8 <HAL_SPI_IRQHandler+0x168>
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d034      	beq.n	8008762 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 0203 	bic.w	r2, r2, #3
 8008706:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800870c:	2b00      	cmp	r3, #0
 800870e:	d011      	beq.n	8008734 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008714:	4a17      	ldr	r2, [pc, #92]	@ (8008774 <HAL_SPI_IRQHandler+0x1e4>)
 8008716:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800871c:	4618      	mov	r0, r3
 800871e:	f7fc ff3b 	bl	8005598 <HAL_DMA_Abort_IT>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d005      	beq.n	8008734 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800872c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008738:	2b00      	cmp	r3, #0
 800873a:	d016      	beq.n	800876a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008740:	4a0c      	ldr	r2, [pc, #48]	@ (8008774 <HAL_SPI_IRQHandler+0x1e4>)
 8008742:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008748:	4618      	mov	r0, r3
 800874a:	f7fc ff25 	bl	8005598 <HAL_DMA_Abort_IT>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00a      	beq.n	800876a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008758:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8008760:	e003      	b.n	800876a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f808 	bl	8008778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008768:	e000      	b.n	800876c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800876a:	bf00      	nop
    return;
 800876c:	bf00      	nop
  }
}
 800876e:	3720      	adds	r7, #32
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	080087a9 	.word	0x080087a9

08008778 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800879a:	b2db      	uxtb	r3, r3
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f7ff ffd8 	bl	8008778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80087c8:	bf00      	nop
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	4613      	mov	r3, r2
 80087de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087e0:	f7fc fa9c 	bl	8004d1c <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e8:	1a9b      	subs	r3, r3, r2
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	4413      	add	r3, r2
 80087ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087f0:	f7fc fa94 	bl	8004d1c <HAL_GetTick>
 80087f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087f6:	4b39      	ldr	r3, [pc, #228]	@ (80088dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	015b      	lsls	r3, r3, #5
 80087fc:	0d1b      	lsrs	r3, r3, #20
 80087fe:	69fa      	ldr	r2, [r7, #28]
 8008800:	fb02 f303 	mul.w	r3, r2, r3
 8008804:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008806:	e054      	b.n	80088b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880e:	d050      	beq.n	80088b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008810:	f7fc fa84 	bl	8004d1c <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	69fa      	ldr	r2, [r7, #28]
 800881c:	429a      	cmp	r2, r3
 800881e:	d902      	bls.n	8008826 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d13d      	bne.n	80088a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008834:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800883e:	d111      	bne.n	8008864 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008848:	d004      	beq.n	8008854 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008852:	d107      	bne.n	8008864 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008862:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008868:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800886c:	d10f      	bne.n	800888e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800888c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e017      	b.n	80088d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	4013      	ands	r3, r2
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	429a      	cmp	r2, r3
 80088c0:	bf0c      	ite	eq
 80088c2:	2301      	moveq	r3, #1
 80088c4:	2300      	movne	r3, #0
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	461a      	mov	r2, r3
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d19b      	bne.n	8008808 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3720      	adds	r7, #32
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	200000ac 	.word	0x200000ac

080088e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af02      	add	r7, sp, #8
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80088f4:	d111      	bne.n	800891a <SPI_EndRxTransaction+0x3a>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088fe:	d004      	beq.n	800890a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008908:	d107      	bne.n	800891a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008918:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008922:	d12a      	bne.n	800897a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800892c:	d012      	beq.n	8008954 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2200      	movs	r2, #0
 8008936:	2180      	movs	r1, #128	@ 0x80
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f7ff ff49 	bl	80087d0 <SPI_WaitFlagStateUntilTimeout>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d02d      	beq.n	80089a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008948:	f043 0220 	orr.w	r2, r3, #32
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e026      	b.n	80089a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2200      	movs	r2, #0
 800895c:	2101      	movs	r1, #1
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f7ff ff36 	bl	80087d0 <SPI_WaitFlagStateUntilTimeout>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d01a      	beq.n	80089a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800896e:	f043 0220 	orr.w	r2, r3, #32
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e013      	b.n	80089a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	2200      	movs	r2, #0
 8008982:	2101      	movs	r1, #1
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f7ff ff23 	bl	80087d0 <SPI_WaitFlagStateUntilTimeout>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d007      	beq.n	80089a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008994:	f043 0220 	orr.w	r2, r3, #32
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800899c:	2303      	movs	r3, #3
 800899e:	e000      	b.n	80089a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
	...

080089ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2201      	movs	r2, #1
 80089c0:	2102      	movs	r1, #2
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f7ff ff04 	bl	80087d0 <SPI_WaitFlagStateUntilTimeout>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d007      	beq.n	80089de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089d2:	f043 0220 	orr.w	r2, r3, #32
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e032      	b.n	8008a44 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80089de:	4b1b      	ldr	r3, [pc, #108]	@ (8008a4c <SPI_EndRxTxTransaction+0xa0>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008a50 <SPI_EndRxTxTransaction+0xa4>)
 80089e4:	fba2 2303 	umull	r2, r3, r2, r3
 80089e8:	0d5b      	lsrs	r3, r3, #21
 80089ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80089ee:	fb02 f303 	mul.w	r3, r2, r3
 80089f2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089fc:	d112      	bne.n	8008a24 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2200      	movs	r2, #0
 8008a06:	2180      	movs	r1, #128	@ 0x80
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f7ff fee1 	bl	80087d0 <SPI_WaitFlagStateUntilTimeout>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d016      	beq.n	8008a42 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a18:	f043 0220 	orr.w	r2, r3, #32
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e00f      	b.n	8008a44 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00a      	beq.n	8008a40 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a3a:	2b80      	cmp	r3, #128	@ 0x80
 8008a3c:	d0f2      	beq.n	8008a24 <SPI_EndRxTxTransaction+0x78>
 8008a3e:	e000      	b.n	8008a42 <SPI_EndRxTxTransaction+0x96>
        break;
 8008a40:	bf00      	nop
  }

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3718      	adds	r7, #24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	200000ac 	.word	0x200000ac
 8008a50:	165e9f81 	.word	0x165e9f81

08008a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e041      	b.n	8008aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d106      	bne.n	8008a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7fb ffd8 	bl	8004a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3304      	adds	r3, #4
 8008a90:	4619      	mov	r1, r3
 8008a92:	4610      	mov	r0, r2
 8008a94:	f000 fc3c 	bl	8009310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
	...

08008af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d001      	beq.n	8008b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e044      	b.n	8008b96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f042 0201 	orr.w	r2, r2, #1
 8008b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a1e      	ldr	r2, [pc, #120]	@ (8008ba4 <HAL_TIM_Base_Start_IT+0xb0>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d018      	beq.n	8008b60 <HAL_TIM_Base_Start_IT+0x6c>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b36:	d013      	beq.n	8008b60 <HAL_TIM_Base_Start_IT+0x6c>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8008ba8 <HAL_TIM_Base_Start_IT+0xb4>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d00e      	beq.n	8008b60 <HAL_TIM_Base_Start_IT+0x6c>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a19      	ldr	r2, [pc, #100]	@ (8008bac <HAL_TIM_Base_Start_IT+0xb8>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d009      	beq.n	8008b60 <HAL_TIM_Base_Start_IT+0x6c>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a17      	ldr	r2, [pc, #92]	@ (8008bb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d004      	beq.n	8008b60 <HAL_TIM_Base_Start_IT+0x6c>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a16      	ldr	r2, [pc, #88]	@ (8008bb4 <HAL_TIM_Base_Start_IT+0xc0>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d111      	bne.n	8008b84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b06      	cmp	r3, #6
 8008b70:	d010      	beq.n	8008b94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f042 0201 	orr.w	r2, r2, #1
 8008b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b82:	e007      	b.n	8008b94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f042 0201 	orr.w	r2, r2, #1
 8008b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	40010000 	.word	0x40010000
 8008ba8:	40000400 	.word	0x40000400
 8008bac:	40000800 	.word	0x40000800
 8008bb0:	40000c00 	.word	0x40000c00
 8008bb4:	40014000 	.word	0x40014000

08008bb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e041      	b.n	8008c4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d106      	bne.n	8008be4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f839 	bl	8008c56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f000 fb8a 	bl	8009310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b083      	sub	sp, #12
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
	...

08008c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d109      	bne.n	8008c90 <HAL_TIM_PWM_Start+0x24>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	bf14      	ite	ne
 8008c88:	2301      	movne	r3, #1
 8008c8a:	2300      	moveq	r3, #0
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	e022      	b.n	8008cd6 <HAL_TIM_PWM_Start+0x6a>
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	d109      	bne.n	8008caa <HAL_TIM_PWM_Start+0x3e>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	bf14      	ite	ne
 8008ca2:	2301      	movne	r3, #1
 8008ca4:	2300      	moveq	r3, #0
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	e015      	b.n	8008cd6 <HAL_TIM_PWM_Start+0x6a>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d109      	bne.n	8008cc4 <HAL_TIM_PWM_Start+0x58>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	bf14      	ite	ne
 8008cbc:	2301      	movne	r3, #1
 8008cbe:	2300      	moveq	r3, #0
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	e008      	b.n	8008cd6 <HAL_TIM_PWM_Start+0x6a>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	bf14      	ite	ne
 8008cd0:	2301      	movne	r3, #1
 8008cd2:	2300      	moveq	r3, #0
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e068      	b.n	8008db0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d104      	bne.n	8008cee <HAL_TIM_PWM_Start+0x82>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cec:	e013      	b.n	8008d16 <HAL_TIM_PWM_Start+0xaa>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b04      	cmp	r3, #4
 8008cf2:	d104      	bne.n	8008cfe <HAL_TIM_PWM_Start+0x92>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cfc:	e00b      	b.n	8008d16 <HAL_TIM_PWM_Start+0xaa>
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d104      	bne.n	8008d0e <HAL_TIM_PWM_Start+0xa2>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2202      	movs	r2, #2
 8008d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d0c:	e003      	b.n	8008d16 <HAL_TIM_PWM_Start+0xaa>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2202      	movs	r2, #2
 8008d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 fda8 	bl	8009874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a23      	ldr	r2, [pc, #140]	@ (8008db8 <HAL_TIM_PWM_Start+0x14c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d107      	bne.n	8008d3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a1d      	ldr	r2, [pc, #116]	@ (8008db8 <HAL_TIM_PWM_Start+0x14c>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d018      	beq.n	8008d7a <HAL_TIM_PWM_Start+0x10e>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d50:	d013      	beq.n	8008d7a <HAL_TIM_PWM_Start+0x10e>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a19      	ldr	r2, [pc, #100]	@ (8008dbc <HAL_TIM_PWM_Start+0x150>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d00e      	beq.n	8008d7a <HAL_TIM_PWM_Start+0x10e>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a17      	ldr	r2, [pc, #92]	@ (8008dc0 <HAL_TIM_PWM_Start+0x154>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d009      	beq.n	8008d7a <HAL_TIM_PWM_Start+0x10e>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a16      	ldr	r2, [pc, #88]	@ (8008dc4 <HAL_TIM_PWM_Start+0x158>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d004      	beq.n	8008d7a <HAL_TIM_PWM_Start+0x10e>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a14      	ldr	r2, [pc, #80]	@ (8008dc8 <HAL_TIM_PWM_Start+0x15c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d111      	bne.n	8008d9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	f003 0307 	and.w	r3, r3, #7
 8008d84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b06      	cmp	r3, #6
 8008d8a:	d010      	beq.n	8008dae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f042 0201 	orr.w	r2, r2, #1
 8008d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d9c:	e007      	b.n	8008dae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f042 0201 	orr.w	r2, r2, #1
 8008dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	40010000 	.word	0x40010000
 8008dbc:	40000400 	.word	0x40000400
 8008dc0:	40000800 	.word	0x40000800
 8008dc4:	40000c00 	.word	0x40000c00
 8008dc8:	40014000 	.word	0x40014000

08008dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d020      	beq.n	8008e30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d01b      	beq.n	8008e30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f06f 0202 	mvn.w	r2, #2
 8008e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	f003 0303 	and.w	r3, r3, #3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d003      	beq.n	8008e1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fa5b 	bl	80092d2 <HAL_TIM_IC_CaptureCallback>
 8008e1c:	e005      	b.n	8008e2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fa4d 	bl	80092be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fa5e 	bl	80092e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f003 0304 	and.w	r3, r3, #4
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d020      	beq.n	8008e7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f003 0304 	and.w	r3, r3, #4
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d01b      	beq.n	8008e7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f06f 0204 	mvn.w	r2, #4
 8008e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2202      	movs	r2, #2
 8008e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d003      	beq.n	8008e6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fa35 	bl	80092d2 <HAL_TIM_IC_CaptureCallback>
 8008e68:	e005      	b.n	8008e76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fa27 	bl	80092be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fa38 	bl	80092e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f003 0308 	and.w	r3, r3, #8
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d020      	beq.n	8008ec8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f003 0308 	and.w	r3, r3, #8
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01b      	beq.n	8008ec8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f06f 0208 	mvn.w	r2, #8
 8008e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2204      	movs	r2, #4
 8008e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	f003 0303 	and.w	r3, r3, #3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fa0f 	bl	80092d2 <HAL_TIM_IC_CaptureCallback>
 8008eb4:	e005      	b.n	8008ec2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fa01 	bl	80092be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fa12 	bl	80092e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	f003 0310 	and.w	r3, r3, #16
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d020      	beq.n	8008f14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f003 0310 	and.w	r3, r3, #16
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d01b      	beq.n	8008f14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f06f 0210 	mvn.w	r2, #16
 8008ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2208      	movs	r2, #8
 8008eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d003      	beq.n	8008f02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f9e9 	bl	80092d2 <HAL_TIM_IC_CaptureCallback>
 8008f00:	e005      	b.n	8008f0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f9db 	bl	80092be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f9ec 	bl	80092e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f003 0301 	and.w	r3, r3, #1
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00c      	beq.n	8008f38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d007      	beq.n	8008f38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f06f 0201 	mvn.w	r2, #1
 8008f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7fb f9d0 	bl	80042d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00c      	beq.n	8008f5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d007      	beq.n	8008f5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fd2a 	bl	80099b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00c      	beq.n	8008f80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d007      	beq.n	8008f80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f9bd 	bl	80092fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	f003 0320 	and.w	r3, r3, #32
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00c      	beq.n	8008fa4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f003 0320 	and.w	r3, r3, #32
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d007      	beq.n	8008fa4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f06f 0220 	mvn.w	r2, #32
 8008f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fcfc 	bl	800999c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fa4:	bf00      	nop
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d101      	bne.n	8008fca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	e0ae      	b.n	8009128 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b0c      	cmp	r3, #12
 8008fd6:	f200 809f 	bhi.w	8009118 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008fda:	a201      	add	r2, pc, #4	@ (adr r2, 8008fe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe0:	08009015 	.word	0x08009015
 8008fe4:	08009119 	.word	0x08009119
 8008fe8:	08009119 	.word	0x08009119
 8008fec:	08009119 	.word	0x08009119
 8008ff0:	08009055 	.word	0x08009055
 8008ff4:	08009119 	.word	0x08009119
 8008ff8:	08009119 	.word	0x08009119
 8008ffc:	08009119 	.word	0x08009119
 8009000:	08009097 	.word	0x08009097
 8009004:	08009119 	.word	0x08009119
 8009008:	08009119 	.word	0x08009119
 800900c:	08009119 	.word	0x08009119
 8009010:	080090d7 	.word	0x080090d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68b9      	ldr	r1, [r7, #8]
 800901a:	4618      	mov	r0, r3
 800901c:	f000 fa04 	bl	8009428 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	699a      	ldr	r2, [r3, #24]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f042 0208 	orr.w	r2, r2, #8
 800902e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	699a      	ldr	r2, [r3, #24]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f022 0204 	bic.w	r2, r2, #4
 800903e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6999      	ldr	r1, [r3, #24]
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	691a      	ldr	r2, [r3, #16]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	430a      	orrs	r2, r1
 8009050:	619a      	str	r2, [r3, #24]
      break;
 8009052:	e064      	b.n	800911e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68b9      	ldr	r1, [r7, #8]
 800905a:	4618      	mov	r0, r3
 800905c:	f000 fa4a 	bl	80094f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	699a      	ldr	r2, [r3, #24]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800906e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	699a      	ldr	r2, [r3, #24]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800907e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6999      	ldr	r1, [r3, #24]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	021a      	lsls	r2, r3, #8
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	430a      	orrs	r2, r1
 8009092:	619a      	str	r2, [r3, #24]
      break;
 8009094:	e043      	b.n	800911e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68b9      	ldr	r1, [r7, #8]
 800909c:	4618      	mov	r0, r3
 800909e:	f000 fa95 	bl	80095cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	69da      	ldr	r2, [r3, #28]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f042 0208 	orr.w	r2, r2, #8
 80090b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	69da      	ldr	r2, [r3, #28]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 0204 	bic.w	r2, r2, #4
 80090c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	69d9      	ldr	r1, [r3, #28]
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	691a      	ldr	r2, [r3, #16]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	61da      	str	r2, [r3, #28]
      break;
 80090d4:	e023      	b.n	800911e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68b9      	ldr	r1, [r7, #8]
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 fadf 	bl	80096a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	69da      	ldr	r2, [r3, #28]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	69da      	ldr	r2, [r3, #28]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	69d9      	ldr	r1, [r3, #28]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	021a      	lsls	r2, r3, #8
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	430a      	orrs	r2, r1
 8009114:	61da      	str	r2, [r3, #28]
      break;
 8009116:	e002      	b.n	800911e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	75fb      	strb	r3, [r7, #23]
      break;
 800911c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009126:	7dfb      	ldrb	r3, [r7, #23]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3718      	adds	r7, #24
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009144:	2b01      	cmp	r3, #1
 8009146:	d101      	bne.n	800914c <HAL_TIM_ConfigClockSource+0x1c>
 8009148:	2302      	movs	r3, #2
 800914a:	e0b4      	b.n	80092b6 <HAL_TIM_ConfigClockSource+0x186>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800916a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009184:	d03e      	beq.n	8009204 <HAL_TIM_ConfigClockSource+0xd4>
 8009186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800918a:	f200 8087 	bhi.w	800929c <HAL_TIM_ConfigClockSource+0x16c>
 800918e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009192:	f000 8086 	beq.w	80092a2 <HAL_TIM_ConfigClockSource+0x172>
 8009196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800919a:	d87f      	bhi.n	800929c <HAL_TIM_ConfigClockSource+0x16c>
 800919c:	2b70      	cmp	r3, #112	@ 0x70
 800919e:	d01a      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0xa6>
 80091a0:	2b70      	cmp	r3, #112	@ 0x70
 80091a2:	d87b      	bhi.n	800929c <HAL_TIM_ConfigClockSource+0x16c>
 80091a4:	2b60      	cmp	r3, #96	@ 0x60
 80091a6:	d050      	beq.n	800924a <HAL_TIM_ConfigClockSource+0x11a>
 80091a8:	2b60      	cmp	r3, #96	@ 0x60
 80091aa:	d877      	bhi.n	800929c <HAL_TIM_ConfigClockSource+0x16c>
 80091ac:	2b50      	cmp	r3, #80	@ 0x50
 80091ae:	d03c      	beq.n	800922a <HAL_TIM_ConfigClockSource+0xfa>
 80091b0:	2b50      	cmp	r3, #80	@ 0x50
 80091b2:	d873      	bhi.n	800929c <HAL_TIM_ConfigClockSource+0x16c>
 80091b4:	2b40      	cmp	r3, #64	@ 0x40
 80091b6:	d058      	beq.n	800926a <HAL_TIM_ConfigClockSource+0x13a>
 80091b8:	2b40      	cmp	r3, #64	@ 0x40
 80091ba:	d86f      	bhi.n	800929c <HAL_TIM_ConfigClockSource+0x16c>
 80091bc:	2b30      	cmp	r3, #48	@ 0x30
 80091be:	d064      	beq.n	800928a <HAL_TIM_ConfigClockSource+0x15a>
 80091c0:	2b30      	cmp	r3, #48	@ 0x30
 80091c2:	d86b      	bhi.n	800929c <HAL_TIM_ConfigClockSource+0x16c>
 80091c4:	2b20      	cmp	r3, #32
 80091c6:	d060      	beq.n	800928a <HAL_TIM_ConfigClockSource+0x15a>
 80091c8:	2b20      	cmp	r3, #32
 80091ca:	d867      	bhi.n	800929c <HAL_TIM_ConfigClockSource+0x16c>
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d05c      	beq.n	800928a <HAL_TIM_ConfigClockSource+0x15a>
 80091d0:	2b10      	cmp	r3, #16
 80091d2:	d05a      	beq.n	800928a <HAL_TIM_ConfigClockSource+0x15a>
 80091d4:	e062      	b.n	800929c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091e6:	f000 fb25 	bl	8009834 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80091f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	609a      	str	r2, [r3, #8]
      break;
 8009202:	e04f      	b.n	80092a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009214:	f000 fb0e 	bl	8009834 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689a      	ldr	r2, [r3, #8]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009226:	609a      	str	r2, [r3, #8]
      break;
 8009228:	e03c      	b.n	80092a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009236:	461a      	mov	r2, r3
 8009238:	f000 fa82 	bl	8009740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2150      	movs	r1, #80	@ 0x50
 8009242:	4618      	mov	r0, r3
 8009244:	f000 fadb 	bl	80097fe <TIM_ITRx_SetConfig>
      break;
 8009248:	e02c      	b.n	80092a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009256:	461a      	mov	r2, r3
 8009258:	f000 faa1 	bl	800979e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2160      	movs	r1, #96	@ 0x60
 8009262:	4618      	mov	r0, r3
 8009264:	f000 facb 	bl	80097fe <TIM_ITRx_SetConfig>
      break;
 8009268:	e01c      	b.n	80092a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009276:	461a      	mov	r2, r3
 8009278:	f000 fa62 	bl	8009740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2140      	movs	r1, #64	@ 0x40
 8009282:	4618      	mov	r0, r3
 8009284:	f000 fabb 	bl	80097fe <TIM_ITRx_SetConfig>
      break;
 8009288:	e00c      	b.n	80092a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4619      	mov	r1, r3
 8009294:	4610      	mov	r0, r2
 8009296:	f000 fab2 	bl	80097fe <TIM_ITRx_SetConfig>
      break;
 800929a:	e003      	b.n	80092a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	73fb      	strb	r3, [r7, #15]
      break;
 80092a0:	e000      	b.n	80092a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80092a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092be:	b480      	push	{r7}
 80092c0:	b083      	sub	sp, #12
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092c6:	bf00      	nop
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092da:	bf00      	nop
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092e6:	b480      	push	{r7}
 80092e8:	b083      	sub	sp, #12
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092ee:	bf00      	nop
 80092f0:	370c      	adds	r7, #12
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr

080092fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092fa:	b480      	push	{r7}
 80092fc:	b083      	sub	sp, #12
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009302:	bf00      	nop
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
	...

08009310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a3a      	ldr	r2, [pc, #232]	@ (800940c <TIM_Base_SetConfig+0xfc>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d00f      	beq.n	8009348 <TIM_Base_SetConfig+0x38>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800932e:	d00b      	beq.n	8009348 <TIM_Base_SetConfig+0x38>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a37      	ldr	r2, [pc, #220]	@ (8009410 <TIM_Base_SetConfig+0x100>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d007      	beq.n	8009348 <TIM_Base_SetConfig+0x38>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a36      	ldr	r2, [pc, #216]	@ (8009414 <TIM_Base_SetConfig+0x104>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d003      	beq.n	8009348 <TIM_Base_SetConfig+0x38>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a35      	ldr	r2, [pc, #212]	@ (8009418 <TIM_Base_SetConfig+0x108>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d108      	bne.n	800935a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800934e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	4313      	orrs	r3, r2
 8009358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a2b      	ldr	r2, [pc, #172]	@ (800940c <TIM_Base_SetConfig+0xfc>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d01b      	beq.n	800939a <TIM_Base_SetConfig+0x8a>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009368:	d017      	beq.n	800939a <TIM_Base_SetConfig+0x8a>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a28      	ldr	r2, [pc, #160]	@ (8009410 <TIM_Base_SetConfig+0x100>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d013      	beq.n	800939a <TIM_Base_SetConfig+0x8a>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a27      	ldr	r2, [pc, #156]	@ (8009414 <TIM_Base_SetConfig+0x104>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d00f      	beq.n	800939a <TIM_Base_SetConfig+0x8a>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a26      	ldr	r2, [pc, #152]	@ (8009418 <TIM_Base_SetConfig+0x108>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d00b      	beq.n	800939a <TIM_Base_SetConfig+0x8a>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a25      	ldr	r2, [pc, #148]	@ (800941c <TIM_Base_SetConfig+0x10c>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d007      	beq.n	800939a <TIM_Base_SetConfig+0x8a>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a24      	ldr	r2, [pc, #144]	@ (8009420 <TIM_Base_SetConfig+0x110>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d003      	beq.n	800939a <TIM_Base_SetConfig+0x8a>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a23      	ldr	r2, [pc, #140]	@ (8009424 <TIM_Base_SetConfig+0x114>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d108      	bne.n	80093ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	68db      	ldr	r3, [r3, #12]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a0e      	ldr	r2, [pc, #56]	@ (800940c <TIM_Base_SetConfig+0xfc>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d103      	bne.n	80093e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	691a      	ldr	r2, [r3, #16]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d105      	bne.n	80093fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	f023 0201 	bic.w	r2, r3, #1
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	611a      	str	r2, [r3, #16]
  }
}
 80093fe:	bf00      	nop
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	40010000 	.word	0x40010000
 8009410:	40000400 	.word	0x40000400
 8009414:	40000800 	.word	0x40000800
 8009418:	40000c00 	.word	0x40000c00
 800941c:	40014000 	.word	0x40014000
 8009420:	40014400 	.word	0x40014400
 8009424:	40014800 	.word	0x40014800

08009428 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a1b      	ldr	r3, [r3, #32]
 800943c:	f023 0201 	bic.w	r2, r3, #1
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 0303 	bic.w	r3, r3, #3
 800945e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	4313      	orrs	r3, r2
 8009468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f023 0302 	bic.w	r3, r3, #2
 8009470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	4313      	orrs	r3, r2
 800947a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a1c      	ldr	r2, [pc, #112]	@ (80094f0 <TIM_OC1_SetConfig+0xc8>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d10c      	bne.n	800949e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	f023 0308 	bic.w	r3, r3, #8
 800948a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	4313      	orrs	r3, r2
 8009494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f023 0304 	bic.w	r3, r3, #4
 800949c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a13      	ldr	r2, [pc, #76]	@ (80094f0 <TIM_OC1_SetConfig+0xc8>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d111      	bne.n	80094ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	4313      	orrs	r3, r2
 80094be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	621a      	str	r2, [r3, #32]
}
 80094e4:	bf00      	nop
 80094e6:	371c      	adds	r7, #28
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	40010000 	.word	0x40010000

080094f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a1b      	ldr	r3, [r3, #32]
 8009508:	f023 0210 	bic.w	r2, r3, #16
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800952a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	021b      	lsls	r3, r3, #8
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	4313      	orrs	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f023 0320 	bic.w	r3, r3, #32
 800953e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	011b      	lsls	r3, r3, #4
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	4313      	orrs	r3, r2
 800954a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a1e      	ldr	r2, [pc, #120]	@ (80095c8 <TIM_OC2_SetConfig+0xd4>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d10d      	bne.n	8009570 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800955a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	011b      	lsls	r3, r3, #4
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	4313      	orrs	r3, r2
 8009566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800956e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a15      	ldr	r2, [pc, #84]	@ (80095c8 <TIM_OC2_SetConfig+0xd4>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d113      	bne.n	80095a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800957e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	695b      	ldr	r3, [r3, #20]
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	4313      	orrs	r3, r2
 8009592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	4313      	orrs	r3, r2
 800959e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	621a      	str	r2, [r3, #32]
}
 80095ba:	bf00      	nop
 80095bc:	371c      	adds	r7, #28
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	40010000 	.word	0x40010000

080095cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f023 0303 	bic.w	r3, r3, #3
 8009602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	4313      	orrs	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	021b      	lsls	r3, r3, #8
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	4313      	orrs	r3, r2
 8009620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a1d      	ldr	r2, [pc, #116]	@ (800969c <TIM_OC3_SetConfig+0xd0>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d10d      	bne.n	8009646 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	021b      	lsls	r3, r3, #8
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	4313      	orrs	r3, r2
 800963c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a14      	ldr	r2, [pc, #80]	@ (800969c <TIM_OC3_SetConfig+0xd0>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d113      	bne.n	8009676 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800965c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	011b      	lsls	r3, r3, #4
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	4313      	orrs	r3, r2
 8009668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	011b      	lsls	r3, r3, #4
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	4313      	orrs	r3, r2
 8009674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	697a      	ldr	r2, [r7, #20]
 800968e:	621a      	str	r2, [r3, #32]
}
 8009690:	bf00      	nop
 8009692:	371c      	adds	r7, #28
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	40010000 	.word	0x40010000

080096a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	021b      	lsls	r3, r3, #8
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	031b      	lsls	r3, r3, #12
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a10      	ldr	r2, [pc, #64]	@ (800973c <TIM_OC4_SetConfig+0x9c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d109      	bne.n	8009714 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	019b      	lsls	r3, r3, #6
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	4313      	orrs	r3, r2
 8009712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	621a      	str	r2, [r3, #32]
}
 800972e:	bf00      	nop
 8009730:	371c      	adds	r7, #28
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	40010000 	.word	0x40010000

08009740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009740:	b480      	push	{r7}
 8009742:	b087      	sub	sp, #28
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6a1b      	ldr	r3, [r3, #32]
 8009750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	f023 0201 	bic.w	r2, r3, #1
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800976a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	011b      	lsls	r3, r3, #4
 8009770:	693a      	ldr	r2, [r7, #16]
 8009772:	4313      	orrs	r3, r2
 8009774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f023 030a 	bic.w	r3, r3, #10
 800977c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800977e:	697a      	ldr	r2, [r7, #20]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	4313      	orrs	r3, r2
 8009784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	621a      	str	r2, [r3, #32]
}
 8009792:	bf00      	nop
 8009794:	371c      	adds	r7, #28
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr

0800979e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800979e:	b480      	push	{r7}
 80097a0:	b087      	sub	sp, #28
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	60f8      	str	r0, [r7, #12]
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	f023 0210 	bic.w	r2, r3, #16
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80097c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	031b      	lsls	r3, r3, #12
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80097da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	011b      	lsls	r3, r3, #4
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	693a      	ldr	r2, [r7, #16]
 80097ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	697a      	ldr	r2, [r7, #20]
 80097f0:	621a      	str	r2, [r3, #32]
}
 80097f2:	bf00      	nop
 80097f4:	371c      	adds	r7, #28
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr

080097fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097fe:	b480      	push	{r7}
 8009800:	b085      	sub	sp, #20
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4313      	orrs	r3, r2
 800981c:	f043 0307 	orr.w	r3, r3, #7
 8009820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	609a      	str	r2, [r3, #8]
}
 8009828:	bf00      	nop
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
 8009840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800984e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	021a      	lsls	r2, r3, #8
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	431a      	orrs	r2, r3
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	4313      	orrs	r3, r2
 800985c:	697a      	ldr	r2, [r7, #20]
 800985e:	4313      	orrs	r3, r2
 8009860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	609a      	str	r2, [r3, #8]
}
 8009868:	bf00      	nop
 800986a:	371c      	adds	r7, #28
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009874:	b480      	push	{r7}
 8009876:	b087      	sub	sp, #28
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f003 031f 	and.w	r3, r3, #31
 8009886:	2201      	movs	r2, #1
 8009888:	fa02 f303 	lsl.w	r3, r2, r3
 800988c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6a1a      	ldr	r2, [r3, #32]
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	43db      	mvns	r3, r3
 8009896:	401a      	ands	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6a1a      	ldr	r2, [r3, #32]
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	f003 031f 	and.w	r3, r3, #31
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	fa01 f303 	lsl.w	r3, r1, r3
 80098ac:	431a      	orrs	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	621a      	str	r2, [r3, #32]
}
 80098b2:	bf00      	nop
 80098b4:	371c      	adds	r7, #28
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
	...

080098c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d101      	bne.n	80098d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098d4:	2302      	movs	r3, #2
 80098d6:	e050      	b.n	800997a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2202      	movs	r2, #2
 80098e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	4313      	orrs	r3, r2
 8009908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a1c      	ldr	r2, [pc, #112]	@ (8009988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d018      	beq.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009924:	d013      	beq.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a18      	ldr	r2, [pc, #96]	@ (800998c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d00e      	beq.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a16      	ldr	r2, [pc, #88]	@ (8009990 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d009      	beq.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a15      	ldr	r2, [pc, #84]	@ (8009994 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d004      	beq.n	800994e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a13      	ldr	r2, [pc, #76]	@ (8009998 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d10c      	bne.n	8009968 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009954:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	4313      	orrs	r3, r2
 800995e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	40010000 	.word	0x40010000
 800998c:	40000400 	.word	0x40000400
 8009990:	40000800 	.word	0x40000800
 8009994:	40000c00 	.word	0x40000c00
 8009998:	40014000 	.word	0x40014000

0800999c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e042      	b.n	8009a5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d106      	bne.n	80099f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7fb f8be 	bl	8004b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2224      	movs	r2, #36	@ 0x24
 80099f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68da      	ldr	r2, [r3, #12]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f82b 	bl	8009a64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	691a      	ldr	r2, [r3, #16]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	695a      	ldr	r2, [r3, #20]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68da      	ldr	r2, [r3, #12]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2220      	movs	r2, #32
 8009a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a68:	b0c0      	sub	sp, #256	@ 0x100
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a80:	68d9      	ldr	r1, [r3, #12]
 8009a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	ea40 0301 	orr.w	r3, r0, r1
 8009a8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aa0:	695b      	ldr	r3, [r3, #20]
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aa8:	69db      	ldr	r3, [r3, #28]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009abc:	f021 010c 	bic.w	r1, r1, #12
 8009ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009aca:	430b      	orrs	r3, r1
 8009acc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ade:	6999      	ldr	r1, [r3, #24]
 8009ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	ea40 0301 	orr.w	r3, r0, r1
 8009aea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	4b8f      	ldr	r3, [pc, #572]	@ (8009d30 <UART_SetConfig+0x2cc>)
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d005      	beq.n	8009b04 <UART_SetConfig+0xa0>
 8009af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	4b8d      	ldr	r3, [pc, #564]	@ (8009d34 <UART_SetConfig+0x2d0>)
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d104      	bne.n	8009b0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b04:	f7fe f8a0 	bl	8007c48 <HAL_RCC_GetPCLK2Freq>
 8009b08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009b0c:	e003      	b.n	8009b16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b0e:	f7fe f887 	bl	8007c20 <HAL_RCC_GetPCLK1Freq>
 8009b12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b1a:	69db      	ldr	r3, [r3, #28]
 8009b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b20:	f040 810c 	bne.w	8009d3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009b2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009b32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009b36:	4622      	mov	r2, r4
 8009b38:	462b      	mov	r3, r5
 8009b3a:	1891      	adds	r1, r2, r2
 8009b3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009b3e:	415b      	adcs	r3, r3
 8009b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009b46:	4621      	mov	r1, r4
 8009b48:	eb12 0801 	adds.w	r8, r2, r1
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	eb43 0901 	adc.w	r9, r3, r1
 8009b52:	f04f 0200 	mov.w	r2, #0
 8009b56:	f04f 0300 	mov.w	r3, #0
 8009b5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009b5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009b62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009b66:	4690      	mov	r8, r2
 8009b68:	4699      	mov	r9, r3
 8009b6a:	4623      	mov	r3, r4
 8009b6c:	eb18 0303 	adds.w	r3, r8, r3
 8009b70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009b74:	462b      	mov	r3, r5
 8009b76:	eb49 0303 	adc.w	r3, r9, r3
 8009b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009b8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009b8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009b92:	460b      	mov	r3, r1
 8009b94:	18db      	adds	r3, r3, r3
 8009b96:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b98:	4613      	mov	r3, r2
 8009b9a:	eb42 0303 	adc.w	r3, r2, r3
 8009b9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ba0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009ba4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009ba8:	f7f7 f81a 	bl	8000be0 <__aeabi_uldivmod>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4b61      	ldr	r3, [pc, #388]	@ (8009d38 <UART_SetConfig+0x2d4>)
 8009bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8009bb6:	095b      	lsrs	r3, r3, #5
 8009bb8:	011c      	lsls	r4, r3, #4
 8009bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009bc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009bc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009bcc:	4642      	mov	r2, r8
 8009bce:	464b      	mov	r3, r9
 8009bd0:	1891      	adds	r1, r2, r2
 8009bd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009bd4:	415b      	adcs	r3, r3
 8009bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009bdc:	4641      	mov	r1, r8
 8009bde:	eb12 0a01 	adds.w	sl, r2, r1
 8009be2:	4649      	mov	r1, r9
 8009be4:	eb43 0b01 	adc.w	fp, r3, r1
 8009be8:	f04f 0200 	mov.w	r2, #0
 8009bec:	f04f 0300 	mov.w	r3, #0
 8009bf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009bf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009bf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009bfc:	4692      	mov	sl, r2
 8009bfe:	469b      	mov	fp, r3
 8009c00:	4643      	mov	r3, r8
 8009c02:	eb1a 0303 	adds.w	r3, sl, r3
 8009c06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c0a:	464b      	mov	r3, r9
 8009c0c:	eb4b 0303 	adc.w	r3, fp, r3
 8009c10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009c24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	18db      	adds	r3, r3, r3
 8009c2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c2e:	4613      	mov	r3, r2
 8009c30:	eb42 0303 	adc.w	r3, r2, r3
 8009c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009c3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009c3e:	f7f6 ffcf 	bl	8000be0 <__aeabi_uldivmod>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	4611      	mov	r1, r2
 8009c48:	4b3b      	ldr	r3, [pc, #236]	@ (8009d38 <UART_SetConfig+0x2d4>)
 8009c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8009c4e:	095b      	lsrs	r3, r3, #5
 8009c50:	2264      	movs	r2, #100	@ 0x64
 8009c52:	fb02 f303 	mul.w	r3, r2, r3
 8009c56:	1acb      	subs	r3, r1, r3
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009c5e:	4b36      	ldr	r3, [pc, #216]	@ (8009d38 <UART_SetConfig+0x2d4>)
 8009c60:	fba3 2302 	umull	r2, r3, r3, r2
 8009c64:	095b      	lsrs	r3, r3, #5
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009c6c:	441c      	add	r4, r3
 8009c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c72:	2200      	movs	r2, #0
 8009c74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009c7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009c80:	4642      	mov	r2, r8
 8009c82:	464b      	mov	r3, r9
 8009c84:	1891      	adds	r1, r2, r2
 8009c86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009c88:	415b      	adcs	r3, r3
 8009c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009c90:	4641      	mov	r1, r8
 8009c92:	1851      	adds	r1, r2, r1
 8009c94:	6339      	str	r1, [r7, #48]	@ 0x30
 8009c96:	4649      	mov	r1, r9
 8009c98:	414b      	adcs	r3, r1
 8009c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c9c:	f04f 0200 	mov.w	r2, #0
 8009ca0:	f04f 0300 	mov.w	r3, #0
 8009ca4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009ca8:	4659      	mov	r1, fp
 8009caa:	00cb      	lsls	r3, r1, #3
 8009cac:	4651      	mov	r1, sl
 8009cae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cb2:	4651      	mov	r1, sl
 8009cb4:	00ca      	lsls	r2, r1, #3
 8009cb6:	4610      	mov	r0, r2
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4603      	mov	r3, r0
 8009cbc:	4642      	mov	r2, r8
 8009cbe:	189b      	adds	r3, r3, r2
 8009cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009cc4:	464b      	mov	r3, r9
 8009cc6:	460a      	mov	r2, r1
 8009cc8:	eb42 0303 	adc.w	r3, r2, r3
 8009ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009cdc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009ce0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	18db      	adds	r3, r3, r3
 8009ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009cea:	4613      	mov	r3, r2
 8009cec:	eb42 0303 	adc.w	r3, r2, r3
 8009cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009cf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009cfa:	f7f6 ff71 	bl	8000be0 <__aeabi_uldivmod>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	460b      	mov	r3, r1
 8009d02:	4b0d      	ldr	r3, [pc, #52]	@ (8009d38 <UART_SetConfig+0x2d4>)
 8009d04:	fba3 1302 	umull	r1, r3, r3, r2
 8009d08:	095b      	lsrs	r3, r3, #5
 8009d0a:	2164      	movs	r1, #100	@ 0x64
 8009d0c:	fb01 f303 	mul.w	r3, r1, r3
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	00db      	lsls	r3, r3, #3
 8009d14:	3332      	adds	r3, #50	@ 0x32
 8009d16:	4a08      	ldr	r2, [pc, #32]	@ (8009d38 <UART_SetConfig+0x2d4>)
 8009d18:	fba2 2303 	umull	r2, r3, r2, r3
 8009d1c:	095b      	lsrs	r3, r3, #5
 8009d1e:	f003 0207 	and.w	r2, r3, #7
 8009d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4422      	add	r2, r4
 8009d2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009d2c:	e106      	b.n	8009f3c <UART_SetConfig+0x4d8>
 8009d2e:	bf00      	nop
 8009d30:	40011000 	.word	0x40011000
 8009d34:	40011400 	.word	0x40011400
 8009d38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d40:	2200      	movs	r2, #0
 8009d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009d46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009d4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009d4e:	4642      	mov	r2, r8
 8009d50:	464b      	mov	r3, r9
 8009d52:	1891      	adds	r1, r2, r2
 8009d54:	6239      	str	r1, [r7, #32]
 8009d56:	415b      	adcs	r3, r3
 8009d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d5e:	4641      	mov	r1, r8
 8009d60:	1854      	adds	r4, r2, r1
 8009d62:	4649      	mov	r1, r9
 8009d64:	eb43 0501 	adc.w	r5, r3, r1
 8009d68:	f04f 0200 	mov.w	r2, #0
 8009d6c:	f04f 0300 	mov.w	r3, #0
 8009d70:	00eb      	lsls	r3, r5, #3
 8009d72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d76:	00e2      	lsls	r2, r4, #3
 8009d78:	4614      	mov	r4, r2
 8009d7a:	461d      	mov	r5, r3
 8009d7c:	4643      	mov	r3, r8
 8009d7e:	18e3      	adds	r3, r4, r3
 8009d80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d84:	464b      	mov	r3, r9
 8009d86:	eb45 0303 	adc.w	r3, r5, r3
 8009d8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009d9e:	f04f 0200 	mov.w	r2, #0
 8009da2:	f04f 0300 	mov.w	r3, #0
 8009da6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009daa:	4629      	mov	r1, r5
 8009dac:	008b      	lsls	r3, r1, #2
 8009dae:	4621      	mov	r1, r4
 8009db0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009db4:	4621      	mov	r1, r4
 8009db6:	008a      	lsls	r2, r1, #2
 8009db8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009dbc:	f7f6 ff10 	bl	8000be0 <__aeabi_uldivmod>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	4b60      	ldr	r3, [pc, #384]	@ (8009f48 <UART_SetConfig+0x4e4>)
 8009dc6:	fba3 2302 	umull	r2, r3, r3, r2
 8009dca:	095b      	lsrs	r3, r3, #5
 8009dcc:	011c      	lsls	r4, r3, #4
 8009dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009dd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009ddc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009de0:	4642      	mov	r2, r8
 8009de2:	464b      	mov	r3, r9
 8009de4:	1891      	adds	r1, r2, r2
 8009de6:	61b9      	str	r1, [r7, #24]
 8009de8:	415b      	adcs	r3, r3
 8009dea:	61fb      	str	r3, [r7, #28]
 8009dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009df0:	4641      	mov	r1, r8
 8009df2:	1851      	adds	r1, r2, r1
 8009df4:	6139      	str	r1, [r7, #16]
 8009df6:	4649      	mov	r1, r9
 8009df8:	414b      	adcs	r3, r1
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	f04f 0200 	mov.w	r2, #0
 8009e00:	f04f 0300 	mov.w	r3, #0
 8009e04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e08:	4659      	mov	r1, fp
 8009e0a:	00cb      	lsls	r3, r1, #3
 8009e0c:	4651      	mov	r1, sl
 8009e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e12:	4651      	mov	r1, sl
 8009e14:	00ca      	lsls	r2, r1, #3
 8009e16:	4610      	mov	r0, r2
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	4642      	mov	r2, r8
 8009e1e:	189b      	adds	r3, r3, r2
 8009e20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e24:	464b      	mov	r3, r9
 8009e26:	460a      	mov	r2, r1
 8009e28:	eb42 0303 	adc.w	r3, r2, r3
 8009e2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009e3c:	f04f 0200 	mov.w	r2, #0
 8009e40:	f04f 0300 	mov.w	r3, #0
 8009e44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009e48:	4649      	mov	r1, r9
 8009e4a:	008b      	lsls	r3, r1, #2
 8009e4c:	4641      	mov	r1, r8
 8009e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e52:	4641      	mov	r1, r8
 8009e54:	008a      	lsls	r2, r1, #2
 8009e56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009e5a:	f7f6 fec1 	bl	8000be0 <__aeabi_uldivmod>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	4611      	mov	r1, r2
 8009e64:	4b38      	ldr	r3, [pc, #224]	@ (8009f48 <UART_SetConfig+0x4e4>)
 8009e66:	fba3 2301 	umull	r2, r3, r3, r1
 8009e6a:	095b      	lsrs	r3, r3, #5
 8009e6c:	2264      	movs	r2, #100	@ 0x64
 8009e6e:	fb02 f303 	mul.w	r3, r2, r3
 8009e72:	1acb      	subs	r3, r1, r3
 8009e74:	011b      	lsls	r3, r3, #4
 8009e76:	3332      	adds	r3, #50	@ 0x32
 8009e78:	4a33      	ldr	r2, [pc, #204]	@ (8009f48 <UART_SetConfig+0x4e4>)
 8009e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e7e:	095b      	lsrs	r3, r3, #5
 8009e80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e84:	441c      	add	r4, r3
 8009e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009e90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009e94:	4642      	mov	r2, r8
 8009e96:	464b      	mov	r3, r9
 8009e98:	1891      	adds	r1, r2, r2
 8009e9a:	60b9      	str	r1, [r7, #8]
 8009e9c:	415b      	adcs	r3, r3
 8009e9e:	60fb      	str	r3, [r7, #12]
 8009ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ea4:	4641      	mov	r1, r8
 8009ea6:	1851      	adds	r1, r2, r1
 8009ea8:	6039      	str	r1, [r7, #0]
 8009eaa:	4649      	mov	r1, r9
 8009eac:	414b      	adcs	r3, r1
 8009eae:	607b      	str	r3, [r7, #4]
 8009eb0:	f04f 0200 	mov.w	r2, #0
 8009eb4:	f04f 0300 	mov.w	r3, #0
 8009eb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ebc:	4659      	mov	r1, fp
 8009ebe:	00cb      	lsls	r3, r1, #3
 8009ec0:	4651      	mov	r1, sl
 8009ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ec6:	4651      	mov	r1, sl
 8009ec8:	00ca      	lsls	r2, r1, #3
 8009eca:	4610      	mov	r0, r2
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4603      	mov	r3, r0
 8009ed0:	4642      	mov	r2, r8
 8009ed2:	189b      	adds	r3, r3, r2
 8009ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ed6:	464b      	mov	r3, r9
 8009ed8:	460a      	mov	r2, r1
 8009eda:	eb42 0303 	adc.w	r3, r2, r3
 8009ede:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	663b      	str	r3, [r7, #96]	@ 0x60
 8009eea:	667a      	str	r2, [r7, #100]	@ 0x64
 8009eec:	f04f 0200 	mov.w	r2, #0
 8009ef0:	f04f 0300 	mov.w	r3, #0
 8009ef4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009ef8:	4649      	mov	r1, r9
 8009efa:	008b      	lsls	r3, r1, #2
 8009efc:	4641      	mov	r1, r8
 8009efe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f02:	4641      	mov	r1, r8
 8009f04:	008a      	lsls	r2, r1, #2
 8009f06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009f0a:	f7f6 fe69 	bl	8000be0 <__aeabi_uldivmod>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	4b0d      	ldr	r3, [pc, #52]	@ (8009f48 <UART_SetConfig+0x4e4>)
 8009f14:	fba3 1302 	umull	r1, r3, r3, r2
 8009f18:	095b      	lsrs	r3, r3, #5
 8009f1a:	2164      	movs	r1, #100	@ 0x64
 8009f1c:	fb01 f303 	mul.w	r3, r1, r3
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	011b      	lsls	r3, r3, #4
 8009f24:	3332      	adds	r3, #50	@ 0x32
 8009f26:	4a08      	ldr	r2, [pc, #32]	@ (8009f48 <UART_SetConfig+0x4e4>)
 8009f28:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2c:	095b      	lsrs	r3, r3, #5
 8009f2e:	f003 020f 	and.w	r2, r3, #15
 8009f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4422      	add	r2, r4
 8009f3a:	609a      	str	r2, [r3, #8]
}
 8009f3c:	bf00      	nop
 8009f3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009f42:	46bd      	mov	sp, r7
 8009f44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f48:	51eb851f 	.word	0x51eb851f

08009f4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009f50:	4904      	ldr	r1, [pc, #16]	@ (8009f64 <MX_FATFS_Init+0x18>)
 8009f52:	4805      	ldr	r0, [pc, #20]	@ (8009f68 <MX_FATFS_Init+0x1c>)
 8009f54:	f003 f86a 	bl	800d02c <FATFS_LinkDriver>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	4b03      	ldr	r3, [pc, #12]	@ (8009f6c <MX_FATFS_Init+0x20>)
 8009f5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009f60:	bf00      	nop
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	20000ce4 	.word	0x20000ce4
 8009f68:	200000b8 	.word	0x200000b8
 8009f6c:	20000ce0 	.word	0x20000ce0

08009f70 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009f70:	b480      	push	{r7}
 8009f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009f74:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	4603      	mov	r3, r0
 8009f88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 8009f8a:	79fb      	ldrb	r3, [r7, #7]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f7f9 fb9d 	bl	80036cc <SD_disk_initialize>
 8009f92:	4603      	mov	r3, r0
 8009f94:	461a      	mov	r2, r3
 8009f96:	4b04      	ldr	r3, [pc, #16]	@ (8009fa8 <USER_initialize+0x28>)
 8009f98:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009f9a:	4b03      	ldr	r3, [pc, #12]	@ (8009fa8 <USER_initialize+0x28>)
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	200000b5 	.word	0x200000b5

08009fac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8009fb6:	79fb      	ldrb	r3, [r7, #7]
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7f9 fc71 	bl	80038a0 <SD_disk_status>
 8009fbe:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60b9      	str	r1, [r7, #8]
 8009fd0:	607a      	str	r2, [r7, #4]
 8009fd2:	603b      	str	r3, [r7, #0]
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8009fd8:	7bf8      	ldrb	r0, [r7, #15]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	68b9      	ldr	r1, [r7, #8]
 8009fe0:	f7f9 fc74 	bl	80038cc <SD_disk_read>
 8009fe4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	60b9      	str	r1, [r7, #8]
 8009ff6:	607a      	str	r2, [r7, #4]
 8009ff8:	603b      	str	r3, [r7, #0]
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8009ffe:	7bf8      	ldrb	r0, [r7, #15]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	f7f9 fccb 	bl	80039a0 <SD_disk_write>
 800a00a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	603a      	str	r2, [r7, #0]
 800a01e:	71fb      	strb	r3, [r7, #7]
 800a020:	460b      	mov	r3, r1
 800a022:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 800a024:	79b9      	ldrb	r1, [r7, #6]
 800a026:	79fb      	ldrb	r3, [r7, #7]
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7f9 fd3c 	bl	8003aa8 <SD_disk_ioctl>
 800a030:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a032:	4618      	mov	r0, r3
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
	...

0800a03c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	4603      	mov	r3, r0
 800a044:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	4a08      	ldr	r2, [pc, #32]	@ (800a06c <disk_status+0x30>)
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	79fa      	ldrb	r2, [r7, #7]
 800a054:	4905      	ldr	r1, [pc, #20]	@ (800a06c <disk_status+0x30>)
 800a056:	440a      	add	r2, r1
 800a058:	7a12      	ldrb	r2, [r2, #8]
 800a05a:	4610      	mov	r0, r2
 800a05c:	4798      	blx	r3
 800a05e:	4603      	mov	r3, r0
 800a060:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a062:	7bfb      	ldrb	r3, [r7, #15]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	20000d10 	.word	0x20000d10

0800a070 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a07a:	2300      	movs	r3, #0
 800a07c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a07e:	79fb      	ldrb	r3, [r7, #7]
 800a080:	4a0e      	ldr	r2, [pc, #56]	@ (800a0bc <disk_initialize+0x4c>)
 800a082:	5cd3      	ldrb	r3, [r2, r3]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d114      	bne.n	800a0b2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a088:	79fb      	ldrb	r3, [r7, #7]
 800a08a:	4a0c      	ldr	r2, [pc, #48]	@ (800a0bc <disk_initialize+0x4c>)
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4413      	add	r3, r2
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	79fa      	ldrb	r2, [r7, #7]
 800a096:	4909      	ldr	r1, [pc, #36]	@ (800a0bc <disk_initialize+0x4c>)
 800a098:	440a      	add	r2, r1
 800a09a:	7a12      	ldrb	r2, [r2, #8]
 800a09c:	4610      	mov	r0, r2
 800a09e:	4798      	blx	r3
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d103      	bne.n	800a0b2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a0aa:	79fb      	ldrb	r3, [r7, #7]
 800a0ac:	4a03      	ldr	r2, [pc, #12]	@ (800a0bc <disk_initialize+0x4c>)
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	20000d10 	.word	0x20000d10

0800a0c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a0c0:	b590      	push	{r4, r7, lr}
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60b9      	str	r1, [r7, #8]
 800a0c8:	607a      	str	r2, [r7, #4]
 800a0ca:	603b      	str	r3, [r7, #0]
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
 800a0d2:	4a0a      	ldr	r2, [pc, #40]	@ (800a0fc <disk_read+0x3c>)
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	689c      	ldr	r4, [r3, #8]
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
 800a0de:	4a07      	ldr	r2, [pc, #28]	@ (800a0fc <disk_read+0x3c>)
 800a0e0:	4413      	add	r3, r2
 800a0e2:	7a18      	ldrb	r0, [r3, #8]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	68b9      	ldr	r1, [r7, #8]
 800a0ea:	47a0      	blx	r4
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800a0f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	371c      	adds	r7, #28
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd90      	pop	{r4, r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	20000d10 	.word	0x20000d10

0800a100 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a100:	b590      	push	{r4, r7, lr}
 800a102:	b087      	sub	sp, #28
 800a104:	af00      	add	r7, sp, #0
 800a106:	60b9      	str	r1, [r7, #8]
 800a108:	607a      	str	r2, [r7, #4]
 800a10a:	603b      	str	r3, [r7, #0]
 800a10c:	4603      	mov	r3, r0
 800a10e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a110:	7bfb      	ldrb	r3, [r7, #15]
 800a112:	4a0a      	ldr	r2, [pc, #40]	@ (800a13c <disk_write+0x3c>)
 800a114:	009b      	lsls	r3, r3, #2
 800a116:	4413      	add	r3, r2
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	68dc      	ldr	r4, [r3, #12]
 800a11c:	7bfb      	ldrb	r3, [r7, #15]
 800a11e:	4a07      	ldr	r2, [pc, #28]	@ (800a13c <disk_write+0x3c>)
 800a120:	4413      	add	r3, r2
 800a122:	7a18      	ldrb	r0, [r3, #8]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	68b9      	ldr	r1, [r7, #8]
 800a12a:	47a0      	blx	r4
 800a12c:	4603      	mov	r3, r0
 800a12e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a130:	7dfb      	ldrb	r3, [r7, #23]
}
 800a132:	4618      	mov	r0, r3
 800a134:	371c      	adds	r7, #28
 800a136:	46bd      	mov	sp, r7
 800a138:	bd90      	pop	{r4, r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20000d10 	.word	0x20000d10

0800a140 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	4603      	mov	r3, r0
 800a148:	603a      	str	r2, [r7, #0]
 800a14a:	71fb      	strb	r3, [r7, #7]
 800a14c:	460b      	mov	r3, r1
 800a14e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a150:	79fb      	ldrb	r3, [r7, #7]
 800a152:	4a09      	ldr	r2, [pc, #36]	@ (800a178 <disk_ioctl+0x38>)
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	4413      	add	r3, r2
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	79fa      	ldrb	r2, [r7, #7]
 800a15e:	4906      	ldr	r1, [pc, #24]	@ (800a178 <disk_ioctl+0x38>)
 800a160:	440a      	add	r2, r1
 800a162:	7a10      	ldrb	r0, [r2, #8]
 800a164:	79b9      	ldrb	r1, [r7, #6]
 800a166:	683a      	ldr	r2, [r7, #0]
 800a168:	4798      	blx	r3
 800a16a:	4603      	mov	r3, r0
 800a16c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	20000d10 	.word	0x20000d10

0800a17c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	3301      	adds	r3, #1
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a18c:	89fb      	ldrh	r3, [r7, #14]
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	b21a      	sxth	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	b21b      	sxth	r3, r3
 800a198:	4313      	orrs	r3, r2
 800a19a:	b21b      	sxth	r3, r3
 800a19c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a19e:	89fb      	ldrh	r3, [r7, #14]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3714      	adds	r7, #20
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3303      	adds	r3, #3
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	021b      	lsls	r3, r3, #8
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	3202      	adds	r2, #2
 800a1c4:	7812      	ldrb	r2, [r2, #0]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	021b      	lsls	r3, r3, #8
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	3201      	adds	r2, #1
 800a1d2:	7812      	ldrb	r2, [r2, #0]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	021b      	lsls	r3, r3, #8
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	7812      	ldrb	r2, [r2, #0]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	60fb      	str	r3, [r7, #12]
	return rv;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3714      	adds	r7, #20
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	b083      	sub	sp, #12
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	1c5a      	adds	r2, r3, #1
 800a202:	607a      	str	r2, [r7, #4]
 800a204:	887a      	ldrh	r2, [r7, #2]
 800a206:	b2d2      	uxtb	r2, r2
 800a208:	701a      	strb	r2, [r3, #0]
 800a20a:	887b      	ldrh	r3, [r7, #2]
 800a20c:	0a1b      	lsrs	r3, r3, #8
 800a20e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	1c5a      	adds	r2, r3, #1
 800a214:	607a      	str	r2, [r7, #4]
 800a216:	887a      	ldrh	r2, [r7, #2]
 800a218:	b2d2      	uxtb	r2, r2
 800a21a:	701a      	strb	r2, [r3, #0]
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	1c5a      	adds	r2, r3, #1
 800a236:	607a      	str	r2, [r7, #4]
 800a238:	683a      	ldr	r2, [r7, #0]
 800a23a:	b2d2      	uxtb	r2, r2
 800a23c:	701a      	strb	r2, [r3, #0]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	0a1b      	lsrs	r3, r3, #8
 800a242:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	1c5a      	adds	r2, r3, #1
 800a248:	607a      	str	r2, [r7, #4]
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	b2d2      	uxtb	r2, r2
 800a24e:	701a      	strb	r2, [r3, #0]
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	0a1b      	lsrs	r3, r3, #8
 800a254:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	1c5a      	adds	r2, r3, #1
 800a25a:	607a      	str	r2, [r7, #4]
 800a25c:	683a      	ldr	r2, [r7, #0]
 800a25e:	b2d2      	uxtb	r2, r2
 800a260:	701a      	strb	r2, [r3, #0]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	0a1b      	lsrs	r3, r3, #8
 800a266:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	607a      	str	r2, [r7, #4]
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	b2d2      	uxtb	r2, r2
 800a272:	701a      	strb	r2, [r3, #0]
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00d      	beq.n	800a2b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	1c53      	adds	r3, r2, #1
 800a29e:	613b      	str	r3, [r7, #16]
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	1c59      	adds	r1, r3, #1
 800a2a4:	6179      	str	r1, [r7, #20]
 800a2a6:	7812      	ldrb	r2, [r2, #0]
 800a2a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	607b      	str	r3, [r7, #4]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1f1      	bne.n	800a29a <mem_cpy+0x1a>
	}
}
 800a2b6:	bf00      	nop
 800a2b8:	371c      	adds	r7, #28
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a2c2:	b480      	push	{r7}
 800a2c4:	b087      	sub	sp, #28
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	60f8      	str	r0, [r7, #12]
 800a2ca:	60b9      	str	r1, [r7, #8]
 800a2cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	1c5a      	adds	r2, r3, #1
 800a2d6:	617a      	str	r2, [r7, #20]
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	b2d2      	uxtb	r2, r2
 800a2dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	607b      	str	r3, [r7, #4]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1f3      	bne.n	800a2d2 <mem_set+0x10>
}
 800a2ea:	bf00      	nop
 800a2ec:	bf00      	nop
 800a2ee:	371c      	adds	r7, #28
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a2f8:	b480      	push	{r7}
 800a2fa:	b089      	sub	sp, #36	@ 0x24
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	61fb      	str	r3, [r7, #28]
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a30c:	2300      	movs	r3, #0
 800a30e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	1c5a      	adds	r2, r3, #1
 800a314:	61fa      	str	r2, [r7, #28]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	4619      	mov	r1, r3
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	61ba      	str	r2, [r7, #24]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	1acb      	subs	r3, r1, r3
 800a324:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	3b01      	subs	r3, #1
 800a32a:	607b      	str	r3, [r7, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d002      	beq.n	800a338 <mem_cmp+0x40>
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d0eb      	beq.n	800a310 <mem_cmp+0x18>

	return r;
 800a338:	697b      	ldr	r3, [r7, #20]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3724      	adds	r7, #36	@ 0x24
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a346:	b480      	push	{r7}
 800a348:	b083      	sub	sp, #12
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a350:	e002      	b.n	800a358 <chk_chr+0x12>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	3301      	adds	r3, #1
 800a356:	607b      	str	r3, [r7, #4]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d005      	beq.n	800a36c <chk_chr+0x26>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	461a      	mov	r2, r3
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	4293      	cmp	r3, r2
 800a36a:	d1f2      	bne.n	800a352 <chk_chr+0xc>
	return *str;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	781b      	ldrb	r3, [r3, #0]
}
 800a370:	4618      	mov	r0, r3
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a386:	2300      	movs	r3, #0
 800a388:	60bb      	str	r3, [r7, #8]
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	60fb      	str	r3, [r7, #12]
 800a38e:	e029      	b.n	800a3e4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a390:	4a27      	ldr	r2, [pc, #156]	@ (800a430 <chk_lock+0xb4>)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	011b      	lsls	r3, r3, #4
 800a396:	4413      	add	r3, r2
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d01d      	beq.n	800a3da <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a39e:	4a24      	ldr	r2, [pc, #144]	@ (800a430 <chk_lock+0xb4>)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	011b      	lsls	r3, r3, #4
 800a3a4:	4413      	add	r3, r2
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d116      	bne.n	800a3de <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a3b0:	4a1f      	ldr	r2, [pc, #124]	@ (800a430 <chk_lock+0xb4>)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	011b      	lsls	r3, r3, #4
 800a3b6:	4413      	add	r3, r2
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d10c      	bne.n	800a3de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a3c4:	4a1a      	ldr	r2, [pc, #104]	@ (800a430 <chk_lock+0xb4>)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	011b      	lsls	r3, r3, #4
 800a3ca:	4413      	add	r3, r2
 800a3cc:	3308      	adds	r3, #8
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d102      	bne.n	800a3de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a3d8:	e007      	b.n	800a3ea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d9d2      	bls.n	800a390 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d109      	bne.n	800a404 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d102      	bne.n	800a3fc <chk_lock+0x80>
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	d101      	bne.n	800a400 <chk_lock+0x84>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	e010      	b.n	800a422 <chk_lock+0xa6>
 800a400:	2312      	movs	r3, #18
 800a402:	e00e      	b.n	800a422 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d108      	bne.n	800a41c <chk_lock+0xa0>
 800a40a:	4a09      	ldr	r2, [pc, #36]	@ (800a430 <chk_lock+0xb4>)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	011b      	lsls	r3, r3, #4
 800a410:	4413      	add	r3, r2
 800a412:	330c      	adds	r3, #12
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a41a:	d101      	bne.n	800a420 <chk_lock+0xa4>
 800a41c:	2310      	movs	r3, #16
 800a41e:	e000      	b.n	800a422 <chk_lock+0xa6>
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3714      	adds	r7, #20
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
 800a42e:	bf00      	nop
 800a430:	20000cf0 	.word	0x20000cf0

0800a434 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a43a:	2300      	movs	r3, #0
 800a43c:	607b      	str	r3, [r7, #4]
 800a43e:	e002      	b.n	800a446 <enq_lock+0x12>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	3301      	adds	r3, #1
 800a444:	607b      	str	r3, [r7, #4]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d806      	bhi.n	800a45a <enq_lock+0x26>
 800a44c:	4a09      	ldr	r2, [pc, #36]	@ (800a474 <enq_lock+0x40>)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	011b      	lsls	r3, r3, #4
 800a452:	4413      	add	r3, r2
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1f2      	bne.n	800a440 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	bf14      	ite	ne
 800a460:	2301      	movne	r3, #1
 800a462:	2300      	moveq	r3, #0
 800a464:	b2db      	uxtb	r3, r3
}
 800a466:	4618      	mov	r0, r3
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	20000cf0 	.word	0x20000cf0

0800a478 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a482:	2300      	movs	r3, #0
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	e01f      	b.n	800a4c8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a488:	4a41      	ldr	r2, [pc, #260]	@ (800a590 <inc_lock+0x118>)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	011b      	lsls	r3, r3, #4
 800a48e:	4413      	add	r3, r2
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	429a      	cmp	r2, r3
 800a498:	d113      	bne.n	800a4c2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a49a:	4a3d      	ldr	r2, [pc, #244]	@ (800a590 <inc_lock+0x118>)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	011b      	lsls	r3, r3, #4
 800a4a0:	4413      	add	r3, r2
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d109      	bne.n	800a4c2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a4ae:	4a38      	ldr	r2, [pc, #224]	@ (800a590 <inc_lock+0x118>)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	011b      	lsls	r3, r3, #4
 800a4b4:	4413      	add	r3, r2
 800a4b6:	3308      	adds	r3, #8
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d006      	beq.n	800a4d0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	3301      	adds	r3, #1
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d9dc      	bls.n	800a488 <inc_lock+0x10>
 800a4ce:	e000      	b.n	800a4d2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a4d0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d132      	bne.n	800a53e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	e002      	b.n	800a4e4 <inc_lock+0x6c>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	60fb      	str	r3, [r7, #12]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d806      	bhi.n	800a4f8 <inc_lock+0x80>
 800a4ea:	4a29      	ldr	r2, [pc, #164]	@ (800a590 <inc_lock+0x118>)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	011b      	lsls	r3, r3, #4
 800a4f0:	4413      	add	r3, r2
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1f2      	bne.n	800a4de <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d101      	bne.n	800a502 <inc_lock+0x8a>
 800a4fe:	2300      	movs	r3, #0
 800a500:	e040      	b.n	800a584 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	4922      	ldr	r1, [pc, #136]	@ (800a590 <inc_lock+0x118>)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	011b      	lsls	r3, r3, #4
 800a50c:	440b      	add	r3, r1
 800a50e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	689a      	ldr	r2, [r3, #8]
 800a514:	491e      	ldr	r1, [pc, #120]	@ (800a590 <inc_lock+0x118>)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	011b      	lsls	r3, r3, #4
 800a51a:	440b      	add	r3, r1
 800a51c:	3304      	adds	r3, #4
 800a51e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	695a      	ldr	r2, [r3, #20]
 800a524:	491a      	ldr	r1, [pc, #104]	@ (800a590 <inc_lock+0x118>)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	011b      	lsls	r3, r3, #4
 800a52a:	440b      	add	r3, r1
 800a52c:	3308      	adds	r3, #8
 800a52e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a530:	4a17      	ldr	r2, [pc, #92]	@ (800a590 <inc_lock+0x118>)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	011b      	lsls	r3, r3, #4
 800a536:	4413      	add	r3, r2
 800a538:	330c      	adds	r3, #12
 800a53a:	2200      	movs	r2, #0
 800a53c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d009      	beq.n	800a558 <inc_lock+0xe0>
 800a544:	4a12      	ldr	r2, [pc, #72]	@ (800a590 <inc_lock+0x118>)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	011b      	lsls	r3, r3, #4
 800a54a:	4413      	add	r3, r2
 800a54c:	330c      	adds	r3, #12
 800a54e:	881b      	ldrh	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d001      	beq.n	800a558 <inc_lock+0xe0>
 800a554:	2300      	movs	r3, #0
 800a556:	e015      	b.n	800a584 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d108      	bne.n	800a570 <inc_lock+0xf8>
 800a55e:	4a0c      	ldr	r2, [pc, #48]	@ (800a590 <inc_lock+0x118>)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	011b      	lsls	r3, r3, #4
 800a564:	4413      	add	r3, r2
 800a566:	330c      	adds	r3, #12
 800a568:	881b      	ldrh	r3, [r3, #0]
 800a56a:	3301      	adds	r3, #1
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	e001      	b.n	800a574 <inc_lock+0xfc>
 800a570:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a574:	4906      	ldr	r1, [pc, #24]	@ (800a590 <inc_lock+0x118>)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	011b      	lsls	r3, r3, #4
 800a57a:	440b      	add	r3, r1
 800a57c:	330c      	adds	r3, #12
 800a57e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3301      	adds	r3, #1
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr
 800a590:	20000cf0 	.word	0x20000cf0

0800a594 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	607b      	str	r3, [r7, #4]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d825      	bhi.n	800a5f4 <dec_lock+0x60>
		n = Files[i].ctr;
 800a5a8:	4a17      	ldr	r2, [pc, #92]	@ (800a608 <dec_lock+0x74>)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	011b      	lsls	r3, r3, #4
 800a5ae:	4413      	add	r3, r2
 800a5b0:	330c      	adds	r3, #12
 800a5b2:	881b      	ldrh	r3, [r3, #0]
 800a5b4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a5b6:	89fb      	ldrh	r3, [r7, #14]
 800a5b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5bc:	d101      	bne.n	800a5c2 <dec_lock+0x2e>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a5c2:	89fb      	ldrh	r3, [r7, #14]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d002      	beq.n	800a5ce <dec_lock+0x3a>
 800a5c8:	89fb      	ldrh	r3, [r7, #14]
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a5ce:	4a0e      	ldr	r2, [pc, #56]	@ (800a608 <dec_lock+0x74>)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	011b      	lsls	r3, r3, #4
 800a5d4:	4413      	add	r3, r2
 800a5d6:	330c      	adds	r3, #12
 800a5d8:	89fa      	ldrh	r2, [r7, #14]
 800a5da:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a5dc:	89fb      	ldrh	r3, [r7, #14]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d105      	bne.n	800a5ee <dec_lock+0x5a>
 800a5e2:	4a09      	ldr	r2, [pc, #36]	@ (800a608 <dec_lock+0x74>)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	011b      	lsls	r3, r3, #4
 800a5e8:	4413      	add	r3, r2
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	737b      	strb	r3, [r7, #13]
 800a5f2:	e001      	b.n	800a5f8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a5f8:	7b7b      	ldrb	r3, [r7, #13]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3714      	adds	r7, #20
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
 800a606:	bf00      	nop
 800a608:	20000cf0 	.word	0x20000cf0

0800a60c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a614:	2300      	movs	r3, #0
 800a616:	60fb      	str	r3, [r7, #12]
 800a618:	e010      	b.n	800a63c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a61a:	4a0d      	ldr	r2, [pc, #52]	@ (800a650 <clear_lock+0x44>)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	011b      	lsls	r3, r3, #4
 800a620:	4413      	add	r3, r2
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	429a      	cmp	r2, r3
 800a628:	d105      	bne.n	800a636 <clear_lock+0x2a>
 800a62a:	4a09      	ldr	r2, [pc, #36]	@ (800a650 <clear_lock+0x44>)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	011b      	lsls	r3, r3, #4
 800a630:	4413      	add	r3, r2
 800a632:	2200      	movs	r2, #0
 800a634:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3301      	adds	r3, #1
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d9eb      	bls.n	800a61a <clear_lock+0xe>
	}
}
 800a642:	bf00      	nop
 800a644:	bf00      	nop
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr
 800a650:	20000cf0 	.word	0x20000cf0

0800a654 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	78db      	ldrb	r3, [r3, #3]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d034      	beq.n	800a6d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a66c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	7858      	ldrb	r0, [r3, #1]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a678:	2301      	movs	r3, #1
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	f7ff fd40 	bl	800a100 <disk_write>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d002      	beq.n	800a68c <sync_window+0x38>
			res = FR_DISK_ERR;
 800a686:	2301      	movs	r3, #1
 800a688:	73fb      	strb	r3, [r7, #15]
 800a68a:	e022      	b.n	800a6d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	1ad2      	subs	r2, r2, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	69db      	ldr	r3, [r3, #28]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d217      	bcs.n	800a6d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	789b      	ldrb	r3, [r3, #2]
 800a6a6:	613b      	str	r3, [r7, #16]
 800a6a8:	e010      	b.n	800a6cc <sync_window+0x78>
					wsect += fs->fsize;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	69db      	ldr	r3, [r3, #28]
 800a6ae:	697a      	ldr	r2, [r7, #20]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	7858      	ldrb	r0, [r3, #1]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a6be:	2301      	movs	r3, #1
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	f7ff fd1d 	bl	800a100 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	3b01      	subs	r3, #1
 800a6ca:	613b      	str	r3, [r7, #16]
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d8eb      	bhi.n	800a6aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3718      	adds	r7, #24
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d01b      	beq.n	800a72c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7ff ffad 	bl	800a654 <sync_window>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d113      	bne.n	800a72c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	7858      	ldrb	r0, [r3, #1]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a70e:	2301      	movs	r3, #1
 800a710:	683a      	ldr	r2, [r7, #0]
 800a712:	f7ff fcd5 	bl	800a0c0 <disk_read>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d004      	beq.n	800a726 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a71c:	f04f 33ff 	mov.w	r3, #4294967295
 800a720:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a722:	2301      	movs	r3, #1
 800a724:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
	...

0800a738 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff ff87 	bl	800a654 <sync_window>
 800a746:	4603      	mov	r3, r0
 800a748:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d158      	bne.n	800a802 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	2b03      	cmp	r3, #3
 800a756:	d148      	bne.n	800a7ea <sync_fs+0xb2>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	791b      	ldrb	r3, [r3, #4]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d144      	bne.n	800a7ea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	3334      	adds	r3, #52	@ 0x34
 800a764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a768:	2100      	movs	r1, #0
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7ff fda9 	bl	800a2c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	3334      	adds	r3, #52	@ 0x34
 800a774:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a778:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7ff fd38 	bl	800a1f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	3334      	adds	r3, #52	@ 0x34
 800a786:	4921      	ldr	r1, [pc, #132]	@ (800a80c <sync_fs+0xd4>)
 800a788:	4618      	mov	r0, r3
 800a78a:	f7ff fd4d 	bl	800a228 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	3334      	adds	r3, #52	@ 0x34
 800a792:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a796:	491e      	ldr	r1, [pc, #120]	@ (800a810 <sync_fs+0xd8>)
 800a798:	4618      	mov	r0, r3
 800a79a:	f7ff fd45 	bl	800a228 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	3334      	adds	r3, #52	@ 0x34
 800a7a2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	f7ff fd3b 	bl	800a228 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	3334      	adds	r3, #52	@ 0x34
 800a7b6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	f7ff fd31 	bl	800a228 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a1b      	ldr	r3, [r3, #32]
 800a7ca:	1c5a      	adds	r2, r3, #1
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	7858      	ldrb	r0, [r3, #1]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7de:	2301      	movs	r3, #1
 800a7e0:	f7ff fc8e 	bl	800a100 <disk_write>
			fs->fsi_flag = 0;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	785b      	ldrb	r3, [r3, #1]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff fca4 	bl	800a140 <disk_ioctl>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <sync_fs+0xca>
 800a7fe:	2301      	movs	r3, #1
 800a800:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a802:	7bfb      	ldrb	r3, [r7, #15]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	41615252 	.word	0x41615252
 800a810:	61417272 	.word	0x61417272

0800a814 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	3b02      	subs	r3, #2
 800a822:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	699b      	ldr	r3, [r3, #24]
 800a828:	3b02      	subs	r3, #2
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d301      	bcc.n	800a834 <clust2sect+0x20>
 800a830:	2300      	movs	r3, #0
 800a832:	e008      	b.n	800a846 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	895b      	ldrh	r3, [r3, #10]
 800a838:	461a      	mov	r2, r3
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	fb03 f202 	mul.w	r2, r3, r2
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a844:	4413      	add	r3, r2
}
 800a846:	4618      	mov	r0, r3
 800a848:	370c      	adds	r7, #12
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b086      	sub	sp, #24
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d904      	bls.n	800a872 <get_fat+0x20>
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d302      	bcc.n	800a878 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a872:	2301      	movs	r3, #1
 800a874:	617b      	str	r3, [r7, #20]
 800a876:	e08e      	b.n	800a996 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a878:	f04f 33ff 	mov.w	r3, #4294967295
 800a87c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	2b03      	cmp	r3, #3
 800a884:	d061      	beq.n	800a94a <get_fat+0xf8>
 800a886:	2b03      	cmp	r3, #3
 800a888:	dc7b      	bgt.n	800a982 <get_fat+0x130>
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d002      	beq.n	800a894 <get_fat+0x42>
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d041      	beq.n	800a916 <get_fat+0xc4>
 800a892:	e076      	b.n	800a982 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	085b      	lsrs	r3, r3, #1
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	0a5b      	lsrs	r3, r3, #9
 800a8aa:	4413      	add	r3, r2
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	6938      	ldr	r0, [r7, #16]
 800a8b0:	f7ff ff14 	bl	800a6dc <move_window>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d166      	bne.n	800a988 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	1c5a      	adds	r2, r3, #1
 800a8be:	60fa      	str	r2, [r7, #12]
 800a8c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a8cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	0a5b      	lsrs	r3, r3, #9
 800a8d6:	4413      	add	r3, r2
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6938      	ldr	r0, [r7, #16]
 800a8dc:	f7ff fefe 	bl	800a6dc <move_window>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d152      	bne.n	800a98c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a8f4:	021b      	lsls	r3, r3, #8
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <get_fat+0xba>
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	091b      	lsrs	r3, r3, #4
 800a90a:	e002      	b.n	800a912 <get_fat+0xc0>
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a912:	617b      	str	r3, [r7, #20]
			break;
 800a914:	e03f      	b.n	800a996 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	0a1b      	lsrs	r3, r3, #8
 800a91e:	4413      	add	r3, r2
 800a920:	4619      	mov	r1, r3
 800a922:	6938      	ldr	r0, [r7, #16]
 800a924:	f7ff feda 	bl	800a6dc <move_window>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d130      	bne.n	800a990 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	005b      	lsls	r3, r3, #1
 800a938:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a93c:	4413      	add	r3, r2
 800a93e:	4618      	mov	r0, r3
 800a940:	f7ff fc1c 	bl	800a17c <ld_word>
 800a944:	4603      	mov	r3, r0
 800a946:	617b      	str	r3, [r7, #20]
			break;
 800a948:	e025      	b.n	800a996 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	09db      	lsrs	r3, r3, #7
 800a952:	4413      	add	r3, r2
 800a954:	4619      	mov	r1, r3
 800a956:	6938      	ldr	r0, [r7, #16]
 800a958:	f7ff fec0 	bl	800a6dc <move_window>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d118      	bne.n	800a994 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a970:	4413      	add	r3, r2
 800a972:	4618      	mov	r0, r3
 800a974:	f7ff fc1a 	bl	800a1ac <ld_dword>
 800a978:	4603      	mov	r3, r0
 800a97a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a97e:	617b      	str	r3, [r7, #20]
			break;
 800a980:	e009      	b.n	800a996 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a982:	2301      	movs	r3, #1
 800a984:	617b      	str	r3, [r7, #20]
 800a986:	e006      	b.n	800a996 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a988:	bf00      	nop
 800a98a:	e004      	b.n	800a996 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a98c:	bf00      	nop
 800a98e:	e002      	b.n	800a996 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a990:	bf00      	nop
 800a992:	e000      	b.n	800a996 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a994:	bf00      	nop
		}
	}

	return val;
 800a996:	697b      	ldr	r3, [r7, #20]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3718      	adds	r7, #24
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a9a0:	b590      	push	{r4, r7, lr}
 800a9a2:	b089      	sub	sp, #36	@ 0x24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	f240 80d9 	bls.w	800ab6a <put_fat+0x1ca>
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	699b      	ldr	r3, [r3, #24]
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	f080 80d3 	bcs.w	800ab6a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	2b03      	cmp	r3, #3
 800a9ca:	f000 8096 	beq.w	800aafa <put_fat+0x15a>
 800a9ce:	2b03      	cmp	r3, #3
 800a9d0:	f300 80cb 	bgt.w	800ab6a <put_fat+0x1ca>
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d002      	beq.n	800a9de <put_fat+0x3e>
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d06e      	beq.n	800aaba <put_fat+0x11a>
 800a9dc:	e0c5      	b.n	800ab6a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	61bb      	str	r3, [r7, #24]
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	085b      	lsrs	r3, r3, #1
 800a9e6:	69ba      	ldr	r2, [r7, #24]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	0a5b      	lsrs	r3, r3, #9
 800a9f4:	4413      	add	r3, r2
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f7ff fe6f 	bl	800a6dc <move_window>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa02:	7ffb      	ldrb	r3, [r7, #31]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f040 80a9 	bne.w	800ab5c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	1c59      	adds	r1, r3, #1
 800aa14:	61b9      	str	r1, [r7, #24]
 800aa16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa1a:	4413      	add	r3, r2
 800aa1c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	f003 0301 	and.w	r3, r3, #1
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00d      	beq.n	800aa44 <put_fat+0xa4>
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	b25b      	sxtb	r3, r3
 800aa2e:	f003 030f 	and.w	r3, r3, #15
 800aa32:	b25a      	sxtb	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	011b      	lsls	r3, r3, #4
 800aa3a:	b25b      	sxtb	r3, r3
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	b25b      	sxtb	r3, r3
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	e001      	b.n	800aa48 <put_fat+0xa8>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	0a5b      	lsrs	r3, r3, #9
 800aa5a:	4413      	add	r3, r2
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f7ff fe3c 	bl	800a6dc <move_window>
 800aa64:	4603      	mov	r3, r0
 800aa66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa68:	7ffb      	ldrb	r3, [r7, #31]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d178      	bne.n	800ab60 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa7a:	4413      	add	r3, r2
 800aa7c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d003      	beq.n	800aa90 <put_fat+0xf0>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	091b      	lsrs	r3, r3, #4
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	e00e      	b.n	800aaae <put_fat+0x10e>
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	b25b      	sxtb	r3, r3
 800aa96:	f023 030f 	bic.w	r3, r3, #15
 800aa9a:	b25a      	sxtb	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	0a1b      	lsrs	r3, r3, #8
 800aaa0:	b25b      	sxtb	r3, r3
 800aaa2:	f003 030f 	and.w	r3, r3, #15
 800aaa6:	b25b      	sxtb	r3, r3
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	b25b      	sxtb	r3, r3
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2201      	movs	r2, #1
 800aab6:	70da      	strb	r2, [r3, #3]
			break;
 800aab8:	e057      	b.n	800ab6a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	0a1b      	lsrs	r3, r3, #8
 800aac2:	4413      	add	r3, r2
 800aac4:	4619      	mov	r1, r3
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f7ff fe08 	bl	800a6dc <move_window>
 800aacc:	4603      	mov	r3, r0
 800aace:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aad0:	7ffb      	ldrb	r3, [r7, #31]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d146      	bne.n	800ab64 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	005b      	lsls	r3, r3, #1
 800aae0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800aae4:	4413      	add	r3, r2
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	b292      	uxth	r2, r2
 800aaea:	4611      	mov	r1, r2
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7ff fb80 	bl	800a1f2 <st_word>
			fs->wflag = 1;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	70da      	strb	r2, [r3, #3]
			break;
 800aaf8:	e037      	b.n	800ab6a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	09db      	lsrs	r3, r3, #7
 800ab02:	4413      	add	r3, r2
 800ab04:	4619      	mov	r1, r3
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f7ff fde8 	bl	800a6dc <move_window>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ab10:	7ffb      	ldrb	r3, [r7, #31]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d128      	bne.n	800ab68 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ab2a:	4413      	add	r3, r2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7ff fb3d 	bl	800a1ac <ld_dword>
 800ab32:	4603      	mov	r3, r0
 800ab34:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ab38:	4323      	orrs	r3, r4
 800ab3a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ab4a:	4413      	add	r3, r2
 800ab4c:	6879      	ldr	r1, [r7, #4]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7ff fb6a 	bl	800a228 <st_dword>
			fs->wflag = 1;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2201      	movs	r2, #1
 800ab58:	70da      	strb	r2, [r3, #3]
			break;
 800ab5a:	e006      	b.n	800ab6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ab5c:	bf00      	nop
 800ab5e:	e004      	b.n	800ab6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ab60:	bf00      	nop
 800ab62:	e002      	b.n	800ab6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ab64:	bf00      	nop
 800ab66:	e000      	b.n	800ab6a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ab68:	bf00      	nop
		}
	}
	return res;
 800ab6a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3724      	adds	r7, #36	@ 0x24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd90      	pop	{r4, r7, pc}

0800ab74 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b088      	sub	sp, #32
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ab80:	2300      	movs	r3, #0
 800ab82:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d904      	bls.n	800ab9a <remove_chain+0x26>
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d301      	bcc.n	800ab9e <remove_chain+0x2a>
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	e04b      	b.n	800ac36 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00c      	beq.n	800abbe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800aba4:	f04f 32ff 	mov.w	r2, #4294967295
 800aba8:	6879      	ldr	r1, [r7, #4]
 800abaa:	69b8      	ldr	r0, [r7, #24]
 800abac:	f7ff fef8 	bl	800a9a0 <put_fat>
 800abb0:	4603      	mov	r3, r0
 800abb2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800abb4:	7ffb      	ldrb	r3, [r7, #31]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <remove_chain+0x4a>
 800abba:	7ffb      	ldrb	r3, [r7, #31]
 800abbc:	e03b      	b.n	800ac36 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800abbe:	68b9      	ldr	r1, [r7, #8]
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f7ff fe46 	bl	800a852 <get_fat>
 800abc6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d031      	beq.n	800ac32 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d101      	bne.n	800abd8 <remove_chain+0x64>
 800abd4:	2302      	movs	r3, #2
 800abd6:	e02e      	b.n	800ac36 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abde:	d101      	bne.n	800abe4 <remove_chain+0x70>
 800abe0:	2301      	movs	r3, #1
 800abe2:	e028      	b.n	800ac36 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800abe4:	2200      	movs	r2, #0
 800abe6:	68b9      	ldr	r1, [r7, #8]
 800abe8:	69b8      	ldr	r0, [r7, #24]
 800abea:	f7ff fed9 	bl	800a9a0 <put_fat>
 800abee:	4603      	mov	r3, r0
 800abf0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800abf2:	7ffb      	ldrb	r3, [r7, #31]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d001      	beq.n	800abfc <remove_chain+0x88>
 800abf8:	7ffb      	ldrb	r3, [r7, #31]
 800abfa:	e01c      	b.n	800ac36 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	691a      	ldr	r2, [r3, #16]
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	3b02      	subs	r3, #2
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d20b      	bcs.n	800ac22 <remove_chain+0xae>
			fs->free_clst++;
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	1c5a      	adds	r2, r3, #1
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	791b      	ldrb	r3, [r3, #4]
 800ac18:	f043 0301 	orr.w	r3, r3, #1
 800ac1c:	b2da      	uxtb	r2, r3
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	699b      	ldr	r3, [r3, #24]
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d3c6      	bcc.n	800abbe <remove_chain+0x4a>
 800ac30:	e000      	b.n	800ac34 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ac32:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3720      	adds	r7, #32
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b088      	sub	sp, #32
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10d      	bne.n	800ac70 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d004      	beq.n	800ac6a <create_chain+0x2c>
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	699b      	ldr	r3, [r3, #24]
 800ac64:	69ba      	ldr	r2, [r7, #24]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d31b      	bcc.n	800aca2 <create_chain+0x64>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	61bb      	str	r3, [r7, #24]
 800ac6e:	e018      	b.n	800aca2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ac70:	6839      	ldr	r1, [r7, #0]
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff fded 	bl	800a852 <get_fat>
 800ac78:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d801      	bhi.n	800ac84 <create_chain+0x46>
 800ac80:	2301      	movs	r3, #1
 800ac82:	e070      	b.n	800ad66 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac8a:	d101      	bne.n	800ac90 <create_chain+0x52>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	e06a      	b.n	800ad66 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	699b      	ldr	r3, [r3, #24]
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d201      	bcs.n	800ac9e <create_chain+0x60>
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	e063      	b.n	800ad66 <create_chain+0x128>
		scl = clst;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	3301      	adds	r3, #1
 800acaa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	69fa      	ldr	r2, [r7, #28]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d307      	bcc.n	800acc6 <create_chain+0x88>
				ncl = 2;
 800acb6:	2302      	movs	r3, #2
 800acb8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800acba:	69fa      	ldr	r2, [r7, #28]
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d901      	bls.n	800acc6 <create_chain+0x88>
 800acc2:	2300      	movs	r3, #0
 800acc4:	e04f      	b.n	800ad66 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800acc6:	69f9      	ldr	r1, [r7, #28]
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff fdc2 	bl	800a852 <get_fat>
 800acce:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00e      	beq.n	800acf4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d003      	beq.n	800ace4 <create_chain+0xa6>
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace2:	d101      	bne.n	800ace8 <create_chain+0xaa>
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	e03e      	b.n	800ad66 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ace8:	69fa      	ldr	r2, [r7, #28]
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	429a      	cmp	r2, r3
 800acee:	d1da      	bne.n	800aca6 <create_chain+0x68>
 800acf0:	2300      	movs	r3, #0
 800acf2:	e038      	b.n	800ad66 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800acf4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800acf6:	f04f 32ff 	mov.w	r2, #4294967295
 800acfa:	69f9      	ldr	r1, [r7, #28]
 800acfc:	6938      	ldr	r0, [r7, #16]
 800acfe:	f7ff fe4f 	bl	800a9a0 <put_fat>
 800ad02:	4603      	mov	r3, r0
 800ad04:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d109      	bne.n	800ad20 <create_chain+0xe2>
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d006      	beq.n	800ad20 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ad12:	69fa      	ldr	r2, [r7, #28]
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6938      	ldr	r0, [r7, #16]
 800ad18:	f7ff fe42 	bl	800a9a0 <put_fat>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ad20:	7dfb      	ldrb	r3, [r7, #23]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d116      	bne.n	800ad54 <create_chain+0x116>
		fs->last_clst = ncl;
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	69fa      	ldr	r2, [r7, #28]
 800ad2a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	691a      	ldr	r2, [r3, #16]
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	3b02      	subs	r3, #2
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d804      	bhi.n	800ad44 <create_chain+0x106>
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	1e5a      	subs	r2, r3, #1
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	791b      	ldrb	r3, [r3, #4]
 800ad48:	f043 0301 	orr.w	r3, r3, #1
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	711a      	strb	r2, [r3, #4]
 800ad52:	e007      	b.n	800ad64 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ad54:	7dfb      	ldrb	r3, [r7, #23]
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d102      	bne.n	800ad60 <create_chain+0x122>
 800ad5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad5e:	e000      	b.n	800ad62 <create_chain+0x124>
 800ad60:	2301      	movs	r3, #1
 800ad62:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ad64:	69fb      	ldr	r3, [r7, #28]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3720      	adds	r7, #32
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b087      	sub	sp, #28
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad82:	3304      	adds	r3, #4
 800ad84:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	0a5b      	lsrs	r3, r3, #9
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	8952      	ldrh	r2, [r2, #10]
 800ad8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad92:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	1d1a      	adds	r2, r3, #4
 800ad98:	613a      	str	r2, [r7, #16]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <clmt_clust+0x3a>
 800ada4:	2300      	movs	r3, #0
 800ada6:	e010      	b.n	800adca <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	429a      	cmp	r2, r3
 800adae:	d307      	bcc.n	800adc0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800adb0:	697a      	ldr	r2, [r7, #20]
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	1ad3      	subs	r3, r2, r3
 800adb6:	617b      	str	r3, [r7, #20]
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	3304      	adds	r3, #4
 800adbc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800adbe:	e7e9      	b.n	800ad94 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800adc0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	4413      	add	r3, r2
}
 800adca:	4618      	mov	r0, r3
 800adcc:	371c      	adds	r7, #28
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b086      	sub	sp, #24
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800adec:	d204      	bcs.n	800adf8 <dir_sdi+0x22>
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	f003 031f 	and.w	r3, r3, #31
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d001      	beq.n	800adfc <dir_sdi+0x26>
		return FR_INT_ERR;
 800adf8:	2302      	movs	r3, #2
 800adfa:	e063      	b.n	800aec4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d106      	bne.n	800ae1c <dir_sdi+0x46>
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d902      	bls.n	800ae1c <dir_sdi+0x46>
		clst = fs->dirbase;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d10c      	bne.n	800ae3c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	095b      	lsrs	r3, r3, #5
 800ae26:	693a      	ldr	r2, [r7, #16]
 800ae28:	8912      	ldrh	r2, [r2, #8]
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d301      	bcc.n	800ae32 <dir_sdi+0x5c>
 800ae2e:	2302      	movs	r3, #2
 800ae30:	e048      	b.n	800aec4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	61da      	str	r2, [r3, #28]
 800ae3a:	e029      	b.n	800ae90 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	895b      	ldrh	r3, [r3, #10]
 800ae40:	025b      	lsls	r3, r3, #9
 800ae42:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae44:	e019      	b.n	800ae7a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6979      	ldr	r1, [r7, #20]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7ff fd01 	bl	800a852 <get_fat>
 800ae50:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae58:	d101      	bne.n	800ae5e <dir_sdi+0x88>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e032      	b.n	800aec4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d904      	bls.n	800ae6e <dir_sdi+0x98>
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	697a      	ldr	r2, [r7, #20]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d301      	bcc.n	800ae72 <dir_sdi+0x9c>
 800ae6e:	2302      	movs	r3, #2
 800ae70:	e028      	b.n	800aec4 <dir_sdi+0xee>
			ofs -= csz;
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d2e1      	bcs.n	800ae46 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ae82:	6979      	ldr	r1, [r7, #20]
 800ae84:	6938      	ldr	r0, [r7, #16]
 800ae86:	f7ff fcc5 	bl	800a814 <clust2sect>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	69db      	ldr	r3, [r3, #28]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <dir_sdi+0xcc>
 800ae9e:	2302      	movs	r3, #2
 800aea0:	e010      	b.n	800aec4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	69da      	ldr	r2, [r3, #28]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	0a5b      	lsrs	r3, r3, #9
 800aeaa:	441a      	add	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aebc:	441a      	add	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	695b      	ldr	r3, [r3, #20]
 800aee0:	3320      	adds	r3, #32
 800aee2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	69db      	ldr	r3, [r3, #28]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <dir_next+0x28>
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aef2:	d301      	bcc.n	800aef8 <dir_next+0x2c>
 800aef4:	2304      	movs	r3, #4
 800aef6:	e0aa      	b.n	800b04e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f040 8098 	bne.w	800b034 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	69db      	ldr	r3, [r3, #28]
 800af08:	1c5a      	adds	r2, r3, #1
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d10b      	bne.n	800af2e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	095b      	lsrs	r3, r3, #5
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	8912      	ldrh	r2, [r2, #8]
 800af1e:	4293      	cmp	r3, r2
 800af20:	f0c0 8088 	bcc.w	800b034 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	61da      	str	r2, [r3, #28]
 800af2a:	2304      	movs	r3, #4
 800af2c:	e08f      	b.n	800b04e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	0a5b      	lsrs	r3, r3, #9
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	8952      	ldrh	r2, [r2, #10]
 800af36:	3a01      	subs	r2, #1
 800af38:	4013      	ands	r3, r2
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d17a      	bne.n	800b034 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	4619      	mov	r1, r3
 800af46:	4610      	mov	r0, r2
 800af48:	f7ff fc83 	bl	800a852 <get_fat>
 800af4c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d801      	bhi.n	800af58 <dir_next+0x8c>
 800af54:	2302      	movs	r3, #2
 800af56:	e07a      	b.n	800b04e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af5e:	d101      	bne.n	800af64 <dir_next+0x98>
 800af60:	2301      	movs	r3, #1
 800af62:	e074      	b.n	800b04e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	697a      	ldr	r2, [r7, #20]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d358      	bcc.n	800b020 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d104      	bne.n	800af7e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	61da      	str	r2, [r3, #28]
 800af7a:	2304      	movs	r3, #4
 800af7c:	e067      	b.n	800b04e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	699b      	ldr	r3, [r3, #24]
 800af84:	4619      	mov	r1, r3
 800af86:	4610      	mov	r0, r2
 800af88:	f7ff fe59 	bl	800ac3e <create_chain>
 800af8c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d101      	bne.n	800af98 <dir_next+0xcc>
 800af94:	2307      	movs	r3, #7
 800af96:	e05a      	b.n	800b04e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d101      	bne.n	800afa2 <dir_next+0xd6>
 800af9e:	2302      	movs	r3, #2
 800afa0:	e055      	b.n	800b04e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa8:	d101      	bne.n	800afae <dir_next+0xe2>
 800afaa:	2301      	movs	r3, #1
 800afac:	e04f      	b.n	800b04e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f7ff fb50 	bl	800a654 <sync_window>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <dir_next+0xf2>
 800afba:	2301      	movs	r3, #1
 800afbc:	e047      	b.n	800b04e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	3334      	adds	r3, #52	@ 0x34
 800afc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800afc6:	2100      	movs	r1, #0
 800afc8:	4618      	mov	r0, r3
 800afca:	f7ff f97a 	bl	800a2c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800afce:	2300      	movs	r3, #0
 800afd0:	613b      	str	r3, [r7, #16]
 800afd2:	6979      	ldr	r1, [r7, #20]
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f7ff fc1d 	bl	800a814 <clust2sect>
 800afda:	4602      	mov	r2, r0
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	631a      	str	r2, [r3, #48]	@ 0x30
 800afe0:	e012      	b.n	800b008 <dir_next+0x13c>
						fs->wflag = 1;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2201      	movs	r2, #1
 800afe6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f7ff fb33 	bl	800a654 <sync_window>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <dir_next+0x12c>
 800aff4:	2301      	movs	r3, #1
 800aff6:	e02a      	b.n	800b04e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	3301      	adds	r3, #1
 800affc:	613b      	str	r3, [r7, #16]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b002:	1c5a      	adds	r2, r3, #1
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	631a      	str	r2, [r3, #48]	@ 0x30
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	895b      	ldrh	r3, [r3, #10]
 800b00c:	461a      	mov	r2, r3
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	4293      	cmp	r3, r2
 800b012:	d3e6      	bcc.n	800afe2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	1ad2      	subs	r2, r2, r3
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	697a      	ldr	r2, [r7, #20]
 800b024:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b026:	6979      	ldr	r1, [r7, #20]
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f7ff fbf3 	bl	800a814 <clust2sect>
 800b02e:	4602      	mov	r2, r0
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	68ba      	ldr	r2, [r7, #8]
 800b038:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b046:	441a      	add	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3718      	adds	r7, #24
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b086      	sub	sp, #24
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b066:	2100      	movs	r1, #0
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7ff feb4 	bl	800add6 <dir_sdi>
 800b06e:	4603      	mov	r3, r0
 800b070:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b072:	7dfb      	ldrb	r3, [r7, #23]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d12b      	bne.n	800b0d0 <dir_alloc+0x7a>
		n = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	69db      	ldr	r3, [r3, #28]
 800b080:	4619      	mov	r1, r3
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f7ff fb2a 	bl	800a6dc <move_window>
 800b088:	4603      	mov	r3, r0
 800b08a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d11d      	bne.n	800b0ce <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	2be5      	cmp	r3, #229	@ 0xe5
 800b09a:	d004      	beq.n	800b0a6 <dir_alloc+0x50>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a1b      	ldr	r3, [r3, #32]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d107      	bne.n	800b0b6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	613b      	str	r3, [r7, #16]
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d102      	bne.n	800b0ba <dir_alloc+0x64>
 800b0b4:	e00c      	b.n	800b0d0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b0ba:	2101      	movs	r1, #1
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f7ff ff05 	bl	800aecc <dir_next>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b0c6:	7dfb      	ldrb	r3, [r7, #23]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d0d7      	beq.n	800b07c <dir_alloc+0x26>
 800b0cc:	e000      	b.n	800b0d0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b0ce:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b0d0:	7dfb      	ldrb	r3, [r7, #23]
 800b0d2:	2b04      	cmp	r3, #4
 800b0d4:	d101      	bne.n	800b0da <dir_alloc+0x84>
 800b0d6:	2307      	movs	r3, #7
 800b0d8:	75fb      	strb	r3, [r7, #23]
	return res;
 800b0da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3718      	adds	r7, #24
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	331a      	adds	r3, #26
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7ff f842 	bl	800a17c <ld_word>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	2b03      	cmp	r3, #3
 800b102:	d109      	bne.n	800b118 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	3314      	adds	r3, #20
 800b108:	4618      	mov	r0, r3
 800b10a:	f7ff f837 	bl	800a17c <ld_word>
 800b10e:	4603      	mov	r3, r0
 800b110:	041b      	lsls	r3, r3, #16
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	4313      	orrs	r3, r2
 800b116:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b118:	68fb      	ldr	r3, [r7, #12]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b084      	sub	sp, #16
 800b126:	af00      	add	r7, sp, #0
 800b128:	60f8      	str	r0, [r7, #12]
 800b12a:	60b9      	str	r1, [r7, #8]
 800b12c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	331a      	adds	r3, #26
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	b292      	uxth	r2, r2
 800b136:	4611      	mov	r1, r2
 800b138:	4618      	mov	r0, r3
 800b13a:	f7ff f85a 	bl	800a1f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	2b03      	cmp	r3, #3
 800b144:	d109      	bne.n	800b15a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	f103 0214 	add.w	r2, r3, #20
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	0c1b      	lsrs	r3, r3, #16
 800b150:	b29b      	uxth	r3, r3
 800b152:	4619      	mov	r1, r3
 800b154:	4610      	mov	r0, r2
 800b156:	f7ff f84c 	bl	800a1f2 <st_word>
	}
}
 800b15a:	bf00      	nop
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b086      	sub	sp, #24
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b170:	2100      	movs	r1, #0
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f7ff fe2f 	bl	800add6 <dir_sdi>
 800b178:	4603      	mov	r3, r0
 800b17a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b17c:	7dfb      	ldrb	r3, [r7, #23]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d001      	beq.n	800b186 <dir_find+0x24>
 800b182:	7dfb      	ldrb	r3, [r7, #23]
 800b184:	e03e      	b.n	800b204 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	69db      	ldr	r3, [r3, #28]
 800b18a:	4619      	mov	r1, r3
 800b18c:	6938      	ldr	r0, [r7, #16]
 800b18e:	f7ff faa5 	bl	800a6dc <move_window>
 800b192:	4603      	mov	r3, r0
 800b194:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b196:	7dfb      	ldrb	r3, [r7, #23]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d12f      	bne.n	800b1fc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a1b      	ldr	r3, [r3, #32]
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d102      	bne.n	800b1b0 <dir_find+0x4e>
 800b1aa:	2304      	movs	r3, #4
 800b1ac:	75fb      	strb	r3, [r7, #23]
 800b1ae:	e028      	b.n	800b202 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a1b      	ldr	r3, [r3, #32]
 800b1b4:	330b      	adds	r3, #11
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b1bc:	b2da      	uxtb	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	330b      	adds	r3, #11
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	f003 0308 	and.w	r3, r3, #8
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10a      	bne.n	800b1e8 <dir_find+0x86>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a18      	ldr	r0, [r3, #32]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	3324      	adds	r3, #36	@ 0x24
 800b1da:	220b      	movs	r2, #11
 800b1dc:	4619      	mov	r1, r3
 800b1de:	f7ff f88b 	bl	800a2f8 <mem_cmp>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00b      	beq.n	800b200 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff fe6e 	bl	800aecc <dir_next>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d0c5      	beq.n	800b186 <dir_find+0x24>
 800b1fa:	e002      	b.n	800b202 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b1fc:	bf00      	nop
 800b1fe:	e000      	b.n	800b202 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b200:	bf00      	nop

	return res;
 800b202:	7dfb      	ldrb	r3, [r7, #23]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3718      	adds	r7, #24
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b21a:	2101      	movs	r1, #1
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f7ff ff1a 	bl	800b056 <dir_alloc>
 800b222:	4603      	mov	r3, r0
 800b224:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b226:	7bfb      	ldrb	r3, [r7, #15]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d11c      	bne.n	800b266 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	69db      	ldr	r3, [r3, #28]
 800b230:	4619      	mov	r1, r3
 800b232:	68b8      	ldr	r0, [r7, #8]
 800b234:	f7ff fa52 	bl	800a6dc <move_window>
 800b238:	4603      	mov	r3, r0
 800b23a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d111      	bne.n	800b266 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	2220      	movs	r2, #32
 800b248:	2100      	movs	r1, #0
 800b24a:	4618      	mov	r0, r3
 800b24c:	f7ff f839 	bl	800a2c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a18      	ldr	r0, [r3, #32]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	3324      	adds	r3, #36	@ 0x24
 800b258:	220b      	movs	r2, #11
 800b25a:	4619      	mov	r1, r3
 800b25c:	f7ff f810 	bl	800a280 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	2201      	movs	r2, #1
 800b264:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b266:	7bfb      	ldrb	r3, [r7, #15]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b088      	sub	sp, #32
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	60fb      	str	r3, [r7, #12]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	3324      	adds	r3, #36	@ 0x24
 800b284:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b286:	220b      	movs	r2, #11
 800b288:	2120      	movs	r1, #32
 800b28a:	68b8      	ldr	r0, [r7, #8]
 800b28c:	f7ff f819 	bl	800a2c2 <mem_set>
	si = i = 0; ni = 8;
 800b290:	2300      	movs	r3, #0
 800b292:	613b      	str	r3, [r7, #16]
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	61fb      	str	r3, [r7, #28]
 800b298:	2308      	movs	r3, #8
 800b29a:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2a6:	d12f      	bne.n	800b308 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	1c5a      	adds	r2, r3, #1
 800b2ac:	61fa      	str	r2, [r7, #28]
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 800b2b6:	7efb      	ldrb	r3, [r7, #27]
 800b2b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2ba:	d10a      	bne.n	800b2d2 <create_name+0x62>
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	d807      	bhi.n	800b2d2 <create_name+0x62>
			sfn[i++] = c;
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	1c5a      	adds	r2, r3, #1
 800b2c6:	613a      	str	r2, [r7, #16]
 800b2c8:	68ba      	ldr	r2, [r7, #8]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	7efa      	ldrb	r2, [r7, #27]
 800b2ce:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800b2d0:	e7ea      	b.n	800b2a8 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800b2d2:	7efb      	ldrb	r3, [r7, #27]
 800b2d4:	2b2f      	cmp	r3, #47	@ 0x2f
 800b2d6:	d007      	beq.n	800b2e8 <create_name+0x78>
 800b2d8:	7efb      	ldrb	r3, [r7, #27]
 800b2da:	2b5c      	cmp	r3, #92	@ 0x5c
 800b2dc:	d004      	beq.n	800b2e8 <create_name+0x78>
 800b2de:	7efb      	ldrb	r3, [r7, #27]
 800b2e0:	2b20      	cmp	r3, #32
 800b2e2:	d901      	bls.n	800b2e8 <create_name+0x78>
 800b2e4:	2306      	movs	r3, #6
 800b2e6:	e084      	b.n	800b3f2 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	441a      	add	r2, r3
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800b2f2:	7efb      	ldrb	r3, [r7, #27]
 800b2f4:	2b20      	cmp	r3, #32
 800b2f6:	d801      	bhi.n	800b2fc <create_name+0x8c>
 800b2f8:	2224      	movs	r2, #36	@ 0x24
 800b2fa:	e000      	b.n	800b2fe <create_name+0x8e>
 800b2fc:	2220      	movs	r2, #32
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	330b      	adds	r3, #11
 800b302:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800b304:	2300      	movs	r3, #0
 800b306:	e074      	b.n	800b3f2 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	1c5a      	adds	r2, r3, #1
 800b30c:	61fa      	str	r2, [r7, #28]
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	4413      	add	r3, r2
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b316:	7efb      	ldrb	r3, [r7, #27]
 800b318:	2b20      	cmp	r3, #32
 800b31a:	d94e      	bls.n	800b3ba <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b31c:	7efb      	ldrb	r3, [r7, #27]
 800b31e:	2b2f      	cmp	r3, #47	@ 0x2f
 800b320:	d006      	beq.n	800b330 <create_name+0xc0>
 800b322:	7efb      	ldrb	r3, [r7, #27]
 800b324:	2b5c      	cmp	r3, #92	@ 0x5c
 800b326:	d110      	bne.n	800b34a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b328:	e002      	b.n	800b330 <create_name+0xc0>
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	3301      	adds	r3, #1
 800b32e:	61fb      	str	r3, [r7, #28]
 800b330:	68fa      	ldr	r2, [r7, #12]
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	4413      	add	r3, r2
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	2b2f      	cmp	r3, #47	@ 0x2f
 800b33a:	d0f6      	beq.n	800b32a <create_name+0xba>
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	4413      	add	r3, r2
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	2b5c      	cmp	r3, #92	@ 0x5c
 800b346:	d0f0      	beq.n	800b32a <create_name+0xba>
			break;
 800b348:	e038      	b.n	800b3bc <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b34a:	7efb      	ldrb	r3, [r7, #27]
 800b34c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b34e:	d003      	beq.n	800b358 <create_name+0xe8>
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	429a      	cmp	r2, r3
 800b356:	d30c      	bcc.n	800b372 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	2b0b      	cmp	r3, #11
 800b35c:	d002      	beq.n	800b364 <create_name+0xf4>
 800b35e:	7efb      	ldrb	r3, [r7, #27]
 800b360:	2b2e      	cmp	r3, #46	@ 0x2e
 800b362:	d001      	beq.n	800b368 <create_name+0xf8>
 800b364:	2306      	movs	r3, #6
 800b366:	e044      	b.n	800b3f2 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800b368:	2308      	movs	r3, #8
 800b36a:	613b      	str	r3, [r7, #16]
 800b36c:	230b      	movs	r3, #11
 800b36e:	617b      	str	r3, [r7, #20]
			continue;
 800b370:	e022      	b.n	800b3b8 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b372:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b376:	2b00      	cmp	r3, #0
 800b378:	da04      	bge.n	800b384 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b37a:	7efb      	ldrb	r3, [r7, #27]
 800b37c:	3b80      	subs	r3, #128	@ 0x80
 800b37e:	4a1f      	ldr	r2, [pc, #124]	@ (800b3fc <create_name+0x18c>)
 800b380:	5cd3      	ldrb	r3, [r2, r3]
 800b382:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b384:	7efb      	ldrb	r3, [r7, #27]
 800b386:	4619      	mov	r1, r3
 800b388:	481d      	ldr	r0, [pc, #116]	@ (800b400 <create_name+0x190>)
 800b38a:	f7fe ffdc 	bl	800a346 <chk_chr>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d001      	beq.n	800b398 <create_name+0x128>
 800b394:	2306      	movs	r3, #6
 800b396:	e02c      	b.n	800b3f2 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b398:	7efb      	ldrb	r3, [r7, #27]
 800b39a:	2b60      	cmp	r3, #96	@ 0x60
 800b39c:	d905      	bls.n	800b3aa <create_name+0x13a>
 800b39e:	7efb      	ldrb	r3, [r7, #27]
 800b3a0:	2b7a      	cmp	r3, #122	@ 0x7a
 800b3a2:	d802      	bhi.n	800b3aa <create_name+0x13a>
 800b3a4:	7efb      	ldrb	r3, [r7, #27]
 800b3a6:	3b20      	subs	r3, #32
 800b3a8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	613a      	str	r2, [r7, #16]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	7efa      	ldrb	r2, [r7, #27]
 800b3b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b3b8:	e7a6      	b.n	800b308 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b3ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	441a      	add	r2, r3
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d101      	bne.n	800b3d0 <create_name+0x160>
 800b3cc:	2306      	movs	r3, #6
 800b3ce:	e010      	b.n	800b3f2 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	2be5      	cmp	r3, #229	@ 0xe5
 800b3d6:	d102      	bne.n	800b3de <create_name+0x16e>
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	2205      	movs	r2, #5
 800b3dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b3de:	7efb      	ldrb	r3, [r7, #27]
 800b3e0:	2b20      	cmp	r3, #32
 800b3e2:	d801      	bhi.n	800b3e8 <create_name+0x178>
 800b3e4:	2204      	movs	r2, #4
 800b3e6:	e000      	b.n	800b3ea <create_name+0x17a>
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	330b      	adds	r3, #11
 800b3ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b3f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3720      	adds	r7, #32
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	0800dc98 	.word	0x0800dc98
 800b400:	0800dc34 	.word	0x0800dc34

0800b404 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b086      	sub	sp, #24
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	2b2f      	cmp	r3, #47	@ 0x2f
 800b41e:	d00b      	beq.n	800b438 <follow_path+0x34>
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	2b5c      	cmp	r3, #92	@ 0x5c
 800b426:	d007      	beq.n	800b438 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	695a      	ldr	r2, [r3, #20]
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	609a      	str	r2, [r3, #8]
 800b430:	e00d      	b.n	800b44e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	3301      	adds	r3, #1
 800b436:	603b      	str	r3, [r7, #0]
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	2b2f      	cmp	r3, #47	@ 0x2f
 800b43e:	d0f8      	beq.n	800b432 <follow_path+0x2e>
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b5c      	cmp	r3, #92	@ 0x5c
 800b446:	d0f4      	beq.n	800b432 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	2200      	movs	r2, #0
 800b44c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	2b1f      	cmp	r3, #31
 800b454:	d80a      	bhi.n	800b46c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2280      	movs	r2, #128	@ 0x80
 800b45a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b45e:	2100      	movs	r1, #0
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f7ff fcb8 	bl	800add6 <dir_sdi>
 800b466:	4603      	mov	r3, r0
 800b468:	75fb      	strb	r3, [r7, #23]
 800b46a:	e056      	b.n	800b51a <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b46c:	463b      	mov	r3, r7
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7ff fefd 	bl	800b270 <create_name>
 800b476:	4603      	mov	r3, r0
 800b478:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b47a:	7dfb      	ldrb	r3, [r7, #23]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d147      	bne.n	800b510 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f7ff fe6e 	bl	800b162 <dir_find>
 800b486:	4603      	mov	r3, r0
 800b488:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b490:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b492:	7dfb      	ldrb	r3, [r7, #23]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d01b      	beq.n	800b4d0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b498:	7dfb      	ldrb	r3, [r7, #23]
 800b49a:	2b04      	cmp	r3, #4
 800b49c:	d13a      	bne.n	800b514 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800b49e:	7afb      	ldrb	r3, [r7, #11]
 800b4a0:	f003 0320 	and.w	r3, r3, #32
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d00b      	beq.n	800b4c0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800b4a8:	7afb      	ldrb	r3, [r7, #11]
 800b4aa:	f003 0304 	and.w	r3, r3, #4
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d02c      	beq.n	800b50c <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2280      	movs	r2, #128	@ 0x80
 800b4b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800b4be:	e029      	b.n	800b514 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b4c0:	7afb      	ldrb	r3, [r7, #11]
 800b4c2:	f003 0304 	and.w	r3, r3, #4
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d124      	bne.n	800b514 <follow_path+0x110>
 800b4ca:	2305      	movs	r3, #5
 800b4cc:	75fb      	strb	r3, [r7, #23]
				break;
 800b4ce:	e021      	b.n	800b514 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b4d0:	7afb      	ldrb	r3, [r7, #11]
 800b4d2:	f003 0304 	and.w	r3, r3, #4
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d11e      	bne.n	800b518 <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	799b      	ldrb	r3, [r3, #6]
 800b4de:	f003 0310 	and.w	r3, r3, #16
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d102      	bne.n	800b4ec <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800b4e6:	2305      	movs	r3, #5
 800b4e8:	75fb      	strb	r3, [r7, #23]
 800b4ea:	e016      	b.n	800b51a <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	695b      	ldr	r3, [r3, #20]
 800b4f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4fa:	4413      	add	r3, r2
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f7ff fdf0 	bl	800b0e4 <ld_clust>
 800b504:	4602      	mov	r2, r0
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	609a      	str	r2, [r3, #8]
 800b50a:	e7af      	b.n	800b46c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800b50c:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b50e:	e7ad      	b.n	800b46c <follow_path+0x68>
			if (res != FR_OK) break;
 800b510:	bf00      	nop
 800b512:	e002      	b.n	800b51a <follow_path+0x116>
				break;
 800b514:	bf00      	nop
 800b516:	e000      	b.n	800b51a <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b518:	bf00      	nop
			}
		}
	}

	return res;
 800b51a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3718      	adds	r7, #24
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b524:	b480      	push	{r7}
 800b526:	b087      	sub	sp, #28
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b52c:	f04f 33ff 	mov.w	r3, #4294967295
 800b530:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d031      	beq.n	800b59e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	617b      	str	r3, [r7, #20]
 800b540:	e002      	b.n	800b548 <get_ldnumber+0x24>
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	3301      	adds	r3, #1
 800b546:	617b      	str	r3, [r7, #20]
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	2b20      	cmp	r3, #32
 800b54e:	d903      	bls.n	800b558 <get_ldnumber+0x34>
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	2b3a      	cmp	r3, #58	@ 0x3a
 800b556:	d1f4      	bne.n	800b542 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	2b3a      	cmp	r3, #58	@ 0x3a
 800b55e:	d11c      	bne.n	800b59a <get_ldnumber+0x76>
			tp = *path;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	1c5a      	adds	r2, r3, #1
 800b56a:	60fa      	str	r2, [r7, #12]
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	3b30      	subs	r3, #48	@ 0x30
 800b570:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	2b09      	cmp	r3, #9
 800b576:	d80e      	bhi.n	800b596 <get_ldnumber+0x72>
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d10a      	bne.n	800b596 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d107      	bne.n	800b596 <get_ldnumber+0x72>
					vol = (int)i;
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	3301      	adds	r3, #1
 800b58e:	617b      	str	r3, [r7, #20]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	e002      	b.n	800b5a0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b59a:	2300      	movs	r3, #0
 800b59c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b59e:	693b      	ldr	r3, [r7, #16]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	371c      	adds	r7, #28
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	70da      	strb	r2, [r3, #3]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c2:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f7ff f888 	bl	800a6dc <move_window>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <check_fs+0x2a>
 800b5d2:	2304      	movs	r3, #4
 800b5d4:	e038      	b.n	800b648 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	3334      	adds	r3, #52	@ 0x34
 800b5da:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fe fdcc 	bl	800a17c <ld_word>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d001      	beq.n	800b5f4 <check_fs+0x48>
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	e029      	b.n	800b648 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b5fa:	2be9      	cmp	r3, #233	@ 0xe9
 800b5fc:	d009      	beq.n	800b612 <check_fs+0x66>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b604:	2beb      	cmp	r3, #235	@ 0xeb
 800b606:	d11e      	bne.n	800b646 <check_fs+0x9a>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800b60e:	2b90      	cmp	r3, #144	@ 0x90
 800b610:	d119      	bne.n	800b646 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	3334      	adds	r3, #52	@ 0x34
 800b616:	3336      	adds	r3, #54	@ 0x36
 800b618:	4618      	mov	r0, r3
 800b61a:	f7fe fdc7 	bl	800a1ac <ld_dword>
 800b61e:	4603      	mov	r3, r0
 800b620:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b624:	4a0a      	ldr	r2, [pc, #40]	@ (800b650 <check_fs+0xa4>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d101      	bne.n	800b62e <check_fs+0x82>
 800b62a:	2300      	movs	r3, #0
 800b62c:	e00c      	b.n	800b648 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	3334      	adds	r3, #52	@ 0x34
 800b632:	3352      	adds	r3, #82	@ 0x52
 800b634:	4618      	mov	r0, r3
 800b636:	f7fe fdb9 	bl	800a1ac <ld_dword>
 800b63a:	4603      	mov	r3, r0
 800b63c:	4a05      	ldr	r2, [pc, #20]	@ (800b654 <check_fs+0xa8>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d101      	bne.n	800b646 <check_fs+0x9a>
 800b642:	2300      	movs	r3, #0
 800b644:	e000      	b.n	800b648 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b646:	2302      	movs	r3, #2
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	00544146 	.word	0x00544146
 800b654:	33544146 	.word	0x33544146

0800b658 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b096      	sub	sp, #88	@ 0x58
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	4613      	mov	r3, r2
 800b664:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	2200      	movs	r2, #0
 800b66a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f7ff ff59 	bl	800b524 <get_ldnumber>
 800b672:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b676:	2b00      	cmp	r3, #0
 800b678:	da01      	bge.n	800b67e <find_volume+0x26>
 800b67a:	230b      	movs	r3, #11
 800b67c:	e230      	b.n	800bae0 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b67e:	4aa1      	ldr	r2, [pc, #644]	@ (800b904 <find_volume+0x2ac>)
 800b680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b686:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <find_volume+0x3a>
 800b68e:	230c      	movs	r3, #12
 800b690:	e226      	b.n	800bae0 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b696:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b698:	79fb      	ldrb	r3, [r7, #7]
 800b69a:	f023 0301 	bic.w	r3, r3, #1
 800b69e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d01a      	beq.n	800b6de <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6aa:	785b      	ldrb	r3, [r3, #1]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7fe fcc5 	bl	800a03c <disk_status>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b6b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b6bc:	f003 0301 	and.w	r3, r3, #1
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d10c      	bne.n	800b6de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b6c4:	79fb      	ldrb	r3, [r7, #7]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d007      	beq.n	800b6da <find_volume+0x82>
 800b6ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b6ce:	f003 0304 	and.w	r3, r3, #4
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d001      	beq.n	800b6da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b6d6:	230a      	movs	r3, #10
 800b6d8:	e202      	b.n	800bae0 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800b6da:	2300      	movs	r3, #0
 800b6dc:	e200      	b.n	800bae0 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b6e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6e6:	b2da      	uxtb	r2, r3
 800b6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ee:	785b      	ldrb	r3, [r3, #1]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7fe fcbd 	bl	800a070 <disk_initialize>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b6fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b700:	f003 0301 	and.w	r3, r3, #1
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b708:	2303      	movs	r3, #3
 800b70a:	e1e9      	b.n	800bae0 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b70c:	79fb      	ldrb	r3, [r7, #7]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d007      	beq.n	800b722 <find_volume+0xca>
 800b712:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b716:	f003 0304 	and.w	r3, r3, #4
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d001      	beq.n	800b722 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b71e:	230a      	movs	r3, #10
 800b720:	e1de      	b.n	800bae0 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b722:	2300      	movs	r3, #0
 800b724:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b726:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b728:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b72a:	f7ff ff3f 	bl	800b5ac <check_fs>
 800b72e:	4603      	mov	r3, r0
 800b730:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b734:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d149      	bne.n	800b7d0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b73c:	2300      	movs	r3, #0
 800b73e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b740:	e01e      	b.n	800b780 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b744:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b74a:	011b      	lsls	r3, r3, #4
 800b74c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b750:	4413      	add	r3, r2
 800b752:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b756:	3304      	adds	r3, #4
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d006      	beq.n	800b76c <find_volume+0x114>
 800b75e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b760:	3308      	adds	r3, #8
 800b762:	4618      	mov	r0, r3
 800b764:	f7fe fd22 	bl	800a1ac <ld_dword>
 800b768:	4602      	mov	r2, r0
 800b76a:	e000      	b.n	800b76e <find_volume+0x116>
 800b76c:	2200      	movs	r2, #0
 800b76e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	3358      	adds	r3, #88	@ 0x58
 800b774:	443b      	add	r3, r7
 800b776:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b77a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b77c:	3301      	adds	r3, #1
 800b77e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b782:	2b03      	cmp	r3, #3
 800b784:	d9dd      	bls.n	800b742 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b786:	2300      	movs	r3, #0
 800b788:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b78a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d002      	beq.n	800b796 <find_volume+0x13e>
 800b790:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b792:	3b01      	subs	r3, #1
 800b794:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	3358      	adds	r3, #88	@ 0x58
 800b79c:	443b      	add	r3, r7
 800b79e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b7a2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b7a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d005      	beq.n	800b7b6 <find_volume+0x15e>
 800b7aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b7ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b7ae:	f7ff fefd 	bl	800b5ac <check_fs>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	e000      	b.n	800b7b8 <find_volume+0x160>
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b7bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d905      	bls.n	800b7d0 <find_volume+0x178>
 800b7c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7cc:	2b03      	cmp	r3, #3
 800b7ce:	d9e2      	bls.n	800b796 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b7d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b7d4:	2b04      	cmp	r3, #4
 800b7d6:	d101      	bne.n	800b7dc <find_volume+0x184>
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e181      	b.n	800bae0 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b7dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d901      	bls.n	800b7e8 <find_volume+0x190>
 800b7e4:	230d      	movs	r3, #13
 800b7e6:	e17b      	b.n	800bae0 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ea:	3334      	adds	r3, #52	@ 0x34
 800b7ec:	330b      	adds	r3, #11
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fe fcc4 	bl	800a17c <ld_word>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7fa:	d001      	beq.n	800b800 <find_volume+0x1a8>
 800b7fc:	230d      	movs	r3, #13
 800b7fe:	e16f      	b.n	800bae0 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b802:	3334      	adds	r3, #52	@ 0x34
 800b804:	3316      	adds	r3, #22
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fcb8 	bl	800a17c <ld_word>
 800b80c:	4603      	mov	r3, r0
 800b80e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b812:	2b00      	cmp	r3, #0
 800b814:	d106      	bne.n	800b824 <find_volume+0x1cc>
 800b816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b818:	3334      	adds	r3, #52	@ 0x34
 800b81a:	3324      	adds	r3, #36	@ 0x24
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7fe fcc5 	bl	800a1ac <ld_dword>
 800b822:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b826:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b828:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b832:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b836:	789b      	ldrb	r3, [r3, #2]
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d005      	beq.n	800b848 <find_volume+0x1f0>
 800b83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b83e:	789b      	ldrb	r3, [r3, #2]
 800b840:	2b02      	cmp	r3, #2
 800b842:	d001      	beq.n	800b848 <find_volume+0x1f0>
 800b844:	230d      	movs	r3, #13
 800b846:	e14b      	b.n	800bae0 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b84a:	789b      	ldrb	r3, [r3, #2]
 800b84c:	461a      	mov	r2, r3
 800b84e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b850:	fb02 f303 	mul.w	r3, r2, r3
 800b854:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b85c:	461a      	mov	r2, r3
 800b85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b860:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b864:	895b      	ldrh	r3, [r3, #10]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d008      	beq.n	800b87c <find_volume+0x224>
 800b86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b86c:	895b      	ldrh	r3, [r3, #10]
 800b86e:	461a      	mov	r2, r3
 800b870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b872:	895b      	ldrh	r3, [r3, #10]
 800b874:	3b01      	subs	r3, #1
 800b876:	4013      	ands	r3, r2
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d001      	beq.n	800b880 <find_volume+0x228>
 800b87c:	230d      	movs	r3, #13
 800b87e:	e12f      	b.n	800bae0 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b882:	3334      	adds	r3, #52	@ 0x34
 800b884:	3311      	adds	r3, #17
 800b886:	4618      	mov	r0, r3
 800b888:	f7fe fc78 	bl	800a17c <ld_word>
 800b88c:	4603      	mov	r3, r0
 800b88e:	461a      	mov	r2, r3
 800b890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b892:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b896:	891b      	ldrh	r3, [r3, #8]
 800b898:	f003 030f 	and.w	r3, r3, #15
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d001      	beq.n	800b8a6 <find_volume+0x24e>
 800b8a2:	230d      	movs	r3, #13
 800b8a4:	e11c      	b.n	800bae0 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a8:	3334      	adds	r3, #52	@ 0x34
 800b8aa:	3313      	adds	r3, #19
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7fe fc65 	bl	800a17c <ld_word>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b8b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d106      	bne.n	800b8ca <find_volume+0x272>
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8be:	3334      	adds	r3, #52	@ 0x34
 800b8c0:	3320      	adds	r3, #32
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7fe fc72 	bl	800a1ac <ld_dword>
 800b8c8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8cc:	3334      	adds	r3, #52	@ 0x34
 800b8ce:	330e      	adds	r3, #14
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7fe fc53 	bl	800a17c <ld_word>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b8da:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d101      	bne.n	800b8e4 <find_volume+0x28c>
 800b8e0:	230d      	movs	r3, #13
 800b8e2:	e0fd      	b.n	800bae0 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b8e4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b8e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8e8:	4413      	add	r3, r2
 800b8ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8ec:	8912      	ldrh	r2, [r2, #8]
 800b8ee:	0912      	lsrs	r2, r2, #4
 800b8f0:	b292      	uxth	r2, r2
 800b8f2:	4413      	add	r3, r2
 800b8f4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b8f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d204      	bcs.n	800b908 <find_volume+0x2b0>
 800b8fe:	230d      	movs	r3, #13
 800b900:	e0ee      	b.n	800bae0 <find_volume+0x488>
 800b902:	bf00      	nop
 800b904:	20000ce8 	.word	0x20000ce8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b90c:	1ad3      	subs	r3, r2, r3
 800b90e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b910:	8952      	ldrh	r2, [r2, #10]
 800b912:	fbb3 f3f2 	udiv	r3, r3, r2
 800b916:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d101      	bne.n	800b922 <find_volume+0x2ca>
 800b91e:	230d      	movs	r3, #13
 800b920:	e0de      	b.n	800bae0 <find_volume+0x488>
		fmt = FS_FAT32;
 800b922:	2303      	movs	r3, #3
 800b924:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b92a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b92e:	4293      	cmp	r3, r2
 800b930:	d802      	bhi.n	800b938 <find_volume+0x2e0>
 800b932:	2302      	movs	r3, #2
 800b934:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b93e:	4293      	cmp	r3, r2
 800b940:	d802      	bhi.n	800b948 <find_volume+0x2f0>
 800b942:	2301      	movs	r3, #1
 800b944:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94a:	1c9a      	adds	r2, r3, #2
 800b94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b952:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b954:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b956:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b95a:	441a      	add	r2, r3
 800b95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b95e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b960:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b964:	441a      	add	r2, r3
 800b966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b968:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800b96a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b96e:	2b03      	cmp	r3, #3
 800b970:	d11e      	bne.n	800b9b0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b974:	3334      	adds	r3, #52	@ 0x34
 800b976:	332a      	adds	r3, #42	@ 0x2a
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fe fbff 	bl	800a17c <ld_word>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d001      	beq.n	800b988 <find_volume+0x330>
 800b984:	230d      	movs	r3, #13
 800b986:	e0ab      	b.n	800bae0 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b98a:	891b      	ldrh	r3, [r3, #8]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d001      	beq.n	800b994 <find_volume+0x33c>
 800b990:	230d      	movs	r3, #13
 800b992:	e0a5      	b.n	800bae0 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b996:	3334      	adds	r3, #52	@ 0x34
 800b998:	332c      	adds	r3, #44	@ 0x2c
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fe fc06 	bl	800a1ac <ld_dword>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a4:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b9a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a8:	699b      	ldr	r3, [r3, #24]
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9ae:	e01f      	b.n	800b9f0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b2:	891b      	ldrh	r3, [r3, #8]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d101      	bne.n	800b9bc <find_volume+0x364>
 800b9b8:	230d      	movs	r3, #13
 800b9ba:	e091      	b.n	800bae0 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b9c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9c2:	441a      	add	r2, r3
 800b9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c6:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b9c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b9cc:	2b02      	cmp	r3, #2
 800b9ce:	d103      	bne.n	800b9d8 <find_volume+0x380>
 800b9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	005b      	lsls	r3, r3, #1
 800b9d6:	e00a      	b.n	800b9ee <find_volume+0x396>
 800b9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9da:	699a      	ldr	r2, [r3, #24]
 800b9dc:	4613      	mov	r3, r2
 800b9de:	005b      	lsls	r3, r3, #1
 800b9e0:	4413      	add	r3, r2
 800b9e2:	085a      	lsrs	r2, r3, #1
 800b9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e6:	699b      	ldr	r3, [r3, #24]
 800b9e8:	f003 0301 	and.w	r3, r3, #1
 800b9ec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b9ee:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f2:	69da      	ldr	r2, [r3, #28]
 800b9f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9f6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b9fa:	0a5b      	lsrs	r3, r3, #9
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d201      	bcs.n	800ba04 <find_volume+0x3ac>
 800ba00:	230d      	movs	r3, #13
 800ba02:	e06d      	b.n	800bae0 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ba04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba06:	f04f 32ff 	mov.w	r2, #4294967295
 800ba0a:	611a      	str	r2, [r3, #16]
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba0e:	691a      	ldr	r2, [r3, #16]
 800ba10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba12:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800ba14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba16:	2280      	movs	r2, #128	@ 0x80
 800ba18:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ba1a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ba1e:	2b03      	cmp	r3, #3
 800ba20:	d149      	bne.n	800bab6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ba22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba24:	3334      	adds	r3, #52	@ 0x34
 800ba26:	3330      	adds	r3, #48	@ 0x30
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fe fba7 	bl	800a17c <ld_word>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d140      	bne.n	800bab6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ba34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba36:	3301      	adds	r3, #1
 800ba38:	4619      	mov	r1, r3
 800ba3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ba3c:	f7fe fe4e 	bl	800a6dc <move_window>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d137      	bne.n	800bab6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ba46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba48:	2200      	movs	r2, #0
 800ba4a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba4e:	3334      	adds	r3, #52	@ 0x34
 800ba50:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7fe fb91 	bl	800a17c <ld_word>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d127      	bne.n	800bab6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ba66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba68:	3334      	adds	r3, #52	@ 0x34
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fe fb9e 	bl	800a1ac <ld_dword>
 800ba70:	4603      	mov	r3, r0
 800ba72:	4a1d      	ldr	r2, [pc, #116]	@ (800bae8 <find_volume+0x490>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d11e      	bne.n	800bab6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ba78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba7a:	3334      	adds	r3, #52	@ 0x34
 800ba7c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fe fb93 	bl	800a1ac <ld_dword>
 800ba86:	4603      	mov	r3, r0
 800ba88:	4a18      	ldr	r2, [pc, #96]	@ (800baec <find_volume+0x494>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d113      	bne.n	800bab6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ba8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba90:	3334      	adds	r3, #52	@ 0x34
 800ba92:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7fe fb88 	bl	800a1ac <ld_dword>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800baa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa4:	3334      	adds	r3, #52	@ 0x34
 800baa6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800baaa:	4618      	mov	r0, r3
 800baac:	f7fe fb7e 	bl	800a1ac <ld_dword>
 800bab0:	4602      	mov	r2, r0
 800bab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800babc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800babe:	4b0c      	ldr	r3, [pc, #48]	@ (800baf0 <find_volume+0x498>)
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	3301      	adds	r3, #1
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	4b0a      	ldr	r3, [pc, #40]	@ (800baf0 <find_volume+0x498>)
 800bac8:	801a      	strh	r2, [r3, #0]
 800baca:	4b09      	ldr	r3, [pc, #36]	@ (800baf0 <find_volume+0x498>)
 800bacc:	881a      	ldrh	r2, [r3, #0]
 800bace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad0:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800bad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad4:	2200      	movs	r2, #0
 800bad6:	615a      	str	r2, [r3, #20]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bad8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bada:	f7fe fd97 	bl	800a60c <clear_lock>
#endif
	return FR_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3758      	adds	r7, #88	@ 0x58
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	41615252 	.word	0x41615252
 800baec:	61417272 	.word	0x61417272
 800baf0:	20000cec 	.word	0x20000cec

0800baf4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bafe:	2309      	movs	r3, #9
 800bb00:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d01c      	beq.n	800bb42 <validate+0x4e>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d018      	beq.n	800bb42 <validate+0x4e>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d013      	beq.n	800bb42 <validate+0x4e>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	889a      	ldrh	r2, [r3, #4]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	88db      	ldrh	r3, [r3, #6]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d10c      	bne.n	800bb42 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	785b      	ldrb	r3, [r3, #1]
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7fe fa84 	bl	800a03c <disk_status>
 800bb34:	4603      	mov	r3, r0
 800bb36:	f003 0301 	and.w	r3, r3, #1
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d101      	bne.n	800bb42 <validate+0x4e>
			res = FR_OK;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bb42:	7bfb      	ldrb	r3, [r7, #15]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d102      	bne.n	800bb4e <validate+0x5a>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	e000      	b.n	800bb50 <validate+0x5c>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	683a      	ldr	r2, [r7, #0]
 800bb52:	6013      	str	r3, [r2, #0]
	return res;
 800bb54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
	...

0800bb60 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b088      	sub	sp, #32
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bb72:	f107 0310 	add.w	r3, r7, #16
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7ff fcd4 	bl	800b524 <get_ldnumber>
 800bb7c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	da01      	bge.n	800bb88 <f_mount+0x28>
 800bb84:	230b      	movs	r3, #11
 800bb86:	e02b      	b.n	800bbe0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bb88:	4a17      	ldr	r2, [pc, #92]	@ (800bbe8 <f_mount+0x88>)
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb90:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d005      	beq.n	800bba4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bb98:	69b8      	ldr	r0, [r7, #24]
 800bb9a:	f7fe fd37 	bl	800a60c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	2200      	movs	r2, #0
 800bba2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d002      	beq.n	800bbb0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2200      	movs	r2, #0
 800bbae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bbb0:	68fa      	ldr	r2, [r7, #12]
 800bbb2:	490d      	ldr	r1, [pc, #52]	@ (800bbe8 <f_mount+0x88>)
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <f_mount+0x66>
 800bbc0:	79fb      	ldrb	r3, [r7, #7]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d001      	beq.n	800bbca <f_mount+0x6a>
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	e00a      	b.n	800bbe0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bbca:	f107 010c 	add.w	r1, r7, #12
 800bbce:	f107 0308 	add.w	r3, r7, #8
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7ff fd3f 	bl	800b658 <find_volume>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bbde:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3720      	adds	r7, #32
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	20000ce8 	.word	0x20000ce8

0800bbec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b098      	sub	sp, #96	@ 0x60
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d101      	bne.n	800bc04 <f_open+0x18>
 800bc00:	2309      	movs	r3, #9
 800bc02:	e1a9      	b.n	800bf58 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bc04:	79fb      	ldrb	r3, [r7, #7]
 800bc06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc0a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bc0c:	79fa      	ldrb	r2, [r7, #7]
 800bc0e:	f107 0110 	add.w	r1, r7, #16
 800bc12:	f107 0308 	add.w	r3, r7, #8
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7ff fd1e 	bl	800b658 <find_volume>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800bc22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	f040 818d 	bne.w	800bf46 <f_open+0x35a>
		dj.obj.fs = fs;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	f107 0314 	add.w	r3, r7, #20
 800bc36:	4611      	mov	r1, r2
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7ff fbe3 	bl	800b404 <follow_path>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bc44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d118      	bne.n	800bc7e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bc4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bc50:	b25b      	sxtb	r3, r3
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	da03      	bge.n	800bc5e <f_open+0x72>
				res = FR_INVALID_NAME;
 800bc56:	2306      	movs	r3, #6
 800bc58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bc5c:	e00f      	b.n	800bc7e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bc5e:	79fb      	ldrb	r3, [r7, #7]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	bf8c      	ite	hi
 800bc64:	2301      	movhi	r3, #1
 800bc66:	2300      	movls	r3, #0
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	f107 0314 	add.w	r3, r7, #20
 800bc70:	4611      	mov	r1, r2
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fe fb82 	bl	800a37c <chk_lock>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bc7e:	79fb      	ldrb	r3, [r7, #7]
 800bc80:	f003 031c 	and.w	r3, r3, #28
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d07f      	beq.n	800bd88 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800bc88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d017      	beq.n	800bcc0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bc90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc94:	2b04      	cmp	r3, #4
 800bc96:	d10e      	bne.n	800bcb6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bc98:	f7fe fbcc 	bl	800a434 <enq_lock>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d006      	beq.n	800bcb0 <f_open+0xc4>
 800bca2:	f107 0314 	add.w	r3, r7, #20
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7ff fab0 	bl	800b20c <dir_register>
 800bcac:	4603      	mov	r3, r0
 800bcae:	e000      	b.n	800bcb2 <f_open+0xc6>
 800bcb0:	2312      	movs	r3, #18
 800bcb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bcb6:	79fb      	ldrb	r3, [r7, #7]
 800bcb8:	f043 0308 	orr.w	r3, r3, #8
 800bcbc:	71fb      	strb	r3, [r7, #7]
 800bcbe:	e010      	b.n	800bce2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bcc0:	7ebb      	ldrb	r3, [r7, #26]
 800bcc2:	f003 0311 	and.w	r3, r3, #17
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d003      	beq.n	800bcd2 <f_open+0xe6>
					res = FR_DENIED;
 800bcca:	2307      	movs	r3, #7
 800bccc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bcd0:	e007      	b.n	800bce2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bcd2:	79fb      	ldrb	r3, [r7, #7]
 800bcd4:	f003 0304 	and.w	r3, r3, #4
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <f_open+0xf6>
 800bcdc:	2308      	movs	r3, #8
 800bcde:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bce2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d168      	bne.n	800bdbc <f_open+0x1d0>
 800bcea:	79fb      	ldrb	r3, [r7, #7]
 800bcec:	f003 0308 	and.w	r3, r3, #8
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d063      	beq.n	800bdbc <f_open+0x1d0>
				dw = GET_FATTIME();
 800bcf4:	f7fe f93c 	bl	8009f70 <get_fattime>
 800bcf8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bcfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcfc:	330e      	adds	r3, #14
 800bcfe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7fe fa91 	bl	800a228 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bd06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd08:	3316      	adds	r3, #22
 800bd0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fe fa8b 	bl	800a228 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bd12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd14:	330b      	adds	r3, #11
 800bd16:	2220      	movs	r2, #32
 800bd18:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd1e:	4611      	mov	r1, r2
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7ff f9df 	bl	800b0e4 <ld_clust>
 800bd26:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7ff f9f7 	bl	800b122 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bd34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd36:	331c      	adds	r3, #28
 800bd38:	2100      	movs	r1, #0
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7fe fa74 	bl	800a228 <st_dword>
					fs->wflag = 1;
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	2201      	movs	r2, #1
 800bd44:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bd46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d037      	beq.n	800bdbc <f_open+0x1d0>
						dw = fs->winsect;
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd50:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bd52:	f107 0314 	add.w	r3, r7, #20
 800bd56:	2200      	movs	r2, #0
 800bd58:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fe ff0a 	bl	800ab74 <remove_chain>
 800bd60:	4603      	mov	r3, r0
 800bd62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800bd66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d126      	bne.n	800bdbc <f_open+0x1d0>
							res = move_window(fs, dw);
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7fe fcb2 	bl	800a6dc <move_window>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd82:	3a01      	subs	r2, #1
 800bd84:	60da      	str	r2, [r3, #12]
 800bd86:	e019      	b.n	800bdbc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bd88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d115      	bne.n	800bdbc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bd90:	7ebb      	ldrb	r3, [r7, #26]
 800bd92:	f003 0310 	and.w	r3, r3, #16
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d003      	beq.n	800bda2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800bd9a:	2304      	movs	r3, #4
 800bd9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bda0:	e00c      	b.n	800bdbc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bda2:	79fb      	ldrb	r3, [r7, #7]
 800bda4:	f003 0302 	and.w	r3, r3, #2
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d007      	beq.n	800bdbc <f_open+0x1d0>
 800bdac:	7ebb      	ldrb	r3, [r7, #26]
 800bdae:	f003 0301 	and.w	r3, r3, #1
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d002      	beq.n	800bdbc <f_open+0x1d0>
						res = FR_DENIED;
 800bdb6:	2307      	movs	r3, #7
 800bdb8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800bdbc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d126      	bne.n	800be12 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bdc4:	79fb      	ldrb	r3, [r7, #7]
 800bdc6:	f003 0308 	and.w	r3, r3, #8
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d003      	beq.n	800bdd6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800bdce:	79fb      	ldrb	r3, [r7, #7]
 800bdd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdd4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800bdde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bde4:	79fb      	ldrb	r3, [r7, #7]
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	bf8c      	ite	hi
 800bdea:	2301      	movhi	r3, #1
 800bdec:	2300      	movls	r3, #0
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	f107 0314 	add.w	r3, r7, #20
 800bdf6:	4611      	mov	r1, r2
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7fe fb3d 	bl	800a478 <inc_lock>
 800bdfe:	4602      	mov	r2, r0
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	691b      	ldr	r3, [r3, #16]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d102      	bne.n	800be12 <f_open+0x226>
 800be0c:	2302      	movs	r3, #2
 800be0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800be12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be16:	2b00      	cmp	r3, #0
 800be18:	f040 8095 	bne.w	800bf46 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be20:	4611      	mov	r1, r2
 800be22:	4618      	mov	r0, r3
 800be24:	f7ff f95e 	bl	800b0e4 <ld_clust>
 800be28:	4602      	mov	r2, r0
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800be2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be30:	331c      	adds	r3, #28
 800be32:	4618      	mov	r0, r3
 800be34:	f7fe f9ba 	bl	800a1ac <ld_dword>
 800be38:	4602      	mov	r2, r0
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800be44:	693a      	ldr	r2, [r7, #16]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	88da      	ldrh	r2, [r3, #6]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	79fa      	ldrb	r2, [r7, #7]
 800be56:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2200      	movs	r2, #0
 800be5c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	3330      	adds	r3, #48	@ 0x30
 800be6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be72:	2100      	movs	r1, #0
 800be74:	4618      	mov	r0, r3
 800be76:	f7fe fa24 	bl	800a2c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800be7a:	79fb      	ldrb	r3, [r7, #7]
 800be7c:	f003 0320 	and.w	r3, r3, #32
 800be80:	2b00      	cmp	r3, #0
 800be82:	d060      	beq.n	800bf46 <f_open+0x35a>
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d05c      	beq.n	800bf46 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	68da      	ldr	r2, [r3, #12]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	895b      	ldrh	r3, [r3, #10]
 800be98:	025b      	lsls	r3, r3, #9
 800be9a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	657b      	str	r3, [r7, #84]	@ 0x54
 800bea8:	e016      	b.n	800bed8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fe fccf 	bl	800a852 <get_fat>
 800beb4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800beb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d802      	bhi.n	800bec2 <f_open+0x2d6>
 800bebc:	2302      	movs	r3, #2
 800bebe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bec2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec8:	d102      	bne.n	800bed0 <f_open+0x2e4>
 800beca:	2301      	movs	r3, #1
 800becc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bed0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bed4:	1ad3      	subs	r3, r2, r3
 800bed6:	657b      	str	r3, [r7, #84]	@ 0x54
 800bed8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d103      	bne.n	800bee8 <f_open+0x2fc>
 800bee0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d8e0      	bhi.n	800beaa <f_open+0x2be>
				}
				fp->clust = clst;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800beec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800beee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d127      	bne.n	800bf46 <f_open+0x35a>
 800bef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800befc:	2b00      	cmp	r3, #0
 800befe:	d022      	beq.n	800bf46 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7fe fc85 	bl	800a814 <clust2sect>
 800bf0a:	6478      	str	r0, [r7, #68]	@ 0x44
 800bf0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d103      	bne.n	800bf1a <f_open+0x32e>
						res = FR_INT_ERR;
 800bf12:	2302      	movs	r3, #2
 800bf14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bf18:	e015      	b.n	800bf46 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bf1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf1c:	0a5a      	lsrs	r2, r3, #9
 800bf1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bf20:	441a      	add	r2, r3
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	7858      	ldrb	r0, [r3, #1]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6a1a      	ldr	r2, [r3, #32]
 800bf34:	2301      	movs	r3, #1
 800bf36:	f7fe f8c3 	bl	800a0c0 <disk_read>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d002      	beq.n	800bf46 <f_open+0x35a>
 800bf40:	2301      	movs	r3, #1
 800bf42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bf46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d002      	beq.n	800bf54 <f_open+0x368>
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2200      	movs	r2, #0
 800bf52:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bf54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3760      	adds	r7, #96	@ 0x60
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08c      	sub	sp, #48	@ 0x30
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
 800bf6c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	2200      	movs	r2, #0
 800bf76:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f107 0210 	add.w	r2, r7, #16
 800bf7e:	4611      	mov	r1, r2
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7ff fdb7 	bl	800baf4 <validate>
 800bf86:	4603      	mov	r3, r0
 800bf88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bf8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d107      	bne.n	800bfa4 <f_write+0x44>
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	7d5b      	ldrb	r3, [r3, #21]
 800bf98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bf9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d002      	beq.n	800bfaa <f_write+0x4a>
 800bfa4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bfa8:	e14b      	b.n	800c242 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	7d1b      	ldrb	r3, [r3, #20]
 800bfae:	f003 0302 	and.w	r3, r3, #2
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d101      	bne.n	800bfba <f_write+0x5a>
 800bfb6:	2307      	movs	r3, #7
 800bfb8:	e143      	b.n	800c242 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	699a      	ldr	r2, [r3, #24]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	441a      	add	r2, r3
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	699b      	ldr	r3, [r3, #24]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	f080 812d 	bcs.w	800c226 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	699b      	ldr	r3, [r3, #24]
 800bfd0:	43db      	mvns	r3, r3
 800bfd2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bfd4:	e127      	b.n	800c226 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	699b      	ldr	r3, [r3, #24]
 800bfda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f040 80e3 	bne.w	800c1aa <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	699b      	ldr	r3, [r3, #24]
 800bfe8:	0a5b      	lsrs	r3, r3, #9
 800bfea:	693a      	ldr	r2, [r7, #16]
 800bfec:	8952      	ldrh	r2, [r2, #10]
 800bfee:	3a01      	subs	r2, #1
 800bff0:	4013      	ands	r3, r2
 800bff2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d143      	bne.n	800c082 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	699b      	ldr	r3, [r3, #24]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10c      	bne.n	800c01c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d11a      	bne.n	800c044 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2100      	movs	r1, #0
 800c012:	4618      	mov	r0, r3
 800c014:	f7fe fe13 	bl	800ac3e <create_chain>
 800c018:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c01a:	e013      	b.n	800c044 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c020:	2b00      	cmp	r3, #0
 800c022:	d007      	beq.n	800c034 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	699b      	ldr	r3, [r3, #24]
 800c028:	4619      	mov	r1, r3
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f7fe fe9f 	bl	800ad6e <clmt_clust>
 800c030:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c032:	e007      	b.n	800c044 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	69db      	ldr	r3, [r3, #28]
 800c03a:	4619      	mov	r1, r3
 800c03c:	4610      	mov	r0, r2
 800c03e:	f7fe fdfe 	bl	800ac3e <create_chain>
 800c042:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c046:	2b00      	cmp	r3, #0
 800c048:	f000 80f2 	beq.w	800c230 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d104      	bne.n	800c05c <f_write+0xfc>
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2202      	movs	r2, #2
 800c056:	755a      	strb	r2, [r3, #21]
 800c058:	2302      	movs	r3, #2
 800c05a:	e0f2      	b.n	800c242 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c062:	d104      	bne.n	800c06e <f_write+0x10e>
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2201      	movs	r2, #1
 800c068:	755a      	strb	r2, [r3, #21]
 800c06a:	2301      	movs	r3, #1
 800c06c:	e0e9      	b.n	800c242 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c072:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d102      	bne.n	800c082 <f_write+0x122>
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c080:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	7d1b      	ldrb	r3, [r3, #20]
 800c086:	b25b      	sxtb	r3, r3
 800c088:	2b00      	cmp	r3, #0
 800c08a:	da18      	bge.n	800c0be <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	7858      	ldrb	r0, [r3, #1]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6a1a      	ldr	r2, [r3, #32]
 800c09a:	2301      	movs	r3, #1
 800c09c:	f7fe f830 	bl	800a100 <disk_write>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d004      	beq.n	800c0b0 <f_write+0x150>
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	755a      	strb	r2, [r3, #21]
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e0c8      	b.n	800c242 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	7d1b      	ldrb	r3, [r3, #20]
 800c0b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0b8:	b2da      	uxtb	r2, r3
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c0be:	693a      	ldr	r2, [r7, #16]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	69db      	ldr	r3, [r3, #28]
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	4610      	mov	r0, r2
 800c0c8:	f7fe fba4 	bl	800a814 <clust2sect>
 800c0cc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d104      	bne.n	800c0de <f_write+0x17e>
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	2202      	movs	r2, #2
 800c0d8:	755a      	strb	r2, [r3, #21]
 800c0da:	2302      	movs	r3, #2
 800c0dc:	e0b1      	b.n	800c242 <f_write+0x2e2>
			sect += csect;
 800c0de:	697a      	ldr	r2, [r7, #20]
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	0a5b      	lsrs	r3, r3, #9
 800c0ea:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c0ec:	6a3b      	ldr	r3, [r7, #32]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d03c      	beq.n	800c16c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c0f2:	69ba      	ldr	r2, [r7, #24]
 800c0f4:	6a3b      	ldr	r3, [r7, #32]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	693a      	ldr	r2, [r7, #16]
 800c0fa:	8952      	ldrh	r2, [r2, #10]
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d905      	bls.n	800c10c <f_write+0x1ac>
					cc = fs->csize - csect;
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	895b      	ldrh	r3, [r3, #10]
 800c104:	461a      	mov	r2, r3
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	1ad3      	subs	r3, r2, r3
 800c10a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	7858      	ldrb	r0, [r3, #1]
 800c110:	6a3b      	ldr	r3, [r7, #32]
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	69f9      	ldr	r1, [r7, #28]
 800c116:	f7fd fff3 	bl	800a100 <disk_write>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d004      	beq.n	800c12a <f_write+0x1ca>
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2201      	movs	r2, #1
 800c124:	755a      	strb	r2, [r3, #21]
 800c126:	2301      	movs	r3, #1
 800c128:	e08b      	b.n	800c242 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6a1a      	ldr	r2, [r3, #32]
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	1ad3      	subs	r3, r2, r3
 800c132:	6a3a      	ldr	r2, [r7, #32]
 800c134:	429a      	cmp	r2, r3
 800c136:	d915      	bls.n	800c164 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6a1a      	ldr	r2, [r3, #32]
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	1ad3      	subs	r3, r2, r3
 800c146:	025b      	lsls	r3, r3, #9
 800c148:	69fa      	ldr	r2, [r7, #28]
 800c14a:	4413      	add	r3, r2
 800c14c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c150:	4619      	mov	r1, r3
 800c152:	f7fe f895 	bl	800a280 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	7d1b      	ldrb	r3, [r3, #20]
 800c15a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c15e:	b2da      	uxtb	r2, r3
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	025b      	lsls	r3, r3, #9
 800c168:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c16a:	e03f      	b.n	800c1ec <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6a1b      	ldr	r3, [r3, #32]
 800c170:	697a      	ldr	r2, [r7, #20]
 800c172:	429a      	cmp	r2, r3
 800c174:	d016      	beq.n	800c1a4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	699a      	ldr	r2, [r3, #24]
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c17e:	429a      	cmp	r2, r3
 800c180:	d210      	bcs.n	800c1a4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	7858      	ldrb	r0, [r3, #1]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c18c:	2301      	movs	r3, #1
 800c18e:	697a      	ldr	r2, [r7, #20]
 800c190:	f7fd ff96 	bl	800a0c0 <disk_read>
 800c194:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c196:	2b00      	cmp	r3, #0
 800c198:	d004      	beq.n	800c1a4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2201      	movs	r2, #1
 800c19e:	755a      	strb	r2, [r3, #21]
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e04e      	b.n	800c242 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	697a      	ldr	r2, [r7, #20]
 800c1a8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	699b      	ldr	r3, [r3, #24]
 800c1ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c1b6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c1b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d901      	bls.n	800c1c4 <f_write+0x264>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d2:	4413      	add	r3, r2
 800c1d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1d6:	69f9      	ldr	r1, [r7, #28]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fe f851 	bl	800a280 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	7d1b      	ldrb	r3, [r3, #20]
 800c1e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c1e6:	b2da      	uxtb	r2, r3
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c1ec:	69fa      	ldr	r2, [r7, #28]
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f0:	4413      	add	r3, r2
 800c1f2:	61fb      	str	r3, [r7, #28]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	699a      	ldr	r2, [r3, #24]
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fa:	441a      	add	r2, r3
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	619a      	str	r2, [r3, #24]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	68da      	ldr	r2, [r3, #12]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	699b      	ldr	r3, [r3, #24]
 800c208:	429a      	cmp	r2, r3
 800c20a:	bf38      	it	cc
 800c20c:	461a      	movcc	r2, r3
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	60da      	str	r2, [r3, #12]
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c218:	441a      	add	r2, r3
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	601a      	str	r2, [r3, #0]
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f47f aed4 	bne.w	800bfd6 <f_write+0x76>
 800c22e:	e000      	b.n	800c232 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c230:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	7d1b      	ldrb	r3, [r3, #20]
 800c236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c23a:	b2da      	uxtb	r2, r3
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3730      	adds	r7, #48	@ 0x30
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b086      	sub	sp, #24
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f107 0208 	add.w	r2, r7, #8
 800c258:	4611      	mov	r1, r2
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7ff fc4a 	bl	800baf4 <validate>
 800c260:	4603      	mov	r3, r0
 800c262:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c264:	7dfb      	ldrb	r3, [r7, #23]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d168      	bne.n	800c33c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	7d1b      	ldrb	r3, [r3, #20]
 800c26e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c272:	2b00      	cmp	r3, #0
 800c274:	d062      	beq.n	800c33c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	7d1b      	ldrb	r3, [r3, #20]
 800c27a:	b25b      	sxtb	r3, r3
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	da15      	bge.n	800c2ac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	7858      	ldrb	r0, [r3, #1]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6a1a      	ldr	r2, [r3, #32]
 800c28e:	2301      	movs	r3, #1
 800c290:	f7fd ff36 	bl	800a100 <disk_write>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d001      	beq.n	800c29e <f_sync+0x54>
 800c29a:	2301      	movs	r3, #1
 800c29c:	e04f      	b.n	800c33e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	7d1b      	ldrb	r3, [r3, #20]
 800c2a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2a6:	b2da      	uxtb	r2, r3
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c2ac:	f7fd fe60 	bl	8009f70 <get_fattime>
 800c2b0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	f7fe fa0e 	bl	800a6dc <move_window>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c2c4:	7dfb      	ldrb	r3, [r7, #23]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d138      	bne.n	800c33c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	330b      	adds	r3, #11
 800c2d4:	781a      	ldrb	r2, [r3, #0]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	330b      	adds	r3, #11
 800c2da:	f042 0220 	orr.w	r2, r2, #32
 800c2de:	b2d2      	uxtb	r2, r2
 800c2e0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6818      	ldr	r0, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	68f9      	ldr	r1, [r7, #12]
 800c2ee:	f7fe ff18 	bl	800b122 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f103 021c 	add.w	r2, r3, #28
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	4610      	mov	r0, r2
 800c300:	f7fd ff92 	bl	800a228 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	3316      	adds	r3, #22
 800c308:	6939      	ldr	r1, [r7, #16]
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7fd ff8c 	bl	800a228 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	3312      	adds	r3, #18
 800c314:	2100      	movs	r1, #0
 800c316:	4618      	mov	r0, r3
 800c318:	f7fd ff6b 	bl	800a1f2 <st_word>
					fs->wflag = 1;
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	2201      	movs	r2, #1
 800c320:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	4618      	mov	r0, r3
 800c326:	f7fe fa07 	bl	800a738 <sync_fs>
 800c32a:	4603      	mov	r3, r0
 800c32c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	7d1b      	ldrb	r3, [r3, #20]
 800c332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c336:	b2da      	uxtb	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c33c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3718      	adds	r7, #24
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}

0800c346 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c346:	b580      	push	{r7, lr}
 800c348:	b084      	sub	sp, #16
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7ff ff7b 	bl	800c24a <f_sync>
 800c354:	4603      	mov	r3, r0
 800c356:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c358:	7bfb      	ldrb	r3, [r7, #15]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d118      	bne.n	800c390 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f107 0208 	add.w	r2, r7, #8
 800c364:	4611      	mov	r1, r2
 800c366:	4618      	mov	r0, r3
 800c368:	f7ff fbc4 	bl	800baf4 <validate>
 800c36c:	4603      	mov	r3, r0
 800c36e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c370:	7bfb      	ldrb	r3, [r7, #15]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10c      	bne.n	800c390 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	691b      	ldr	r3, [r3, #16]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7fe f90a 	bl	800a594 <dec_lock>
 800c380:	4603      	mov	r3, r0
 800c382:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c384:	7bfb      	ldrb	r3, [r7, #15]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d102      	bne.n	800c390 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c390:	7bfb      	ldrb	r3, [r7, #15]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c39a:	b590      	push	{r4, r7, lr}
 800c39c:	b091      	sub	sp, #68	@ 0x44
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c3a2:	f107 0108 	add.w	r1, r7, #8
 800c3a6:	1d3b      	adds	r3, r7, #4
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f7ff f954 	bl	800b658 <find_volume>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800c3b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d131      	bne.n	800c422 <f_chdir+0x88>
		dj.obj.fs = fs;
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	f107 030c 	add.w	r3, r7, #12
 800c3c8:	4611      	mov	r1, r2
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7ff f81a 	bl	800b404 <follow_path>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {					/* Follow completed */
 800c3d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d11a      	bne.n	800c414 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800c3de:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800c3e2:	b25b      	sxtb	r3, r3
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	da03      	bge.n	800c3f0 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	615a      	str	r2, [r3, #20]
 800c3ee:	e011      	b.n	800c414 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 800c3f0:	7cbb      	ldrb	r3, [r7, #18]
 800c3f2:	f003 0310 	and.w	r3, r3, #16
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d009      	beq.n	800c40e <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3fe:	68bc      	ldr	r4, [r7, #8]
 800c400:	4611      	mov	r1, r2
 800c402:	4618      	mov	r0, r3
 800c404:	f7fe fe6e 	bl	800b0e4 <ld_clust>
 800c408:	4603      	mov	r3, r0
 800c40a:	6163      	str	r3, [r4, #20]
 800c40c:	e002      	b.n	800c414 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 800c40e:	2305      	movs	r3, #5
 800c410:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c414:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c418:	2b04      	cmp	r3, #4
 800c41a:	d102      	bne.n	800c422 <f_chdir+0x88>
 800c41c:	2305      	movs	r3, #5
 800c41e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	LEAVE_FF(fs, res);
 800c422:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800c426:	4618      	mov	r0, r3
 800c428:	3744      	adds	r7, #68	@ 0x44
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd90      	pop	{r4, r7, pc}

0800c42e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c42e:	b580      	push	{r7, lr}
 800c430:	b090      	sub	sp, #64	@ 0x40
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f107 0208 	add.w	r2, r7, #8
 800c43e:	4611      	mov	r1, r2
 800c440:	4618      	mov	r0, r3
 800c442:	f7ff fb57 	bl	800baf4 <validate>
 800c446:	4603      	mov	r3, r0
 800c448:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c44c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c450:	2b00      	cmp	r3, #0
 800c452:	d103      	bne.n	800c45c <f_lseek+0x2e>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	7d5b      	ldrb	r3, [r3, #21]
 800c458:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c45c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c460:	2b00      	cmp	r3, #0
 800c462:	d002      	beq.n	800c46a <f_lseek+0x3c>
 800c464:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c468:	e1e6      	b.n	800c838 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c46e:	2b00      	cmp	r3, #0
 800c470:	f000 80d1 	beq.w	800c616 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c47a:	d15a      	bne.n	800c532 <f_lseek+0x104>
			tbl = fp->cltbl;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c480:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c484:	1d1a      	adds	r2, r3, #4
 800c486:	627a      	str	r2, [r7, #36]	@ 0x24
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	617b      	str	r3, [r7, #20]
 800c48c:	2302      	movs	r3, #2
 800c48e:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800c496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d03a      	beq.n	800c512 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c49e:	613b      	str	r3, [r7, #16]
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a6:	3302      	adds	r3, #2
 800c4a8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800c4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ac:	60fb      	str	r3, [r7, #12]
 800c4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7fe f9ca 	bl	800a852 <get_fat>
 800c4be:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c4c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d804      	bhi.n	800c4d0 <f_lseek+0xa2>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2202      	movs	r2, #2
 800c4ca:	755a      	strb	r2, [r3, #21]
 800c4cc:	2302      	movs	r3, #2
 800c4ce:	e1b3      	b.n	800c838 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d6:	d104      	bne.n	800c4e2 <f_lseek+0xb4>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	755a      	strb	r2, [r3, #21]
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e1aa      	b.n	800c838 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d0de      	beq.n	800c4aa <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c4ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d809      	bhi.n	800c508 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f6:	1d1a      	adds	r2, r3, #4
 800c4f8:	627a      	str	r2, [r7, #36]	@ 0x24
 800c4fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4fc:	601a      	str	r2, [r3, #0]
 800c4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c500:	1d1a      	adds	r2, r3, #4
 800c502:	627a      	str	r2, [r7, #36]	@ 0x24
 800c504:	693a      	ldr	r2, [r7, #16]
 800c506:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c50e:	429a      	cmp	r2, r3
 800c510:	d3c4      	bcc.n	800c49c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c518:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c51a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d803      	bhi.n	800c52a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c524:	2200      	movs	r2, #0
 800c526:	601a      	str	r2, [r3, #0]
 800c528:	e184      	b.n	800c834 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c52a:	2311      	movs	r3, #17
 800c52c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c530:	e180      	b.n	800c834 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	683a      	ldr	r2, [r7, #0]
 800c538:	429a      	cmp	r2, r3
 800c53a:	d902      	bls.n	800c542 <f_lseek+0x114>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	68db      	ldr	r3, [r3, #12]
 800c540:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	f000 8172 	beq.w	800c834 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	3b01      	subs	r3, #1
 800c554:	4619      	mov	r1, r3
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7fe fc09 	bl	800ad6e <clmt_clust>
 800c55c:	4602      	mov	r2, r0
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	69db      	ldr	r3, [r3, #28]
 800c568:	4619      	mov	r1, r3
 800c56a:	4610      	mov	r0, r2
 800c56c:	f7fe f952 	bl	800a814 <clust2sect>
 800c570:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d104      	bne.n	800c582 <f_lseek+0x154>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2202      	movs	r2, #2
 800c57c:	755a      	strb	r2, [r3, #21]
 800c57e:	2302      	movs	r3, #2
 800c580:	e15a      	b.n	800c838 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	3b01      	subs	r3, #1
 800c586:	0a5b      	lsrs	r3, r3, #9
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	8952      	ldrh	r2, [r2, #10]
 800c58c:	3a01      	subs	r2, #1
 800c58e:	4013      	ands	r3, r2
 800c590:	69ba      	ldr	r2, [r7, #24]
 800c592:	4413      	add	r3, r2
 800c594:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	699b      	ldr	r3, [r3, #24]
 800c59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f000 8148 	beq.w	800c834 <f_lseek+0x406>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6a1b      	ldr	r3, [r3, #32]
 800c5a8:	69ba      	ldr	r2, [r7, #24]
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	f000 8142 	beq.w	800c834 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	7d1b      	ldrb	r3, [r3, #20]
 800c5b4:	b25b      	sxtb	r3, r3
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	da18      	bge.n	800c5ec <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	7858      	ldrb	r0, [r3, #1]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6a1a      	ldr	r2, [r3, #32]
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	f7fd fd99 	bl	800a100 <disk_write>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d004      	beq.n	800c5de <f_lseek+0x1b0>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	755a      	strb	r2, [r3, #21]
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e12c      	b.n	800c838 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	7d1b      	ldrb	r3, [r3, #20]
 800c5e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5e6:	b2da      	uxtb	r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	7858      	ldrb	r0, [r3, #1]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	69ba      	ldr	r2, [r7, #24]
 800c5fa:	f7fd fd61 	bl	800a0c0 <disk_read>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d004      	beq.n	800c60e <f_lseek+0x1e0>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	755a      	strb	r2, [r3, #21]
 800c60a:	2301      	movs	r3, #1
 800c60c:	e114      	b.n	800c838 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	69ba      	ldr	r2, [r7, #24]
 800c612:	621a      	str	r2, [r3, #32]
 800c614:	e10e      	b.n	800c834 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	683a      	ldr	r2, [r7, #0]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d908      	bls.n	800c632 <f_lseek+0x204>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	7d1b      	ldrb	r3, [r3, #20]
 800c624:	f003 0302 	and.w	r3, r3, #2
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d102      	bne.n	800c632 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	699b      	ldr	r3, [r3, #24]
 800c636:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c638:	2300      	movs	r3, #0
 800c63a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c640:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	f000 80a7 	beq.w	800c798 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	895b      	ldrh	r3, [r3, #10]
 800c64e:	025b      	lsls	r3, r3, #9
 800c650:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c652:	6a3b      	ldr	r3, [r7, #32]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d01b      	beq.n	800c690 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	1e5a      	subs	r2, r3, #1
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	fbb2 f2f3 	udiv	r2, r2, r3
 800c662:	6a3b      	ldr	r3, [r7, #32]
 800c664:	1e59      	subs	r1, r3, #1
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d30f      	bcc.n	800c690 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c670:	6a3b      	ldr	r3, [r7, #32]
 800c672:	1e5a      	subs	r2, r3, #1
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	425b      	negs	r3, r3
 800c678:	401a      	ands	r2, r3
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	699b      	ldr	r3, [r3, #24]
 800c682:	683a      	ldr	r2, [r7, #0]
 800c684:	1ad3      	subs	r3, r2, r3
 800c686:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	69db      	ldr	r3, [r3, #28]
 800c68c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c68e:	e022      	b.n	800c6d6 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d119      	bne.n	800c6d0 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2100      	movs	r1, #0
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7fe facc 	bl	800ac3e <create_chain>
 800c6a6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d104      	bne.n	800c6b8 <f_lseek+0x28a>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2202      	movs	r2, #2
 800c6b2:	755a      	strb	r2, [r3, #21]
 800c6b4:	2302      	movs	r3, #2
 800c6b6:	e0bf      	b.n	800c838 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6be:	d104      	bne.n	800c6ca <f_lseek+0x29c>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	755a      	strb	r2, [r3, #21]
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	e0b6      	b.n	800c838 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6ce:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6d4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d05d      	beq.n	800c798 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c6dc:	e03a      	b.n	800c754 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c6de:	683a      	ldr	r2, [r7, #0]
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	1ad3      	subs	r3, r2, r3
 800c6e4:	603b      	str	r3, [r7, #0]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	699a      	ldr	r2, [r3, #24]
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	441a      	add	r2, r3
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	7d1b      	ldrb	r3, [r3, #20]
 800c6f6:	f003 0302 	and.w	r3, r3, #2
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00b      	beq.n	800c716 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c702:	4618      	mov	r0, r3
 800c704:	f7fe fa9b 	bl	800ac3e <create_chain>
 800c708:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d108      	bne.n	800c722 <f_lseek+0x2f4>
							ofs = 0; break;
 800c710:	2300      	movs	r3, #0
 800c712:	603b      	str	r3, [r7, #0]
 800c714:	e022      	b.n	800c75c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fe f899 	bl	800a852 <get_fat>
 800c720:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c728:	d104      	bne.n	800c734 <f_lseek+0x306>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2201      	movs	r2, #1
 800c72e:	755a      	strb	r2, [r3, #21]
 800c730:	2301      	movs	r3, #1
 800c732:	e081      	b.n	800c838 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c736:	2b01      	cmp	r3, #1
 800c738:	d904      	bls.n	800c744 <f_lseek+0x316>
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c740:	429a      	cmp	r2, r3
 800c742:	d304      	bcc.n	800c74e <f_lseek+0x320>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2202      	movs	r2, #2
 800c748:	755a      	strb	r2, [r3, #21]
 800c74a:	2302      	movs	r3, #2
 800c74c:	e074      	b.n	800c838 <f_lseek+0x40a>
					fp->clust = clst;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c752:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c754:	683a      	ldr	r2, [r7, #0]
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d8c0      	bhi.n	800c6de <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	699a      	ldr	r2, [r3, #24]
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	441a      	add	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d012      	beq.n	800c798 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c776:	4618      	mov	r0, r3
 800c778:	f7fe f84c 	bl	800a814 <clust2sect>
 800c77c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c77e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c780:	2b00      	cmp	r3, #0
 800c782:	d104      	bne.n	800c78e <f_lseek+0x360>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2202      	movs	r2, #2
 800c788:	755a      	strb	r2, [r3, #21]
 800c78a:	2302      	movs	r3, #2
 800c78c:	e054      	b.n	800c838 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	0a5b      	lsrs	r3, r3, #9
 800c792:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c794:	4413      	add	r3, r2
 800c796:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	699a      	ldr	r2, [r3, #24]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d90a      	bls.n	800c7ba <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	699a      	ldr	r2, [r3, #24]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	7d1b      	ldrb	r3, [r3, #20]
 800c7b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7b4:	b2da      	uxtb	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	699b      	ldr	r3, [r3, #24]
 800c7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d036      	beq.n	800c834 <f_lseek+0x406>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6a1b      	ldr	r3, [r3, #32]
 800c7ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d031      	beq.n	800c834 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	7d1b      	ldrb	r3, [r3, #20]
 800c7d4:	b25b      	sxtb	r3, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	da18      	bge.n	800c80c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	7858      	ldrb	r0, [r3, #1]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6a1a      	ldr	r2, [r3, #32]
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	f7fd fc89 	bl	800a100 <disk_write>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d004      	beq.n	800c7fe <f_lseek+0x3d0>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	755a      	strb	r2, [r3, #21]
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e01c      	b.n	800c838 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	7d1b      	ldrb	r3, [r3, #20]
 800c802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c806:	b2da      	uxtb	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	7858      	ldrb	r0, [r3, #1]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c816:	2301      	movs	r3, #1
 800c818:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c81a:	f7fd fc51 	bl	800a0c0 <disk_read>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d004      	beq.n	800c82e <f_lseek+0x400>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	755a      	strb	r2, [r3, #21]
 800c82a:	2301      	movs	r3, #1
 800c82c:	e004      	b.n	800c838 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c832:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c834:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3740      	adds	r7, #64	@ 0x40
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b096      	sub	sp, #88	@ 0x58
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800c848:	f107 0108 	add.w	r1, r7, #8
 800c84c:	1d3b      	adds	r3, r7, #4
 800c84e:	2202      	movs	r2, #2
 800c850:	4618      	mov	r0, r3
 800c852:	f7fe ff01 	bl	800b658 <find_volume>
 800c856:	4603      	mov	r3, r0
 800c858:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800c860:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c864:	2b00      	cmp	r3, #0
 800c866:	f040 80f9 	bne.w	800ca5c <f_mkdir+0x21c>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	f107 030c 	add.w	r3, r7, #12
 800c870:	4611      	mov	r1, r2
 800c872:	4618      	mov	r0, r3
 800c874:	f7fe fdc6 	bl	800b404 <follow_path>
 800c878:	4603      	mov	r3, r0
 800c87a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800c87e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c882:	2b00      	cmp	r3, #0
 800c884:	d102      	bne.n	800c88c <f_mkdir+0x4c>
 800c886:	2308      	movs	r3, #8
 800c888:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 800c88c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c890:	2b04      	cmp	r3, #4
 800c892:	d108      	bne.n	800c8a6 <f_mkdir+0x66>
 800c894:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800c898:	f003 0320 	and.w	r3, r3, #32
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d002      	beq.n	800c8a6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 800c8a0:	2306      	movs	r3, #6
 800c8a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800c8a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c8aa:	2b04      	cmp	r3, #4
 800c8ac:	f040 80d6 	bne.w	800ca5c <f_mkdir+0x21c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800c8b0:	f107 030c 	add.w	r3, r7, #12
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fe f9c1 	bl	800ac3e <create_chain>
 800c8bc:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	895b      	ldrh	r3, [r3, #10]
 800c8c2:	025b      	lsls	r3, r3, #9
 800c8c4:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800c8cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d102      	bne.n	800c8d8 <f_mkdir+0x98>
 800c8d2:	2307      	movs	r3, #7
 800c8d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800c8d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d102      	bne.n	800c8e4 <f_mkdir+0xa4>
 800c8de:	2302      	movs	r3, #2
 800c8e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c8e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ea:	d102      	bne.n	800c8f2 <f_mkdir+0xb2>
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800c8f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d106      	bne.n	800c908 <f_mkdir+0xc8>
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fd fea9 	bl	800a654 <sync_window>
 800c902:	4603      	mov	r3, r0
 800c904:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 800c908:	f7fd fb32 	bl	8009f70 <get_fattime>
 800c90c:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800c90e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c912:	2b00      	cmp	r3, #0
 800c914:	d16a      	bne.n	800c9ec <f_mkdir+0x1ac>
				dsc = clust2sect(fs, dcl);
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fd ff7a 	bl	800a814 <clust2sect>
 800c920:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	3334      	adds	r3, #52	@ 0x34
 800c926:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 800c928:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c92c:	2100      	movs	r1, #0
 800c92e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c930:	f7fd fcc7 	bl	800a2c2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800c934:	220b      	movs	r2, #11
 800c936:	2120      	movs	r1, #32
 800c938:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c93a:	f7fd fcc2 	bl	800a2c2 <mem_set>
					dir[DIR_Name] = '.';
 800c93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c940:	222e      	movs	r2, #46	@ 0x2e
 800c942:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800c944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c946:	330b      	adds	r3, #11
 800c948:	2210      	movs	r2, #16
 800c94a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800c94c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c94e:	3316      	adds	r3, #22
 800c950:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c952:	4618      	mov	r0, r3
 800c954:	f7fd fc68 	bl	800a228 <st_dword>
					st_clust(fs, dir, dcl);
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c95c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fe fbdf 	bl	800b122 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800c964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c966:	3320      	adds	r3, #32
 800c968:	2220      	movs	r2, #32
 800c96a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7fd fc87 	bl	800a280 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800c972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c974:	3321      	adds	r3, #33	@ 0x21
 800c976:	222e      	movs	r2, #46	@ 0x2e
 800c978:	701a      	strb	r2, [r3, #0]
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	2b03      	cmp	r3, #3
 800c984:	d106      	bne.n	800c994 <f_mkdir+0x154>
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c98a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d101      	bne.n	800c994 <f_mkdir+0x154>
 800c990:	2300      	movs	r3, #0
 800c992:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800c994:	68b8      	ldr	r0, [r7, #8]
 800c996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c998:	3320      	adds	r3, #32
 800c99a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c99c:	4619      	mov	r1, r3
 800c99e:	f7fe fbc0 	bl	800b122 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	895b      	ldrh	r3, [r3, #10]
 800c9a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9a8:	e01b      	b.n	800c9e2 <f_mkdir+0x1a2>
					fs->winsect = dsc++;
 800c9aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9ac:	1c5a      	adds	r2, r3, #1
 800c9ae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7fd fe49 	bl	800a654 <sync_window>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 800c9c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d10c      	bne.n	800c9ea <f_mkdir+0x1aa>
					mem_set(dir, 0, SS(fs));
 800c9d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c9d8:	f7fd fc73 	bl	800a2c2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800c9dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d1e0      	bne.n	800c9aa <f_mkdir+0x16a>
 800c9e8:	e000      	b.n	800c9ec <f_mkdir+0x1ac>
					if (res != FR_OK) break;
 800c9ea:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800c9ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d107      	bne.n	800ca04 <f_mkdir+0x1c4>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800c9f4:	f107 030c 	add.w	r3, r7, #12
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fe fc07 	bl	800b20c <dir_register>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 800ca04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d120      	bne.n	800ca4e <f_mkdir+0x20e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800ca0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800ca10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca12:	3316      	adds	r3, #22
 800ca14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7fd fc06 	bl	800a228 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fe fb7d 	bl	800b122 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800ca28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca2a:	330b      	adds	r3, #11
 800ca2c:	2210      	movs	r2, #16
 800ca2e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2201      	movs	r2, #1
 800ca34:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800ca36:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10e      	bne.n	800ca5c <f_mkdir+0x21c>
					res = sync_fs(fs);
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7fd fe79 	bl	800a738 <sync_fs>
 800ca46:	4603      	mov	r3, r0
 800ca48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800ca4c:	e006      	b.n	800ca5c <f_mkdir+0x21c>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800ca4e:	f107 030c 	add.w	r3, r7, #12
 800ca52:	2200      	movs	r2, #0
 800ca54:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7fe f88c 	bl	800ab74 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ca5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3758      	adds	r7, #88	@ 0x58
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	460b      	mov	r3, r1
 800ca72:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ca74:	78fb      	ldrb	r3, [r7, #3]
 800ca76:	2b0a      	cmp	r3, #10
 800ca78:	d103      	bne.n	800ca82 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ca7a:	210d      	movs	r1, #13
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f7ff fff3 	bl	800ca68 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	db25      	blt.n	800cada <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	1c5a      	adds	r2, r3, #1
 800ca92:	60fa      	str	r2, [r7, #12]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	4413      	add	r3, r2
 800ca98:	78fa      	ldrb	r2, [r7, #3]
 800ca9a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2b3c      	cmp	r3, #60	@ 0x3c
 800caa0:	dd12      	ble.n	800cac8 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6818      	ldr	r0, [r3, #0]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f103 010c 	add.w	r1, r3, #12
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	f107 0308 	add.w	r3, r7, #8
 800cab2:	f7ff fa55 	bl	800bf60 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800cab6:	68ba      	ldr	r2, [r7, #8]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	429a      	cmp	r2, r3
 800cabc:	d101      	bne.n	800cac2 <putc_bfd+0x5a>
 800cabe:	2300      	movs	r3, #0
 800cac0:	e001      	b.n	800cac6 <putc_bfd+0x5e>
 800cac2:	f04f 33ff 	mov.w	r3, #4294967295
 800cac6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	1c5a      	adds	r2, r3, #1
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	609a      	str	r2, [r3, #8]
 800cad8:	e000      	b.n	800cadc <putc_bfd+0x74>
	if (i < 0) return;
 800cada:	bf00      	nop
}
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}

0800cae2 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800cae2:	b580      	push	{r7, lr}
 800cae4:	b084      	sub	sp, #16
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	db16      	blt.n	800cb20 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6818      	ldr	r0, [r3, #0]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f103 010c 	add.w	r1, r3, #12
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	461a      	mov	r2, r3
 800cb02:	f107 030c 	add.w	r3, r7, #12
 800cb06:	f7ff fa2b 	bl	800bf60 <f_write>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d107      	bne.n	800cb20 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d102      	bne.n	800cb20 <putc_flush+0x3e>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	e001      	b.n	800cb24 <putc_flush+0x42>
	return EOF;
 800cb20:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	683a      	ldr	r2, [r7, #0]
 800cb3a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	605a      	str	r2, [r3, #4]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	685a      	ldr	r2, [r3, #4]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	609a      	str	r2, [r3, #8]
}
 800cb4a:	bf00      	nop
 800cb4c:	370c      	adds	r7, #12
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr
	...

0800cb58 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800cb58:	b40e      	push	{r1, r2, r3}
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b0a7      	sub	sp, #156	@ 0x9c
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800cb62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cb66:	6879      	ldr	r1, [r7, #4]
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7ff ffdf 	bl	800cb2c <putc_init>

	va_start(arp, fmt);
 800cb6e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800cb72:	67bb      	str	r3, [r7, #120]	@ 0x78

	for (;;) {
		c = *fmt++;
 800cb74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cb78:	1c5a      	adds	r2, r3, #1
 800cb7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == 0) break;			/* End of string */
 800cb84:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f000 81f2 	beq.w	800cf72 <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800cb8e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cb92:	2b25      	cmp	r3, #37	@ 0x25
 800cb94:	d008      	beq.n	800cba8 <f_printf+0x50>
			putc_bfd(&pb, c);
 800cb96:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800cb9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cb9e:	4611      	mov	r1, r2
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7ff ff61 	bl	800ca68 <putc_bfd>
			continue;
 800cba6:	e1e3      	b.n	800cf70 <f_printf+0x418>
		}
		w = f = 0;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800cbae:	2300      	movs	r3, #0
 800cbb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		c = *fmt++;
 800cbb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cbb8:	1c5a      	adds	r2, r3, #1
 800cbba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800cbc4:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cbc8:	2b30      	cmp	r3, #48	@ 0x30
 800cbca:	d10b      	bne.n	800cbe4 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800cbd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cbd6:	1c5a      	adds	r2, r3, #1
 800cbd8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
 800cbe2:	e024      	b.n	800cc2e <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800cbe4:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cbe8:	2b2d      	cmp	r3, #45	@ 0x2d
 800cbea:	d120      	bne.n	800cc2e <f_printf+0xd6>
				f = 2; c = *fmt++;
 800cbec:	2302      	movs	r3, #2
 800cbee:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800cbf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cbf6:	1c5a      	adds	r2, r3, #1
 800cbf8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800cc02:	e014      	b.n	800cc2e <f_printf+0xd6>
			w = w * 10 + c - '0';
 800cc04:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cc08:	4613      	mov	r3, r2
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	4413      	add	r3, r2
 800cc0e:	005b      	lsls	r3, r3, #1
 800cc10:	461a      	mov	r2, r3
 800cc12:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cc16:	4413      	add	r3, r2
 800cc18:	3b30      	subs	r3, #48	@ 0x30
 800cc1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			c = *fmt++;
 800cc1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc22:	1c5a      	adds	r2, r3, #1
 800cc24:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		while (IsDigit(c)) {		/* Precision */
 800cc2e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cc32:	2b2f      	cmp	r3, #47	@ 0x2f
 800cc34:	d903      	bls.n	800cc3e <f_printf+0xe6>
 800cc36:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cc3a:	2b39      	cmp	r3, #57	@ 0x39
 800cc3c:	d9e2      	bls.n	800cc04 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800cc3e:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cc42:	2b6c      	cmp	r3, #108	@ 0x6c
 800cc44:	d003      	beq.n	800cc4e <f_printf+0xf6>
 800cc46:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cc4a:	2b4c      	cmp	r3, #76	@ 0x4c
 800cc4c:	d10d      	bne.n	800cc6a <f_printf+0x112>
			f |= 4; c = *fmt++;
 800cc4e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800cc52:	f043 0304 	orr.w	r3, r3, #4
 800cc56:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800cc5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cc5e:	1c5a      	adds	r2, r3, #1
 800cc60:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
		}
		if (!c) break;
 800cc6a:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	f000 8181 	beq.w	800cf76 <f_printf+0x41e>
		d = c;
 800cc74:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800cc78:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		if (IsLower(d)) d -= 0x20;
 800cc7c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800cc80:	2b60      	cmp	r3, #96	@ 0x60
 800cc82:	d908      	bls.n	800cc96 <f_printf+0x13e>
 800cc84:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800cc88:	2b7a      	cmp	r3, #122	@ 0x7a
 800cc8a:	d804      	bhi.n	800cc96 <f_printf+0x13e>
 800cc8c:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800cc90:	3b20      	subs	r3, #32
 800cc92:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		switch (d) {				/* Type is... */
 800cc96:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800cc9a:	3b42      	subs	r3, #66	@ 0x42
 800cc9c:	2b16      	cmp	r3, #22
 800cc9e:	f200 8098 	bhi.w	800cdd2 <f_printf+0x27a>
 800cca2:	a201      	add	r2, pc, #4	@ (adr r2, 800cca8 <f_printf+0x150>)
 800cca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca8:	0800cdb3 	.word	0x0800cdb3
 800ccac:	0800cd9b 	.word	0x0800cd9b
 800ccb0:	0800cdc3 	.word	0x0800cdc3
 800ccb4:	0800cdd3 	.word	0x0800cdd3
 800ccb8:	0800cdd3 	.word	0x0800cdd3
 800ccbc:	0800cdd3 	.word	0x0800cdd3
 800ccc0:	0800cdd3 	.word	0x0800cdd3
 800ccc4:	0800cdd3 	.word	0x0800cdd3
 800ccc8:	0800cdd3 	.word	0x0800cdd3
 800cccc:	0800cdd3 	.word	0x0800cdd3
 800ccd0:	0800cdd3 	.word	0x0800cdd3
 800ccd4:	0800cdd3 	.word	0x0800cdd3
 800ccd8:	0800cdd3 	.word	0x0800cdd3
 800ccdc:	0800cdbb 	.word	0x0800cdbb
 800cce0:	0800cdd3 	.word	0x0800cdd3
 800cce4:	0800cdd3 	.word	0x0800cdd3
 800cce8:	0800cdd3 	.word	0x0800cdd3
 800ccec:	0800cd05 	.word	0x0800cd05
 800ccf0:	0800cdd3 	.word	0x0800cdd3
 800ccf4:	0800cdc3 	.word	0x0800cdc3
 800ccf8:	0800cdd3 	.word	0x0800cdd3
 800ccfc:	0800cdd3 	.word	0x0800cdd3
 800cd00:	0800cdcb 	.word	0x0800cdcb
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800cd04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd06:	1d1a      	adds	r2, r3, #4
 800cd08:	67ba      	str	r2, [r7, #120]	@ 0x78
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
			for (j = 0; p[j]; j++) ;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cd14:	e004      	b.n	800cd20 <f_printf+0x1c8>
 800cd16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cd20:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cd22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd26:	4413      	add	r3, r2
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1f3      	bne.n	800cd16 <f_printf+0x1be>
			if (!(f & 2)) {
 800cd2e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800cd32:	f003 0302 	and.w	r3, r3, #2
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d11a      	bne.n	800cd70 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800cd3a:	e005      	b.n	800cd48 <f_printf+0x1f0>
 800cd3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cd40:	2120      	movs	r1, #32
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7ff fe90 	bl	800ca68 <putc_bfd>
 800cd48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd4c:	1c5a      	adds	r2, r3, #1
 800cd4e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800cd52:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d8f0      	bhi.n	800cd3c <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800cd5a:	e009      	b.n	800cd70 <f_printf+0x218>
 800cd5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cd5e:	1c5a      	adds	r2, r3, #1
 800cd60:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800cd62:	781a      	ldrb	r2, [r3, #0]
 800cd64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cd68:	4611      	mov	r1, r2
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7ff fe7c 	bl	800ca68 <putc_bfd>
 800cd70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1f1      	bne.n	800cd5c <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800cd78:	e005      	b.n	800cd86 <f_printf+0x22e>
 800cd7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cd7e:	2120      	movs	r1, #32
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7ff fe71 	bl	800ca68 <putc_bfd>
 800cd86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd8a:	1c5a      	adds	r2, r3, #1
 800cd8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800cd90:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d8f0      	bhi.n	800cd7a <f_printf+0x222>
			continue;
 800cd98:	e0ea      	b.n	800cf70 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800cd9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd9c:	1d1a      	adds	r2, r3, #4
 800cd9e:	67ba      	str	r2, [r7, #120]	@ 0x78
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	b2da      	uxtb	r2, r3
 800cda4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cda8:	4611      	mov	r1, r2
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7ff fe5c 	bl	800ca68 <putc_bfd>
 800cdb0:	e0de      	b.n	800cf70 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800cdb2:	2302      	movs	r3, #2
 800cdb4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800cdb8:	e014      	b.n	800cde4 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800cdba:	2308      	movs	r3, #8
 800cdbc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800cdc0:	e010      	b.n	800cde4 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800cdc2:	230a      	movs	r3, #10
 800cdc4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800cdc8:	e00c      	b.n	800cde4 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800cdca:	2310      	movs	r3, #16
 800cdcc:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 800cdd0:	e008      	b.n	800cde4 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800cdd2:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800cdd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cdda:	4611      	mov	r1, r2
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7ff fe43 	bl	800ca68 <putc_bfd>
 800cde2:	e0c5      	b.n	800cf70 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800cde4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800cde8:	f003 0304 	and.w	r3, r3, #4
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d004      	beq.n	800cdfa <f_printf+0x2a2>
 800cdf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cdf2:	1d1a      	adds	r2, r3, #4
 800cdf4:	67ba      	str	r2, [r7, #120]	@ 0x78
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	e00c      	b.n	800ce14 <f_printf+0x2bc>
 800cdfa:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800cdfe:	2b44      	cmp	r3, #68	@ 0x44
 800ce00:	d104      	bne.n	800ce0c <f_printf+0x2b4>
 800ce02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce04:	1d1a      	adds	r2, r3, #4
 800ce06:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	e003      	b.n	800ce14 <f_printf+0x2bc>
 800ce0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce0e:	1d1a      	adds	r2, r3, #4
 800ce10:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800ce18:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800ce1c:	2b44      	cmp	r3, #68	@ 0x44
 800ce1e:	d10e      	bne.n	800ce3e <f_printf+0x2e6>
 800ce20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	da0a      	bge.n	800ce3e <f_printf+0x2e6>
			v = 0 - v;
 800ce28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ce2c:	425b      	negs	r3, r3
 800ce2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			f |= 8;
 800ce32:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ce36:	f043 0308 	orr.w	r3, r3, #8
 800ce3a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}
		i = 0;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800ce44:	f897 2096 	ldrb.w	r2, [r7, #150]	@ 0x96
 800ce48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ce4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce50:	fb01 f202 	mul.w	r2, r1, r2
 800ce54:	1a9b      	subs	r3, r3, r2
 800ce56:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
 800ce5a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800ce5e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ce62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800ce6a:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800ce6e:	2b09      	cmp	r3, #9
 800ce70:	d90b      	bls.n	800ce8a <f_printf+0x332>
 800ce72:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800ce76:	2b78      	cmp	r3, #120	@ 0x78
 800ce78:	d101      	bne.n	800ce7e <f_printf+0x326>
 800ce7a:	2227      	movs	r2, #39	@ 0x27
 800ce7c:	e000      	b.n	800ce80 <f_printf+0x328>
 800ce7e:	2207      	movs	r2, #7
 800ce80:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800ce84:	4413      	add	r3, r2
 800ce86:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
			str[i++] = d + '0';
 800ce8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ce8e:	1c5a      	adds	r2, r3, #1
 800ce90:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800ce94:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800ce98:	3230      	adds	r2, #48	@ 0x30
 800ce9a:	b2d2      	uxtb	r2, r2
 800ce9c:	3398      	adds	r3, #152	@ 0x98
 800ce9e:	443b      	add	r3, r7
 800cea0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800cea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d003      	beq.n	800ceb4 <f_printf+0x35c>
 800ceac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ceb0:	2b1f      	cmp	r3, #31
 800ceb2:	d9c7      	bls.n	800ce44 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800ceb4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ceb8:	f003 0308 	and.w	r3, r3, #8
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d009      	beq.n	800ced4 <f_printf+0x37c>
 800cec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cec4:	1c5a      	adds	r2, r3, #1
 800cec6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800ceca:	3398      	adds	r3, #152	@ 0x98
 800cecc:	443b      	add	r3, r7
 800cece:	222d      	movs	r2, #45	@ 0x2d
 800ced0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800ced4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ced8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cedc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800cee0:	f003 0301 	and.w	r3, r3, #1
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d001      	beq.n	800ceec <f_printf+0x394>
 800cee8:	2330      	movs	r3, #48	@ 0x30
 800ceea:	e000      	b.n	800ceee <f_printf+0x396>
 800ceec:	2320      	movs	r3, #32
 800ceee:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800cef2:	e007      	b.n	800cf04 <f_printf+0x3ac>
 800cef4:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800cef8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cefc:	4611      	mov	r1, r2
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7ff fdb2 	bl	800ca68 <putc_bfd>
 800cf04:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800cf08:	f003 0302 	and.w	r3, r3, #2
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d108      	bne.n	800cf22 <f_printf+0x3ca>
 800cf10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cf14:	1c5a      	adds	r2, r3, #1
 800cf16:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800cf1a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d8e8      	bhi.n	800cef4 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800cf22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cf26:	3b01      	subs	r3, #1
 800cf28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cf2c:	f107 020c 	add.w	r2, r7, #12
 800cf30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cf34:	4413      	add	r3, r2
 800cf36:	781a      	ldrb	r2, [r3, #0]
 800cf38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cf3c:	4611      	mov	r1, r2
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7ff fd92 	bl	800ca68 <putc_bfd>
		} while (i);
 800cf44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1ea      	bne.n	800cf22 <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800cf4c:	e007      	b.n	800cf5e <f_printf+0x406>
 800cf4e:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 800cf52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cf56:	4611      	mov	r1, r2
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f7ff fd85 	bl	800ca68 <putc_bfd>
 800cf5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cf62:	1c5a      	adds	r2, r3, #1
 800cf64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800cf68:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d8ee      	bhi.n	800cf4e <f_printf+0x3f6>
		c = *fmt++;
 800cf70:	e600      	b.n	800cb74 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800cf72:	bf00      	nop
 800cf74:	e000      	b.n	800cf78 <f_printf+0x420>
		if (!c) break;
 800cf76:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800cf78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7ff fdb0 	bl	800cae2 <putc_flush>
 800cf82:	4603      	mov	r3, r0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	379c      	adds	r7, #156	@ 0x9c
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf8e:	b003      	add	sp, #12
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop

0800cf94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b087      	sub	sp, #28
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cfaa:	4b1f      	ldr	r3, [pc, #124]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfac:	7a5b      	ldrb	r3, [r3, #9]
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d131      	bne.n	800d018 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cfb4:	4b1c      	ldr	r3, [pc, #112]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfb6:	7a5b      	ldrb	r3, [r3, #9]
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	461a      	mov	r2, r3
 800cfbc:	4b1a      	ldr	r3, [pc, #104]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cfc2:	4b19      	ldr	r3, [pc, #100]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfc4:	7a5b      	ldrb	r3, [r3, #9]
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	4a17      	ldr	r2, [pc, #92]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	4413      	add	r3, r2
 800cfce:	68fa      	ldr	r2, [r7, #12]
 800cfd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cfd2:	4b15      	ldr	r3, [pc, #84]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfd4:	7a5b      	ldrb	r3, [r3, #9]
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	461a      	mov	r2, r3
 800cfda:	4b13      	ldr	r3, [pc, #76]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfdc:	4413      	add	r3, r2
 800cfde:	79fa      	ldrb	r2, [r7, #7]
 800cfe0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cfe2:	4b11      	ldr	r3, [pc, #68]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfe4:	7a5b      	ldrb	r3, [r3, #9]
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	1c5a      	adds	r2, r3, #1
 800cfea:	b2d1      	uxtb	r1, r2
 800cfec:	4a0e      	ldr	r2, [pc, #56]	@ (800d028 <FATFS_LinkDriverEx+0x94>)
 800cfee:	7251      	strb	r1, [r2, #9]
 800cff0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cff2:	7dbb      	ldrb	r3, [r7, #22]
 800cff4:	3330      	adds	r3, #48	@ 0x30
 800cff6:	b2da      	uxtb	r2, r3
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	3301      	adds	r3, #1
 800d000:	223a      	movs	r2, #58	@ 0x3a
 800d002:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	3302      	adds	r3, #2
 800d008:	222f      	movs	r2, #47	@ 0x2f
 800d00a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	3303      	adds	r3, #3
 800d010:	2200      	movs	r2, #0
 800d012:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d014:	2300      	movs	r3, #0
 800d016:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d018:	7dfb      	ldrb	r3, [r7, #23]
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	371c      	adds	r7, #28
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	20000d10 	.word	0x20000d10

0800d02c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d036:	2200      	movs	r2, #0
 800d038:	6839      	ldr	r1, [r7, #0]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff ffaa 	bl	800cf94 <FATFS_LinkDriverEx>
 800d040:	4603      	mov	r3, r0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}

0800d04a <memset>:
 800d04a:	4402      	add	r2, r0
 800d04c:	4603      	mov	r3, r0
 800d04e:	4293      	cmp	r3, r2
 800d050:	d100      	bne.n	800d054 <memset+0xa>
 800d052:	4770      	bx	lr
 800d054:	f803 1b01 	strb.w	r1, [r3], #1
 800d058:	e7f9      	b.n	800d04e <memset+0x4>
	...

0800d05c <__errno>:
 800d05c:	4b01      	ldr	r3, [pc, #4]	@ (800d064 <__errno+0x8>)
 800d05e:	6818      	ldr	r0, [r3, #0]
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	200000cc 	.word	0x200000cc

0800d068 <__libc_init_array>:
 800d068:	b570      	push	{r4, r5, r6, lr}
 800d06a:	4d0d      	ldr	r5, [pc, #52]	@ (800d0a0 <__libc_init_array+0x38>)
 800d06c:	4c0d      	ldr	r4, [pc, #52]	@ (800d0a4 <__libc_init_array+0x3c>)
 800d06e:	1b64      	subs	r4, r4, r5
 800d070:	10a4      	asrs	r4, r4, #2
 800d072:	2600      	movs	r6, #0
 800d074:	42a6      	cmp	r6, r4
 800d076:	d109      	bne.n	800d08c <__libc_init_array+0x24>
 800d078:	4d0b      	ldr	r5, [pc, #44]	@ (800d0a8 <__libc_init_array+0x40>)
 800d07a:	4c0c      	ldr	r4, [pc, #48]	@ (800d0ac <__libc_init_array+0x44>)
 800d07c:	f000 fd8a 	bl	800db94 <_init>
 800d080:	1b64      	subs	r4, r4, r5
 800d082:	10a4      	asrs	r4, r4, #2
 800d084:	2600      	movs	r6, #0
 800d086:	42a6      	cmp	r6, r4
 800d088:	d105      	bne.n	800d096 <__libc_init_array+0x2e>
 800d08a:	bd70      	pop	{r4, r5, r6, pc}
 800d08c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d090:	4798      	blx	r3
 800d092:	3601      	adds	r6, #1
 800d094:	e7ee      	b.n	800d074 <__libc_init_array+0xc>
 800d096:	f855 3b04 	ldr.w	r3, [r5], #4
 800d09a:	4798      	blx	r3
 800d09c:	3601      	adds	r6, #1
 800d09e:	e7f2      	b.n	800d086 <__libc_init_array+0x1e>
 800d0a0:	0800dd98 	.word	0x0800dd98
 800d0a4:	0800dd98 	.word	0x0800dd98
 800d0a8:	0800dd98 	.word	0x0800dd98
 800d0ac:	0800dd9c 	.word	0x0800dd9c

0800d0b0 <atan2>:
 800d0b0:	f000 baf2 	b.w	800d698 <__ieee754_atan2>
 800d0b4:	0000      	movs	r0, r0
	...

0800d0b8 <log>:
 800d0b8:	b538      	push	{r3, r4, r5, lr}
 800d0ba:	ed2d 8b02 	vpush	{d8}
 800d0be:	ec55 4b10 	vmov	r4, r5, d0
 800d0c2:	f000 fbb1 	bl	800d828 <__ieee754_log>
 800d0c6:	4622      	mov	r2, r4
 800d0c8:	462b      	mov	r3, r5
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	eeb0 8a40 	vmov.f32	s16, s0
 800d0d2:	eef0 8a60 	vmov.f32	s17, s1
 800d0d6:	f7f3 fcd5 	bl	8000a84 <__aeabi_dcmpun>
 800d0da:	b998      	cbnz	r0, 800d104 <log+0x4c>
 800d0dc:	2200      	movs	r2, #0
 800d0de:	2300      	movs	r3, #0
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	4629      	mov	r1, r5
 800d0e4:	f7f3 fcc4 	bl	8000a70 <__aeabi_dcmpgt>
 800d0e8:	b960      	cbnz	r0, 800d104 <log+0x4c>
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	4629      	mov	r1, r5
 800d0f2:	f7f3 fc95 	bl	8000a20 <__aeabi_dcmpeq>
 800d0f6:	b160      	cbz	r0, 800d112 <log+0x5a>
 800d0f8:	f7ff ffb0 	bl	800d05c <__errno>
 800d0fc:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800d128 <log+0x70>
 800d100:	2322      	movs	r3, #34	@ 0x22
 800d102:	6003      	str	r3, [r0, #0]
 800d104:	eeb0 0a48 	vmov.f32	s0, s16
 800d108:	eef0 0a68 	vmov.f32	s1, s17
 800d10c:	ecbd 8b02 	vpop	{d8}
 800d110:	bd38      	pop	{r3, r4, r5, pc}
 800d112:	f7ff ffa3 	bl	800d05c <__errno>
 800d116:	ecbd 8b02 	vpop	{d8}
 800d11a:	2321      	movs	r3, #33	@ 0x21
 800d11c:	6003      	str	r3, [r0, #0]
 800d11e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d122:	4803      	ldr	r0, [pc, #12]	@ (800d130 <log+0x78>)
 800d124:	f000 b9d4 	b.w	800d4d0 <nan>
 800d128:	00000000 	.word	0x00000000
 800d12c:	fff00000 	.word	0xfff00000
 800d130:	0800dd18 	.word	0x0800dd18

0800d134 <sqrt>:
 800d134:	b538      	push	{r3, r4, r5, lr}
 800d136:	ed2d 8b02 	vpush	{d8}
 800d13a:	ec55 4b10 	vmov	r4, r5, d0
 800d13e:	f000 f9cf 	bl	800d4e0 <__ieee754_sqrt>
 800d142:	4622      	mov	r2, r4
 800d144:	462b      	mov	r3, r5
 800d146:	4620      	mov	r0, r4
 800d148:	4629      	mov	r1, r5
 800d14a:	eeb0 8a40 	vmov.f32	s16, s0
 800d14e:	eef0 8a60 	vmov.f32	s17, s1
 800d152:	f7f3 fc97 	bl	8000a84 <__aeabi_dcmpun>
 800d156:	b990      	cbnz	r0, 800d17e <sqrt+0x4a>
 800d158:	2200      	movs	r2, #0
 800d15a:	2300      	movs	r3, #0
 800d15c:	4620      	mov	r0, r4
 800d15e:	4629      	mov	r1, r5
 800d160:	f7f3 fc68 	bl	8000a34 <__aeabi_dcmplt>
 800d164:	b158      	cbz	r0, 800d17e <sqrt+0x4a>
 800d166:	f7ff ff79 	bl	800d05c <__errno>
 800d16a:	2321      	movs	r3, #33	@ 0x21
 800d16c:	6003      	str	r3, [r0, #0]
 800d16e:	2200      	movs	r2, #0
 800d170:	2300      	movs	r3, #0
 800d172:	4610      	mov	r0, r2
 800d174:	4619      	mov	r1, r3
 800d176:	f7f3 fb15 	bl	80007a4 <__aeabi_ddiv>
 800d17a:	ec41 0b18 	vmov	d8, r0, r1
 800d17e:	eeb0 0a48 	vmov.f32	s0, s16
 800d182:	eef0 0a68 	vmov.f32	s1, s17
 800d186:	ecbd 8b02 	vpop	{d8}
 800d18a:	bd38      	pop	{r3, r4, r5, pc}
 800d18c:	0000      	movs	r0, r0
	...

0800d190 <atan>:
 800d190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d194:	ec55 4b10 	vmov	r4, r5, d0
 800d198:	4bbf      	ldr	r3, [pc, #764]	@ (800d498 <atan+0x308>)
 800d19a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d19e:	429e      	cmp	r6, r3
 800d1a0:	46ab      	mov	fp, r5
 800d1a2:	d918      	bls.n	800d1d6 <atan+0x46>
 800d1a4:	4bbd      	ldr	r3, [pc, #756]	@ (800d49c <atan+0x30c>)
 800d1a6:	429e      	cmp	r6, r3
 800d1a8:	d801      	bhi.n	800d1ae <atan+0x1e>
 800d1aa:	d109      	bne.n	800d1c0 <atan+0x30>
 800d1ac:	b144      	cbz	r4, 800d1c0 <atan+0x30>
 800d1ae:	4622      	mov	r2, r4
 800d1b0:	462b      	mov	r3, r5
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	4629      	mov	r1, r5
 800d1b6:	f7f3 f815 	bl	80001e4 <__adddf3>
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	460d      	mov	r5, r1
 800d1be:	e006      	b.n	800d1ce <atan+0x3e>
 800d1c0:	f1bb 0f00 	cmp.w	fp, #0
 800d1c4:	f340 812b 	ble.w	800d41e <atan+0x28e>
 800d1c8:	a597      	add	r5, pc, #604	@ (adr r5, 800d428 <atan+0x298>)
 800d1ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d1ce:	ec45 4b10 	vmov	d0, r4, r5
 800d1d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d6:	4bb2      	ldr	r3, [pc, #712]	@ (800d4a0 <atan+0x310>)
 800d1d8:	429e      	cmp	r6, r3
 800d1da:	d813      	bhi.n	800d204 <atan+0x74>
 800d1dc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d1e0:	429e      	cmp	r6, r3
 800d1e2:	d80c      	bhi.n	800d1fe <atan+0x6e>
 800d1e4:	a392      	add	r3, pc, #584	@ (adr r3, 800d430 <atan+0x2a0>)
 800d1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	4629      	mov	r1, r5
 800d1ee:	f7f2 fff9 	bl	80001e4 <__adddf3>
 800d1f2:	4bac      	ldr	r3, [pc, #688]	@ (800d4a4 <atan+0x314>)
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f7f3 fc3b 	bl	8000a70 <__aeabi_dcmpgt>
 800d1fa:	2800      	cmp	r0, #0
 800d1fc:	d1e7      	bne.n	800d1ce <atan+0x3e>
 800d1fe:	f04f 3aff 	mov.w	sl, #4294967295
 800d202:	e029      	b.n	800d258 <atan+0xc8>
 800d204:	f000 f95c 	bl	800d4c0 <fabs>
 800d208:	4ba7      	ldr	r3, [pc, #668]	@ (800d4a8 <atan+0x318>)
 800d20a:	429e      	cmp	r6, r3
 800d20c:	ec55 4b10 	vmov	r4, r5, d0
 800d210:	f200 80bc 	bhi.w	800d38c <atan+0x1fc>
 800d214:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d218:	429e      	cmp	r6, r3
 800d21a:	f200 809e 	bhi.w	800d35a <atan+0x1ca>
 800d21e:	4622      	mov	r2, r4
 800d220:	462b      	mov	r3, r5
 800d222:	4620      	mov	r0, r4
 800d224:	4629      	mov	r1, r5
 800d226:	f7f2 ffdd 	bl	80001e4 <__adddf3>
 800d22a:	4b9e      	ldr	r3, [pc, #632]	@ (800d4a4 <atan+0x314>)
 800d22c:	2200      	movs	r2, #0
 800d22e:	f7f2 ffd7 	bl	80001e0 <__aeabi_dsub>
 800d232:	2200      	movs	r2, #0
 800d234:	4606      	mov	r6, r0
 800d236:	460f      	mov	r7, r1
 800d238:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d23c:	4620      	mov	r0, r4
 800d23e:	4629      	mov	r1, r5
 800d240:	f7f2 ffd0 	bl	80001e4 <__adddf3>
 800d244:	4602      	mov	r2, r0
 800d246:	460b      	mov	r3, r1
 800d248:	4630      	mov	r0, r6
 800d24a:	4639      	mov	r1, r7
 800d24c:	f7f3 faaa 	bl	80007a4 <__aeabi_ddiv>
 800d250:	f04f 0a00 	mov.w	sl, #0
 800d254:	4604      	mov	r4, r0
 800d256:	460d      	mov	r5, r1
 800d258:	4622      	mov	r2, r4
 800d25a:	462b      	mov	r3, r5
 800d25c:	4620      	mov	r0, r4
 800d25e:	4629      	mov	r1, r5
 800d260:	f7f3 f976 	bl	8000550 <__aeabi_dmul>
 800d264:	4602      	mov	r2, r0
 800d266:	460b      	mov	r3, r1
 800d268:	4680      	mov	r8, r0
 800d26a:	4689      	mov	r9, r1
 800d26c:	f7f3 f970 	bl	8000550 <__aeabi_dmul>
 800d270:	a371      	add	r3, pc, #452	@ (adr r3, 800d438 <atan+0x2a8>)
 800d272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d276:	4606      	mov	r6, r0
 800d278:	460f      	mov	r7, r1
 800d27a:	f7f3 f969 	bl	8000550 <__aeabi_dmul>
 800d27e:	a370      	add	r3, pc, #448	@ (adr r3, 800d440 <atan+0x2b0>)
 800d280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d284:	f7f2 ffae 	bl	80001e4 <__adddf3>
 800d288:	4632      	mov	r2, r6
 800d28a:	463b      	mov	r3, r7
 800d28c:	f7f3 f960 	bl	8000550 <__aeabi_dmul>
 800d290:	a36d      	add	r3, pc, #436	@ (adr r3, 800d448 <atan+0x2b8>)
 800d292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d296:	f7f2 ffa5 	bl	80001e4 <__adddf3>
 800d29a:	4632      	mov	r2, r6
 800d29c:	463b      	mov	r3, r7
 800d29e:	f7f3 f957 	bl	8000550 <__aeabi_dmul>
 800d2a2:	a36b      	add	r3, pc, #428	@ (adr r3, 800d450 <atan+0x2c0>)
 800d2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a8:	f7f2 ff9c 	bl	80001e4 <__adddf3>
 800d2ac:	4632      	mov	r2, r6
 800d2ae:	463b      	mov	r3, r7
 800d2b0:	f7f3 f94e 	bl	8000550 <__aeabi_dmul>
 800d2b4:	a368      	add	r3, pc, #416	@ (adr r3, 800d458 <atan+0x2c8>)
 800d2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ba:	f7f2 ff93 	bl	80001e4 <__adddf3>
 800d2be:	4632      	mov	r2, r6
 800d2c0:	463b      	mov	r3, r7
 800d2c2:	f7f3 f945 	bl	8000550 <__aeabi_dmul>
 800d2c6:	a366      	add	r3, pc, #408	@ (adr r3, 800d460 <atan+0x2d0>)
 800d2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2cc:	f7f2 ff8a 	bl	80001e4 <__adddf3>
 800d2d0:	4642      	mov	r2, r8
 800d2d2:	464b      	mov	r3, r9
 800d2d4:	f7f3 f93c 	bl	8000550 <__aeabi_dmul>
 800d2d8:	a363      	add	r3, pc, #396	@ (adr r3, 800d468 <atan+0x2d8>)
 800d2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2de:	4680      	mov	r8, r0
 800d2e0:	4689      	mov	r9, r1
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	4639      	mov	r1, r7
 800d2e6:	f7f3 f933 	bl	8000550 <__aeabi_dmul>
 800d2ea:	a361      	add	r3, pc, #388	@ (adr r3, 800d470 <atan+0x2e0>)
 800d2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f0:	f7f2 ff76 	bl	80001e0 <__aeabi_dsub>
 800d2f4:	4632      	mov	r2, r6
 800d2f6:	463b      	mov	r3, r7
 800d2f8:	f7f3 f92a 	bl	8000550 <__aeabi_dmul>
 800d2fc:	a35e      	add	r3, pc, #376	@ (adr r3, 800d478 <atan+0x2e8>)
 800d2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d302:	f7f2 ff6d 	bl	80001e0 <__aeabi_dsub>
 800d306:	4632      	mov	r2, r6
 800d308:	463b      	mov	r3, r7
 800d30a:	f7f3 f921 	bl	8000550 <__aeabi_dmul>
 800d30e:	a35c      	add	r3, pc, #368	@ (adr r3, 800d480 <atan+0x2f0>)
 800d310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d314:	f7f2 ff64 	bl	80001e0 <__aeabi_dsub>
 800d318:	4632      	mov	r2, r6
 800d31a:	463b      	mov	r3, r7
 800d31c:	f7f3 f918 	bl	8000550 <__aeabi_dmul>
 800d320:	a359      	add	r3, pc, #356	@ (adr r3, 800d488 <atan+0x2f8>)
 800d322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d326:	f7f2 ff5b 	bl	80001e0 <__aeabi_dsub>
 800d32a:	4632      	mov	r2, r6
 800d32c:	463b      	mov	r3, r7
 800d32e:	f7f3 f90f 	bl	8000550 <__aeabi_dmul>
 800d332:	4602      	mov	r2, r0
 800d334:	460b      	mov	r3, r1
 800d336:	4640      	mov	r0, r8
 800d338:	4649      	mov	r1, r9
 800d33a:	f7f2 ff53 	bl	80001e4 <__adddf3>
 800d33e:	4622      	mov	r2, r4
 800d340:	462b      	mov	r3, r5
 800d342:	f7f3 f905 	bl	8000550 <__aeabi_dmul>
 800d346:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d34a:	4602      	mov	r2, r0
 800d34c:	460b      	mov	r3, r1
 800d34e:	d148      	bne.n	800d3e2 <atan+0x252>
 800d350:	4620      	mov	r0, r4
 800d352:	4629      	mov	r1, r5
 800d354:	f7f2 ff44 	bl	80001e0 <__aeabi_dsub>
 800d358:	e72f      	b.n	800d1ba <atan+0x2a>
 800d35a:	4b52      	ldr	r3, [pc, #328]	@ (800d4a4 <atan+0x314>)
 800d35c:	2200      	movs	r2, #0
 800d35e:	4620      	mov	r0, r4
 800d360:	4629      	mov	r1, r5
 800d362:	f7f2 ff3d 	bl	80001e0 <__aeabi_dsub>
 800d366:	4b4f      	ldr	r3, [pc, #316]	@ (800d4a4 <atan+0x314>)
 800d368:	4606      	mov	r6, r0
 800d36a:	460f      	mov	r7, r1
 800d36c:	2200      	movs	r2, #0
 800d36e:	4620      	mov	r0, r4
 800d370:	4629      	mov	r1, r5
 800d372:	f7f2 ff37 	bl	80001e4 <__adddf3>
 800d376:	4602      	mov	r2, r0
 800d378:	460b      	mov	r3, r1
 800d37a:	4630      	mov	r0, r6
 800d37c:	4639      	mov	r1, r7
 800d37e:	f7f3 fa11 	bl	80007a4 <__aeabi_ddiv>
 800d382:	f04f 0a01 	mov.w	sl, #1
 800d386:	4604      	mov	r4, r0
 800d388:	460d      	mov	r5, r1
 800d38a:	e765      	b.n	800d258 <atan+0xc8>
 800d38c:	4b47      	ldr	r3, [pc, #284]	@ (800d4ac <atan+0x31c>)
 800d38e:	429e      	cmp	r6, r3
 800d390:	d21c      	bcs.n	800d3cc <atan+0x23c>
 800d392:	4b47      	ldr	r3, [pc, #284]	@ (800d4b0 <atan+0x320>)
 800d394:	2200      	movs	r2, #0
 800d396:	4620      	mov	r0, r4
 800d398:	4629      	mov	r1, r5
 800d39a:	f7f2 ff21 	bl	80001e0 <__aeabi_dsub>
 800d39e:	4b44      	ldr	r3, [pc, #272]	@ (800d4b0 <atan+0x320>)
 800d3a0:	4606      	mov	r6, r0
 800d3a2:	460f      	mov	r7, r1
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	4620      	mov	r0, r4
 800d3a8:	4629      	mov	r1, r5
 800d3aa:	f7f3 f8d1 	bl	8000550 <__aeabi_dmul>
 800d3ae:	4b3d      	ldr	r3, [pc, #244]	@ (800d4a4 <atan+0x314>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	f7f2 ff17 	bl	80001e4 <__adddf3>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	4630      	mov	r0, r6
 800d3bc:	4639      	mov	r1, r7
 800d3be:	f7f3 f9f1 	bl	80007a4 <__aeabi_ddiv>
 800d3c2:	f04f 0a02 	mov.w	sl, #2
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	460d      	mov	r5, r1
 800d3ca:	e745      	b.n	800d258 <atan+0xc8>
 800d3cc:	4622      	mov	r2, r4
 800d3ce:	462b      	mov	r3, r5
 800d3d0:	4938      	ldr	r1, [pc, #224]	@ (800d4b4 <atan+0x324>)
 800d3d2:	2000      	movs	r0, #0
 800d3d4:	f7f3 f9e6 	bl	80007a4 <__aeabi_ddiv>
 800d3d8:	f04f 0a03 	mov.w	sl, #3
 800d3dc:	4604      	mov	r4, r0
 800d3de:	460d      	mov	r5, r1
 800d3e0:	e73a      	b.n	800d258 <atan+0xc8>
 800d3e2:	4b35      	ldr	r3, [pc, #212]	@ (800d4b8 <atan+0x328>)
 800d3e4:	4e35      	ldr	r6, [pc, #212]	@ (800d4bc <atan+0x32c>)
 800d3e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ee:	f7f2 fef7 	bl	80001e0 <__aeabi_dsub>
 800d3f2:	4622      	mov	r2, r4
 800d3f4:	462b      	mov	r3, r5
 800d3f6:	f7f2 fef3 	bl	80001e0 <__aeabi_dsub>
 800d3fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d3fe:	4602      	mov	r2, r0
 800d400:	460b      	mov	r3, r1
 800d402:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d406:	f7f2 feeb 	bl	80001e0 <__aeabi_dsub>
 800d40a:	f1bb 0f00 	cmp.w	fp, #0
 800d40e:	4604      	mov	r4, r0
 800d410:	460d      	mov	r5, r1
 800d412:	f6bf aedc 	bge.w	800d1ce <atan+0x3e>
 800d416:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d41a:	461d      	mov	r5, r3
 800d41c:	e6d7      	b.n	800d1ce <atan+0x3e>
 800d41e:	a51c      	add	r5, pc, #112	@ (adr r5, 800d490 <atan+0x300>)
 800d420:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d424:	e6d3      	b.n	800d1ce <atan+0x3e>
 800d426:	bf00      	nop
 800d428:	54442d18 	.word	0x54442d18
 800d42c:	3ff921fb 	.word	0x3ff921fb
 800d430:	8800759c 	.word	0x8800759c
 800d434:	7e37e43c 	.word	0x7e37e43c
 800d438:	e322da11 	.word	0xe322da11
 800d43c:	3f90ad3a 	.word	0x3f90ad3a
 800d440:	24760deb 	.word	0x24760deb
 800d444:	3fa97b4b 	.word	0x3fa97b4b
 800d448:	a0d03d51 	.word	0xa0d03d51
 800d44c:	3fb10d66 	.word	0x3fb10d66
 800d450:	c54c206e 	.word	0xc54c206e
 800d454:	3fb745cd 	.word	0x3fb745cd
 800d458:	920083ff 	.word	0x920083ff
 800d45c:	3fc24924 	.word	0x3fc24924
 800d460:	5555550d 	.word	0x5555550d
 800d464:	3fd55555 	.word	0x3fd55555
 800d468:	2c6a6c2f 	.word	0x2c6a6c2f
 800d46c:	bfa2b444 	.word	0xbfa2b444
 800d470:	52defd9a 	.word	0x52defd9a
 800d474:	3fadde2d 	.word	0x3fadde2d
 800d478:	af749a6d 	.word	0xaf749a6d
 800d47c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d480:	fe231671 	.word	0xfe231671
 800d484:	3fbc71c6 	.word	0x3fbc71c6
 800d488:	9998ebc4 	.word	0x9998ebc4
 800d48c:	3fc99999 	.word	0x3fc99999
 800d490:	54442d18 	.word	0x54442d18
 800d494:	bff921fb 	.word	0xbff921fb
 800d498:	440fffff 	.word	0x440fffff
 800d49c:	7ff00000 	.word	0x7ff00000
 800d4a0:	3fdbffff 	.word	0x3fdbffff
 800d4a4:	3ff00000 	.word	0x3ff00000
 800d4a8:	3ff2ffff 	.word	0x3ff2ffff
 800d4ac:	40038000 	.word	0x40038000
 800d4b0:	3ff80000 	.word	0x3ff80000
 800d4b4:	bff00000 	.word	0xbff00000
 800d4b8:	0800dd20 	.word	0x0800dd20
 800d4bc:	0800dd40 	.word	0x0800dd40

0800d4c0 <fabs>:
 800d4c0:	ec51 0b10 	vmov	r0, r1, d0
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d4ca:	ec43 2b10 	vmov	d0, r2, r3
 800d4ce:	4770      	bx	lr

0800d4d0 <nan>:
 800d4d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d4d8 <nan+0x8>
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	00000000 	.word	0x00000000
 800d4dc:	7ff80000 	.word	0x7ff80000

0800d4e0 <__ieee754_sqrt>:
 800d4e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e4:	4a68      	ldr	r2, [pc, #416]	@ (800d688 <__ieee754_sqrt+0x1a8>)
 800d4e6:	ec55 4b10 	vmov	r4, r5, d0
 800d4ea:	43aa      	bics	r2, r5
 800d4ec:	462b      	mov	r3, r5
 800d4ee:	4621      	mov	r1, r4
 800d4f0:	d110      	bne.n	800d514 <__ieee754_sqrt+0x34>
 800d4f2:	4622      	mov	r2, r4
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	4629      	mov	r1, r5
 800d4f8:	f7f3 f82a 	bl	8000550 <__aeabi_dmul>
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	460b      	mov	r3, r1
 800d500:	4620      	mov	r0, r4
 800d502:	4629      	mov	r1, r5
 800d504:	f7f2 fe6e 	bl	80001e4 <__adddf3>
 800d508:	4604      	mov	r4, r0
 800d50a:	460d      	mov	r5, r1
 800d50c:	ec45 4b10 	vmov	d0, r4, r5
 800d510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d514:	2d00      	cmp	r5, #0
 800d516:	dc0e      	bgt.n	800d536 <__ieee754_sqrt+0x56>
 800d518:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d51c:	4322      	orrs	r2, r4
 800d51e:	d0f5      	beq.n	800d50c <__ieee754_sqrt+0x2c>
 800d520:	b19d      	cbz	r5, 800d54a <__ieee754_sqrt+0x6a>
 800d522:	4622      	mov	r2, r4
 800d524:	4620      	mov	r0, r4
 800d526:	4629      	mov	r1, r5
 800d528:	f7f2 fe5a 	bl	80001e0 <__aeabi_dsub>
 800d52c:	4602      	mov	r2, r0
 800d52e:	460b      	mov	r3, r1
 800d530:	f7f3 f938 	bl	80007a4 <__aeabi_ddiv>
 800d534:	e7e8      	b.n	800d508 <__ieee754_sqrt+0x28>
 800d536:	152a      	asrs	r2, r5, #20
 800d538:	d115      	bne.n	800d566 <__ieee754_sqrt+0x86>
 800d53a:	2000      	movs	r0, #0
 800d53c:	e009      	b.n	800d552 <__ieee754_sqrt+0x72>
 800d53e:	0acb      	lsrs	r3, r1, #11
 800d540:	3a15      	subs	r2, #21
 800d542:	0549      	lsls	r1, r1, #21
 800d544:	2b00      	cmp	r3, #0
 800d546:	d0fa      	beq.n	800d53e <__ieee754_sqrt+0x5e>
 800d548:	e7f7      	b.n	800d53a <__ieee754_sqrt+0x5a>
 800d54a:	462a      	mov	r2, r5
 800d54c:	e7fa      	b.n	800d544 <__ieee754_sqrt+0x64>
 800d54e:	005b      	lsls	r3, r3, #1
 800d550:	3001      	adds	r0, #1
 800d552:	02dc      	lsls	r4, r3, #11
 800d554:	d5fb      	bpl.n	800d54e <__ieee754_sqrt+0x6e>
 800d556:	1e44      	subs	r4, r0, #1
 800d558:	1b12      	subs	r2, r2, r4
 800d55a:	f1c0 0420 	rsb	r4, r0, #32
 800d55e:	fa21 f404 	lsr.w	r4, r1, r4
 800d562:	4323      	orrs	r3, r4
 800d564:	4081      	lsls	r1, r0
 800d566:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d56a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d56e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d572:	07d2      	lsls	r2, r2, #31
 800d574:	bf5c      	itt	pl
 800d576:	005b      	lslpl	r3, r3, #1
 800d578:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d57c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d580:	bf58      	it	pl
 800d582:	0049      	lslpl	r1, r1, #1
 800d584:	2600      	movs	r6, #0
 800d586:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d58a:	106d      	asrs	r5, r5, #1
 800d58c:	0049      	lsls	r1, r1, #1
 800d58e:	2016      	movs	r0, #22
 800d590:	4632      	mov	r2, r6
 800d592:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d596:	1917      	adds	r7, r2, r4
 800d598:	429f      	cmp	r7, r3
 800d59a:	bfde      	ittt	le
 800d59c:	193a      	addle	r2, r7, r4
 800d59e:	1bdb      	suble	r3, r3, r7
 800d5a0:	1936      	addle	r6, r6, r4
 800d5a2:	0fcf      	lsrs	r7, r1, #31
 800d5a4:	3801      	subs	r0, #1
 800d5a6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d5aa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d5ae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d5b2:	d1f0      	bne.n	800d596 <__ieee754_sqrt+0xb6>
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	2720      	movs	r7, #32
 800d5b8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	eb00 0e0c 	add.w	lr, r0, ip
 800d5c2:	db02      	blt.n	800d5ca <__ieee754_sqrt+0xea>
 800d5c4:	d113      	bne.n	800d5ee <__ieee754_sqrt+0x10e>
 800d5c6:	458e      	cmp	lr, r1
 800d5c8:	d811      	bhi.n	800d5ee <__ieee754_sqrt+0x10e>
 800d5ca:	f1be 0f00 	cmp.w	lr, #0
 800d5ce:	eb0e 000c 	add.w	r0, lr, ip
 800d5d2:	da42      	bge.n	800d65a <__ieee754_sqrt+0x17a>
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	db40      	blt.n	800d65a <__ieee754_sqrt+0x17a>
 800d5d8:	f102 0801 	add.w	r8, r2, #1
 800d5dc:	1a9b      	subs	r3, r3, r2
 800d5de:	458e      	cmp	lr, r1
 800d5e0:	bf88      	it	hi
 800d5e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d5e6:	eba1 010e 	sub.w	r1, r1, lr
 800d5ea:	4464      	add	r4, ip
 800d5ec:	4642      	mov	r2, r8
 800d5ee:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d5f2:	3f01      	subs	r7, #1
 800d5f4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d5f8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d5fc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d600:	d1dc      	bne.n	800d5bc <__ieee754_sqrt+0xdc>
 800d602:	4319      	orrs	r1, r3
 800d604:	d01b      	beq.n	800d63e <__ieee754_sqrt+0x15e>
 800d606:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d68c <__ieee754_sqrt+0x1ac>
 800d60a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d690 <__ieee754_sqrt+0x1b0>
 800d60e:	e9da 0100 	ldrd	r0, r1, [sl]
 800d612:	e9db 2300 	ldrd	r2, r3, [fp]
 800d616:	f7f2 fde3 	bl	80001e0 <__aeabi_dsub>
 800d61a:	e9da 8900 	ldrd	r8, r9, [sl]
 800d61e:	4602      	mov	r2, r0
 800d620:	460b      	mov	r3, r1
 800d622:	4640      	mov	r0, r8
 800d624:	4649      	mov	r1, r9
 800d626:	f7f3 fa0f 	bl	8000a48 <__aeabi_dcmple>
 800d62a:	b140      	cbz	r0, 800d63e <__ieee754_sqrt+0x15e>
 800d62c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d630:	e9da 0100 	ldrd	r0, r1, [sl]
 800d634:	e9db 2300 	ldrd	r2, r3, [fp]
 800d638:	d111      	bne.n	800d65e <__ieee754_sqrt+0x17e>
 800d63a:	3601      	adds	r6, #1
 800d63c:	463c      	mov	r4, r7
 800d63e:	1072      	asrs	r2, r6, #1
 800d640:	0863      	lsrs	r3, r4, #1
 800d642:	07f1      	lsls	r1, r6, #31
 800d644:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d648:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d64c:	bf48      	it	mi
 800d64e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d652:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d656:	4618      	mov	r0, r3
 800d658:	e756      	b.n	800d508 <__ieee754_sqrt+0x28>
 800d65a:	4690      	mov	r8, r2
 800d65c:	e7be      	b.n	800d5dc <__ieee754_sqrt+0xfc>
 800d65e:	f7f2 fdc1 	bl	80001e4 <__adddf3>
 800d662:	e9da 8900 	ldrd	r8, r9, [sl]
 800d666:	4602      	mov	r2, r0
 800d668:	460b      	mov	r3, r1
 800d66a:	4640      	mov	r0, r8
 800d66c:	4649      	mov	r1, r9
 800d66e:	f7f3 f9e1 	bl	8000a34 <__aeabi_dcmplt>
 800d672:	b120      	cbz	r0, 800d67e <__ieee754_sqrt+0x19e>
 800d674:	1ca0      	adds	r0, r4, #2
 800d676:	bf08      	it	eq
 800d678:	3601      	addeq	r6, #1
 800d67a:	3402      	adds	r4, #2
 800d67c:	e7df      	b.n	800d63e <__ieee754_sqrt+0x15e>
 800d67e:	1c63      	adds	r3, r4, #1
 800d680:	f023 0401 	bic.w	r4, r3, #1
 800d684:	e7db      	b.n	800d63e <__ieee754_sqrt+0x15e>
 800d686:	bf00      	nop
 800d688:	7ff00000 	.word	0x7ff00000
 800d68c:	20000128 	.word	0x20000128
 800d690:	20000120 	.word	0x20000120
 800d694:	00000000 	.word	0x00000000

0800d698 <__ieee754_atan2>:
 800d698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d69c:	ec57 6b11 	vmov	r6, r7, d1
 800d6a0:	4273      	negs	r3, r6
 800d6a2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800d820 <__ieee754_atan2+0x188>
 800d6a6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800d6aa:	4333      	orrs	r3, r6
 800d6ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d6b0:	4543      	cmp	r3, r8
 800d6b2:	ec51 0b10 	vmov	r0, r1, d0
 800d6b6:	4635      	mov	r5, r6
 800d6b8:	d809      	bhi.n	800d6ce <__ieee754_atan2+0x36>
 800d6ba:	4244      	negs	r4, r0
 800d6bc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d6c0:	4304      	orrs	r4, r0
 800d6c2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d6c6:	4544      	cmp	r4, r8
 800d6c8:	468e      	mov	lr, r1
 800d6ca:	4681      	mov	r9, r0
 800d6cc:	d907      	bls.n	800d6de <__ieee754_atan2+0x46>
 800d6ce:	4632      	mov	r2, r6
 800d6d0:	463b      	mov	r3, r7
 800d6d2:	f7f2 fd87 	bl	80001e4 <__adddf3>
 800d6d6:	ec41 0b10 	vmov	d0, r0, r1
 800d6da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6de:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800d6e2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800d6e6:	4334      	orrs	r4, r6
 800d6e8:	d103      	bne.n	800d6f2 <__ieee754_atan2+0x5a>
 800d6ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6ee:	f7ff bd4f 	b.w	800d190 <atan>
 800d6f2:	17bc      	asrs	r4, r7, #30
 800d6f4:	f004 0402 	and.w	r4, r4, #2
 800d6f8:	ea53 0909 	orrs.w	r9, r3, r9
 800d6fc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d700:	d107      	bne.n	800d712 <__ieee754_atan2+0x7a>
 800d702:	2c02      	cmp	r4, #2
 800d704:	d05f      	beq.n	800d7c6 <__ieee754_atan2+0x12e>
 800d706:	2c03      	cmp	r4, #3
 800d708:	d1e5      	bne.n	800d6d6 <__ieee754_atan2+0x3e>
 800d70a:	a141      	add	r1, pc, #260	@ (adr r1, 800d810 <__ieee754_atan2+0x178>)
 800d70c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d710:	e7e1      	b.n	800d6d6 <__ieee754_atan2+0x3e>
 800d712:	4315      	orrs	r5, r2
 800d714:	d106      	bne.n	800d724 <__ieee754_atan2+0x8c>
 800d716:	f1be 0f00 	cmp.w	lr, #0
 800d71a:	da5f      	bge.n	800d7dc <__ieee754_atan2+0x144>
 800d71c:	a13e      	add	r1, pc, #248	@ (adr r1, 800d818 <__ieee754_atan2+0x180>)
 800d71e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d722:	e7d8      	b.n	800d6d6 <__ieee754_atan2+0x3e>
 800d724:	4542      	cmp	r2, r8
 800d726:	d10f      	bne.n	800d748 <__ieee754_atan2+0xb0>
 800d728:	4293      	cmp	r3, r2
 800d72a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d72e:	d107      	bne.n	800d740 <__ieee754_atan2+0xa8>
 800d730:	2c02      	cmp	r4, #2
 800d732:	d84c      	bhi.n	800d7ce <__ieee754_atan2+0x136>
 800d734:	4b34      	ldr	r3, [pc, #208]	@ (800d808 <__ieee754_atan2+0x170>)
 800d736:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d73a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d73e:	e7ca      	b.n	800d6d6 <__ieee754_atan2+0x3e>
 800d740:	2c02      	cmp	r4, #2
 800d742:	d848      	bhi.n	800d7d6 <__ieee754_atan2+0x13e>
 800d744:	4b31      	ldr	r3, [pc, #196]	@ (800d80c <__ieee754_atan2+0x174>)
 800d746:	e7f6      	b.n	800d736 <__ieee754_atan2+0x9e>
 800d748:	4543      	cmp	r3, r8
 800d74a:	d0e4      	beq.n	800d716 <__ieee754_atan2+0x7e>
 800d74c:	1a9b      	subs	r3, r3, r2
 800d74e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800d752:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d756:	da1e      	bge.n	800d796 <__ieee754_atan2+0xfe>
 800d758:	2f00      	cmp	r7, #0
 800d75a:	da01      	bge.n	800d760 <__ieee754_atan2+0xc8>
 800d75c:	323c      	adds	r2, #60	@ 0x3c
 800d75e:	db1e      	blt.n	800d79e <__ieee754_atan2+0x106>
 800d760:	4632      	mov	r2, r6
 800d762:	463b      	mov	r3, r7
 800d764:	f7f3 f81e 	bl	80007a4 <__aeabi_ddiv>
 800d768:	ec41 0b10 	vmov	d0, r0, r1
 800d76c:	f7ff fea8 	bl	800d4c0 <fabs>
 800d770:	f7ff fd0e 	bl	800d190 <atan>
 800d774:	ec51 0b10 	vmov	r0, r1, d0
 800d778:	2c01      	cmp	r4, #1
 800d77a:	d013      	beq.n	800d7a4 <__ieee754_atan2+0x10c>
 800d77c:	2c02      	cmp	r4, #2
 800d77e:	d015      	beq.n	800d7ac <__ieee754_atan2+0x114>
 800d780:	2c00      	cmp	r4, #0
 800d782:	d0a8      	beq.n	800d6d6 <__ieee754_atan2+0x3e>
 800d784:	a318      	add	r3, pc, #96	@ (adr r3, 800d7e8 <__ieee754_atan2+0x150>)
 800d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78a:	f7f2 fd29 	bl	80001e0 <__aeabi_dsub>
 800d78e:	a318      	add	r3, pc, #96	@ (adr r3, 800d7f0 <__ieee754_atan2+0x158>)
 800d790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d794:	e014      	b.n	800d7c0 <__ieee754_atan2+0x128>
 800d796:	a118      	add	r1, pc, #96	@ (adr r1, 800d7f8 <__ieee754_atan2+0x160>)
 800d798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d79c:	e7ec      	b.n	800d778 <__ieee754_atan2+0xe0>
 800d79e:	2000      	movs	r0, #0
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	e7e9      	b.n	800d778 <__ieee754_atan2+0xe0>
 800d7a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	e794      	b.n	800d6d6 <__ieee754_atan2+0x3e>
 800d7ac:	a30e      	add	r3, pc, #56	@ (adr r3, 800d7e8 <__ieee754_atan2+0x150>)
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	f7f2 fd15 	bl	80001e0 <__aeabi_dsub>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	a10d      	add	r1, pc, #52	@ (adr r1, 800d7f0 <__ieee754_atan2+0x158>)
 800d7bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7c0:	f7f2 fd0e 	bl	80001e0 <__aeabi_dsub>
 800d7c4:	e787      	b.n	800d6d6 <__ieee754_atan2+0x3e>
 800d7c6:	a10a      	add	r1, pc, #40	@ (adr r1, 800d7f0 <__ieee754_atan2+0x158>)
 800d7c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7cc:	e783      	b.n	800d6d6 <__ieee754_atan2+0x3e>
 800d7ce:	a10c      	add	r1, pc, #48	@ (adr r1, 800d800 <__ieee754_atan2+0x168>)
 800d7d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7d4:	e77f      	b.n	800d6d6 <__ieee754_atan2+0x3e>
 800d7d6:	2000      	movs	r0, #0
 800d7d8:	2100      	movs	r1, #0
 800d7da:	e77c      	b.n	800d6d6 <__ieee754_atan2+0x3e>
 800d7dc:	a106      	add	r1, pc, #24	@ (adr r1, 800d7f8 <__ieee754_atan2+0x160>)
 800d7de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7e2:	e778      	b.n	800d6d6 <__ieee754_atan2+0x3e>
 800d7e4:	f3af 8000 	nop.w
 800d7e8:	33145c07 	.word	0x33145c07
 800d7ec:	3ca1a626 	.word	0x3ca1a626
 800d7f0:	54442d18 	.word	0x54442d18
 800d7f4:	400921fb 	.word	0x400921fb
 800d7f8:	54442d18 	.word	0x54442d18
 800d7fc:	3ff921fb 	.word	0x3ff921fb
 800d800:	54442d18 	.word	0x54442d18
 800d804:	3fe921fb 	.word	0x3fe921fb
 800d808:	0800dd78 	.word	0x0800dd78
 800d80c:	0800dd60 	.word	0x0800dd60
 800d810:	54442d18 	.word	0x54442d18
 800d814:	c00921fb 	.word	0xc00921fb
 800d818:	54442d18 	.word	0x54442d18
 800d81c:	bff921fb 	.word	0xbff921fb
 800d820:	7ff00000 	.word	0x7ff00000
 800d824:	00000000 	.word	0x00000000

0800d828 <__ieee754_log>:
 800d828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82c:	ec51 0b10 	vmov	r0, r1, d0
 800d830:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800d834:	b087      	sub	sp, #28
 800d836:	460d      	mov	r5, r1
 800d838:	da26      	bge.n	800d888 <__ieee754_log+0x60>
 800d83a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d83e:	4303      	orrs	r3, r0
 800d840:	4602      	mov	r2, r0
 800d842:	d10a      	bne.n	800d85a <__ieee754_log+0x32>
 800d844:	49ce      	ldr	r1, [pc, #824]	@ (800db80 <__ieee754_log+0x358>)
 800d846:	2200      	movs	r2, #0
 800d848:	2300      	movs	r3, #0
 800d84a:	2000      	movs	r0, #0
 800d84c:	f7f2 ffaa 	bl	80007a4 <__aeabi_ddiv>
 800d850:	ec41 0b10 	vmov	d0, r0, r1
 800d854:	b007      	add	sp, #28
 800d856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d85a:	2900      	cmp	r1, #0
 800d85c:	da05      	bge.n	800d86a <__ieee754_log+0x42>
 800d85e:	460b      	mov	r3, r1
 800d860:	f7f2 fcbe 	bl	80001e0 <__aeabi_dsub>
 800d864:	2200      	movs	r2, #0
 800d866:	2300      	movs	r3, #0
 800d868:	e7f0      	b.n	800d84c <__ieee754_log+0x24>
 800d86a:	4bc6      	ldr	r3, [pc, #792]	@ (800db84 <__ieee754_log+0x35c>)
 800d86c:	2200      	movs	r2, #0
 800d86e:	f7f2 fe6f 	bl	8000550 <__aeabi_dmul>
 800d872:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800d876:	460d      	mov	r5, r1
 800d878:	4ac3      	ldr	r2, [pc, #780]	@ (800db88 <__ieee754_log+0x360>)
 800d87a:	4295      	cmp	r5, r2
 800d87c:	dd06      	ble.n	800d88c <__ieee754_log+0x64>
 800d87e:	4602      	mov	r2, r0
 800d880:	460b      	mov	r3, r1
 800d882:	f7f2 fcaf 	bl	80001e4 <__adddf3>
 800d886:	e7e3      	b.n	800d850 <__ieee754_log+0x28>
 800d888:	2300      	movs	r3, #0
 800d88a:	e7f5      	b.n	800d878 <__ieee754_log+0x50>
 800d88c:	152c      	asrs	r4, r5, #20
 800d88e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800d892:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d896:	441c      	add	r4, r3
 800d898:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800d89c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800d8a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d8a4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800d8a8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800d8ac:	ea42 0105 	orr.w	r1, r2, r5
 800d8b0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	4bb5      	ldr	r3, [pc, #724]	@ (800db8c <__ieee754_log+0x364>)
 800d8b8:	f7f2 fc92 	bl	80001e0 <__aeabi_dsub>
 800d8bc:	1cab      	adds	r3, r5, #2
 800d8be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8c2:	2b02      	cmp	r3, #2
 800d8c4:	4682      	mov	sl, r0
 800d8c6:	468b      	mov	fp, r1
 800d8c8:	f04f 0200 	mov.w	r2, #0
 800d8cc:	dc53      	bgt.n	800d976 <__ieee754_log+0x14e>
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	f7f3 f8a6 	bl	8000a20 <__aeabi_dcmpeq>
 800d8d4:	b1d0      	cbz	r0, 800d90c <__ieee754_log+0xe4>
 800d8d6:	2c00      	cmp	r4, #0
 800d8d8:	f000 8120 	beq.w	800db1c <__ieee754_log+0x2f4>
 800d8dc:	4620      	mov	r0, r4
 800d8de:	f7f2 fdcd 	bl	800047c <__aeabi_i2d>
 800d8e2:	a391      	add	r3, pc, #580	@ (adr r3, 800db28 <__ieee754_log+0x300>)
 800d8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e8:	4606      	mov	r6, r0
 800d8ea:	460f      	mov	r7, r1
 800d8ec:	f7f2 fe30 	bl	8000550 <__aeabi_dmul>
 800d8f0:	a38f      	add	r3, pc, #572	@ (adr r3, 800db30 <__ieee754_log+0x308>)
 800d8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f6:	4604      	mov	r4, r0
 800d8f8:	460d      	mov	r5, r1
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	4639      	mov	r1, r7
 800d8fe:	f7f2 fe27 	bl	8000550 <__aeabi_dmul>
 800d902:	4602      	mov	r2, r0
 800d904:	460b      	mov	r3, r1
 800d906:	4620      	mov	r0, r4
 800d908:	4629      	mov	r1, r5
 800d90a:	e7ba      	b.n	800d882 <__ieee754_log+0x5a>
 800d90c:	a38a      	add	r3, pc, #552	@ (adr r3, 800db38 <__ieee754_log+0x310>)
 800d90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d912:	4650      	mov	r0, sl
 800d914:	4659      	mov	r1, fp
 800d916:	f7f2 fe1b 	bl	8000550 <__aeabi_dmul>
 800d91a:	4602      	mov	r2, r0
 800d91c:	460b      	mov	r3, r1
 800d91e:	2000      	movs	r0, #0
 800d920:	499b      	ldr	r1, [pc, #620]	@ (800db90 <__ieee754_log+0x368>)
 800d922:	f7f2 fc5d 	bl	80001e0 <__aeabi_dsub>
 800d926:	4652      	mov	r2, sl
 800d928:	4606      	mov	r6, r0
 800d92a:	460f      	mov	r7, r1
 800d92c:	465b      	mov	r3, fp
 800d92e:	4650      	mov	r0, sl
 800d930:	4659      	mov	r1, fp
 800d932:	f7f2 fe0d 	bl	8000550 <__aeabi_dmul>
 800d936:	4602      	mov	r2, r0
 800d938:	460b      	mov	r3, r1
 800d93a:	4630      	mov	r0, r6
 800d93c:	4639      	mov	r1, r7
 800d93e:	f7f2 fe07 	bl	8000550 <__aeabi_dmul>
 800d942:	4606      	mov	r6, r0
 800d944:	460f      	mov	r7, r1
 800d946:	b914      	cbnz	r4, 800d94e <__ieee754_log+0x126>
 800d948:	4632      	mov	r2, r6
 800d94a:	463b      	mov	r3, r7
 800d94c:	e0a0      	b.n	800da90 <__ieee754_log+0x268>
 800d94e:	4620      	mov	r0, r4
 800d950:	f7f2 fd94 	bl	800047c <__aeabi_i2d>
 800d954:	a374      	add	r3, pc, #464	@ (adr r3, 800db28 <__ieee754_log+0x300>)
 800d956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95a:	4680      	mov	r8, r0
 800d95c:	4689      	mov	r9, r1
 800d95e:	f7f2 fdf7 	bl	8000550 <__aeabi_dmul>
 800d962:	a373      	add	r3, pc, #460	@ (adr r3, 800db30 <__ieee754_log+0x308>)
 800d964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d968:	4604      	mov	r4, r0
 800d96a:	460d      	mov	r5, r1
 800d96c:	4640      	mov	r0, r8
 800d96e:	4649      	mov	r1, r9
 800d970:	f7f2 fdee 	bl	8000550 <__aeabi_dmul>
 800d974:	e0a5      	b.n	800dac2 <__ieee754_log+0x29a>
 800d976:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d97a:	f7f2 fc33 	bl	80001e4 <__adddf3>
 800d97e:	4602      	mov	r2, r0
 800d980:	460b      	mov	r3, r1
 800d982:	4650      	mov	r0, sl
 800d984:	4659      	mov	r1, fp
 800d986:	f7f2 ff0d 	bl	80007a4 <__aeabi_ddiv>
 800d98a:	e9cd 0100 	strd	r0, r1, [sp]
 800d98e:	4620      	mov	r0, r4
 800d990:	f7f2 fd74 	bl	800047c <__aeabi_i2d>
 800d994:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d99c:	4610      	mov	r0, r2
 800d99e:	4619      	mov	r1, r3
 800d9a0:	f7f2 fdd6 	bl	8000550 <__aeabi_dmul>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d9ac:	f7f2 fdd0 	bl	8000550 <__aeabi_dmul>
 800d9b0:	a363      	add	r3, pc, #396	@ (adr r3, 800db40 <__ieee754_log+0x318>)
 800d9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b6:	4680      	mov	r8, r0
 800d9b8:	4689      	mov	r9, r1
 800d9ba:	f7f2 fdc9 	bl	8000550 <__aeabi_dmul>
 800d9be:	a362      	add	r3, pc, #392	@ (adr r3, 800db48 <__ieee754_log+0x320>)
 800d9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c4:	f7f2 fc0e 	bl	80001e4 <__adddf3>
 800d9c8:	4642      	mov	r2, r8
 800d9ca:	464b      	mov	r3, r9
 800d9cc:	f7f2 fdc0 	bl	8000550 <__aeabi_dmul>
 800d9d0:	a35f      	add	r3, pc, #380	@ (adr r3, 800db50 <__ieee754_log+0x328>)
 800d9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d6:	f7f2 fc05 	bl	80001e4 <__adddf3>
 800d9da:	4642      	mov	r2, r8
 800d9dc:	464b      	mov	r3, r9
 800d9de:	f7f2 fdb7 	bl	8000550 <__aeabi_dmul>
 800d9e2:	a35d      	add	r3, pc, #372	@ (adr r3, 800db58 <__ieee754_log+0x330>)
 800d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e8:	f7f2 fbfc 	bl	80001e4 <__adddf3>
 800d9ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9f0:	f7f2 fdae 	bl	8000550 <__aeabi_dmul>
 800d9f4:	a35a      	add	r3, pc, #360	@ (adr r3, 800db60 <__ieee754_log+0x338>)
 800d9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d9fe:	4640      	mov	r0, r8
 800da00:	4649      	mov	r1, r9
 800da02:	f7f2 fda5 	bl	8000550 <__aeabi_dmul>
 800da06:	a358      	add	r3, pc, #352	@ (adr r3, 800db68 <__ieee754_log+0x340>)
 800da08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0c:	f7f2 fbea 	bl	80001e4 <__adddf3>
 800da10:	4642      	mov	r2, r8
 800da12:	464b      	mov	r3, r9
 800da14:	f7f2 fd9c 	bl	8000550 <__aeabi_dmul>
 800da18:	a355      	add	r3, pc, #340	@ (adr r3, 800db70 <__ieee754_log+0x348>)
 800da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1e:	f7f2 fbe1 	bl	80001e4 <__adddf3>
 800da22:	4642      	mov	r2, r8
 800da24:	464b      	mov	r3, r9
 800da26:	f7f2 fd93 	bl	8000550 <__aeabi_dmul>
 800da2a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800da2e:	4602      	mov	r2, r0
 800da30:	460b      	mov	r3, r1
 800da32:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800da36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da3a:	f7f2 fbd3 	bl	80001e4 <__adddf3>
 800da3e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800da42:	3551      	adds	r5, #81	@ 0x51
 800da44:	4335      	orrs	r5, r6
 800da46:	2d00      	cmp	r5, #0
 800da48:	4680      	mov	r8, r0
 800da4a:	4689      	mov	r9, r1
 800da4c:	dd48      	ble.n	800dae0 <__ieee754_log+0x2b8>
 800da4e:	4b50      	ldr	r3, [pc, #320]	@ (800db90 <__ieee754_log+0x368>)
 800da50:	2200      	movs	r2, #0
 800da52:	4650      	mov	r0, sl
 800da54:	4659      	mov	r1, fp
 800da56:	f7f2 fd7b 	bl	8000550 <__aeabi_dmul>
 800da5a:	4652      	mov	r2, sl
 800da5c:	465b      	mov	r3, fp
 800da5e:	f7f2 fd77 	bl	8000550 <__aeabi_dmul>
 800da62:	4602      	mov	r2, r0
 800da64:	460b      	mov	r3, r1
 800da66:	4606      	mov	r6, r0
 800da68:	460f      	mov	r7, r1
 800da6a:	4640      	mov	r0, r8
 800da6c:	4649      	mov	r1, r9
 800da6e:	f7f2 fbb9 	bl	80001e4 <__adddf3>
 800da72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da76:	f7f2 fd6b 	bl	8000550 <__aeabi_dmul>
 800da7a:	4680      	mov	r8, r0
 800da7c:	4689      	mov	r9, r1
 800da7e:	b964      	cbnz	r4, 800da9a <__ieee754_log+0x272>
 800da80:	4602      	mov	r2, r0
 800da82:	460b      	mov	r3, r1
 800da84:	4630      	mov	r0, r6
 800da86:	4639      	mov	r1, r7
 800da88:	f7f2 fbaa 	bl	80001e0 <__aeabi_dsub>
 800da8c:	4602      	mov	r2, r0
 800da8e:	460b      	mov	r3, r1
 800da90:	4650      	mov	r0, sl
 800da92:	4659      	mov	r1, fp
 800da94:	f7f2 fba4 	bl	80001e0 <__aeabi_dsub>
 800da98:	e6da      	b.n	800d850 <__ieee754_log+0x28>
 800da9a:	a323      	add	r3, pc, #140	@ (adr r3, 800db28 <__ieee754_log+0x300>)
 800da9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daa4:	f7f2 fd54 	bl	8000550 <__aeabi_dmul>
 800daa8:	a321      	add	r3, pc, #132	@ (adr r3, 800db30 <__ieee754_log+0x308>)
 800daaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daae:	4604      	mov	r4, r0
 800dab0:	460d      	mov	r5, r1
 800dab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dab6:	f7f2 fd4b 	bl	8000550 <__aeabi_dmul>
 800daba:	4642      	mov	r2, r8
 800dabc:	464b      	mov	r3, r9
 800dabe:	f7f2 fb91 	bl	80001e4 <__adddf3>
 800dac2:	4602      	mov	r2, r0
 800dac4:	460b      	mov	r3, r1
 800dac6:	4630      	mov	r0, r6
 800dac8:	4639      	mov	r1, r7
 800daca:	f7f2 fb89 	bl	80001e0 <__aeabi_dsub>
 800dace:	4652      	mov	r2, sl
 800dad0:	465b      	mov	r3, fp
 800dad2:	f7f2 fb85 	bl	80001e0 <__aeabi_dsub>
 800dad6:	4602      	mov	r2, r0
 800dad8:	460b      	mov	r3, r1
 800dada:	4620      	mov	r0, r4
 800dadc:	4629      	mov	r1, r5
 800dade:	e7d9      	b.n	800da94 <__ieee754_log+0x26c>
 800dae0:	4602      	mov	r2, r0
 800dae2:	460b      	mov	r3, r1
 800dae4:	4650      	mov	r0, sl
 800dae6:	4659      	mov	r1, fp
 800dae8:	f7f2 fb7a 	bl	80001e0 <__aeabi_dsub>
 800daec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800daf0:	f7f2 fd2e 	bl	8000550 <__aeabi_dmul>
 800daf4:	4606      	mov	r6, r0
 800daf6:	460f      	mov	r7, r1
 800daf8:	2c00      	cmp	r4, #0
 800dafa:	f43f af25 	beq.w	800d948 <__ieee754_log+0x120>
 800dafe:	a30a      	add	r3, pc, #40	@ (adr r3, 800db28 <__ieee754_log+0x300>)
 800db00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db08:	f7f2 fd22 	bl	8000550 <__aeabi_dmul>
 800db0c:	a308      	add	r3, pc, #32	@ (adr r3, 800db30 <__ieee754_log+0x308>)
 800db0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db12:	4604      	mov	r4, r0
 800db14:	460d      	mov	r5, r1
 800db16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db1a:	e729      	b.n	800d970 <__ieee754_log+0x148>
 800db1c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800db78 <__ieee754_log+0x350>
 800db20:	e698      	b.n	800d854 <__ieee754_log+0x2c>
 800db22:	bf00      	nop
 800db24:	f3af 8000 	nop.w
 800db28:	fee00000 	.word	0xfee00000
 800db2c:	3fe62e42 	.word	0x3fe62e42
 800db30:	35793c76 	.word	0x35793c76
 800db34:	3dea39ef 	.word	0x3dea39ef
 800db38:	55555555 	.word	0x55555555
 800db3c:	3fd55555 	.word	0x3fd55555
 800db40:	df3e5244 	.word	0xdf3e5244
 800db44:	3fc2f112 	.word	0x3fc2f112
 800db48:	96cb03de 	.word	0x96cb03de
 800db4c:	3fc74664 	.word	0x3fc74664
 800db50:	94229359 	.word	0x94229359
 800db54:	3fd24924 	.word	0x3fd24924
 800db58:	55555593 	.word	0x55555593
 800db5c:	3fe55555 	.word	0x3fe55555
 800db60:	d078c69f 	.word	0xd078c69f
 800db64:	3fc39a09 	.word	0x3fc39a09
 800db68:	1d8e78af 	.word	0x1d8e78af
 800db6c:	3fcc71c5 	.word	0x3fcc71c5
 800db70:	9997fa04 	.word	0x9997fa04
 800db74:	3fd99999 	.word	0x3fd99999
	...
 800db80:	c3500000 	.word	0xc3500000
 800db84:	43500000 	.word	0x43500000
 800db88:	7fefffff 	.word	0x7fefffff
 800db8c:	3ff00000 	.word	0x3ff00000
 800db90:	3fe00000 	.word	0x3fe00000

0800db94 <_init>:
 800db94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db96:	bf00      	nop
 800db98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db9a:	bc08      	pop	{r3}
 800db9c:	469e      	mov	lr, r3
 800db9e:	4770      	bx	lr

0800dba0 <_fini>:
 800dba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dba2:	bf00      	nop
 800dba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dba6:	bc08      	pop	{r3}
 800dba8:	469e      	mov	lr, r3
 800dbaa:	4770      	bx	lr
