
RFC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800b958  0800b958  0000c958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bae8  0800bae8  0000d108  2**0
                  CONTENTS
  4 .ARM          00000008  0800bae8  0800bae8  0000cae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baf0  0800baf0  0000d108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baf0  0800baf0  0000caf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800baf4  0800baf4  0000caf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0800baf8  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004878  20000108  0800bc00  0000d108  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004980  0800bc00  0000d980  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da91  00000000  00000000  0000d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e7e  00000000  00000000  0002abc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  0002fa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001483  00000000  00000000  000314c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d7c8  00000000  00000000  0003294b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026036  00000000  00000000  00050113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a824f  00000000  00000000  00076149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e398  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007148  00000000  00000000  0011e3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00125524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000108 	.word	0x20000108
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b93c 	.word	0x0800b93c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000010c 	.word	0x2000010c
 80001dc:	0800b93c 	.word	0x0800b93c

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ldivmod>:
 8000b48:	b97b      	cbnz	r3, 8000b6a <__aeabi_ldivmod+0x22>
 8000b4a:	b972      	cbnz	r2, 8000b6a <__aeabi_ldivmod+0x22>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bfbe      	ittt	lt
 8000b50:	2000      	movlt	r0, #0
 8000b52:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b56:	e006      	blt.n	8000b66 <__aeabi_ldivmod+0x1e>
 8000b58:	bf08      	it	eq
 8000b5a:	2800      	cmpeq	r0, #0
 8000b5c:	bf1c      	itt	ne
 8000b5e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b62:	f04f 30ff 	movne.w	r0, #4294967295
 8000b66:	f000 b9b5 	b.w	8000ed4 <__aeabi_idiv0>
 8000b6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b72:	2900      	cmp	r1, #0
 8000b74:	db09      	blt.n	8000b8a <__aeabi_ldivmod+0x42>
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db1a      	blt.n	8000bb0 <__aeabi_ldivmod+0x68>
 8000b7a:	f000 f84d 	bl	8000c18 <__udivmoddi4>
 8000b7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b86:	b004      	add	sp, #16
 8000b88:	4770      	bx	lr
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db1b      	blt.n	8000bcc <__aeabi_ldivmod+0x84>
 8000b94:	f000 f840 	bl	8000c18 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4240      	negs	r0, r0
 8000ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba8:	4252      	negs	r2, r2
 8000baa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bae:	4770      	bx	lr
 8000bb0:	4252      	negs	r2, r2
 8000bb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bb6:	f000 f82f 	bl	8000c18 <__udivmoddi4>
 8000bba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc2:	b004      	add	sp, #16
 8000bc4:	4240      	negs	r0, r0
 8000bc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bca:	4770      	bx	lr
 8000bcc:	4252      	negs	r2, r2
 8000bce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bd2:	f000 f821 	bl	8000c18 <__udivmoddi4>
 8000bd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bde:	b004      	add	sp, #16
 8000be0:	4252      	negs	r2, r2
 8000be2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	460a      	mov	r2, r1
 8000ee2:	71fb      	strb	r3, [r7, #7]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2104      	movs	r1, #4
 8000eec:	480e      	ldr	r0, [pc, #56]	@ (8000f28 <BMP280_write+0x50>)
 8000eee:	f004 fb13 	bl	8005518 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000efc:	1df9      	adds	r1, r7, #7
 8000efe:	2364      	movs	r3, #100	@ 0x64
 8000f00:	2201      	movs	r2, #1
 8000f02:	480a      	ldr	r0, [pc, #40]	@ (8000f2c <BMP280_write+0x54>)
 8000f04:	f006 f859 	bl	8006fba <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000f08:	1db9      	adds	r1, r7, #6
 8000f0a:	2364      	movs	r3, #100	@ 0x64
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4807      	ldr	r0, [pc, #28]	@ (8000f2c <BMP280_write+0x54>)
 8000f10:	f006 f853 	bl	8006fba <HAL_SPI_Transmit>

	BMP280_unselect();
 8000f14:	2201      	movs	r2, #1
 8000f16:	2104      	movs	r1, #4
 8000f18:	4803      	ldr	r0, [pc, #12]	@ (8000f28 <BMP280_write+0x50>)
 8000f1a:	f004 fafd 	bl	8005518 <HAL_GPIO_WritePin>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	20000848 	.word	0x20000848

08000f30 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000f44:	2200      	movs	r2, #0
 8000f46:	2104      	movs	r1, #4
 8000f48:	480f      	ldr	r0, [pc, #60]	@ (8000f88 <BMP280_read+0x58>)
 8000f4a:	f004 fae5 	bl	8005518 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000f4e:	f107 010f 	add.w	r1, r7, #15
 8000f52:	2364      	movs	r3, #100	@ 0x64
 8000f54:	2201      	movs	r2, #1
 8000f56:	480d      	ldr	r0, [pc, #52]	@ (8000f8c <BMP280_read+0x5c>)
 8000f58:	f006 f82f 	bl	8006fba <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8000f5c:	f107 010f 	add.w	r1, r7, #15
 8000f60:	2364      	movs	r3, #100	@ 0x64
 8000f62:	2201      	movs	r2, #1
 8000f64:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <BMP280_read+0x5c>)
 8000f66:	f006 f96c 	bl	8007242 <HAL_SPI_Receive>
	BMP280_unselect();
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	4806      	ldr	r0, [pc, #24]	@ (8000f88 <BMP280_read+0x58>)
 8000f70:	f004 fad2 	bl	8005518 <HAL_GPIO_WritePin>

	BMP280.Temp = 2500;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <BMP280_read+0x60>)
 8000f76:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000f7a:	605a      	str	r2, [r3, #4]

	return Buffer;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	20000848 	.word	0x20000848
 8000f90:	20000124 	.word	0x20000124

08000f94 <BMP280_config>:

void BMP280_config(void){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8000f98:	2157      	movs	r1, #87	@ 0x57
 8000f9a:	20f4      	movs	r0, #244	@ 0xf4
 8000f9c:	f7ff ff9c 	bl	8000ed8 <BMP280_write>
	BMP280_write(config, 0x10);
 8000fa0:	2110      	movs	r1, #16
 8000fa2:	20f5      	movs	r0, #245	@ 0xf5
 8000fa4:	f7ff ff98 	bl	8000ed8 <BMP280_write>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000fb2:	2388      	movs	r3, #136	@ 0x88
 8000fb4:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
	BMP280_select();
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2104      	movs	r1, #4
 8000fce:	4843      	ldr	r0, [pc, #268]	@ (80010dc <BMP280_calibrationData+0x130>)
 8000fd0:	f004 faa2 	bl	8005518 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000fd4:	f107 011f 	add.w	r1, r7, #31
 8000fd8:	2364      	movs	r3, #100	@ 0x64
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4840      	ldr	r0, [pc, #256]	@ (80010e0 <BMP280_calibrationData+0x134>)
 8000fde:	f005 ffec 	bl	8006fba <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000fe2:	1d39      	adds	r1, r7, #4
 8000fe4:	2364      	movs	r3, #100	@ 0x64
 8000fe6:	2218      	movs	r2, #24
 8000fe8:	483d      	ldr	r0, [pc, #244]	@ (80010e0 <BMP280_calibrationData+0x134>)
 8000fea:	f006 f92a 	bl	8007242 <HAL_SPI_Receive>
	BMP280_unselect();
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	483a      	ldr	r0, [pc, #232]	@ (80010dc <BMP280_calibrationData+0x130>)
 8000ff4:	f004 fa90 	bl	8005518 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8000ff8:	797b      	ldrb	r3, [r7, #5]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	793b      	ldrb	r3, [r7, #4]
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b21b      	sxth	r3, r3
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b36      	ldr	r3, [pc, #216]	@ (80010e4 <BMP280_calibrationData+0x138>)
 800100a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21a      	sxth	r2, r3
 800101a:	4b33      	ldr	r3, [pc, #204]	@ (80010e8 <BMP280_calibrationData+0x13c>)
 800101c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 800101e:	7a7b      	ldrb	r3, [r7, #9]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	7a3b      	ldrb	r3, [r7, #8]
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21a      	sxth	r2, r3
 800102c:	4b2f      	ldr	r3, [pc, #188]	@ (80010ec <BMP280_calibrationData+0x140>)
 800102e:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8001030:	7afb      	ldrb	r3, [r7, #11]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	7abb      	ldrb	r3, [r7, #10]
 8001038:	b21b      	sxth	r3, r3
 800103a:	4313      	orrs	r3, r2
 800103c:	b21b      	sxth	r3, r3
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b2b      	ldr	r3, [pc, #172]	@ (80010f0 <BMP280_calibrationData+0x144>)
 8001042:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8001044:	7b7b      	ldrb	r3, [r7, #13]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	b21a      	sxth	r2, r3
 800104a:	7b3b      	ldrb	r3, [r7, #12]
 800104c:	b21b      	sxth	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b21a      	sxth	r2, r3
 8001052:	4b28      	ldr	r3, [pc, #160]	@ (80010f4 <BMP280_calibrationData+0x148>)
 8001054:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	b21a      	sxth	r2, r3
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	b21b      	sxth	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b24      	ldr	r3, [pc, #144]	@ (80010f8 <BMP280_calibrationData+0x14c>)
 8001066:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8001068:	7c7b      	ldrb	r3, [r7, #17]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	7c3b      	ldrb	r3, [r7, #16]
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21a      	sxth	r2, r3
 8001076:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <BMP280_calibrationData+0x150>)
 8001078:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 800107a:	7cfb      	ldrb	r3, [r7, #19]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	7cbb      	ldrb	r3, [r7, #18]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b21a      	sxth	r2, r3
 8001088:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <BMP280_calibrationData+0x154>)
 800108a:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 800108c:	7d7b      	ldrb	r3, [r7, #21]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	b21a      	sxth	r2, r3
 8001092:	7d3b      	ldrb	r3, [r7, #20]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21a      	sxth	r2, r3
 800109a:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <BMP280_calibrationData+0x158>)
 800109c:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 800109e:	7dfb      	ldrb	r3, [r7, #23]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	7dbb      	ldrb	r3, [r7, #22]
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <BMP280_calibrationData+0x15c>)
 80010ae:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 80010b0:	7e7b      	ldrb	r3, [r7, #25]
 80010b2:	021b      	lsls	r3, r3, #8
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	7e3b      	ldrb	r3, [r7, #24]
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21a      	sxth	r2, r3
 80010be:	4b13      	ldr	r3, [pc, #76]	@ (800110c <BMP280_calibrationData+0x160>)
 80010c0:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80010c2:	7efb      	ldrb	r3, [r7, #27]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7ebb      	ldrb	r3, [r7, #26]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <BMP280_calibrationData+0x164>)
 80010d2:	801a      	strh	r2, [r3, #0]
}
 80010d4:	bf00      	nop
 80010d6:	3720      	adds	r7, #32
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40020400 	.word	0x40020400
 80010e0:	20000848 	.word	0x20000848
 80010e4:	20000138 	.word	0x20000138
 80010e8:	2000013c 	.word	0x2000013c
 80010ec:	2000013e 	.word	0x2000013e
 80010f0:	2000013a 	.word	0x2000013a
 80010f4:	20000140 	.word	0x20000140
 80010f8:	20000142 	.word	0x20000142
 80010fc:	20000144 	.word	0x20000144
 8001100:	20000146 	.word	0x20000146
 8001104:	20000148 	.word	0x20000148
 8001108:	2000014a 	.word	0x2000014a
 800110c:	2000014c 	.word	0x2000014c
 8001110:	2000014e 	.word	0x2000014e

08001114 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 800111a:	23f7      	movs	r3, #247	@ 0xf7
 800111c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	2300      	movs	r3, #0
 8001124:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8001126:	2200      	movs	r2, #0
 8001128:	2104      	movs	r1, #4
 800112a:	4817      	ldr	r0, [pc, #92]	@ (8001188 <BMP280_readRawValues+0x74>)
 800112c:	f004 f9f4 	bl	8005518 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8001130:	1df9      	adds	r1, r7, #7
 8001132:	2364      	movs	r3, #100	@ 0x64
 8001134:	2201      	movs	r2, #1
 8001136:	4815      	ldr	r0, [pc, #84]	@ (800118c <BMP280_readRawValues+0x78>)
 8001138:	f005 ff3f 	bl	8006fba <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 800113c:	4639      	mov	r1, r7
 800113e:	2364      	movs	r3, #100	@ 0x64
 8001140:	2206      	movs	r2, #6
 8001142:	4812      	ldr	r0, [pc, #72]	@ (800118c <BMP280_readRawValues+0x78>)
 8001144:	f006 f87d 	bl	8007242 <HAL_SPI_Receive>
	BMP280_unselect();
 8001148:	2201      	movs	r2, #1
 800114a:	2104      	movs	r1, #4
 800114c:	480e      	ldr	r0, [pc, #56]	@ (8001188 <BMP280_readRawValues+0x74>)
 800114e:	f004 f9e3 	bl	8005518 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8001152:	783b      	ldrb	r3, [r7, #0]
 8001154:	031a      	lsls	r2, r3, #12
 8001156:	787b      	ldrb	r3, [r7, #1]
 8001158:	011b      	lsls	r3, r3, #4
 800115a:	4313      	orrs	r3, r2
 800115c:	78ba      	ldrb	r2, [r7, #2]
 800115e:	0912      	lsrs	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	4313      	orrs	r3, r2
 8001164:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <BMP280_readRawValues+0x7c>)
 8001166:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	031a      	lsls	r2, r3, #12
 800116c:	793b      	ldrb	r3, [r7, #4]
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	4313      	orrs	r3, r2
 8001172:	797a      	ldrb	r2, [r7, #5]
 8001174:	0912      	lsrs	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	4313      	orrs	r3, r2
 800117a:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <BMP280_readRawValues+0x80>)
 800117c:	6013      	str	r3, [r2, #0]
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40020400 	.word	0x40020400
 800118c:	20000848 	.word	0x20000848
 8001190:	20000154 	.word	0x20000154
 8001194:	20000150 	.word	0x20000150

08001198 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <BMP280_measureT+0x74>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	10da      	asrs	r2, r3, #3
 80011a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <BMP280_measureT+0x78>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	4a19      	ldr	r2, [pc, #100]	@ (8001214 <BMP280_measureT+0x7c>)
 80011b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	12db      	asrs	r3, r3, #11
 80011ba:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	111b      	asrs	r3, r3, #4
 80011c0:	4a13      	ldr	r2, [pc, #76]	@ (8001210 <BMP280_measureT+0x78>)
 80011c2:	8812      	ldrh	r2, [r2, #0]
 80011c4:	1a9b      	subs	r3, r3, r2
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	1112      	asrs	r2, r2, #4
 80011ca:	4911      	ldr	r1, [pc, #68]	@ (8001210 <BMP280_measureT+0x78>)
 80011cc:	8809      	ldrh	r1, [r1, #0]
 80011ce:	1a52      	subs	r2, r2, r1
 80011d0:	fb02 f303 	mul.w	r3, r2, r3
 80011d4:	131b      	asrs	r3, r3, #12
 80011d6:	4a10      	ldr	r2, [pc, #64]	@ (8001218 <BMP280_measureT+0x80>)
 80011d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	139b      	asrs	r3, r3, #14
 80011e2:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a0c      	ldr	r2, [pc, #48]	@ (800121c <BMP280_measureT+0x84>)
 80011ec:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <BMP280_measureT+0x84>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	3380      	adds	r3, #128	@ 0x80
 80011fa:	121b      	asrs	r3, r3, #8
 80011fc:	60fb      	str	r3, [r7, #12]
	return T;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	20000150 	.word	0x20000150
 8001210:	20000138 	.word	0x20000138
 8001214:	2000013c 	.word	0x2000013c
 8001218:	2000013e 	.word	0x2000013e
 800121c:	20000158 	.word	0x20000158

08001220 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8001220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001224:	b0ca      	sub	sp, #296	@ 0x128
 8001226:	af00      	add	r7, sp, #0
 8001228:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800122c:	4baf      	ldr	r3, [pc, #700]	@ (80014ec <BMP280_measureP+0x2cc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	17da      	asrs	r2, r3, #31
 8001232:	461c      	mov	r4, r3
 8001234:	4615      	mov	r5, r2
 8001236:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800123a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800123e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001242:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001246:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800124a:	fb03 f102 	mul.w	r1, r3, r2
 800124e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001252:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001256:	fb02 f303 	mul.w	r3, r2, r3
 800125a:	18ca      	adds	r2, r1, r3
 800125c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001260:	fba3 8903 	umull	r8, r9, r3, r3
 8001264:	eb02 0309 	add.w	r3, r2, r9
 8001268:	4699      	mov	r9, r3
 800126a:	4ba1      	ldr	r3, [pc, #644]	@ (80014f0 <BMP280_measureP+0x2d0>)
 800126c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001270:	b21b      	sxth	r3, r3
 8001272:	17da      	asrs	r2, r3, #31
 8001274:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001278:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800127c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001280:	4603      	mov	r3, r0
 8001282:	fb03 f209 	mul.w	r2, r3, r9
 8001286:	460b      	mov	r3, r1
 8001288:	fb08 f303 	mul.w	r3, r8, r3
 800128c:	4413      	add	r3, r2
 800128e:	4602      	mov	r2, r0
 8001290:	fba8 1202 	umull	r1, r2, r8, r2
 8001294:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001298:	460a      	mov	r2, r1
 800129a:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 800129e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80012a2:	4413      	add	r3, r2
 80012a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80012a8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80012ac:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80012b0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80012b4:	4b8f      	ldr	r3, [pc, #572]	@ (80014f4 <BMP280_measureP+0x2d4>)
 80012b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	17da      	asrs	r2, r3, #31
 80012be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80012c2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80012c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012ca:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80012ce:	462a      	mov	r2, r5
 80012d0:	fb02 f203 	mul.w	r2, r2, r3
 80012d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012d8:	4621      	mov	r1, r4
 80012da:	fb01 f303 	mul.w	r3, r1, r3
 80012de:	441a      	add	r2, r3
 80012e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012e4:	4621      	mov	r1, r4
 80012e6:	fba3 1301 	umull	r1, r3, r3, r1
 80012ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80012ee:	460b      	mov	r3, r1
 80012f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80012f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80012f8:	18d3      	adds	r3, r2, r3
 80012fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80012fe:	f04f 0000 	mov.w	r0, #0
 8001302:	f04f 0100 	mov.w	r1, #0
 8001306:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800130a:	462b      	mov	r3, r5
 800130c:	0459      	lsls	r1, r3, #17
 800130e:	4623      	mov	r3, r4
 8001310:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001314:	4623      	mov	r3, r4
 8001316:	0458      	lsls	r0, r3, #17
 8001318:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800131c:	1814      	adds	r4, r2, r0
 800131e:	643c      	str	r4, [r7, #64]	@ 0x40
 8001320:	414b      	adcs	r3, r1
 8001322:	647b      	str	r3, [r7, #68]	@ 0x44
 8001324:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001328:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800132c:	4b72      	ldr	r3, [pc, #456]	@ (80014f8 <BMP280_measureP+0x2d8>)
 800132e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001332:	b21b      	sxth	r3, r3
 8001334:	17da      	asrs	r2, r3, #31
 8001336:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800133a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800133e:	f04f 0000 	mov.w	r0, #0
 8001342:	f04f 0100 	mov.w	r1, #0
 8001346:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800134a:	00d9      	lsls	r1, r3, #3
 800134c:	2000      	movs	r0, #0
 800134e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001352:	1814      	adds	r4, r2, r0
 8001354:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001356:	414b      	adcs	r3, r1
 8001358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800135a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800135e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001362:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001366:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800136a:	fb03 f102 	mul.w	r1, r3, r2
 800136e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001372:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001376:	fb02 f303 	mul.w	r3, r2, r3
 800137a:	18ca      	adds	r2, r1, r3
 800137c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001380:	fba3 1303 	umull	r1, r3, r3, r3
 8001384:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001388:	460b      	mov	r3, r1
 800138a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800138e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001392:	18d3      	adds	r3, r2, r3
 8001394:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001398:	4b58      	ldr	r3, [pc, #352]	@ (80014fc <BMP280_measureP+0x2dc>)
 800139a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	17da      	asrs	r2, r3, #31
 80013a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80013a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80013aa:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80013ae:	462b      	mov	r3, r5
 80013b0:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80013b4:	4642      	mov	r2, r8
 80013b6:	fb02 f203 	mul.w	r2, r2, r3
 80013ba:	464b      	mov	r3, r9
 80013bc:	4621      	mov	r1, r4
 80013be:	fb01 f303 	mul.w	r3, r1, r3
 80013c2:	4413      	add	r3, r2
 80013c4:	4622      	mov	r2, r4
 80013c6:	4641      	mov	r1, r8
 80013c8:	fba2 1201 	umull	r1, r2, r2, r1
 80013cc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80013d0:	460a      	mov	r2, r1
 80013d2:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80013d6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80013da:	4413      	add	r3, r2
 80013dc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80013e0:	f04f 0000 	mov.w	r0, #0
 80013e4:	f04f 0100 	mov.w	r1, #0
 80013e8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80013ec:	4623      	mov	r3, r4
 80013ee:	0a18      	lsrs	r0, r3, #8
 80013f0:	462b      	mov	r3, r5
 80013f2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80013f6:	462b      	mov	r3, r5
 80013f8:	1219      	asrs	r1, r3, #8
 80013fa:	4b41      	ldr	r3, [pc, #260]	@ (8001500 <BMP280_measureP+0x2e0>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	b21b      	sxth	r3, r3
 8001402:	17da      	asrs	r2, r3, #31
 8001404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001408:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800140c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001410:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001414:	464a      	mov	r2, r9
 8001416:	fb02 f203 	mul.w	r2, r2, r3
 800141a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800141e:	4644      	mov	r4, r8
 8001420:	fb04 f303 	mul.w	r3, r4, r3
 8001424:	441a      	add	r2, r3
 8001426:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800142a:	4644      	mov	r4, r8
 800142c:	fba3 4304 	umull	r4, r3, r3, r4
 8001430:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001434:	4623      	mov	r3, r4
 8001436:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800143a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800143e:	18d3      	adds	r3, r2, r3
 8001440:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001450:	464c      	mov	r4, r9
 8001452:	0323      	lsls	r3, r4, #12
 8001454:	4644      	mov	r4, r8
 8001456:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800145a:	4644      	mov	r4, r8
 800145c:	0322      	lsls	r2, r4, #12
 800145e:	1884      	adds	r4, r0, r2
 8001460:	633c      	str	r4, [r7, #48]	@ 0x30
 8001462:	eb41 0303 	adc.w	r3, r1, r3
 8001466:	637b      	str	r3, [r7, #52]	@ 0x34
 8001468:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800146c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001470:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001474:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001478:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 800147c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001480:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <BMP280_measureP+0x2e4>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	b29b      	uxth	r3, r3
 8001486:	2200      	movs	r2, #0
 8001488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800148c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001490:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001494:	462b      	mov	r3, r5
 8001496:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800149a:	4642      	mov	r2, r8
 800149c:	fb02 f203 	mul.w	r2, r2, r3
 80014a0:	464b      	mov	r3, r9
 80014a2:	4621      	mov	r1, r4
 80014a4:	fb01 f303 	mul.w	r3, r1, r3
 80014a8:	4413      	add	r3, r2
 80014aa:	4622      	mov	r2, r4
 80014ac:	4641      	mov	r1, r8
 80014ae:	fba2 1201 	umull	r1, r2, r2, r1
 80014b2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80014b6:	460a      	mov	r2, r1
 80014b8:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80014bc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80014c0:	4413      	add	r3, r2
 80014c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80014d2:	4629      	mov	r1, r5
 80014d4:	104a      	asrs	r2, r1, #1
 80014d6:	4629      	mov	r1, r5
 80014d8:	17cb      	asrs	r3, r1, #31
 80014da:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 80014de:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014e2:	4313      	orrs	r3, r2
 80014e4:	d110      	bne.n	8001508 <BMP280_measureP+0x2e8>
	{
	return 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e154      	b.n	8001794 <BMP280_measureP+0x574>
 80014ea:	bf00      	nop
 80014ec:	20000158 	.word	0x20000158
 80014f0:	20000148 	.word	0x20000148
 80014f4:	20000146 	.word	0x20000146
 80014f8:	20000144 	.word	0x20000144
 80014fc:	20000142 	.word	0x20000142
 8001500:	20000140 	.word	0x20000140
 8001504:	2000013a 	.word	0x2000013a
	}
	p = 1048576-adc_P;
 8001508:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800150c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001510:	17da      	asrs	r2, r3, #31
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001514:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001516:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800151a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800151e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001522:	105b      	asrs	r3, r3, #1
 8001524:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001528:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800152c:	07db      	lsls	r3, r3, #31
 800152e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001532:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001536:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800153a:	4621      	mov	r1, r4
 800153c:	1a89      	subs	r1, r1, r2
 800153e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001540:	4629      	mov	r1, r5
 8001542:	eb61 0303 	sbc.w	r3, r1, r3
 8001546:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001548:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800154c:	4622      	mov	r2, r4
 800154e:	462b      	mov	r3, r5
 8001550:	1891      	adds	r1, r2, r2
 8001552:	6239      	str	r1, [r7, #32]
 8001554:	415b      	adcs	r3, r3
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
 8001558:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800155c:	4621      	mov	r1, r4
 800155e:	1851      	adds	r1, r2, r1
 8001560:	61b9      	str	r1, [r7, #24]
 8001562:	4629      	mov	r1, r5
 8001564:	414b      	adcs	r3, r1
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001574:	4649      	mov	r1, r9
 8001576:	018b      	lsls	r3, r1, #6
 8001578:	4641      	mov	r1, r8
 800157a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800157e:	4641      	mov	r1, r8
 8001580:	018a      	lsls	r2, r1, #6
 8001582:	4641      	mov	r1, r8
 8001584:	1889      	adds	r1, r1, r2
 8001586:	6139      	str	r1, [r7, #16]
 8001588:	4649      	mov	r1, r9
 800158a:	eb43 0101 	adc.w	r1, r3, r1
 800158e:	6179      	str	r1, [r7, #20]
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800159c:	4649      	mov	r1, r9
 800159e:	008b      	lsls	r3, r1, #2
 80015a0:	4641      	mov	r1, r8
 80015a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015a6:	4641      	mov	r1, r8
 80015a8:	008a      	lsls	r2, r1, #2
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	4603      	mov	r3, r0
 80015b0:	4622      	mov	r2, r4
 80015b2:	189b      	adds	r3, r3, r2
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	460b      	mov	r3, r1
 80015b8:	462a      	mov	r2, r5
 80015ba:	eb42 0303 	adc.w	r3, r2, r3
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015cc:	4649      	mov	r1, r9
 80015ce:	008b      	lsls	r3, r1, #2
 80015d0:	4641      	mov	r1, r8
 80015d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015d6:	4641      	mov	r1, r8
 80015d8:	008a      	lsls	r2, r1, #2
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	4622      	mov	r2, r4
 80015e2:	189b      	adds	r3, r3, r2
 80015e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80015e6:	462b      	mov	r3, r5
 80015e8:	460a      	mov	r2, r1
 80015ea:	eb42 0303 	adc.w	r3, r2, r3
 80015ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80015f0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80015f4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80015f8:	f7ff faa6 	bl	8000b48 <__aeabi_ldivmod>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001604:	4b66      	ldr	r3, [pc, #408]	@ (80017a0 <BMP280_measureP+0x580>)
 8001606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160a:	b21b      	sxth	r3, r3
 800160c:	17da      	asrs	r2, r3, #31
 800160e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001610:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001612:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001616:	f04f 0000 	mov.w	r0, #0
 800161a:	f04f 0100 	mov.w	r1, #0
 800161e:	0b50      	lsrs	r0, r2, #13
 8001620:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001624:	1359      	asrs	r1, r3, #13
 8001626:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800162a:	462b      	mov	r3, r5
 800162c:	fb00 f203 	mul.w	r2, r0, r3
 8001630:	4623      	mov	r3, r4
 8001632:	fb03 f301 	mul.w	r3, r3, r1
 8001636:	4413      	add	r3, r2
 8001638:	4622      	mov	r2, r4
 800163a:	fba2 1200 	umull	r1, r2, r2, r0
 800163e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001642:	460a      	mov	r2, r1
 8001644:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001648:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800164c:	4413      	add	r3, r2
 800164e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001652:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001656:	f04f 0000 	mov.w	r0, #0
 800165a:	f04f 0100 	mov.w	r1, #0
 800165e:	0b50      	lsrs	r0, r2, #13
 8001660:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001664:	1359      	asrs	r1, r3, #13
 8001666:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800166a:	462b      	mov	r3, r5
 800166c:	fb00 f203 	mul.w	r2, r0, r3
 8001670:	4623      	mov	r3, r4
 8001672:	fb03 f301 	mul.w	r3, r3, r1
 8001676:	4413      	add	r3, r2
 8001678:	4622      	mov	r2, r4
 800167a:	fba2 1200 	umull	r1, r2, r2, r0
 800167e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001682:	460a      	mov	r2, r1
 8001684:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001688:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800168c:	4413      	add	r3, r2
 800168e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800169e:	4621      	mov	r1, r4
 80016a0:	0e4a      	lsrs	r2, r1, #25
 80016a2:	4629      	mov	r1, r5
 80016a4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016a8:	4629      	mov	r1, r5
 80016aa:	164b      	asrs	r3, r1, #25
 80016ac:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80016b0:	4b3c      	ldr	r3, [pc, #240]	@ (80017a4 <BMP280_measureP+0x584>)
 80016b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	17da      	asrs	r2, r3, #31
 80016ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80016bc:	667a      	str	r2, [r7, #100]	@ 0x64
 80016be:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016c2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016c6:	462a      	mov	r2, r5
 80016c8:	fb02 f203 	mul.w	r2, r2, r3
 80016cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016d0:	4621      	mov	r1, r4
 80016d2:	fb01 f303 	mul.w	r3, r1, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80016dc:	4621      	mov	r1, r4
 80016de:	fba2 1201 	umull	r1, r2, r2, r1
 80016e2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80016e6:	460a      	mov	r2, r1
 80016e8:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80016ec:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80016f0:	4413      	add	r3, r2
 80016f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001702:	4621      	mov	r1, r4
 8001704:	0cca      	lsrs	r2, r1, #19
 8001706:	4629      	mov	r1, r5
 8001708:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800170c:	4629      	mov	r1, r5
 800170e:	14cb      	asrs	r3, r1, #19
 8001710:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001714:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001718:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800171c:	1884      	adds	r4, r0, r2
 800171e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001720:	eb41 0303 	adc.w	r3, r1, r3
 8001724:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001726:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800172a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800172e:	4621      	mov	r1, r4
 8001730:	1889      	adds	r1, r1, r2
 8001732:	6539      	str	r1, [r7, #80]	@ 0x50
 8001734:	4629      	mov	r1, r5
 8001736:	eb43 0101 	adc.w	r1, r3, r1
 800173a:	6579      	str	r1, [r7, #84]	@ 0x54
 800173c:	f04f 0000 	mov.w	r0, #0
 8001740:	f04f 0100 	mov.w	r1, #0
 8001744:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001748:	4623      	mov	r3, r4
 800174a:	0a18      	lsrs	r0, r3, #8
 800174c:	462b      	mov	r3, r5
 800174e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001752:	462b      	mov	r3, r5
 8001754:	1219      	asrs	r1, r3, #8
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <BMP280_measureP+0x588>)
 8001758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175c:	b21b      	sxth	r3, r3
 800175e:	17da      	asrs	r2, r3, #31
 8001760:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001762:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001770:	464c      	mov	r4, r9
 8001772:	0123      	lsls	r3, r4, #4
 8001774:	4644      	mov	r4, r8
 8001776:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800177a:	4644      	mov	r4, r8
 800177c:	0122      	lsls	r2, r4, #4
 800177e:	1884      	adds	r4, r0, r2
 8001780:	603c      	str	r4, [r7, #0]
 8001782:	eb41 0303 	adc.w	r3, r1, r3
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	e9d7 3400 	ldrd	r3, r4, [r7]
 800178c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001790:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001794:	4618      	mov	r0, r3
 8001796:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800179a:	46bd      	mov	sp, r7
 800179c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017a0:	2000014e 	.word	0x2000014e
 80017a4:	2000014c 	.word	0x2000014c
 80017a8:	2000014a 	.word	0x2000014a
 80017ac:	00000000 	.word	0x00000000

080017b0 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <BMP280_measureH+0x14>
 80017c0:	2300      	movs	r3, #0
 80017c2:	e051      	b.n	8001868 <BMP280_measureH+0xb8>
	var1 = -log(((double)Pres)/101325);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7fe fe4d 	bl	8000464 <__aeabi_ui2d>
 80017ca:	a32e      	add	r3, pc, #184	@ (adr r3, 8001884 <BMP280_measureH+0xd4>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7fe ffec 	bl	80007ac <__aeabi_ddiv>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	ec43 2b17 	vmov	d7, r2, r3
 80017dc:	eeb0 0a47 	vmov.f32	s0, s14
 80017e0:	eef0 0a67 	vmov.f32	s1, s15
 80017e4:	f009 fb3c 	bl	800ae60 <log>
 80017e8:	ec53 2b10 	vmov	r2, r3, d0
 80017ec:	4611      	mov	r1, r2
 80017ee:	61b9      	str	r1, [r7, #24]
 80017f0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80017f4:	61fb      	str	r3, [r7, #28]

	if(var1 == 0) return 0;
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001802:	f7ff f911 	bl	8000a28 <__aeabi_dcmpeq>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <BMP280_measureH+0x60>
 800180c:	2300      	movs	r3, #0
 800180e:	e02b      	b.n	8001868 <BMP280_measureH+0xb8>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8001810:	6838      	ldr	r0, [r7, #0]
 8001812:	f7fe fe37 	bl	8000484 <__aeabi_i2d>
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <BMP280_measureH+0xd0>)
 800181c:	f7fe ffc6 	bl	80007ac <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	a311      	add	r3, pc, #68	@ (adr r3, 8001870 <BMP280_measureH+0xc0>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7fe fcdd 	bl	80001ec <__adddf3>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	a110      	add	r1, pc, #64	@ (adr r1, 8001878 <BMP280_measureH+0xc8>)
 8001838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800183c:	f7fe ffb6 	bl	80007ac <__aeabi_ddiv>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	e9c7 2304 	strd	r2, r3, [r7, #16]
	h = var1/var2;
 8001848:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800184c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001850:	f7fe ffac 	bl	80007ac <__aeabi_ddiv>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (uint16_t)h;
 800185c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001860:	f7ff f952 	bl	8000b08 <__aeabi_d2uiz>
 8001864:	4603      	mov	r3, r0
 8001866:	b29b      	uxth	r3, r3
}
 8001868:	4618      	mov	r0, r3
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	66666666 	.word	0x66666666
 8001874:	40711266 	.word	0x40711266
 8001878:	ca402a92 	.word	0xca402a92
 800187c:	3fa17e3e 	.word	0x3fa17e3e
 8001880:	40590000 	.word	0x40590000
 8001884:	00000000 	.word	0x00000000
 8001888:	40f8bcd0 	.word	0x40f8bcd0

0800188c <BMP280_init>:

void BMP280_init(void){
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	BMP280_unselect();
 8001890:	2201      	movs	r2, #1
 8001892:	2104      	movs	r1, #4
 8001894:	480c      	ldr	r0, [pc, #48]	@ (80018c8 <BMP280_init+0x3c>)
 8001896:	f003 fe3f 	bl	8005518 <HAL_GPIO_WritePin>
	BMP280_config();
 800189a:	f7ff fb7b 	bl	8000f94 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 800189e:	2089      	movs	r0, #137	@ 0x89
 80018a0:	f7ff fb46 	bl	8000f30 <BMP280_read>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <BMP280_init+0x40>)
 80018aa:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 80018ac:	f7ff fb7e 	bl	8000fac <BMP280_calibrationData>
	BMP280_readRawValues();
 80018b0:	f7ff fc30 	bl	8001114 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <BMP280_init+0x44>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fc6d 	bl	8001198 <BMP280_measureT>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a02      	ldr	r2, [pc, #8]	@ (80018cc <BMP280_init+0x40>)
 80018c2:	6093      	str	r3, [r2, #8]
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020400 	.word	0x40020400
 80018cc:	20000124 	.word	0x20000124
 80018d0:	20000150 	.word	0x20000150

080018d4 <BMP280_calculate>:

void BMP280_calculate(void){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	BMP280_readRawValues();
 80018d8:	f7ff fc1c 	bl	8001114 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 80018dc:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <BMP280_calculate+0x48>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fc59 	bl	8001198 <BMP280_measureT>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001920 <BMP280_calculate+0x4c>)
 80018ea:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 80018ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001924 <BMP280_calculate+0x50>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fc95 	bl	8001220 <BMP280_measureP>
 80018f6:	4603      	mov	r3, r0
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	4a09      	ldr	r2, [pc, #36]	@ (8001920 <BMP280_calculate+0x4c>)
 80018fc:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 80018fe:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <BMP280_calculate+0x4c>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	4a07      	ldr	r2, [pc, #28]	@ (8001920 <BMP280_calculate+0x4c>)
 8001904:	6892      	ldr	r2, [r2, #8]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff51 	bl	80017b0 <BMP280_measureH>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	4b03      	ldr	r3, [pc, #12]	@ (8001920 <BMP280_calculate+0x4c>)
 8001914:	821a      	strh	r2, [r3, #16]
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000150 	.word	0x20000150
 8001920:	20000124 	.word	0x20000124
 8001924:	20000154 	.word	0x20000154

08001928 <Flash_Read>:
	   return 0;
}


void Flash_Read (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	4613      	mov	r3, r2
 8001934:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3304      	adds	r3, #4
 8001942:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	3304      	adds	r3, #4
 8001948:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	1e5a      	subs	r2, r3, #1
 800194e:	80fa      	strh	r2, [r7, #6]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d000      	beq.n	8001956 <Flash_Read+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001954:	e7ef      	b.n	8001936 <Flash_Read+0xe>
		if (!(numberofwords--)) break;
 8001956:	bf00      	nop
	}
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <MPU6050_getPromModule>:

#define MPU6050_ADDR 0xD0
const uint16_t i2c_timeout = 10;
const double Accel_Z_corrector = 2048.0;

void MPU6050_getPromModule(MPU6050_t *DataStruct){
 8001964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001968:	b09e      	sub	sp, #120	@ 0x78
 800196a:	af00      	add	r7, sp, #0
 800196c:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int64_t Buffer = 0;
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	int32_t AuxBuffer[5] = {0};
 800197a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 800197e:	2300      	movs	r3, #0
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	6053      	str	r3, [r2, #4]
 8001984:	6093      	str	r3, [r2, #8]
 8001986:	60d3      	str	r3, [r2, #12]
 8001988:	6113      	str	r3, [r2, #16]

	for(uint8_t n = 0;n<5;n++){
 800198a:	2300      	movs	r3, #0
 800198c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001990:	e016      	b.n	80019c0 <MPU6050_getPromModule+0x5c>
		AuxBuffer[n] = DataStruct->PromBuffer[n].Accel_X_RAW;
 8001992:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001996:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001998:	3304      	adds	r3, #4
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	4413      	add	r3, r2
 800199e:	3304      	adds	r3, #4
 80019a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019a4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	3330      	adds	r3, #48	@ 0x30
 80019ac:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80019b0:	440b      	add	r3, r1
 80019b2:	f843 2c24 	str.w	r2, [r3, #-36]
	for(uint8_t n = 0;n<5;n++){
 80019b6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80019ba:	3301      	adds	r3, #1
 80019bc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80019c0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d9e4      	bls.n	8001992 <MPU6050_getPromModule+0x2e>
	}
	for(uint8_t n = 0;n<4;n++){
 80019c8:	2300      	movs	r3, #0
 80019ca:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80019ce:	e02d      	b.n	8001a2c <MPU6050_getPromModule+0xc8>

		DataStruct->PromBuffer[n+1].Accel_X_RAW = AuxBuffer[n];
 80019d0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	3330      	adds	r3, #48	@ 0x30
 80019d8:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80019dc:	4413      	add	r3, r2
 80019de:	f853 2c24 	ldr.w	r2, [r3, #-36]
 80019e2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80019e6:	3301      	adds	r3, #1
 80019e8:	b211      	sxth	r1, r2
 80019ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019ec:	3304      	adds	r3, #4
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	4413      	add	r3, r2
 80019f2:	1d1a      	adds	r2, r3, #4
 80019f4:	460b      	mov	r3, r1
 80019f6:	8013      	strh	r3, [r2, #0]
		Buffer += DataStruct->PromBuffer[n].Accel_X_RAW;
 80019f8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80019fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019fe:	3304      	adds	r3, #4
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	4413      	add	r3, r2
 8001a04:	3304      	adds	r3, #4
 8001a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	17da      	asrs	r2, r3, #31
 8001a0e:	461c      	mov	r4, r3
 8001a10:	4615      	mov	r5, r2
 8001a12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001a16:	eb12 0804 	adds.w	r8, r2, r4
 8001a1a:	eb43 0905 	adc.w	r9, r3, r5
 8001a1e:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
	for(uint8_t n = 0;n<4;n++){
 8001a22:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001a26:	3301      	adds	r3, #1
 8001a28:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8001a2c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d9cd      	bls.n	80019d0 <MPU6050_getPromModule+0x6c>
	}
	DataStruct->PromBuffer[0].Accel_X_RAW = DataStruct->Accel_X_RAW;
 8001a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a3c:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
	Buffer += DataStruct->PromBuffer[0].Accel_X_RAW;
 8001a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a42:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	17da      	asrs	r2, r3, #31
 8001a4a:	469a      	mov	sl, r3
 8001a4c:	4693      	mov	fp, r2
 8001a4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001a52:	eb12 010a 	adds.w	r1, r2, sl
 8001a56:	6239      	str	r1, [r7, #32]
 8001a58:	eb43 030b 	adc.w	r3, r3, fp
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a5e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001a62:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	DataStruct->Prom.Accel_X_RAW = Buffer / 5;
 8001a66:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a6a:	f04f 0205 	mov.w	r2, #5
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	f7ff f869 	bl	8000b48 <__aeabi_ldivmod>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	b213      	sxth	r3, r2
 8001a7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a7e:	f8a2 3094 	strh.w	r3, [r2, #148]	@ 0x94

	Buffer = 0;
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	for(uint8_t n = 0;n<5;n++){
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8001a94:	e016      	b.n	8001ac4 <MPU6050_getPromModule+0x160>
		AuxBuffer[n] = DataStruct->PromBuffer[n].Accel_Y_RAW;
 8001a96:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001a9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3306      	adds	r3, #6
 8001aa4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001aa8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	3330      	adds	r3, #48	@ 0x30
 8001ab0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001ab4:	440b      	add	r3, r1
 8001ab6:	f843 2c24 	str.w	r2, [r3, #-36]
	for(uint8_t n = 0;n<5;n++){
 8001aba:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8001ac4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d9e4      	bls.n	8001a96 <MPU6050_getPromModule+0x132>
	}
	for(uint8_t n = 0;n<4;n++){
 8001acc:	2300      	movs	r3, #0
 8001ace:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8001ad2:	e033      	b.n	8001b3c <MPU6050_getPromModule+0x1d8>

		DataStruct->PromBuffer[n+1].Accel_Y_RAW = AuxBuffer[n];
 8001ad4:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	3330      	adds	r3, #48	@ 0x30
 8001adc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001ae0:	4413      	add	r3, r2
 8001ae2:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8001ae6:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001aea:	3301      	adds	r3, #1
 8001aec:	b211      	sxth	r1, r2
 8001aee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001af0:	3304      	adds	r3, #4
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	4413      	add	r3, r2
 8001af6:	1d9a      	adds	r2, r3, #6
 8001af8:	460b      	mov	r3, r1
 8001afa:	8013      	strh	r3, [r2, #0]
		Buffer += DataStruct->PromBuffer[n].Accel_Y_RAW;
 8001afc:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001b00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b02:	3304      	adds	r3, #4
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4413      	add	r3, r2
 8001b08:	3306      	adds	r3, #6
 8001b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0e:	b21b      	sxth	r3, r3
 8001b10:	17da      	asrs	r2, r3, #31
 8001b12:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b14:	647a      	str	r2, [r7, #68]	@ 0x44
 8001b16:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001b1a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001b1e:	4621      	mov	r1, r4
 8001b20:	1851      	adds	r1, r2, r1
 8001b22:	61b9      	str	r1, [r7, #24]
 8001b24:	4629      	mov	r1, r5
 8001b26:	414b      	adcs	r3, r1
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001b2e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	for(uint8_t n = 0;n<4;n++){
 8001b32:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001b36:	3301      	adds	r3, #1
 8001b38:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8001b3c:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d9c7      	bls.n	8001ad4 <MPU6050_getPromModule+0x170>
	}
	DataStruct->PromBuffer[0].Accel_Y_RAW = DataStruct->Accel_Y_RAW;
 8001b44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b4c:	f8a2 3046 	strh.w	r3, [r2, #70]	@ 0x46
	Buffer += DataStruct->PromBuffer[0].Accel_Y_RAW;
 8001b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b52:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	17da      	asrs	r2, r3, #31
 8001b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b5e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001b62:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001b66:	4621      	mov	r1, r4
 8001b68:	1851      	adds	r1, r2, r1
 8001b6a:	6139      	str	r1, [r7, #16]
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	eb43 0101 	adc.w	r1, r3, r1
 8001b72:	6179      	str	r1, [r7, #20]
 8001b74:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001b78:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	DataStruct->Prom.Accel_Y_RAW = Buffer / 5;
 8001b7c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001b80:	f04f 0205 	mov.w	r2, #5
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	f7fe ffde 	bl	8000b48 <__aeabi_ldivmod>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	b212      	sxth	r2, r2
 8001b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b94:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96

	Buffer = 0;
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	for(uint8_t n = 0;n<5;n++){
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8001baa:	e016      	b.n	8001bda <MPU6050_getPromModule+0x276>
		AuxBuffer[n] = DataStruct->PromBuffer[n].Accel_Z_RAW;
 8001bac:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001bb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3308      	adds	r3, #8
 8001bba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bbe:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	3330      	adds	r3, #48	@ 0x30
 8001bc6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001bca:	440b      	add	r3, r1
 8001bcc:	f843 2c24 	str.w	r2, [r3, #-36]
	for(uint8_t n = 0;n<5;n++){
 8001bd0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8001bda:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d9e4      	bls.n	8001bac <MPU6050_getPromModule+0x248>
	}
	for(uint8_t n = 0;n<4;n++){
 8001be2:	2300      	movs	r3, #0
 8001be4:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8001be8:	e033      	b.n	8001c52 <MPU6050_getPromModule+0x2ee>

		DataStruct->PromBuffer[n+1].Accel_Z_RAW = AuxBuffer[n];
 8001bea:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	3330      	adds	r3, #48	@ 0x30
 8001bf2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8001bfc:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001c00:	3301      	adds	r3, #1
 8001c02:	b211      	sxth	r1, r2
 8001c04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c06:	3304      	adds	r3, #4
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3308      	adds	r3, #8
 8001c0e:	460a      	mov	r2, r1
 8001c10:	801a      	strh	r2, [r3, #0]
		Buffer += DataStruct->PromBuffer[n].Accel_Z_RAW;
 8001c12:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001c16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c18:	3304      	adds	r3, #4
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3308      	adds	r3, #8
 8001c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c24:	b21b      	sxth	r3, r3
 8001c26:	17da      	asrs	r2, r3, #31
 8001c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c2a:	637a      	str	r2, [r7, #52]	@ 0x34
 8001c2c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c30:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c34:	4621      	mov	r1, r4
 8001c36:	1851      	adds	r1, r2, r1
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	414b      	adcs	r3, r1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001c44:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	for(uint8_t n = 0;n<4;n++){
 8001c48:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8001c52:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d9c7      	bls.n	8001bea <MPU6050_getPromModule+0x286>
	}
	DataStruct->PromBuffer[0].Accel_Z_RAW = DataStruct->Accel_Z_RAW;
 8001c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c5c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c62:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	Buffer += DataStruct->PromBuffer[0].Accel_Z_RAW;
 8001c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c68:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	17da      	asrs	r2, r3, #31
 8001c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c74:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c78:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	1851      	adds	r1, r2, r1
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	4629      	mov	r1, r5
 8001c84:	eb43 0101 	adc.w	r1, r3, r1
 8001c88:	6079      	str	r1, [r7, #4]
 8001c8a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c8e:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	DataStruct->Prom.Accel_Z_RAW = Buffer / 5;
 8001c92:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001c96:	f04f 0205 	mov.w	r2, #5
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	f7fe ff53 	bl	8000b48 <__aeabi_ldivmod>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	b212      	sxth	r2, r2
 8001ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001caa:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98


}
 8001cae:	bf00      	nop
 8001cb0:	3778      	adds	r7, #120	@ 0x78
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001cb8 <MPU6050_status>:

uint8_t MPU6050_status(void){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af04      	add	r7, sp, #16
	uint8_t check  = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	71fb      	strb	r3, [r7, #7]

	static uint8_t eCont1 = 0, eCont2 = 0;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001cc6:	230a      	movs	r3, #10
 8001cc8:	9302      	str	r3, [sp, #8]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	1dbb      	adds	r3, r7, #6
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	2275      	movs	r2, #117	@ 0x75
 8001cd6:	21d0      	movs	r1, #208	@ 0xd0
 8001cd8:	4822      	ldr	r0, [pc, #136]	@ (8001d64 <MPU6050_status+0xac>)
 8001cda:	f003 fe75 	bl	80059c8 <HAL_I2C_Mem_Read>
	if(check != 104){
 8001cde:	79bb      	ldrb	r3, [r7, #6]
 8001ce0:	2b68      	cmp	r3, #104	@ 0x68
 8001ce2:	d011      	beq.n	8001d08 <MPU6050_status+0x50>
		eCont1++;
 8001ce4:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <MPU6050_status+0xb0>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <MPU6050_status+0xb0>)
 8001cee:	701a      	strb	r2, [r3, #0]
		if(eCont1 > 2){
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <MPU6050_status+0xb0>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d90a      	bls.n	8001d0e <MPU6050_status+0x56>
			status |= 0x01;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	71fb      	strb	r3, [r7, #7]
			eCont1 = 3;
 8001d00:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <MPU6050_status+0xb0>)
 8001d02:	2203      	movs	r2, #3
 8001d04:	701a      	strb	r2, [r3, #0]
 8001d06:	e002      	b.n	8001d0e <MPU6050_status+0x56>
		}
	}
	else{
		eCont1 = 0;
 8001d08:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <MPU6050_status+0xb0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
	}
	check = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001d12:	230a      	movs	r3, #10
 8001d14:	9302      	str	r3, [sp, #8]
 8001d16:	2301      	movs	r3, #1
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	1dbb      	adds	r3, r7, #6
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	2275      	movs	r2, #117	@ 0x75
 8001d22:	21d0      	movs	r1, #208	@ 0xd0
 8001d24:	4811      	ldr	r0, [pc, #68]	@ (8001d6c <MPU6050_status+0xb4>)
 8001d26:	f003 fe4f 	bl	80059c8 <HAL_I2C_Mem_Read>
	if(check != 104){
 8001d2a:	79bb      	ldrb	r3, [r7, #6]
 8001d2c:	2b68      	cmp	r3, #104	@ 0x68
 8001d2e:	d011      	beq.n	8001d54 <MPU6050_status+0x9c>
		eCont2++;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <MPU6050_status+0xb8>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	4b0d      	ldr	r3, [pc, #52]	@ (8001d70 <MPU6050_status+0xb8>)
 8001d3a:	701a      	strb	r2, [r3, #0]
		if(eCont1 > 2){
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <MPU6050_status+0xb0>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d90a      	bls.n	8001d5a <MPU6050_status+0xa2>
			status |= 0x01;
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	71fb      	strb	r3, [r7, #7]
			eCont2 = 3;
 8001d4c:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <MPU6050_status+0xb8>)
 8001d4e:	2203      	movs	r2, #3
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	e002      	b.n	8001d5a <MPU6050_status+0xa2>
		}
	}
	else{
		eCont2 = 0;
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <MPU6050_status+0xb8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200006f4 	.word	0x200006f4
 8001d68:	20000380 	.word	0x20000380
 8001d6c:	20000748 	.word	0x20000748
 8001d70:	20000381 	.word	0x20000381

08001d74 <MPU6050_memoryRefresh>:

void MPU6050_memoryRefresh(void){
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
	MPU6050.Module_1.OffSet.Ax_Offset = MEMORY.str.MPU6050_1.Ax_Offset;
 8001d78:	4b26      	ldr	r3, [pc, #152]	@ (8001e14 <MPU6050_memoryRefresh+0xa0>)
 8001d7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d7e:	4b26      	ldr	r3, [pc, #152]	@ (8001e18 <MPU6050_memoryRefresh+0xa4>)
 8001d80:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	MPU6050.Module_1.OffSet.Ay_Offset = MEMORY.str.MPU6050_1.Ay_Offset;
 8001d84:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <MPU6050_memoryRefresh+0xa0>)
 8001d86:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001d8a:	4b23      	ldr	r3, [pc, #140]	@ (8001e18 <MPU6050_memoryRefresh+0xa4>)
 8001d8c:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
	MPU6050.Module_1.OffSet.Az_Offset = MEMORY.str.MPU6050_1.Az_Offset;
 8001d90:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <MPU6050_memoryRefresh+0xa0>)
 8001d92:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001d96:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <MPU6050_memoryRefresh+0xa4>)
 8001d98:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8

	MPU6050.Module_1.OffSet.Gx_Offset = MEMORY.str.MPU6050_1.Gx_Offset;
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e14 <MPU6050_memoryRefresh+0xa0>)
 8001d9e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001da2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <MPU6050_memoryRefresh+0xa4>)
 8001da4:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
	MPU6050.Module_1.OffSet.Gy_Offset = MEMORY.str.MPU6050_1.Gy_Offset;
 8001da8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e14 <MPU6050_memoryRefresh+0xa0>)
 8001daa:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8001dae:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <MPU6050_memoryRefresh+0xa4>)
 8001db0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	MPU6050.Module_1.OffSet.Gz_Offset = MEMORY.str.MPU6050_1.Gz_Offset;
 8001db4:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <MPU6050_memoryRefresh+0xa0>)
 8001db6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001dba:	4b17      	ldr	r3, [pc, #92]	@ (8001e18 <MPU6050_memoryRefresh+0xa4>)
 8001dbc:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae

	MPU6050.Module_2.OffSet.Ax_Offset = MEMORY.str.MPU6050_2.Ax_Offset;
 8001dc0:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <MPU6050_memoryRefresh+0xa0>)
 8001dc2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8001dc6:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <MPU6050_memoryRefresh+0xa4>)
 8001dc8:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	MPU6050.Module_2.OffSet.Ay_Offset = MEMORY.str.MPU6050_2.Ay_Offset;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <MPU6050_memoryRefresh+0xa0>)
 8001dce:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8001dd2:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <MPU6050_memoryRefresh+0xa4>)
 8001dd4:	f8a3 2156 	strh.w	r2, [r3, #342]	@ 0x156
	MPU6050.Module_2.OffSet.Az_Offset = MEMORY.str.MPU6050_2.Az_Offset;
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <MPU6050_memoryRefresh+0xa0>)
 8001dda:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8001dde:	4b0e      	ldr	r3, [pc, #56]	@ (8001e18 <MPU6050_memoryRefresh+0xa4>)
 8001de0:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158

	MPU6050.Module_2.OffSet.Gx_Offset = MEMORY.str.MPU6050_2.Gx_Offset;
 8001de4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <MPU6050_memoryRefresh+0xa0>)
 8001de6:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001dea:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <MPU6050_memoryRefresh+0xa4>)
 8001dec:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a
	MPU6050.Module_2.OffSet.Gy_Offset = MEMORY.str.MPU6050_2.Gy_Offset;
 8001df0:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <MPU6050_memoryRefresh+0xa0>)
 8001df2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8001df6:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <MPU6050_memoryRefresh+0xa4>)
 8001df8:	f8a3 215c 	strh.w	r2, [r3, #348]	@ 0x15c
	MPU6050.Module_2.OffSet.Gz_Offset = MEMORY.str.MPU6050_2.Gz_Offset;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <MPU6050_memoryRefresh+0xa0>)
 8001dfe:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8001e02:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <MPU6050_memoryRefresh+0xa4>)
 8001e04:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000424 	.word	0x20000424
 8001e18:	20000160 	.word	0x20000160

08001e1c <MPU6050_Init_Module>:
    MEMORY_write();
}



uint8_t MPU6050_Init_Module(I2C_HandleTypeDef *I2Cx) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af04      	add	r7, sp, #16
 8001e22:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001e24:	230a      	movs	r3, #10
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	f107 030f 	add.w	r3, r7, #15
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2301      	movs	r3, #1
 8001e34:	2275      	movs	r2, #117	@ 0x75
 8001e36:	21d0      	movs	r1, #208	@ 0xd0
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f003 fdc5 	bl	80059c8 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	2b68      	cmp	r3, #104	@ 0x68
 8001e42:	d13d      	bne.n	8001ec0 <MPU6050_Init_Module+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001e48:	230a      	movs	r3, #10
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	f107 030e 	add.w	r3, r7, #14
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2301      	movs	r3, #1
 8001e58:	226b      	movs	r2, #107	@ 0x6b
 8001e5a:	21d0      	movs	r1, #208	@ 0xd0
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f003 fcb9 	bl	80057d4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001e62:	2307      	movs	r3, #7
 8001e64:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001e66:	230a      	movs	r3, #10
 8001e68:	9302      	str	r3, [sp, #8]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	f107 030e 	add.w	r3, r7, #14
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2301      	movs	r3, #1
 8001e76:	2219      	movs	r2, #25
 8001e78:	21d0      	movs	r1, #208	@ 0xd0
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f003 fcaa 	bl	80057d4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x18;
 8001e80:	2318      	movs	r3, #24
 8001e82:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001e84:	230a      	movs	r3, #10
 8001e86:	9302      	str	r3, [sp, #8]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	f107 030e 	add.w	r3, r7, #14
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2301      	movs	r3, #1
 8001e94:	221c      	movs	r2, #28
 8001e96:	21d0      	movs	r1, #208	@ 0xd0
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f003 fc9b 	bl	80057d4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x18;
 8001e9e:	2318      	movs	r3, #24
 8001ea0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001ea2:	230a      	movs	r3, #10
 8001ea4:	9302      	str	r3, [sp, #8]
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	f107 030e 	add.w	r3, r7, #14
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	221b      	movs	r2, #27
 8001eb4:	21d0      	movs	r1, #208	@ 0xd0
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f003 fc8c 	bl	80057d4 <HAL_I2C_Mem_Write>
        return 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e000      	b.n	8001ec2 <MPU6050_Init_Module+0xa6>
    }
    return 1;
 8001ec0:	2301      	movs	r3, #1
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	0000      	movs	r0, r0
 8001ecc:	0000      	movs	r0, r0
	...

08001ed0 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	@ 0x28
 8001ed4:	af04      	add	r7, sp, #16
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001eda:	230a      	movs	r3, #10
 8001edc:	9302      	str	r3, [sp, #8]
 8001ede:	230e      	movs	r3, #14
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	f107 0308 	add.w	r3, r7, #8
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	2301      	movs	r3, #1
 8001eea:	223b      	movs	r2, #59	@ 0x3b
 8001eec:	21d0      	movs	r1, #208	@ 0xd0
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f003 fd6a 	bl	80059c8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = ((int16_t) (Rec_Data[0] << 8 | Rec_Data[1]) - DataStruct->OffSet.Ax_Offset);
 8001ef4:	7a3b      	ldrb	r3, [r7, #8]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	7a7b      	ldrb	r3, [r7, #9]
 8001efc:	b21b      	sxth	r3, r3
 8001efe:	4313      	orrs	r3, r2
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	@ 0xa4
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	b21a      	sxth	r2, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = ((int16_t) (Rec_Data[2] << 8 | Rec_Data[3]) - DataStruct->OffSet.Ay_Offset);
 8001f16:	7abb      	ldrb	r3, [r7, #10]
 8001f18:	021b      	lsls	r3, r3, #8
 8001f1a:	b21a      	sxth	r2, r3
 8001f1c:	7afb      	ldrb	r3, [r7, #11]
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	4313      	orrs	r3, r2
 8001f22:	b21b      	sxth	r3, r3
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = ((int16_t) (Rec_Data[4] << 8 | Rec_Data[5]) - DataStruct->OffSet.Az_Offset);
 8001f38:	7b3b      	ldrb	r3, [r7, #12]
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	b21a      	sxth	r2, r3
 8001f3e:	7b7b      	ldrb	r3, [r7, #13]
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	4313      	orrs	r3, r2
 8001f44:	b21b      	sxth	r3, r3
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	@ 0xa8
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	b21a      	sxth	r2, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001f5a:	7bbb      	ldrb	r3, [r7, #14]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	b21a      	sxth	r2, r3
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	b21b      	sxth	r3, r3
 8001f64:	4313      	orrs	r3, r2
 8001f66:	82fb      	strh	r3, [r7, #22]
    DataStruct->Gyro_X_RAW = ((int16_t) (Rec_Data[8] << 8 | Rec_Data[9])  - DataStruct->OffSet.Gx_Offset);
 8001f68:	7c3b      	ldrb	r3, [r7, #16]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	b21a      	sxth	r2, r3
 8001f6e:	7c7b      	ldrb	r3, [r7, #17]
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	4313      	orrs	r3, r2
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b21a      	sxth	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = ((int16_t) (Rec_Data[10] << 8 | Rec_Data[11])- DataStruct->OffSet.Gy_Offset);
 8001f8a:	7cbb      	ldrb	r3, [r7, #18]
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	b21a      	sxth	r2, r3
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	4313      	orrs	r3, r2
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = ((int16_t) (Rec_Data[12] << 8 | Rec_Data[13])- DataStruct->OffSet.Gz_Offset);
 8001fac:	7d3b      	ldrb	r3, [r7, #20]
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	b21a      	sxth	r2, r3
 8001fb2:	7d7b      	ldrb	r3, [r7, #21]
 8001fb4:	b21b      	sxth	r3, r3
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	b21a      	sxth	r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 2048.0;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fa55 	bl	8000484 <__aeabi_i2d>
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	4b38      	ldr	r3, [pc, #224]	@ (80020c0 <MPU6050_Read_All+0x1f0>)
 8001fe0:	f7fe fbe4 	bl	80007ac <__aeabi_ddiv>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	6839      	ldr	r1, [r7, #0]
 8001fea:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 2048.0;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fa45 	bl	8000484 <__aeabi_i2d>
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	4b30      	ldr	r3, [pc, #192]	@ (80020c0 <MPU6050_Read_All+0x1f0>)
 8002000:	f7fe fbd4 	bl	80007ac <__aeabi_ddiv>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	6839      	ldr	r1, [r7, #0]
 800200a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fa35 	bl	8000484 <__aeabi_i2d>
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	4b28      	ldr	r3, [pc, #160]	@ (80020c0 <MPU6050_Read_All+0x1f0>)
 8002020:	f7fe fbc4 	bl	80007ac <__aeabi_ddiv>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	6839      	ldr	r1, [r7, #0]
 800202a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 800202e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002032:	ee07 3a90 	vmov	s15, r3
 8002036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800203a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80020c4 <MPU6050_Read_All+0x1f4>
 800203e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002042:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80020c8 <MPU6050_Read_All+0x1f8>
 8002046:	ee77 7a87 	vadd.f32	s15, s15, s14
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 16.4;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fa14 	bl	8000484 <__aeabi_i2d>
 800205c:	a316      	add	r3, pc, #88	@ (adr r3, 80020b8 <MPU6050_Read_All+0x1e8>)
 800205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002062:	f7fe fba3 	bl	80007ac <__aeabi_ddiv>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	6839      	ldr	r1, [r7, #0]
 800206c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 16.4;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa04 	bl	8000484 <__aeabi_i2d>
 800207c:	a30e      	add	r3, pc, #56	@ (adr r3, 80020b8 <MPU6050_Read_All+0x1e8>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	f7fe fb93 	bl	80007ac <__aeabi_ddiv>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 16.4;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe f9f4 	bl	8000484 <__aeabi_i2d>
 800209c:	a306      	add	r3, pc, #24	@ (adr r3, 80020b8 <MPU6050_Read_All+0x1e8>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe fb83 	bl	80007ac <__aeabi_ddiv>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	6839      	ldr	r1, [r7, #0]
 80020ac:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

}
 80020b0:	bf00      	nop
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	66666666 	.word	0x66666666
 80020bc:	40306666 	.word	0x40306666
 80020c0:	40a00000 	.word	0x40a00000
 80020c4:	43aa0000 	.word	0x43aa0000
 80020c8:	42121eb8 	.word	0x42121eb8

080020cc <MPU6050_Init>:



void MPU6050_Init(void){
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0

	MPU6050_Init_Module(&hi2c1);
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <MPU6050_Init+0x18>)
 80020d2:	f7ff fea3 	bl	8001e1c <MPU6050_Init_Module>
	MPU6050_Init_Module(&hi2c2);
 80020d6:	4804      	ldr	r0, [pc, #16]	@ (80020e8 <MPU6050_Init+0x1c>)
 80020d8:	f7ff fea0 	bl	8001e1c <MPU6050_Init_Module>
	MPU6050_memoryRefresh();
 80020dc:	f7ff fe4a 	bl	8001d74 <MPU6050_memoryRefresh>

}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	200006f4 	.word	0x200006f4
 80020e8:	20000748 	.word	0x20000748

080020ec <NRF24_write>:

uint8_t N_message, Struct2transmit, Transmision_cont;



void NRF24_write(uint8_t Adr, uint8_t data){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	460a      	mov	r2, r1
 80020f6:	71fb      	strb	r3, [r7, #7]
 80020f8:	4613      	mov	r3, r2
 80020fa:	71bb      	strb	r3, [r7, #6]
	Adr |= W_REGISTER;
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f043 0320 	orr.w	r3, r3, #32
 8002102:	b2db      	uxtb	r3, r3
 8002104:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8002106:	2200      	movs	r2, #0
 8002108:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800210c:	480c      	ldr	r0, [pc, #48]	@ (8002140 <NRF24_write+0x54>)
 800210e:	f003 fa03 	bl	8005518 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8002112:	1dfb      	adds	r3, r7, #7
 8002114:	2201      	movs	r2, #1
 8002116:	4619      	mov	r1, r3
 8002118:	480a      	ldr	r0, [pc, #40]	@ (8002144 <NRF24_write+0x58>)
 800211a:	f005 fb55 	bl	80077c8 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &data, 1);
 800211e:	1dbb      	adds	r3, r7, #6
 8002120:	2201      	movs	r2, #1
 8002122:	4619      	mov	r1, r3
 8002124:	4807      	ldr	r0, [pc, #28]	@ (8002144 <NRF24_write+0x58>)
 8002126:	f005 fb4f 	bl	80077c8 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 800212a:	2201      	movs	r2, #1
 800212c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002130:	4803      	ldr	r0, [pc, #12]	@ (8002140 <NRF24_write+0x54>)
 8002132:	f003 f9f1 	bl	8005518 <HAL_GPIO_WritePin>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40020800 	.word	0x40020800
 8002144:	200008a0 	.word	0x200008a0

08002148 <NRF24_Addr_write>:

void NRF24_Addr_write(uint8_t Adr,uint8_t *ADDRESS){
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	71fb      	strb	r3, [r7, #7]
	Adr |= W_REGISTER;
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	f043 0320 	orr.w	r3, r3, #32
 800215a:	b2db      	uxtb	r3, r3
 800215c:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[5];
	buffer[0] = ADDRESS[4];
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	791b      	ldrb	r3, [r3, #4]
 8002162:	723b      	strb	r3, [r7, #8]
	buffer[1] = ADDRESS[3];
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	78db      	ldrb	r3, [r3, #3]
 8002168:	727b      	strb	r3, [r7, #9]
	buffer[2] = ADDRESS[2];
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	789b      	ldrb	r3, [r3, #2]
 800216e:	72bb      	strb	r3, [r7, #10]
	buffer[3] = ADDRESS[1];
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	785b      	ldrb	r3, [r3, #1]
 8002174:	72fb      	strb	r3, [r7, #11]
	buffer[4] = ADDRESS[0];
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	733b      	strb	r3, [r7, #12]

	NRF24_select();
 800217c:	2200      	movs	r2, #0
 800217e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002182:	4812      	ldr	r0, [pc, #72]	@ (80021cc <NRF24_Addr_write+0x84>)
 8002184:	f003 f9c8 	bl	8005518 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8002188:	1dfb      	adds	r3, r7, #7
 800218a:	2201      	movs	r2, #1
 800218c:	4619      	mov	r1, r3
 800218e:	4810      	ldr	r0, [pc, #64]	@ (80021d0 <NRF24_Addr_write+0x88>)
 8002190:	f005 fb1a 	bl	80077c8 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	e00b      	b.n	80021b2 <NRF24_Addr_write+0x6a>
		HAL_SPI_Transmit_DMA(SPI_NRF24, &buffer[n], 1);
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	f107 0208 	add.w	r2, r7, #8
 80021a0:	4413      	add	r3, r2
 80021a2:	2201      	movs	r2, #1
 80021a4:	4619      	mov	r1, r3
 80021a6:	480a      	ldr	r0, [pc, #40]	@ (80021d0 <NRF24_Addr_write+0x88>)
 80021a8:	f005 fb0e 	bl	80077c8 <HAL_SPI_Transmit_DMA>
	for (uint8_t n = 0; n < 5; ++n) {
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	3301      	adds	r3, #1
 80021b0:	73fb      	strb	r3, [r7, #15]
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d9f0      	bls.n	800219a <NRF24_Addr_write+0x52>
	}

	NRF24_unselect();
 80021b8:	2201      	movs	r2, #1
 80021ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021be:	4803      	ldr	r0, [pc, #12]	@ (80021cc <NRF24_Addr_write+0x84>)
 80021c0:	f003 f9aa 	bl	8005518 <HAL_GPIO_WritePin>

}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40020800 	.word	0x40020800
 80021d0:	200008a0 	.word	0x200008a0

080021d4 <NRF24_read>:

uint8_t NRF24_read(uint8_t Adr){
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
	uint8_t Replay;
	NRF24_select();
 80021de:	2200      	movs	r2, #0
 80021e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021e4:	480d      	ldr	r0, [pc, #52]	@ (800221c <NRF24_read+0x48>)
 80021e6:	f003 f997 	bl	8005518 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 80021ea:	1dfb      	adds	r3, r7, #7
 80021ec:	2201      	movs	r2, #1
 80021ee:	4619      	mov	r1, r3
 80021f0:	480b      	ldr	r0, [pc, #44]	@ (8002220 <NRF24_read+0x4c>)
 80021f2:	f005 fae9 	bl	80077c8 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(SPI_NRF24, &Replay, 1);
 80021f6:	f107 030f 	add.w	r3, r7, #15
 80021fa:	2201      	movs	r2, #1
 80021fc:	4619      	mov	r1, r3
 80021fe:	4808      	ldr	r0, [pc, #32]	@ (8002220 <NRF24_read+0x4c>)
 8002200:	f005 fb94 	bl	800792c <HAL_SPI_Receive_DMA>
	NRF24_unselect();
 8002204:	2201      	movs	r2, #1
 8002206:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800220a:	4804      	ldr	r0, [pc, #16]	@ (800221c <NRF24_read+0x48>)
 800220c:	f003 f984 	bl	8005518 <HAL_GPIO_WritePin>
	return Replay;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40020800 	.word	0x40020800
 8002220:	200008a0 	.word	0x200008a0

08002224 <NRF24_Addr_read>:

void NRF24_Addr_read(uint8_t Adr){
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[5];
	NRF24_select();
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002234:	4836      	ldr	r0, [pc, #216]	@ (8002310 <NRF24_Addr_read+0xec>)
 8002236:	f003 f96f 	bl	8005518 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 800223a:	1dfb      	adds	r3, r7, #7
 800223c:	2201      	movs	r2, #1
 800223e:	4619      	mov	r1, r3
 8002240:	4834      	ldr	r0, [pc, #208]	@ (8002314 <NRF24_Addr_read+0xf0>)
 8002242:	f005 fac1 	bl	80077c8 <HAL_SPI_Transmit_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	e00b      	b.n	8002264 <NRF24_Addr_read+0x40>
		HAL_SPI_Receive_DMA(SPI_NRF24, &Buffer[i], 1);
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	f107 0208 	add.w	r2, r7, #8
 8002252:	4413      	add	r3, r2
 8002254:	2201      	movs	r2, #1
 8002256:	4619      	mov	r1, r3
 8002258:	482e      	ldr	r0, [pc, #184]	@ (8002314 <NRF24_Addr_read+0xf0>)
 800225a:	f005 fb67 	bl	800792c <HAL_SPI_Receive_DMA>
	for (uint8_t i = 0; i < 5; ++i) {
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	3301      	adds	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	2b04      	cmp	r3, #4
 8002268:	d9f0      	bls.n	800224c <NRF24_Addr_read+0x28>
	}
	NRF24_unselect();
 800226a:	2201      	movs	r2, #1
 800226c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002270:	4827      	ldr	r0, [pc, #156]	@ (8002310 <NRF24_Addr_read+0xec>)
 8002272:	f003 f951 	bl	8005518 <HAL_GPIO_WritePin>
	switch (Adr) {
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	2b10      	cmp	r3, #16
 800227a:	d030      	beq.n	80022de <NRF24_Addr_read+0xba>
 800227c:	2b10      	cmp	r3, #16
 800227e:	dc43      	bgt.n	8002308 <NRF24_Addr_read+0xe4>
 8002280:	2b0a      	cmp	r3, #10
 8002282:	d002      	beq.n	800228a <NRF24_Addr_read+0x66>
 8002284:	2b0b      	cmp	r3, #11
 8002286:	d015      	beq.n	80022b4 <NRF24_Addr_read+0x90>
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
			break;
	}
}
 8002288:	e03e      	b.n	8002308 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[4]=Buffer[0];
 800228a:	7a3a      	ldrb	r2, [r7, #8]
 800228c:	4b22      	ldr	r3, [pc, #136]	@ (8002318 <NRF24_Addr_read+0xf4>)
 800228e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[3]=Buffer[1];
 8002292:	7a7a      	ldrb	r2, [r7, #9]
 8002294:	4b20      	ldr	r3, [pc, #128]	@ (8002318 <NRF24_Addr_read+0xf4>)
 8002296:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[2]=Buffer[2];
 800229a:	7aba      	ldrb	r2, [r7, #10]
 800229c:	4b1e      	ldr	r3, [pc, #120]	@ (8002318 <NRF24_Addr_read+0xf4>)
 800229e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[1]=Buffer[3];
 80022a2:	7afa      	ldrb	r2, [r7, #11]
 80022a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002318 <NRF24_Addr_read+0xf4>)
 80022a6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
			NRF24_Configurations_Struct.Actual.RX_ADDR_P0[0]=Buffer[4];
 80022aa:	7b3a      	ldrb	r2, [r7, #12]
 80022ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002318 <NRF24_Addr_read+0xf4>)
 80022ae:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
			break;
 80022b2:	e029      	b.n	8002308 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[4]=Buffer[0];
 80022b4:	7a3a      	ldrb	r2, [r7, #8]
 80022b6:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <NRF24_Addr_read+0xf4>)
 80022b8:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[3]=Buffer[1];
 80022bc:	7a7a      	ldrb	r2, [r7, #9]
 80022be:	4b16      	ldr	r3, [pc, #88]	@ (8002318 <NRF24_Addr_read+0xf4>)
 80022c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[2]=Buffer[2];
 80022c4:	7aba      	ldrb	r2, [r7, #10]
 80022c6:	4b14      	ldr	r3, [pc, #80]	@ (8002318 <NRF24_Addr_read+0xf4>)
 80022c8:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[1]=Buffer[3];
 80022cc:	7afa      	ldrb	r2, [r7, #11]
 80022ce:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <NRF24_Addr_read+0xf4>)
 80022d0:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
			NRF24_Configurations_Struct.Actual.RX_ADDR_P1[0]=Buffer[4];
 80022d4:	7b3a      	ldrb	r2, [r7, #12]
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <NRF24_Addr_read+0xf4>)
 80022d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
			break;
 80022dc:	e014      	b.n	8002308 <NRF24_Addr_read+0xe4>
			NRF24_Configurations_Struct.Actual.TX_ADDR[4]=Buffer[0];
 80022de:	7a3a      	ldrb	r2, [r7, #8]
 80022e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <NRF24_Addr_read+0xf4>)
 80022e2:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
			NRF24_Configurations_Struct.Actual.TX_ADDR[3]=Buffer[1];
 80022e6:	7a7a      	ldrb	r2, [r7, #9]
 80022e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <NRF24_Addr_read+0xf4>)
 80022ea:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
			NRF24_Configurations_Struct.Actual.TX_ADDR[2]=Buffer[2];
 80022ee:	7aba      	ldrb	r2, [r7, #10]
 80022f0:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <NRF24_Addr_read+0xf4>)
 80022f2:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
			NRF24_Configurations_Struct.Actual.TX_ADDR[1]=Buffer[3];
 80022f6:	7afa      	ldrb	r2, [r7, #11]
 80022f8:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <NRF24_Addr_read+0xf4>)
 80022fa:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
			NRF24_Configurations_Struct.Actual.TX_ADDR[0]=Buffer[4];
 80022fe:	7b3a      	ldrb	r2, [r7, #12]
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <NRF24_Addr_read+0xf4>)
 8002302:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
			break;
 8002306:	bf00      	nop
}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40020800 	.word	0x40020800
 8002314:	200008a0 	.word	0x200008a0
 8002318:	20000384 	.word	0x20000384

0800231c <NRF24_FlushTxFIFO>:

void NRF24_FlushTxFIFO(void){
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_TX;
 8002322:	23e1      	movs	r3, #225	@ 0xe1
 8002324:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8002326:	2200      	movs	r2, #0
 8002328:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800232c:	4809      	ldr	r0, [pc, #36]	@ (8002354 <NRF24_FlushTxFIFO+0x38>)
 800232e:	f003 f8f3 	bl	8005518 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8002332:	1dfb      	adds	r3, r7, #7
 8002334:	2201      	movs	r2, #1
 8002336:	4619      	mov	r1, r3
 8002338:	4807      	ldr	r0, [pc, #28]	@ (8002358 <NRF24_FlushTxFIFO+0x3c>)
 800233a:	f005 fa45 	bl	80077c8 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 800233e:	2201      	movs	r2, #1
 8002340:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002344:	4803      	ldr	r0, [pc, #12]	@ (8002354 <NRF24_FlushTxFIFO+0x38>)
 8002346:	f003 f8e7 	bl	8005518 <HAL_GPIO_WritePin>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40020800 	.word	0x40020800
 8002358:	200008a0 	.word	0x200008a0

0800235c <NRF24_FlushRxFIFO>:

void NRF24_FlushRxFIFO(void){
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
	uint8_t Adr = FLUSH_RX;
 8002362:	23e2      	movs	r3, #226	@ 0xe2
 8002364:	71fb      	strb	r3, [r7, #7]
	NRF24_select();
 8002366:	2200      	movs	r2, #0
 8002368:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800236c:	4809      	ldr	r0, [pc, #36]	@ (8002394 <NRF24_FlushRxFIFO+0x38>)
 800236e:	f003 f8d3 	bl	8005518 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(SPI_NRF24, &Adr, 1);
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	2201      	movs	r2, #1
 8002376:	4619      	mov	r1, r3
 8002378:	4807      	ldr	r0, [pc, #28]	@ (8002398 <NRF24_FlushRxFIFO+0x3c>)
 800237a:	f005 fa25 	bl	80077c8 <HAL_SPI_Transmit_DMA>
	NRF24_unselect();
 800237e:	2201      	movs	r2, #1
 8002380:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002384:	4803      	ldr	r0, [pc, #12]	@ (8002394 <NRF24_FlushRxFIFO+0x38>)
 8002386:	f003 f8c7 	bl	8005518 <HAL_GPIO_WritePin>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40020800 	.word	0x40020800
 8002398:	200008a0 	.word	0x200008a0

0800239c <NRF24_ActualConfiguration>:
	Adr |= W_REGISTER;
	Buffer |= 0x02;
	NRF24_write(Adr, Buffer);
}

void NRF24_ActualConfiguration(void){
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
	NRF24_Configurations_Struct.Actual.CONFIG 		= NRF24_read(CONFIG);
 80023a0:	2000      	movs	r0, #0
 80023a2:	f7ff ff17 	bl	80021d4 <NRF24_read>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 80023ac:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
	NRF24_Configurations_Struct.Actual.EN_AA  		= NRF24_read(EN_AA);
 80023b0:	2001      	movs	r0, #1
 80023b2:	f7ff ff0f 	bl	80021d4 <NRF24_read>
 80023b6:	4603      	mov	r3, r0
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 80023bc:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
	NRF24_Configurations_Struct.Actual.EN_RXADDR  	= NRF24_read(EN_RXADDR);
 80023c0:	2002      	movs	r0, #2
 80023c2:	f7ff ff07 	bl	80021d4 <NRF24_read>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b57      	ldr	r3, [pc, #348]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 80023cc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
	NRF24_Configurations_Struct.Actual.SETUP_AW  	= NRF24_read(SETUP_AW);
 80023d0:	2003      	movs	r0, #3
 80023d2:	f7ff feff 	bl	80021d4 <NRF24_read>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	4b53      	ldr	r3, [pc, #332]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 80023dc:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
	NRF24_Configurations_Struct.Actual.SETUP_RETR 	= NRF24_read(SETUP_RETR);
 80023e0:	2004      	movs	r0, #4
 80023e2:	f7ff fef7 	bl	80021d4 <NRF24_read>
 80023e6:	4603      	mov	r3, r0
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 80023ec:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
	NRF24_Configurations_Struct.Actual.RF_CH  		= NRF24_read(RF_CH);
 80023f0:	2005      	movs	r0, #5
 80023f2:	f7ff feef 	bl	80021d4 <NRF24_read>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 80023fc:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
	NRF24_Configurations_Struct.Actual.RF_SETUP  	= NRF24_read(RF_SETUP);
 8002400:	2006      	movs	r0, #6
 8002402:	f7ff fee7 	bl	80021d4 <NRF24_read>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	4b47      	ldr	r3, [pc, #284]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 800240c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
	NRF24_Configurations_Struct.Actual.STATUS  		= NRF24_read(STATUS);
 8002410:	2007      	movs	r0, #7
 8002412:	f7ff fedf 	bl	80021d4 <NRF24_read>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	4b43      	ldr	r3, [pc, #268]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 800241c:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
	NRF24_Configurations_Struct.Actual.OBSERVE  	= NRF24_read(OBSERVE);
 8002420:	2008      	movs	r0, #8
 8002422:	f7ff fed7 	bl	80021d4 <NRF24_read>
 8002426:	4603      	mov	r3, r0
 8002428:	461a      	mov	r2, r3
 800242a:	4b3f      	ldr	r3, [pc, #252]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 800242c:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
	NRF24_Configurations_Struct.Actual.CD  			= NRF24_read(CD);
 8002430:	2009      	movs	r0, #9
 8002432:	f7ff fecf 	bl	80021d4 <NRF24_read>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	4b3b      	ldr	r3, [pc, #236]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 800243c:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
	NRF24_Addr_read(RX_ADDR_P0);
 8002440:	200a      	movs	r0, #10
 8002442:	f7ff feef 	bl	8002224 <NRF24_Addr_read>
	NRF24_Addr_read(RX_ADDR_P1);
 8002446:	200b      	movs	r0, #11
 8002448:	f7ff feec 	bl	8002224 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_ADDR_P2  	= NRF24_read(RX_ADDR_P2);
 800244c:	200c      	movs	r0, #12
 800244e:	f7ff fec1 	bl	80021d4 <NRF24_read>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	4b34      	ldr	r3, [pc, #208]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 8002458:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	NRF24_Configurations_Struct.Actual.RX_ADDR_P3 	= NRF24_read(RX_ADDR_P3);
 800245c:	200d      	movs	r0, #13
 800245e:	f7ff feb9 	bl	80021d4 <NRF24_read>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	4b30      	ldr	r3, [pc, #192]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 8002468:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	NRF24_Configurations_Struct.Actual.RX_ADDR_P4  	= NRF24_read(RX_ADDR_P4);
 800246c:	200e      	movs	r0, #14
 800246e:	f7ff feb1 	bl	80021d4 <NRF24_read>
 8002472:	4603      	mov	r3, r0
 8002474:	461a      	mov	r2, r3
 8002476:	4b2c      	ldr	r3, [pc, #176]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 8002478:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	NRF24_Configurations_Struct.Actual.RX_ADDR_P5  	= NRF24_read(RX_ADDR_P5);
 800247c:	200f      	movs	r0, #15
 800247e:	f7ff fea9 	bl	80021d4 <NRF24_read>
 8002482:	4603      	mov	r3, r0
 8002484:	461a      	mov	r2, r3
 8002486:	4b28      	ldr	r3, [pc, #160]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 8002488:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	NRF24_Addr_read(TX_ADDR);
 800248c:	2010      	movs	r0, #16
 800248e:	f7ff fec9 	bl	8002224 <NRF24_Addr_read>
	NRF24_Configurations_Struct.Actual.RX_PW_P0  	= NRF24_read(RX_PW_P0);
 8002492:	2011      	movs	r0, #17
 8002494:	f7ff fe9e 	bl	80021d4 <NRF24_read>
 8002498:	4603      	mov	r3, r0
 800249a:	461a      	mov	r2, r3
 800249c:	4b22      	ldr	r3, [pc, #136]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 800249e:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
	NRF24_Configurations_Struct.Actual.RX_PW_P1  	= NRF24_read(RX_PW_P1);
 80024a2:	2012      	movs	r0, #18
 80024a4:	f7ff fe96 	bl	80021d4 <NRF24_read>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 80024ae:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	NRF24_Configurations_Struct.Actual.RX_PW_P2  	= NRF24_read(RX_PW_P2);
 80024b2:	2013      	movs	r0, #19
 80024b4:	f7ff fe8e 	bl	80021d4 <NRF24_read>
 80024b8:	4603      	mov	r3, r0
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 80024be:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
	NRF24_Configurations_Struct.Actual.RX_PW_P3  	= NRF24_read(RX_PW_P3);
 80024c2:	2014      	movs	r0, #20
 80024c4:	f7ff fe86 	bl	80021d4 <NRF24_read>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b16      	ldr	r3, [pc, #88]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 80024ce:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	NRF24_Configurations_Struct.Actual.RX_PW_P4  	= NRF24_read(RX_PW_P4);
 80024d2:	2015      	movs	r0, #21
 80024d4:	f7ff fe7e 	bl	80021d4 <NRF24_read>
 80024d8:	4603      	mov	r3, r0
 80024da:	461a      	mov	r2, r3
 80024dc:	4b12      	ldr	r3, [pc, #72]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 80024de:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	NRF24_Configurations_Struct.Actual.RX_PW_P5  	= NRF24_read(RX_PW_P5);
 80024e2:	2016      	movs	r0, #22
 80024e4:	f7ff fe76 	bl	80021d4 <NRF24_read>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 80024ee:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
	NRF24_Configurations_Struct.Actual.FIFO_STATUS  = NRF24_read(FIFO_STATUS);
 80024f2:	2017      	movs	r0, #23
 80024f4:	f7ff fe6e 	bl	80021d4 <NRF24_read>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 80024fe:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
	NRF24_Configurations_Struct.Actual.DYNPD  		= NRF24_read(DYNPD);
 8002502:	201c      	movs	r0, #28
 8002504:	f7ff fe66 	bl	80021d4 <NRF24_read>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 800250e:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
	NRF24_Configurations_Struct.Actual.FEATURE  	= NRF24_read(FEATURE);
 8002512:	201d      	movs	r0, #29
 8002514:	f7ff fe5e 	bl	80021d4 <NRF24_read>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	4b02      	ldr	r3, [pc, #8]	@ (8002528 <NRF24_ActualConfiguration+0x18c>)
 800251e:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000384 	.word	0x20000384

0800252c <NRF24_config>:

void NRF24_config(NRF24_Address_Configurations_t Configuration_struct){
 800252c:	b084      	sub	sp, #16
 800252e:	b580      	push	{r7, lr}
 8002530:	af00      	add	r7, sp, #0
 8002532:	f107 0c08 	add.w	ip, r7, #8
 8002536:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	NRF24_write(CONFIG,	Configuration_struct.CONFIG);
 800253a:	7a3b      	ldrb	r3, [r7, #8]
 800253c:	4619      	mov	r1, r3
 800253e:	2000      	movs	r0, #0
 8002540:	f7ff fdd4 	bl	80020ec <NRF24_write>
	NRF24_write(EN_AA, Configuration_struct.EN_AA);
 8002544:	7a7b      	ldrb	r3, [r7, #9]
 8002546:	4619      	mov	r1, r3
 8002548:	2001      	movs	r0, #1
 800254a:	f7ff fdcf 	bl	80020ec <NRF24_write>
	NRF24_write(EN_RXADDR,Configuration_struct.EN_RXADDR);
 800254e:	7abb      	ldrb	r3, [r7, #10]
 8002550:	4619      	mov	r1, r3
 8002552:	2002      	movs	r0, #2
 8002554:	f7ff fdca 	bl	80020ec <NRF24_write>
	NRF24_write(SETUP_AW,Configuration_struct.SETUP_AW);
 8002558:	7afb      	ldrb	r3, [r7, #11]
 800255a:	4619      	mov	r1, r3
 800255c:	2003      	movs	r0, #3
 800255e:	f7ff fdc5 	bl	80020ec <NRF24_write>
	NRF24_write(SETUP_RETR,Configuration_struct.SETUP_RETR);
 8002562:	7b3b      	ldrb	r3, [r7, #12]
 8002564:	4619      	mov	r1, r3
 8002566:	2004      	movs	r0, #4
 8002568:	f7ff fdc0 	bl	80020ec <NRF24_write>
	NRF24_write(RF_CH,Configuration_struct.RF_CH);
 800256c:	7b7b      	ldrb	r3, [r7, #13]
 800256e:	4619      	mov	r1, r3
 8002570:	2005      	movs	r0, #5
 8002572:	f7ff fdbb 	bl	80020ec <NRF24_write>
	NRF24_write(RF_SETUP,Configuration_struct.RF_SETUP);
 8002576:	7bbb      	ldrb	r3, [r7, #14]
 8002578:	4619      	mov	r1, r3
 800257a:	2006      	movs	r0, #6
 800257c:	f7ff fdb6 	bl	80020ec <NRF24_write>
	NRF24_write(STATUS,Configuration_struct.STATUS);
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	4619      	mov	r1, r3
 8002584:	2007      	movs	r0, #7
 8002586:	f7ff fdb1 	bl	80020ec <NRF24_write>
	NRF24_write(OBSERVE,Configuration_struct.OBSERVE);
 800258a:	7c3b      	ldrb	r3, [r7, #16]
 800258c:	4619      	mov	r1, r3
 800258e:	2008      	movs	r0, #8
 8002590:	f7ff fdac 	bl	80020ec <NRF24_write>
	NRF24_write(CD,Configuration_struct.CD);
 8002594:	7c7b      	ldrb	r3, [r7, #17]
 8002596:	4619      	mov	r1, r3
 8002598:	2009      	movs	r0, #9
 800259a:	f7ff fda7 	bl	80020ec <NRF24_write>
	NRF24_Addr_write(RX_ADDR_P0, Configuration_struct.RX_ADDR_P0);
 800259e:	f107 0312 	add.w	r3, r7, #18
 80025a2:	4619      	mov	r1, r3
 80025a4:	200a      	movs	r0, #10
 80025a6:	f7ff fdcf 	bl	8002148 <NRF24_Addr_write>
	NRF24_Addr_write(RX_ADDR_P1, Configuration_struct.RX_ADDR_P1);
 80025aa:	f107 0317 	add.w	r3, r7, #23
 80025ae:	4619      	mov	r1, r3
 80025b0:	200b      	movs	r0, #11
 80025b2:	f7ff fdc9 	bl	8002148 <NRF24_Addr_write>
	NRF24_write(RX_ADDR_P2,Configuration_struct.RX_ADDR_P2);
 80025b6:	7f3b      	ldrb	r3, [r7, #28]
 80025b8:	4619      	mov	r1, r3
 80025ba:	200c      	movs	r0, #12
 80025bc:	f7ff fd96 	bl	80020ec <NRF24_write>
	NRF24_write(RX_ADDR_P3,Configuration_struct.RX_ADDR_P3);
 80025c0:	7f7b      	ldrb	r3, [r7, #29]
 80025c2:	4619      	mov	r1, r3
 80025c4:	200d      	movs	r0, #13
 80025c6:	f7ff fd91 	bl	80020ec <NRF24_write>
	NRF24_write(RX_ADDR_P4,Configuration_struct.RX_ADDR_P4);
 80025ca:	7fbb      	ldrb	r3, [r7, #30]
 80025cc:	4619      	mov	r1, r3
 80025ce:	200e      	movs	r0, #14
 80025d0:	f7ff fd8c 	bl	80020ec <NRF24_write>
	NRF24_write(RX_ADDR_P5,Configuration_struct.RX_ADDR_P5);
 80025d4:	7ffb      	ldrb	r3, [r7, #31]
 80025d6:	4619      	mov	r1, r3
 80025d8:	200f      	movs	r0, #15
 80025da:	f7ff fd87 	bl	80020ec <NRF24_write>
	NRF24_Addr_write(TX_ADDR, Configuration_struct.TX_ADDR);
 80025de:	f107 0320 	add.w	r3, r7, #32
 80025e2:	4619      	mov	r1, r3
 80025e4:	2010      	movs	r0, #16
 80025e6:	f7ff fdaf 	bl	8002148 <NRF24_Addr_write>
	NRF24_write(RX_PW_P0,Configuration_struct.RX_PW_P0);
 80025ea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80025ee:	4619      	mov	r1, r3
 80025f0:	2011      	movs	r0, #17
 80025f2:	f7ff fd7b 	bl	80020ec <NRF24_write>
	NRF24_write(RX_PW_P1,Configuration_struct.RX_PW_P1);
 80025f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80025fa:	4619      	mov	r1, r3
 80025fc:	2012      	movs	r0, #18
 80025fe:	f7ff fd75 	bl	80020ec <NRF24_write>
	NRF24_write(RX_PW_P2,Configuration_struct.RX_PW_P2);
 8002602:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002606:	4619      	mov	r1, r3
 8002608:	2013      	movs	r0, #19
 800260a:	f7ff fd6f 	bl	80020ec <NRF24_write>
	NRF24_write(RX_PW_P3,Configuration_struct.RX_PW_P3);
 800260e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002612:	4619      	mov	r1, r3
 8002614:	2014      	movs	r0, #20
 8002616:	f7ff fd69 	bl	80020ec <NRF24_write>
	NRF24_write(RX_PW_P4,Configuration_struct.RX_PW_P4);
 800261a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800261e:	4619      	mov	r1, r3
 8002620:	2015      	movs	r0, #21
 8002622:	f7ff fd63 	bl	80020ec <NRF24_write>
	NRF24_write(RX_PW_P5,Configuration_struct.RX_PW_P5);
 8002626:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800262a:	4619      	mov	r1, r3
 800262c:	2016      	movs	r0, #22
 800262e:	f7ff fd5d 	bl	80020ec <NRF24_write>
	NRF24_write(FIFO_STATUS,Configuration_struct.FIFO_STATUS);
 8002632:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002636:	4619      	mov	r1, r3
 8002638:	2017      	movs	r0, #23
 800263a:	f7ff fd57 	bl	80020ec <NRF24_write>
	NRF24_write(DYNPD,Configuration_struct.DYNPD);
 800263e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002642:	4619      	mov	r1, r3
 8002644:	201c      	movs	r0, #28
 8002646:	f7ff fd51 	bl	80020ec <NRF24_write>
	NRF24_write(FEATURE,Configuration_struct.FEATURE);
 800264a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800264e:	4619      	mov	r1, r3
 8002650:	201d      	movs	r0, #29
 8002652:	f7ff fd4b 	bl	80020ec <NRF24_write>
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800265e:	b004      	add	sp, #16
 8002660:	4770      	bx	lr
	...

08002664 <NRF24_DefaultConfiguration>:

void NRF24_DefaultConfiguration(void){
 8002664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002666:	b087      	sub	sp, #28
 8002668:	af06      	add	r7, sp, #24
	NRF24_FlushTxFIFO();
 800266a:	f7ff fe57 	bl	800231c <NRF24_FlushTxFIFO>
	NRF24_FlushRxFIFO();
 800266e:	f7ff fe75 	bl	800235c <NRF24_FlushRxFIFO>
	NRF24_Configurations_Struct.Default.CONFIG 			= 0x78;
 8002672:	4b48      	ldr	r3, [pc, #288]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 8002674:	2278      	movs	r2, #120	@ 0x78
 8002676:	701a      	strb	r2, [r3, #0]
	NRF24_Configurations_Struct.Default.EN_AA  			= 0x3F;
 8002678:	4b46      	ldr	r3, [pc, #280]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 800267a:	223f      	movs	r2, #63	@ 0x3f
 800267c:	705a      	strb	r2, [r3, #1]
	NRF24_Configurations_Struct.Default.EN_RXADDR  		= 0x03;
 800267e:	4b45      	ldr	r3, [pc, #276]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 8002680:	2203      	movs	r2, #3
 8002682:	709a      	strb	r2, [r3, #2]
	NRF24_Configurations_Struct.Default.SETUP_AW  		= 0x03;
 8002684:	4b43      	ldr	r3, [pc, #268]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 8002686:	2203      	movs	r2, #3
 8002688:	70da      	strb	r2, [r3, #3]
	NRF24_Configurations_Struct.Default.SETUP_RETR 		= 0x03;
 800268a:	4b42      	ldr	r3, [pc, #264]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 800268c:	2203      	movs	r2, #3
 800268e:	711a      	strb	r2, [r3, #4]
	NRF24_Configurations_Struct.Default.RF_CH  			= 0x02;
 8002690:	4b40      	ldr	r3, [pc, #256]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 8002692:	2202      	movs	r2, #2
 8002694:	715a      	strb	r2, [r3, #5]
	NRF24_Configurations_Struct.Default.RF_SETUP  		= 0x09;
 8002696:	4b3f      	ldr	r3, [pc, #252]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 8002698:	2209      	movs	r2, #9
 800269a:	719a      	strb	r2, [r3, #6]
	NRF24_Configurations_Struct.Default.STATUS  		= 0X70;
 800269c:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 800269e:	2270      	movs	r2, #112	@ 0x70
 80026a0:	71da      	strb	r2, [r3, #7]
	NRF24_Configurations_Struct.Default.OBSERVE  		= 0X00;
 80026a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	721a      	strb	r2, [r3, #8]
	NRF24_Configurations_Struct.Default.CD  			= 0x00;
 80026a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	725a      	strb	r2, [r3, #9]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[0]  	= 0xE7;
 80026ae:	4b39      	ldr	r3, [pc, #228]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026b0:	22e7      	movs	r2, #231	@ 0xe7
 80026b2:	729a      	strb	r2, [r3, #10]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[1]  	= 0xE7;
 80026b4:	4b37      	ldr	r3, [pc, #220]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026b6:	22e7      	movs	r2, #231	@ 0xe7
 80026b8:	72da      	strb	r2, [r3, #11]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[2]  	= 0xE7;
 80026ba:	4b36      	ldr	r3, [pc, #216]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026bc:	22e7      	movs	r2, #231	@ 0xe7
 80026be:	731a      	strb	r2, [r3, #12]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[3]  	= 0xE7;
 80026c0:	4b34      	ldr	r3, [pc, #208]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026c2:	22e7      	movs	r2, #231	@ 0xe7
 80026c4:	735a      	strb	r2, [r3, #13]
	NRF24_Configurations_Struct.Default.RX_ADDR_P0[4]  	= 0xE7;
 80026c6:	4b33      	ldr	r3, [pc, #204]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026c8:	22e7      	movs	r2, #231	@ 0xe7
 80026ca:	739a      	strb	r2, [r3, #14]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[0]  	= 0xC2;
 80026cc:	4b31      	ldr	r3, [pc, #196]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026ce:	22c2      	movs	r2, #194	@ 0xc2
 80026d0:	73da      	strb	r2, [r3, #15]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[1]  	= 0xC2;
 80026d2:	4b30      	ldr	r3, [pc, #192]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026d4:	22c2      	movs	r2, #194	@ 0xc2
 80026d6:	741a      	strb	r2, [r3, #16]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[2]  	= 0xC2;
 80026d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026da:	22c2      	movs	r2, #194	@ 0xc2
 80026dc:	745a      	strb	r2, [r3, #17]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[3]  	= 0xC2;
 80026de:	4b2d      	ldr	r3, [pc, #180]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026e0:	22c2      	movs	r2, #194	@ 0xc2
 80026e2:	749a      	strb	r2, [r3, #18]
	NRF24_Configurations_Struct.Default.RX_ADDR_P1[4]  	= 0xC2;
 80026e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026e6:	22c2      	movs	r2, #194	@ 0xc2
 80026e8:	74da      	strb	r2, [r3, #19]
	NRF24_Configurations_Struct.Default.RX_ADDR_P2  	= 0xC3;
 80026ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026ec:	22c3      	movs	r2, #195	@ 0xc3
 80026ee:	751a      	strb	r2, [r3, #20]
	NRF24_Configurations_Struct.Default.RX_ADDR_P3 		= 0xC4;
 80026f0:	4b28      	ldr	r3, [pc, #160]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026f2:	22c4      	movs	r2, #196	@ 0xc4
 80026f4:	755a      	strb	r2, [r3, #21]
	NRF24_Configurations_Struct.Default.RX_ADDR_P4  	= 0xC5;
 80026f6:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026f8:	22c5      	movs	r2, #197	@ 0xc5
 80026fa:	759a      	strb	r2, [r3, #22]
	NRF24_Configurations_Struct.Default.RX_ADDR_P5  	= 0xC6;
 80026fc:	4b25      	ldr	r3, [pc, #148]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 80026fe:	22c6      	movs	r2, #198	@ 0xc6
 8002700:	75da      	strb	r2, [r3, #23]
	NRF24_Configurations_Struct.Default.TX_ADDR[0]   	= 0xE7;
 8002702:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 8002704:	22e7      	movs	r2, #231	@ 0xe7
 8002706:	761a      	strb	r2, [r3, #24]
	NRF24_Configurations_Struct.Default.TX_ADDR[1]   	= 0xE7;
 8002708:	4b22      	ldr	r3, [pc, #136]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 800270a:	22e7      	movs	r2, #231	@ 0xe7
 800270c:	765a      	strb	r2, [r3, #25]
	NRF24_Configurations_Struct.Default.TX_ADDR[2]   	= 0xE7;
 800270e:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 8002710:	22e7      	movs	r2, #231	@ 0xe7
 8002712:	769a      	strb	r2, [r3, #26]
	NRF24_Configurations_Struct.Default.TX_ADDR[3]   	= 0xE7;
 8002714:	4b1f      	ldr	r3, [pc, #124]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 8002716:	22e7      	movs	r2, #231	@ 0xe7
 8002718:	76da      	strb	r2, [r3, #27]
	NRF24_Configurations_Struct.Default.TX_ADDR[4]   	= 0xE7;
 800271a:	4b1e      	ldr	r3, [pc, #120]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 800271c:	22e7      	movs	r2, #231	@ 0xe7
 800271e:	771a      	strb	r2, [r3, #28]
	NRF24_Configurations_Struct.Default.RX_PW_P0  		= 0X20;
 8002720:	4b1c      	ldr	r3, [pc, #112]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 8002722:	2220      	movs	r2, #32
 8002724:	775a      	strb	r2, [r3, #29]
	NRF24_Configurations_Struct.Default.RX_PW_P1  		= 0X20;
 8002726:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 8002728:	2220      	movs	r2, #32
 800272a:	779a      	strb	r2, [r3, #30]
	NRF24_Configurations_Struct.Default.RX_PW_P2  		= 0X00;
 800272c:	4b19      	ldr	r3, [pc, #100]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 800272e:	2200      	movs	r2, #0
 8002730:	77da      	strb	r2, [r3, #31]
	NRF24_Configurations_Struct.Default.RX_PW_P3  		= 0X00;
 8002732:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2020 	strb.w	r2, [r3, #32]
	NRF24_Configurations_Struct.Default.RX_PW_P4  		= 0X00;
 800273a:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	NRF24_Configurations_Struct.Default.RX_PW_P5  		= 0X00;
 8002742:	4b14      	ldr	r3, [pc, #80]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	NRF24_Configurations_Struct.Default.FIFO_STATUS  	= 0X11;
 800274a:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 800274c:	2211      	movs	r2, #17
 800274e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	NRF24_Configurations_Struct.Default.DYNPD  			= 0X00;
 8002752:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	NRF24_Configurations_Struct.Default.FEATURE  		= 0X00;
 800275a:	4b0e      	ldr	r3, [pc, #56]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	NRF24_config(NRF24_Configurations_Struct.Default);
 8002762:	4e0c      	ldr	r6, [pc, #48]	@ (8002794 <NRF24_DefaultConfiguration+0x130>)
 8002764:	466c      	mov	r4, sp
 8002766:	f106 0510 	add.w	r5, r6, #16
 800276a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800276c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800276e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002772:	6020      	str	r0, [r4, #0]
 8002774:	3404      	adds	r4, #4
 8002776:	8021      	strh	r1, [r4, #0]
 8002778:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800277c:	f7ff fed6 	bl	800252c <NRF24_config>
	NRF24_ActualConfiguration();
 8002780:	f7ff fe0c 	bl	800239c <NRF24_ActualConfiguration>
	NRF24_mode = Init;
 8002784:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <NRF24_DefaultConfiguration+0x134>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
}
 800278a:	bf00      	nop
 800278c:	3704      	adds	r7, #4
 800278e:	46bd      	mov	sp, r7
 8002790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002792:	bf00      	nop
 8002794:	20000384 	.word	0x20000384
 8002798:	2000041c 	.word	0x2000041c

0800279c <NRF24_init>:
		HAL_SPI_Receive_DMA(SPI_NRF24, &pData[n], 1);
	}
	NRF24_unselect();
}

void NRF24_init(void){
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
	NRF24_Disable();
 80027a0:	2200      	movs	r2, #0
 80027a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027a6:	4808      	ldr	r0, [pc, #32]	@ (80027c8 <NRF24_init+0x2c>)
 80027a8:	f002 feb6 	bl	8005518 <HAL_GPIO_WritePin>
	NRF24_unselect();
 80027ac:	2201      	movs	r2, #1
 80027ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027b2:	4806      	ldr	r0, [pc, #24]	@ (80027cc <NRF24_init+0x30>)
 80027b4:	f002 feb0 	bl	8005518 <HAL_GPIO_WritePin>
	NRF24_DefaultConfiguration();
 80027b8:	f7ff ff54 	bl	8002664 <NRF24_DefaultConfiguration>
	NRF24_mode = 0;
 80027bc:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <NRF24_init+0x34>)
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020800 	.word	0x40020800
 80027d0:	2000041c 	.word	0x2000041c

080027d4 <get_ACC>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

void get_ACC(void){
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0


	if(!(SYSTEM_STATUS.peripheral_Flags & (MPU60501_ERRORMASK | MPU60502_ERRORMASK))){
 80027d8:	4bb1      	ldr	r3, [pc, #708]	@ (8002aa0 <get_ACC+0x2cc>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f040 8102 	bne.w	80029ea <get_ACC+0x216>
		MPU6050_Read_All(&hi2c1, &MPU6050.Module_1);
 80027e6:	49af      	ldr	r1, [pc, #700]	@ (8002aa4 <get_ACC+0x2d0>)
 80027e8:	48af      	ldr	r0, [pc, #700]	@ (8002aa8 <get_ACC+0x2d4>)
 80027ea:	f7ff fb71 	bl	8001ed0 <MPU6050_Read_All>
		MPU6050_Read_All(&hi2c2, &MPU6050.Module_2);
 80027ee:	49af      	ldr	r1, [pc, #700]	@ (8002aac <get_ACC+0x2d8>)
 80027f0:	48af      	ldr	r0, [pc, #700]	@ (8002ab0 <get_ACC+0x2dc>)
 80027f2:	f7ff fb6d 	bl	8001ed0 <MPU6050_Read_All>

		MPU6050_getPromModule(&MPU6050.Module_1);
 80027f6:	48ab      	ldr	r0, [pc, #684]	@ (8002aa4 <get_ACC+0x2d0>)
 80027f8:	f7ff f8b4 	bl	8001964 <MPU6050_getPromModule>
		MPU6050_getPromModule(&MPU6050.Module_2);
 80027fc:	48ab      	ldr	r0, [pc, #684]	@ (8002aac <get_ACC+0x2d8>)
 80027fe:	f7ff f8b1 	bl	8001964 <MPU6050_getPromModule>

		MPU6050.Data.Accel_X_RAW = (MPU6050.Module_1.Accel_X_RAW + MPU6050.Module_2.Accel_X_RAW)/2;
 8002802:	4ba8      	ldr	r3, [pc, #672]	@ (8002aa4 <get_ACC+0x2d0>)
 8002804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002808:	461a      	mov	r2, r3
 800280a:	4ba6      	ldr	r3, [pc, #664]	@ (8002aa4 <get_ACC+0x2d0>)
 800280c:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	@ 0xb0
 8002810:	4413      	add	r3, r2
 8002812:	0fda      	lsrs	r2, r3, #31
 8002814:	4413      	add	r3, r2
 8002816:	105b      	asrs	r3, r3, #1
 8002818:	b21a      	sxth	r2, r3
 800281a:	4ba2      	ldr	r3, [pc, #648]	@ (8002aa4 <get_ACC+0x2d0>)
 800281c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
		MPU6050.Data.Accel_Y_RAW = (MPU6050.Module_1.Accel_Y_RAW + MPU6050.Module_2.Accel_Y_RAW)/2;
 8002820:	4ba0      	ldr	r3, [pc, #640]	@ (8002aa4 <get_ACC+0x2d0>)
 8002822:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002826:	461a      	mov	r2, r3
 8002828:	4b9e      	ldr	r3, [pc, #632]	@ (8002aa4 <get_ACC+0x2d0>)
 800282a:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	@ 0xb2
 800282e:	4413      	add	r3, r2
 8002830:	0fda      	lsrs	r2, r3, #31
 8002832:	4413      	add	r3, r2
 8002834:	105b      	asrs	r3, r3, #1
 8002836:	b21a      	sxth	r2, r3
 8002838:	4b9a      	ldr	r3, [pc, #616]	@ (8002aa4 <get_ACC+0x2d0>)
 800283a:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		MPU6050.Data.Accel_Z_RAW = (MPU6050.Module_1.Accel_Z_RAW + MPU6050.Module_2.Accel_Z_RAW)/2;
 800283e:	4b99      	ldr	r3, [pc, #612]	@ (8002aa4 <get_ACC+0x2d0>)
 8002840:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002844:	461a      	mov	r2, r3
 8002846:	4b97      	ldr	r3, [pc, #604]	@ (8002aa4 <get_ACC+0x2d0>)
 8002848:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800284c:	4413      	add	r3, r2
 800284e:	0fda      	lsrs	r2, r3, #31
 8002850:	4413      	add	r3, r2
 8002852:	105b      	asrs	r3, r3, #1
 8002854:	b21a      	sxth	r2, r3
 8002856:	4b93      	ldr	r3, [pc, #588]	@ (8002aa4 <get_ACC+0x2d0>)
 8002858:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

		MPU6050.Data.Gyro_X_RAW  = (MPU6050.Module_1.Gyro_X_RAW + MPU6050.Module_2.Gyro_X_RAW)/2;
 800285c:	4b91      	ldr	r3, [pc, #580]	@ (8002aa4 <get_ACC+0x2d0>)
 800285e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002862:	461a      	mov	r2, r3
 8002864:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa4 <get_ACC+0x2d0>)
 8002866:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 800286a:	4413      	add	r3, r2
 800286c:	0fda      	lsrs	r2, r3, #31
 800286e:	4413      	add	r3, r2
 8002870:	105b      	asrs	r3, r3, #1
 8002872:	b21a      	sxth	r2, r3
 8002874:	4b8b      	ldr	r3, [pc, #556]	@ (8002aa4 <get_ACC+0x2d0>)
 8002876:	f8a3 2180 	strh.w	r2, [r3, #384]	@ 0x180
		MPU6050.Data.Gyro_Y_RAW  = (MPU6050.Module_1.Gyro_Y_RAW + MPU6050.Module_2.Gyro_Y_RAW)/2;
 800287a:	4b8a      	ldr	r3, [pc, #552]	@ (8002aa4 <get_ACC+0x2d0>)
 800287c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002880:	461a      	mov	r2, r3
 8002882:	4b88      	ldr	r3, [pc, #544]	@ (8002aa4 <get_ACC+0x2d0>)
 8002884:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	@ 0xd2
 8002888:	4413      	add	r3, r2
 800288a:	0fda      	lsrs	r2, r3, #31
 800288c:	4413      	add	r3, r2
 800288e:	105b      	asrs	r3, r3, #1
 8002890:	b21a      	sxth	r2, r3
 8002892:	4b84      	ldr	r3, [pc, #528]	@ (8002aa4 <get_ACC+0x2d0>)
 8002894:	f8a3 2182 	strh.w	r2, [r3, #386]	@ 0x182
		MPU6050.Data.Gyro_Z_RAW  = (MPU6050.Module_1.Gyro_Z_RAW + MPU6050.Module_2.Gyro_Z_RAW)/2;
 8002898:	4b82      	ldr	r3, [pc, #520]	@ (8002aa4 <get_ACC+0x2d0>)
 800289a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800289e:	461a      	mov	r2, r3
 80028a0:	4b80      	ldr	r3, [pc, #512]	@ (8002aa4 <get_ACC+0x2d0>)
 80028a2:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	@ 0xd4
 80028a6:	4413      	add	r3, r2
 80028a8:	0fda      	lsrs	r2, r3, #31
 80028aa:	4413      	add	r3, r2
 80028ac:	105b      	asrs	r3, r3, #1
 80028ae:	b21a      	sxth	r2, r3
 80028b0:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa4 <get_ACC+0x2d0>)
 80028b2:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

		MPU6050.Data.Ax			 = (MPU6050.Module_1.Ax + MPU6050.Module_2.Ax)/2;
 80028b6:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa4 <get_ACC+0x2d0>)
 80028b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80028bc:	4b79      	ldr	r3, [pc, #484]	@ (8002aa4 <get_ACC+0x2d0>)
 80028be:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 80028c2:	f7fd fc93 	bl	80001ec <__adddf3>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80028d6:	f7fd ff69 	bl	80007ac <__aeabi_ddiv>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4971      	ldr	r1, [pc, #452]	@ (8002aa4 <get_ACC+0x2d0>)
 80028e0:	e9c1 235a 	strd	r2, r3, [r1, #360]	@ 0x168
		MPU6050.Data.Ay			 = (MPU6050.Module_1.Ay + MPU6050.Module_2.Ay)/2;
 80028e4:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa4 <get_ACC+0x2d0>)
 80028e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80028ea:	4b6e      	ldr	r3, [pc, #440]	@ (8002aa4 <get_ACC+0x2d0>)
 80028ec:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80028f0:	f7fd fc7c 	bl	80001ec <__adddf3>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002904:	f7fd ff52 	bl	80007ac <__aeabi_ddiv>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4965      	ldr	r1, [pc, #404]	@ (8002aa4 <get_ACC+0x2d0>)
 800290e:	e9c1 235c 	strd	r2, r3, [r1, #368]	@ 0x170
		MPU6050.Data.Az			 = (MPU6050.Module_1.Az + MPU6050.Module_2.Az)/2;
 8002912:	4b64      	ldr	r3, [pc, #400]	@ (8002aa4 <get_ACC+0x2d0>)
 8002914:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002918:	4b62      	ldr	r3, [pc, #392]	@ (8002aa4 <get_ACC+0x2d0>)
 800291a:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 800291e:	f7fd fc65 	bl	80001ec <__adddf3>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4610      	mov	r0, r2
 8002928:	4619      	mov	r1, r3
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002932:	f7fd ff3b 	bl	80007ac <__aeabi_ddiv>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	495a      	ldr	r1, [pc, #360]	@ (8002aa4 <get_ACC+0x2d0>)
 800293c:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178

		MPU6050.Data.Gx			 = (MPU6050.Module_1.Gx + MPU6050.Module_2.Gx)/2;
 8002940:	4b58      	ldr	r3, [pc, #352]	@ (8002aa4 <get_ACC+0x2d0>)
 8002942:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002946:	4b57      	ldr	r3, [pc, #348]	@ (8002aa4 <get_ACC+0x2d0>)
 8002948:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	@ 0xd8
 800294c:	f7fd fc4e 	bl	80001ec <__adddf3>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002960:	f7fd ff24 	bl	80007ac <__aeabi_ddiv>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	494e      	ldr	r1, [pc, #312]	@ (8002aa4 <get_ACC+0x2d0>)
 800296a:	e9c1 2362 	strd	r2, r3, [r1, #392]	@ 0x188
		MPU6050.Data.Gy			 = (MPU6050.Module_1.Gy + MPU6050.Module_2.Gy)/2;
 800296e:	4b4d      	ldr	r3, [pc, #308]	@ (8002aa4 <get_ACC+0x2d0>)
 8002970:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002974:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa4 <get_ACC+0x2d0>)
 8002976:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 800297a:	f7fd fc37 	bl	80001ec <__adddf3>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800298e:	f7fd ff0d 	bl	80007ac <__aeabi_ddiv>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4943      	ldr	r1, [pc, #268]	@ (8002aa4 <get_ACC+0x2d0>)
 8002998:	e9c1 2364 	strd	r2, r3, [r1, #400]	@ 0x190
		MPU6050.Data.Gz			 = (MPU6050.Module_1.Gz + MPU6050.Module_2.Gz)/2;
 800299c:	4b41      	ldr	r3, [pc, #260]	@ (8002aa4 <get_ACC+0x2d0>)
 800299e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80029a2:	4b40      	ldr	r3, [pc, #256]	@ (8002aa4 <get_ACC+0x2d0>)
 80029a4:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 80029a8:	f7fd fc20 	bl	80001ec <__adddf3>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80029bc:	f7fd fef6 	bl	80007ac <__aeabi_ddiv>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4937      	ldr	r1, [pc, #220]	@ (8002aa4 <get_ACC+0x2d0>)
 80029c6:	e9c1 2366 	strd	r2, r3, [r1, #408]	@ 0x198

		MPU6050.Data.Temperature = (MPU6050.Module_1.Temperature + MPU6050.Module_2.Temperature)/2;
 80029ca:	4b36      	ldr	r3, [pc, #216]	@ (8002aa4 <get_ACC+0x2d0>)
 80029cc:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80029d0:	4b34      	ldr	r3, [pc, #208]	@ (8002aa4 <get_ACC+0x2d0>)
 80029d2:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 80029d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029da:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80029de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e2:	4b30      	ldr	r3, [pc, #192]	@ (8002aa4 <get_ACC+0x2d0>)
 80029e4:	edc3 7a68 	vstr	s15, [r3, #416]	@ 0x1a0
 80029e8:	e0bf      	b.n	8002b6a <get_ACC+0x396>
	}
	else if(!(SYSTEM_STATUS.peripheral_Flags & MPU60501_ERRORMASK)){
 80029ea:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa0 <get_ACC+0x2cc>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d15e      	bne.n	8002ab4 <get_ACC+0x2e0>
		MPU6050_Read_All(&hi2c1, &MPU6050.Module_1);
 80029f6:	492b      	ldr	r1, [pc, #172]	@ (8002aa4 <get_ACC+0x2d0>)
 80029f8:	482b      	ldr	r0, [pc, #172]	@ (8002aa8 <get_ACC+0x2d4>)
 80029fa:	f7ff fa69 	bl	8001ed0 <MPU6050_Read_All>
		MPU6050_getPromModule(&MPU6050.Module_1);
 80029fe:	4829      	ldr	r0, [pc, #164]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a00:	f7fe ffb0 	bl	8001964 <MPU6050_getPromModule>

		MPU6050.Data.Accel_X_RAW = MPU6050.Module_1.Accel_X_RAW;
 8002a04:	4b27      	ldr	r3, [pc, #156]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a0a:	4b26      	ldr	r3, [pc, #152]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a0c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
		MPU6050.Data.Accel_Y_RAW = MPU6050.Module_1.Accel_Y_RAW;
 8002a10:	4b24      	ldr	r3, [pc, #144]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a12:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8002a16:	4b23      	ldr	r3, [pc, #140]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a18:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		MPU6050.Data.Accel_Z_RAW = MPU6050.Module_1.Accel_Z_RAW;
 8002a1c:	4b21      	ldr	r3, [pc, #132]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a1e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002a22:	4b20      	ldr	r3, [pc, #128]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a24:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

		MPU6050.Data.Gyro_X_RAW  = MPU6050.Module_1.Gyro_X_RAW;
 8002a28:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a2a:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a30:	f8a3 2180 	strh.w	r2, [r3, #384]	@ 0x180
		MPU6050.Data.Gyro_Y_RAW  = MPU6050.Module_1.Gyro_Y_RAW;
 8002a34:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a36:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a3c:	f8a3 2182 	strh.w	r2, [r3, #386]	@ 0x182
		MPU6050.Data.Gyro_Z_RAW  = MPU6050.Module_1.Gyro_Z_RAW;
 8002a40:	4b18      	ldr	r3, [pc, #96]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a42:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 8002a46:	4b17      	ldr	r3, [pc, #92]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a48:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

		MPU6050.Data.Ax			 = MPU6050.Module_1.Ax;
 8002a4c:	4b15      	ldr	r3, [pc, #84]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a4e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a52:	4914      	ldr	r1, [pc, #80]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a54:	e9c1 235a 	strd	r2, r3, [r1, #360]	@ 0x168
		MPU6050.Data.Ay			 = MPU6050.Module_1.Ay;
 8002a58:	4b12      	ldr	r3, [pc, #72]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a5a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002a5e:	4911      	ldr	r1, [pc, #68]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a60:	e9c1 235c 	strd	r2, r3, [r1, #368]	@ 0x170
		MPU6050.Data.Az			 = MPU6050.Module_1.Az;
 8002a64:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a66:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a6a:	490e      	ldr	r1, [pc, #56]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a6c:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178

		MPU6050.Data.Gx			 = MPU6050.Module_1.Gx;
 8002a70:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a72:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002a76:	490b      	ldr	r1, [pc, #44]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a78:	e9c1 2362 	strd	r2, r3, [r1, #392]	@ 0x188
		MPU6050.Data.Gy			 = MPU6050.Module_1.Gy;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a7e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002a82:	4908      	ldr	r1, [pc, #32]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a84:	e9c1 2364 	strd	r2, r3, [r1, #400]	@ 0x190
		MPU6050.Data.Gz			 = MPU6050.Module_1.Gz;
 8002a88:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002a8e:	4905      	ldr	r1, [pc, #20]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a90:	e9c1 2366 	strd	r2, r3, [r1, #408]	@ 0x198

		MPU6050.Data.Temperature = MPU6050.Module_1.Temperature;
 8002a94:	4b03      	ldr	r3, [pc, #12]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	4a02      	ldr	r2, [pc, #8]	@ (8002aa4 <get_ACC+0x2d0>)
 8002a9a:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
 8002a9e:	e064      	b.n	8002b6a <get_ACC+0x396>
 8002aa0:	2000043c 	.word	0x2000043c
 8002aa4:	20000160 	.word	0x20000160
 8002aa8:	200006f4 	.word	0x200006f4
 8002aac:	20000210 	.word	0x20000210
 8002ab0:	20000748 	.word	0x20000748
	}
	else if(!(SYSTEM_STATUS.peripheral_Flags & MPU60502_ERRORMASK)){
 8002ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8002b74 <get_ACC+0x3a0>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d154      	bne.n	8002b6a <get_ACC+0x396>
		MPU6050_Read_All(&hi2c2, &MPU6050.Module_2);
 8002ac0:	492d      	ldr	r1, [pc, #180]	@ (8002b78 <get_ACC+0x3a4>)
 8002ac2:	482e      	ldr	r0, [pc, #184]	@ (8002b7c <get_ACC+0x3a8>)
 8002ac4:	f7ff fa04 	bl	8001ed0 <MPU6050_Read_All>
		MPU6050_getPromModule(&MPU6050.Module_2);
 8002ac8:	482b      	ldr	r0, [pc, #172]	@ (8002b78 <get_ACC+0x3a4>)
 8002aca:	f7fe ff4b 	bl	8001964 <MPU6050_getPromModule>

		MPU6050.Data.Accel_X_RAW = MPU6050.Module_2.Accel_X_RAW;
 8002ace:	4b2c      	ldr	r3, [pc, #176]	@ (8002b80 <get_ACC+0x3ac>)
 8002ad0:	f9b3 20b0 	ldrsh.w	r2, [r3, #176]	@ 0xb0
 8002ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b80 <get_ACC+0x3ac>)
 8002ad6:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
		MPU6050.Data.Accel_Y_RAW = MPU6050.Module_2.Accel_Y_RAW;
 8002ada:	4b29      	ldr	r3, [pc, #164]	@ (8002b80 <get_ACC+0x3ac>)
 8002adc:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	@ 0xb2
 8002ae0:	4b27      	ldr	r3, [pc, #156]	@ (8002b80 <get_ACC+0x3ac>)
 8002ae2:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		MPU6050.Data.Accel_Z_RAW = MPU6050.Module_2.Accel_Z_RAW;
 8002ae6:	4b26      	ldr	r3, [pc, #152]	@ (8002b80 <get_ACC+0x3ac>)
 8002ae8:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	@ 0xb4
 8002aec:	4b24      	ldr	r3, [pc, #144]	@ (8002b80 <get_ACC+0x3ac>)
 8002aee:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

		MPU6050.Data.Gyro_X_RAW  = MPU6050.Module_2.Gyro_X_RAW;
 8002af2:	4b23      	ldr	r3, [pc, #140]	@ (8002b80 <get_ACC+0x3ac>)
 8002af4:	f9b3 20d0 	ldrsh.w	r2, [r3, #208]	@ 0xd0
 8002af8:	4b21      	ldr	r3, [pc, #132]	@ (8002b80 <get_ACC+0x3ac>)
 8002afa:	f8a3 2180 	strh.w	r2, [r3, #384]	@ 0x180
		MPU6050.Data.Gyro_Y_RAW  = MPU6050.Module_2.Gyro_Y_RAW;
 8002afe:	4b20      	ldr	r3, [pc, #128]	@ (8002b80 <get_ACC+0x3ac>)
 8002b00:	f9b3 20d2 	ldrsh.w	r2, [r3, #210]	@ 0xd2
 8002b04:	4b1e      	ldr	r3, [pc, #120]	@ (8002b80 <get_ACC+0x3ac>)
 8002b06:	f8a3 2182 	strh.w	r2, [r3, #386]	@ 0x182
		MPU6050.Data.Gyro_Z_RAW  = MPU6050.Module_2.Gyro_Z_RAW;
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b80 <get_ACC+0x3ac>)
 8002b0c:	f9b3 20d4 	ldrsh.w	r2, [r3, #212]	@ 0xd4
 8002b10:	4b1b      	ldr	r3, [pc, #108]	@ (8002b80 <get_ACC+0x3ac>)
 8002b12:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

		MPU6050.Data.Ax			 = MPU6050.Module_2.Ax;
 8002b16:	4b1a      	ldr	r3, [pc, #104]	@ (8002b80 <get_ACC+0x3ac>)
 8002b18:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8002b1c:	4918      	ldr	r1, [pc, #96]	@ (8002b80 <get_ACC+0x3ac>)
 8002b1e:	e9c1 235a 	strd	r2, r3, [r1, #360]	@ 0x168
		MPU6050.Data.Ay			 = MPU6050.Module_2.Ay;
 8002b22:	4b17      	ldr	r3, [pc, #92]	@ (8002b80 <get_ACC+0x3ac>)
 8002b24:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8002b28:	4915      	ldr	r1, [pc, #84]	@ (8002b80 <get_ACC+0x3ac>)
 8002b2a:	e9c1 235c 	strd	r2, r3, [r1, #368]	@ 0x170
		MPU6050.Data.Az			 = MPU6050.Module_2.Az;
 8002b2e:	4b14      	ldr	r3, [pc, #80]	@ (8002b80 <get_ACC+0x3ac>)
 8002b30:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8002b34:	4912      	ldr	r1, [pc, #72]	@ (8002b80 <get_ACC+0x3ac>)
 8002b36:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178

		MPU6050.Data.Gx			 = MPU6050.Module_2.Gx;
 8002b3a:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <get_ACC+0x3ac>)
 8002b3c:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	@ 0xd8
 8002b40:	490f      	ldr	r1, [pc, #60]	@ (8002b80 <get_ACC+0x3ac>)
 8002b42:	e9c1 2362 	strd	r2, r3, [r1, #392]	@ 0x188
		MPU6050.Data.Gy			 = MPU6050.Module_2.Gy;
 8002b46:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <get_ACC+0x3ac>)
 8002b48:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 8002b4c:	490c      	ldr	r1, [pc, #48]	@ (8002b80 <get_ACC+0x3ac>)
 8002b4e:	e9c1 2364 	strd	r2, r3, [r1, #400]	@ 0x190
		MPU6050.Data.Gz			 = MPU6050.Module_2.Gz;
 8002b52:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <get_ACC+0x3ac>)
 8002b54:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 8002b58:	4909      	ldr	r1, [pc, #36]	@ (8002b80 <get_ACC+0x3ac>)
 8002b5a:	e9c1 2366 	strd	r2, r3, [r1, #408]	@ 0x198

		MPU6050.Data.Temperature = MPU6050.Module_2.Temperature;
 8002b5e:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <get_ACC+0x3ac>)
 8002b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b64:	4a06      	ldr	r2, [pc, #24]	@ (8002b80 <get_ACC+0x3ac>)
 8002b66:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
	}
	MPU6050_getPromModule(&MPU6050.Data);
 8002b6a:	4806      	ldr	r0, [pc, #24]	@ (8002b84 <get_ACC+0x3b0>)
 8002b6c:	f7fe fefa 	bl	8001964 <MPU6050_getPromModule>
}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	2000043c 	.word	0x2000043c
 8002b78:	20000210 	.word	0x20000210
 8002b7c:	20000748 	.word	0x20000748
 8002b80:	20000160 	.word	0x20000160
 8002b84:	200002c0 	.word	0x200002c0

08002b88 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002b88:	b5b0      	push	{r4, r5, r7, lr}
 8002b8a:	b096      	sub	sp, #88	@ 0x58
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	61f8      	str	r0, [r7, #28]
 8002b90:	ed87 0b04 	vstr	d0, [r7, #16]
 8002b94:	ed87 1b02 	vstr	d1, [r7, #8]
 8002b98:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002ba2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ba6:	f7fd fb1f 	bl	80001e8 <__aeabi_dsub>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002bb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002bbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bc0:	f7fd fcca 	bl	8000558 <__aeabi_dmul>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4620      	mov	r0, r4
 8002bca:	4629      	mov	r1, r5
 8002bcc:	f7fd fb0e 	bl	80001ec <__adddf3>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	69f9      	ldr	r1, [r7, #28]
 8002bd6:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bea:	f7fd fcb5 	bl	8000558 <__aeabi_dmul>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002bfc:	f7fd faf4 	bl	80001e8 <__aeabi_dsub>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4610      	mov	r0, r2
 8002c06:	4619      	mov	r1, r3
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002c0e:	f7fd faeb 	bl	80001e8 <__aeabi_dsub>
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4610      	mov	r0, r2
 8002c18:	4619      	mov	r1, r3
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c20:	f7fd fae4 	bl	80001ec <__adddf3>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c30:	f7fd fc92 	bl	8000558 <__aeabi_dmul>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4620      	mov	r0, r4
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	f7fd fad6 	bl	80001ec <__adddf3>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	69f9      	ldr	r1, [r7, #28]
 8002c46:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c5a:	f7fd fc7d 	bl	8000558 <__aeabi_dmul>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4620      	mov	r0, r4
 8002c64:	4629      	mov	r1, r5
 8002c66:	f7fd fabf 	bl	80001e8 <__aeabi_dsub>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	69f9      	ldr	r1, [r7, #28]
 8002c70:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c84:	f7fd fc68 	bl	8000558 <__aeabi_dmul>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	4629      	mov	r1, r5
 8002c90:	f7fd faaa 	bl	80001e8 <__aeabi_dsub>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	69f9      	ldr	r1, [r7, #28]
 8002c9a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002caa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cae:	f7fd fc53 	bl	8000558 <__aeabi_dmul>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	4629      	mov	r1, r5
 8002cba:	f7fd fa97 	bl	80001ec <__adddf3>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	69f9      	ldr	r1, [r7, #28]
 8002cc4:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cd4:	f7fd fa8a 	bl	80001ec <__adddf3>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002ce6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002cea:	f7fd fd5f 	bl	80007ac <__aeabi_ddiv>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002cfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d00:	f7fd fd54 	bl	80007ac <__aeabi_ddiv>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d16:	f7fd fa67 	bl	80001e8 <__aeabi_dsub>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002d28:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d30:	f7fd fc12 	bl	8000558 <__aeabi_dmul>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4620      	mov	r0, r4
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	f7fd fa56 	bl	80001ec <__adddf3>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	69f9      	ldr	r1, [r7, #28]
 8002d46:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002d50:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d58:	f7fd fbfe 	bl	8000558 <__aeabi_dmul>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4620      	mov	r0, r4
 8002d62:	4629      	mov	r1, r5
 8002d64:	f7fd fa42 	bl	80001ec <__adddf3>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	69f9      	ldr	r1, [r7, #28]
 8002d6e:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002d78:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002d82:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8002d8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d94:	f7fd fbe0 	bl	8000558 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	4629      	mov	r1, r5
 8002da0:	f7fd fa22 	bl	80001e8 <__aeabi_dsub>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	69f9      	ldr	r1, [r7, #28]
 8002daa:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002db4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002db8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002dbc:	f7fd fbcc 	bl	8000558 <__aeabi_dmul>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	4629      	mov	r1, r5
 8002dc8:	f7fd fa0e 	bl	80001e8 <__aeabi_dsub>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	69f9      	ldr	r1, [r7, #28]
 8002dd2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002ddc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002de0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002de4:	f7fd fbb8 	bl	8000558 <__aeabi_dmul>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4620      	mov	r0, r4
 8002dee:	4629      	mov	r1, r5
 8002df0:	f7fd f9fa 	bl	80001e8 <__aeabi_dsub>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	69f9      	ldr	r1, [r7, #28]
 8002dfa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002e04:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e0c:	f7fd fba4 	bl	8000558 <__aeabi_dmul>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4620      	mov	r0, r4
 8002e16:	4629      	mov	r1, r5
 8002e18:	f7fd f9e6 	bl	80001e8 <__aeabi_dsub>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	69f9      	ldr	r1, [r7, #28]
 8002e22:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e2c:	ec43 2b17 	vmov	d7, r2, r3
};
 8002e30:	eeb0 0a47 	vmov.f32	s0, s14
 8002e34:	eef0 0a67 	vmov.f32	s1, s15
 8002e38:	3758      	adds	r7, #88	@ 0x58
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002e40 <get_ATTS>:

void get_ATTS(MPU6050_modules_t *DataStruct){
 8002e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e44:	b08a      	sub	sp, #40	@ 0x28
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8002e4a:	f001 faef 	bl	800442c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	4b83      	ldr	r3, [pc, #524]	@ (8003060 <get_ATTS+0x220>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fb04 	bl	8000464 <__aeabi_ui2d>
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	4b80      	ldr	r3, [pc, #512]	@ (8003064 <get_ATTS+0x224>)
 8002e62:	f7fd fca3 	bl	80007ac <__aeabi_ddiv>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    timer = HAL_GetTick();
 8002e6e:	f001 fadd 	bl	800442c <HAL_GetTick>
 8002e72:	4603      	mov	r3, r0
 8002e74:	4a7a      	ldr	r2, [pc, #488]	@ (8003060 <get_ATTS+0x220>)
 8002e76:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Data.Prom.Accel_X_RAW * DataStruct->Data.Prom.Accel_X_RAW + DataStruct->Data.Prom.Accel_Z_RAW * DataStruct->Data.Prom.Accel_Z_RAW);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	@ 0x1f4
 8002e7e:	461a      	mov	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	@ 0x1f4
 8002e86:	fb03 f202 	mul.w	r2, r3, r2
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	@ 0x1f8
 8002e90:	4619      	mov	r1, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	@ 0x1f8
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd faf0 	bl	8000484 <__aeabi_i2d>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	ec43 2b10 	vmov	d0, r2, r3
 8002eac:	f008 f816 	bl	800aedc <sqrt>
 8002eb0:	ed87 0b04 	vstr	d0, [r7, #16]
    if (roll_sqrt != 0.0) {
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ec0:	f7fd fdb2 	bl	8000a28 <__aeabi_dcmpeq>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d11f      	bne.n	8002f0a <get_ATTS+0xca>
        roll = atan(DataStruct->Data.Prom.Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	@ 0x1f6
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd fad7 	bl	8000484 <__aeabi_i2d>
 8002ed6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002eda:	f7fd fc67 	bl	80007ac <__aeabi_ddiv>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	ec43 2b17 	vmov	d7, r2, r3
 8002ee6:	eeb0 0a47 	vmov.f32	s0, s14
 8002eea:	eef0 0a67 	vmov.f32	s1, s15
 8002eee:	f008 f823 	bl	800af38 <atan>
 8002ef2:	ec51 0b10 	vmov	r0, r1, d0
 8002ef6:	a358      	add	r3, pc, #352	@ (adr r3, 8003058 <get_ATTS+0x218>)
 8002ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efc:	f7fd fb2c 	bl	8000558 <__aeabi_dmul>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002f08:	e005      	b.n	8002f16 <get_ATTS+0xd6>
    } else {
        roll = 0.0;
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
    double pitch = atan2(-DataStruct->Data.Prom.Accel_X_RAW, DataStruct->Data.Prom.Accel_Z_RAW) * RAD_TO_DEG;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	@ 0x1f4
 8002f1c:	425b      	negs	r3, r3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fab0 	bl	8000484 <__aeabi_i2d>
 8002f24:	4682      	mov	sl, r0
 8002f26:	468b      	mov	fp, r1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	@ 0x1f8
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd faa8 	bl	8000484 <__aeabi_i2d>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	ec43 2b11 	vmov	d1, r2, r3
 8002f3c:	ec4b ab10 	vmov	d0, sl, fp
 8002f40:	f007 ff8a 	bl	800ae58 <atan2>
 8002f44:	ec51 0b10 	vmov	r0, r1, d0
 8002f48:	a343      	add	r3, pc, #268	@ (adr r3, 8003058 <get_ATTS+0x218>)
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	f7fd fb03 	bl	8000558 <__aeabi_dmul>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	4b42      	ldr	r3, [pc, #264]	@ (8003068 <get_ATTS+0x228>)
 8002f60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f64:	f7fd fd6a 	bl	8000a3c <__aeabi_dcmplt>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <get_ATTS+0x144>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	@ 0x218
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	4b3c      	ldr	r3, [pc, #240]	@ (800306c <get_ATTS+0x22c>)
 8002f7a:	f7fd fd7d 	bl	8000a78 <__aeabi_dcmpgt>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d114      	bne.n	8002fae <get_ATTS+0x16e>
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	4b38      	ldr	r3, [pc, #224]	@ (800306c <get_ATTS+0x22c>)
 8002f8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f8e:	f7fd fd73 	bl	8000a78 <__aeabi_dcmpgt>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d015      	beq.n	8002fc4 <get_ATTS+0x184>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	@ 0x218
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	4b31      	ldr	r3, [pc, #196]	@ (8003068 <get_ATTS+0x228>)
 8002fa4:	f7fd fd4a 	bl	8000a3c <__aeabi_dcmplt>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <get_ATTS+0x184>
        KalmanY.angle = pitch;
 8002fae:	4930      	ldr	r1, [pc, #192]	@ (8003070 <get_ATTS+0x230>)
 8002fb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fb4:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fbe:	e9c1 2386 	strd	r2, r3, [r1, #536]	@ 0x218
 8002fc2:	e014      	b.n	8002fee <get_ATTS+0x1ae>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Data.Gy, dt);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	ed93 7b64 	vldr	d7, [r3, #400]	@ 0x190
 8002fca:	ed97 2b06 	vldr	d2, [r7, #24]
 8002fce:	eeb0 1a47 	vmov.f32	s2, s14
 8002fd2:	eef0 1a67 	vmov.f32	s3, s15
 8002fd6:	ed97 0b02 	vldr	d0, [r7, #8]
 8002fda:	4825      	ldr	r0, [pc, #148]	@ (8003070 <get_ATTS+0x230>)
 8002fdc:	f7ff fdd4 	bl	8002b88 <Kalman_getAngle>
 8002fe0:	eeb0 7a40 	vmov.f32	s14, s0
 8002fe4:	eef0 7a60 	vmov.f32	s15, s1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	ed83 7b86 	vstr	d7, [r3, #536]	@ 0x218
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	@ 0x218
 8002ff4:	4690      	mov	r8, r2
 8002ff6:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800306c <get_ATTS+0x22c>)
 8003000:	4640      	mov	r0, r8
 8003002:	4649      	mov	r1, r9
 8003004:	f7fd fd38 	bl	8000a78 <__aeabi_dcmpgt>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <get_ATTS+0x1e0>
        DataStruct->Data.Gx = -DataStruct->Data.Gx;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	@ 0x188
 8003014:	4614      	mov	r4, r2
 8003016:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	e9c3 4562 	strd	r4, r5, [r3, #392]	@ 0x188
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Data.Gy, dt);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	ed93 7b64 	vldr	d7, [r3, #400]	@ 0x190
 8003026:	ed97 2b06 	vldr	d2, [r7, #24]
 800302a:	eeb0 1a47 	vmov.f32	s2, s14
 800302e:	eef0 1a67 	vmov.f32	s3, s15
 8003032:	ed97 0b08 	vldr	d0, [r7, #32]
 8003036:	480f      	ldr	r0, [pc, #60]	@ (8003074 <get_ATTS+0x234>)
 8003038:	f7ff fda6 	bl	8002b88 <Kalman_getAngle>
 800303c:	eeb0 7a40 	vmov.f32	s14, s0
 8003040:	eef0 7a60 	vmov.f32	s15, s1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	ed83 7b84 	vstr	d7, [r3, #528]	@ 0x210

}
 800304a:	bf00      	nop
 800304c:	3728      	adds	r7, #40	@ 0x28
 800304e:	46bd      	mov	sp, r7
 8003050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003054:	f3af 8000 	nop.w
 8003058:	1a63c1f8 	.word	0x1a63c1f8
 800305c:	404ca5dc 	.word	0x404ca5dc
 8003060:	20000420 	.word	0x20000420
 8003064:	408f4000 	.word	0x408f4000
 8003068:	c0568000 	.word	0xc0568000
 800306c:	40568000 	.word	0x40568000
 8003070:	20000048 	.word	0x20000048
 8003074:	20000000 	.word	0x20000000

08003078 <MEMORY_init>:

#include "Modules/Status/memory.h"

MEMORY_u MEMORY;

void MEMORY_init(void){
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
	Flash_Read(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 800307c:	2206      	movs	r2, #6
 800307e:	4903      	ldr	r1, [pc, #12]	@ (800308c <MEMORY_init+0x14>)
 8003080:	4803      	ldr	r0, [pc, #12]	@ (8003090 <MEMORY_init+0x18>)
 8003082:	f7fe fc51 	bl	8001928 <Flash_Read>
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000424 	.word	0x20000424
 8003090:	08020000 	.word	0x08020000

08003094 <get_STATUS>:

#include "Modules/Status/status.h"

status_t SYSTEM_STATUS;

void get_STATUS(void){
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
	SYSTEM_STATUS.peripheral_Flags = MPU6050_status();
 8003098:	f7fe fe0e 	bl	8001cb8 <MPU6050_status>
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	4b01      	ldr	r3, [pc, #4]	@ (80030a8 <get_STATUS+0x14>)
 80030a2:	701a      	strb	r2, [r3, #0]
}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	2000043c 	.word	0x2000043c

080030ac <DeployParachute>:
 */


#include "Modules/Telemetry/payload.h"

void DeployParachute(void){
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0


	if((abs((int)MPU6050.KalmanAngleX))>45){
 80030b0:	4b0a      	ldr	r3, [pc, #40]	@ (80030dc <DeployParachute+0x30>)
 80030b2:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	@ 0x210
 80030b6:	4610      	mov	r0, r2
 80030b8:	4619      	mov	r1, r3
 80030ba:	f7fd fcfd 	bl	8000ab8 <__aeabi_d2iz>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bfb8      	it	lt
 80030c4:	425b      	neglt	r3, r3
 80030c6:	2b2d      	cmp	r3, #45	@ 0x2d
 80030c8:	dc06      	bgt.n	80030d8 <DeployParachute+0x2c>

	}
	else if((abs((int)MPU6050.KalmanAngleY))>45){
 80030ca:	4b04      	ldr	r3, [pc, #16]	@ (80030dc <DeployParachute+0x30>)
 80030cc:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	@ 0x218
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	f7fd fcf0 	bl	8000ab8 <__aeabi_d2iz>

	}
}
 80030d8:	bf00      	nop
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000160 	.word	0x20000160

080030e0 <init_task_1ms>:

uint16_t test = 300;

//////////////////////////////INICIALIZACIÓN DE FUNCIONES///////////////////////////////////////

void init_task_1ms(void){
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
	MPU6050_Init();
 80030e4:	f7fe fff2 	bl	80020cc <MPU6050_Init>
}
 80030e8:	bf00      	nop
 80030ea:	bd80      	pop	{r7, pc}

080030ec <init_task_5ms>:

void init_task_5ms(void){
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
	BMP280_init();
 80030f0:	f7fe fbcc 	bl	800188c <BMP280_init>


}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <init_task_10ms>:

void init_task_10ms(void){
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0

}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <init_task_50ms>:

void init_task_50ms(void){
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0

}
 800310a:	bf00      	nop
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <init_task_100ms>:

void init_task_100ms(void){
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0

}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <init_task_500ms>:

void init_task_500ms(void){
 8003122:	b580      	push	{r7, lr}
 8003124:	af00      	add	r7, sp, #0
	NRF24_init();
 8003126:	f7ff fb39 	bl	800279c <NRF24_init>
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}

0800312e <task_1ms>:

//////////////////////////////FUNCIONES PERIODICAS///////////////////////////////////////

void task_1ms(void){
 800312e:	b580      	push	{r7, lr}
 8003130:	af00      	add	r7, sp, #0
	get_ACC();
 8003132:	f7ff fb4f 	bl	80027d4 <get_ACC>
	get_STATUS();
 8003136:	f7ff ffad 	bl	8003094 <get_STATUS>
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <task_5ms>:

void task_5ms(void){
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
	BMP280_calculate();
 8003144:	f7fe fbc6 	bl	80018d4 <BMP280_calculate>
	get_ATTS(&MPU6050);
 8003148:	4802      	ldr	r0, [pc, #8]	@ (8003154 <task_5ms+0x14>)
 800314a:	f7ff fe79 	bl	8002e40 <get_ATTS>

}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000160 	.word	0x20000160

08003158 <task_10ms>:

void task_10ms(void){
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
	//if(test == 1){
	//	MPU6050_calibration();
	//	test = 0;
	//}
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <task_50ms>:

void task_50ms(void){
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
	DeployParachute();
 800316c:	f7ff ff9e 	bl	80030ac <DeployParachute>
	  TIM2->CCR4 = test;
 8003170:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <task_50ms+0x20>)
 8003172:	881a      	ldrh	r2, [r3, #0]
 8003174:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003178:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800317a:	210c      	movs	r1, #12
 800317c:	4803      	ldr	r0, [pc, #12]	@ (800318c <task_50ms+0x24>)
 800317e:	f005 fa6b 	bl	8008658 <HAL_TIM_PWM_Start>
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000090 	.word	0x20000090
 800318c:	20000a60 	.word	0x20000a60

08003190 <task_100ms>:

void task_100ms(void){
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0

}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <task_500ms>:

void task_500ms(void){
 800319e:	b480      	push	{r7}
 80031a0:	af00      	add	r7, sp, #0


}
 80031a2:	bf00      	nop
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031b2:	463b      	mov	r3, r7
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80031be:	4b21      	ldr	r3, [pc, #132]	@ (8003244 <MX_ADC1_Init+0x98>)
 80031c0:	4a21      	ldr	r2, [pc, #132]	@ (8003248 <MX_ADC1_Init+0x9c>)
 80031c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80031c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003244 <MX_ADC1_Init+0x98>)
 80031c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80031ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003244 <MX_ADC1_Init+0x98>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80031d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003244 <MX_ADC1_Init+0x98>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80031d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003244 <MX_ADC1_Init+0x98>)
 80031da:	2200      	movs	r2, #0
 80031dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031de:	4b19      	ldr	r3, [pc, #100]	@ (8003244 <MX_ADC1_Init+0x98>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031e6:	4b17      	ldr	r3, [pc, #92]	@ (8003244 <MX_ADC1_Init+0x98>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031ec:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <MX_ADC1_Init+0x98>)
 80031ee:	4a17      	ldr	r2, [pc, #92]	@ (800324c <MX_ADC1_Init+0xa0>)
 80031f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031f2:	4b14      	ldr	r3, [pc, #80]	@ (8003244 <MX_ADC1_Init+0x98>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80031f8:	4b12      	ldr	r3, [pc, #72]	@ (8003244 <MX_ADC1_Init+0x98>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80031fe:	4b11      	ldr	r3, [pc, #68]	@ (8003244 <MX_ADC1_Init+0x98>)
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003206:	4b0f      	ldr	r3, [pc, #60]	@ (8003244 <MX_ADC1_Init+0x98>)
 8003208:	2201      	movs	r2, #1
 800320a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800320c:	480d      	ldr	r0, [pc, #52]	@ (8003244 <MX_ADC1_Init+0x98>)
 800320e:	f001 f919 	bl	8004444 <HAL_ADC_Init>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003218:	f000 fc60 	bl	8003adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800321c:	2301      	movs	r3, #1
 800321e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003220:	2301      	movs	r3, #1
 8003222:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003224:	2300      	movs	r3, #0
 8003226:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003228:	463b      	mov	r3, r7
 800322a:	4619      	mov	r1, r3
 800322c:	4805      	ldr	r0, [pc, #20]	@ (8003244 <MX_ADC1_Init+0x98>)
 800322e:	f001 f94d 	bl	80044cc <HAL_ADC_ConfigChannel>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003238:	f000 fc50 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000440 	.word	0x20000440
 8003248:	40012000 	.word	0x40012000
 800324c:	0f000001 	.word	0x0f000001

08003250 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	@ 0x28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	f107 0314 	add.w	r3, r7, #20
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a17      	ldr	r2, [pc, #92]	@ (80032cc <HAL_ADC_MspInit+0x7c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d127      	bne.n	80032c2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	4b16      	ldr	r3, [pc, #88]	@ (80032d0 <HAL_ADC_MspInit+0x80>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327a:	4a15      	ldr	r2, [pc, #84]	@ (80032d0 <HAL_ADC_MspInit+0x80>)
 800327c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003280:	6453      	str	r3, [r2, #68]	@ 0x44
 8003282:	4b13      	ldr	r3, [pc, #76]	@ (80032d0 <HAL_ADC_MspInit+0x80>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	4b0f      	ldr	r3, [pc, #60]	@ (80032d0 <HAL_ADC_MspInit+0x80>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	4a0e      	ldr	r2, [pc, #56]	@ (80032d0 <HAL_ADC_MspInit+0x80>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6313      	str	r3, [r2, #48]	@ 0x30
 800329e:	4b0c      	ldr	r3, [pc, #48]	@ (80032d0 <HAL_ADC_MspInit+0x80>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_VBat_Pin;
 80032aa:	2302      	movs	r3, #2
 80032ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032ae:	2303      	movs	r3, #3
 80032b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VBat_GPIO_Port, &GPIO_InitStruct);
 80032b6:	f107 0314 	add.w	r3, r7, #20
 80032ba:	4619      	mov	r1, r3
 80032bc:	4805      	ldr	r0, [pc, #20]	@ (80032d4 <HAL_ADC_MspInit+0x84>)
 80032be:	f001 ffa7 	bl	8005210 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80032c2:	bf00      	nop
 80032c4:	3728      	adds	r7, #40	@ 0x28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40012000 	.word	0x40012000
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40020000 	.word	0x40020000

080032d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	4b14      	ldr	r3, [pc, #80]	@ (8003334 <MX_DMA_Init+0x5c>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	4a13      	ldr	r2, [pc, #76]	@ (8003334 <MX_DMA_Init+0x5c>)
 80032e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80032ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ee:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <MX_DMA_Init+0x5c>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80032fa:	2200      	movs	r2, #0
 80032fc:	2105      	movs	r1, #5
 80032fe:	200b      	movs	r0, #11
 8003300:	f001 fbca 	bl	8004a98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003304:	200b      	movs	r0, #11
 8003306:	f001 fbe3 	bl	8004ad0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800330a:	2200      	movs	r2, #0
 800330c:	2105      	movs	r1, #5
 800330e:	200e      	movs	r0, #14
 8003310:	f001 fbc2 	bl	8004a98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003314:	200e      	movs	r0, #14
 8003316:	f001 fbdb 	bl	8004ad0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	2105      	movs	r1, #5
 800331e:	2010      	movs	r0, #16
 8003320:	f001 fbba 	bl	8004a98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003324:	2010      	movs	r0, #16
 8003326:	f001 fbd3 	bl	8004ad0 <HAL_NVIC_EnableIRQ>

}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800

08003338 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a07      	ldr	r2, [pc, #28]	@ (8003364 <vApplicationGetIdleTaskMemory+0x2c>)
 8003348:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4a06      	ldr	r2, [pc, #24]	@ (8003368 <vApplicationGetIdleTaskMemory+0x30>)
 800334e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2280      	movs	r2, #128	@ 0x80
 8003354:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	200004a0 	.word	0x200004a0
 8003368:	200004f4 	.word	0x200004f4

0800336c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800336c:	b5b0      	push	{r4, r5, r7, lr}
 800336e:	b0aa      	sub	sp, #168	@ 0xa8
 8003370:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_5ms */
  osThreadDef(Task_5ms, Task5ms, osPriorityNormal, 0, 128);
 8003372:	4b3a      	ldr	r3, [pc, #232]	@ (800345c <MX_FREERTOS_Init+0xf0>)
 8003374:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8003378:	461d      	mov	r5, r3
 800337a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800337c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800337e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003382:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_5msHandle = osThreadCreate(osThread(Task_5ms), NULL);
 8003386:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f006 faf2 	bl	8009976 <osThreadCreate>
 8003392:	4603      	mov	r3, r0
 8003394:	4a32      	ldr	r2, [pc, #200]	@ (8003460 <MX_FREERTOS_Init+0xf4>)
 8003396:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, Task10ms, osPriorityNormal, 0, 128);
 8003398:	4b32      	ldr	r3, [pc, #200]	@ (8003464 <MX_FREERTOS_Init+0xf8>)
 800339a:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800339e:	461d      	mov	r5, r3
 80033a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 80033ac:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f006 fadf 	bl	8009976 <osThreadCreate>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003468 <MX_FREERTOS_Init+0xfc>)
 80033bc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_50ms */
  osThreadDef(Task_50ms, Task50ms, osPriorityNormal, 0, 128);
 80033be:	4b2b      	ldr	r3, [pc, #172]	@ (800346c <MX_FREERTOS_Init+0x100>)
 80033c0:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80033c4:	461d      	mov	r5, r3
 80033c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_50msHandle = osThreadCreate(osThread(Task_50ms), NULL);
 80033d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f006 facc 	bl	8009976 <osThreadCreate>
 80033de:	4603      	mov	r3, r0
 80033e0:	4a23      	ldr	r2, [pc, #140]	@ (8003470 <MX_FREERTOS_Init+0x104>)
 80033e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, Task100ms, osPriorityNormal, 0, 128);
 80033e4:	4b23      	ldr	r3, [pc, #140]	@ (8003474 <MX_FREERTOS_Init+0x108>)
 80033e6:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80033ea:	461d      	mov	r5, r3
 80033ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 80033f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f006 fab9 	bl	8009976 <osThreadCreate>
 8003404:	4603      	mov	r3, r0
 8003406:	4a1c      	ldr	r2, [pc, #112]	@ (8003478 <MX_FREERTOS_Init+0x10c>)
 8003408:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_500ms */
  osThreadDef(Task_500ms, Task500ms, osPriorityNormal, 0, 128);
 800340a:	4b1c      	ldr	r3, [pc, #112]	@ (800347c <MX_FREERTOS_Init+0x110>)
 800340c:	f107 041c 	add.w	r4, r7, #28
 8003410:	461d      	mov	r5, r3
 8003412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003416:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800341a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_500msHandle = osThreadCreate(osThread(Task_500ms), NULL);
 800341e:	f107 031c 	add.w	r3, r7, #28
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f006 faa6 	bl	8009976 <osThreadCreate>
 800342a:	4603      	mov	r3, r0
 800342c:	4a14      	ldr	r2, [pc, #80]	@ (8003480 <MX_FREERTOS_Init+0x114>)
 800342e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, Task1ms, osPriorityNormal, 0, 128);
 8003430:	4b14      	ldr	r3, [pc, #80]	@ (8003484 <MX_FREERTOS_Init+0x118>)
 8003432:	463c      	mov	r4, r7
 8003434:	461d      	mov	r5, r3
 8003436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800343a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800343e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 8003442:	463b      	mov	r3, r7
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f006 fa95 	bl	8009976 <osThreadCreate>
 800344c:	4603      	mov	r3, r0
 800344e:	4a0e      	ldr	r2, [pc, #56]	@ (8003488 <MX_FREERTOS_Init+0x11c>)
 8003450:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003452:	bf00      	nop
 8003454:	37a8      	adds	r7, #168	@ 0xa8
 8003456:	46bd      	mov	sp, r7
 8003458:	bdb0      	pop	{r4, r5, r7, pc}
 800345a:	bf00      	nop
 800345c:	0800b964 	.word	0x0800b964
 8003460:	20000488 	.word	0x20000488
 8003464:	0800b98c 	.word	0x0800b98c
 8003468:	2000048c 	.word	0x2000048c
 800346c:	0800b9b4 	.word	0x0800b9b4
 8003470:	20000490 	.word	0x20000490
 8003474:	0800b9dc 	.word	0x0800b9dc
 8003478:	20000494 	.word	0x20000494
 800347c:	0800ba04 	.word	0x0800ba04
 8003480:	20000498 	.word	0x20000498
 8003484:	0800ba2c 	.word	0x0800ba2c
 8003488:	2000049c 	.word	0x2000049c

0800348c <Task5ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task5ms */
void Task5ms(void const * argument)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task5ms */
	init_task_5ms();
 8003494:	f7ff fe2a 	bl	80030ec <init_task_5ms>
  /* Infinite loop */
  for(;;)
  {
	task_5ms();
 8003498:	f7ff fe52 	bl	8003140 <task_5ms>
    osDelay(5);
 800349c:	2005      	movs	r0, #5
 800349e:	f006 fab6 	bl	8009a0e <osDelay>
	task_5ms();
 80034a2:	bf00      	nop
 80034a4:	e7f8      	b.n	8003498 <Task5ms+0xc>

080034a6 <Task10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task10ms */
void Task10ms(void const * argument)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task10ms */
	init_task_10ms();
 80034ae:	f7ff fe23 	bl	80030f8 <init_task_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 80034b2:	f7ff fe51 	bl	8003158 <task_10ms>
    osDelay(10);
 80034b6:	200a      	movs	r0, #10
 80034b8:	f006 faa9 	bl	8009a0e <osDelay>
	task_10ms();
 80034bc:	bf00      	nop
 80034be:	e7f8      	b.n	80034b2 <Task10ms+0xc>

080034c0 <Task50ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task50ms */
void Task50ms(void const * argument)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task50ms */
	init_task_50ms();
 80034c8:	f7ff fe1d 	bl	8003106 <init_task_50ms>
  /* Infinite loop */
  for(;;)
  {
	task_50ms();
 80034cc:	f7ff fe4c 	bl	8003168 <task_50ms>
    osDelay(50);
 80034d0:	2032      	movs	r0, #50	@ 0x32
 80034d2:	f006 fa9c 	bl	8009a0e <osDelay>
	task_50ms();
 80034d6:	bf00      	nop
 80034d8:	e7f8      	b.n	80034cc <Task50ms+0xc>

080034da <Task100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task100ms */
void Task100ms(void const * argument)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task100ms */
	init_task_100ms();
 80034e2:	f7ff fe17 	bl	8003114 <init_task_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 80034e6:	f7ff fe53 	bl	8003190 <task_100ms>
    osDelay(100);
 80034ea:	2064      	movs	r0, #100	@ 0x64
 80034ec:	f006 fa8f 	bl	8009a0e <osDelay>
	task_100ms();
 80034f0:	bf00      	nop
 80034f2:	e7f8      	b.n	80034e6 <Task100ms+0xc>

080034f4 <Task500ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task500ms */
void Task500ms(void const * argument)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task500ms */
	init_task_500ms();
 80034fc:	f7ff fe11 	bl	8003122 <init_task_500ms>
  /* Infinite loop */
  for(;;)
  {
	task_500ms();
 8003500:	f7ff fe4d 	bl	800319e <task_500ms>
    osDelay(500);
 8003504:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003508:	f006 fa81 	bl	8009a0e <osDelay>
	task_500ms();
 800350c:	bf00      	nop
 800350e:	e7f7      	b.n	8003500 <Task500ms+0xc>

08003510 <Task1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1ms */
void Task1ms(void const * argument)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1ms */
	init_task_1ms();
 8003518:	f7ff fde2 	bl	80030e0 <init_task_1ms>
  /* Infinite loop */
  for(;;)
  {
	task_1ms();
 800351c:	f7ff fe07 	bl	800312e <task_1ms>
    osDelay(1);
 8003520:	2001      	movs	r0, #1
 8003522:	f006 fa74 	bl	8009a0e <osDelay>
	task_1ms();
 8003526:	bf00      	nop
 8003528:	e7f8      	b.n	800351c <Task1ms+0xc>
	...

0800352c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	@ 0x28
 8003530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003532:	f107 0314 	add.w	r3, r7, #20
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	609a      	str	r2, [r3, #8]
 800353e:	60da      	str	r2, [r3, #12]
 8003540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	4b56      	ldr	r3, [pc, #344]	@ (80036a0 <MX_GPIO_Init+0x174>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	4a55      	ldr	r2, [pc, #340]	@ (80036a0 <MX_GPIO_Init+0x174>)
 800354c:	f043 0304 	orr.w	r3, r3, #4
 8003550:	6313      	str	r3, [r2, #48]	@ 0x30
 8003552:	4b53      	ldr	r3, [pc, #332]	@ (80036a0 <MX_GPIO_Init+0x174>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	4b4f      	ldr	r3, [pc, #316]	@ (80036a0 <MX_GPIO_Init+0x174>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	4a4e      	ldr	r2, [pc, #312]	@ (80036a0 <MX_GPIO_Init+0x174>)
 8003568:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800356c:	6313      	str	r3, [r2, #48]	@ 0x30
 800356e:	4b4c      	ldr	r3, [pc, #304]	@ (80036a0 <MX_GPIO_Init+0x174>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	4b48      	ldr	r3, [pc, #288]	@ (80036a0 <MX_GPIO_Init+0x174>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	4a47      	ldr	r2, [pc, #284]	@ (80036a0 <MX_GPIO_Init+0x174>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	6313      	str	r3, [r2, #48]	@ 0x30
 800358a:	4b45      	ldr	r3, [pc, #276]	@ (80036a0 <MX_GPIO_Init+0x174>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	4b41      	ldr	r3, [pc, #260]	@ (80036a0 <MX_GPIO_Init+0x174>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	4a40      	ldr	r2, [pc, #256]	@ (80036a0 <MX_GPIO_Init+0x174>)
 80035a0:	f043 0302 	orr.w	r3, r3, #2
 80035a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a6:	4b3e      	ldr	r3, [pc, #248]	@ (80036a0 <MX_GPIO_Init+0x174>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 80035b2:	2200      	movs	r2, #0
 80035b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80035b8:	483a      	ldr	r0, [pc, #232]	@ (80036a4 <MX_GPIO_Init+0x178>)
 80035ba:	f001 ffad 	bl	8005518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|BMP_CS_Pin, GPIO_PIN_RESET);
 80035be:	2200      	movs	r2, #0
 80035c0:	2105      	movs	r1, #5
 80035c2:	4839      	ldr	r0, [pc, #228]	@ (80036a8 <MX_GPIO_Init+0x17c>)
 80035c4:	f001 ffa8 	bl	8005518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, uLed_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80035c8:	2200      	movs	r2, #0
 80035ca:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 80035ce:	4837      	ldr	r0, [pc, #220]	@ (80036ac <MX_GPIO_Init+0x180>)
 80035d0:	f001 ffa2 	bl	8005518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CS_Pin;
 80035d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035da:	2301      	movs	r3, #1
 80035dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e2:	2300      	movs	r3, #0
 80035e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CS_GPIO_Port, &GPIO_InitStruct);
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	4619      	mov	r1, r3
 80035ec:	482d      	ldr	r0, [pc, #180]	@ (80036a4 <MX_GPIO_Init+0x178>)
 80035ee:	f001 fe0f 	bl	8005210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80035f2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80035f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035f8:	2303      	movs	r3, #3
 80035fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	4619      	mov	r1, r3
 8003606:	4827      	ldr	r0, [pc, #156]	@ (80036a4 <MX_GPIO_Init+0x178>)
 8003608:	f001 fe02 	bl	8005210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA4 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_12;
 800360c:	f241 0315 	movw	r3, #4117	@ 0x1015
 8003610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003612:	2303      	movs	r3, #3
 8003614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361a:	f107 0314 	add.w	r3, r7, #20
 800361e:	4619      	mov	r1, r3
 8003620:	4822      	ldr	r0, [pc, #136]	@ (80036ac <MX_GPIO_Init+0x180>)
 8003622:	f001 fdf5 	bl	8005210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|BMP_CS_Pin;
 8003626:	2305      	movs	r3, #5
 8003628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800362a:	2301      	movs	r3, #1
 800362c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003632:	2300      	movs	r3, #0
 8003634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003636:	f107 0314 	add.w	r3, r7, #20
 800363a:	4619      	mov	r1, r3
 800363c:	481a      	ldr	r0, [pc, #104]	@ (80036a8 <MX_GPIO_Init+0x17c>)
 800363e:	f001 fde7 	bl	8005210 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 8003642:	f240 2302 	movw	r3, #514	@ 0x202
 8003646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003648:	2303      	movs	r3, #3
 800364a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003650:	f107 0314 	add.w	r3, r7, #20
 8003654:	4619      	mov	r1, r3
 8003656:	4814      	ldr	r0, [pc, #80]	@ (80036a8 <MX_GPIO_Init+0x17c>)
 8003658:	f001 fdda 	bl	8005210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uLed_Pin;
 800365c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003662:	2301      	movs	r3, #1
 8003664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366a:	2300      	movs	r3, #0
 800366c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uLed_GPIO_Port, &GPIO_InitStruct);
 800366e:	f107 0314 	add.w	r3, r7, #20
 8003672:	4619      	mov	r1, r3
 8003674:	480d      	ldr	r0, [pc, #52]	@ (80036ac <MX_GPIO_Init+0x180>)
 8003676:	f001 fdcb 	bl	8005210 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 800367a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800367e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003680:	2301      	movs	r3, #1
 8003682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003688:	2302      	movs	r3, #2
 800368a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 800368c:	f107 0314 	add.w	r3, r7, #20
 8003690:	4619      	mov	r1, r3
 8003692:	4806      	ldr	r0, [pc, #24]	@ (80036ac <MX_GPIO_Init+0x180>)
 8003694:	f001 fdbc 	bl	8005210 <HAL_GPIO_Init>

}
 8003698:	bf00      	nop
 800369a:	3728      	adds	r7, #40	@ 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40020800 	.word	0x40020800
 80036a8:	40020400 	.word	0x40020400
 80036ac:	40020000 	.word	0x40020000

080036b0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036b4:	4b13      	ldr	r3, [pc, #76]	@ (8003704 <MX_I2C1_Init+0x54>)
 80036b6:	4a14      	ldr	r2, [pc, #80]	@ (8003708 <MX_I2C1_Init+0x58>)
 80036b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 80036ba:	4b12      	ldr	r3, [pc, #72]	@ (8003704 <MX_I2C1_Init+0x54>)
 80036bc:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80036c0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036c2:	4b10      	ldr	r3, [pc, #64]	@ (8003704 <MX_I2C1_Init+0x54>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80036c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003704 <MX_I2C1_Init+0x54>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003704 <MX_I2C1_Init+0x54>)
 80036d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80036d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <MX_I2C1_Init+0x54>)
 80036d8:	2200      	movs	r2, #0
 80036da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80036dc:	4b09      	ldr	r3, [pc, #36]	@ (8003704 <MX_I2C1_Init+0x54>)
 80036de:	2200      	movs	r2, #0
 80036e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036e2:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <MX_I2C1_Init+0x54>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036e8:	4b06      	ldr	r3, [pc, #24]	@ (8003704 <MX_I2C1_Init+0x54>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036ee:	4805      	ldr	r0, [pc, #20]	@ (8003704 <MX_I2C1_Init+0x54>)
 80036f0:	f001 ff2c 	bl	800554c <HAL_I2C_Init>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80036fa:	f000 f9ef 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	200006f4 	.word	0x200006f4
 8003708:	40005400 	.word	0x40005400

0800370c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003710:	4b12      	ldr	r3, [pc, #72]	@ (800375c <MX_I2C2_Init+0x50>)
 8003712:	4a13      	ldr	r2, [pc, #76]	@ (8003760 <MX_I2C2_Init+0x54>)
 8003714:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 200000;
 8003716:	4b11      	ldr	r3, [pc, #68]	@ (800375c <MX_I2C2_Init+0x50>)
 8003718:	4a12      	ldr	r2, [pc, #72]	@ (8003764 <MX_I2C2_Init+0x58>)
 800371a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800371c:	4b0f      	ldr	r3, [pc, #60]	@ (800375c <MX_I2C2_Init+0x50>)
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003722:	4b0e      	ldr	r3, [pc, #56]	@ (800375c <MX_I2C2_Init+0x50>)
 8003724:	2200      	movs	r2, #0
 8003726:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003728:	4b0c      	ldr	r3, [pc, #48]	@ (800375c <MX_I2C2_Init+0x50>)
 800372a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800372e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003730:	4b0a      	ldr	r3, [pc, #40]	@ (800375c <MX_I2C2_Init+0x50>)
 8003732:	2200      	movs	r2, #0
 8003734:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003736:	4b09      	ldr	r3, [pc, #36]	@ (800375c <MX_I2C2_Init+0x50>)
 8003738:	2200      	movs	r2, #0
 800373a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800373c:	4b07      	ldr	r3, [pc, #28]	@ (800375c <MX_I2C2_Init+0x50>)
 800373e:	2200      	movs	r2, #0
 8003740:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003742:	4b06      	ldr	r3, [pc, #24]	@ (800375c <MX_I2C2_Init+0x50>)
 8003744:	2200      	movs	r2, #0
 8003746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003748:	4804      	ldr	r0, [pc, #16]	@ (800375c <MX_I2C2_Init+0x50>)
 800374a:	f001 feff 	bl	800554c <HAL_I2C_Init>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003754:	f000 f9c2 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003758:	bf00      	nop
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000748 	.word	0x20000748
 8003760:	40005800 	.word	0x40005800
 8003764:	00030d40 	.word	0x00030d40

08003768 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800376c:	4b12      	ldr	r3, [pc, #72]	@ (80037b8 <MX_I2C3_Init+0x50>)
 800376e:	4a13      	ldr	r2, [pc, #76]	@ (80037bc <MX_I2C3_Init+0x54>)
 8003770:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003772:	4b11      	ldr	r3, [pc, #68]	@ (80037b8 <MX_I2C3_Init+0x50>)
 8003774:	4a12      	ldr	r2, [pc, #72]	@ (80037c0 <MX_I2C3_Init+0x58>)
 8003776:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003778:	4b0f      	ldr	r3, [pc, #60]	@ (80037b8 <MX_I2C3_Init+0x50>)
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800377e:	4b0e      	ldr	r3, [pc, #56]	@ (80037b8 <MX_I2C3_Init+0x50>)
 8003780:	2200      	movs	r2, #0
 8003782:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003784:	4b0c      	ldr	r3, [pc, #48]	@ (80037b8 <MX_I2C3_Init+0x50>)
 8003786:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800378a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800378c:	4b0a      	ldr	r3, [pc, #40]	@ (80037b8 <MX_I2C3_Init+0x50>)
 800378e:	2200      	movs	r2, #0
 8003790:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003792:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <MX_I2C3_Init+0x50>)
 8003794:	2200      	movs	r2, #0
 8003796:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003798:	4b07      	ldr	r3, [pc, #28]	@ (80037b8 <MX_I2C3_Init+0x50>)
 800379a:	2200      	movs	r2, #0
 800379c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800379e:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <MX_I2C3_Init+0x50>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80037a4:	4804      	ldr	r0, [pc, #16]	@ (80037b8 <MX_I2C3_Init+0x50>)
 80037a6:	f001 fed1 	bl	800554c <HAL_I2C_Init>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80037b0:	f000 f994 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	2000079c 	.word	0x2000079c
 80037bc:	40005c00 	.word	0x40005c00
 80037c0:	000186a0 	.word	0x000186a0

080037c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08e      	sub	sp, #56	@ 0x38
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a63      	ldr	r2, [pc, #396]	@ (8003970 <HAL_I2C_MspInit+0x1ac>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d12c      	bne.n	8003840 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	623b      	str	r3, [r7, #32]
 80037ea:	4b62      	ldr	r3, [pc, #392]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ee:	4a61      	ldr	r2, [pc, #388]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	623b      	str	r3, [r7, #32]
 8003800:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003802:	23c0      	movs	r3, #192	@ 0xc0
 8003804:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003806:	2312      	movs	r3, #18
 8003808:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380a:	2300      	movs	r3, #0
 800380c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800380e:	2303      	movs	r3, #3
 8003810:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003812:	2304      	movs	r3, #4
 8003814:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800381a:	4619      	mov	r1, r3
 800381c:	4856      	ldr	r0, [pc, #344]	@ (8003978 <HAL_I2C_MspInit+0x1b4>)
 800381e:	f001 fcf7 	bl	8005210 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	4b53      	ldr	r3, [pc, #332]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	4a52      	ldr	r2, [pc, #328]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 800382c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003830:	6413      	str	r3, [r2, #64]	@ 0x40
 8003832:	4b50      	ldr	r3, [pc, #320]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800383e:	e093      	b.n	8003968 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a4d      	ldr	r2, [pc, #308]	@ (800397c <HAL_I2C_MspInit+0x1b8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d13d      	bne.n	80038c6 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	4b49      	ldr	r3, [pc, #292]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	4a48      	ldr	r2, [pc, #288]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 8003854:	f043 0302 	orr.w	r3, r3, #2
 8003858:	6313      	str	r3, [r2, #48]	@ 0x30
 800385a:	4b46      	ldr	r3, [pc, #280]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	61bb      	str	r3, [r7, #24]
 8003864:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800386c:	2312      	movs	r3, #18
 800386e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003870:	2300      	movs	r3, #0
 8003872:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003874:	2303      	movs	r3, #3
 8003876:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003878:	2304      	movs	r3, #4
 800387a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800387c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003880:	4619      	mov	r1, r3
 8003882:	483d      	ldr	r0, [pc, #244]	@ (8003978 <HAL_I2C_MspInit+0x1b4>)
 8003884:	f001 fcc4 	bl	8005210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003888:	2308      	movs	r3, #8
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800388c:	2312      	movs	r3, #18
 800388e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003894:	2303      	movs	r3, #3
 8003896:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003898:	2309      	movs	r3, #9
 800389a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800389c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038a0:	4619      	mov	r1, r3
 80038a2:	4835      	ldr	r0, [pc, #212]	@ (8003978 <HAL_I2C_MspInit+0x1b4>)
 80038a4:	f001 fcb4 	bl	8005210 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	4b31      	ldr	r3, [pc, #196]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	4a30      	ldr	r2, [pc, #192]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 80038b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80038b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	697b      	ldr	r3, [r7, #20]
}
 80038c4:	e050      	b.n	8003968 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C3)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003980 <HAL_I2C_MspInit+0x1bc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d14b      	bne.n	8003968 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d0:	2300      	movs	r3, #0
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	4b27      	ldr	r3, [pc, #156]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 80038d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d8:	4a26      	ldr	r2, [pc, #152]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	6313      	str	r3, [r2, #48]	@ 0x30
 80038e0:	4b24      	ldr	r3, [pc, #144]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 80038e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	4b20      	ldr	r3, [pc, #128]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 80038f6:	f043 0302 	orr.w	r3, r3, #2
 80038fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80038fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAG_SCL_Pin;
 8003908:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800390c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800390e:	2312      	movs	r3, #18
 8003910:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003916:	2303      	movs	r3, #3
 8003918:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800391a:	2304      	movs	r3, #4
 800391c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SCL_GPIO_Port, &GPIO_InitStruct);
 800391e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003922:	4619      	mov	r1, r3
 8003924:	4817      	ldr	r0, [pc, #92]	@ (8003984 <HAL_I2C_MspInit+0x1c0>)
 8003926:	f001 fc73 	bl	8005210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAG_SDA_Pin;
 800392a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003930:	2312      	movs	r3, #18
 8003932:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003934:	2300      	movs	r3, #0
 8003936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003938:	2303      	movs	r3, #3
 800393a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800393c:	2309      	movs	r3, #9
 800393e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SDA_GPIO_Port, &GPIO_InitStruct);
 8003940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003944:	4619      	mov	r1, r3
 8003946:	480c      	ldr	r0, [pc, #48]	@ (8003978 <HAL_I2C_MspInit+0x1b4>)
 8003948:	f001 fc62 	bl	8005210 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800394c:	2300      	movs	r3, #0
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	4b08      	ldr	r3, [pc, #32]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 8003952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003954:	4a07      	ldr	r2, [pc, #28]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 8003956:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800395a:	6413      	str	r3, [r2, #64]	@ 0x40
 800395c:	4b05      	ldr	r3, [pc, #20]	@ (8003974 <HAL_I2C_MspInit+0x1b0>)
 800395e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003960:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	68bb      	ldr	r3, [r7, #8]
}
 8003968:	bf00      	nop
 800396a:	3738      	adds	r7, #56	@ 0x38
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40005400 	.word	0x40005400
 8003974:	40023800 	.word	0x40023800
 8003978:	40020400 	.word	0x40020400
 800397c:	40005800 	.word	0x40005800
 8003980:	40005c00 	.word	0x40005c00
 8003984:	40020000 	.word	0x40020000

08003988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800398c:	f000 fd18 	bl	80043c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003990:	f000 f82a 	bl	80039e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003994:	f7ff fdca 	bl	800352c <MX_GPIO_Init>
  MX_DMA_Init();
 8003998:	f7ff fc9e 	bl	80032d8 <MX_DMA_Init>
  MX_ADC1_Init();
 800399c:	f7ff fc06 	bl	80031ac <MX_ADC1_Init>
  MX_I2C1_Init();
 80039a0:	f7ff fe86 	bl	80036b0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80039a4:	f7ff feb2 	bl	800370c <MX_I2C2_Init>
  MX_I2C3_Init();
 80039a8:	f7ff fede 	bl	8003768 <MX_I2C3_Init>
  MX_SPI1_Init();
 80039ac:	f000 f89c 	bl	8003ae8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80039b0:	f000 f8d0 	bl	8003b54 <MX_SPI2_Init>
  MX_SPI3_Init();
 80039b4:	f000 f904 	bl	8003bc0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80039b8:	f000 fc66 	bl	8004288 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80039bc:	f000 fb96 	bl	80040ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  MEMORY_init();
 80039c0:	f7ff fb5a 	bl	8003078 <MEMORY_init>
  TIM2->CCR4 = 300;
 80039c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80039c8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039cc:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80039ce:	210c      	movs	r1, #12
 80039d0:	4804      	ldr	r0, [pc, #16]	@ (80039e4 <main+0x5c>)
 80039d2:	f004 fe41 	bl	8008658 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80039d6:	f7ff fcc9 	bl	800336c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80039da:	f005 ffc5 	bl	8009968 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80039de:	bf00      	nop
 80039e0:	e7fd      	b.n	80039de <main+0x56>
 80039e2:	bf00      	nop
 80039e4:	20000a60 	.word	0x20000a60

080039e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b094      	sub	sp, #80	@ 0x50
 80039ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039ee:	f107 0320 	add.w	r3, r7, #32
 80039f2:	2230      	movs	r2, #48	@ 0x30
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f007 f9fc 	bl	800adf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039fc:	f107 030c 	add.w	r3, r7, #12
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	4b27      	ldr	r3, [pc, #156]	@ (8003ab0 <SystemClock_Config+0xc8>)
 8003a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a14:	4a26      	ldr	r2, [pc, #152]	@ (8003ab0 <SystemClock_Config+0xc8>)
 8003a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a1c:	4b24      	ldr	r3, [pc, #144]	@ (8003ab0 <SystemClock_Config+0xc8>)
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	4b21      	ldr	r3, [pc, #132]	@ (8003ab4 <SystemClock_Config+0xcc>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a20      	ldr	r2, [pc, #128]	@ (8003ab4 <SystemClock_Config+0xcc>)
 8003a32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab4 <SystemClock_Config+0xcc>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a44:	2301      	movs	r3, #1
 8003a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003a58:	230c      	movs	r3, #12
 8003a5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8003a5c:	2360      	movs	r3, #96	@ 0x60
 8003a5e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a60:	2302      	movs	r3, #2
 8003a62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003a64:	2304      	movs	r3, #4
 8003a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a68:	f107 0320 	add.w	r3, r7, #32
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f002 fd91 	bl	8006594 <HAL_RCC_OscConfig>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003a78:	f000 f830 	bl	8003adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a7c:	230f      	movs	r3, #15
 8003a7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a80:	2302      	movs	r3, #2
 8003a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003a92:	f107 030c 	add.w	r3, r7, #12
 8003a96:	2103      	movs	r1, #3
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f002 fff3 	bl	8006a84 <HAL_RCC_ClockConfig>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003aa4:	f000 f81a 	bl	8003adc <Error_Handler>
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	3750      	adds	r7, #80	@ 0x50
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40007000 	.word	0x40007000

08003ab8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a04      	ldr	r2, [pc, #16]	@ (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d101      	bne.n	8003ace <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003aca:	f000 fc9b 	bl	8004404 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40014800 	.word	0x40014800

08003adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ae0:	b672      	cpsid	i
}
 8003ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ae4:	bf00      	nop
 8003ae6:	e7fd      	b.n	8003ae4 <Error_Handler+0x8>

08003ae8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003aec:	4b17      	ldr	r3, [pc, #92]	@ (8003b4c <MX_SPI1_Init+0x64>)
 8003aee:	4a18      	ldr	r2, [pc, #96]	@ (8003b50 <MX_SPI1_Init+0x68>)
 8003af0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003af2:	4b16      	ldr	r3, [pc, #88]	@ (8003b4c <MX_SPI1_Init+0x64>)
 8003af4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003af8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003afa:	4b14      	ldr	r3, [pc, #80]	@ (8003b4c <MX_SPI1_Init+0x64>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b00:	4b12      	ldr	r3, [pc, #72]	@ (8003b4c <MX_SPI1_Init+0x64>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b06:	4b11      	ldr	r3, [pc, #68]	@ (8003b4c <MX_SPI1_Init+0x64>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b4c <MX_SPI1_Init+0x64>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b12:	4b0e      	ldr	r3, [pc, #56]	@ (8003b4c <MX_SPI1_Init+0x64>)
 8003b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b4c <MX_SPI1_Init+0x64>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b20:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <MX_SPI1_Init+0x64>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b26:	4b09      	ldr	r3, [pc, #36]	@ (8003b4c <MX_SPI1_Init+0x64>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b2c:	4b07      	ldr	r3, [pc, #28]	@ (8003b4c <MX_SPI1_Init+0x64>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003b32:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <MX_SPI1_Init+0x64>)
 8003b34:	220a      	movs	r2, #10
 8003b36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b38:	4804      	ldr	r0, [pc, #16]	@ (8003b4c <MX_SPI1_Init+0x64>)
 8003b3a:	f003 f9b5 	bl	8006ea8 <HAL_SPI_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003b44:	f7ff ffca 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	200007f0 	.word	0x200007f0
 8003b50:	40013000 	.word	0x40013000

08003b54 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003b58:	4b17      	ldr	r3, [pc, #92]	@ (8003bb8 <MX_SPI2_Init+0x64>)
 8003b5a:	4a18      	ldr	r2, [pc, #96]	@ (8003bbc <MX_SPI2_Init+0x68>)
 8003b5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003b5e:	4b16      	ldr	r3, [pc, #88]	@ (8003bb8 <MX_SPI2_Init+0x64>)
 8003b60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003b66:	4b14      	ldr	r3, [pc, #80]	@ (8003bb8 <MX_SPI2_Init+0x64>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b6c:	4b12      	ldr	r3, [pc, #72]	@ (8003bb8 <MX_SPI2_Init+0x64>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b72:	4b11      	ldr	r3, [pc, #68]	@ (8003bb8 <MX_SPI2_Init+0x64>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b78:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb8 <MX_SPI2_Init+0x64>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003bb8 <MX_SPI2_Init+0x64>)
 8003b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b84:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003b86:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb8 <MX_SPI2_Init+0x64>)
 8003b88:	2218      	movs	r2, #24
 8003b8a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb8 <MX_SPI2_Init+0x64>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b92:	4b09      	ldr	r3, [pc, #36]	@ (8003bb8 <MX_SPI2_Init+0x64>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b98:	4b07      	ldr	r3, [pc, #28]	@ (8003bb8 <MX_SPI2_Init+0x64>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003b9e:	4b06      	ldr	r3, [pc, #24]	@ (8003bb8 <MX_SPI2_Init+0x64>)
 8003ba0:	220a      	movs	r2, #10
 8003ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003ba4:	4804      	ldr	r0, [pc, #16]	@ (8003bb8 <MX_SPI2_Init+0x64>)
 8003ba6:	f003 f97f 	bl	8006ea8 <HAL_SPI_Init>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003bb0:	f7ff ff94 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003bb4:	bf00      	nop
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000848 	.word	0x20000848
 8003bbc:	40003800 	.word	0x40003800

08003bc0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003bc4:	4b17      	ldr	r3, [pc, #92]	@ (8003c24 <MX_SPI3_Init+0x64>)
 8003bc6:	4a18      	ldr	r2, [pc, #96]	@ (8003c28 <MX_SPI3_Init+0x68>)
 8003bc8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003bca:	4b16      	ldr	r3, [pc, #88]	@ (8003c24 <MX_SPI3_Init+0x64>)
 8003bcc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003bd0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003bd2:	4b14      	ldr	r3, [pc, #80]	@ (8003c24 <MX_SPI3_Init+0x64>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bd8:	4b12      	ldr	r3, [pc, #72]	@ (8003c24 <MX_SPI3_Init+0x64>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bde:	4b11      	ldr	r3, [pc, #68]	@ (8003c24 <MX_SPI3_Init+0x64>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003be4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c24 <MX_SPI3_Init+0x64>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003bea:	4b0e      	ldr	r3, [pc, #56]	@ (8003c24 <MX_SPI3_Init+0x64>)
 8003bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bf0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c24 <MX_SPI3_Init+0x64>)
 8003bf4:	2210      	movs	r2, #16
 8003bf6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c24 <MX_SPI3_Init+0x64>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bfe:	4b09      	ldr	r3, [pc, #36]	@ (8003c24 <MX_SPI3_Init+0x64>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c04:	4b07      	ldr	r3, [pc, #28]	@ (8003c24 <MX_SPI3_Init+0x64>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003c0a:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <MX_SPI3_Init+0x64>)
 8003c0c:	220a      	movs	r2, #10
 8003c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003c10:	4804      	ldr	r0, [pc, #16]	@ (8003c24 <MX_SPI3_Init+0x64>)
 8003c12:	f003 f949 	bl	8006ea8 <HAL_SPI_Init>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003c1c:	f7ff ff5e 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003c20:	bf00      	nop
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	200008a0 	.word	0x200008a0
 8003c28:	40003c00 	.word	0x40003c00

08003c2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b08e      	sub	sp, #56	@ 0x38
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	605a      	str	r2, [r3, #4]
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	60da      	str	r2, [r3, #12]
 8003c42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a9d      	ldr	r2, [pc, #628]	@ (8003ec0 <HAL_SPI_MspInit+0x294>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d12c      	bne.n	8003ca8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	623b      	str	r3, [r7, #32]
 8003c52:	4b9c      	ldr	r3, [pc, #624]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c56:	4a9b      	ldr	r2, [pc, #620]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003c58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c5e:	4b99      	ldr	r3, [pc, #612]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c66:	623b      	str	r3, [r7, #32]
 8003c68:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	4b95      	ldr	r3, [pc, #596]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c72:	4a94      	ldr	r2, [pc, #592]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003c74:	f043 0301 	orr.w	r3, r3, #1
 8003c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c7a:	4b92      	ldr	r3, [pc, #584]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8003c86:	23e0      	movs	r3, #224	@ 0xe0
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c92:	2303      	movs	r3, #3
 8003c94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c96:	2305      	movs	r3, #5
 8003c98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4889      	ldr	r0, [pc, #548]	@ (8003ec8 <HAL_SPI_MspInit+0x29c>)
 8003ca2:	f001 fab5 	bl	8005210 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003ca6:	e106      	b.n	8003eb6 <HAL_SPI_MspInit+0x28a>
  else if(spiHandle->Instance==SPI2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a87      	ldr	r2, [pc, #540]	@ (8003ecc <HAL_SPI_MspInit+0x2a0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d162      	bne.n	8003d78 <HAL_SPI_MspInit+0x14c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	4b83      	ldr	r3, [pc, #524]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	4a82      	ldr	r2, [pc, #520]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cc2:	4b80      	ldr	r3, [pc, #512]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd6:	4a7b      	ldr	r2, [pc, #492]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003cd8:	f043 0302 	orr.w	r3, r3, #2
 8003cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cde:	4b79      	ldr	r3, [pc, #484]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8003cea:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003cee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003cfc:	2305      	movs	r3, #5
 8003cfe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d04:	4619      	mov	r1, r3
 8003d06:	4872      	ldr	r0, [pc, #456]	@ (8003ed0 <HAL_SPI_MspInit+0x2a4>)
 8003d08:	f001 fa82 	bl	8005210 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003d0c:	4b71      	ldr	r3, [pc, #452]	@ (8003ed4 <HAL_SPI_MspInit+0x2a8>)
 8003d0e:	4a72      	ldr	r2, [pc, #456]	@ (8003ed8 <HAL_SPI_MspInit+0x2ac>)
 8003d10:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8003d12:	4b70      	ldr	r3, [pc, #448]	@ (8003ed4 <HAL_SPI_MspInit+0x2a8>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d18:	4b6e      	ldr	r3, [pc, #440]	@ (8003ed4 <HAL_SPI_MspInit+0x2a8>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ed4 <HAL_SPI_MspInit+0x2a8>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d24:	4b6b      	ldr	r3, [pc, #428]	@ (8003ed4 <HAL_SPI_MspInit+0x2a8>)
 8003d26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d2a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d2c:	4b69      	ldr	r3, [pc, #420]	@ (8003ed4 <HAL_SPI_MspInit+0x2a8>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d32:	4b68      	ldr	r3, [pc, #416]	@ (8003ed4 <HAL_SPI_MspInit+0x2a8>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003d38:	4b66      	ldr	r3, [pc, #408]	@ (8003ed4 <HAL_SPI_MspInit+0x2a8>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d3e:	4b65      	ldr	r3, [pc, #404]	@ (8003ed4 <HAL_SPI_MspInit+0x2a8>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d44:	4b63      	ldr	r3, [pc, #396]	@ (8003ed4 <HAL_SPI_MspInit+0x2a8>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003d4a:	4862      	ldr	r0, [pc, #392]	@ (8003ed4 <HAL_SPI_MspInit+0x2a8>)
 8003d4c:	f000 fece 	bl	8004aec <HAL_DMA_Init>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8003d56:	f7ff fec1 	bl	8003adc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a5d      	ldr	r2, [pc, #372]	@ (8003ed4 <HAL_SPI_MspInit+0x2a8>)
 8003d5e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003d60:	4a5c      	ldr	r2, [pc, #368]	@ (8003ed4 <HAL_SPI_MspInit+0x2a8>)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8003d66:	2200      	movs	r2, #0
 8003d68:	2105      	movs	r1, #5
 8003d6a:	2024      	movs	r0, #36	@ 0x24
 8003d6c:	f000 fe94 	bl	8004a98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003d70:	2024      	movs	r0, #36	@ 0x24
 8003d72:	f000 fead 	bl	8004ad0 <HAL_NVIC_EnableIRQ>
}
 8003d76:	e09e      	b.n	8003eb6 <HAL_SPI_MspInit+0x28a>
  else if(spiHandle->Instance==SPI3)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a57      	ldr	r2, [pc, #348]	@ (8003edc <HAL_SPI_MspInit+0x2b0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	f040 8099 	bne.w	8003eb6 <HAL_SPI_MspInit+0x28a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003d84:	2300      	movs	r3, #0
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	4b4e      	ldr	r3, [pc, #312]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8c:	4a4d      	ldr	r2, [pc, #308]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d94:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da0:	2300      	movs	r3, #0
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	4b47      	ldr	r3, [pc, #284]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da8:	4a46      	ldr	r2, [pc, #280]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003daa:	f043 0302 	orr.w	r3, r3, #2
 8003dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8003db0:	4b44      	ldr	r3, [pc, #272]	@ (8003ec4 <HAL_SPI_MspInit+0x298>)
 8003db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NRF_SCK_Pin;
 8003dbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003dce:	2307      	movs	r3, #7
 8003dd0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 8003dd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	483d      	ldr	r0, [pc, #244]	@ (8003ed0 <HAL_SPI_MspInit+0x2a4>)
 8003dda:	f001 fa19 	bl	8005210 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NRF_MISO_Pin|NRF_MOSI_Pin;
 8003dde:	2330      	movs	r3, #48	@ 0x30
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de2:	2302      	movs	r3, #2
 8003de4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dea:	2303      	movs	r3, #3
 8003dec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003dee:	2306      	movs	r3, #6
 8003df0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003df6:	4619      	mov	r1, r3
 8003df8:	4835      	ldr	r0, [pc, #212]	@ (8003ed0 <HAL_SPI_MspInit+0x2a4>)
 8003dfa:	f001 fa09 	bl	8005210 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8003dfe:	4b38      	ldr	r3, [pc, #224]	@ (8003ee0 <HAL_SPI_MspInit+0x2b4>)
 8003e00:	4a38      	ldr	r2, [pc, #224]	@ (8003ee4 <HAL_SPI_MspInit+0x2b8>)
 8003e02:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8003e04:	4b36      	ldr	r3, [pc, #216]	@ (8003ee0 <HAL_SPI_MspInit+0x2b4>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e0a:	4b35      	ldr	r3, [pc, #212]	@ (8003ee0 <HAL_SPI_MspInit+0x2b4>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e10:	4b33      	ldr	r3, [pc, #204]	@ (8003ee0 <HAL_SPI_MspInit+0x2b4>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e16:	4b32      	ldr	r3, [pc, #200]	@ (8003ee0 <HAL_SPI_MspInit+0x2b4>)
 8003e18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e1c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e1e:	4b30      	ldr	r3, [pc, #192]	@ (8003ee0 <HAL_SPI_MspInit+0x2b4>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e24:	4b2e      	ldr	r3, [pc, #184]	@ (8003ee0 <HAL_SPI_MspInit+0x2b4>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8003e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ee0 <HAL_SPI_MspInit+0x2b4>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003e30:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee0 <HAL_SPI_MspInit+0x2b4>)
 8003e32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e36:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e38:	4b29      	ldr	r3, [pc, #164]	@ (8003ee0 <HAL_SPI_MspInit+0x2b4>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003e3e:	4828      	ldr	r0, [pc, #160]	@ (8003ee0 <HAL_SPI_MspInit+0x2b4>)
 8003e40:	f000 fe54 	bl	8004aec <HAL_DMA_Init>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8003e4a:	f7ff fe47 	bl	8003adc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a23      	ldr	r2, [pc, #140]	@ (8003ee0 <HAL_SPI_MspInit+0x2b4>)
 8003e52:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003e54:	4a22      	ldr	r2, [pc, #136]	@ (8003ee0 <HAL_SPI_MspInit+0x2b4>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8003e5a:	4b23      	ldr	r3, [pc, #140]	@ (8003ee8 <HAL_SPI_MspInit+0x2bc>)
 8003e5c:	4a23      	ldr	r2, [pc, #140]	@ (8003eec <HAL_SPI_MspInit+0x2c0>)
 8003e5e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8003e60:	4b21      	ldr	r3, [pc, #132]	@ (8003ee8 <HAL_SPI_MspInit+0x2bc>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e66:	4b20      	ldr	r3, [pc, #128]	@ (8003ee8 <HAL_SPI_MspInit+0x2bc>)
 8003e68:	2240      	movs	r2, #64	@ 0x40
 8003e6a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee8 <HAL_SPI_MspInit+0x2bc>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e72:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee8 <HAL_SPI_MspInit+0x2bc>)
 8003e74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e78:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee8 <HAL_SPI_MspInit+0x2bc>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e80:	4b19      	ldr	r3, [pc, #100]	@ (8003ee8 <HAL_SPI_MspInit+0x2bc>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8003e86:	4b18      	ldr	r3, [pc, #96]	@ (8003ee8 <HAL_SPI_MspInit+0x2bc>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003e8c:	4b16      	ldr	r3, [pc, #88]	@ (8003ee8 <HAL_SPI_MspInit+0x2bc>)
 8003e8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e92:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e94:	4b14      	ldr	r3, [pc, #80]	@ (8003ee8 <HAL_SPI_MspInit+0x2bc>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003e9a:	4813      	ldr	r0, [pc, #76]	@ (8003ee8 <HAL_SPI_MspInit+0x2bc>)
 8003e9c:	f000 fe26 	bl	8004aec <HAL_DMA_Init>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 8003ea6:	f7ff fe19 	bl	8003adc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a0e      	ldr	r2, [pc, #56]	@ (8003ee8 <HAL_SPI_MspInit+0x2bc>)
 8003eae:	649a      	str	r2, [r3, #72]	@ 0x48
 8003eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee8 <HAL_SPI_MspInit+0x2bc>)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003eb6:	bf00      	nop
 8003eb8:	3738      	adds	r7, #56	@ 0x38
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40013000 	.word	0x40013000
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40020000 	.word	0x40020000
 8003ecc:	40003800 	.word	0x40003800
 8003ed0:	40020400 	.word	0x40020400
 8003ed4:	200008f8 	.word	0x200008f8
 8003ed8:	40026058 	.word	0x40026058
 8003edc:	40003c00 	.word	0x40003c00
 8003ee0:	20000958 	.word	0x20000958
 8003ee4:	40026010 	.word	0x40026010
 8003ee8:	200009b8 	.word	0x200009b8
 8003eec:	40026088 	.word	0x40026088

08003ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	607b      	str	r3, [r7, #4]
 8003efa:	4b12      	ldr	r3, [pc, #72]	@ (8003f44 <HAL_MspInit+0x54>)
 8003efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efe:	4a11      	ldr	r2, [pc, #68]	@ (8003f44 <HAL_MspInit+0x54>)
 8003f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f06:	4b0f      	ldr	r3, [pc, #60]	@ (8003f44 <HAL_MspInit+0x54>)
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f0e:	607b      	str	r3, [r7, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	4b0b      	ldr	r3, [pc, #44]	@ (8003f44 <HAL_MspInit+0x54>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f44 <HAL_MspInit+0x54>)
 8003f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f22:	4b08      	ldr	r3, [pc, #32]	@ (8003f44 <HAL_MspInit+0x54>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003f2e:	2200      	movs	r2, #0
 8003f30:	210f      	movs	r1, #15
 8003f32:	f06f 0001 	mvn.w	r0, #1
 8003f36:	f000 fdaf 	bl	8004a98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800

08003f48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	@ 0x30
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60bb      	str	r3, [r7, #8]
 8003f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8004018 <HAL_InitTick+0xd0>)
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f60:	4a2d      	ldr	r2, [pc, #180]	@ (8004018 <HAL_InitTick+0xd0>)
 8003f62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f66:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f68:	4b2b      	ldr	r3, [pc, #172]	@ (8004018 <HAL_InitTick+0xd0>)
 8003f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f74:	f107 020c 	add.w	r2, r7, #12
 8003f78:	f107 0310 	add.w	r3, r7, #16
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f002 ff60 	bl	8006e44 <HAL_RCC_GetClockConfig>
  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003f84:	f002 ff4a 	bl	8006e1c <HAL_RCC_GetPCLK2Freq>
 8003f88:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8c:	4a23      	ldr	r2, [pc, #140]	@ (800401c <HAL_InitTick+0xd4>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	0c9b      	lsrs	r3, r3, #18
 8003f94:	3b01      	subs	r3, #1
 8003f96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8003f98:	4b21      	ldr	r3, [pc, #132]	@ (8004020 <HAL_InitTick+0xd8>)
 8003f9a:	4a22      	ldr	r2, [pc, #136]	@ (8004024 <HAL_InitTick+0xdc>)
 8003f9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8003f9e:	4b20      	ldr	r3, [pc, #128]	@ (8004020 <HAL_InitTick+0xd8>)
 8003fa0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003fa4:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8003fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8004020 <HAL_InitTick+0xd8>)
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003faa:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8003fac:	4b1c      	ldr	r3, [pc, #112]	@ (8004020 <HAL_InitTick+0xd8>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004020 <HAL_InitTick+0xd8>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fb8:	4b19      	ldr	r3, [pc, #100]	@ (8004020 <HAL_InitTick+0xd8>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8003fbe:	4818      	ldr	r0, [pc, #96]	@ (8004020 <HAL_InitTick+0xd8>)
 8003fc0:	f004 fa3e 	bl	8008440 <HAL_TIM_Base_Init>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003fca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d11b      	bne.n	800400a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8003fd2:	4813      	ldr	r0, [pc, #76]	@ (8004020 <HAL_InitTick+0xd8>)
 8003fd4:	f004 fa84 	bl	80084e0 <HAL_TIM_Base_Start_IT>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003fde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d111      	bne.n	800400a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003fe6:	201a      	movs	r0, #26
 8003fe8:	f000 fd72 	bl	8004ad0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	d808      	bhi.n	8004004 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	201a      	movs	r0, #26
 8003ff8:	f000 fd4e 	bl	8004a98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8004028 <HAL_InitTick+0xe0>)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e002      	b.n	800400a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800400a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800400e:	4618      	mov	r0, r3
 8004010:	3730      	adds	r7, #48	@ 0x30
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800
 800401c:	431bde83 	.word	0x431bde83
 8004020:	20000a18 	.word	0x20000a18
 8004024:	40014800 	.word	0x40014800
 8004028:	20000098 	.word	0x20000098

0800402c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004030:	bf00      	nop
 8004032:	e7fd      	b.n	8004030 <NMI_Handler+0x4>

08004034 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004038:	bf00      	nop
 800403a:	e7fd      	b.n	8004038 <HardFault_Handler+0x4>

0800403c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004040:	bf00      	nop
 8004042:	e7fd      	b.n	8004040 <MemManage_Handler+0x4>

08004044 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004048:	bf00      	nop
 800404a:	e7fd      	b.n	8004048 <BusFault_Handler+0x4>

0800404c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004050:	bf00      	nop
 8004052:	e7fd      	b.n	8004050 <UsageFault_Handler+0x4>

08004054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004058:	bf00      	nop
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8004068:	4802      	ldr	r0, [pc, #8]	@ (8004074 <DMA1_Stream0_IRQHandler+0x10>)
 800406a:	f000 fe67 	bl	8004d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20000958 	.word	0x20000958

08004078 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800407c:	4802      	ldr	r0, [pc, #8]	@ (8004088 <DMA1_Stream3_IRQHandler+0x10>)
 800407e:	f000 fe5d 	bl	8004d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	200008f8 	.word	0x200008f8

0800408c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8004090:	4802      	ldr	r0, [pc, #8]	@ (800409c <DMA1_Stream5_IRQHandler+0x10>)
 8004092:	f000 fe53 	bl	8004d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200009b8 	.word	0x200009b8

080040a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80040a4:	4802      	ldr	r0, [pc, #8]	@ (80040b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80040a6:	f004 fb87 	bl	80087b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000a18 	.word	0x20000a18

080040b4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80040b8:	4802      	ldr	r0, [pc, #8]	@ (80040c4 <SPI2_IRQHandler+0x10>)
 80040ba:	f003 fdf7 	bl	8007cac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000848 	.word	0x20000848

080040c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040cc:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <SystemInit+0x20>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d2:	4a05      	ldr	r2, [pc, #20]	@ (80040e8 <SystemInit+0x20>)
 80040d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08e      	sub	sp, #56	@ 0x38
 80040f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	605a      	str	r2, [r3, #4]
 80040fc:	609a      	str	r2, [r3, #8]
 80040fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004100:	f107 0320 	add.w	r3, r7, #32
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800410a:	1d3b      	adds	r3, r7, #4
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	609a      	str	r2, [r3, #8]
 8004114:	60da      	str	r2, [r3, #12]
 8004116:	611a      	str	r2, [r3, #16]
 8004118:	615a      	str	r2, [r3, #20]
 800411a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800411c:	4b2d      	ldr	r3, [pc, #180]	@ (80041d4 <MX_TIM2_Init+0xe8>)
 800411e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004122:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8004124:	4b2b      	ldr	r3, [pc, #172]	@ (80041d4 <MX_TIM2_Init+0xe8>)
 8004126:	2263      	movs	r2, #99	@ 0x63
 8004128:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800412a:	4b2a      	ldr	r3, [pc, #168]	@ (80041d4 <MX_TIM2_Init+0xe8>)
 800412c:	2200      	movs	r2, #0
 800412e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8004130:	4b28      	ldr	r3, [pc, #160]	@ (80041d4 <MX_TIM2_Init+0xe8>)
 8004132:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004136:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004138:	4b26      	ldr	r3, [pc, #152]	@ (80041d4 <MX_TIM2_Init+0xe8>)
 800413a:	2200      	movs	r2, #0
 800413c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800413e:	4b25      	ldr	r3, [pc, #148]	@ (80041d4 <MX_TIM2_Init+0xe8>)
 8004140:	2280      	movs	r2, #128	@ 0x80
 8004142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004144:	4823      	ldr	r0, [pc, #140]	@ (80041d4 <MX_TIM2_Init+0xe8>)
 8004146:	f004 f97b 	bl	8008440 <HAL_TIM_Base_Init>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004150:	f7ff fcc4 	bl	8003adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004158:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800415a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800415e:	4619      	mov	r1, r3
 8004160:	481c      	ldr	r0, [pc, #112]	@ (80041d4 <MX_TIM2_Init+0xe8>)
 8004162:	f004 fcdb 	bl	8008b1c <HAL_TIM_ConfigClockSource>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800416c:	f7ff fcb6 	bl	8003adc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004170:	4818      	ldr	r0, [pc, #96]	@ (80041d4 <MX_TIM2_Init+0xe8>)
 8004172:	f004 fa17 	bl	80085a4 <HAL_TIM_PWM_Init>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800417c:	f7ff fcae 	bl	8003adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004180:	2300      	movs	r3, #0
 8004182:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004184:	2300      	movs	r3, #0
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004188:	f107 0320 	add.w	r3, r7, #32
 800418c:	4619      	mov	r1, r3
 800418e:	4811      	ldr	r0, [pc, #68]	@ (80041d4 <MX_TIM2_Init+0xe8>)
 8004190:	f005 f88c 	bl	80092ac <HAL_TIMEx_MasterConfigSynchronization>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800419a:	f7ff fc9f 	bl	8003adc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800419e:	2360      	movs	r3, #96	@ 0x60
 80041a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80041ae:	1d3b      	adds	r3, r7, #4
 80041b0:	220c      	movs	r2, #12
 80041b2:	4619      	mov	r1, r3
 80041b4:	4807      	ldr	r0, [pc, #28]	@ (80041d4 <MX_TIM2_Init+0xe8>)
 80041b6:	f004 fbef 	bl	8008998 <HAL_TIM_PWM_ConfigChannel>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80041c0:	f7ff fc8c 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80041c4:	4803      	ldr	r0, [pc, #12]	@ (80041d4 <MX_TIM2_Init+0xe8>)
 80041c6:	f000 f827 	bl	8004218 <HAL_TIM_MspPostInit>

}
 80041ca:	bf00      	nop
 80041cc:	3738      	adds	r7, #56	@ 0x38
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000a60 	.word	0x20000a60

080041d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041e8:	d10d      	bne.n	8004206 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	4b09      	ldr	r3, [pc, #36]	@ (8004214 <HAL_TIM_Base_MspInit+0x3c>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	4a08      	ldr	r2, [pc, #32]	@ (8004214 <HAL_TIM_Base_MspInit+0x3c>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041fa:	4b06      	ldr	r3, [pc, #24]	@ (8004214 <HAL_TIM_Base_MspInit+0x3c>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	40023800 	.word	0x40023800

08004218 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004220:	f107 030c 	add.w	r3, r7, #12
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004238:	d11d      	bne.n	8004276 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	4b10      	ldr	r3, [pc, #64]	@ (8004280 <HAL_TIM_MspPostInit+0x68>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004242:	4a0f      	ldr	r2, [pc, #60]	@ (8004280 <HAL_TIM_MspPostInit+0x68>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	6313      	str	r3, [r2, #48]	@ 0x30
 800424a:	4b0d      	ldr	r3, [pc, #52]	@ (8004280 <HAL_TIM_MspPostInit+0x68>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004256:	2308      	movs	r3, #8
 8004258:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425a:	2302      	movs	r3, #2
 800425c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004262:	2300      	movs	r3, #0
 8004264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004266:	2301      	movs	r3, #1
 8004268:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800426a:	f107 030c 	add.w	r3, r7, #12
 800426e:	4619      	mov	r1, r3
 8004270:	4804      	ldr	r0, [pc, #16]	@ (8004284 <HAL_TIM_MspPostInit+0x6c>)
 8004272:	f000 ffcd 	bl	8005210 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004276:	bf00      	nop
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800
 8004284:	40020000 	.word	0x40020000

08004288 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800428c:	4b11      	ldr	r3, [pc, #68]	@ (80042d4 <MX_USART1_UART_Init+0x4c>)
 800428e:	4a12      	ldr	r2, [pc, #72]	@ (80042d8 <MX_USART1_UART_Init+0x50>)
 8004290:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004292:	4b10      	ldr	r3, [pc, #64]	@ (80042d4 <MX_USART1_UART_Init+0x4c>)
 8004294:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004298:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800429a:	4b0e      	ldr	r3, [pc, #56]	@ (80042d4 <MX_USART1_UART_Init+0x4c>)
 800429c:	2200      	movs	r2, #0
 800429e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80042a0:	4b0c      	ldr	r3, [pc, #48]	@ (80042d4 <MX_USART1_UART_Init+0x4c>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80042a6:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <MX_USART1_UART_Init+0x4c>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80042ac:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <MX_USART1_UART_Init+0x4c>)
 80042ae:	220c      	movs	r2, #12
 80042b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042b2:	4b08      	ldr	r3, [pc, #32]	@ (80042d4 <MX_USART1_UART_Init+0x4c>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042b8:	4b06      	ldr	r3, [pc, #24]	@ (80042d4 <MX_USART1_UART_Init+0x4c>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80042be:	4805      	ldr	r0, [pc, #20]	@ (80042d4 <MX_USART1_UART_Init+0x4c>)
 80042c0:	f005 f876 	bl	80093b0 <HAL_UART_Init>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80042ca:	f7ff fc07 	bl	8003adc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042ce:	bf00      	nop
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000aa8 	.word	0x20000aa8
 80042d8:	40011000 	.word	0x40011000

080042dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	@ 0x28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	609a      	str	r2, [r3, #8]
 80042f0:	60da      	str	r2, [r3, #12]
 80042f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a19      	ldr	r2, [pc, #100]	@ (8004360 <HAL_UART_MspInit+0x84>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d12c      	bne.n	8004358 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	4b18      	ldr	r3, [pc, #96]	@ (8004364 <HAL_UART_MspInit+0x88>)
 8004304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004306:	4a17      	ldr	r2, [pc, #92]	@ (8004364 <HAL_UART_MspInit+0x88>)
 8004308:	f043 0310 	orr.w	r3, r3, #16
 800430c:	6453      	str	r3, [r2, #68]	@ 0x44
 800430e:	4b15      	ldr	r3, [pc, #84]	@ (8004364 <HAL_UART_MspInit+0x88>)
 8004310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	4b11      	ldr	r3, [pc, #68]	@ (8004364 <HAL_UART_MspInit+0x88>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004322:	4a10      	ldr	r2, [pc, #64]	@ (8004364 <HAL_UART_MspInit+0x88>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	6313      	str	r3, [r2, #48]	@ 0x30
 800432a:	4b0e      	ldr	r3, [pc, #56]	@ (8004364 <HAL_UART_MspInit+0x88>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8004336:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800433a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433c:	2302      	movs	r3, #2
 800433e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004340:	2300      	movs	r3, #0
 8004342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004344:	2303      	movs	r3, #3
 8004346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004348:	2307      	movs	r3, #7
 800434a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800434c:	f107 0314 	add.w	r3, r7, #20
 8004350:	4619      	mov	r1, r3
 8004352:	4805      	ldr	r0, [pc, #20]	@ (8004368 <HAL_UART_MspInit+0x8c>)
 8004354:	f000 ff5c 	bl	8005210 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004358:	bf00      	nop
 800435a:	3728      	adds	r7, #40	@ 0x28
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40011000 	.word	0x40011000
 8004364:	40023800 	.word	0x40023800
 8004368:	40020000 	.word	0x40020000

0800436c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800436c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80043a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004370:	f7ff feaa 	bl	80040c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004374:	480c      	ldr	r0, [pc, #48]	@ (80043a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004376:	490d      	ldr	r1, [pc, #52]	@ (80043ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004378:	4a0d      	ldr	r2, [pc, #52]	@ (80043b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800437a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800437c:	e002      	b.n	8004384 <LoopCopyDataInit>

0800437e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800437e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004382:	3304      	adds	r3, #4

08004384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004388:	d3f9      	bcc.n	800437e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800438a:	4a0a      	ldr	r2, [pc, #40]	@ (80043b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800438c:	4c0a      	ldr	r4, [pc, #40]	@ (80043b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800438e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004390:	e001      	b.n	8004396 <LoopFillZerobss>

08004392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004394:	3204      	adds	r2, #4

08004396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004398:	d3fb      	bcc.n	8004392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800439a:	f006 fd39 	bl	800ae10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800439e:	f7ff faf3 	bl	8003988 <main>
  bx  lr    
 80043a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80043a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043ac:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 80043b0:	0800baf8 	.word	0x0800baf8
  ldr r2, =_sbss
 80043b4:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 80043b8:	20004980 	.word	0x20004980

080043bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043bc:	e7fe      	b.n	80043bc <ADC_IRQHandler>
	...

080043c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004400 <HAL_Init+0x40>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004400 <HAL_Init+0x40>)
 80043ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004400 <HAL_Init+0x40>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004400 <HAL_Init+0x40>)
 80043d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043dc:	4b08      	ldr	r3, [pc, #32]	@ (8004400 <HAL_Init+0x40>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a07      	ldr	r2, [pc, #28]	@ (8004400 <HAL_Init+0x40>)
 80043e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043e8:	2003      	movs	r0, #3
 80043ea:	f000 fb4a 	bl	8004a82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043ee:	200f      	movs	r0, #15
 80043f0:	f7ff fdaa 	bl	8003f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043f4:	f7ff fd7c 	bl	8003ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40023c00 	.word	0x40023c00

08004404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004408:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <HAL_IncTick+0x20>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <HAL_IncTick+0x24>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4413      	add	r3, r2
 8004414:	4a04      	ldr	r2, [pc, #16]	@ (8004428 <HAL_IncTick+0x24>)
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	2000009c 	.word	0x2000009c
 8004428:	20000af0 	.word	0x20000af0

0800442c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return uwTick;
 8004430:	4b03      	ldr	r3, [pc, #12]	@ (8004440 <HAL_GetTick+0x14>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000af0 	.word	0x20000af0

08004444 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e033      	b.n	80044c2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d109      	bne.n	8004476 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fe fef4 	bl	8003250 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b00      	cmp	r3, #0
 8004480:	d118      	bne.n	80044b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800448a:	f023 0302 	bic.w	r3, r3, #2
 800448e:	f043 0202 	orr.w	r2, r3, #2
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f94a 	bl	8004730 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80044b2:	e001      	b.n	80044b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x1c>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e113      	b.n	8004710 <HAL_ADC_ConfigChannel+0x244>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b09      	cmp	r3, #9
 80044f6:	d925      	bls.n	8004544 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68d9      	ldr	r1, [r3, #12]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	b29b      	uxth	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	4613      	mov	r3, r2
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	4413      	add	r3, r2
 800450c:	3b1e      	subs	r3, #30
 800450e:	2207      	movs	r2, #7
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	43da      	mvns	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	400a      	ands	r2, r1
 800451c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68d9      	ldr	r1, [r3, #12]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	b29b      	uxth	r3, r3
 800452e:	4618      	mov	r0, r3
 8004530:	4603      	mov	r3, r0
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	4403      	add	r3, r0
 8004536:	3b1e      	subs	r3, #30
 8004538:	409a      	lsls	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	60da      	str	r2, [r3, #12]
 8004542:	e022      	b.n	800458a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6919      	ldr	r1, [r3, #16]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	4613      	mov	r3, r2
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4413      	add	r3, r2
 8004558:	2207      	movs	r2, #7
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43da      	mvns	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	400a      	ands	r2, r1
 8004566:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6919      	ldr	r1, [r3, #16]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	4618      	mov	r0, r3
 800457a:	4603      	mov	r3, r0
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	4403      	add	r3, r0
 8004580:	409a      	lsls	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b06      	cmp	r3, #6
 8004590:	d824      	bhi.n	80045dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	3b05      	subs	r3, #5
 80045a4:	221f      	movs	r2, #31
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43da      	mvns	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	400a      	ands	r2, r1
 80045b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	4618      	mov	r0, r3
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	3b05      	subs	r3, #5
 80045ce:	fa00 f203 	lsl.w	r2, r0, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80045da:	e04c      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b0c      	cmp	r3, #12
 80045e2:	d824      	bhi.n	800462e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	3b23      	subs	r3, #35	@ 0x23
 80045f6:	221f      	movs	r2, #31
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	43da      	mvns	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	400a      	ands	r2, r1
 8004604:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	b29b      	uxth	r3, r3
 8004612:	4618      	mov	r0, r3
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	3b23      	subs	r3, #35	@ 0x23
 8004620:	fa00 f203 	lsl.w	r2, r0, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	631a      	str	r2, [r3, #48]	@ 0x30
 800462c:	e023      	b.n	8004676 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	3b41      	subs	r3, #65	@ 0x41
 8004640:	221f      	movs	r2, #31
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43da      	mvns	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	400a      	ands	r2, r1
 800464e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	4618      	mov	r0, r3
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	3b41      	subs	r3, #65	@ 0x41
 800466a:	fa00 f203 	lsl.w	r2, r0, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004676:	4b29      	ldr	r3, [pc, #164]	@ (800471c <HAL_ADC_ConfigChannel+0x250>)
 8004678:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a28      	ldr	r2, [pc, #160]	@ (8004720 <HAL_ADC_ConfigChannel+0x254>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d10f      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x1d8>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b12      	cmp	r3, #18
 800468a:	d10b      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004720 <HAL_ADC_ConfigChannel+0x254>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d12b      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x23a>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004724 <HAL_ADC_ConfigChannel+0x258>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d003      	beq.n	80046c0 <HAL_ADC_ConfigChannel+0x1f4>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b11      	cmp	r3, #17
 80046be:	d122      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a11      	ldr	r2, [pc, #68]	@ (8004724 <HAL_ADC_ConfigChannel+0x258>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d111      	bne.n	8004706 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80046e2:	4b11      	ldr	r3, [pc, #68]	@ (8004728 <HAL_ADC_ConfigChannel+0x25c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a11      	ldr	r2, [pc, #68]	@ (800472c <HAL_ADC_ConfigChannel+0x260>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	0c9a      	lsrs	r2, r3, #18
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80046f8:	e002      	b.n	8004700 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f9      	bne.n	80046fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	40012300 	.word	0x40012300
 8004720:	40012000 	.word	0x40012000
 8004724:	10000012 	.word	0x10000012
 8004728:	20000094 	.word	0x20000094
 800472c:	431bde83 	.word	0x431bde83

08004730 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004738:	4b79      	ldr	r3, [pc, #484]	@ (8004920 <ADC_Init+0x1f0>)
 800473a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	431a      	orrs	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6859      	ldr	r1, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	021a      	lsls	r2, r3, #8
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004788:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6859      	ldr	r1, [r3, #4]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6899      	ldr	r1, [r3, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c2:	4a58      	ldr	r2, [pc, #352]	@ (8004924 <ADC_Init+0x1f4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80047d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6899      	ldr	r1, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80047f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6899      	ldr	r1, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	609a      	str	r2, [r3, #8]
 800480c:	e00f      	b.n	800482e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800481c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800482c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0202 	bic.w	r2, r2, #2
 800483c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6899      	ldr	r1, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	7e1b      	ldrb	r3, [r3, #24]
 8004848:	005a      	lsls	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01b      	beq.n	8004894 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800486a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800487a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004886:	3b01      	subs	r3, #1
 8004888:	035a      	lsls	r2, r3, #13
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	e007      	b.n	80048a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80048b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	3b01      	subs	r3, #1
 80048c0:	051a      	lsls	r2, r3, #20
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80048d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6899      	ldr	r1, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80048e6:	025a      	lsls	r2, r3, #9
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6899      	ldr	r1, [r3, #8]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	029a      	lsls	r2, r3, #10
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	609a      	str	r2, [r3, #8]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	40012300 	.word	0x40012300
 8004924:	0f000001 	.word	0x0f000001

08004928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004938:	4b0c      	ldr	r3, [pc, #48]	@ (800496c <__NVIC_SetPriorityGrouping+0x44>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004944:	4013      	ands	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004950:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800495a:	4a04      	ldr	r2, [pc, #16]	@ (800496c <__NVIC_SetPriorityGrouping+0x44>)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	60d3      	str	r3, [r2, #12]
}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	e000ed00 	.word	0xe000ed00

08004970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004974:	4b04      	ldr	r3, [pc, #16]	@ (8004988 <__NVIC_GetPriorityGrouping+0x18>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	0a1b      	lsrs	r3, r3, #8
 800497a:	f003 0307 	and.w	r3, r3, #7
}
 800497e:	4618      	mov	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	e000ed00 	.word	0xe000ed00

0800498c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499a:	2b00      	cmp	r3, #0
 800499c:	db0b      	blt.n	80049b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	f003 021f 	and.w	r2, r3, #31
 80049a4:	4907      	ldr	r1, [pc, #28]	@ (80049c4 <__NVIC_EnableIRQ+0x38>)
 80049a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	2001      	movs	r0, #1
 80049ae:	fa00 f202 	lsl.w	r2, r0, r2
 80049b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	e000e100 	.word	0xe000e100

080049c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	6039      	str	r1, [r7, #0]
 80049d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	db0a      	blt.n	80049f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	490c      	ldr	r1, [pc, #48]	@ (8004a14 <__NVIC_SetPriority+0x4c>)
 80049e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e6:	0112      	lsls	r2, r2, #4
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	440b      	add	r3, r1
 80049ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049f0:	e00a      	b.n	8004a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	4908      	ldr	r1, [pc, #32]	@ (8004a18 <__NVIC_SetPriority+0x50>)
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	3b04      	subs	r3, #4
 8004a00:	0112      	lsls	r2, r2, #4
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	440b      	add	r3, r1
 8004a06:	761a      	strb	r2, [r3, #24]
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	e000e100 	.word	0xe000e100
 8004a18:	e000ed00 	.word	0xe000ed00

08004a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b089      	sub	sp, #36	@ 0x24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f1c3 0307 	rsb	r3, r3, #7
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	bf28      	it	cs
 8004a3a:	2304      	movcs	r3, #4
 8004a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	3304      	adds	r3, #4
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d902      	bls.n	8004a4c <NVIC_EncodePriority+0x30>
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3b03      	subs	r3, #3
 8004a4a:	e000      	b.n	8004a4e <NVIC_EncodePriority+0x32>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a50:	f04f 32ff 	mov.w	r2, #4294967295
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43da      	mvns	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	401a      	ands	r2, r3
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a64:	f04f 31ff 	mov.w	r1, #4294967295
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6e:	43d9      	mvns	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a74:	4313      	orrs	r3, r2
         );
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3724      	adds	r7, #36	@ 0x24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff ff4c 	bl	8004928 <__NVIC_SetPriorityGrouping>
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004aaa:	f7ff ff61 	bl	8004970 <__NVIC_GetPriorityGrouping>
 8004aae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	68b9      	ldr	r1, [r7, #8]
 8004ab4:	6978      	ldr	r0, [r7, #20]
 8004ab6:	f7ff ffb1 	bl	8004a1c <NVIC_EncodePriority>
 8004aba:	4602      	mov	r2, r0
 8004abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff ff80 	bl	80049c8 <__NVIC_SetPriority>
}
 8004ac8:	bf00      	nop
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff ff54 	bl	800498c <__NVIC_EnableIRQ>
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004af8:	f7ff fc98 	bl	800442c <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e099      	b.n	8004c3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0201 	bic.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b28:	e00f      	b.n	8004b4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b2a:	f7ff fc7f 	bl	800442c <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b05      	cmp	r3, #5
 8004b36:	d908      	bls.n	8004b4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2203      	movs	r2, #3
 8004b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e078      	b.n	8004c3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e8      	bne.n	8004b2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4b38      	ldr	r3, [pc, #224]	@ (8004c44 <HAL_DMA_Init+0x158>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d107      	bne.n	8004bb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bac:	4313      	orrs	r3, r2
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	f023 0307 	bic.w	r3, r3, #7
 8004bca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d117      	bne.n	8004c0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00e      	beq.n	8004c0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fa91 	bl	8005118 <DMA_CheckFifoParam>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d008      	beq.n	8004c0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2240      	movs	r2, #64	@ 0x40
 8004c00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e016      	b.n	8004c3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fa48 	bl	80050ac <DMA_CalcBaseAndBitshift>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c24:	223f      	movs	r2, #63	@ 0x3f
 8004c26:	409a      	lsls	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	f010803f 	.word	0xf010803f

08004c48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_DMA_Start_IT+0x26>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e040      	b.n	8004cf0 <HAL_DMA_Start_IT+0xa8>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d12f      	bne.n	8004ce2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2202      	movs	r2, #2
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f9da 	bl	8005050 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca0:	223f      	movs	r2, #63	@ 0x3f
 8004ca2:	409a      	lsls	r2, r3
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0216 	orr.w	r2, r2, #22
 8004cb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0208 	orr.w	r2, r2, #8
 8004cce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	e005      	b.n	8004cee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cea:	2302      	movs	r3, #2
 8004cec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d004      	beq.n	8004d16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2280      	movs	r2, #128	@ 0x80
 8004d10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e00c      	b.n	8004d30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2205      	movs	r2, #5
 8004d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0201 	bic.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d48:	4b8e      	ldr	r3, [pc, #568]	@ (8004f84 <HAL_DMA_IRQHandler+0x248>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a8e      	ldr	r2, [pc, #568]	@ (8004f88 <HAL_DMA_IRQHandler+0x24c>)
 8004d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d52:	0a9b      	lsrs	r3, r3, #10
 8004d54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d66:	2208      	movs	r2, #8
 8004d68:	409a      	lsls	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01a      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d013      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0204 	bic.w	r2, r2, #4
 8004d8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d94:	2208      	movs	r2, #8
 8004d96:	409a      	lsls	r2, r3
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004da0:	f043 0201 	orr.w	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dac:	2201      	movs	r2, #1
 8004dae:	409a      	lsls	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4013      	ands	r3, r2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d012      	beq.n	8004dde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dca:	2201      	movs	r2, #1
 8004dcc:	409a      	lsls	r2, r3
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd6:	f043 0202 	orr.w	r2, r3, #2
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de2:	2204      	movs	r2, #4
 8004de4:	409a      	lsls	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d012      	beq.n	8004e14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00b      	beq.n	8004e14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e00:	2204      	movs	r2, #4
 8004e02:	409a      	lsls	r2, r3
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0c:	f043 0204 	orr.w	r2, r3, #4
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e18:	2210      	movs	r2, #16
 8004e1a:	409a      	lsls	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d043      	beq.n	8004eac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d03c      	beq.n	8004eac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e36:	2210      	movs	r2, #16
 8004e38:	409a      	lsls	r2, r3
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d018      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d108      	bne.n	8004e6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d024      	beq.n	8004eac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	4798      	blx	r3
 8004e6a:	e01f      	b.n	8004eac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01b      	beq.n	8004eac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4798      	blx	r3
 8004e7c:	e016      	b.n	8004eac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d107      	bne.n	8004e9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0208 	bic.w	r2, r2, #8
 8004e9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	409a      	lsls	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 808f 	beq.w	8004fdc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8087 	beq.w	8004fdc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	409a      	lsls	r2, r3
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b05      	cmp	r3, #5
 8004ee4:	d136      	bne.n	8004f54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0216 	bic.w	r2, r2, #22
 8004ef4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695a      	ldr	r2, [r3, #20]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d103      	bne.n	8004f16 <HAL_DMA_IRQHandler+0x1da>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d007      	beq.n	8004f26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0208 	bic.w	r2, r2, #8
 8004f24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2a:	223f      	movs	r2, #63	@ 0x3f
 8004f2c:	409a      	lsls	r2, r3
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d07e      	beq.n	8005048 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	4798      	blx	r3
        }
        return;
 8004f52:	e079      	b.n	8005048 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d01d      	beq.n	8004f9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10d      	bne.n	8004f8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d031      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	4798      	blx	r3
 8004f80:	e02c      	b.n	8004fdc <HAL_DMA_IRQHandler+0x2a0>
 8004f82:	bf00      	nop
 8004f84:	20000094 	.word	0x20000094
 8004f88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d023      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	4798      	blx	r3
 8004f9c:	e01e      	b.n	8004fdc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10f      	bne.n	8004fcc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0210 	bic.w	r2, r2, #16
 8004fba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d032      	beq.n	800504a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d022      	beq.n	8005036 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2205      	movs	r2, #5
 8004ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	3301      	adds	r3, #1
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	429a      	cmp	r2, r3
 8005012:	d307      	bcc.n	8005024 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1f2      	bne.n	8005008 <HAL_DMA_IRQHandler+0x2cc>
 8005022:	e000      	b.n	8005026 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005024:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
 8005046:	e000      	b.n	800504a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005048:	bf00      	nop
    }
  }
}
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800506c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2b40      	cmp	r3, #64	@ 0x40
 800507c:	d108      	bne.n	8005090 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800508e:	e007      	b.n	80050a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	60da      	str	r2, [r3, #12]
}
 80050a0:	bf00      	nop
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	3b10      	subs	r3, #16
 80050bc:	4a14      	ldr	r2, [pc, #80]	@ (8005110 <DMA_CalcBaseAndBitshift+0x64>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	091b      	lsrs	r3, r3, #4
 80050c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80050c6:	4a13      	ldr	r2, [pc, #76]	@ (8005114 <DMA_CalcBaseAndBitshift+0x68>)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d909      	bls.n	80050ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	1d1a      	adds	r2, r3, #4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80050ec:	e007      	b.n	80050fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80050f6:	f023 0303 	bic.w	r3, r3, #3
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	aaaaaaab 	.word	0xaaaaaaab
 8005114:	0800ba68 	.word	0x0800ba68

08005118 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005128:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d11f      	bne.n	8005172 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d856      	bhi.n	80051e6 <DMA_CheckFifoParam+0xce>
 8005138:	a201      	add	r2, pc, #4	@ (adr r2, 8005140 <DMA_CheckFifoParam+0x28>)
 800513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513e:	bf00      	nop
 8005140:	08005151 	.word	0x08005151
 8005144:	08005163 	.word	0x08005163
 8005148:	08005151 	.word	0x08005151
 800514c:	080051e7 	.word	0x080051e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005154:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d046      	beq.n	80051ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005160:	e043      	b.n	80051ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800516a:	d140      	bne.n	80051ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005170:	e03d      	b.n	80051ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800517a:	d121      	bne.n	80051c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	2b03      	cmp	r3, #3
 8005180:	d837      	bhi.n	80051f2 <DMA_CheckFifoParam+0xda>
 8005182:	a201      	add	r2, pc, #4	@ (adr r2, 8005188 <DMA_CheckFifoParam+0x70>)
 8005184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005188:	08005199 	.word	0x08005199
 800518c:	0800519f 	.word	0x0800519f
 8005190:	08005199 	.word	0x08005199
 8005194:	080051b1 	.word	0x080051b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
      break;
 800519c:	e030      	b.n	8005200 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d025      	beq.n	80051f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051ae:	e022      	b.n	80051f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051b8:	d11f      	bne.n	80051fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80051be:	e01c      	b.n	80051fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d903      	bls.n	80051ce <DMA_CheckFifoParam+0xb6>
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d003      	beq.n	80051d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051cc:	e018      	b.n	8005200 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	73fb      	strb	r3, [r7, #15]
      break;
 80051d2:	e015      	b.n	8005200 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00e      	beq.n	80051fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
      break;
 80051e4:	e00b      	b.n	80051fe <DMA_CheckFifoParam+0xe6>
      break;
 80051e6:	bf00      	nop
 80051e8:	e00a      	b.n	8005200 <DMA_CheckFifoParam+0xe8>
      break;
 80051ea:	bf00      	nop
 80051ec:	e008      	b.n	8005200 <DMA_CheckFifoParam+0xe8>
      break;
 80051ee:	bf00      	nop
 80051f0:	e006      	b.n	8005200 <DMA_CheckFifoParam+0xe8>
      break;
 80051f2:	bf00      	nop
 80051f4:	e004      	b.n	8005200 <DMA_CheckFifoParam+0xe8>
      break;
 80051f6:	bf00      	nop
 80051f8:	e002      	b.n	8005200 <DMA_CheckFifoParam+0xe8>
      break;   
 80051fa:	bf00      	nop
 80051fc:	e000      	b.n	8005200 <DMA_CheckFifoParam+0xe8>
      break;
 80051fe:	bf00      	nop
    }
  } 
  
  return status; 
 8005200:	7bfb      	ldrb	r3, [r7, #15]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop

08005210 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005210:	b480      	push	{r7}
 8005212:	b089      	sub	sp, #36	@ 0x24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800521a:	2300      	movs	r3, #0
 800521c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800521e:	2300      	movs	r3, #0
 8005220:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	e159      	b.n	80054e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800522c:	2201      	movs	r2, #1
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4013      	ands	r3, r2
 800523e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	429a      	cmp	r2, r3
 8005246:	f040 8148 	bne.w	80054da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	2b01      	cmp	r3, #1
 8005254:	d005      	beq.n	8005262 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800525e:	2b02      	cmp	r3, #2
 8005260:	d130      	bne.n	80052c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	2203      	movs	r2, #3
 800526e:	fa02 f303 	lsl.w	r3, r2, r3
 8005272:	43db      	mvns	r3, r3
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	4013      	ands	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	fa02 f303 	lsl.w	r3, r2, r3
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	4313      	orrs	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005298:	2201      	movs	r2, #1
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4013      	ands	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	f003 0201 	and.w	r2, r3, #1
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f003 0303 	and.w	r3, r3, #3
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d017      	beq.n	8005300 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	2203      	movs	r2, #3
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	43db      	mvns	r3, r3
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4013      	ands	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d123      	bne.n	8005354 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	08da      	lsrs	r2, r3, #3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3208      	adds	r2, #8
 8005314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005318:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	f003 0307 	and.w	r3, r3, #7
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	220f      	movs	r2, #15
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	43db      	mvns	r3, r3
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4013      	ands	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4313      	orrs	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	08da      	lsrs	r2, r3, #3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3208      	adds	r2, #8
 800534e:	69b9      	ldr	r1, [r7, #24]
 8005350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	2203      	movs	r2, #3
 8005360:	fa02 f303 	lsl.w	r3, r2, r3
 8005364:	43db      	mvns	r3, r3
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	4013      	ands	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f003 0203 	and.w	r2, r3, #3
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	fa02 f303 	lsl.w	r3, r2, r3
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	4313      	orrs	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 80a2 	beq.w	80054da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	4b57      	ldr	r3, [pc, #348]	@ (80054f8 <HAL_GPIO_Init+0x2e8>)
 800539c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539e:	4a56      	ldr	r2, [pc, #344]	@ (80054f8 <HAL_GPIO_Init+0x2e8>)
 80053a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80053a6:	4b54      	ldr	r3, [pc, #336]	@ (80054f8 <HAL_GPIO_Init+0x2e8>)
 80053a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053ae:	60fb      	str	r3, [r7, #12]
 80053b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053b2:	4a52      	ldr	r2, [pc, #328]	@ (80054fc <HAL_GPIO_Init+0x2ec>)
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	089b      	lsrs	r3, r3, #2
 80053b8:	3302      	adds	r3, #2
 80053ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	220f      	movs	r2, #15
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	43db      	mvns	r3, r3
 80053d0:	69ba      	ldr	r2, [r7, #24]
 80053d2:	4013      	ands	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a49      	ldr	r2, [pc, #292]	@ (8005500 <HAL_GPIO_Init+0x2f0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d019      	beq.n	8005412 <HAL_GPIO_Init+0x202>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a48      	ldr	r2, [pc, #288]	@ (8005504 <HAL_GPIO_Init+0x2f4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <HAL_GPIO_Init+0x1fe>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a47      	ldr	r2, [pc, #284]	@ (8005508 <HAL_GPIO_Init+0x2f8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00d      	beq.n	800540a <HAL_GPIO_Init+0x1fa>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a46      	ldr	r2, [pc, #280]	@ (800550c <HAL_GPIO_Init+0x2fc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d007      	beq.n	8005406 <HAL_GPIO_Init+0x1f6>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a45      	ldr	r2, [pc, #276]	@ (8005510 <HAL_GPIO_Init+0x300>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d101      	bne.n	8005402 <HAL_GPIO_Init+0x1f2>
 80053fe:	2304      	movs	r3, #4
 8005400:	e008      	b.n	8005414 <HAL_GPIO_Init+0x204>
 8005402:	2307      	movs	r3, #7
 8005404:	e006      	b.n	8005414 <HAL_GPIO_Init+0x204>
 8005406:	2303      	movs	r3, #3
 8005408:	e004      	b.n	8005414 <HAL_GPIO_Init+0x204>
 800540a:	2302      	movs	r3, #2
 800540c:	e002      	b.n	8005414 <HAL_GPIO_Init+0x204>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <HAL_GPIO_Init+0x204>
 8005412:	2300      	movs	r3, #0
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	f002 0203 	and.w	r2, r2, #3
 800541a:	0092      	lsls	r2, r2, #2
 800541c:	4093      	lsls	r3, r2
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	4313      	orrs	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005424:	4935      	ldr	r1, [pc, #212]	@ (80054fc <HAL_GPIO_Init+0x2ec>)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	089b      	lsrs	r3, r3, #2
 800542a:	3302      	adds	r3, #2
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005432:	4b38      	ldr	r3, [pc, #224]	@ (8005514 <HAL_GPIO_Init+0x304>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	43db      	mvns	r3, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4013      	ands	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005456:	4a2f      	ldr	r2, [pc, #188]	@ (8005514 <HAL_GPIO_Init+0x304>)
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800545c:	4b2d      	ldr	r3, [pc, #180]	@ (8005514 <HAL_GPIO_Init+0x304>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	43db      	mvns	r3, r3
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	4013      	ands	r3, r2
 800546a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005480:	4a24      	ldr	r2, [pc, #144]	@ (8005514 <HAL_GPIO_Init+0x304>)
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005486:	4b23      	ldr	r3, [pc, #140]	@ (8005514 <HAL_GPIO_Init+0x304>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	43db      	mvns	r3, r3
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	4013      	ands	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005514 <HAL_GPIO_Init+0x304>)
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054b0:	4b18      	ldr	r3, [pc, #96]	@ (8005514 <HAL_GPIO_Init+0x304>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	43db      	mvns	r3, r3
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	4013      	ands	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054d4:	4a0f      	ldr	r2, [pc, #60]	@ (8005514 <HAL_GPIO_Init+0x304>)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	3301      	adds	r3, #1
 80054de:	61fb      	str	r3, [r7, #28]
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	2b0f      	cmp	r3, #15
 80054e4:	f67f aea2 	bls.w	800522c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	3724      	adds	r7, #36	@ 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800
 80054fc:	40013800 	.word	0x40013800
 8005500:	40020000 	.word	0x40020000
 8005504:	40020400 	.word	0x40020400
 8005508:	40020800 	.word	0x40020800
 800550c:	40020c00 	.word	0x40020c00
 8005510:	40021000 	.word	0x40021000
 8005514:	40013c00 	.word	0x40013c00

08005518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	807b      	strh	r3, [r7, #2]
 8005524:	4613      	mov	r3, r2
 8005526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005528:	787b      	ldrb	r3, [r7, #1]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800552e:	887a      	ldrh	r2, [r7, #2]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005534:	e003      	b.n	800553e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005536:	887b      	ldrh	r3, [r7, #2]
 8005538:	041a      	lsls	r2, r3, #16
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	619a      	str	r2, [r3, #24]
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
	...

0800554c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e12b      	b.n	80057b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fe f926 	bl	80037c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2224      	movs	r2, #36	@ 0x24
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0201 	bic.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800559e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055b0:	f001 fc20 	bl	8006df4 <HAL_RCC_GetPCLK1Freq>
 80055b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4a81      	ldr	r2, [pc, #516]	@ (80057c0 <HAL_I2C_Init+0x274>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d807      	bhi.n	80055d0 <HAL_I2C_Init+0x84>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4a80      	ldr	r2, [pc, #512]	@ (80057c4 <HAL_I2C_Init+0x278>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	bf94      	ite	ls
 80055c8:	2301      	movls	r3, #1
 80055ca:	2300      	movhi	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	e006      	b.n	80055de <HAL_I2C_Init+0x92>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4a7d      	ldr	r2, [pc, #500]	@ (80057c8 <HAL_I2C_Init+0x27c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	bf94      	ite	ls
 80055d8:	2301      	movls	r3, #1
 80055da:	2300      	movhi	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e0e7      	b.n	80057b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4a78      	ldr	r2, [pc, #480]	@ (80057cc <HAL_I2C_Init+0x280>)
 80055ea:	fba2 2303 	umull	r2, r3, r2, r3
 80055ee:	0c9b      	lsrs	r3, r3, #18
 80055f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	4a6a      	ldr	r2, [pc, #424]	@ (80057c0 <HAL_I2C_Init+0x274>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d802      	bhi.n	8005620 <HAL_I2C_Init+0xd4>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3301      	adds	r3, #1
 800561e:	e009      	b.n	8005634 <HAL_I2C_Init+0xe8>
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005626:	fb02 f303 	mul.w	r3, r2, r3
 800562a:	4a69      	ldr	r2, [pc, #420]	@ (80057d0 <HAL_I2C_Init+0x284>)
 800562c:	fba2 2303 	umull	r2, r3, r2, r3
 8005630:	099b      	lsrs	r3, r3, #6
 8005632:	3301      	adds	r3, #1
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6812      	ldr	r2, [r2, #0]
 8005638:	430b      	orrs	r3, r1
 800563a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005646:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	495c      	ldr	r1, [pc, #368]	@ (80057c0 <HAL_I2C_Init+0x274>)
 8005650:	428b      	cmp	r3, r1
 8005652:	d819      	bhi.n	8005688 <HAL_I2C_Init+0x13c>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	1e59      	subs	r1, r3, #1
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005662:	1c59      	adds	r1, r3, #1
 8005664:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005668:	400b      	ands	r3, r1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <HAL_I2C_Init+0x138>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	1e59      	subs	r1, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	fbb1 f3f3 	udiv	r3, r1, r3
 800567c:	3301      	adds	r3, #1
 800567e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005682:	e051      	b.n	8005728 <HAL_I2C_Init+0x1dc>
 8005684:	2304      	movs	r3, #4
 8005686:	e04f      	b.n	8005728 <HAL_I2C_Init+0x1dc>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d111      	bne.n	80056b4 <HAL_I2C_Init+0x168>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	1e58      	subs	r0, r3, #1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6859      	ldr	r1, [r3, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	440b      	add	r3, r1
 800569e:	fbb0 f3f3 	udiv	r3, r0, r3
 80056a2:	3301      	adds	r3, #1
 80056a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bf0c      	ite	eq
 80056ac:	2301      	moveq	r3, #1
 80056ae:	2300      	movne	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	e012      	b.n	80056da <HAL_I2C_Init+0x18e>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	1e58      	subs	r0, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6859      	ldr	r1, [r3, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	0099      	lsls	r1, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056ca:	3301      	adds	r3, #1
 80056cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bf0c      	ite	eq
 80056d4:	2301      	moveq	r3, #1
 80056d6:	2300      	movne	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_I2C_Init+0x196>
 80056de:	2301      	movs	r3, #1
 80056e0:	e022      	b.n	8005728 <HAL_I2C_Init+0x1dc>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10e      	bne.n	8005708 <HAL_I2C_Init+0x1bc>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	1e58      	subs	r0, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6859      	ldr	r1, [r3, #4]
 80056f2:	460b      	mov	r3, r1
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	440b      	add	r3, r1
 80056f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80056fc:	3301      	adds	r3, #1
 80056fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005706:	e00f      	b.n	8005728 <HAL_I2C_Init+0x1dc>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	1e58      	subs	r0, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6859      	ldr	r1, [r3, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	0099      	lsls	r1, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	fbb0 f3f3 	udiv	r3, r0, r3
 800571e:	3301      	adds	r3, #1
 8005720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005724:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	6809      	ldr	r1, [r1, #0]
 800572c:	4313      	orrs	r3, r2
 800572e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69da      	ldr	r2, [r3, #28]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005756:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6911      	ldr	r1, [r2, #16]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	68d2      	ldr	r2, [r2, #12]
 8005762:	4311      	orrs	r1, r2
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	6812      	ldr	r2, [r2, #0]
 8005768:	430b      	orrs	r3, r1
 800576a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	695a      	ldr	r2, [r3, #20]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0201 	orr.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	000186a0 	.word	0x000186a0
 80057c4:	001e847f 	.word	0x001e847f
 80057c8:	003d08ff 	.word	0x003d08ff
 80057cc:	431bde83 	.word	0x431bde83
 80057d0:	10624dd3 	.word	0x10624dd3

080057d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	4608      	mov	r0, r1
 80057de:	4611      	mov	r1, r2
 80057e0:	461a      	mov	r2, r3
 80057e2:	4603      	mov	r3, r0
 80057e4:	817b      	strh	r3, [r7, #10]
 80057e6:	460b      	mov	r3, r1
 80057e8:	813b      	strh	r3, [r7, #8]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057ee:	f7fe fe1d 	bl	800442c <HAL_GetTick>
 80057f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	f040 80d9 	bne.w	80059b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	2319      	movs	r3, #25
 8005808:	2201      	movs	r2, #1
 800580a:	496d      	ldr	r1, [pc, #436]	@ (80059c0 <HAL_I2C_Mem_Write+0x1ec>)
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 fc8b 	bl	8006128 <I2C_WaitOnFlagUntilTimeout>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005818:	2302      	movs	r3, #2
 800581a:	e0cc      	b.n	80059b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <HAL_I2C_Mem_Write+0x56>
 8005826:	2302      	movs	r3, #2
 8005828:	e0c5      	b.n	80059b6 <HAL_I2C_Mem_Write+0x1e2>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b01      	cmp	r3, #1
 800583e:	d007      	beq.n	8005850 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800585e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2221      	movs	r2, #33	@ 0x21
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2240      	movs	r2, #64	@ 0x40
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a3a      	ldr	r2, [r7, #32]
 800587a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005880:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4a4d      	ldr	r2, [pc, #308]	@ (80059c4 <HAL_I2C_Mem_Write+0x1f0>)
 8005890:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005892:	88f8      	ldrh	r0, [r7, #6]
 8005894:	893a      	ldrh	r2, [r7, #8]
 8005896:	8979      	ldrh	r1, [r7, #10]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	9301      	str	r3, [sp, #4]
 800589c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	4603      	mov	r3, r0
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 fac2 	bl	8005e2c <I2C_RequestMemoryWrite>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d052      	beq.n	8005954 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e081      	b.n	80059b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 fd50 	bl	800635c <I2C_WaitOnTXEFlagUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00d      	beq.n	80058de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d107      	bne.n	80058da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e06b      	b.n	80059b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b04      	cmp	r3, #4
 800591a:	d11b      	bne.n	8005954 <HAL_I2C_Mem_Write+0x180>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005920:	2b00      	cmp	r3, #0
 8005922:	d017      	beq.n	8005954 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005928:	781a      	ldrb	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1aa      	bne.n	80058b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fd43 	bl	80063ec <I2C_WaitOnBTFFlagUntilTimeout>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00d      	beq.n	8005988 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005970:	2b04      	cmp	r3, #4
 8005972:	d107      	bne.n	8005984 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005982:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e016      	b.n	80059b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	e000      	b.n	80059b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80059b4:	2302      	movs	r3, #2
  }
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	00100002 	.word	0x00100002
 80059c4:	ffff0000 	.word	0xffff0000

080059c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08c      	sub	sp, #48	@ 0x30
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	4608      	mov	r0, r1
 80059d2:	4611      	mov	r1, r2
 80059d4:	461a      	mov	r2, r3
 80059d6:	4603      	mov	r3, r0
 80059d8:	817b      	strh	r3, [r7, #10]
 80059da:	460b      	mov	r3, r1
 80059dc:	813b      	strh	r3, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059e2:	f7fe fd23 	bl	800442c <HAL_GetTick>
 80059e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	f040 8214 	bne.w	8005e1e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	2319      	movs	r3, #25
 80059fc:	2201      	movs	r2, #1
 80059fe:	497b      	ldr	r1, [pc, #492]	@ (8005bec <HAL_I2C_Mem_Read+0x224>)
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 fb91 	bl	8006128 <I2C_WaitOnFlagUntilTimeout>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e207      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <HAL_I2C_Mem_Read+0x56>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e200      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d007      	beq.n	8005a44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2222      	movs	r2, #34	@ 0x22
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2240      	movs	r2, #64	@ 0x40
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005a74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4a5b      	ldr	r2, [pc, #364]	@ (8005bf0 <HAL_I2C_Mem_Read+0x228>)
 8005a84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a86:	88f8      	ldrh	r0, [r7, #6]
 8005a88:	893a      	ldrh	r2, [r7, #8]
 8005a8a:	8979      	ldrh	r1, [r7, #10]
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	4603      	mov	r3, r0
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fa5e 	bl	8005f58 <I2C_RequestMemoryRead>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e1bc      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d113      	bne.n	8005ad6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aae:	2300      	movs	r3, #0
 8005ab0:	623b      	str	r3, [r7, #32]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	623b      	str	r3, [r7, #32]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	623b      	str	r3, [r7, #32]
 8005ac2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e190      	b.n	8005df8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d11b      	bne.n	8005b16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aee:	2300      	movs	r3, #0
 8005af0:	61fb      	str	r3, [r7, #28]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	61fb      	str	r3, [r7, #28]
 8005b02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	e170      	b.n	8005df8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d11b      	bne.n	8005b56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	61bb      	str	r3, [r7, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	61bb      	str	r3, [r7, #24]
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	e150      	b.n	8005df8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005b6c:	e144      	b.n	8005df8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	f200 80f1 	bhi.w	8005d5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d123      	bne.n	8005bc8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 fc79 	bl	800647c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e145      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005bc6:	e117      	b.n	8005df8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d14e      	bne.n	8005c6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	4906      	ldr	r1, [pc, #24]	@ (8005bf4 <HAL_I2C_Mem_Read+0x22c>)
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 faa4 	bl	8006128 <I2C_WaitOnFlagUntilTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e11a      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
 8005bea:	bf00      	nop
 8005bec:	00100002 	.word	0x00100002
 8005bf0:	ffff0000 	.word	0xffff0000
 8005bf4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691a      	ldr	r2, [r3, #16]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c6c:	e0c4      	b.n	8005df8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c74:	2200      	movs	r2, #0
 8005c76:	496c      	ldr	r1, [pc, #432]	@ (8005e28 <HAL_I2C_Mem_Read+0x460>)
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 fa55 	bl	8006128 <I2C_WaitOnFlagUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e0cb      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691a      	ldr	r2, [r3, #16]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	4955      	ldr	r1, [pc, #340]	@ (8005e28 <HAL_I2C_Mem_Read+0x460>)
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 fa27 	bl	8006128 <I2C_WaitOnFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e09d      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691a      	ldr	r2, [r3, #16]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d58:	e04e      	b.n	8005df8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 fb8c 	bl	800647c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e058      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d124      	bne.n	8005df8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d107      	bne.n	8005dc6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dc4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f47f aeb6 	bne.w	8005b6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e000      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005e1e:	2302      	movs	r3, #2
  }
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3728      	adds	r7, #40	@ 0x28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	00010004 	.word	0x00010004

08005e2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af02      	add	r7, sp, #8
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	4608      	mov	r0, r1
 8005e36:	4611      	mov	r1, r2
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	817b      	strh	r3, [r7, #10]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	813b      	strh	r3, [r7, #8]
 8005e42:	4613      	mov	r3, r2
 8005e44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 f960 	bl	8006128 <I2C_WaitOnFlagUntilTimeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00d      	beq.n	8005e8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e7c:	d103      	bne.n	8005e86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e84:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e05f      	b.n	8005f4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e8a:	897b      	ldrh	r3, [r7, #10]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	461a      	mov	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9c:	6a3a      	ldr	r2, [r7, #32]
 8005e9e:	492d      	ldr	r1, [pc, #180]	@ (8005f54 <I2C_RequestMemoryWrite+0x128>)
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f9bb 	bl	800621c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e04c      	b.n	8005f4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	617b      	str	r3, [r7, #20]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ec8:	6a39      	ldr	r1, [r7, #32]
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 fa46 	bl	800635c <I2C_WaitOnTXEFlagUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00d      	beq.n	8005ef2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d107      	bne.n	8005eee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e02b      	b.n	8005f4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d105      	bne.n	8005f04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ef8:	893b      	ldrh	r3, [r7, #8]
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	611a      	str	r2, [r3, #16]
 8005f02:	e021      	b.n	8005f48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f04:	893b      	ldrh	r3, [r7, #8]
 8005f06:	0a1b      	lsrs	r3, r3, #8
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f14:	6a39      	ldr	r1, [r7, #32]
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 fa20 	bl	800635c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00d      	beq.n	8005f3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d107      	bne.n	8005f3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e005      	b.n	8005f4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f3e:	893b      	ldrh	r3, [r7, #8]
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	00010002 	.word	0x00010002

08005f58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af02      	add	r7, sp, #8
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	4608      	mov	r0, r1
 8005f62:	4611      	mov	r1, r2
 8005f64:	461a      	mov	r2, r3
 8005f66:	4603      	mov	r3, r0
 8005f68:	817b      	strh	r3, [r7, #10]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	813b      	strh	r3, [r7, #8]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f8c2 	bl	8006128 <I2C_WaitOnFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00d      	beq.n	8005fc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fb8:	d103      	bne.n	8005fc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e0aa      	b.n	800611c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fc6:	897b      	ldrh	r3, [r7, #10]
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	461a      	mov	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005fd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd8:	6a3a      	ldr	r2, [r7, #32]
 8005fda:	4952      	ldr	r1, [pc, #328]	@ (8006124 <I2C_RequestMemoryRead+0x1cc>)
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f91d 	bl	800621c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e097      	b.n	800611c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fec:	2300      	movs	r3, #0
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006004:	6a39      	ldr	r1, [r7, #32]
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f9a8 	bl	800635c <I2C_WaitOnTXEFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00d      	beq.n	800602e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006016:	2b04      	cmp	r3, #4
 8006018:	d107      	bne.n	800602a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006028:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e076      	b.n	800611c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800602e:	88fb      	ldrh	r3, [r7, #6]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d105      	bne.n	8006040 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006034:	893b      	ldrh	r3, [r7, #8]
 8006036:	b2da      	uxtb	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	611a      	str	r2, [r3, #16]
 800603e:	e021      	b.n	8006084 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006040:	893b      	ldrh	r3, [r7, #8]
 8006042:	0a1b      	lsrs	r3, r3, #8
 8006044:	b29b      	uxth	r3, r3
 8006046:	b2da      	uxtb	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800604e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006050:	6a39      	ldr	r1, [r7, #32]
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 f982 	bl	800635c <I2C_WaitOnTXEFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00d      	beq.n	800607a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006062:	2b04      	cmp	r3, #4
 8006064:	d107      	bne.n	8006076 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006074:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e050      	b.n	800611c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800607a:	893b      	ldrh	r3, [r7, #8]
 800607c:	b2da      	uxtb	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006086:	6a39      	ldr	r1, [r7, #32]
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f967 	bl	800635c <I2C_WaitOnTXEFlagUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00d      	beq.n	80060b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006098:	2b04      	cmp	r3, #4
 800609a:	d107      	bne.n	80060ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e035      	b.n	800611c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 f82b 	bl	8006128 <I2C_WaitOnFlagUntilTimeout>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00d      	beq.n	80060f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060e6:	d103      	bne.n	80060f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e013      	b.n	800611c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060f4:	897b      	ldrh	r3, [r7, #10]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	f043 0301 	orr.w	r3, r3, #1
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	6a3a      	ldr	r2, [r7, #32]
 8006108:	4906      	ldr	r1, [pc, #24]	@ (8006124 <I2C_RequestMemoryRead+0x1cc>)
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f886 	bl	800621c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	00010002 	.word	0x00010002

08006128 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	4613      	mov	r3, r2
 8006136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006138:	e048      	b.n	80061cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006140:	d044      	beq.n	80061cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006142:	f7fe f973 	bl	800442c <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d302      	bcc.n	8006158 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d139      	bne.n	80061cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	0c1b      	lsrs	r3, r3, #16
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b01      	cmp	r3, #1
 8006160:	d10d      	bne.n	800617e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	43da      	mvns	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4013      	ands	r3, r2
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf0c      	ite	eq
 8006174:	2301      	moveq	r3, #1
 8006176:	2300      	movne	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	e00c      	b.n	8006198 <I2C_WaitOnFlagUntilTimeout+0x70>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	43da      	mvns	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	4013      	ands	r3, r2
 800618a:	b29b      	uxth	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	bf0c      	ite	eq
 8006190:	2301      	moveq	r3, #1
 8006192:	2300      	movne	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	79fb      	ldrb	r3, [r7, #7]
 800619a:	429a      	cmp	r2, r3
 800619c:	d116      	bne.n	80061cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b8:	f043 0220 	orr.w	r2, r3, #32
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e023      	b.n	8006214 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	0c1b      	lsrs	r3, r3, #16
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d10d      	bne.n	80061f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	43da      	mvns	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	4013      	ands	r3, r2
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	bf0c      	ite	eq
 80061e8:	2301      	moveq	r3, #1
 80061ea:	2300      	movne	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	e00c      	b.n	800620c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	43da      	mvns	r2, r3
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	4013      	ands	r3, r2
 80061fe:	b29b      	uxth	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	bf0c      	ite	eq
 8006204:	2301      	moveq	r3, #1
 8006206:	2300      	movne	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	461a      	mov	r2, r3
 800620c:	79fb      	ldrb	r3, [r7, #7]
 800620e:	429a      	cmp	r2, r3
 8006210:	d093      	beq.n	800613a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800622a:	e071      	b.n	8006310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006236:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800623a:	d123      	bne.n	8006284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800624a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006254:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2200      	movs	r2, #0
 800625a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006270:	f043 0204 	orr.w	r2, r3, #4
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e067      	b.n	8006354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628a:	d041      	beq.n	8006310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628c:	f7fe f8ce 	bl	800442c <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	429a      	cmp	r2, r3
 800629a:	d302      	bcc.n	80062a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d136      	bne.n	8006310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	0c1b      	lsrs	r3, r3, #16
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d10c      	bne.n	80062c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	43da      	mvns	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4013      	ands	r3, r2
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	bf14      	ite	ne
 80062be:	2301      	movne	r3, #1
 80062c0:	2300      	moveq	r3, #0
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	e00b      	b.n	80062de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	43da      	mvns	r2, r3
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	4013      	ands	r3, r2
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bf14      	ite	ne
 80062d8:	2301      	movne	r3, #1
 80062da:	2300      	moveq	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d016      	beq.n	8006310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	f043 0220 	orr.w	r2, r3, #32
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e021      	b.n	8006354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	0c1b      	lsrs	r3, r3, #16
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b01      	cmp	r3, #1
 8006318:	d10c      	bne.n	8006334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	43da      	mvns	r2, r3
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	4013      	ands	r3, r2
 8006326:	b29b      	uxth	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	bf14      	ite	ne
 800632c:	2301      	movne	r3, #1
 800632e:	2300      	moveq	r3, #0
 8006330:	b2db      	uxtb	r3, r3
 8006332:	e00b      	b.n	800634c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	43da      	mvns	r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	4013      	ands	r3, r2
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	bf14      	ite	ne
 8006346:	2301      	movne	r3, #1
 8006348:	2300      	moveq	r3, #0
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	f47f af6d 	bne.w	800622c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006368:	e034      	b.n	80063d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f8e3 	bl	8006536 <I2C_IsAcknowledgeFailed>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e034      	b.n	80063e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d028      	beq.n	80063d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006382:	f7fe f853 	bl	800442c <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	429a      	cmp	r2, r3
 8006390:	d302      	bcc.n	8006398 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d11d      	bne.n	80063d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a2:	2b80      	cmp	r3, #128	@ 0x80
 80063a4:	d016      	beq.n	80063d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c0:	f043 0220 	orr.w	r2, r3, #32
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e007      	b.n	80063e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063de:	2b80      	cmp	r3, #128	@ 0x80
 80063e0:	d1c3      	bne.n	800636a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063f8:	e034      	b.n	8006464 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 f89b 	bl	8006536 <I2C_IsAcknowledgeFailed>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e034      	b.n	8006474 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006410:	d028      	beq.n	8006464 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006412:	f7fe f80b 	bl	800442c <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	429a      	cmp	r2, r3
 8006420:	d302      	bcc.n	8006428 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d11d      	bne.n	8006464 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f003 0304 	and.w	r3, r3, #4
 8006432:	2b04      	cmp	r3, #4
 8006434:	d016      	beq.n	8006464 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006450:	f043 0220 	orr.w	r2, r3, #32
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e007      	b.n	8006474 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	2b04      	cmp	r3, #4
 8006470:	d1c3      	bne.n	80063fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006488:	e049      	b.n	800651e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	f003 0310 	and.w	r3, r3, #16
 8006494:	2b10      	cmp	r3, #16
 8006496:	d119      	bne.n	80064cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0210 	mvn.w	r2, #16
 80064a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2220      	movs	r2, #32
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e030      	b.n	800652e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064cc:	f7fd ffae 	bl	800442c <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d302      	bcc.n	80064e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d11d      	bne.n	800651e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ec:	2b40      	cmp	r3, #64	@ 0x40
 80064ee:	d016      	beq.n	800651e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650a:	f043 0220 	orr.w	r2, r3, #32
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e007      	b.n	800652e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006528:	2b40      	cmp	r3, #64	@ 0x40
 800652a:	d1ae      	bne.n	800648a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006536:	b480      	push	{r7}
 8006538:	b083      	sub	sp, #12
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800654c:	d11b      	bne.n	8006586 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006556:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006572:	f043 0204 	orr.w	r2, r3, #4
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e267      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d075      	beq.n	800669e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065b2:	4b88      	ldr	r3, [pc, #544]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 030c 	and.w	r3, r3, #12
 80065ba:	2b04      	cmp	r3, #4
 80065bc:	d00c      	beq.n	80065d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065be:	4b85      	ldr	r3, [pc, #532]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d112      	bne.n	80065f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065ca:	4b82      	ldr	r3, [pc, #520]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065d6:	d10b      	bne.n	80065f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d8:	4b7e      	ldr	r3, [pc, #504]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d05b      	beq.n	800669c <HAL_RCC_OscConfig+0x108>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d157      	bne.n	800669c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e242      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f8:	d106      	bne.n	8006608 <HAL_RCC_OscConfig+0x74>
 80065fa:	4b76      	ldr	r3, [pc, #472]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a75      	ldr	r2, [pc, #468]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 8006600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	e01d      	b.n	8006644 <HAL_RCC_OscConfig+0xb0>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006610:	d10c      	bne.n	800662c <HAL_RCC_OscConfig+0x98>
 8006612:	4b70      	ldr	r3, [pc, #448]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a6f      	ldr	r2, [pc, #444]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 8006618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	4b6d      	ldr	r3, [pc, #436]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a6c      	ldr	r2, [pc, #432]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 8006624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	e00b      	b.n	8006644 <HAL_RCC_OscConfig+0xb0>
 800662c:	4b69      	ldr	r3, [pc, #420]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a68      	ldr	r2, [pc, #416]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 8006632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	4b66      	ldr	r3, [pc, #408]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a65      	ldr	r2, [pc, #404]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 800663e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d013      	beq.n	8006674 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800664c:	f7fd feee 	bl	800442c <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006654:	f7fd feea 	bl	800442c <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b64      	cmp	r3, #100	@ 0x64
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e207      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006666:	4b5b      	ldr	r3, [pc, #364]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0f0      	beq.n	8006654 <HAL_RCC_OscConfig+0xc0>
 8006672:	e014      	b.n	800669e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006674:	f7fd feda 	bl	800442c <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800667c:	f7fd fed6 	bl	800442c <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b64      	cmp	r3, #100	@ 0x64
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e1f3      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800668e:	4b51      	ldr	r3, [pc, #324]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1f0      	bne.n	800667c <HAL_RCC_OscConfig+0xe8>
 800669a:	e000      	b.n	800669e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800669c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d063      	beq.n	8006772 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066aa:	4b4a      	ldr	r3, [pc, #296]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 030c 	and.w	r3, r3, #12
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00b      	beq.n	80066ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066b6:	4b47      	ldr	r3, [pc, #284]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d11c      	bne.n	80066fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066c2:	4b44      	ldr	r3, [pc, #272]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d116      	bne.n	80066fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ce:	4b41      	ldr	r3, [pc, #260]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <HAL_RCC_OscConfig+0x152>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d001      	beq.n	80066e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e1c7      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e6:	4b3b      	ldr	r3, [pc, #236]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	4937      	ldr	r1, [pc, #220]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066fa:	e03a      	b.n	8006772 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d020      	beq.n	8006746 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006704:	4b34      	ldr	r3, [pc, #208]	@ (80067d8 <HAL_RCC_OscConfig+0x244>)
 8006706:	2201      	movs	r2, #1
 8006708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670a:	f7fd fe8f 	bl	800442c <HAL_GetTick>
 800670e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006710:	e008      	b.n	8006724 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006712:	f7fd fe8b 	bl	800442c <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e1a8      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006724:	4b2b      	ldr	r3, [pc, #172]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0f0      	beq.n	8006712 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006730:	4b28      	ldr	r3, [pc, #160]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	4925      	ldr	r1, [pc, #148]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 8006740:	4313      	orrs	r3, r2
 8006742:	600b      	str	r3, [r1, #0]
 8006744:	e015      	b.n	8006772 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006746:	4b24      	ldr	r3, [pc, #144]	@ (80067d8 <HAL_RCC_OscConfig+0x244>)
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674c:	f7fd fe6e 	bl	800442c <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006754:	f7fd fe6a 	bl	800442c <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e187      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006766:	4b1b      	ldr	r3, [pc, #108]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f0      	bne.n	8006754 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d036      	beq.n	80067ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d016      	beq.n	80067b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006786:	4b15      	ldr	r3, [pc, #84]	@ (80067dc <HAL_RCC_OscConfig+0x248>)
 8006788:	2201      	movs	r2, #1
 800678a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800678c:	f7fd fe4e 	bl	800442c <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006794:	f7fd fe4a 	bl	800442c <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e167      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067a6:	4b0b      	ldr	r3, [pc, #44]	@ (80067d4 <HAL_RCC_OscConfig+0x240>)
 80067a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f0      	beq.n	8006794 <HAL_RCC_OscConfig+0x200>
 80067b2:	e01b      	b.n	80067ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067b4:	4b09      	ldr	r3, [pc, #36]	@ (80067dc <HAL_RCC_OscConfig+0x248>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067ba:	f7fd fe37 	bl	800442c <HAL_GetTick>
 80067be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067c0:	e00e      	b.n	80067e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067c2:	f7fd fe33 	bl	800442c <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d907      	bls.n	80067e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e150      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
 80067d4:	40023800 	.word	0x40023800
 80067d8:	42470000 	.word	0x42470000
 80067dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067e0:	4b88      	ldr	r3, [pc, #544]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 80067e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1ea      	bne.n	80067c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8097 	beq.w	8006928 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067fa:	2300      	movs	r3, #0
 80067fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067fe:	4b81      	ldr	r3, [pc, #516]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 8006800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10f      	bne.n	800682a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800680a:	2300      	movs	r3, #0
 800680c:	60bb      	str	r3, [r7, #8]
 800680e:	4b7d      	ldr	r3, [pc, #500]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 8006810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006812:	4a7c      	ldr	r2, [pc, #496]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 8006814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006818:	6413      	str	r3, [r2, #64]	@ 0x40
 800681a:	4b7a      	ldr	r3, [pc, #488]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 800681c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006822:	60bb      	str	r3, [r7, #8]
 8006824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006826:	2301      	movs	r3, #1
 8006828:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800682a:	4b77      	ldr	r3, [pc, #476]	@ (8006a08 <HAL_RCC_OscConfig+0x474>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006832:	2b00      	cmp	r3, #0
 8006834:	d118      	bne.n	8006868 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006836:	4b74      	ldr	r3, [pc, #464]	@ (8006a08 <HAL_RCC_OscConfig+0x474>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a73      	ldr	r2, [pc, #460]	@ (8006a08 <HAL_RCC_OscConfig+0x474>)
 800683c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006842:	f7fd fdf3 	bl	800442c <HAL_GetTick>
 8006846:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006848:	e008      	b.n	800685c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800684a:	f7fd fdef 	bl	800442c <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e10c      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800685c:	4b6a      	ldr	r3, [pc, #424]	@ (8006a08 <HAL_RCC_OscConfig+0x474>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0f0      	beq.n	800684a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d106      	bne.n	800687e <HAL_RCC_OscConfig+0x2ea>
 8006870:	4b64      	ldr	r3, [pc, #400]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 8006872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006874:	4a63      	ldr	r2, [pc, #396]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 8006876:	f043 0301 	orr.w	r3, r3, #1
 800687a:	6713      	str	r3, [r2, #112]	@ 0x70
 800687c:	e01c      	b.n	80068b8 <HAL_RCC_OscConfig+0x324>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	2b05      	cmp	r3, #5
 8006884:	d10c      	bne.n	80068a0 <HAL_RCC_OscConfig+0x30c>
 8006886:	4b5f      	ldr	r3, [pc, #380]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 8006888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688a:	4a5e      	ldr	r2, [pc, #376]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 800688c:	f043 0304 	orr.w	r3, r3, #4
 8006890:	6713      	str	r3, [r2, #112]	@ 0x70
 8006892:	4b5c      	ldr	r3, [pc, #368]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 8006894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006896:	4a5b      	ldr	r2, [pc, #364]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 8006898:	f043 0301 	orr.w	r3, r3, #1
 800689c:	6713      	str	r3, [r2, #112]	@ 0x70
 800689e:	e00b      	b.n	80068b8 <HAL_RCC_OscConfig+0x324>
 80068a0:	4b58      	ldr	r3, [pc, #352]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 80068a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a4:	4a57      	ldr	r2, [pc, #348]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 80068a6:	f023 0301 	bic.w	r3, r3, #1
 80068aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80068ac:	4b55      	ldr	r3, [pc, #340]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 80068ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b0:	4a54      	ldr	r2, [pc, #336]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 80068b2:	f023 0304 	bic.w	r3, r3, #4
 80068b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d015      	beq.n	80068ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c0:	f7fd fdb4 	bl	800442c <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c6:	e00a      	b.n	80068de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068c8:	f7fd fdb0 	bl	800442c <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e0cb      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068de:	4b49      	ldr	r3, [pc, #292]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 80068e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d0ee      	beq.n	80068c8 <HAL_RCC_OscConfig+0x334>
 80068ea:	e014      	b.n	8006916 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ec:	f7fd fd9e 	bl	800442c <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068f2:	e00a      	b.n	800690a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068f4:	f7fd fd9a 	bl	800442c <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006902:	4293      	cmp	r3, r2
 8006904:	d901      	bls.n	800690a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e0b5      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800690a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1ee      	bne.n	80068f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d105      	bne.n	8006928 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800691c:	4b39      	ldr	r3, [pc, #228]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 800691e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006920:	4a38      	ldr	r2, [pc, #224]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 8006922:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006926:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 80a1 	beq.w	8006a74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006932:	4b34      	ldr	r3, [pc, #208]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 030c 	and.w	r3, r3, #12
 800693a:	2b08      	cmp	r3, #8
 800693c:	d05c      	beq.n	80069f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d141      	bne.n	80069ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006946:	4b31      	ldr	r3, [pc, #196]	@ (8006a0c <HAL_RCC_OscConfig+0x478>)
 8006948:	2200      	movs	r2, #0
 800694a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694c:	f7fd fd6e 	bl	800442c <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006954:	f7fd fd6a 	bl	800442c <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e087      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006966:	4b27      	ldr	r3, [pc, #156]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f0      	bne.n	8006954 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69da      	ldr	r2, [r3, #28]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006980:	019b      	lsls	r3, r3, #6
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006988:	085b      	lsrs	r3, r3, #1
 800698a:	3b01      	subs	r3, #1
 800698c:	041b      	lsls	r3, r3, #16
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006994:	061b      	lsls	r3, r3, #24
 8006996:	491b      	ldr	r1, [pc, #108]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 8006998:	4313      	orrs	r3, r2
 800699a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800699c:	4b1b      	ldr	r3, [pc, #108]	@ (8006a0c <HAL_RCC_OscConfig+0x478>)
 800699e:	2201      	movs	r2, #1
 80069a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a2:	f7fd fd43 	bl	800442c <HAL_GetTick>
 80069a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069a8:	e008      	b.n	80069bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069aa:	f7fd fd3f 	bl	800442c <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e05c      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069bc:	4b11      	ldr	r3, [pc, #68]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0f0      	beq.n	80069aa <HAL_RCC_OscConfig+0x416>
 80069c8:	e054      	b.n	8006a74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ca:	4b10      	ldr	r3, [pc, #64]	@ (8006a0c <HAL_RCC_OscConfig+0x478>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d0:	f7fd fd2c 	bl	800442c <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069d8:	f7fd fd28 	bl	800442c <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e045      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ea:	4b06      	ldr	r3, [pc, #24]	@ (8006a04 <HAL_RCC_OscConfig+0x470>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f0      	bne.n	80069d8 <HAL_RCC_OscConfig+0x444>
 80069f6:	e03d      	b.n	8006a74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d107      	bne.n	8006a10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e038      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
 8006a04:	40023800 	.word	0x40023800
 8006a08:	40007000 	.word	0x40007000
 8006a0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a10:	4b1b      	ldr	r3, [pc, #108]	@ (8006a80 <HAL_RCC_OscConfig+0x4ec>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d028      	beq.n	8006a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d121      	bne.n	8006a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d11a      	bne.n	8006a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a40:	4013      	ands	r3, r2
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d111      	bne.n	8006a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a56:	085b      	lsrs	r3, r3, #1
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d107      	bne.n	8006a70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d001      	beq.n	8006a74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40023800 	.word	0x40023800

08006a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e0cc      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a98:	4b68      	ldr	r3, [pc, #416]	@ (8006c3c <HAL_RCC_ClockConfig+0x1b8>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0307 	and.w	r3, r3, #7
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d90c      	bls.n	8006ac0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aa6:	4b65      	ldr	r3, [pc, #404]	@ (8006c3c <HAL_RCC_ClockConfig+0x1b8>)
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aae:	4b63      	ldr	r3, [pc, #396]	@ (8006c3c <HAL_RCC_ClockConfig+0x1b8>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d001      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e0b8      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d020      	beq.n	8006b0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ad8:	4b59      	ldr	r3, [pc, #356]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	4a58      	ldr	r2, [pc, #352]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006ade:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006ae2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006af0:	4b53      	ldr	r3, [pc, #332]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	4a52      	ldr	r2, [pc, #328]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006af6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006afa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006afc:	4b50      	ldr	r3, [pc, #320]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	494d      	ldr	r1, [pc, #308]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d044      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d107      	bne.n	8006b32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b22:	4b47      	ldr	r3, [pc, #284]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d119      	bne.n	8006b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e07f      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d003      	beq.n	8006b42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d107      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b42:	4b3f      	ldr	r3, [pc, #252]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e06f      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b52:	4b3b      	ldr	r3, [pc, #236]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e067      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b62:	4b37      	ldr	r3, [pc, #220]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f023 0203 	bic.w	r2, r3, #3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	4934      	ldr	r1, [pc, #208]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b74:	f7fd fc5a 	bl	800442c <HAL_GetTick>
 8006b78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b7a:	e00a      	b.n	8006b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b7c:	f7fd fc56 	bl	800442c <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e04f      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b92:	4b2b      	ldr	r3, [pc, #172]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 020c 	and.w	r2, r3, #12
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d1eb      	bne.n	8006b7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ba4:	4b25      	ldr	r3, [pc, #148]	@ (8006c3c <HAL_RCC_ClockConfig+0x1b8>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0307 	and.w	r3, r3, #7
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d20c      	bcs.n	8006bcc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb2:	4b22      	ldr	r3, [pc, #136]	@ (8006c3c <HAL_RCC_ClockConfig+0x1b8>)
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bba:	4b20      	ldr	r3, [pc, #128]	@ (8006c3c <HAL_RCC_ClockConfig+0x1b8>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0307 	and.w	r3, r3, #7
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d001      	beq.n	8006bcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e032      	b.n	8006c32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d008      	beq.n	8006bea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bd8:	4b19      	ldr	r3, [pc, #100]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	4916      	ldr	r1, [pc, #88]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0308 	and.w	r3, r3, #8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d009      	beq.n	8006c0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bf6:	4b12      	ldr	r3, [pc, #72]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	490e      	ldr	r1, [pc, #56]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c0a:	f000 f821 	bl	8006c50 <HAL_RCC_GetSysClockFreq>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	4b0b      	ldr	r3, [pc, #44]	@ (8006c40 <HAL_RCC_ClockConfig+0x1bc>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	091b      	lsrs	r3, r3, #4
 8006c16:	f003 030f 	and.w	r3, r3, #15
 8006c1a:	490a      	ldr	r1, [pc, #40]	@ (8006c44 <HAL_RCC_ClockConfig+0x1c0>)
 8006c1c:	5ccb      	ldrb	r3, [r1, r3]
 8006c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c22:	4a09      	ldr	r2, [pc, #36]	@ (8006c48 <HAL_RCC_ClockConfig+0x1c4>)
 8006c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006c26:	4b09      	ldr	r3, [pc, #36]	@ (8006c4c <HAL_RCC_ClockConfig+0x1c8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fd f98c 	bl	8003f48 <HAL_InitTick>

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40023c00 	.word	0x40023c00
 8006c40:	40023800 	.word	0x40023800
 8006c44:	0800ba50 	.word	0x0800ba50
 8006c48:	20000094 	.word	0x20000094
 8006c4c:	20000098 	.word	0x20000098

08006c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c54:	b090      	sub	sp, #64	@ 0x40
 8006c56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c68:	4b59      	ldr	r3, [pc, #356]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f003 030c 	and.w	r3, r3, #12
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d00d      	beq.n	8006c90 <HAL_RCC_GetSysClockFreq+0x40>
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	f200 80a1 	bhi.w	8006dbc <HAL_RCC_GetSysClockFreq+0x16c>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d002      	beq.n	8006c84 <HAL_RCC_GetSysClockFreq+0x34>
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d003      	beq.n	8006c8a <HAL_RCC_GetSysClockFreq+0x3a>
 8006c82:	e09b      	b.n	8006dbc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c84:	4b53      	ldr	r3, [pc, #332]	@ (8006dd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006c86:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c88:	e09b      	b.n	8006dc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c8a:	4b53      	ldr	r3, [pc, #332]	@ (8006dd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c8e:	e098      	b.n	8006dc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c90:	4b4f      	ldr	r3, [pc, #316]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c98:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c9a:	4b4d      	ldr	r3, [pc, #308]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d028      	beq.n	8006cf8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	099b      	lsrs	r3, r3, #6
 8006cac:	2200      	movs	r2, #0
 8006cae:	623b      	str	r3, [r7, #32]
 8006cb0:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4b47      	ldr	r3, [pc, #284]	@ (8006dd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cbc:	fb03 f201 	mul.w	r2, r3, r1
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	fb00 f303 	mul.w	r3, r0, r3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	4a43      	ldr	r2, [pc, #268]	@ (8006dd8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cca:	fba0 1202 	umull	r1, r2, r0, r2
 8006cce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cd0:	460a      	mov	r2, r1
 8006cd2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006cd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cd6:	4413      	add	r3, r2
 8006cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cdc:	2200      	movs	r2, #0
 8006cde:	61bb      	str	r3, [r7, #24]
 8006ce0:	61fa      	str	r2, [r7, #28]
 8006ce2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ce6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006cea:	f7f9 ff7d 	bl	8000be8 <__aeabi_uldivmod>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cf6:	e053      	b.n	8006da0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cf8:	4b35      	ldr	r3, [pc, #212]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	099b      	lsrs	r3, r3, #6
 8006cfe:	2200      	movs	r2, #0
 8006d00:	613b      	str	r3, [r7, #16]
 8006d02:	617a      	str	r2, [r7, #20]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006d0a:	f04f 0b00 	mov.w	fp, #0
 8006d0e:	4652      	mov	r2, sl
 8006d10:	465b      	mov	r3, fp
 8006d12:	f04f 0000 	mov.w	r0, #0
 8006d16:	f04f 0100 	mov.w	r1, #0
 8006d1a:	0159      	lsls	r1, r3, #5
 8006d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d20:	0150      	lsls	r0, r2, #5
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	ebb2 080a 	subs.w	r8, r2, sl
 8006d2a:	eb63 090b 	sbc.w	r9, r3, fp
 8006d2e:	f04f 0200 	mov.w	r2, #0
 8006d32:	f04f 0300 	mov.w	r3, #0
 8006d36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006d3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006d3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006d42:	ebb2 0408 	subs.w	r4, r2, r8
 8006d46:	eb63 0509 	sbc.w	r5, r3, r9
 8006d4a:	f04f 0200 	mov.w	r2, #0
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	00eb      	lsls	r3, r5, #3
 8006d54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d58:	00e2      	lsls	r2, r4, #3
 8006d5a:	4614      	mov	r4, r2
 8006d5c:	461d      	mov	r5, r3
 8006d5e:	eb14 030a 	adds.w	r3, r4, sl
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	eb45 030b 	adc.w	r3, r5, fp
 8006d68:	607b      	str	r3, [r7, #4]
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d76:	4629      	mov	r1, r5
 8006d78:	028b      	lsls	r3, r1, #10
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d80:	4621      	mov	r1, r4
 8006d82:	028a      	lsls	r2, r1, #10
 8006d84:	4610      	mov	r0, r2
 8006d86:	4619      	mov	r1, r3
 8006d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	60bb      	str	r3, [r7, #8]
 8006d8e:	60fa      	str	r2, [r7, #12]
 8006d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d94:	f7f9 ff28 	bl	8000be8 <__aeabi_uldivmod>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006da0:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	0c1b      	lsrs	r3, r3, #16
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	3301      	adds	r3, #1
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006db0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006dba:	e002      	b.n	8006dc2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006dbc:	4b05      	ldr	r3, [pc, #20]	@ (8006dd4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3740      	adds	r7, #64	@ 0x40
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dce:	bf00      	nop
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	00f42400 	.word	0x00f42400
 8006dd8:	017d7840 	.word	0x017d7840

08006ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006de0:	4b03      	ldr	r3, [pc, #12]	@ (8006df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006de2:	681b      	ldr	r3, [r3, #0]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	20000094 	.word	0x20000094

08006df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006df8:	f7ff fff0 	bl	8006ddc <HAL_RCC_GetHCLKFreq>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	4b05      	ldr	r3, [pc, #20]	@ (8006e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	0a9b      	lsrs	r3, r3, #10
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	4903      	ldr	r1, [pc, #12]	@ (8006e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e0a:	5ccb      	ldrb	r3, [r1, r3]
 8006e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	40023800 	.word	0x40023800
 8006e18:	0800ba60 	.word	0x0800ba60

08006e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e20:	f7ff ffdc 	bl	8006ddc <HAL_RCC_GetHCLKFreq>
 8006e24:	4602      	mov	r2, r0
 8006e26:	4b05      	ldr	r3, [pc, #20]	@ (8006e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	0b5b      	lsrs	r3, r3, #13
 8006e2c:	f003 0307 	and.w	r3, r3, #7
 8006e30:	4903      	ldr	r1, [pc, #12]	@ (8006e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e32:	5ccb      	ldrb	r3, [r1, r3]
 8006e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	40023800 	.word	0x40023800
 8006e40:	0800ba60 	.word	0x0800ba60

08006e44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	220f      	movs	r2, #15
 8006e52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e54:	4b12      	ldr	r3, [pc, #72]	@ (8006ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f003 0203 	and.w	r2, r3, #3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006e60:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006e78:	4b09      	ldr	r3, [pc, #36]	@ (8006ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	08db      	lsrs	r3, r3, #3
 8006e7e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e86:	4b07      	ldr	r3, [pc, #28]	@ (8006ea4 <HAL_RCC_GetClockConfig+0x60>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0207 	and.w	r2, r3, #7
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	601a      	str	r2, [r3, #0]
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	40023c00 	.word	0x40023c00

08006ea8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e07b      	b.n	8006fb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d108      	bne.n	8006ed4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006eca:	d009      	beq.n	8006ee0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	61da      	str	r2, [r3, #28]
 8006ed2:	e005      	b.n	8006ee0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fc fe96 	bl	8003c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f50:	431a      	orrs	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f64:	ea42 0103 	orr.w	r1, r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	0c1b      	lsrs	r3, r3, #16
 8006f7e:	f003 0104 	and.w	r1, r3, #4
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f86:	f003 0210 	and.w	r2, r3, #16
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	69da      	ldr	r2, [r3, #28]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fa0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b088      	sub	sp, #32
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	603b      	str	r3, [r7, #0]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fca:	f7fd fa2f 	bl	800442c <HAL_GetTick>
 8006fce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006fd0:	88fb      	ldrh	r3, [r7, #6]
 8006fd2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d001      	beq.n	8006fe4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e12a      	b.n	800723a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d002      	beq.n	8006ff0 <HAL_SPI_Transmit+0x36>
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e122      	b.n	800723a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d101      	bne.n	8007002 <HAL_SPI_Transmit+0x48>
 8006ffe:	2302      	movs	r3, #2
 8007000:	e11b      	b.n	800723a <HAL_SPI_Transmit+0x280>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2203      	movs	r2, #3
 800700e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	88fa      	ldrh	r2, [r7, #6]
 8007022:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	88fa      	ldrh	r2, [r7, #6]
 8007028:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007050:	d10f      	bne.n	8007072 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007060:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007070:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800707c:	2b40      	cmp	r3, #64	@ 0x40
 800707e:	d007      	beq.n	8007090 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800708e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007098:	d152      	bne.n	8007140 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <HAL_SPI_Transmit+0xee>
 80070a2:	8b7b      	ldrh	r3, [r7, #26]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d145      	bne.n	8007134 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ac:	881a      	ldrh	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b8:	1c9a      	adds	r2, r3, #2
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070cc:	e032      	b.n	8007134 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d112      	bne.n	8007102 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e0:	881a      	ldrh	r2, [r3, #0]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ec:	1c9a      	adds	r2, r3, #2
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	3b01      	subs	r3, #1
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007100:	e018      	b.n	8007134 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007102:	f7fd f993 	bl	800442c <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	429a      	cmp	r2, r3
 8007110:	d803      	bhi.n	800711a <HAL_SPI_Transmit+0x160>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007118:	d102      	bne.n	8007120 <HAL_SPI_Transmit+0x166>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d109      	bne.n	8007134 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e082      	b.n	800723a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007138:	b29b      	uxth	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1c7      	bne.n	80070ce <HAL_SPI_Transmit+0x114>
 800713e:	e053      	b.n	80071e8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <HAL_SPI_Transmit+0x194>
 8007148:	8b7b      	ldrh	r3, [r7, #26]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d147      	bne.n	80071de <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	330c      	adds	r3, #12
 8007158:	7812      	ldrb	r2, [r2, #0]
 800715a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007160:	1c5a      	adds	r2, r3, #1
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800716a:	b29b      	uxth	r3, r3
 800716c:	3b01      	subs	r3, #1
 800716e:	b29a      	uxth	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007174:	e033      	b.n	80071de <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b02      	cmp	r3, #2
 8007182:	d113      	bne.n	80071ac <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	330c      	adds	r3, #12
 800718e:	7812      	ldrb	r2, [r2, #0]
 8007190:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007196:	1c5a      	adds	r2, r3, #1
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	3b01      	subs	r3, #1
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80071aa:	e018      	b.n	80071de <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071ac:	f7fd f93e 	bl	800442c <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d803      	bhi.n	80071c4 <HAL_SPI_Transmit+0x20a>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c2:	d102      	bne.n	80071ca <HAL_SPI_Transmit+0x210>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d109      	bne.n	80071de <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e02d      	b.n	800723a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1c6      	bne.n	8007176 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f001 f8d3 	bl	8008398 <SPI_EndRxTxTransaction>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2220      	movs	r2, #32
 80071fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10a      	bne.n	800721c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007206:	2300      	movs	r3, #0
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	617b      	str	r3, [r7, #20]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	617b      	str	r3, [r7, #20]
 800721a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007238:	2300      	movs	r3, #0
  }
}
 800723a:	4618      	mov	r0, r3
 800723c:	3720      	adds	r7, #32
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b088      	sub	sp, #32
 8007246:	af02      	add	r7, sp, #8
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	603b      	str	r3, [r7, #0]
 800724e:	4613      	mov	r3, r2
 8007250:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b01      	cmp	r3, #1
 800725c:	d001      	beq.n	8007262 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800725e:	2302      	movs	r3, #2
 8007260:	e104      	b.n	800746c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800726a:	d112      	bne.n	8007292 <HAL_SPI_Receive+0x50>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10e      	bne.n	8007292 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2204      	movs	r2, #4
 8007278:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800727c:	88fa      	ldrh	r2, [r7, #6]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	4613      	mov	r3, r2
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	68b9      	ldr	r1, [r7, #8]
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 f8f3 	bl	8007474 <HAL_SPI_TransmitReceive>
 800728e:	4603      	mov	r3, r0
 8007290:	e0ec      	b.n	800746c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007292:	f7fd f8cb 	bl	800442c <HAL_GetTick>
 8007296:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <HAL_SPI_Receive+0x62>
 800729e:	88fb      	ldrh	r3, [r7, #6]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	e0e1      	b.n	800746c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d101      	bne.n	80072b6 <HAL_SPI_Receive+0x74>
 80072b2:	2302      	movs	r3, #2
 80072b4:	e0da      	b.n	800746c <HAL_SPI_Receive+0x22a>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2204      	movs	r2, #4
 80072c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	88fa      	ldrh	r2, [r7, #6]
 80072d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	88fa      	ldrh	r2, [r7, #6]
 80072dc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007304:	d10f      	bne.n	8007326 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007314:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007324:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007330:	2b40      	cmp	r3, #64	@ 0x40
 8007332:	d007      	beq.n	8007344 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007342:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d170      	bne.n	800742e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800734c:	e035      	b.n	80073ba <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b01      	cmp	r3, #1
 800735a:	d115      	bne.n	8007388 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f103 020c 	add.w	r2, r3, #12
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007368:	7812      	ldrb	r2, [r2, #0]
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800737c:	b29b      	uxth	r3, r3
 800737e:	3b01      	subs	r3, #1
 8007380:	b29a      	uxth	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007386:	e018      	b.n	80073ba <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007388:	f7fd f850 	bl	800442c <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d803      	bhi.n	80073a0 <HAL_SPI_Receive+0x15e>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739e:	d102      	bne.n	80073a6 <HAL_SPI_Receive+0x164>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d109      	bne.n	80073ba <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e058      	b.n	800746c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073be:	b29b      	uxth	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1c4      	bne.n	800734e <HAL_SPI_Receive+0x10c>
 80073c4:	e038      	b.n	8007438 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d113      	bne.n	80073fc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073de:	b292      	uxth	r2, r2
 80073e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e6:	1c9a      	adds	r2, r3, #2
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	3b01      	subs	r3, #1
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073fa:	e018      	b.n	800742e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073fc:	f7fd f816 	bl	800442c <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	d803      	bhi.n	8007414 <HAL_SPI_Receive+0x1d2>
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007412:	d102      	bne.n	800741a <HAL_SPI_Receive+0x1d8>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d109      	bne.n	800742e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e01e      	b.n	800746c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007432:	b29b      	uxth	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1c6      	bne.n	80073c6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 ff45 	bl	80082cc <SPI_EndRxTransaction>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d002      	beq.n	800744e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800746a:	2300      	movs	r3, #0
  }
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08a      	sub	sp, #40	@ 0x28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007482:	2301      	movs	r3, #1
 8007484:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007486:	f7fc ffd1 	bl	800442c <HAL_GetTick>
 800748a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007492:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800749a:	887b      	ldrh	r3, [r7, #2]
 800749c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800749e:	7ffb      	ldrb	r3, [r7, #31]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d00c      	beq.n	80074be <HAL_SPI_TransmitReceive+0x4a>
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074aa:	d106      	bne.n	80074ba <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d102      	bne.n	80074ba <HAL_SPI_TransmitReceive+0x46>
 80074b4:	7ffb      	ldrb	r3, [r7, #31]
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	d001      	beq.n	80074be <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80074ba:	2302      	movs	r3, #2
 80074bc:	e17f      	b.n	80077be <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <HAL_SPI_TransmitReceive+0x5c>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <HAL_SPI_TransmitReceive+0x5c>
 80074ca:	887b      	ldrh	r3, [r7, #2]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e174      	b.n	80077be <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <HAL_SPI_TransmitReceive+0x6e>
 80074de:	2302      	movs	r3, #2
 80074e0:	e16d      	b.n	80077be <HAL_SPI_TransmitReceive+0x34a>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d003      	beq.n	80074fe <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2205      	movs	r2, #5
 80074fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	887a      	ldrh	r2, [r7, #2]
 800750e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	887a      	ldrh	r2, [r7, #2]
 8007514:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	887a      	ldrh	r2, [r7, #2]
 8007520:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	887a      	ldrh	r2, [r7, #2]
 8007526:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800753e:	2b40      	cmp	r3, #64	@ 0x40
 8007540:	d007      	beq.n	8007552 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007550:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800755a:	d17e      	bne.n	800765a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <HAL_SPI_TransmitReceive+0xf6>
 8007564:	8afb      	ldrh	r3, [r7, #22]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d16c      	bne.n	8007644 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756e:	881a      	ldrh	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757a:	1c9a      	adds	r2, r3, #2
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800758e:	e059      	b.n	8007644 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b02      	cmp	r3, #2
 800759c:	d11b      	bne.n	80075d6 <HAL_SPI_TransmitReceive+0x162>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d016      	beq.n	80075d6 <HAL_SPI_TransmitReceive+0x162>
 80075a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d113      	bne.n	80075d6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b2:	881a      	ldrh	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075be:	1c9a      	adds	r2, r3, #2
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d119      	bne.n	8007618 <HAL_SPI_TransmitReceive+0x1a4>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d014      	beq.n	8007618 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68da      	ldr	r2, [r3, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f8:	b292      	uxth	r2, r2
 80075fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007600:	1c9a      	adds	r2, r3, #2
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007614:	2301      	movs	r3, #1
 8007616:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007618:	f7fc ff08 	bl	800442c <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007624:	429a      	cmp	r2, r3
 8007626:	d80d      	bhi.n	8007644 <HAL_SPI_TransmitReceive+0x1d0>
 8007628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762e:	d009      	beq.n	8007644 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e0bc      	b.n	80077be <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1a0      	bne.n	8007590 <HAL_SPI_TransmitReceive+0x11c>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007652:	b29b      	uxth	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d19b      	bne.n	8007590 <HAL_SPI_TransmitReceive+0x11c>
 8007658:	e082      	b.n	8007760 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <HAL_SPI_TransmitReceive+0x1f4>
 8007662:	8afb      	ldrh	r3, [r7, #22]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d171      	bne.n	800774c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	330c      	adds	r3, #12
 8007672:	7812      	ldrb	r2, [r2, #0]
 8007674:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007684:	b29b      	uxth	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800768e:	e05d      	b.n	800774c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b02      	cmp	r3, #2
 800769c:	d11c      	bne.n	80076d8 <HAL_SPI_TransmitReceive+0x264>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d017      	beq.n	80076d8 <HAL_SPI_TransmitReceive+0x264>
 80076a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d114      	bne.n	80076d8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	330c      	adds	r3, #12
 80076b8:	7812      	ldrb	r2, [r2, #0]
 80076ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d119      	bne.n	800771a <HAL_SPI_TransmitReceive+0x2a6>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d014      	beq.n	800771a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68da      	ldr	r2, [r3, #12]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	b29a      	uxth	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007716:	2301      	movs	r3, #1
 8007718:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800771a:	f7fc fe87 	bl	800442c <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007726:	429a      	cmp	r2, r3
 8007728:	d803      	bhi.n	8007732 <HAL_SPI_TransmitReceive+0x2be>
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007730:	d102      	bne.n	8007738 <HAL_SPI_TransmitReceive+0x2c4>
 8007732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007734:	2b00      	cmp	r3, #0
 8007736:	d109      	bne.n	800774c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e038      	b.n	80077be <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d19c      	bne.n	8007690 <HAL_SPI_TransmitReceive+0x21c>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800775a:	b29b      	uxth	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d197      	bne.n	8007690 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007760:	6a3a      	ldr	r2, [r7, #32]
 8007762:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 fe17 	bl	8008398 <SPI_EndRxTxTransaction>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d008      	beq.n	8007782 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2220      	movs	r2, #32
 8007774:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e01d      	b.n	80077be <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10a      	bne.n	80077a0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800778a:	2300      	movs	r3, #0
 800778c:	613b      	str	r3, [r7, #16]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	613b      	str	r3, [r7, #16]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e000      	b.n	80077be <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80077bc:	2300      	movs	r3, #0
  }
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3728      	adds	r7, #40	@ 0x28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
	...

080077c8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	4613      	mov	r3, r2
 80077d4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d001      	beq.n	80077e6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80077e2:	2302      	movs	r3, #2
 80077e4:	e097      	b.n	8007916 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d002      	beq.n	80077f2 <HAL_SPI_Transmit_DMA+0x2a>
 80077ec:	88fb      	ldrh	r3, [r7, #6]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e08f      	b.n	8007916 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d101      	bne.n	8007804 <HAL_SPI_Transmit_DMA+0x3c>
 8007800:	2302      	movs	r3, #2
 8007802:	e088      	b.n	8007916 <HAL_SPI_Transmit_DMA+0x14e>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2203      	movs	r2, #3
 8007810:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	88fa      	ldrh	r2, [r7, #6]
 8007824:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	88fa      	ldrh	r2, [r7, #6]
 800782a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007852:	d10f      	bne.n	8007874 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007862:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007872:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007878:	4a29      	ldr	r2, [pc, #164]	@ (8007920 <HAL_SPI_Transmit_DMA+0x158>)
 800787a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007880:	4a28      	ldr	r2, [pc, #160]	@ (8007924 <HAL_SPI_Transmit_DMA+0x15c>)
 8007882:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007888:	4a27      	ldr	r2, [pc, #156]	@ (8007928 <HAL_SPI_Transmit_DMA+0x160>)
 800788a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007890:	2200      	movs	r2, #0
 8007892:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800789c:	4619      	mov	r1, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	330c      	adds	r3, #12
 80078a4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80078ac:	f7fd f9cc 	bl	8004c48 <HAL_DMA_Start_IT>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00b      	beq.n	80078ce <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ba:	f043 0210 	orr.w	r2, r3, #16
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e023      	b.n	8007916 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d8:	2b40      	cmp	r3, #64	@ 0x40
 80078da:	d007      	beq.n	80078ec <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078ea:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0220 	orr.w	r2, r2, #32
 8007902:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0202 	orr.w	r2, r2, #2
 8007912:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	08008101 	.word	0x08008101
 8007924:	08007f21 	.word	0x08007f21
 8007928:	08008155 	.word	0x08008155

0800792c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	4613      	mov	r3, r2
 8007938:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b01      	cmp	r3, #1
 8007944:	d001      	beq.n	800794a <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8007946:	2302      	movs	r3, #2
 8007948:	e0a9      	b.n	8007a9e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d110      	bne.n	8007974 <HAL_SPI_Receive_DMA+0x48>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800795a:	d10b      	bne.n	8007974 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2204      	movs	r2, #4
 8007960:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007964:	88fb      	ldrh	r3, [r7, #6]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	68b9      	ldr	r1, [r7, #8]
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 f8a2 	bl	8007ab4 <HAL_SPI_TransmitReceive_DMA>
 8007970:	4603      	mov	r3, r0
 8007972:	e094      	b.n	8007a9e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <HAL_SPI_Receive_DMA+0x54>
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e08c      	b.n	8007a9e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <HAL_SPI_Receive_DMA+0x66>
 800798e:	2302      	movs	r3, #2
 8007990:	e085      	b.n	8007a9e <HAL_SPI_Receive_DMA+0x172>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2204      	movs	r2, #4
 800799e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	88fa      	ldrh	r2, [r7, #6]
 80079b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	88fa      	ldrh	r2, [r7, #6]
 80079b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079da:	d10f      	bne.n	80079fc <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80079fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a00:	4a29      	ldr	r2, [pc, #164]	@ (8007aa8 <HAL_SPI_Receive_DMA+0x17c>)
 8007a02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a08:	4a28      	ldr	r2, [pc, #160]	@ (8007aac <HAL_SPI_Receive_DMA+0x180>)
 8007a0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a10:	4a27      	ldr	r2, [pc, #156]	@ (8007ab0 <HAL_SPI_Receive_DMA+0x184>)
 8007a12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a18:	2200      	movs	r2, #0
 8007a1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	330c      	adds	r3, #12
 8007a26:	4619      	mov	r1, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a32:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007a34:	f7fd f908 	bl	8004c48 <HAL_DMA_Start_IT>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00b      	beq.n	8007a56 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a42:	f043 0210 	orr.w	r2, r3, #16
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e023      	b.n	8007a9e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a60:	2b40      	cmp	r3, #64	@ 0x40
 8007a62:	d007      	beq.n	8007a74 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a72:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0220 	orr.w	r2, r2, #32
 8007a8a:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0201 	orr.w	r2, r2, #1
 8007a9a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	0800811d 	.word	0x0800811d
 8007aac:	08007fc9 	.word	0x08007fc9
 8007ab0:	08008155 	.word	0x08008155

08007ab4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ac8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d00c      	beq.n	8007af0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007adc:	d106      	bne.n	8007aec <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d102      	bne.n	8007aec <HAL_SPI_TransmitReceive_DMA+0x38>
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d001      	beq.n	8007af0 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8007aec:	2302      	movs	r3, #2
 8007aee:	e0cf      	b.n	8007c90 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d005      	beq.n	8007b02 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007afc:	887b      	ldrh	r3, [r7, #2]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e0c4      	b.n	8007c90 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d101      	bne.n	8007b14 <HAL_SPI_TransmitReceive_DMA+0x60>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e0bd      	b.n	8007c90 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b04      	cmp	r3, #4
 8007b26:	d003      	beq.n	8007b30 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2205      	movs	r2, #5
 8007b2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	887a      	ldrh	r2, [r7, #2]
 8007b40:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	887a      	ldrh	r2, [r7, #2]
 8007b46:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	887a      	ldrh	r2, [r7, #2]
 8007b52:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	887a      	ldrh	r2, [r7, #2]
 8007b58:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d108      	bne.n	8007b84 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b76:	4a48      	ldr	r2, [pc, #288]	@ (8007c98 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8007b78:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b7e:	4a47      	ldr	r2, [pc, #284]	@ (8007c9c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8007b80:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007b82:	e007      	b.n	8007b94 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b88:	4a45      	ldr	r2, [pc, #276]	@ (8007ca0 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8007b8a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b90:	4a44      	ldr	r2, [pc, #272]	@ (8007ca4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8007b92:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b98:	4a43      	ldr	r2, [pc, #268]	@ (8007ca8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007b9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	330c      	adds	r3, #12
 8007bae:	4619      	mov	r1, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007bbc:	f7fd f844 	bl	8004c48 <HAL_DMA_Start_IT>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00b      	beq.n	8007bde <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bca:	f043 0210 	orr.w	r2, r3, #16
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e058      	b.n	8007c90 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f042 0201 	orr.w	r2, r2, #1
 8007bec:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c02:	2200      	movs	r2, #0
 8007c04:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c16:	4619      	mov	r1, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	330c      	adds	r3, #12
 8007c1e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c24:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c26:	f7fd f80f 	bl	8004c48 <HAL_DMA_Start_IT>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c34:	f043 0210 	orr.w	r2, r3, #16
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e023      	b.n	8007c90 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c52:	2b40      	cmp	r3, #64	@ 0x40
 8007c54:	d007      	beq.n	8007c66 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c64:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f042 0220 	orr.w	r2, r2, #32
 8007c7c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f042 0202 	orr.w	r2, r2, #2
 8007c8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	0800811d 	.word	0x0800811d
 8007c9c:	08007fc9 	.word	0x08007fc9
 8007ca0:	08008139 	.word	0x08008139
 8007ca4:	08008071 	.word	0x08008071
 8007ca8:	08008155 	.word	0x08008155

08007cac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b088      	sub	sp, #32
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10e      	bne.n	8007cec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d009      	beq.n	8007cec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d004      	beq.n	8007cec <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
    return;
 8007cea:	e0ce      	b.n	8007e8a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d009      	beq.n	8007d0a <HAL_SPI_IRQHandler+0x5e>
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d004      	beq.n	8007d0a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	4798      	blx	r3
    return;
 8007d08:	e0bf      	b.n	8007e8a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	f003 0320 	and.w	r3, r3, #32
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10a      	bne.n	8007d2a <HAL_SPI_IRQHandler+0x7e>
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d105      	bne.n	8007d2a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 80b0 	beq.w	8007e8a <HAL_SPI_IRQHandler+0x1de>
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	f003 0320 	and.w	r3, r3, #32
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 80aa 	beq.w	8007e8a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d023      	beq.n	8007d88 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	d011      	beq.n	8007d70 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d50:	f043 0204 	orr.w	r2, r3, #4
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d58:	2300      	movs	r3, #0
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	617b      	str	r3, [r7, #20]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	617b      	str	r3, [r7, #20]
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	e00b      	b.n	8007d88 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d70:	2300      	movs	r3, #0
 8007d72:	613b      	str	r3, [r7, #16]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	613b      	str	r3, [r7, #16]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	613b      	str	r3, [r7, #16]
 8007d84:	693b      	ldr	r3, [r7, #16]
        return;
 8007d86:	e080      	b.n	8007e8a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	f003 0320 	and.w	r3, r3, #32
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d014      	beq.n	8007dbc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d96:	f043 0201 	orr.w	r2, r3, #1
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d9e:	2300      	movs	r3, #0
 8007da0:	60fb      	str	r3, [r7, #12]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00c      	beq.n	8007de0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dca:	f043 0208 	orr.w	r2, r3, #8
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60bb      	str	r3, [r7, #8]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	60bb      	str	r3, [r7, #8]
 8007dde:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d04f      	beq.n	8007e88 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007df6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d104      	bne.n	8007e14 <HAL_SPI_IRQHandler+0x168>
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d034      	beq.n	8007e7e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0203 	bic.w	r2, r2, #3
 8007e22:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d011      	beq.n	8007e50 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e30:	4a17      	ldr	r2, [pc, #92]	@ (8007e90 <HAL_SPI_IRQHandler+0x1e4>)
 8007e32:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fc ff5d 	bl	8004cf8 <HAL_DMA_Abort_IT>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d016      	beq.n	8007e86 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8007e90 <HAL_SPI_IRQHandler+0x1e4>)
 8007e5e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fc ff47 	bl	8004cf8 <HAL_DMA_Abort_IT>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00a      	beq.n	8007e86 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007e7c:	e003      	b.n	8007e86 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f844 	bl	8007f0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007e84:	e000      	b.n	8007e88 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007e86:	bf00      	nop
    return;
 8007e88:	bf00      	nop
  }
}
 8007e8a:	3720      	adds	r7, #32
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	08008195 	.word	0x08008195

08007e94 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f2e:	f7fc fa7d 	bl	800442c <HAL_GetTick>
 8007f32:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f42:	d03b      	beq.n	8007fbc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0220 	bic.w	r2, r2, #32
 8007f52:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0202 	bic.w	r2, r2, #2
 8007f62:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	2164      	movs	r1, #100	@ 0x64
 8007f68:	6978      	ldr	r0, [r7, #20]
 8007f6a:	f000 fa15 	bl	8008398 <SPI_EndRxTxTransaction>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d005      	beq.n	8007f80 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f78:	f043 0220 	orr.w	r2, r3, #32
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60fb      	str	r3, [r7, #12]
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d003      	beq.n	8007fbc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007fb4:	6978      	ldr	r0, [r7, #20]
 8007fb6:	f7ff ffa9 	bl	8007f0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007fba:	e002      	b.n	8007fc2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007fbc:	6978      	ldr	r0, [r7, #20]
 8007fbe:	f7ff ff69 	bl	8007e94 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fd6:	f7fc fa29 	bl	800442c <HAL_GetTick>
 8007fda:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fea:	d03b      	beq.n	8008064 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 0220 	bic.w	r2, r2, #32
 8007ffa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10d      	bne.n	8008020 <SPI_DMAReceiveCplt+0x58>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800800c:	d108      	bne.n	8008020 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0203 	bic.w	r2, r2, #3
 800801c:	605a      	str	r2, [r3, #4]
 800801e:	e007      	b.n	8008030 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0201 	bic.w	r2, r2, #1
 800802e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	2164      	movs	r1, #100	@ 0x64
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f949 	bl	80082cc <SPI_EndRxTransaction>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2220      	movs	r2, #32
 8008044:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f7ff ff55 	bl	8007f0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008062:	e002      	b.n	800806a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f7ff ff1f 	bl	8007ea8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800807e:	f7fc f9d5 	bl	800442c <HAL_GetTick>
 8008082:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800808e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008092:	d02f      	beq.n	80080f4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f022 0220 	bic.w	r2, r2, #32
 80080a2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	2164      	movs	r1, #100	@ 0x64
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 f975 	bl	8008398 <SPI_EndRxTxTransaction>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d005      	beq.n	80080c0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b8:	f043 0220 	orr.w	r2, r3, #32
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f022 0203 	bic.w	r2, r2, #3
 80080ce:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f7ff ff0d 	bl	8007f0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80080f2:	e002      	b.n	80080fa <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f7ff fee1 	bl	8007ebc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f7ff fede 	bl	8007ed0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008128:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f7ff feda 	bl	8007ee4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008144:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f7ff fed6 	bl	8007ef8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800814c:	bf00      	nop
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008160:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 0203 	bic.w	r2, r2, #3
 8008170:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008176:	f043 0210 	orr.w	r2, r3, #16
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f7ff fec0 	bl	8007f0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800818c:	bf00      	nop
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f7ff feac 	bl	8007f0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081b4:	bf00      	nop
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	603b      	str	r3, [r7, #0]
 80081c8:	4613      	mov	r3, r2
 80081ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80081cc:	f7fc f92e 	bl	800442c <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d4:	1a9b      	subs	r3, r3, r2
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	4413      	add	r3, r2
 80081da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80081dc:	f7fc f926 	bl	800442c <HAL_GetTick>
 80081e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80081e2:	4b39      	ldr	r3, [pc, #228]	@ (80082c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	015b      	lsls	r3, r3, #5
 80081e8:	0d1b      	lsrs	r3, r3, #20
 80081ea:	69fa      	ldr	r2, [r7, #28]
 80081ec:	fb02 f303 	mul.w	r3, r2, r3
 80081f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081f2:	e054      	b.n	800829e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fa:	d050      	beq.n	800829e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081fc:	f7fc f916 	bl	800442c <HAL_GetTick>
 8008200:	4602      	mov	r2, r0
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	69fa      	ldr	r2, [r7, #28]
 8008208:	429a      	cmp	r2, r3
 800820a:	d902      	bls.n	8008212 <SPI_WaitFlagStateUntilTimeout+0x56>
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d13d      	bne.n	800828e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008220:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800822a:	d111      	bne.n	8008250 <SPI_WaitFlagStateUntilTimeout+0x94>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008234:	d004      	beq.n	8008240 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800823e:	d107      	bne.n	8008250 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800824e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008254:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008258:	d10f      	bne.n	800827a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008278:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e017      	b.n	80082be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	3b01      	subs	r3, #1
 800829c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	689a      	ldr	r2, [r3, #8]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4013      	ands	r3, r2
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	bf0c      	ite	eq
 80082ae:	2301      	moveq	r3, #1
 80082b0:	2300      	movne	r3, #0
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d19b      	bne.n	80081f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3720      	adds	r7, #32
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	20000094 	.word	0x20000094

080082cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af02      	add	r7, sp, #8
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80082e0:	d111      	bne.n	8008306 <SPI_EndRxTransaction+0x3a>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ea:	d004      	beq.n	80082f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082f4:	d107      	bne.n	8008306 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008304:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800830e:	d12a      	bne.n	8008366 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008318:	d012      	beq.n	8008340 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2200      	movs	r2, #0
 8008322:	2180      	movs	r1, #128	@ 0x80
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f7ff ff49 	bl	80081bc <SPI_WaitFlagStateUntilTimeout>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d02d      	beq.n	800838c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008334:	f043 0220 	orr.w	r2, r3, #32
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e026      	b.n	800838e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2200      	movs	r2, #0
 8008348:	2101      	movs	r1, #1
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f7ff ff36 	bl	80081bc <SPI_WaitFlagStateUntilTimeout>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d01a      	beq.n	800838c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800835a:	f043 0220 	orr.w	r2, r3, #32
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e013      	b.n	800838e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	2200      	movs	r2, #0
 800836e:	2101      	movs	r1, #1
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f7ff ff23 	bl	80081bc <SPI_WaitFlagStateUntilTimeout>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d007      	beq.n	800838c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008380:	f043 0220 	orr.w	r2, r3, #32
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e000      	b.n	800838e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af02      	add	r7, sp, #8
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2201      	movs	r2, #1
 80083ac:	2102      	movs	r1, #2
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f7ff ff04 	bl	80081bc <SPI_WaitFlagStateUntilTimeout>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d007      	beq.n	80083ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083be:	f043 0220 	orr.w	r2, r3, #32
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e032      	b.n	8008430 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80083ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008438 <SPI_EndRxTxTransaction+0xa0>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a1b      	ldr	r2, [pc, #108]	@ (800843c <SPI_EndRxTxTransaction+0xa4>)
 80083d0:	fba2 2303 	umull	r2, r3, r2, r3
 80083d4:	0d5b      	lsrs	r3, r3, #21
 80083d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80083da:	fb02 f303 	mul.w	r3, r2, r3
 80083de:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083e8:	d112      	bne.n	8008410 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2200      	movs	r2, #0
 80083f2:	2180      	movs	r1, #128	@ 0x80
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f7ff fee1 	bl	80081bc <SPI_WaitFlagStateUntilTimeout>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d016      	beq.n	800842e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008404:	f043 0220 	orr.w	r2, r3, #32
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e00f      	b.n	8008430 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00a      	beq.n	800842c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	3b01      	subs	r3, #1
 800841a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008426:	2b80      	cmp	r3, #128	@ 0x80
 8008428:	d0f2      	beq.n	8008410 <SPI_EndRxTxTransaction+0x78>
 800842a:	e000      	b.n	800842e <SPI_EndRxTxTransaction+0x96>
        break;
 800842c:	bf00      	nop
  }

  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	20000094 	.word	0x20000094
 800843c:	165e9f81 	.word	0x165e9f81

08008440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e041      	b.n	80084d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d106      	bne.n	800846c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7fb feb6 	bl	80041d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3304      	adds	r3, #4
 800847c:	4619      	mov	r1, r3
 800847e:	4610      	mov	r0, r2
 8008480:	f000 fc3c 	bl	8008cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d001      	beq.n	80084f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e044      	b.n	8008582 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68da      	ldr	r2, [r3, #12]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f042 0201 	orr.w	r2, r2, #1
 800850e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a1e      	ldr	r2, [pc, #120]	@ (8008590 <HAL_TIM_Base_Start_IT+0xb0>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d018      	beq.n	800854c <HAL_TIM_Base_Start_IT+0x6c>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008522:	d013      	beq.n	800854c <HAL_TIM_Base_Start_IT+0x6c>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a1a      	ldr	r2, [pc, #104]	@ (8008594 <HAL_TIM_Base_Start_IT+0xb4>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d00e      	beq.n	800854c <HAL_TIM_Base_Start_IT+0x6c>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a19      	ldr	r2, [pc, #100]	@ (8008598 <HAL_TIM_Base_Start_IT+0xb8>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d009      	beq.n	800854c <HAL_TIM_Base_Start_IT+0x6c>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a17      	ldr	r2, [pc, #92]	@ (800859c <HAL_TIM_Base_Start_IT+0xbc>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d004      	beq.n	800854c <HAL_TIM_Base_Start_IT+0x6c>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a16      	ldr	r2, [pc, #88]	@ (80085a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d111      	bne.n	8008570 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f003 0307 	and.w	r3, r3, #7
 8008556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b06      	cmp	r3, #6
 800855c:	d010      	beq.n	8008580 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f042 0201 	orr.w	r2, r2, #1
 800856c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800856e:	e007      	b.n	8008580 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f042 0201 	orr.w	r2, r2, #1
 800857e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	40010000 	.word	0x40010000
 8008594:	40000400 	.word	0x40000400
 8008598:	40000800 	.word	0x40000800
 800859c:	40000c00 	.word	0x40000c00
 80085a0:	40014000 	.word	0x40014000

080085a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e041      	b.n	800863a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d106      	bne.n	80085d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f839 	bl	8008642 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3304      	adds	r3, #4
 80085e0:	4619      	mov	r1, r3
 80085e2:	4610      	mov	r0, r2
 80085e4:	f000 fb8a 	bl	8008cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008642:	b480      	push	{r7}
 8008644:	b083      	sub	sp, #12
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800864a:	bf00      	nop
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
	...

08008658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d109      	bne.n	800867c <HAL_TIM_PWM_Start+0x24>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b01      	cmp	r3, #1
 8008672:	bf14      	ite	ne
 8008674:	2301      	movne	r3, #1
 8008676:	2300      	moveq	r3, #0
 8008678:	b2db      	uxtb	r3, r3
 800867a:	e022      	b.n	80086c2 <HAL_TIM_PWM_Start+0x6a>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2b04      	cmp	r3, #4
 8008680:	d109      	bne.n	8008696 <HAL_TIM_PWM_Start+0x3e>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b01      	cmp	r3, #1
 800868c:	bf14      	ite	ne
 800868e:	2301      	movne	r3, #1
 8008690:	2300      	moveq	r3, #0
 8008692:	b2db      	uxtb	r3, r3
 8008694:	e015      	b.n	80086c2 <HAL_TIM_PWM_Start+0x6a>
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b08      	cmp	r3, #8
 800869a:	d109      	bne.n	80086b0 <HAL_TIM_PWM_Start+0x58>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	bf14      	ite	ne
 80086a8:	2301      	movne	r3, #1
 80086aa:	2300      	moveq	r3, #0
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	e008      	b.n	80086c2 <HAL_TIM_PWM_Start+0x6a>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	bf14      	ite	ne
 80086bc:	2301      	movne	r3, #1
 80086be:	2300      	moveq	r3, #0
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e068      	b.n	800879c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d104      	bne.n	80086da <HAL_TIM_PWM_Start+0x82>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086d8:	e013      	b.n	8008702 <HAL_TIM_PWM_Start+0xaa>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d104      	bne.n	80086ea <HAL_TIM_PWM_Start+0x92>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2202      	movs	r2, #2
 80086e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086e8:	e00b      	b.n	8008702 <HAL_TIM_PWM_Start+0xaa>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d104      	bne.n	80086fa <HAL_TIM_PWM_Start+0xa2>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086f8:	e003      	b.n	8008702 <HAL_TIM_PWM_Start+0xaa>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2202      	movs	r2, #2
 80086fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2201      	movs	r2, #1
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fda8 	bl	8009260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a23      	ldr	r2, [pc, #140]	@ (80087a4 <HAL_TIM_PWM_Start+0x14c>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d107      	bne.n	800872a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008728:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a1d      	ldr	r2, [pc, #116]	@ (80087a4 <HAL_TIM_PWM_Start+0x14c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d018      	beq.n	8008766 <HAL_TIM_PWM_Start+0x10e>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800873c:	d013      	beq.n	8008766 <HAL_TIM_PWM_Start+0x10e>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a19      	ldr	r2, [pc, #100]	@ (80087a8 <HAL_TIM_PWM_Start+0x150>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00e      	beq.n	8008766 <HAL_TIM_PWM_Start+0x10e>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a17      	ldr	r2, [pc, #92]	@ (80087ac <HAL_TIM_PWM_Start+0x154>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d009      	beq.n	8008766 <HAL_TIM_PWM_Start+0x10e>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a16      	ldr	r2, [pc, #88]	@ (80087b0 <HAL_TIM_PWM_Start+0x158>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d004      	beq.n	8008766 <HAL_TIM_PWM_Start+0x10e>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a14      	ldr	r2, [pc, #80]	@ (80087b4 <HAL_TIM_PWM_Start+0x15c>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d111      	bne.n	800878a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b06      	cmp	r3, #6
 8008776:	d010      	beq.n	800879a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0201 	orr.w	r2, r2, #1
 8008786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008788:	e007      	b.n	800879a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f042 0201 	orr.w	r2, r2, #1
 8008798:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	40010000 	.word	0x40010000
 80087a8:	40000400 	.word	0x40000400
 80087ac:	40000800 	.word	0x40000800
 80087b0:	40000c00 	.word	0x40000c00
 80087b4:	40014000 	.word	0x40014000

080087b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d020      	beq.n	800881c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f003 0302 	and.w	r3, r3, #2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d01b      	beq.n	800881c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f06f 0202 	mvn.w	r2, #2
 80087ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	f003 0303 	and.w	r3, r3, #3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d003      	beq.n	800880a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fa5b 	bl	8008cbe <HAL_TIM_IC_CaptureCallback>
 8008808:	e005      	b.n	8008816 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fa4d 	bl	8008caa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fa5e 	bl	8008cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	f003 0304 	and.w	r3, r3, #4
 8008822:	2b00      	cmp	r3, #0
 8008824:	d020      	beq.n	8008868 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f003 0304 	and.w	r3, r3, #4
 800882c:	2b00      	cmp	r3, #0
 800882e:	d01b      	beq.n	8008868 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f06f 0204 	mvn.w	r2, #4
 8008838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2202      	movs	r2, #2
 800883e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800884a:	2b00      	cmp	r3, #0
 800884c:	d003      	beq.n	8008856 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fa35 	bl	8008cbe <HAL_TIM_IC_CaptureCallback>
 8008854:	e005      	b.n	8008862 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fa27 	bl	8008caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fa38 	bl	8008cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f003 0308 	and.w	r3, r3, #8
 800886e:	2b00      	cmp	r3, #0
 8008870:	d020      	beq.n	80088b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f003 0308 	and.w	r3, r3, #8
 8008878:	2b00      	cmp	r3, #0
 800887a:	d01b      	beq.n	80088b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f06f 0208 	mvn.w	r2, #8
 8008884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2204      	movs	r2, #4
 800888a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	f003 0303 	and.w	r3, r3, #3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fa0f 	bl	8008cbe <HAL_TIM_IC_CaptureCallback>
 80088a0:	e005      	b.n	80088ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fa01 	bl	8008caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fa12 	bl	8008cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	f003 0310 	and.w	r3, r3, #16
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d020      	beq.n	8008900 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f003 0310 	and.w	r3, r3, #16
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d01b      	beq.n	8008900 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f06f 0210 	mvn.w	r2, #16
 80088d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2208      	movs	r2, #8
 80088d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	69db      	ldr	r3, [r3, #28]
 80088de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d003      	beq.n	80088ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f9e9 	bl	8008cbe <HAL_TIM_IC_CaptureCallback>
 80088ec:	e005      	b.n	80088fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f9db 	bl	8008caa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f9ec 	bl	8008cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00c      	beq.n	8008924 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d007      	beq.n	8008924 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f06f 0201 	mvn.w	r2, #1
 800891c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7fb f8ca 	bl	8003ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00c      	beq.n	8008948 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008934:	2b00      	cmp	r3, #0
 8008936:	d007      	beq.n	8008948 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fd2a 	bl	800939c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00c      	beq.n	800896c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008958:	2b00      	cmp	r3, #0
 800895a:	d007      	beq.n	800896c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f9bd 	bl	8008ce6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00c      	beq.n	8008990 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f003 0320 	and.w	r3, r3, #32
 800897c:	2b00      	cmp	r3, #0
 800897e:	d007      	beq.n	8008990 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f06f 0220 	mvn.w	r2, #32
 8008988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fcfc 	bl	8009388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008990:	bf00      	nop
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d101      	bne.n	80089b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80089b2:	2302      	movs	r3, #2
 80089b4:	e0ae      	b.n	8008b14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b0c      	cmp	r3, #12
 80089c2:	f200 809f 	bhi.w	8008b04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80089c6:	a201      	add	r2, pc, #4	@ (adr r2, 80089cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089cc:	08008a01 	.word	0x08008a01
 80089d0:	08008b05 	.word	0x08008b05
 80089d4:	08008b05 	.word	0x08008b05
 80089d8:	08008b05 	.word	0x08008b05
 80089dc:	08008a41 	.word	0x08008a41
 80089e0:	08008b05 	.word	0x08008b05
 80089e4:	08008b05 	.word	0x08008b05
 80089e8:	08008b05 	.word	0x08008b05
 80089ec:	08008a83 	.word	0x08008a83
 80089f0:	08008b05 	.word	0x08008b05
 80089f4:	08008b05 	.word	0x08008b05
 80089f8:	08008b05 	.word	0x08008b05
 80089fc:	08008ac3 	.word	0x08008ac3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68b9      	ldr	r1, [r7, #8]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 fa04 	bl	8008e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	699a      	ldr	r2, [r3, #24]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0208 	orr.w	r2, r2, #8
 8008a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0204 	bic.w	r2, r2, #4
 8008a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6999      	ldr	r1, [r3, #24]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	691a      	ldr	r2, [r3, #16]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	619a      	str	r2, [r3, #24]
      break;
 8008a3e:	e064      	b.n	8008b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68b9      	ldr	r1, [r7, #8]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 fa4a 	bl	8008ee0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	699a      	ldr	r2, [r3, #24]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	699a      	ldr	r2, [r3, #24]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6999      	ldr	r1, [r3, #24]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	021a      	lsls	r2, r3, #8
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	619a      	str	r2, [r3, #24]
      break;
 8008a80:	e043      	b.n	8008b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68b9      	ldr	r1, [r7, #8]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 fa95 	bl	8008fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	69da      	ldr	r2, [r3, #28]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f042 0208 	orr.w	r2, r2, #8
 8008a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	69da      	ldr	r2, [r3, #28]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f022 0204 	bic.w	r2, r2, #4
 8008aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	69d9      	ldr	r1, [r3, #28]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	691a      	ldr	r2, [r3, #16]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	61da      	str	r2, [r3, #28]
      break;
 8008ac0:	e023      	b.n	8008b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68b9      	ldr	r1, [r7, #8]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fadf 	bl	800908c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	69da      	ldr	r2, [r3, #28]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	69da      	ldr	r2, [r3, #28]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	69d9      	ldr	r1, [r3, #28]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	021a      	lsls	r2, r3, #8
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	61da      	str	r2, [r3, #28]
      break;
 8008b02:	e002      	b.n	8008b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	75fb      	strb	r3, [r7, #23]
      break;
 8008b08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3718      	adds	r7, #24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d101      	bne.n	8008b38 <HAL_TIM_ConfigClockSource+0x1c>
 8008b34:	2302      	movs	r3, #2
 8008b36:	e0b4      	b.n	8008ca2 <HAL_TIM_ConfigClockSource+0x186>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2202      	movs	r2, #2
 8008b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b70:	d03e      	beq.n	8008bf0 <HAL_TIM_ConfigClockSource+0xd4>
 8008b72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b76:	f200 8087 	bhi.w	8008c88 <HAL_TIM_ConfigClockSource+0x16c>
 8008b7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b7e:	f000 8086 	beq.w	8008c8e <HAL_TIM_ConfigClockSource+0x172>
 8008b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b86:	d87f      	bhi.n	8008c88 <HAL_TIM_ConfigClockSource+0x16c>
 8008b88:	2b70      	cmp	r3, #112	@ 0x70
 8008b8a:	d01a      	beq.n	8008bc2 <HAL_TIM_ConfigClockSource+0xa6>
 8008b8c:	2b70      	cmp	r3, #112	@ 0x70
 8008b8e:	d87b      	bhi.n	8008c88 <HAL_TIM_ConfigClockSource+0x16c>
 8008b90:	2b60      	cmp	r3, #96	@ 0x60
 8008b92:	d050      	beq.n	8008c36 <HAL_TIM_ConfigClockSource+0x11a>
 8008b94:	2b60      	cmp	r3, #96	@ 0x60
 8008b96:	d877      	bhi.n	8008c88 <HAL_TIM_ConfigClockSource+0x16c>
 8008b98:	2b50      	cmp	r3, #80	@ 0x50
 8008b9a:	d03c      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0xfa>
 8008b9c:	2b50      	cmp	r3, #80	@ 0x50
 8008b9e:	d873      	bhi.n	8008c88 <HAL_TIM_ConfigClockSource+0x16c>
 8008ba0:	2b40      	cmp	r3, #64	@ 0x40
 8008ba2:	d058      	beq.n	8008c56 <HAL_TIM_ConfigClockSource+0x13a>
 8008ba4:	2b40      	cmp	r3, #64	@ 0x40
 8008ba6:	d86f      	bhi.n	8008c88 <HAL_TIM_ConfigClockSource+0x16c>
 8008ba8:	2b30      	cmp	r3, #48	@ 0x30
 8008baa:	d064      	beq.n	8008c76 <HAL_TIM_ConfigClockSource+0x15a>
 8008bac:	2b30      	cmp	r3, #48	@ 0x30
 8008bae:	d86b      	bhi.n	8008c88 <HAL_TIM_ConfigClockSource+0x16c>
 8008bb0:	2b20      	cmp	r3, #32
 8008bb2:	d060      	beq.n	8008c76 <HAL_TIM_ConfigClockSource+0x15a>
 8008bb4:	2b20      	cmp	r3, #32
 8008bb6:	d867      	bhi.n	8008c88 <HAL_TIM_ConfigClockSource+0x16c>
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d05c      	beq.n	8008c76 <HAL_TIM_ConfigClockSource+0x15a>
 8008bbc:	2b10      	cmp	r3, #16
 8008bbe:	d05a      	beq.n	8008c76 <HAL_TIM_ConfigClockSource+0x15a>
 8008bc0:	e062      	b.n	8008c88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008bd2:	f000 fb25 	bl	8009220 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008be4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	609a      	str	r2, [r3, #8]
      break;
 8008bee:	e04f      	b.n	8008c90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c00:	f000 fb0e 	bl	8009220 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689a      	ldr	r2, [r3, #8]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c12:	609a      	str	r2, [r3, #8]
      break;
 8008c14:	e03c      	b.n	8008c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c22:	461a      	mov	r2, r3
 8008c24:	f000 fa82 	bl	800912c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2150      	movs	r1, #80	@ 0x50
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 fadb 	bl	80091ea <TIM_ITRx_SetConfig>
      break;
 8008c34:	e02c      	b.n	8008c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c42:	461a      	mov	r2, r3
 8008c44:	f000 faa1 	bl	800918a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2160      	movs	r1, #96	@ 0x60
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 facb 	bl	80091ea <TIM_ITRx_SetConfig>
      break;
 8008c54:	e01c      	b.n	8008c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c62:	461a      	mov	r2, r3
 8008c64:	f000 fa62 	bl	800912c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2140      	movs	r1, #64	@ 0x40
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fabb 	bl	80091ea <TIM_ITRx_SetConfig>
      break;
 8008c74:	e00c      	b.n	8008c90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	4610      	mov	r0, r2
 8008c82:	f000 fab2 	bl	80091ea <TIM_ITRx_SetConfig>
      break;
 8008c86:	e003      	b.n	8008c90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c8c:	e000      	b.n	8008c90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cb2:	bf00      	nop
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b083      	sub	sp, #12
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008cc6:	bf00      	nop
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cda:	bf00      	nop
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b083      	sub	sp, #12
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cee:	bf00      	nop
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
	...

08008cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a3a      	ldr	r2, [pc, #232]	@ (8008df8 <TIM_Base_SetConfig+0xfc>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d00f      	beq.n	8008d34 <TIM_Base_SetConfig+0x38>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d1a:	d00b      	beq.n	8008d34 <TIM_Base_SetConfig+0x38>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a37      	ldr	r2, [pc, #220]	@ (8008dfc <TIM_Base_SetConfig+0x100>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d007      	beq.n	8008d34 <TIM_Base_SetConfig+0x38>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a36      	ldr	r2, [pc, #216]	@ (8008e00 <TIM_Base_SetConfig+0x104>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d003      	beq.n	8008d34 <TIM_Base_SetConfig+0x38>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a35      	ldr	r2, [pc, #212]	@ (8008e04 <TIM_Base_SetConfig+0x108>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d108      	bne.n	8008d46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a2b      	ldr	r2, [pc, #172]	@ (8008df8 <TIM_Base_SetConfig+0xfc>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d01b      	beq.n	8008d86 <TIM_Base_SetConfig+0x8a>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d54:	d017      	beq.n	8008d86 <TIM_Base_SetConfig+0x8a>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a28      	ldr	r2, [pc, #160]	@ (8008dfc <TIM_Base_SetConfig+0x100>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d013      	beq.n	8008d86 <TIM_Base_SetConfig+0x8a>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a27      	ldr	r2, [pc, #156]	@ (8008e00 <TIM_Base_SetConfig+0x104>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d00f      	beq.n	8008d86 <TIM_Base_SetConfig+0x8a>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a26      	ldr	r2, [pc, #152]	@ (8008e04 <TIM_Base_SetConfig+0x108>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d00b      	beq.n	8008d86 <TIM_Base_SetConfig+0x8a>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a25      	ldr	r2, [pc, #148]	@ (8008e08 <TIM_Base_SetConfig+0x10c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d007      	beq.n	8008d86 <TIM_Base_SetConfig+0x8a>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a24      	ldr	r2, [pc, #144]	@ (8008e0c <TIM_Base_SetConfig+0x110>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d003      	beq.n	8008d86 <TIM_Base_SetConfig+0x8a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a23      	ldr	r2, [pc, #140]	@ (8008e10 <TIM_Base_SetConfig+0x114>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d108      	bne.n	8008d98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8008df8 <TIM_Base_SetConfig+0xfc>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d103      	bne.n	8008dcc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	691a      	ldr	r2, [r3, #16]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d105      	bne.n	8008dea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	f023 0201 	bic.w	r2, r3, #1
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	611a      	str	r2, [r3, #16]
  }
}
 8008dea:	bf00      	nop
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	40010000 	.word	0x40010000
 8008dfc:	40000400 	.word	0x40000400
 8008e00:	40000800 	.word	0x40000800
 8008e04:	40000c00 	.word	0x40000c00
 8008e08:	40014000 	.word	0x40014000
 8008e0c:	40014400 	.word	0x40014400
 8008e10:	40014800 	.word	0x40014800

08008e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b087      	sub	sp, #28
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a1b      	ldr	r3, [r3, #32]
 8008e28:	f023 0201 	bic.w	r2, r3, #1
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f023 0303 	bic.w	r3, r3, #3
 8008e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f023 0302 	bic.w	r3, r3, #2
 8008e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8008edc <TIM_OC1_SetConfig+0xc8>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d10c      	bne.n	8008e8a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	f023 0308 	bic.w	r3, r3, #8
 8008e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	f023 0304 	bic.w	r3, r3, #4
 8008e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a13      	ldr	r2, [pc, #76]	@ (8008edc <TIM_OC1_SetConfig+0xc8>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d111      	bne.n	8008eb6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	685a      	ldr	r2, [r3, #4]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	621a      	str	r2, [r3, #32]
}
 8008ed0:	bf00      	nop
 8008ed2:	371c      	adds	r7, #28
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	40010000 	.word	0x40010000

08008ee0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	f023 0210 	bic.w	r2, r3, #16
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	021b      	lsls	r3, r3, #8
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f023 0320 	bic.w	r3, r3, #32
 8008f2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	011b      	lsls	r3, r3, #4
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8008fb4 <TIM_OC2_SetConfig+0xd4>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d10d      	bne.n	8008f5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	011b      	lsls	r3, r3, #4
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a15      	ldr	r2, [pc, #84]	@ (8008fb4 <TIM_OC2_SetConfig+0xd4>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d113      	bne.n	8008f8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	621a      	str	r2, [r3, #32]
}
 8008fa6:	bf00      	nop
 8008fa8:	371c      	adds	r7, #28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	40010000 	.word	0x40010000

08008fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a1b      	ldr	r3, [r3, #32]
 8008fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a1b      	ldr	r3, [r3, #32]
 8008fcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f023 0303 	bic.w	r3, r3, #3
 8008fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	021b      	lsls	r3, r3, #8
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	4313      	orrs	r3, r2
 800900c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a1d      	ldr	r2, [pc, #116]	@ (8009088 <TIM_OC3_SetConfig+0xd0>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d10d      	bne.n	8009032 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800901c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	021b      	lsls	r3, r3, #8
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	4313      	orrs	r3, r2
 8009028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a14      	ldr	r2, [pc, #80]	@ (8009088 <TIM_OC3_SetConfig+0xd0>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d113      	bne.n	8009062 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	011b      	lsls	r3, r3, #4
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	4313      	orrs	r3, r2
 8009054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	011b      	lsls	r3, r3, #4
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	4313      	orrs	r3, r2
 8009060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	621a      	str	r2, [r3, #32]
}
 800907c:	bf00      	nop
 800907e:	371c      	adds	r7, #28
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	40010000 	.word	0x40010000

0800908c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800908c:	b480      	push	{r7}
 800908e:	b087      	sub	sp, #28
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a1b      	ldr	r3, [r3, #32]
 80090a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	021b      	lsls	r3, r3, #8
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80090d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	031b      	lsls	r3, r3, #12
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a10      	ldr	r2, [pc, #64]	@ (8009128 <TIM_OC4_SetConfig+0x9c>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d109      	bne.n	8009100 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	019b      	lsls	r3, r3, #6
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	621a      	str	r2, [r3, #32]
}
 800911a:	bf00      	nop
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	40010000 	.word	0x40010000

0800912c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6a1b      	ldr	r3, [r3, #32]
 800913c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	f023 0201 	bic.w	r2, r3, #1
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	011b      	lsls	r3, r3, #4
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	4313      	orrs	r3, r2
 8009160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f023 030a 	bic.w	r3, r3, #10
 8009168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	4313      	orrs	r3, r2
 8009170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	621a      	str	r2, [r3, #32]
}
 800917e:	bf00      	nop
 8009180:	371c      	adds	r7, #28
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800918a:	b480      	push	{r7}
 800918c:	b087      	sub	sp, #28
 800918e:	af00      	add	r7, sp, #0
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	60b9      	str	r1, [r7, #8]
 8009194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6a1b      	ldr	r3, [r3, #32]
 800919a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	f023 0210 	bic.w	r2, r3, #16
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80091b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	031b      	lsls	r3, r3, #12
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	4313      	orrs	r3, r2
 80091be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80091c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	011b      	lsls	r3, r3, #4
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	621a      	str	r2, [r3, #32]
}
 80091de:	bf00      	nop
 80091e0:	371c      	adds	r7, #28
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b085      	sub	sp, #20
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4313      	orrs	r3, r2
 8009208:	f043 0307 	orr.w	r3, r3, #7
 800920c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	609a      	str	r2, [r3, #8]
}
 8009214:	bf00      	nop
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800923a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	021a      	lsls	r2, r3, #8
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	431a      	orrs	r2, r3
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	4313      	orrs	r3, r2
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	4313      	orrs	r3, r2
 800924c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	609a      	str	r2, [r3, #8]
}
 8009254:	bf00      	nop
 8009256:	371c      	adds	r7, #28
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	f003 031f 	and.w	r3, r3, #31
 8009272:	2201      	movs	r2, #1
 8009274:	fa02 f303 	lsl.w	r3, r2, r3
 8009278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6a1a      	ldr	r2, [r3, #32]
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	43db      	mvns	r3, r3
 8009282:	401a      	ands	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6a1a      	ldr	r2, [r3, #32]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	f003 031f 	and.w	r3, r3, #31
 8009292:	6879      	ldr	r1, [r7, #4]
 8009294:	fa01 f303 	lsl.w	r3, r1, r3
 8009298:	431a      	orrs	r2, r3
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	621a      	str	r2, [r3, #32]
}
 800929e:	bf00      	nop
 80092a0:	371c      	adds	r7, #28
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
	...

080092ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d101      	bne.n	80092c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092c0:	2302      	movs	r3, #2
 80092c2:	e050      	b.n	8009366 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2202      	movs	r2, #2
 80092d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a1c      	ldr	r2, [pc, #112]	@ (8009374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d018      	beq.n	800933a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009310:	d013      	beq.n	800933a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a18      	ldr	r2, [pc, #96]	@ (8009378 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d00e      	beq.n	800933a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a16      	ldr	r2, [pc, #88]	@ (800937c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d009      	beq.n	800933a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a15      	ldr	r2, [pc, #84]	@ (8009380 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d004      	beq.n	800933a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a13      	ldr	r2, [pc, #76]	@ (8009384 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d10c      	bne.n	8009354 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	4313      	orrs	r3, r2
 800934a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	40010000 	.word	0x40010000
 8009378:	40000400 	.word	0x40000400
 800937c:	40000800 	.word	0x40000800
 8009380:	40000c00 	.word	0x40000c00
 8009384:	40014000 	.word	0x40014000

08009388 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093a4:	bf00      	nop
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e042      	b.n	8009448 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d106      	bne.n	80093dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7fa ff80 	bl	80042dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2224      	movs	r2, #36	@ 0x24
 80093e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68da      	ldr	r2, [r3, #12]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80093f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f82b 	bl	8009450 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	691a      	ldr	r2, [r3, #16]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009408:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	695a      	ldr	r2, [r3, #20]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009418:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68da      	ldr	r2, [r3, #12]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009428:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2220      	movs	r2, #32
 8009434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2220      	movs	r2, #32
 800943c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009454:	b0c0      	sub	sp, #256	@ 0x100
 8009456:	af00      	add	r7, sp, #0
 8009458:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800945c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800946c:	68d9      	ldr	r1, [r3, #12]
 800946e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	ea40 0301 	orr.w	r3, r0, r1
 8009478:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800947a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800947e:	689a      	ldr	r2, [r3, #8]
 8009480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	431a      	orrs	r2, r3
 8009488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	431a      	orrs	r2, r3
 8009490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009494:	69db      	ldr	r3, [r3, #28]
 8009496:	4313      	orrs	r3, r2
 8009498:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800949c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80094a8:	f021 010c 	bic.w	r1, r1, #12
 80094ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80094b6:	430b      	orrs	r3, r1
 80094b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80094ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	695b      	ldr	r3, [r3, #20]
 80094c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80094c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094ca:	6999      	ldr	r1, [r3, #24]
 80094cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	ea40 0301 	orr.w	r3, r0, r1
 80094d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	4b8f      	ldr	r3, [pc, #572]	@ (800971c <UART_SetConfig+0x2cc>)
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d005      	beq.n	80094f0 <UART_SetConfig+0xa0>
 80094e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	4b8d      	ldr	r3, [pc, #564]	@ (8009720 <UART_SetConfig+0x2d0>)
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d104      	bne.n	80094fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80094f0:	f7fd fc94 	bl	8006e1c <HAL_RCC_GetPCLK2Freq>
 80094f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80094f8:	e003      	b.n	8009502 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094fa:	f7fd fc7b 	bl	8006df4 <HAL_RCC_GetPCLK1Freq>
 80094fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800950c:	f040 810c 	bne.w	8009728 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009514:	2200      	movs	r2, #0
 8009516:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800951a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800951e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009522:	4622      	mov	r2, r4
 8009524:	462b      	mov	r3, r5
 8009526:	1891      	adds	r1, r2, r2
 8009528:	65b9      	str	r1, [r7, #88]	@ 0x58
 800952a:	415b      	adcs	r3, r3
 800952c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800952e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009532:	4621      	mov	r1, r4
 8009534:	eb12 0801 	adds.w	r8, r2, r1
 8009538:	4629      	mov	r1, r5
 800953a:	eb43 0901 	adc.w	r9, r3, r1
 800953e:	f04f 0200 	mov.w	r2, #0
 8009542:	f04f 0300 	mov.w	r3, #0
 8009546:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800954a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800954e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009552:	4690      	mov	r8, r2
 8009554:	4699      	mov	r9, r3
 8009556:	4623      	mov	r3, r4
 8009558:	eb18 0303 	adds.w	r3, r8, r3
 800955c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009560:	462b      	mov	r3, r5
 8009562:	eb49 0303 	adc.w	r3, r9, r3
 8009566:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800956a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009576:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800957a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800957e:	460b      	mov	r3, r1
 8009580:	18db      	adds	r3, r3, r3
 8009582:	653b      	str	r3, [r7, #80]	@ 0x50
 8009584:	4613      	mov	r3, r2
 8009586:	eb42 0303 	adc.w	r3, r2, r3
 800958a:	657b      	str	r3, [r7, #84]	@ 0x54
 800958c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009590:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009594:	f7f7 fb28 	bl	8000be8 <__aeabi_uldivmod>
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4b61      	ldr	r3, [pc, #388]	@ (8009724 <UART_SetConfig+0x2d4>)
 800959e:	fba3 2302 	umull	r2, r3, r3, r2
 80095a2:	095b      	lsrs	r3, r3, #5
 80095a4:	011c      	lsls	r4, r3, #4
 80095a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80095b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80095b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80095b8:	4642      	mov	r2, r8
 80095ba:	464b      	mov	r3, r9
 80095bc:	1891      	adds	r1, r2, r2
 80095be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80095c0:	415b      	adcs	r3, r3
 80095c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80095c8:	4641      	mov	r1, r8
 80095ca:	eb12 0a01 	adds.w	sl, r2, r1
 80095ce:	4649      	mov	r1, r9
 80095d0:	eb43 0b01 	adc.w	fp, r3, r1
 80095d4:	f04f 0200 	mov.w	r2, #0
 80095d8:	f04f 0300 	mov.w	r3, #0
 80095dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80095e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80095e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095e8:	4692      	mov	sl, r2
 80095ea:	469b      	mov	fp, r3
 80095ec:	4643      	mov	r3, r8
 80095ee:	eb1a 0303 	adds.w	r3, sl, r3
 80095f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095f6:	464b      	mov	r3, r9
 80095f8:	eb4b 0303 	adc.w	r3, fp, r3
 80095fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800960c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009610:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009614:	460b      	mov	r3, r1
 8009616:	18db      	adds	r3, r3, r3
 8009618:	643b      	str	r3, [r7, #64]	@ 0x40
 800961a:	4613      	mov	r3, r2
 800961c:	eb42 0303 	adc.w	r3, r2, r3
 8009620:	647b      	str	r3, [r7, #68]	@ 0x44
 8009622:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009626:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800962a:	f7f7 fadd 	bl	8000be8 <__aeabi_uldivmod>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	4611      	mov	r1, r2
 8009634:	4b3b      	ldr	r3, [pc, #236]	@ (8009724 <UART_SetConfig+0x2d4>)
 8009636:	fba3 2301 	umull	r2, r3, r3, r1
 800963a:	095b      	lsrs	r3, r3, #5
 800963c:	2264      	movs	r2, #100	@ 0x64
 800963e:	fb02 f303 	mul.w	r3, r2, r3
 8009642:	1acb      	subs	r3, r1, r3
 8009644:	00db      	lsls	r3, r3, #3
 8009646:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800964a:	4b36      	ldr	r3, [pc, #216]	@ (8009724 <UART_SetConfig+0x2d4>)
 800964c:	fba3 2302 	umull	r2, r3, r3, r2
 8009650:	095b      	lsrs	r3, r3, #5
 8009652:	005b      	lsls	r3, r3, #1
 8009654:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009658:	441c      	add	r4, r3
 800965a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800965e:	2200      	movs	r2, #0
 8009660:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009664:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009668:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800966c:	4642      	mov	r2, r8
 800966e:	464b      	mov	r3, r9
 8009670:	1891      	adds	r1, r2, r2
 8009672:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009674:	415b      	adcs	r3, r3
 8009676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009678:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800967c:	4641      	mov	r1, r8
 800967e:	1851      	adds	r1, r2, r1
 8009680:	6339      	str	r1, [r7, #48]	@ 0x30
 8009682:	4649      	mov	r1, r9
 8009684:	414b      	adcs	r3, r1
 8009686:	637b      	str	r3, [r7, #52]	@ 0x34
 8009688:	f04f 0200 	mov.w	r2, #0
 800968c:	f04f 0300 	mov.w	r3, #0
 8009690:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009694:	4659      	mov	r1, fp
 8009696:	00cb      	lsls	r3, r1, #3
 8009698:	4651      	mov	r1, sl
 800969a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800969e:	4651      	mov	r1, sl
 80096a0:	00ca      	lsls	r2, r1, #3
 80096a2:	4610      	mov	r0, r2
 80096a4:	4619      	mov	r1, r3
 80096a6:	4603      	mov	r3, r0
 80096a8:	4642      	mov	r2, r8
 80096aa:	189b      	adds	r3, r3, r2
 80096ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80096b0:	464b      	mov	r3, r9
 80096b2:	460a      	mov	r2, r1
 80096b4:	eb42 0303 	adc.w	r3, r2, r3
 80096b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80096cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80096d0:	460b      	mov	r3, r1
 80096d2:	18db      	adds	r3, r3, r3
 80096d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096d6:	4613      	mov	r3, r2
 80096d8:	eb42 0303 	adc.w	r3, r2, r3
 80096dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80096e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80096e6:	f7f7 fa7f 	bl	8000be8 <__aeabi_uldivmod>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009724 <UART_SetConfig+0x2d4>)
 80096f0:	fba3 1302 	umull	r1, r3, r3, r2
 80096f4:	095b      	lsrs	r3, r3, #5
 80096f6:	2164      	movs	r1, #100	@ 0x64
 80096f8:	fb01 f303 	mul.w	r3, r1, r3
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	00db      	lsls	r3, r3, #3
 8009700:	3332      	adds	r3, #50	@ 0x32
 8009702:	4a08      	ldr	r2, [pc, #32]	@ (8009724 <UART_SetConfig+0x2d4>)
 8009704:	fba2 2303 	umull	r2, r3, r2, r3
 8009708:	095b      	lsrs	r3, r3, #5
 800970a:	f003 0207 	and.w	r2, r3, #7
 800970e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4422      	add	r2, r4
 8009716:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009718:	e106      	b.n	8009928 <UART_SetConfig+0x4d8>
 800971a:	bf00      	nop
 800971c:	40011000 	.word	0x40011000
 8009720:	40011400 	.word	0x40011400
 8009724:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800972c:	2200      	movs	r2, #0
 800972e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009732:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009736:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800973a:	4642      	mov	r2, r8
 800973c:	464b      	mov	r3, r9
 800973e:	1891      	adds	r1, r2, r2
 8009740:	6239      	str	r1, [r7, #32]
 8009742:	415b      	adcs	r3, r3
 8009744:	627b      	str	r3, [r7, #36]	@ 0x24
 8009746:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800974a:	4641      	mov	r1, r8
 800974c:	1854      	adds	r4, r2, r1
 800974e:	4649      	mov	r1, r9
 8009750:	eb43 0501 	adc.w	r5, r3, r1
 8009754:	f04f 0200 	mov.w	r2, #0
 8009758:	f04f 0300 	mov.w	r3, #0
 800975c:	00eb      	lsls	r3, r5, #3
 800975e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009762:	00e2      	lsls	r2, r4, #3
 8009764:	4614      	mov	r4, r2
 8009766:	461d      	mov	r5, r3
 8009768:	4643      	mov	r3, r8
 800976a:	18e3      	adds	r3, r4, r3
 800976c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009770:	464b      	mov	r3, r9
 8009772:	eb45 0303 	adc.w	r3, r5, r3
 8009776:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800977a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009786:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800978a:	f04f 0200 	mov.w	r2, #0
 800978e:	f04f 0300 	mov.w	r3, #0
 8009792:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009796:	4629      	mov	r1, r5
 8009798:	008b      	lsls	r3, r1, #2
 800979a:	4621      	mov	r1, r4
 800979c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097a0:	4621      	mov	r1, r4
 80097a2:	008a      	lsls	r2, r1, #2
 80097a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80097a8:	f7f7 fa1e 	bl	8000be8 <__aeabi_uldivmod>
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	4b60      	ldr	r3, [pc, #384]	@ (8009934 <UART_SetConfig+0x4e4>)
 80097b2:	fba3 2302 	umull	r2, r3, r3, r2
 80097b6:	095b      	lsrs	r3, r3, #5
 80097b8:	011c      	lsls	r4, r3, #4
 80097ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097be:	2200      	movs	r2, #0
 80097c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80097c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80097c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80097cc:	4642      	mov	r2, r8
 80097ce:	464b      	mov	r3, r9
 80097d0:	1891      	adds	r1, r2, r2
 80097d2:	61b9      	str	r1, [r7, #24]
 80097d4:	415b      	adcs	r3, r3
 80097d6:	61fb      	str	r3, [r7, #28]
 80097d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097dc:	4641      	mov	r1, r8
 80097de:	1851      	adds	r1, r2, r1
 80097e0:	6139      	str	r1, [r7, #16]
 80097e2:	4649      	mov	r1, r9
 80097e4:	414b      	adcs	r3, r1
 80097e6:	617b      	str	r3, [r7, #20]
 80097e8:	f04f 0200 	mov.w	r2, #0
 80097ec:	f04f 0300 	mov.w	r3, #0
 80097f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80097f4:	4659      	mov	r1, fp
 80097f6:	00cb      	lsls	r3, r1, #3
 80097f8:	4651      	mov	r1, sl
 80097fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097fe:	4651      	mov	r1, sl
 8009800:	00ca      	lsls	r2, r1, #3
 8009802:	4610      	mov	r0, r2
 8009804:	4619      	mov	r1, r3
 8009806:	4603      	mov	r3, r0
 8009808:	4642      	mov	r2, r8
 800980a:	189b      	adds	r3, r3, r2
 800980c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009810:	464b      	mov	r3, r9
 8009812:	460a      	mov	r2, r1
 8009814:	eb42 0303 	adc.w	r3, r2, r3
 8009818:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800981c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009826:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009828:	f04f 0200 	mov.w	r2, #0
 800982c:	f04f 0300 	mov.w	r3, #0
 8009830:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009834:	4649      	mov	r1, r9
 8009836:	008b      	lsls	r3, r1, #2
 8009838:	4641      	mov	r1, r8
 800983a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800983e:	4641      	mov	r1, r8
 8009840:	008a      	lsls	r2, r1, #2
 8009842:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009846:	f7f7 f9cf 	bl	8000be8 <__aeabi_uldivmod>
 800984a:	4602      	mov	r2, r0
 800984c:	460b      	mov	r3, r1
 800984e:	4611      	mov	r1, r2
 8009850:	4b38      	ldr	r3, [pc, #224]	@ (8009934 <UART_SetConfig+0x4e4>)
 8009852:	fba3 2301 	umull	r2, r3, r3, r1
 8009856:	095b      	lsrs	r3, r3, #5
 8009858:	2264      	movs	r2, #100	@ 0x64
 800985a:	fb02 f303 	mul.w	r3, r2, r3
 800985e:	1acb      	subs	r3, r1, r3
 8009860:	011b      	lsls	r3, r3, #4
 8009862:	3332      	adds	r3, #50	@ 0x32
 8009864:	4a33      	ldr	r2, [pc, #204]	@ (8009934 <UART_SetConfig+0x4e4>)
 8009866:	fba2 2303 	umull	r2, r3, r2, r3
 800986a:	095b      	lsrs	r3, r3, #5
 800986c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009870:	441c      	add	r4, r3
 8009872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009876:	2200      	movs	r2, #0
 8009878:	673b      	str	r3, [r7, #112]	@ 0x70
 800987a:	677a      	str	r2, [r7, #116]	@ 0x74
 800987c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009880:	4642      	mov	r2, r8
 8009882:	464b      	mov	r3, r9
 8009884:	1891      	adds	r1, r2, r2
 8009886:	60b9      	str	r1, [r7, #8]
 8009888:	415b      	adcs	r3, r3
 800988a:	60fb      	str	r3, [r7, #12]
 800988c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009890:	4641      	mov	r1, r8
 8009892:	1851      	adds	r1, r2, r1
 8009894:	6039      	str	r1, [r7, #0]
 8009896:	4649      	mov	r1, r9
 8009898:	414b      	adcs	r3, r1
 800989a:	607b      	str	r3, [r7, #4]
 800989c:	f04f 0200 	mov.w	r2, #0
 80098a0:	f04f 0300 	mov.w	r3, #0
 80098a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80098a8:	4659      	mov	r1, fp
 80098aa:	00cb      	lsls	r3, r1, #3
 80098ac:	4651      	mov	r1, sl
 80098ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098b2:	4651      	mov	r1, sl
 80098b4:	00ca      	lsls	r2, r1, #3
 80098b6:	4610      	mov	r0, r2
 80098b8:	4619      	mov	r1, r3
 80098ba:	4603      	mov	r3, r0
 80098bc:	4642      	mov	r2, r8
 80098be:	189b      	adds	r3, r3, r2
 80098c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098c2:	464b      	mov	r3, r9
 80098c4:	460a      	mov	r2, r1
 80098c6:	eb42 0303 	adc.w	r3, r2, r3
 80098ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80098cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80098d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80098d8:	f04f 0200 	mov.w	r2, #0
 80098dc:	f04f 0300 	mov.w	r3, #0
 80098e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80098e4:	4649      	mov	r1, r9
 80098e6:	008b      	lsls	r3, r1, #2
 80098e8:	4641      	mov	r1, r8
 80098ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098ee:	4641      	mov	r1, r8
 80098f0:	008a      	lsls	r2, r1, #2
 80098f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80098f6:	f7f7 f977 	bl	8000be8 <__aeabi_uldivmod>
 80098fa:	4602      	mov	r2, r0
 80098fc:	460b      	mov	r3, r1
 80098fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009934 <UART_SetConfig+0x4e4>)
 8009900:	fba3 1302 	umull	r1, r3, r3, r2
 8009904:	095b      	lsrs	r3, r3, #5
 8009906:	2164      	movs	r1, #100	@ 0x64
 8009908:	fb01 f303 	mul.w	r3, r1, r3
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	3332      	adds	r3, #50	@ 0x32
 8009912:	4a08      	ldr	r2, [pc, #32]	@ (8009934 <UART_SetConfig+0x4e4>)
 8009914:	fba2 2303 	umull	r2, r3, r2, r3
 8009918:	095b      	lsrs	r3, r3, #5
 800991a:	f003 020f 	and.w	r2, r3, #15
 800991e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4422      	add	r2, r4
 8009926:	609a      	str	r2, [r3, #8]
}
 8009928:	bf00      	nop
 800992a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800992e:	46bd      	mov	sp, r7
 8009930:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009934:	51eb851f 	.word	0x51eb851f

08009938 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800994a:	2b84      	cmp	r3, #132	@ 0x84
 800994c:	d005      	beq.n	800995a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800994e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	4413      	add	r3, r2
 8009956:	3303      	adds	r3, #3
 8009958:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800995a:	68fb      	ldr	r3, [r7, #12]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800996c:	f000 fae4 	bl	8009f38 <vTaskStartScheduler>
  
  return osOK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	bd80      	pop	{r7, pc}

08009976 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009978:	b089      	sub	sp, #36	@ 0x24
 800997a:	af04      	add	r7, sp, #16
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	695b      	ldr	r3, [r3, #20]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d020      	beq.n	80099ca <osThreadCreate+0x54>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d01c      	beq.n	80099ca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	685c      	ldr	r4, [r3, #4]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	691e      	ldr	r6, [r3, #16]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7ff ffc8 	bl	8009938 <makeFreeRtosPriority>
 80099a8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099b2:	9202      	str	r2, [sp, #8]
 80099b4:	9301      	str	r3, [sp, #4]
 80099b6:	9100      	str	r1, [sp, #0]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	4632      	mov	r2, r6
 80099bc:	4629      	mov	r1, r5
 80099be:	4620      	mov	r0, r4
 80099c0:	f000 f8ed 	bl	8009b9e <xTaskCreateStatic>
 80099c4:	4603      	mov	r3, r0
 80099c6:	60fb      	str	r3, [r7, #12]
 80099c8:	e01c      	b.n	8009a04 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	685c      	ldr	r4, [r3, #4]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099d6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099de:	4618      	mov	r0, r3
 80099e0:	f7ff ffaa 	bl	8009938 <makeFreeRtosPriority>
 80099e4:	4602      	mov	r2, r0
 80099e6:	f107 030c 	add.w	r3, r7, #12
 80099ea:	9301      	str	r3, [sp, #4]
 80099ec:	9200      	str	r2, [sp, #0]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	4632      	mov	r2, r6
 80099f2:	4629      	mov	r1, r5
 80099f4:	4620      	mov	r0, r4
 80099f6:	f000 f932 	bl	8009c5e <xTaskCreate>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d001      	beq.n	8009a04 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009a00:	2300      	movs	r3, #0
 8009a02:	e000      	b.n	8009a06 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009a04:	68fb      	ldr	r3, [r7, #12]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a0e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d001      	beq.n	8009a24 <osDelay+0x16>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	e000      	b.n	8009a26 <osDelay+0x18>
 8009a24:	2301      	movs	r3, #1
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fa50 	bl	8009ecc <vTaskDelay>
  
  return osOK;
 8009a2c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a36:	b480      	push	{r7}
 8009a38:	b083      	sub	sp, #12
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f103 0208 	add.w	r2, r3, #8
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a4e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f103 0208 	add.w	r2, r3, #8
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f103 0208 	add.w	r2, r3, #8
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a6a:	bf00      	nop
 8009a6c:	370c      	adds	r7, #12
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr

08009a76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a76:	b480      	push	{r7}
 8009a78:	b083      	sub	sp, #12
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	689a      	ldr	r2, [r3, #8]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	1c5a      	adds	r2, r3, #1
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	601a      	str	r2, [r3, #0]
}
 8009acc:	bf00      	nop
 8009ace:	3714      	adds	r7, #20
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aee:	d103      	bne.n	8009af8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	60fb      	str	r3, [r7, #12]
 8009af6:	e00c      	b.n	8009b12 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	3308      	adds	r3, #8
 8009afc:	60fb      	str	r3, [r7, #12]
 8009afe:	e002      	b.n	8009b06 <vListInsert+0x2e>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d2f6      	bcs.n	8009b00 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	683a      	ldr	r2, [r7, #0]
 8009b20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	601a      	str	r2, [r3, #0]
}
 8009b3e:	bf00      	nop
 8009b40:	3714      	adds	r7, #20
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b085      	sub	sp, #20
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	6892      	ldr	r2, [r2, #8]
 8009b60:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	6852      	ldr	r2, [r2, #4]
 8009b6a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d103      	bne.n	8009b7e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	689a      	ldr	r2, [r3, #8]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	1e5a      	subs	r2, r3, #1
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b08e      	sub	sp, #56	@ 0x38
 8009ba2:	af04      	add	r7, sp, #16
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	60b9      	str	r1, [r7, #8]
 8009ba8:	607a      	str	r2, [r7, #4]
 8009baa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10b      	bne.n	8009bca <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop
 8009bc8:	e7fd      	b.n	8009bc6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10b      	bne.n	8009be8 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	61fb      	str	r3, [r7, #28]
}
 8009be2:	bf00      	nop
 8009be4:	bf00      	nop
 8009be6:	e7fd      	b.n	8009be4 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009be8:	2354      	movs	r3, #84	@ 0x54
 8009bea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	2b54      	cmp	r3, #84	@ 0x54
 8009bf0:	d00b      	beq.n	8009c0a <xTaskCreateStatic+0x6c>
	__asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	61bb      	str	r3, [r7, #24]
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop
 8009c08:	e7fd      	b.n	8009c06 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d01e      	beq.n	8009c50 <xTaskCreateStatic+0xb2>
 8009c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d01b      	beq.n	8009c50 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c20:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c24:	2202      	movs	r2, #2
 8009c26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9303      	str	r3, [sp, #12]
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c30:	9302      	str	r3, [sp, #8]
 8009c32:	f107 0314 	add.w	r3, r7, #20
 8009c36:	9301      	str	r3, [sp, #4]
 8009c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	68b9      	ldr	r1, [r7, #8]
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f000 f850 	bl	8009ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009c4a:	f000 f8d5 	bl	8009df8 <prvAddNewTaskToReadyList>
 8009c4e:	e001      	b.n	8009c54 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009c50:	2300      	movs	r3, #0
 8009c52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c54:	697b      	ldr	r3, [r7, #20]
	}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3728      	adds	r7, #40	@ 0x28
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b08c      	sub	sp, #48	@ 0x30
 8009c62:	af04      	add	r7, sp, #16
 8009c64:	60f8      	str	r0, [r7, #12]
 8009c66:	60b9      	str	r1, [r7, #8]
 8009c68:	603b      	str	r3, [r7, #0]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c6e:	88fb      	ldrh	r3, [r7, #6]
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 fed0 	bl	800aa18 <pvPortMalloc>
 8009c78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00e      	beq.n	8009c9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c80:	2054      	movs	r0, #84	@ 0x54
 8009c82:	f000 fec9 	bl	800aa18 <pvPortMalloc>
 8009c86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d003      	beq.n	8009c96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	697a      	ldr	r2, [r7, #20]
 8009c92:	631a      	str	r2, [r3, #48]	@ 0x30
 8009c94:	e005      	b.n	8009ca2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c96:	6978      	ldr	r0, [r7, #20]
 8009c98:	f000 ff8c 	bl	800abb4 <vPortFree>
 8009c9c:	e001      	b.n	8009ca2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d017      	beq.n	8009cd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009cb0:	88fa      	ldrh	r2, [r7, #6]
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	9303      	str	r3, [sp, #12]
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	9302      	str	r3, [sp, #8]
 8009cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cbc:	9301      	str	r3, [sp, #4]
 8009cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	68b9      	ldr	r1, [r7, #8]
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f000 f80e 	bl	8009ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ccc:	69f8      	ldr	r0, [r7, #28]
 8009cce:	f000 f893 	bl	8009df8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	61bb      	str	r3, [r7, #24]
 8009cd6:	e002      	b.n	8009cde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009cde:	69bb      	ldr	r3, [r7, #24]
	}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3720      	adds	r7, #32
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	607a      	str	r2, [r7, #4]
 8009cf4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009d00:	3b01      	subs	r3, #1
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4413      	add	r3, r2
 8009d06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	f023 0307 	bic.w	r3, r3, #7
 8009d0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	f003 0307 	and.w	r3, r3, #7
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00b      	beq.n	8009d32 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	617b      	str	r3, [r7, #20]
}
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	e7fd      	b.n	8009d2e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d01f      	beq.n	8009d78 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d38:	2300      	movs	r3, #0
 8009d3a:	61fb      	str	r3, [r7, #28]
 8009d3c:	e012      	b.n	8009d64 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	4413      	add	r3, r2
 8009d44:	7819      	ldrb	r1, [r3, #0]
 8009d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	3334      	adds	r3, #52	@ 0x34
 8009d4e:	460a      	mov	r2, r1
 8009d50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	4413      	add	r3, r2
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d006      	beq.n	8009d6c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	3301      	adds	r3, #1
 8009d62:	61fb      	str	r3, [r7, #28]
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	2b0f      	cmp	r3, #15
 8009d68:	d9e9      	bls.n	8009d3e <prvInitialiseNewTask+0x56>
 8009d6a:	e000      	b.n	8009d6e <prvInitialiseNewTask+0x86>
			{
				break;
 8009d6c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009d76:	e003      	b.n	8009d80 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d82:	2b06      	cmp	r3, #6
 8009d84:	d901      	bls.n	8009d8a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d86:	2306      	movs	r3, #6
 8009d88:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d94:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d98:	2200      	movs	r2, #0
 8009d9a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9e:	3304      	adds	r3, #4
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7ff fe68 	bl	8009a76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da8:	3318      	adds	r3, #24
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7ff fe63 	bl	8009a76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009db4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db8:	f1c3 0207 	rsb	r2, r3, #7
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dc4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc8:	2200      	movs	r2, #0
 8009dca:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009dd4:	683a      	ldr	r2, [r7, #0]
 8009dd6:	68f9      	ldr	r1, [r7, #12]
 8009dd8:	69b8      	ldr	r0, [r7, #24]
 8009dda:	f000 fc0d 	bl	800a5f8 <pxPortInitialiseStack>
 8009dde:	4602      	mov	r2, r0
 8009de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d002      	beq.n	8009df0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009df0:	bf00      	nop
 8009df2:	3720      	adds	r7, #32
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e00:	f000 fd2a 	bl	800a858 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e04:	4b2a      	ldr	r3, [pc, #168]	@ (8009eb0 <prvAddNewTaskToReadyList+0xb8>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	4a29      	ldr	r2, [pc, #164]	@ (8009eb0 <prvAddNewTaskToReadyList+0xb8>)
 8009e0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e0e:	4b29      	ldr	r3, [pc, #164]	@ (8009eb4 <prvAddNewTaskToReadyList+0xbc>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d109      	bne.n	8009e2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e16:	4a27      	ldr	r2, [pc, #156]	@ (8009eb4 <prvAddNewTaskToReadyList+0xbc>)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e1c:	4b24      	ldr	r3, [pc, #144]	@ (8009eb0 <prvAddNewTaskToReadyList+0xb8>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d110      	bne.n	8009e46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e24:	f000 fac4 	bl	800a3b0 <prvInitialiseTaskLists>
 8009e28:	e00d      	b.n	8009e46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e2a:	4b23      	ldr	r3, [pc, #140]	@ (8009eb8 <prvAddNewTaskToReadyList+0xc0>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d109      	bne.n	8009e46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e32:	4b20      	ldr	r3, [pc, #128]	@ (8009eb4 <prvAddNewTaskToReadyList+0xbc>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d802      	bhi.n	8009e46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e40:	4a1c      	ldr	r2, [pc, #112]	@ (8009eb4 <prvAddNewTaskToReadyList+0xbc>)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e46:	4b1d      	ldr	r3, [pc, #116]	@ (8009ebc <prvAddNewTaskToReadyList+0xc4>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8009ebc <prvAddNewTaskToReadyList+0xc4>)
 8009e4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e54:	2201      	movs	r2, #1
 8009e56:	409a      	lsls	r2, r3
 8009e58:	4b19      	ldr	r3, [pc, #100]	@ (8009ec0 <prvAddNewTaskToReadyList+0xc8>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	4a18      	ldr	r2, [pc, #96]	@ (8009ec0 <prvAddNewTaskToReadyList+0xc8>)
 8009e60:	6013      	str	r3, [r2, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e66:	4613      	mov	r3, r2
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4413      	add	r3, r2
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	4a15      	ldr	r2, [pc, #84]	@ (8009ec4 <prvAddNewTaskToReadyList+0xcc>)
 8009e70:	441a      	add	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3304      	adds	r3, #4
 8009e76:	4619      	mov	r1, r3
 8009e78:	4610      	mov	r0, r2
 8009e7a:	f7ff fe09 	bl	8009a90 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e7e:	f000 fd1d 	bl	800a8bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e82:	4b0d      	ldr	r3, [pc, #52]	@ (8009eb8 <prvAddNewTaskToReadyList+0xc0>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00e      	beq.n	8009ea8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8009eb4 <prvAddNewTaskToReadyList+0xbc>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d207      	bcs.n	8009ea8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009e98:	4b0b      	ldr	r3, [pc, #44]	@ (8009ec8 <prvAddNewTaskToReadyList+0xd0>)
 8009e9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ea8:	bf00      	nop
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	20000bf4 	.word	0x20000bf4
 8009eb4:	20000af4 	.word	0x20000af4
 8009eb8:	20000c00 	.word	0x20000c00
 8009ebc:	20000c10 	.word	0x20000c10
 8009ec0:	20000bfc 	.word	0x20000bfc
 8009ec4:	20000af8 	.word	0x20000af8
 8009ec8:	e000ed04 	.word	0xe000ed04

08009ecc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d018      	beq.n	8009f10 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ede:	4b14      	ldr	r3, [pc, #80]	@ (8009f30 <vTaskDelay+0x64>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00b      	beq.n	8009efe <vTaskDelay+0x32>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	60bb      	str	r3, [r7, #8]
}
 8009ef8:	bf00      	nop
 8009efa:	bf00      	nop
 8009efc:	e7fd      	b.n	8009efa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009efe:	f000 f87d 	bl	8009ffc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f02:	2100      	movs	r1, #0
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fb11 	bl	800a52c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009f0a:	f000 f885 	bl	800a018 <xTaskResumeAll>
 8009f0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d107      	bne.n	8009f26 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009f16:	4b07      	ldr	r3, [pc, #28]	@ (8009f34 <vTaskDelay+0x68>)
 8009f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f1c:	601a      	str	r2, [r3, #0]
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f26:	bf00      	nop
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20000c1c 	.word	0x20000c1c
 8009f34:	e000ed04 	.word	0xe000ed04

08009f38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b08a      	sub	sp, #40	@ 0x28
 8009f3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f46:	463a      	mov	r2, r7
 8009f48:	1d39      	adds	r1, r7, #4
 8009f4a:	f107 0308 	add.w	r3, r7, #8
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7f9 f9f2 	bl	8003338 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	9202      	str	r2, [sp, #8]
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	2300      	movs	r3, #0
 8009f64:	460a      	mov	r2, r1
 8009f66:	491f      	ldr	r1, [pc, #124]	@ (8009fe4 <vTaskStartScheduler+0xac>)
 8009f68:	481f      	ldr	r0, [pc, #124]	@ (8009fe8 <vTaskStartScheduler+0xb0>)
 8009f6a:	f7ff fe18 	bl	8009b9e <xTaskCreateStatic>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	4a1e      	ldr	r2, [pc, #120]	@ (8009fec <vTaskStartScheduler+0xb4>)
 8009f72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f74:	4b1d      	ldr	r3, [pc, #116]	@ (8009fec <vTaskStartScheduler+0xb4>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	617b      	str	r3, [r7, #20]
 8009f80:	e001      	b.n	8009f86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d116      	bne.n	8009fba <vTaskStartScheduler+0x82>
	__asm volatile
 8009f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f90:	f383 8811 	msr	BASEPRI, r3
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	613b      	str	r3, [r7, #16]
}
 8009f9e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009fa0:	4b13      	ldr	r3, [pc, #76]	@ (8009ff0 <vTaskStartScheduler+0xb8>)
 8009fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009fa8:	4b12      	ldr	r3, [pc, #72]	@ (8009ff4 <vTaskStartScheduler+0xbc>)
 8009faa:	2201      	movs	r2, #1
 8009fac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009fae:	4b12      	ldr	r3, [pc, #72]	@ (8009ff8 <vTaskStartScheduler+0xc0>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009fb4:	f000 fbac 	bl	800a710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009fb8:	e00f      	b.n	8009fda <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc0:	d10b      	bne.n	8009fda <vTaskStartScheduler+0xa2>
	__asm volatile
 8009fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	60fb      	str	r3, [r7, #12]
}
 8009fd4:	bf00      	nop
 8009fd6:	bf00      	nop
 8009fd8:	e7fd      	b.n	8009fd6 <vTaskStartScheduler+0x9e>
}
 8009fda:	bf00      	nop
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	0800ba48 	.word	0x0800ba48
 8009fe8:	0800a381 	.word	0x0800a381
 8009fec:	20000c18 	.word	0x20000c18
 8009ff0:	20000c14 	.word	0x20000c14
 8009ff4:	20000c00 	.word	0x20000c00
 8009ff8:	20000bf8 	.word	0x20000bf8

08009ffc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a000:	4b04      	ldr	r3, [pc, #16]	@ (800a014 <vTaskSuspendAll+0x18>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3301      	adds	r3, #1
 800a006:	4a03      	ldr	r2, [pc, #12]	@ (800a014 <vTaskSuspendAll+0x18>)
 800a008:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a00a:	bf00      	nop
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	20000c1c 	.word	0x20000c1c

0800a018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a01e:	2300      	movs	r3, #0
 800a020:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a022:	2300      	movs	r3, #0
 800a024:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a026:	4b42      	ldr	r3, [pc, #264]	@ (800a130 <xTaskResumeAll+0x118>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10b      	bne.n	800a046 <xTaskResumeAll+0x2e>
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	603b      	str	r3, [r7, #0]
}
 800a040:	bf00      	nop
 800a042:	bf00      	nop
 800a044:	e7fd      	b.n	800a042 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a046:	f000 fc07 	bl	800a858 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a04a:	4b39      	ldr	r3, [pc, #228]	@ (800a130 <xTaskResumeAll+0x118>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3b01      	subs	r3, #1
 800a050:	4a37      	ldr	r2, [pc, #220]	@ (800a130 <xTaskResumeAll+0x118>)
 800a052:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a054:	4b36      	ldr	r3, [pc, #216]	@ (800a130 <xTaskResumeAll+0x118>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d161      	bne.n	800a120 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a05c:	4b35      	ldr	r3, [pc, #212]	@ (800a134 <xTaskResumeAll+0x11c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d05d      	beq.n	800a120 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a064:	e02e      	b.n	800a0c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a066:	4b34      	ldr	r3, [pc, #208]	@ (800a138 <xTaskResumeAll+0x120>)
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3318      	adds	r3, #24
 800a072:	4618      	mov	r0, r3
 800a074:	f7ff fd69 	bl	8009b4a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	3304      	adds	r3, #4
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7ff fd64 	bl	8009b4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a086:	2201      	movs	r2, #1
 800a088:	409a      	lsls	r2, r3
 800a08a:	4b2c      	ldr	r3, [pc, #176]	@ (800a13c <xTaskResumeAll+0x124>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4313      	orrs	r3, r2
 800a090:	4a2a      	ldr	r2, [pc, #168]	@ (800a13c <xTaskResumeAll+0x124>)
 800a092:	6013      	str	r3, [r2, #0]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a098:	4613      	mov	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4413      	add	r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4a27      	ldr	r2, [pc, #156]	@ (800a140 <xTaskResumeAll+0x128>)
 800a0a2:	441a      	add	r2, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	f7ff fcf0 	bl	8009a90 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0b4:	4b23      	ldr	r3, [pc, #140]	@ (800a144 <xTaskResumeAll+0x12c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d302      	bcc.n	800a0c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a0be:	4b22      	ldr	r3, [pc, #136]	@ (800a148 <xTaskResumeAll+0x130>)
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a138 <xTaskResumeAll+0x120>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1cc      	bne.n	800a066 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a0d2:	f000 fa0b 	bl	800a4ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a0d6:	4b1d      	ldr	r3, [pc, #116]	@ (800a14c <xTaskResumeAll+0x134>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d010      	beq.n	800a104 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a0e2:	f000 f837 	bl	800a154 <xTaskIncrementTick>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a0ec:	4b16      	ldr	r3, [pc, #88]	@ (800a148 <xTaskResumeAll+0x130>)
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1f1      	bne.n	800a0e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a0fe:	4b13      	ldr	r3, [pc, #76]	@ (800a14c <xTaskResumeAll+0x134>)
 800a100:	2200      	movs	r2, #0
 800a102:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a104:	4b10      	ldr	r3, [pc, #64]	@ (800a148 <xTaskResumeAll+0x130>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d009      	beq.n	800a120 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a10c:	2301      	movs	r3, #1
 800a10e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a110:	4b0f      	ldr	r3, [pc, #60]	@ (800a150 <xTaskResumeAll+0x138>)
 800a112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a116:	601a      	str	r2, [r3, #0]
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a120:	f000 fbcc 	bl	800a8bc <vPortExitCritical>

	return xAlreadyYielded;
 800a124:	68bb      	ldr	r3, [r7, #8]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20000c1c 	.word	0x20000c1c
 800a134:	20000bf4 	.word	0x20000bf4
 800a138:	20000bb4 	.word	0x20000bb4
 800a13c:	20000bfc 	.word	0x20000bfc
 800a140:	20000af8 	.word	0x20000af8
 800a144:	20000af4 	.word	0x20000af4
 800a148:	20000c08 	.word	0x20000c08
 800a14c:	20000c04 	.word	0x20000c04
 800a150:	e000ed04 	.word	0xe000ed04

0800a154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a15a:	2300      	movs	r3, #0
 800a15c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a15e:	4b4f      	ldr	r3, [pc, #316]	@ (800a29c <xTaskIncrementTick+0x148>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	f040 808f 	bne.w	800a286 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a168:	4b4d      	ldr	r3, [pc, #308]	@ (800a2a0 <xTaskIncrementTick+0x14c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3301      	adds	r3, #1
 800a16e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a170:	4a4b      	ldr	r2, [pc, #300]	@ (800a2a0 <xTaskIncrementTick+0x14c>)
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d121      	bne.n	800a1c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a17c:	4b49      	ldr	r3, [pc, #292]	@ (800a2a4 <xTaskIncrementTick+0x150>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00b      	beq.n	800a19e <xTaskIncrementTick+0x4a>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	603b      	str	r3, [r7, #0]
}
 800a198:	bf00      	nop
 800a19a:	bf00      	nop
 800a19c:	e7fd      	b.n	800a19a <xTaskIncrementTick+0x46>
 800a19e:	4b41      	ldr	r3, [pc, #260]	@ (800a2a4 <xTaskIncrementTick+0x150>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	60fb      	str	r3, [r7, #12]
 800a1a4:	4b40      	ldr	r3, [pc, #256]	@ (800a2a8 <xTaskIncrementTick+0x154>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a3e      	ldr	r2, [pc, #248]	@ (800a2a4 <xTaskIncrementTick+0x150>)
 800a1aa:	6013      	str	r3, [r2, #0]
 800a1ac:	4a3e      	ldr	r2, [pc, #248]	@ (800a2a8 <xTaskIncrementTick+0x154>)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6013      	str	r3, [r2, #0]
 800a1b2:	4b3e      	ldr	r3, [pc, #248]	@ (800a2ac <xTaskIncrementTick+0x158>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	4a3c      	ldr	r2, [pc, #240]	@ (800a2ac <xTaskIncrementTick+0x158>)
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	f000 f996 	bl	800a4ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1c0:	4b3b      	ldr	r3, [pc, #236]	@ (800a2b0 <xTaskIncrementTick+0x15c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d348      	bcc.n	800a25c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1ca:	4b36      	ldr	r3, [pc, #216]	@ (800a2a4 <xTaskIncrementTick+0x150>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d104      	bne.n	800a1de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1d4:	4b36      	ldr	r3, [pc, #216]	@ (800a2b0 <xTaskIncrementTick+0x15c>)
 800a1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1da:	601a      	str	r2, [r3, #0]
					break;
 800a1dc:	e03e      	b.n	800a25c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1de:	4b31      	ldr	r3, [pc, #196]	@ (800a2a4 <xTaskIncrementTick+0x150>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d203      	bcs.n	800a1fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a1f6:	4a2e      	ldr	r2, [pc, #184]	@ (800a2b0 <xTaskIncrementTick+0x15c>)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a1fc:	e02e      	b.n	800a25c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	3304      	adds	r3, #4
 800a202:	4618      	mov	r0, r3
 800a204:	f7ff fca1 	bl	8009b4a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d004      	beq.n	800a21a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	3318      	adds	r3, #24
 800a214:	4618      	mov	r0, r3
 800a216:	f7ff fc98 	bl	8009b4a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a21e:	2201      	movs	r2, #1
 800a220:	409a      	lsls	r2, r3
 800a222:	4b24      	ldr	r3, [pc, #144]	@ (800a2b4 <xTaskIncrementTick+0x160>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4313      	orrs	r3, r2
 800a228:	4a22      	ldr	r2, [pc, #136]	@ (800a2b4 <xTaskIncrementTick+0x160>)
 800a22a:	6013      	str	r3, [r2, #0]
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a230:	4613      	mov	r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	4a1f      	ldr	r2, [pc, #124]	@ (800a2b8 <xTaskIncrementTick+0x164>)
 800a23a:	441a      	add	r2, r3
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	3304      	adds	r3, #4
 800a240:	4619      	mov	r1, r3
 800a242:	4610      	mov	r0, r2
 800a244:	f7ff fc24 	bl	8009a90 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a24c:	4b1b      	ldr	r3, [pc, #108]	@ (800a2bc <xTaskIncrementTick+0x168>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a252:	429a      	cmp	r2, r3
 800a254:	d3b9      	bcc.n	800a1ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a256:	2301      	movs	r3, #1
 800a258:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a25a:	e7b6      	b.n	800a1ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a25c:	4b17      	ldr	r3, [pc, #92]	@ (800a2bc <xTaskIncrementTick+0x168>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a262:	4915      	ldr	r1, [pc, #84]	@ (800a2b8 <xTaskIncrementTick+0x164>)
 800a264:	4613      	mov	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	440b      	add	r3, r1
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d901      	bls.n	800a278 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a274:	2301      	movs	r3, #1
 800a276:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a278:	4b11      	ldr	r3, [pc, #68]	@ (800a2c0 <xTaskIncrementTick+0x16c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d007      	beq.n	800a290 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a280:	2301      	movs	r3, #1
 800a282:	617b      	str	r3, [r7, #20]
 800a284:	e004      	b.n	800a290 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a286:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c4 <xTaskIncrementTick+0x170>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3301      	adds	r3, #1
 800a28c:	4a0d      	ldr	r2, [pc, #52]	@ (800a2c4 <xTaskIncrementTick+0x170>)
 800a28e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a290:	697b      	ldr	r3, [r7, #20]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	20000c1c 	.word	0x20000c1c
 800a2a0:	20000bf8 	.word	0x20000bf8
 800a2a4:	20000bac 	.word	0x20000bac
 800a2a8:	20000bb0 	.word	0x20000bb0
 800a2ac:	20000c0c 	.word	0x20000c0c
 800a2b0:	20000c14 	.word	0x20000c14
 800a2b4:	20000bfc 	.word	0x20000bfc
 800a2b8:	20000af8 	.word	0x20000af8
 800a2bc:	20000af4 	.word	0x20000af4
 800a2c0:	20000c08 	.word	0x20000c08
 800a2c4:	20000c04 	.word	0x20000c04

0800a2c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a2ce:	4b27      	ldr	r3, [pc, #156]	@ (800a36c <vTaskSwitchContext+0xa4>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a2d6:	4b26      	ldr	r3, [pc, #152]	@ (800a370 <vTaskSwitchContext+0xa8>)
 800a2d8:	2201      	movs	r2, #1
 800a2da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a2dc:	e040      	b.n	800a360 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a2de:	4b24      	ldr	r3, [pc, #144]	@ (800a370 <vTaskSwitchContext+0xa8>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2e4:	4b23      	ldr	r3, [pc, #140]	@ (800a374 <vTaskSwitchContext+0xac>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	fab3 f383 	clz	r3, r3
 800a2f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a2f2:	7afb      	ldrb	r3, [r7, #11]
 800a2f4:	f1c3 031f 	rsb	r3, r3, #31
 800a2f8:	617b      	str	r3, [r7, #20]
 800a2fa:	491f      	ldr	r1, [pc, #124]	@ (800a378 <vTaskSwitchContext+0xb0>)
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	4613      	mov	r3, r2
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	4413      	add	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	440b      	add	r3, r1
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d10b      	bne.n	800a326 <vTaskSwitchContext+0x5e>
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	607b      	str	r3, [r7, #4]
}
 800a320:	bf00      	nop
 800a322:	bf00      	nop
 800a324:	e7fd      	b.n	800a322 <vTaskSwitchContext+0x5a>
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	4613      	mov	r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4a11      	ldr	r2, [pc, #68]	@ (800a378 <vTaskSwitchContext+0xb0>)
 800a332:	4413      	add	r3, r2
 800a334:	613b      	str	r3, [r7, #16]
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	605a      	str	r2, [r3, #4]
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	685a      	ldr	r2, [r3, #4]
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	3308      	adds	r3, #8
 800a348:	429a      	cmp	r2, r3
 800a34a:	d104      	bne.n	800a356 <vTaskSwitchContext+0x8e>
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	605a      	str	r2, [r3, #4]
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	4a07      	ldr	r2, [pc, #28]	@ (800a37c <vTaskSwitchContext+0xb4>)
 800a35e:	6013      	str	r3, [r2, #0]
}
 800a360:	bf00      	nop
 800a362:	371c      	adds	r7, #28
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	20000c1c 	.word	0x20000c1c
 800a370:	20000c08 	.word	0x20000c08
 800a374:	20000bfc 	.word	0x20000bfc
 800a378:	20000af8 	.word	0x20000af8
 800a37c:	20000af4 	.word	0x20000af4

0800a380 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a388:	f000 f852 	bl	800a430 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a38c:	4b06      	ldr	r3, [pc, #24]	@ (800a3a8 <prvIdleTask+0x28>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d9f9      	bls.n	800a388 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a394:	4b05      	ldr	r3, [pc, #20]	@ (800a3ac <prvIdleTask+0x2c>)
 800a396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a39a:	601a      	str	r2, [r3, #0]
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a3a4:	e7f0      	b.n	800a388 <prvIdleTask+0x8>
 800a3a6:	bf00      	nop
 800a3a8:	20000af8 	.word	0x20000af8
 800a3ac:	e000ed04 	.word	0xe000ed04

0800a3b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	607b      	str	r3, [r7, #4]
 800a3ba:	e00c      	b.n	800a3d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	4413      	add	r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	4a12      	ldr	r2, [pc, #72]	@ (800a410 <prvInitialiseTaskLists+0x60>)
 800a3c8:	4413      	add	r3, r2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7ff fb33 	bl	8009a36 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	607b      	str	r3, [r7, #4]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b06      	cmp	r3, #6
 800a3da:	d9ef      	bls.n	800a3bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a3dc:	480d      	ldr	r0, [pc, #52]	@ (800a414 <prvInitialiseTaskLists+0x64>)
 800a3de:	f7ff fb2a 	bl	8009a36 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a3e2:	480d      	ldr	r0, [pc, #52]	@ (800a418 <prvInitialiseTaskLists+0x68>)
 800a3e4:	f7ff fb27 	bl	8009a36 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a3e8:	480c      	ldr	r0, [pc, #48]	@ (800a41c <prvInitialiseTaskLists+0x6c>)
 800a3ea:	f7ff fb24 	bl	8009a36 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a3ee:	480c      	ldr	r0, [pc, #48]	@ (800a420 <prvInitialiseTaskLists+0x70>)
 800a3f0:	f7ff fb21 	bl	8009a36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a3f4:	480b      	ldr	r0, [pc, #44]	@ (800a424 <prvInitialiseTaskLists+0x74>)
 800a3f6:	f7ff fb1e 	bl	8009a36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a3fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a428 <prvInitialiseTaskLists+0x78>)
 800a3fc:	4a05      	ldr	r2, [pc, #20]	@ (800a414 <prvInitialiseTaskLists+0x64>)
 800a3fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a400:	4b0a      	ldr	r3, [pc, #40]	@ (800a42c <prvInitialiseTaskLists+0x7c>)
 800a402:	4a05      	ldr	r2, [pc, #20]	@ (800a418 <prvInitialiseTaskLists+0x68>)
 800a404:	601a      	str	r2, [r3, #0]
}
 800a406:	bf00      	nop
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	20000af8 	.word	0x20000af8
 800a414:	20000b84 	.word	0x20000b84
 800a418:	20000b98 	.word	0x20000b98
 800a41c:	20000bb4 	.word	0x20000bb4
 800a420:	20000bc8 	.word	0x20000bc8
 800a424:	20000be0 	.word	0x20000be0
 800a428:	20000bac 	.word	0x20000bac
 800a42c:	20000bb0 	.word	0x20000bb0

0800a430 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a436:	e019      	b.n	800a46c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a438:	f000 fa0e 	bl	800a858 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a43c:	4b10      	ldr	r3, [pc, #64]	@ (800a480 <prvCheckTasksWaitingTermination+0x50>)
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	3304      	adds	r3, #4
 800a448:	4618      	mov	r0, r3
 800a44a:	f7ff fb7e 	bl	8009b4a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a44e:	4b0d      	ldr	r3, [pc, #52]	@ (800a484 <prvCheckTasksWaitingTermination+0x54>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3b01      	subs	r3, #1
 800a454:	4a0b      	ldr	r2, [pc, #44]	@ (800a484 <prvCheckTasksWaitingTermination+0x54>)
 800a456:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a458:	4b0b      	ldr	r3, [pc, #44]	@ (800a488 <prvCheckTasksWaitingTermination+0x58>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	3b01      	subs	r3, #1
 800a45e:	4a0a      	ldr	r2, [pc, #40]	@ (800a488 <prvCheckTasksWaitingTermination+0x58>)
 800a460:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a462:	f000 fa2b 	bl	800a8bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f810 	bl	800a48c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a46c:	4b06      	ldr	r3, [pc, #24]	@ (800a488 <prvCheckTasksWaitingTermination+0x58>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1e1      	bne.n	800a438 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a474:	bf00      	nop
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	20000bc8 	.word	0x20000bc8
 800a484:	20000bf4 	.word	0x20000bf4
 800a488:	20000bdc 	.word	0x20000bdc

0800a48c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d108      	bne.n	800a4b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 fb86 	bl	800abb4 <vPortFree>
				vPortFree( pxTCB );
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fb83 	bl	800abb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a4ae:	e019      	b.n	800a4e4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d103      	bne.n	800a4c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fb7a 	bl	800abb4 <vPortFree>
	}
 800a4c0:	e010      	b.n	800a4e4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d00b      	beq.n	800a4e4 <prvDeleteTCB+0x58>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	60fb      	str	r3, [r7, #12]
}
 800a4de:	bf00      	nop
 800a4e0:	bf00      	nop
 800a4e2:	e7fd      	b.n	800a4e0 <prvDeleteTCB+0x54>
	}
 800a4e4:	bf00      	nop
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a524 <prvResetNextTaskUnblockTime+0x38>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d104      	bne.n	800a506 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a528 <prvResetNextTaskUnblockTime+0x3c>)
 800a4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a502:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a504:	e008      	b.n	800a518 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a506:	4b07      	ldr	r3, [pc, #28]	@ (800a524 <prvResetNextTaskUnblockTime+0x38>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	4a04      	ldr	r2, [pc, #16]	@ (800a528 <prvResetNextTaskUnblockTime+0x3c>)
 800a516:	6013      	str	r3, [r2, #0]
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	20000bac 	.word	0x20000bac
 800a528:	20000c14 	.word	0x20000c14

0800a52c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a536:	4b29      	ldr	r3, [pc, #164]	@ (800a5dc <prvAddCurrentTaskToDelayedList+0xb0>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a53c:	4b28      	ldr	r3, [pc, #160]	@ (800a5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3304      	adds	r3, #4
 800a542:	4618      	mov	r0, r3
 800a544:	f7ff fb01 	bl	8009b4a <uxListRemove>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10b      	bne.n	800a566 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a54e:	4b24      	ldr	r3, [pc, #144]	@ (800a5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a554:	2201      	movs	r2, #1
 800a556:	fa02 f303 	lsl.w	r3, r2, r3
 800a55a:	43da      	mvns	r2, r3
 800a55c:	4b21      	ldr	r3, [pc, #132]	@ (800a5e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4013      	ands	r3, r2
 800a562:	4a20      	ldr	r2, [pc, #128]	@ (800a5e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a564:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56c:	d10a      	bne.n	800a584 <prvAddCurrentTaskToDelayedList+0x58>
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d007      	beq.n	800a584 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a574:	4b1a      	ldr	r3, [pc, #104]	@ (800a5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3304      	adds	r3, #4
 800a57a:	4619      	mov	r1, r3
 800a57c:	481a      	ldr	r0, [pc, #104]	@ (800a5e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a57e:	f7ff fa87 	bl	8009a90 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a582:	e026      	b.n	800a5d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4413      	add	r3, r2
 800a58a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a58c:	4b14      	ldr	r3, [pc, #80]	@ (800a5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a594:	68ba      	ldr	r2, [r7, #8]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d209      	bcs.n	800a5b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a59c:	4b13      	ldr	r3, [pc, #76]	@ (800a5ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	4610      	mov	r0, r2
 800a5aa:	f7ff fa95 	bl	8009ad8 <vListInsert>
}
 800a5ae:	e010      	b.n	800a5d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5b0:	4b0f      	ldr	r3, [pc, #60]	@ (800a5f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	4610      	mov	r0, r2
 800a5be:	f7ff fa8b 	bl	8009ad8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a5c2:	4b0c      	ldr	r3, [pc, #48]	@ (800a5f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	68ba      	ldr	r2, [r7, #8]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d202      	bcs.n	800a5d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a5cc:	4a09      	ldr	r2, [pc, #36]	@ (800a5f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	6013      	str	r3, [r2, #0]
}
 800a5d2:	bf00      	nop
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20000bf8 	.word	0x20000bf8
 800a5e0:	20000af4 	.word	0x20000af4
 800a5e4:	20000bfc 	.word	0x20000bfc
 800a5e8:	20000be0 	.word	0x20000be0
 800a5ec:	20000bb0 	.word	0x20000bb0
 800a5f0:	20000bac 	.word	0x20000bac
 800a5f4:	20000c14 	.word	0x20000c14

0800a5f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3b04      	subs	r3, #4
 800a608:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	3b04      	subs	r3, #4
 800a616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f023 0201 	bic.w	r2, r3, #1
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3b04      	subs	r3, #4
 800a626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a628:	4a0c      	ldr	r2, [pc, #48]	@ (800a65c <pxPortInitialiseStack+0x64>)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3b14      	subs	r3, #20
 800a632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	3b04      	subs	r3, #4
 800a63e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f06f 0202 	mvn.w	r2, #2
 800a646:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	3b20      	subs	r3, #32
 800a64c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a64e:	68fb      	ldr	r3, [r7, #12]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr
 800a65c:	0800a661 	.word	0x0800a661

0800a660 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a66a:	4b13      	ldr	r3, [pc, #76]	@ (800a6b8 <prvTaskExitError+0x58>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a672:	d00b      	beq.n	800a68c <prvTaskExitError+0x2c>
	__asm volatile
 800a674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a678:	f383 8811 	msr	BASEPRI, r3
 800a67c:	f3bf 8f6f 	isb	sy
 800a680:	f3bf 8f4f 	dsb	sy
 800a684:	60fb      	str	r3, [r7, #12]
}
 800a686:	bf00      	nop
 800a688:	bf00      	nop
 800a68a:	e7fd      	b.n	800a688 <prvTaskExitError+0x28>
	__asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a690:	f383 8811 	msr	BASEPRI, r3
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	60bb      	str	r3, [r7, #8]
}
 800a69e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a6a0:	bf00      	nop
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d0fc      	beq.n	800a6a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a6a8:	bf00      	nop
 800a6aa:	bf00      	nop
 800a6ac:	3714      	adds	r7, #20
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
 800a6b6:	bf00      	nop
 800a6b8:	200000a0 	.word	0x200000a0
 800a6bc:	00000000 	.word	0x00000000

0800a6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a6c0:	4b07      	ldr	r3, [pc, #28]	@ (800a6e0 <pxCurrentTCBConst2>)
 800a6c2:	6819      	ldr	r1, [r3, #0]
 800a6c4:	6808      	ldr	r0, [r1, #0]
 800a6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ca:	f380 8809 	msr	PSP, r0
 800a6ce:	f3bf 8f6f 	isb	sy
 800a6d2:	f04f 0000 	mov.w	r0, #0
 800a6d6:	f380 8811 	msr	BASEPRI, r0
 800a6da:	4770      	bx	lr
 800a6dc:	f3af 8000 	nop.w

0800a6e0 <pxCurrentTCBConst2>:
 800a6e0:	20000af4 	.word	0x20000af4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6e4:	bf00      	nop
 800a6e6:	bf00      	nop

0800a6e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a6e8:	4808      	ldr	r0, [pc, #32]	@ (800a70c <prvPortStartFirstTask+0x24>)
 800a6ea:	6800      	ldr	r0, [r0, #0]
 800a6ec:	6800      	ldr	r0, [r0, #0]
 800a6ee:	f380 8808 	msr	MSP, r0
 800a6f2:	f04f 0000 	mov.w	r0, #0
 800a6f6:	f380 8814 	msr	CONTROL, r0
 800a6fa:	b662      	cpsie	i
 800a6fc:	b661      	cpsie	f
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	df00      	svc	0
 800a708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a70a:	bf00      	nop
 800a70c:	e000ed08 	.word	0xe000ed08

0800a710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a716:	4b47      	ldr	r3, [pc, #284]	@ (800a834 <xPortStartScheduler+0x124>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a47      	ldr	r2, [pc, #284]	@ (800a838 <xPortStartScheduler+0x128>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d10b      	bne.n	800a738 <xPortStartScheduler+0x28>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	613b      	str	r3, [r7, #16]
}
 800a732:	bf00      	nop
 800a734:	bf00      	nop
 800a736:	e7fd      	b.n	800a734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a738:	4b3e      	ldr	r3, [pc, #248]	@ (800a834 <xPortStartScheduler+0x124>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a3f      	ldr	r2, [pc, #252]	@ (800a83c <xPortStartScheduler+0x12c>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d10b      	bne.n	800a75a <xPortStartScheduler+0x4a>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	60fb      	str	r3, [r7, #12]
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop
 800a758:	e7fd      	b.n	800a756 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a75a:	4b39      	ldr	r3, [pc, #228]	@ (800a840 <xPortStartScheduler+0x130>)
 800a75c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	b2db      	uxtb	r3, r3
 800a764:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	22ff      	movs	r2, #255	@ 0xff
 800a76a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a774:	78fb      	ldrb	r3, [r7, #3]
 800a776:	b2db      	uxtb	r3, r3
 800a778:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	4b31      	ldr	r3, [pc, #196]	@ (800a844 <xPortStartScheduler+0x134>)
 800a780:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a782:	4b31      	ldr	r3, [pc, #196]	@ (800a848 <xPortStartScheduler+0x138>)
 800a784:	2207      	movs	r2, #7
 800a786:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a788:	e009      	b.n	800a79e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a78a:	4b2f      	ldr	r3, [pc, #188]	@ (800a848 <xPortStartScheduler+0x138>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	3b01      	subs	r3, #1
 800a790:	4a2d      	ldr	r2, [pc, #180]	@ (800a848 <xPortStartScheduler+0x138>)
 800a792:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a794:	78fb      	ldrb	r3, [r7, #3]
 800a796:	b2db      	uxtb	r3, r3
 800a798:	005b      	lsls	r3, r3, #1
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a79e:	78fb      	ldrb	r3, [r7, #3]
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7a6:	2b80      	cmp	r3, #128	@ 0x80
 800a7a8:	d0ef      	beq.n	800a78a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a7aa:	4b27      	ldr	r3, [pc, #156]	@ (800a848 <xPortStartScheduler+0x138>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f1c3 0307 	rsb	r3, r3, #7
 800a7b2:	2b04      	cmp	r3, #4
 800a7b4:	d00b      	beq.n	800a7ce <xPortStartScheduler+0xbe>
	__asm volatile
 800a7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ba:	f383 8811 	msr	BASEPRI, r3
 800a7be:	f3bf 8f6f 	isb	sy
 800a7c2:	f3bf 8f4f 	dsb	sy
 800a7c6:	60bb      	str	r3, [r7, #8]
}
 800a7c8:	bf00      	nop
 800a7ca:	bf00      	nop
 800a7cc:	e7fd      	b.n	800a7ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a7ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a848 <xPortStartScheduler+0x138>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	021b      	lsls	r3, r3, #8
 800a7d4:	4a1c      	ldr	r2, [pc, #112]	@ (800a848 <xPortStartScheduler+0x138>)
 800a7d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a7d8:	4b1b      	ldr	r3, [pc, #108]	@ (800a848 <xPortStartScheduler+0x138>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a7e0:	4a19      	ldr	r2, [pc, #100]	@ (800a848 <xPortStartScheduler+0x138>)
 800a7e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	b2da      	uxtb	r2, r3
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a7ec:	4b17      	ldr	r3, [pc, #92]	@ (800a84c <xPortStartScheduler+0x13c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a16      	ldr	r2, [pc, #88]	@ (800a84c <xPortStartScheduler+0x13c>)
 800a7f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a7f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7f8:	4b14      	ldr	r3, [pc, #80]	@ (800a84c <xPortStartScheduler+0x13c>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a13      	ldr	r2, [pc, #76]	@ (800a84c <xPortStartScheduler+0x13c>)
 800a7fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a802:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a804:	f000 f8da 	bl	800a9bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a808:	4b11      	ldr	r3, [pc, #68]	@ (800a850 <xPortStartScheduler+0x140>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a80e:	f000 f8f9 	bl	800aa04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a812:	4b10      	ldr	r3, [pc, #64]	@ (800a854 <xPortStartScheduler+0x144>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a0f      	ldr	r2, [pc, #60]	@ (800a854 <xPortStartScheduler+0x144>)
 800a818:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a81c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a81e:	f7ff ff63 	bl	800a6e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a822:	f7ff fd51 	bl	800a2c8 <vTaskSwitchContext>
	prvTaskExitError();
 800a826:	f7ff ff1b 	bl	800a660 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3718      	adds	r7, #24
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	e000ed00 	.word	0xe000ed00
 800a838:	410fc271 	.word	0x410fc271
 800a83c:	410fc270 	.word	0x410fc270
 800a840:	e000e400 	.word	0xe000e400
 800a844:	20000c20 	.word	0x20000c20
 800a848:	20000c24 	.word	0x20000c24
 800a84c:	e000ed20 	.word	0xe000ed20
 800a850:	200000a0 	.word	0x200000a0
 800a854:	e000ef34 	.word	0xe000ef34

0800a858 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
	__asm volatile
 800a85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a862:	f383 8811 	msr	BASEPRI, r3
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	607b      	str	r3, [r7, #4]
}
 800a870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a872:	4b10      	ldr	r3, [pc, #64]	@ (800a8b4 <vPortEnterCritical+0x5c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	3301      	adds	r3, #1
 800a878:	4a0e      	ldr	r2, [pc, #56]	@ (800a8b4 <vPortEnterCritical+0x5c>)
 800a87a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a87c:	4b0d      	ldr	r3, [pc, #52]	@ (800a8b4 <vPortEnterCritical+0x5c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d110      	bne.n	800a8a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a884:	4b0c      	ldr	r3, [pc, #48]	@ (800a8b8 <vPortEnterCritical+0x60>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00b      	beq.n	800a8a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	603b      	str	r3, [r7, #0]
}
 800a8a0:	bf00      	nop
 800a8a2:	bf00      	nop
 800a8a4:	e7fd      	b.n	800a8a2 <vPortEnterCritical+0x4a>
	}
}
 800a8a6:	bf00      	nop
 800a8a8:	370c      	adds	r7, #12
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	200000a0 	.word	0x200000a0
 800a8b8:	e000ed04 	.word	0xe000ed04

0800a8bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a8c2:	4b12      	ldr	r3, [pc, #72]	@ (800a90c <vPortExitCritical+0x50>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10b      	bne.n	800a8e2 <vPortExitCritical+0x26>
	__asm volatile
 800a8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ce:	f383 8811 	msr	BASEPRI, r3
 800a8d2:	f3bf 8f6f 	isb	sy
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	607b      	str	r3, [r7, #4]
}
 800a8dc:	bf00      	nop
 800a8de:	bf00      	nop
 800a8e0:	e7fd      	b.n	800a8de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a8e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a90c <vPortExitCritical+0x50>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	4a08      	ldr	r2, [pc, #32]	@ (800a90c <vPortExitCritical+0x50>)
 800a8ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a8ec:	4b07      	ldr	r3, [pc, #28]	@ (800a90c <vPortExitCritical+0x50>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d105      	bne.n	800a900 <vPortExitCritical+0x44>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a8fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr
 800a90c:	200000a0 	.word	0x200000a0

0800a910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a910:	f3ef 8009 	mrs	r0, PSP
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	4b15      	ldr	r3, [pc, #84]	@ (800a970 <pxCurrentTCBConst>)
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	f01e 0f10 	tst.w	lr, #16
 800a920:	bf08      	it	eq
 800a922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92a:	6010      	str	r0, [r2, #0]
 800a92c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a930:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a934:	f380 8811 	msr	BASEPRI, r0
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f7ff fcc2 	bl	800a2c8 <vTaskSwitchContext>
 800a944:	f04f 0000 	mov.w	r0, #0
 800a948:	f380 8811 	msr	BASEPRI, r0
 800a94c:	bc09      	pop	{r0, r3}
 800a94e:	6819      	ldr	r1, [r3, #0]
 800a950:	6808      	ldr	r0, [r1, #0]
 800a952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a956:	f01e 0f10 	tst.w	lr, #16
 800a95a:	bf08      	it	eq
 800a95c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a960:	f380 8809 	msr	PSP, r0
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	f3af 8000 	nop.w

0800a970 <pxCurrentTCBConst>:
 800a970:	20000af4 	.word	0x20000af4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a974:	bf00      	nop
 800a976:	bf00      	nop

0800a978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	607b      	str	r3, [r7, #4]
}
 800a990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a992:	f7ff fbdf 	bl	800a154 <xTaskIncrementTick>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d003      	beq.n	800a9a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a99c:	4b06      	ldr	r3, [pc, #24]	@ (800a9b8 <SysTick_Handler+0x40>)
 800a99e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	f383 8811 	msr	BASEPRI, r3
}
 800a9ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a9b0:	bf00      	nop
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	e000ed04 	.word	0xe000ed04

0800a9bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a9bc:	b480      	push	{r7}
 800a9be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a9c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a9f0 <vPortSetupTimerInterrupt+0x34>)
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a9c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a9f4 <vPortSetupTimerInterrupt+0x38>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a9f8 <vPortSetupTimerInterrupt+0x3c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a0a      	ldr	r2, [pc, #40]	@ (800a9fc <vPortSetupTimerInterrupt+0x40>)
 800a9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9d6:	099b      	lsrs	r3, r3, #6
 800a9d8:	4a09      	ldr	r2, [pc, #36]	@ (800aa00 <vPortSetupTimerInterrupt+0x44>)
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a9de:	4b04      	ldr	r3, [pc, #16]	@ (800a9f0 <vPortSetupTimerInterrupt+0x34>)
 800a9e0:	2207      	movs	r2, #7
 800a9e2:	601a      	str	r2, [r3, #0]
}
 800a9e4:	bf00      	nop
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	e000e010 	.word	0xe000e010
 800a9f4:	e000e018 	.word	0xe000e018
 800a9f8:	20000094 	.word	0x20000094
 800a9fc:	10624dd3 	.word	0x10624dd3
 800aa00:	e000e014 	.word	0xe000e014

0800aa04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aa14 <vPortEnableVFP+0x10>
 800aa08:	6801      	ldr	r1, [r0, #0]
 800aa0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aa0e:	6001      	str	r1, [r0, #0]
 800aa10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa12:	bf00      	nop
 800aa14:	e000ed88 	.word	0xe000ed88

0800aa18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b08a      	sub	sp, #40	@ 0x28
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa20:	2300      	movs	r3, #0
 800aa22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa24:	f7ff faea 	bl	8009ffc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa28:	4b5c      	ldr	r3, [pc, #368]	@ (800ab9c <pvPortMalloc+0x184>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d101      	bne.n	800aa34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa30:	f000 f924 	bl	800ac7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa34:	4b5a      	ldr	r3, [pc, #360]	@ (800aba0 <pvPortMalloc+0x188>)
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f040 8095 	bne.w	800ab6c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d01e      	beq.n	800aa86 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800aa48:	2208      	movs	r2, #8
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f003 0307 	and.w	r3, r3, #7
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d015      	beq.n	800aa86 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f023 0307 	bic.w	r3, r3, #7
 800aa60:	3308      	adds	r3, #8
 800aa62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f003 0307 	and.w	r3, r3, #7
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00b      	beq.n	800aa86 <pvPortMalloc+0x6e>
	__asm volatile
 800aa6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	617b      	str	r3, [r7, #20]
}
 800aa80:	bf00      	nop
 800aa82:	bf00      	nop
 800aa84:	e7fd      	b.n	800aa82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d06f      	beq.n	800ab6c <pvPortMalloc+0x154>
 800aa8c:	4b45      	ldr	r3, [pc, #276]	@ (800aba4 <pvPortMalloc+0x18c>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d86a      	bhi.n	800ab6c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa96:	4b44      	ldr	r3, [pc, #272]	@ (800aba8 <pvPortMalloc+0x190>)
 800aa98:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa9a:	4b43      	ldr	r3, [pc, #268]	@ (800aba8 <pvPortMalloc+0x190>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaa0:	e004      	b.n	800aaac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d903      	bls.n	800aabe <pvPortMalloc+0xa6>
 800aab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1f1      	bne.n	800aaa2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aabe:	4b37      	ldr	r3, [pc, #220]	@ (800ab9c <pvPortMalloc+0x184>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d051      	beq.n	800ab6c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aac8:	6a3b      	ldr	r3, [r7, #32]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2208      	movs	r2, #8
 800aace:	4413      	add	r3, r2
 800aad0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	6a3b      	ldr	r3, [r7, #32]
 800aad8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	1ad2      	subs	r2, r2, r3
 800aae2:	2308      	movs	r3, #8
 800aae4:	005b      	lsls	r3, r3, #1
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d920      	bls.n	800ab2c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aaea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4413      	add	r3, r2
 800aaf0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	f003 0307 	and.w	r3, r3, #7
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00b      	beq.n	800ab14 <pvPortMalloc+0xfc>
	__asm volatile
 800aafc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	613b      	str	r3, [r7, #16]
}
 800ab0e:	bf00      	nop
 800ab10:	bf00      	nop
 800ab12:	e7fd      	b.n	800ab10 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	1ad2      	subs	r2, r2, r3
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab26:	69b8      	ldr	r0, [r7, #24]
 800ab28:	f000 f90a 	bl	800ad40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab2c:	4b1d      	ldr	r3, [pc, #116]	@ (800aba4 <pvPortMalloc+0x18c>)
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	4a1b      	ldr	r2, [pc, #108]	@ (800aba4 <pvPortMalloc+0x18c>)
 800ab38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab3a:	4b1a      	ldr	r3, [pc, #104]	@ (800aba4 <pvPortMalloc+0x18c>)
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	4b1b      	ldr	r3, [pc, #108]	@ (800abac <pvPortMalloc+0x194>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d203      	bcs.n	800ab4e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab46:	4b17      	ldr	r3, [pc, #92]	@ (800aba4 <pvPortMalloc+0x18c>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a18      	ldr	r2, [pc, #96]	@ (800abac <pvPortMalloc+0x194>)
 800ab4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab50:	685a      	ldr	r2, [r3, #4]
 800ab52:	4b13      	ldr	r3, [pc, #76]	@ (800aba0 <pvPortMalloc+0x188>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	431a      	orrs	r2, r3
 800ab58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab62:	4b13      	ldr	r3, [pc, #76]	@ (800abb0 <pvPortMalloc+0x198>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	3301      	adds	r3, #1
 800ab68:	4a11      	ldr	r2, [pc, #68]	@ (800abb0 <pvPortMalloc+0x198>)
 800ab6a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab6c:	f7ff fa54 	bl	800a018 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	f003 0307 	and.w	r3, r3, #7
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00b      	beq.n	800ab92 <pvPortMalloc+0x17a>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	60fb      	str	r3, [r7, #12]
}
 800ab8c:	bf00      	nop
 800ab8e:	bf00      	nop
 800ab90:	e7fd      	b.n	800ab8e <pvPortMalloc+0x176>
	return pvReturn;
 800ab92:	69fb      	ldr	r3, [r7, #28]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3728      	adds	r7, #40	@ 0x28
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	20004830 	.word	0x20004830
 800aba0:	20004844 	.word	0x20004844
 800aba4:	20004834 	.word	0x20004834
 800aba8:	20004828 	.word	0x20004828
 800abac:	20004838 	.word	0x20004838
 800abb0:	2000483c 	.word	0x2000483c

0800abb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d04f      	beq.n	800ac66 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800abc6:	2308      	movs	r3, #8
 800abc8:	425b      	negs	r3, r3
 800abca:	697a      	ldr	r2, [r7, #20]
 800abcc:	4413      	add	r3, r2
 800abce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	4b25      	ldr	r3, [pc, #148]	@ (800ac70 <vPortFree+0xbc>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4013      	ands	r3, r2
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10b      	bne.n	800abfa <vPortFree+0x46>
	__asm volatile
 800abe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	60fb      	str	r3, [r7, #12]
}
 800abf4:	bf00      	nop
 800abf6:	bf00      	nop
 800abf8:	e7fd      	b.n	800abf6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00b      	beq.n	800ac1a <vPortFree+0x66>
	__asm volatile
 800ac02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	60bb      	str	r3, [r7, #8]
}
 800ac14:	bf00      	nop
 800ac16:	bf00      	nop
 800ac18:	e7fd      	b.n	800ac16 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	685a      	ldr	r2, [r3, #4]
 800ac1e:	4b14      	ldr	r3, [pc, #80]	@ (800ac70 <vPortFree+0xbc>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4013      	ands	r3, r2
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d01e      	beq.n	800ac66 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d11a      	bne.n	800ac66 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	4b0e      	ldr	r3, [pc, #56]	@ (800ac70 <vPortFree+0xbc>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	43db      	mvns	r3, r3
 800ac3a:	401a      	ands	r2, r3
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac40:	f7ff f9dc 	bl	8009ffc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	685a      	ldr	r2, [r3, #4]
 800ac48:	4b0a      	ldr	r3, [pc, #40]	@ (800ac74 <vPortFree+0xc0>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	4a09      	ldr	r2, [pc, #36]	@ (800ac74 <vPortFree+0xc0>)
 800ac50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac52:	6938      	ldr	r0, [r7, #16]
 800ac54:	f000 f874 	bl	800ad40 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac58:	4b07      	ldr	r3, [pc, #28]	@ (800ac78 <vPortFree+0xc4>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	4a06      	ldr	r2, [pc, #24]	@ (800ac78 <vPortFree+0xc4>)
 800ac60:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac62:	f7ff f9d9 	bl	800a018 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac66:	bf00      	nop
 800ac68:	3718      	adds	r7, #24
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	bf00      	nop
 800ac70:	20004844 	.word	0x20004844
 800ac74:	20004834 	.word	0x20004834
 800ac78:	20004840 	.word	0x20004840

0800ac7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac82:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ac86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac88:	4b27      	ldr	r3, [pc, #156]	@ (800ad28 <prvHeapInit+0xac>)
 800ac8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f003 0307 	and.w	r3, r3, #7
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00c      	beq.n	800acb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	3307      	adds	r3, #7
 800ac9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f023 0307 	bic.w	r3, r3, #7
 800aca2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aca4:	68ba      	ldr	r2, [r7, #8]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	4a1f      	ldr	r2, [pc, #124]	@ (800ad28 <prvHeapInit+0xac>)
 800acac:	4413      	add	r3, r2
 800acae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800acb4:	4a1d      	ldr	r2, [pc, #116]	@ (800ad2c <prvHeapInit+0xb0>)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800acba:	4b1c      	ldr	r3, [pc, #112]	@ (800ad2c <prvHeapInit+0xb0>)
 800acbc:	2200      	movs	r2, #0
 800acbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	4413      	add	r3, r2
 800acc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800acc8:	2208      	movs	r2, #8
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	1a9b      	subs	r3, r3, r2
 800acce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f023 0307 	bic.w	r3, r3, #7
 800acd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	4a15      	ldr	r2, [pc, #84]	@ (800ad30 <prvHeapInit+0xb4>)
 800acdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800acde:	4b14      	ldr	r3, [pc, #80]	@ (800ad30 <prvHeapInit+0xb4>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2200      	movs	r2, #0
 800ace4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ace6:	4b12      	ldr	r3, [pc, #72]	@ (800ad30 <prvHeapInit+0xb4>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2200      	movs	r2, #0
 800acec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	1ad2      	subs	r2, r2, r3
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800acfc:	4b0c      	ldr	r3, [pc, #48]	@ (800ad30 <prvHeapInit+0xb4>)
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	4a0a      	ldr	r2, [pc, #40]	@ (800ad34 <prvHeapInit+0xb8>)
 800ad0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	4a09      	ldr	r2, [pc, #36]	@ (800ad38 <prvHeapInit+0xbc>)
 800ad12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ad14:	4b09      	ldr	r3, [pc, #36]	@ (800ad3c <prvHeapInit+0xc0>)
 800ad16:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ad1a:	601a      	str	r2, [r3, #0]
}
 800ad1c:	bf00      	nop
 800ad1e:	3714      	adds	r7, #20
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	20000c28 	.word	0x20000c28
 800ad2c:	20004828 	.word	0x20004828
 800ad30:	20004830 	.word	0x20004830
 800ad34:	20004838 	.word	0x20004838
 800ad38:	20004834 	.word	0x20004834
 800ad3c:	20004844 	.word	0x20004844

0800ad40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad40:	b480      	push	{r7}
 800ad42:	b085      	sub	sp, #20
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad48:	4b28      	ldr	r3, [pc, #160]	@ (800adec <prvInsertBlockIntoFreeList+0xac>)
 800ad4a:	60fb      	str	r3, [r7, #12]
 800ad4c:	e002      	b.n	800ad54 <prvInsertBlockIntoFreeList+0x14>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	60fb      	str	r3, [r7, #12]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d8f7      	bhi.n	800ad4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	68ba      	ldr	r2, [r7, #8]
 800ad68:	4413      	add	r3, r2
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d108      	bne.n	800ad82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	685a      	ldr	r2, [r3, #4]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	441a      	add	r2, r3
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	441a      	add	r2, r3
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d118      	bne.n	800adc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	4b15      	ldr	r3, [pc, #84]	@ (800adf0 <prvInsertBlockIntoFreeList+0xb0>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d00d      	beq.n	800adbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685a      	ldr	r2, [r3, #4]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	441a      	add	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	601a      	str	r2, [r3, #0]
 800adbc:	e008      	b.n	800add0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800adbe:	4b0c      	ldr	r3, [pc, #48]	@ (800adf0 <prvInsertBlockIntoFreeList+0xb0>)
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	e003      	b.n	800add0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	429a      	cmp	r2, r3
 800add6:	d002      	beq.n	800adde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adde:	bf00      	nop
 800ade0:	3714      	adds	r7, #20
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	20004828 	.word	0x20004828
 800adf0:	20004830 	.word	0x20004830

0800adf4 <memset>:
 800adf4:	4402      	add	r2, r0
 800adf6:	4603      	mov	r3, r0
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d100      	bne.n	800adfe <memset+0xa>
 800adfc:	4770      	bx	lr
 800adfe:	f803 1b01 	strb.w	r1, [r3], #1
 800ae02:	e7f9      	b.n	800adf8 <memset+0x4>

0800ae04 <__errno>:
 800ae04:	4b01      	ldr	r3, [pc, #4]	@ (800ae0c <__errno+0x8>)
 800ae06:	6818      	ldr	r0, [r3, #0]
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	200000a4 	.word	0x200000a4

0800ae10 <__libc_init_array>:
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	4d0d      	ldr	r5, [pc, #52]	@ (800ae48 <__libc_init_array+0x38>)
 800ae14:	4c0d      	ldr	r4, [pc, #52]	@ (800ae4c <__libc_init_array+0x3c>)
 800ae16:	1b64      	subs	r4, r4, r5
 800ae18:	10a4      	asrs	r4, r4, #2
 800ae1a:	2600      	movs	r6, #0
 800ae1c:	42a6      	cmp	r6, r4
 800ae1e:	d109      	bne.n	800ae34 <__libc_init_array+0x24>
 800ae20:	4d0b      	ldr	r5, [pc, #44]	@ (800ae50 <__libc_init_array+0x40>)
 800ae22:	4c0c      	ldr	r4, [pc, #48]	@ (800ae54 <__libc_init_array+0x44>)
 800ae24:	f000 fd8a 	bl	800b93c <_init>
 800ae28:	1b64      	subs	r4, r4, r5
 800ae2a:	10a4      	asrs	r4, r4, #2
 800ae2c:	2600      	movs	r6, #0
 800ae2e:	42a6      	cmp	r6, r4
 800ae30:	d105      	bne.n	800ae3e <__libc_init_array+0x2e>
 800ae32:	bd70      	pop	{r4, r5, r6, pc}
 800ae34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae38:	4798      	blx	r3
 800ae3a:	3601      	adds	r6, #1
 800ae3c:	e7ee      	b.n	800ae1c <__libc_init_array+0xc>
 800ae3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae42:	4798      	blx	r3
 800ae44:	3601      	adds	r6, #1
 800ae46:	e7f2      	b.n	800ae2e <__libc_init_array+0x1e>
 800ae48:	0800baf0 	.word	0x0800baf0
 800ae4c:	0800baf0 	.word	0x0800baf0
 800ae50:	0800baf0 	.word	0x0800baf0
 800ae54:	0800baf4 	.word	0x0800baf4

0800ae58 <atan2>:
 800ae58:	f000 baf2 	b.w	800b440 <__ieee754_atan2>
 800ae5c:	0000      	movs	r0, r0
	...

0800ae60 <log>:
 800ae60:	b538      	push	{r3, r4, r5, lr}
 800ae62:	ed2d 8b02 	vpush	{d8}
 800ae66:	ec55 4b10 	vmov	r4, r5, d0
 800ae6a:	f000 fbb1 	bl	800b5d0 <__ieee754_log>
 800ae6e:	4622      	mov	r2, r4
 800ae70:	462b      	mov	r3, r5
 800ae72:	4620      	mov	r0, r4
 800ae74:	4629      	mov	r1, r5
 800ae76:	eeb0 8a40 	vmov.f32	s16, s0
 800ae7a:	eef0 8a60 	vmov.f32	s17, s1
 800ae7e:	f7f5 fe05 	bl	8000a8c <__aeabi_dcmpun>
 800ae82:	b998      	cbnz	r0, 800aeac <log+0x4c>
 800ae84:	2200      	movs	r2, #0
 800ae86:	2300      	movs	r3, #0
 800ae88:	4620      	mov	r0, r4
 800ae8a:	4629      	mov	r1, r5
 800ae8c:	f7f5 fdf4 	bl	8000a78 <__aeabi_dcmpgt>
 800ae90:	b960      	cbnz	r0, 800aeac <log+0x4c>
 800ae92:	2200      	movs	r2, #0
 800ae94:	2300      	movs	r3, #0
 800ae96:	4620      	mov	r0, r4
 800ae98:	4629      	mov	r1, r5
 800ae9a:	f7f5 fdc5 	bl	8000a28 <__aeabi_dcmpeq>
 800ae9e:	b160      	cbz	r0, 800aeba <log+0x5a>
 800aea0:	f7ff ffb0 	bl	800ae04 <__errno>
 800aea4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800aed0 <log+0x70>
 800aea8:	2322      	movs	r3, #34	@ 0x22
 800aeaa:	6003      	str	r3, [r0, #0]
 800aeac:	eeb0 0a48 	vmov.f32	s0, s16
 800aeb0:	eef0 0a68 	vmov.f32	s1, s17
 800aeb4:	ecbd 8b02 	vpop	{d8}
 800aeb8:	bd38      	pop	{r3, r4, r5, pc}
 800aeba:	f7ff ffa3 	bl	800ae04 <__errno>
 800aebe:	ecbd 8b02 	vpop	{d8}
 800aec2:	2321      	movs	r3, #33	@ 0x21
 800aec4:	6003      	str	r3, [r0, #0]
 800aec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aeca:	4803      	ldr	r0, [pc, #12]	@ (800aed8 <log+0x78>)
 800aecc:	f000 b9d4 	b.w	800b278 <nan>
 800aed0:	00000000 	.word	0x00000000
 800aed4:	fff00000 	.word	0xfff00000
 800aed8:	0800ba70 	.word	0x0800ba70

0800aedc <sqrt>:
 800aedc:	b538      	push	{r3, r4, r5, lr}
 800aede:	ed2d 8b02 	vpush	{d8}
 800aee2:	ec55 4b10 	vmov	r4, r5, d0
 800aee6:	f000 f9cf 	bl	800b288 <__ieee754_sqrt>
 800aeea:	4622      	mov	r2, r4
 800aeec:	462b      	mov	r3, r5
 800aeee:	4620      	mov	r0, r4
 800aef0:	4629      	mov	r1, r5
 800aef2:	eeb0 8a40 	vmov.f32	s16, s0
 800aef6:	eef0 8a60 	vmov.f32	s17, s1
 800aefa:	f7f5 fdc7 	bl	8000a8c <__aeabi_dcmpun>
 800aefe:	b990      	cbnz	r0, 800af26 <sqrt+0x4a>
 800af00:	2200      	movs	r2, #0
 800af02:	2300      	movs	r3, #0
 800af04:	4620      	mov	r0, r4
 800af06:	4629      	mov	r1, r5
 800af08:	f7f5 fd98 	bl	8000a3c <__aeabi_dcmplt>
 800af0c:	b158      	cbz	r0, 800af26 <sqrt+0x4a>
 800af0e:	f7ff ff79 	bl	800ae04 <__errno>
 800af12:	2321      	movs	r3, #33	@ 0x21
 800af14:	6003      	str	r3, [r0, #0]
 800af16:	2200      	movs	r2, #0
 800af18:	2300      	movs	r3, #0
 800af1a:	4610      	mov	r0, r2
 800af1c:	4619      	mov	r1, r3
 800af1e:	f7f5 fc45 	bl	80007ac <__aeabi_ddiv>
 800af22:	ec41 0b18 	vmov	d8, r0, r1
 800af26:	eeb0 0a48 	vmov.f32	s0, s16
 800af2a:	eef0 0a68 	vmov.f32	s1, s17
 800af2e:	ecbd 8b02 	vpop	{d8}
 800af32:	bd38      	pop	{r3, r4, r5, pc}
 800af34:	0000      	movs	r0, r0
	...

0800af38 <atan>:
 800af38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3c:	ec55 4b10 	vmov	r4, r5, d0
 800af40:	4bbf      	ldr	r3, [pc, #764]	@ (800b240 <atan+0x308>)
 800af42:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800af46:	429e      	cmp	r6, r3
 800af48:	46ab      	mov	fp, r5
 800af4a:	d918      	bls.n	800af7e <atan+0x46>
 800af4c:	4bbd      	ldr	r3, [pc, #756]	@ (800b244 <atan+0x30c>)
 800af4e:	429e      	cmp	r6, r3
 800af50:	d801      	bhi.n	800af56 <atan+0x1e>
 800af52:	d109      	bne.n	800af68 <atan+0x30>
 800af54:	b144      	cbz	r4, 800af68 <atan+0x30>
 800af56:	4622      	mov	r2, r4
 800af58:	462b      	mov	r3, r5
 800af5a:	4620      	mov	r0, r4
 800af5c:	4629      	mov	r1, r5
 800af5e:	f7f5 f945 	bl	80001ec <__adddf3>
 800af62:	4604      	mov	r4, r0
 800af64:	460d      	mov	r5, r1
 800af66:	e006      	b.n	800af76 <atan+0x3e>
 800af68:	f1bb 0f00 	cmp.w	fp, #0
 800af6c:	f340 812b 	ble.w	800b1c6 <atan+0x28e>
 800af70:	a597      	add	r5, pc, #604	@ (adr r5, 800b1d0 <atan+0x298>)
 800af72:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af76:	ec45 4b10 	vmov	d0, r4, r5
 800af7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7e:	4bb2      	ldr	r3, [pc, #712]	@ (800b248 <atan+0x310>)
 800af80:	429e      	cmp	r6, r3
 800af82:	d813      	bhi.n	800afac <atan+0x74>
 800af84:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800af88:	429e      	cmp	r6, r3
 800af8a:	d80c      	bhi.n	800afa6 <atan+0x6e>
 800af8c:	a392      	add	r3, pc, #584	@ (adr r3, 800b1d8 <atan+0x2a0>)
 800af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af92:	4620      	mov	r0, r4
 800af94:	4629      	mov	r1, r5
 800af96:	f7f5 f929 	bl	80001ec <__adddf3>
 800af9a:	4bac      	ldr	r3, [pc, #688]	@ (800b24c <atan+0x314>)
 800af9c:	2200      	movs	r2, #0
 800af9e:	f7f5 fd6b 	bl	8000a78 <__aeabi_dcmpgt>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d1e7      	bne.n	800af76 <atan+0x3e>
 800afa6:	f04f 3aff 	mov.w	sl, #4294967295
 800afaa:	e029      	b.n	800b000 <atan+0xc8>
 800afac:	f000 f95c 	bl	800b268 <fabs>
 800afb0:	4ba7      	ldr	r3, [pc, #668]	@ (800b250 <atan+0x318>)
 800afb2:	429e      	cmp	r6, r3
 800afb4:	ec55 4b10 	vmov	r4, r5, d0
 800afb8:	f200 80bc 	bhi.w	800b134 <atan+0x1fc>
 800afbc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800afc0:	429e      	cmp	r6, r3
 800afc2:	f200 809e 	bhi.w	800b102 <atan+0x1ca>
 800afc6:	4622      	mov	r2, r4
 800afc8:	462b      	mov	r3, r5
 800afca:	4620      	mov	r0, r4
 800afcc:	4629      	mov	r1, r5
 800afce:	f7f5 f90d 	bl	80001ec <__adddf3>
 800afd2:	4b9e      	ldr	r3, [pc, #632]	@ (800b24c <atan+0x314>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	f7f5 f907 	bl	80001e8 <__aeabi_dsub>
 800afda:	2200      	movs	r2, #0
 800afdc:	4606      	mov	r6, r0
 800afde:	460f      	mov	r7, r1
 800afe0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800afe4:	4620      	mov	r0, r4
 800afe6:	4629      	mov	r1, r5
 800afe8:	f7f5 f900 	bl	80001ec <__adddf3>
 800afec:	4602      	mov	r2, r0
 800afee:	460b      	mov	r3, r1
 800aff0:	4630      	mov	r0, r6
 800aff2:	4639      	mov	r1, r7
 800aff4:	f7f5 fbda 	bl	80007ac <__aeabi_ddiv>
 800aff8:	f04f 0a00 	mov.w	sl, #0
 800affc:	4604      	mov	r4, r0
 800affe:	460d      	mov	r5, r1
 800b000:	4622      	mov	r2, r4
 800b002:	462b      	mov	r3, r5
 800b004:	4620      	mov	r0, r4
 800b006:	4629      	mov	r1, r5
 800b008:	f7f5 faa6 	bl	8000558 <__aeabi_dmul>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4680      	mov	r8, r0
 800b012:	4689      	mov	r9, r1
 800b014:	f7f5 faa0 	bl	8000558 <__aeabi_dmul>
 800b018:	a371      	add	r3, pc, #452	@ (adr r3, 800b1e0 <atan+0x2a8>)
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	4606      	mov	r6, r0
 800b020:	460f      	mov	r7, r1
 800b022:	f7f5 fa99 	bl	8000558 <__aeabi_dmul>
 800b026:	a370      	add	r3, pc, #448	@ (adr r3, 800b1e8 <atan+0x2b0>)
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	f7f5 f8de 	bl	80001ec <__adddf3>
 800b030:	4632      	mov	r2, r6
 800b032:	463b      	mov	r3, r7
 800b034:	f7f5 fa90 	bl	8000558 <__aeabi_dmul>
 800b038:	a36d      	add	r3, pc, #436	@ (adr r3, 800b1f0 <atan+0x2b8>)
 800b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03e:	f7f5 f8d5 	bl	80001ec <__adddf3>
 800b042:	4632      	mov	r2, r6
 800b044:	463b      	mov	r3, r7
 800b046:	f7f5 fa87 	bl	8000558 <__aeabi_dmul>
 800b04a:	a36b      	add	r3, pc, #428	@ (adr r3, 800b1f8 <atan+0x2c0>)
 800b04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b050:	f7f5 f8cc 	bl	80001ec <__adddf3>
 800b054:	4632      	mov	r2, r6
 800b056:	463b      	mov	r3, r7
 800b058:	f7f5 fa7e 	bl	8000558 <__aeabi_dmul>
 800b05c:	a368      	add	r3, pc, #416	@ (adr r3, 800b200 <atan+0x2c8>)
 800b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b062:	f7f5 f8c3 	bl	80001ec <__adddf3>
 800b066:	4632      	mov	r2, r6
 800b068:	463b      	mov	r3, r7
 800b06a:	f7f5 fa75 	bl	8000558 <__aeabi_dmul>
 800b06e:	a366      	add	r3, pc, #408	@ (adr r3, 800b208 <atan+0x2d0>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	f7f5 f8ba 	bl	80001ec <__adddf3>
 800b078:	4642      	mov	r2, r8
 800b07a:	464b      	mov	r3, r9
 800b07c:	f7f5 fa6c 	bl	8000558 <__aeabi_dmul>
 800b080:	a363      	add	r3, pc, #396	@ (adr r3, 800b210 <atan+0x2d8>)
 800b082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b086:	4680      	mov	r8, r0
 800b088:	4689      	mov	r9, r1
 800b08a:	4630      	mov	r0, r6
 800b08c:	4639      	mov	r1, r7
 800b08e:	f7f5 fa63 	bl	8000558 <__aeabi_dmul>
 800b092:	a361      	add	r3, pc, #388	@ (adr r3, 800b218 <atan+0x2e0>)
 800b094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b098:	f7f5 f8a6 	bl	80001e8 <__aeabi_dsub>
 800b09c:	4632      	mov	r2, r6
 800b09e:	463b      	mov	r3, r7
 800b0a0:	f7f5 fa5a 	bl	8000558 <__aeabi_dmul>
 800b0a4:	a35e      	add	r3, pc, #376	@ (adr r3, 800b220 <atan+0x2e8>)
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	f7f5 f89d 	bl	80001e8 <__aeabi_dsub>
 800b0ae:	4632      	mov	r2, r6
 800b0b0:	463b      	mov	r3, r7
 800b0b2:	f7f5 fa51 	bl	8000558 <__aeabi_dmul>
 800b0b6:	a35c      	add	r3, pc, #368	@ (adr r3, 800b228 <atan+0x2f0>)
 800b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0bc:	f7f5 f894 	bl	80001e8 <__aeabi_dsub>
 800b0c0:	4632      	mov	r2, r6
 800b0c2:	463b      	mov	r3, r7
 800b0c4:	f7f5 fa48 	bl	8000558 <__aeabi_dmul>
 800b0c8:	a359      	add	r3, pc, #356	@ (adr r3, 800b230 <atan+0x2f8>)
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	f7f5 f88b 	bl	80001e8 <__aeabi_dsub>
 800b0d2:	4632      	mov	r2, r6
 800b0d4:	463b      	mov	r3, r7
 800b0d6:	f7f5 fa3f 	bl	8000558 <__aeabi_dmul>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	460b      	mov	r3, r1
 800b0de:	4640      	mov	r0, r8
 800b0e0:	4649      	mov	r1, r9
 800b0e2:	f7f5 f883 	bl	80001ec <__adddf3>
 800b0e6:	4622      	mov	r2, r4
 800b0e8:	462b      	mov	r3, r5
 800b0ea:	f7f5 fa35 	bl	8000558 <__aeabi_dmul>
 800b0ee:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	d148      	bne.n	800b18a <atan+0x252>
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	4629      	mov	r1, r5
 800b0fc:	f7f5 f874 	bl	80001e8 <__aeabi_dsub>
 800b100:	e72f      	b.n	800af62 <atan+0x2a>
 800b102:	4b52      	ldr	r3, [pc, #328]	@ (800b24c <atan+0x314>)
 800b104:	2200      	movs	r2, #0
 800b106:	4620      	mov	r0, r4
 800b108:	4629      	mov	r1, r5
 800b10a:	f7f5 f86d 	bl	80001e8 <__aeabi_dsub>
 800b10e:	4b4f      	ldr	r3, [pc, #316]	@ (800b24c <atan+0x314>)
 800b110:	4606      	mov	r6, r0
 800b112:	460f      	mov	r7, r1
 800b114:	2200      	movs	r2, #0
 800b116:	4620      	mov	r0, r4
 800b118:	4629      	mov	r1, r5
 800b11a:	f7f5 f867 	bl	80001ec <__adddf3>
 800b11e:	4602      	mov	r2, r0
 800b120:	460b      	mov	r3, r1
 800b122:	4630      	mov	r0, r6
 800b124:	4639      	mov	r1, r7
 800b126:	f7f5 fb41 	bl	80007ac <__aeabi_ddiv>
 800b12a:	f04f 0a01 	mov.w	sl, #1
 800b12e:	4604      	mov	r4, r0
 800b130:	460d      	mov	r5, r1
 800b132:	e765      	b.n	800b000 <atan+0xc8>
 800b134:	4b47      	ldr	r3, [pc, #284]	@ (800b254 <atan+0x31c>)
 800b136:	429e      	cmp	r6, r3
 800b138:	d21c      	bcs.n	800b174 <atan+0x23c>
 800b13a:	4b47      	ldr	r3, [pc, #284]	@ (800b258 <atan+0x320>)
 800b13c:	2200      	movs	r2, #0
 800b13e:	4620      	mov	r0, r4
 800b140:	4629      	mov	r1, r5
 800b142:	f7f5 f851 	bl	80001e8 <__aeabi_dsub>
 800b146:	4b44      	ldr	r3, [pc, #272]	@ (800b258 <atan+0x320>)
 800b148:	4606      	mov	r6, r0
 800b14a:	460f      	mov	r7, r1
 800b14c:	2200      	movs	r2, #0
 800b14e:	4620      	mov	r0, r4
 800b150:	4629      	mov	r1, r5
 800b152:	f7f5 fa01 	bl	8000558 <__aeabi_dmul>
 800b156:	4b3d      	ldr	r3, [pc, #244]	@ (800b24c <atan+0x314>)
 800b158:	2200      	movs	r2, #0
 800b15a:	f7f5 f847 	bl	80001ec <__adddf3>
 800b15e:	4602      	mov	r2, r0
 800b160:	460b      	mov	r3, r1
 800b162:	4630      	mov	r0, r6
 800b164:	4639      	mov	r1, r7
 800b166:	f7f5 fb21 	bl	80007ac <__aeabi_ddiv>
 800b16a:	f04f 0a02 	mov.w	sl, #2
 800b16e:	4604      	mov	r4, r0
 800b170:	460d      	mov	r5, r1
 800b172:	e745      	b.n	800b000 <atan+0xc8>
 800b174:	4622      	mov	r2, r4
 800b176:	462b      	mov	r3, r5
 800b178:	4938      	ldr	r1, [pc, #224]	@ (800b25c <atan+0x324>)
 800b17a:	2000      	movs	r0, #0
 800b17c:	f7f5 fb16 	bl	80007ac <__aeabi_ddiv>
 800b180:	f04f 0a03 	mov.w	sl, #3
 800b184:	4604      	mov	r4, r0
 800b186:	460d      	mov	r5, r1
 800b188:	e73a      	b.n	800b000 <atan+0xc8>
 800b18a:	4b35      	ldr	r3, [pc, #212]	@ (800b260 <atan+0x328>)
 800b18c:	4e35      	ldr	r6, [pc, #212]	@ (800b264 <atan+0x32c>)
 800b18e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b196:	f7f5 f827 	bl	80001e8 <__aeabi_dsub>
 800b19a:	4622      	mov	r2, r4
 800b19c:	462b      	mov	r3, r5
 800b19e:	f7f5 f823 	bl	80001e8 <__aeabi_dsub>
 800b1a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b1ae:	f7f5 f81b 	bl	80001e8 <__aeabi_dsub>
 800b1b2:	f1bb 0f00 	cmp.w	fp, #0
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	460d      	mov	r5, r1
 800b1ba:	f6bf aedc 	bge.w	800af76 <atan+0x3e>
 800b1be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b1c2:	461d      	mov	r5, r3
 800b1c4:	e6d7      	b.n	800af76 <atan+0x3e>
 800b1c6:	a51c      	add	r5, pc, #112	@ (adr r5, 800b238 <atan+0x300>)
 800b1c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b1cc:	e6d3      	b.n	800af76 <atan+0x3e>
 800b1ce:	bf00      	nop
 800b1d0:	54442d18 	.word	0x54442d18
 800b1d4:	3ff921fb 	.word	0x3ff921fb
 800b1d8:	8800759c 	.word	0x8800759c
 800b1dc:	7e37e43c 	.word	0x7e37e43c
 800b1e0:	e322da11 	.word	0xe322da11
 800b1e4:	3f90ad3a 	.word	0x3f90ad3a
 800b1e8:	24760deb 	.word	0x24760deb
 800b1ec:	3fa97b4b 	.word	0x3fa97b4b
 800b1f0:	a0d03d51 	.word	0xa0d03d51
 800b1f4:	3fb10d66 	.word	0x3fb10d66
 800b1f8:	c54c206e 	.word	0xc54c206e
 800b1fc:	3fb745cd 	.word	0x3fb745cd
 800b200:	920083ff 	.word	0x920083ff
 800b204:	3fc24924 	.word	0x3fc24924
 800b208:	5555550d 	.word	0x5555550d
 800b20c:	3fd55555 	.word	0x3fd55555
 800b210:	2c6a6c2f 	.word	0x2c6a6c2f
 800b214:	bfa2b444 	.word	0xbfa2b444
 800b218:	52defd9a 	.word	0x52defd9a
 800b21c:	3fadde2d 	.word	0x3fadde2d
 800b220:	af749a6d 	.word	0xaf749a6d
 800b224:	3fb3b0f2 	.word	0x3fb3b0f2
 800b228:	fe231671 	.word	0xfe231671
 800b22c:	3fbc71c6 	.word	0x3fbc71c6
 800b230:	9998ebc4 	.word	0x9998ebc4
 800b234:	3fc99999 	.word	0x3fc99999
 800b238:	54442d18 	.word	0x54442d18
 800b23c:	bff921fb 	.word	0xbff921fb
 800b240:	440fffff 	.word	0x440fffff
 800b244:	7ff00000 	.word	0x7ff00000
 800b248:	3fdbffff 	.word	0x3fdbffff
 800b24c:	3ff00000 	.word	0x3ff00000
 800b250:	3ff2ffff 	.word	0x3ff2ffff
 800b254:	40038000 	.word	0x40038000
 800b258:	3ff80000 	.word	0x3ff80000
 800b25c:	bff00000 	.word	0xbff00000
 800b260:	0800ba78 	.word	0x0800ba78
 800b264:	0800ba98 	.word	0x0800ba98

0800b268 <fabs>:
 800b268:	ec51 0b10 	vmov	r0, r1, d0
 800b26c:	4602      	mov	r2, r0
 800b26e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b272:	ec43 2b10 	vmov	d0, r2, r3
 800b276:	4770      	bx	lr

0800b278 <nan>:
 800b278:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b280 <nan+0x8>
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop
 800b280:	00000000 	.word	0x00000000
 800b284:	7ff80000 	.word	0x7ff80000

0800b288 <__ieee754_sqrt>:
 800b288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28c:	4a68      	ldr	r2, [pc, #416]	@ (800b430 <__ieee754_sqrt+0x1a8>)
 800b28e:	ec55 4b10 	vmov	r4, r5, d0
 800b292:	43aa      	bics	r2, r5
 800b294:	462b      	mov	r3, r5
 800b296:	4621      	mov	r1, r4
 800b298:	d110      	bne.n	800b2bc <__ieee754_sqrt+0x34>
 800b29a:	4622      	mov	r2, r4
 800b29c:	4620      	mov	r0, r4
 800b29e:	4629      	mov	r1, r5
 800b2a0:	f7f5 f95a 	bl	8000558 <__aeabi_dmul>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	f7f4 ff9e 	bl	80001ec <__adddf3>
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	460d      	mov	r5, r1
 800b2b4:	ec45 4b10 	vmov	d0, r4, r5
 800b2b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2bc:	2d00      	cmp	r5, #0
 800b2be:	dc0e      	bgt.n	800b2de <__ieee754_sqrt+0x56>
 800b2c0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b2c4:	4322      	orrs	r2, r4
 800b2c6:	d0f5      	beq.n	800b2b4 <__ieee754_sqrt+0x2c>
 800b2c8:	b19d      	cbz	r5, 800b2f2 <__ieee754_sqrt+0x6a>
 800b2ca:	4622      	mov	r2, r4
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	f7f4 ff8a 	bl	80001e8 <__aeabi_dsub>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	f7f5 fa68 	bl	80007ac <__aeabi_ddiv>
 800b2dc:	e7e8      	b.n	800b2b0 <__ieee754_sqrt+0x28>
 800b2de:	152a      	asrs	r2, r5, #20
 800b2e0:	d115      	bne.n	800b30e <__ieee754_sqrt+0x86>
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	e009      	b.n	800b2fa <__ieee754_sqrt+0x72>
 800b2e6:	0acb      	lsrs	r3, r1, #11
 800b2e8:	3a15      	subs	r2, #21
 800b2ea:	0549      	lsls	r1, r1, #21
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d0fa      	beq.n	800b2e6 <__ieee754_sqrt+0x5e>
 800b2f0:	e7f7      	b.n	800b2e2 <__ieee754_sqrt+0x5a>
 800b2f2:	462a      	mov	r2, r5
 800b2f4:	e7fa      	b.n	800b2ec <__ieee754_sqrt+0x64>
 800b2f6:	005b      	lsls	r3, r3, #1
 800b2f8:	3001      	adds	r0, #1
 800b2fa:	02dc      	lsls	r4, r3, #11
 800b2fc:	d5fb      	bpl.n	800b2f6 <__ieee754_sqrt+0x6e>
 800b2fe:	1e44      	subs	r4, r0, #1
 800b300:	1b12      	subs	r2, r2, r4
 800b302:	f1c0 0420 	rsb	r4, r0, #32
 800b306:	fa21 f404 	lsr.w	r4, r1, r4
 800b30a:	4323      	orrs	r3, r4
 800b30c:	4081      	lsls	r1, r0
 800b30e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b312:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b316:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b31a:	07d2      	lsls	r2, r2, #31
 800b31c:	bf5c      	itt	pl
 800b31e:	005b      	lslpl	r3, r3, #1
 800b320:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b324:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b328:	bf58      	it	pl
 800b32a:	0049      	lslpl	r1, r1, #1
 800b32c:	2600      	movs	r6, #0
 800b32e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b332:	106d      	asrs	r5, r5, #1
 800b334:	0049      	lsls	r1, r1, #1
 800b336:	2016      	movs	r0, #22
 800b338:	4632      	mov	r2, r6
 800b33a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b33e:	1917      	adds	r7, r2, r4
 800b340:	429f      	cmp	r7, r3
 800b342:	bfde      	ittt	le
 800b344:	193a      	addle	r2, r7, r4
 800b346:	1bdb      	suble	r3, r3, r7
 800b348:	1936      	addle	r6, r6, r4
 800b34a:	0fcf      	lsrs	r7, r1, #31
 800b34c:	3801      	subs	r0, #1
 800b34e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b352:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b356:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b35a:	d1f0      	bne.n	800b33e <__ieee754_sqrt+0xb6>
 800b35c:	4604      	mov	r4, r0
 800b35e:	2720      	movs	r7, #32
 800b360:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b364:	429a      	cmp	r2, r3
 800b366:	eb00 0e0c 	add.w	lr, r0, ip
 800b36a:	db02      	blt.n	800b372 <__ieee754_sqrt+0xea>
 800b36c:	d113      	bne.n	800b396 <__ieee754_sqrt+0x10e>
 800b36e:	458e      	cmp	lr, r1
 800b370:	d811      	bhi.n	800b396 <__ieee754_sqrt+0x10e>
 800b372:	f1be 0f00 	cmp.w	lr, #0
 800b376:	eb0e 000c 	add.w	r0, lr, ip
 800b37a:	da42      	bge.n	800b402 <__ieee754_sqrt+0x17a>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	db40      	blt.n	800b402 <__ieee754_sqrt+0x17a>
 800b380:	f102 0801 	add.w	r8, r2, #1
 800b384:	1a9b      	subs	r3, r3, r2
 800b386:	458e      	cmp	lr, r1
 800b388:	bf88      	it	hi
 800b38a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b38e:	eba1 010e 	sub.w	r1, r1, lr
 800b392:	4464      	add	r4, ip
 800b394:	4642      	mov	r2, r8
 800b396:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b39a:	3f01      	subs	r7, #1
 800b39c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b3a0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b3a4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b3a8:	d1dc      	bne.n	800b364 <__ieee754_sqrt+0xdc>
 800b3aa:	4319      	orrs	r1, r3
 800b3ac:	d01b      	beq.n	800b3e6 <__ieee754_sqrt+0x15e>
 800b3ae:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b434 <__ieee754_sqrt+0x1ac>
 800b3b2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b438 <__ieee754_sqrt+0x1b0>
 800b3b6:	e9da 0100 	ldrd	r0, r1, [sl]
 800b3ba:	e9db 2300 	ldrd	r2, r3, [fp]
 800b3be:	f7f4 ff13 	bl	80001e8 <__aeabi_dsub>
 800b3c2:	e9da 8900 	ldrd	r8, r9, [sl]
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	4640      	mov	r0, r8
 800b3cc:	4649      	mov	r1, r9
 800b3ce:	f7f5 fb3f 	bl	8000a50 <__aeabi_dcmple>
 800b3d2:	b140      	cbz	r0, 800b3e6 <__ieee754_sqrt+0x15e>
 800b3d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b3d8:	e9da 0100 	ldrd	r0, r1, [sl]
 800b3dc:	e9db 2300 	ldrd	r2, r3, [fp]
 800b3e0:	d111      	bne.n	800b406 <__ieee754_sqrt+0x17e>
 800b3e2:	3601      	adds	r6, #1
 800b3e4:	463c      	mov	r4, r7
 800b3e6:	1072      	asrs	r2, r6, #1
 800b3e8:	0863      	lsrs	r3, r4, #1
 800b3ea:	07f1      	lsls	r1, r6, #31
 800b3ec:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b3f0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b3f4:	bf48      	it	mi
 800b3f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b3fa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b3fe:	4618      	mov	r0, r3
 800b400:	e756      	b.n	800b2b0 <__ieee754_sqrt+0x28>
 800b402:	4690      	mov	r8, r2
 800b404:	e7be      	b.n	800b384 <__ieee754_sqrt+0xfc>
 800b406:	f7f4 fef1 	bl	80001ec <__adddf3>
 800b40a:	e9da 8900 	ldrd	r8, r9, [sl]
 800b40e:	4602      	mov	r2, r0
 800b410:	460b      	mov	r3, r1
 800b412:	4640      	mov	r0, r8
 800b414:	4649      	mov	r1, r9
 800b416:	f7f5 fb11 	bl	8000a3c <__aeabi_dcmplt>
 800b41a:	b120      	cbz	r0, 800b426 <__ieee754_sqrt+0x19e>
 800b41c:	1ca0      	adds	r0, r4, #2
 800b41e:	bf08      	it	eq
 800b420:	3601      	addeq	r6, #1
 800b422:	3402      	adds	r4, #2
 800b424:	e7df      	b.n	800b3e6 <__ieee754_sqrt+0x15e>
 800b426:	1c63      	adds	r3, r4, #1
 800b428:	f023 0401 	bic.w	r4, r3, #1
 800b42c:	e7db      	b.n	800b3e6 <__ieee754_sqrt+0x15e>
 800b42e:	bf00      	nop
 800b430:	7ff00000 	.word	0x7ff00000
 800b434:	20000100 	.word	0x20000100
 800b438:	200000f8 	.word	0x200000f8
 800b43c:	00000000 	.word	0x00000000

0800b440 <__ieee754_atan2>:
 800b440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b444:	ec57 6b11 	vmov	r6, r7, d1
 800b448:	4273      	negs	r3, r6
 800b44a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800b5c8 <__ieee754_atan2+0x188>
 800b44e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800b452:	4333      	orrs	r3, r6
 800b454:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b458:	4543      	cmp	r3, r8
 800b45a:	ec51 0b10 	vmov	r0, r1, d0
 800b45e:	4635      	mov	r5, r6
 800b460:	d809      	bhi.n	800b476 <__ieee754_atan2+0x36>
 800b462:	4244      	negs	r4, r0
 800b464:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b468:	4304      	orrs	r4, r0
 800b46a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b46e:	4544      	cmp	r4, r8
 800b470:	468e      	mov	lr, r1
 800b472:	4681      	mov	r9, r0
 800b474:	d907      	bls.n	800b486 <__ieee754_atan2+0x46>
 800b476:	4632      	mov	r2, r6
 800b478:	463b      	mov	r3, r7
 800b47a:	f7f4 feb7 	bl	80001ec <__adddf3>
 800b47e:	ec41 0b10 	vmov	d0, r0, r1
 800b482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b486:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800b48a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800b48e:	4334      	orrs	r4, r6
 800b490:	d103      	bne.n	800b49a <__ieee754_atan2+0x5a>
 800b492:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b496:	f7ff bd4f 	b.w	800af38 <atan>
 800b49a:	17bc      	asrs	r4, r7, #30
 800b49c:	f004 0402 	and.w	r4, r4, #2
 800b4a0:	ea53 0909 	orrs.w	r9, r3, r9
 800b4a4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b4a8:	d107      	bne.n	800b4ba <__ieee754_atan2+0x7a>
 800b4aa:	2c02      	cmp	r4, #2
 800b4ac:	d05f      	beq.n	800b56e <__ieee754_atan2+0x12e>
 800b4ae:	2c03      	cmp	r4, #3
 800b4b0:	d1e5      	bne.n	800b47e <__ieee754_atan2+0x3e>
 800b4b2:	a141      	add	r1, pc, #260	@ (adr r1, 800b5b8 <__ieee754_atan2+0x178>)
 800b4b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4b8:	e7e1      	b.n	800b47e <__ieee754_atan2+0x3e>
 800b4ba:	4315      	orrs	r5, r2
 800b4bc:	d106      	bne.n	800b4cc <__ieee754_atan2+0x8c>
 800b4be:	f1be 0f00 	cmp.w	lr, #0
 800b4c2:	da5f      	bge.n	800b584 <__ieee754_atan2+0x144>
 800b4c4:	a13e      	add	r1, pc, #248	@ (adr r1, 800b5c0 <__ieee754_atan2+0x180>)
 800b4c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4ca:	e7d8      	b.n	800b47e <__ieee754_atan2+0x3e>
 800b4cc:	4542      	cmp	r2, r8
 800b4ce:	d10f      	bne.n	800b4f0 <__ieee754_atan2+0xb0>
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	f104 34ff 	add.w	r4, r4, #4294967295
 800b4d6:	d107      	bne.n	800b4e8 <__ieee754_atan2+0xa8>
 800b4d8:	2c02      	cmp	r4, #2
 800b4da:	d84c      	bhi.n	800b576 <__ieee754_atan2+0x136>
 800b4dc:	4b34      	ldr	r3, [pc, #208]	@ (800b5b0 <__ieee754_atan2+0x170>)
 800b4de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b4e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b4e6:	e7ca      	b.n	800b47e <__ieee754_atan2+0x3e>
 800b4e8:	2c02      	cmp	r4, #2
 800b4ea:	d848      	bhi.n	800b57e <__ieee754_atan2+0x13e>
 800b4ec:	4b31      	ldr	r3, [pc, #196]	@ (800b5b4 <__ieee754_atan2+0x174>)
 800b4ee:	e7f6      	b.n	800b4de <__ieee754_atan2+0x9e>
 800b4f0:	4543      	cmp	r3, r8
 800b4f2:	d0e4      	beq.n	800b4be <__ieee754_atan2+0x7e>
 800b4f4:	1a9b      	subs	r3, r3, r2
 800b4f6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800b4fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b4fe:	da1e      	bge.n	800b53e <__ieee754_atan2+0xfe>
 800b500:	2f00      	cmp	r7, #0
 800b502:	da01      	bge.n	800b508 <__ieee754_atan2+0xc8>
 800b504:	323c      	adds	r2, #60	@ 0x3c
 800b506:	db1e      	blt.n	800b546 <__ieee754_atan2+0x106>
 800b508:	4632      	mov	r2, r6
 800b50a:	463b      	mov	r3, r7
 800b50c:	f7f5 f94e 	bl	80007ac <__aeabi_ddiv>
 800b510:	ec41 0b10 	vmov	d0, r0, r1
 800b514:	f7ff fea8 	bl	800b268 <fabs>
 800b518:	f7ff fd0e 	bl	800af38 <atan>
 800b51c:	ec51 0b10 	vmov	r0, r1, d0
 800b520:	2c01      	cmp	r4, #1
 800b522:	d013      	beq.n	800b54c <__ieee754_atan2+0x10c>
 800b524:	2c02      	cmp	r4, #2
 800b526:	d015      	beq.n	800b554 <__ieee754_atan2+0x114>
 800b528:	2c00      	cmp	r4, #0
 800b52a:	d0a8      	beq.n	800b47e <__ieee754_atan2+0x3e>
 800b52c:	a318      	add	r3, pc, #96	@ (adr r3, 800b590 <__ieee754_atan2+0x150>)
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	f7f4 fe59 	bl	80001e8 <__aeabi_dsub>
 800b536:	a318      	add	r3, pc, #96	@ (adr r3, 800b598 <__ieee754_atan2+0x158>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	e014      	b.n	800b568 <__ieee754_atan2+0x128>
 800b53e:	a118      	add	r1, pc, #96	@ (adr r1, 800b5a0 <__ieee754_atan2+0x160>)
 800b540:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b544:	e7ec      	b.n	800b520 <__ieee754_atan2+0xe0>
 800b546:	2000      	movs	r0, #0
 800b548:	2100      	movs	r1, #0
 800b54a:	e7e9      	b.n	800b520 <__ieee754_atan2+0xe0>
 800b54c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b550:	4619      	mov	r1, r3
 800b552:	e794      	b.n	800b47e <__ieee754_atan2+0x3e>
 800b554:	a30e      	add	r3, pc, #56	@ (adr r3, 800b590 <__ieee754_atan2+0x150>)
 800b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55a:	f7f4 fe45 	bl	80001e8 <__aeabi_dsub>
 800b55e:	4602      	mov	r2, r0
 800b560:	460b      	mov	r3, r1
 800b562:	a10d      	add	r1, pc, #52	@ (adr r1, 800b598 <__ieee754_atan2+0x158>)
 800b564:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b568:	f7f4 fe3e 	bl	80001e8 <__aeabi_dsub>
 800b56c:	e787      	b.n	800b47e <__ieee754_atan2+0x3e>
 800b56e:	a10a      	add	r1, pc, #40	@ (adr r1, 800b598 <__ieee754_atan2+0x158>)
 800b570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b574:	e783      	b.n	800b47e <__ieee754_atan2+0x3e>
 800b576:	a10c      	add	r1, pc, #48	@ (adr r1, 800b5a8 <__ieee754_atan2+0x168>)
 800b578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b57c:	e77f      	b.n	800b47e <__ieee754_atan2+0x3e>
 800b57e:	2000      	movs	r0, #0
 800b580:	2100      	movs	r1, #0
 800b582:	e77c      	b.n	800b47e <__ieee754_atan2+0x3e>
 800b584:	a106      	add	r1, pc, #24	@ (adr r1, 800b5a0 <__ieee754_atan2+0x160>)
 800b586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b58a:	e778      	b.n	800b47e <__ieee754_atan2+0x3e>
 800b58c:	f3af 8000 	nop.w
 800b590:	33145c07 	.word	0x33145c07
 800b594:	3ca1a626 	.word	0x3ca1a626
 800b598:	54442d18 	.word	0x54442d18
 800b59c:	400921fb 	.word	0x400921fb
 800b5a0:	54442d18 	.word	0x54442d18
 800b5a4:	3ff921fb 	.word	0x3ff921fb
 800b5a8:	54442d18 	.word	0x54442d18
 800b5ac:	3fe921fb 	.word	0x3fe921fb
 800b5b0:	0800bad0 	.word	0x0800bad0
 800b5b4:	0800bab8 	.word	0x0800bab8
 800b5b8:	54442d18 	.word	0x54442d18
 800b5bc:	c00921fb 	.word	0xc00921fb
 800b5c0:	54442d18 	.word	0x54442d18
 800b5c4:	bff921fb 	.word	0xbff921fb
 800b5c8:	7ff00000 	.word	0x7ff00000
 800b5cc:	00000000 	.word	0x00000000

0800b5d0 <__ieee754_log>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	ec51 0b10 	vmov	r0, r1, d0
 800b5d8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800b5dc:	b087      	sub	sp, #28
 800b5de:	460d      	mov	r5, r1
 800b5e0:	da26      	bge.n	800b630 <__ieee754_log+0x60>
 800b5e2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b5e6:	4303      	orrs	r3, r0
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	d10a      	bne.n	800b602 <__ieee754_log+0x32>
 800b5ec:	49ce      	ldr	r1, [pc, #824]	@ (800b928 <__ieee754_log+0x358>)
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	2000      	movs	r0, #0
 800b5f4:	f7f5 f8da 	bl	80007ac <__aeabi_ddiv>
 800b5f8:	ec41 0b10 	vmov	d0, r0, r1
 800b5fc:	b007      	add	sp, #28
 800b5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b602:	2900      	cmp	r1, #0
 800b604:	da05      	bge.n	800b612 <__ieee754_log+0x42>
 800b606:	460b      	mov	r3, r1
 800b608:	f7f4 fdee 	bl	80001e8 <__aeabi_dsub>
 800b60c:	2200      	movs	r2, #0
 800b60e:	2300      	movs	r3, #0
 800b610:	e7f0      	b.n	800b5f4 <__ieee754_log+0x24>
 800b612:	4bc6      	ldr	r3, [pc, #792]	@ (800b92c <__ieee754_log+0x35c>)
 800b614:	2200      	movs	r2, #0
 800b616:	f7f4 ff9f 	bl	8000558 <__aeabi_dmul>
 800b61a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800b61e:	460d      	mov	r5, r1
 800b620:	4ac3      	ldr	r2, [pc, #780]	@ (800b930 <__ieee754_log+0x360>)
 800b622:	4295      	cmp	r5, r2
 800b624:	dd06      	ble.n	800b634 <__ieee754_log+0x64>
 800b626:	4602      	mov	r2, r0
 800b628:	460b      	mov	r3, r1
 800b62a:	f7f4 fddf 	bl	80001ec <__adddf3>
 800b62e:	e7e3      	b.n	800b5f8 <__ieee754_log+0x28>
 800b630:	2300      	movs	r3, #0
 800b632:	e7f5      	b.n	800b620 <__ieee754_log+0x50>
 800b634:	152c      	asrs	r4, r5, #20
 800b636:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800b63a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b63e:	441c      	add	r4, r3
 800b640:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800b644:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800b648:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b64c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800b650:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800b654:	ea42 0105 	orr.w	r1, r2, r5
 800b658:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b65c:	2200      	movs	r2, #0
 800b65e:	4bb5      	ldr	r3, [pc, #724]	@ (800b934 <__ieee754_log+0x364>)
 800b660:	f7f4 fdc2 	bl	80001e8 <__aeabi_dsub>
 800b664:	1cab      	adds	r3, r5, #2
 800b666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	4682      	mov	sl, r0
 800b66e:	468b      	mov	fp, r1
 800b670:	f04f 0200 	mov.w	r2, #0
 800b674:	dc53      	bgt.n	800b71e <__ieee754_log+0x14e>
 800b676:	2300      	movs	r3, #0
 800b678:	f7f5 f9d6 	bl	8000a28 <__aeabi_dcmpeq>
 800b67c:	b1d0      	cbz	r0, 800b6b4 <__ieee754_log+0xe4>
 800b67e:	2c00      	cmp	r4, #0
 800b680:	f000 8120 	beq.w	800b8c4 <__ieee754_log+0x2f4>
 800b684:	4620      	mov	r0, r4
 800b686:	f7f4 fefd 	bl	8000484 <__aeabi_i2d>
 800b68a:	a391      	add	r3, pc, #580	@ (adr r3, 800b8d0 <__ieee754_log+0x300>)
 800b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b690:	4606      	mov	r6, r0
 800b692:	460f      	mov	r7, r1
 800b694:	f7f4 ff60 	bl	8000558 <__aeabi_dmul>
 800b698:	a38f      	add	r3, pc, #572	@ (adr r3, 800b8d8 <__ieee754_log+0x308>)
 800b69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69e:	4604      	mov	r4, r0
 800b6a0:	460d      	mov	r5, r1
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	4639      	mov	r1, r7
 800b6a6:	f7f4 ff57 	bl	8000558 <__aeabi_dmul>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	e7ba      	b.n	800b62a <__ieee754_log+0x5a>
 800b6b4:	a38a      	add	r3, pc, #552	@ (adr r3, 800b8e0 <__ieee754_log+0x310>)
 800b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ba:	4650      	mov	r0, sl
 800b6bc:	4659      	mov	r1, fp
 800b6be:	f7f4 ff4b 	bl	8000558 <__aeabi_dmul>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	499b      	ldr	r1, [pc, #620]	@ (800b938 <__ieee754_log+0x368>)
 800b6ca:	f7f4 fd8d 	bl	80001e8 <__aeabi_dsub>
 800b6ce:	4652      	mov	r2, sl
 800b6d0:	4606      	mov	r6, r0
 800b6d2:	460f      	mov	r7, r1
 800b6d4:	465b      	mov	r3, fp
 800b6d6:	4650      	mov	r0, sl
 800b6d8:	4659      	mov	r1, fp
 800b6da:	f7f4 ff3d 	bl	8000558 <__aeabi_dmul>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	4639      	mov	r1, r7
 800b6e6:	f7f4 ff37 	bl	8000558 <__aeabi_dmul>
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	460f      	mov	r7, r1
 800b6ee:	b914      	cbnz	r4, 800b6f6 <__ieee754_log+0x126>
 800b6f0:	4632      	mov	r2, r6
 800b6f2:	463b      	mov	r3, r7
 800b6f4:	e0a0      	b.n	800b838 <__ieee754_log+0x268>
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f7f4 fec4 	bl	8000484 <__aeabi_i2d>
 800b6fc:	a374      	add	r3, pc, #464	@ (adr r3, 800b8d0 <__ieee754_log+0x300>)
 800b6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b702:	4680      	mov	r8, r0
 800b704:	4689      	mov	r9, r1
 800b706:	f7f4 ff27 	bl	8000558 <__aeabi_dmul>
 800b70a:	a373      	add	r3, pc, #460	@ (adr r3, 800b8d8 <__ieee754_log+0x308>)
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	4604      	mov	r4, r0
 800b712:	460d      	mov	r5, r1
 800b714:	4640      	mov	r0, r8
 800b716:	4649      	mov	r1, r9
 800b718:	f7f4 ff1e 	bl	8000558 <__aeabi_dmul>
 800b71c:	e0a5      	b.n	800b86a <__ieee754_log+0x29a>
 800b71e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b722:	f7f4 fd63 	bl	80001ec <__adddf3>
 800b726:	4602      	mov	r2, r0
 800b728:	460b      	mov	r3, r1
 800b72a:	4650      	mov	r0, sl
 800b72c:	4659      	mov	r1, fp
 800b72e:	f7f5 f83d 	bl	80007ac <__aeabi_ddiv>
 800b732:	e9cd 0100 	strd	r0, r1, [sp]
 800b736:	4620      	mov	r0, r4
 800b738:	f7f4 fea4 	bl	8000484 <__aeabi_i2d>
 800b73c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b740:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b744:	4610      	mov	r0, r2
 800b746:	4619      	mov	r1, r3
 800b748:	f7f4 ff06 	bl	8000558 <__aeabi_dmul>
 800b74c:	4602      	mov	r2, r0
 800b74e:	460b      	mov	r3, r1
 800b750:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b754:	f7f4 ff00 	bl	8000558 <__aeabi_dmul>
 800b758:	a363      	add	r3, pc, #396	@ (adr r3, 800b8e8 <__ieee754_log+0x318>)
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	4680      	mov	r8, r0
 800b760:	4689      	mov	r9, r1
 800b762:	f7f4 fef9 	bl	8000558 <__aeabi_dmul>
 800b766:	a362      	add	r3, pc, #392	@ (adr r3, 800b8f0 <__ieee754_log+0x320>)
 800b768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76c:	f7f4 fd3e 	bl	80001ec <__adddf3>
 800b770:	4642      	mov	r2, r8
 800b772:	464b      	mov	r3, r9
 800b774:	f7f4 fef0 	bl	8000558 <__aeabi_dmul>
 800b778:	a35f      	add	r3, pc, #380	@ (adr r3, 800b8f8 <__ieee754_log+0x328>)
 800b77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77e:	f7f4 fd35 	bl	80001ec <__adddf3>
 800b782:	4642      	mov	r2, r8
 800b784:	464b      	mov	r3, r9
 800b786:	f7f4 fee7 	bl	8000558 <__aeabi_dmul>
 800b78a:	a35d      	add	r3, pc, #372	@ (adr r3, 800b900 <__ieee754_log+0x330>)
 800b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b790:	f7f4 fd2c 	bl	80001ec <__adddf3>
 800b794:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b798:	f7f4 fede 	bl	8000558 <__aeabi_dmul>
 800b79c:	a35a      	add	r3, pc, #360	@ (adr r3, 800b908 <__ieee754_log+0x338>)
 800b79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7a6:	4640      	mov	r0, r8
 800b7a8:	4649      	mov	r1, r9
 800b7aa:	f7f4 fed5 	bl	8000558 <__aeabi_dmul>
 800b7ae:	a358      	add	r3, pc, #352	@ (adr r3, 800b910 <__ieee754_log+0x340>)
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	f7f4 fd1a 	bl	80001ec <__adddf3>
 800b7b8:	4642      	mov	r2, r8
 800b7ba:	464b      	mov	r3, r9
 800b7bc:	f7f4 fecc 	bl	8000558 <__aeabi_dmul>
 800b7c0:	a355      	add	r3, pc, #340	@ (adr r3, 800b918 <__ieee754_log+0x348>)
 800b7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c6:	f7f4 fd11 	bl	80001ec <__adddf3>
 800b7ca:	4642      	mov	r2, r8
 800b7cc:	464b      	mov	r3, r9
 800b7ce:	f7f4 fec3 	bl	8000558 <__aeabi_dmul>
 800b7d2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800b7de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7e2:	f7f4 fd03 	bl	80001ec <__adddf3>
 800b7e6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800b7ea:	3551      	adds	r5, #81	@ 0x51
 800b7ec:	4335      	orrs	r5, r6
 800b7ee:	2d00      	cmp	r5, #0
 800b7f0:	4680      	mov	r8, r0
 800b7f2:	4689      	mov	r9, r1
 800b7f4:	dd48      	ble.n	800b888 <__ieee754_log+0x2b8>
 800b7f6:	4b50      	ldr	r3, [pc, #320]	@ (800b938 <__ieee754_log+0x368>)
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	4650      	mov	r0, sl
 800b7fc:	4659      	mov	r1, fp
 800b7fe:	f7f4 feab 	bl	8000558 <__aeabi_dmul>
 800b802:	4652      	mov	r2, sl
 800b804:	465b      	mov	r3, fp
 800b806:	f7f4 fea7 	bl	8000558 <__aeabi_dmul>
 800b80a:	4602      	mov	r2, r0
 800b80c:	460b      	mov	r3, r1
 800b80e:	4606      	mov	r6, r0
 800b810:	460f      	mov	r7, r1
 800b812:	4640      	mov	r0, r8
 800b814:	4649      	mov	r1, r9
 800b816:	f7f4 fce9 	bl	80001ec <__adddf3>
 800b81a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b81e:	f7f4 fe9b 	bl	8000558 <__aeabi_dmul>
 800b822:	4680      	mov	r8, r0
 800b824:	4689      	mov	r9, r1
 800b826:	b964      	cbnz	r4, 800b842 <__ieee754_log+0x272>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	4630      	mov	r0, r6
 800b82e:	4639      	mov	r1, r7
 800b830:	f7f4 fcda 	bl	80001e8 <__aeabi_dsub>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	4650      	mov	r0, sl
 800b83a:	4659      	mov	r1, fp
 800b83c:	f7f4 fcd4 	bl	80001e8 <__aeabi_dsub>
 800b840:	e6da      	b.n	800b5f8 <__ieee754_log+0x28>
 800b842:	a323      	add	r3, pc, #140	@ (adr r3, 800b8d0 <__ieee754_log+0x300>)
 800b844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b84c:	f7f4 fe84 	bl	8000558 <__aeabi_dmul>
 800b850:	a321      	add	r3, pc, #132	@ (adr r3, 800b8d8 <__ieee754_log+0x308>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	4604      	mov	r4, r0
 800b858:	460d      	mov	r5, r1
 800b85a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b85e:	f7f4 fe7b 	bl	8000558 <__aeabi_dmul>
 800b862:	4642      	mov	r2, r8
 800b864:	464b      	mov	r3, r9
 800b866:	f7f4 fcc1 	bl	80001ec <__adddf3>
 800b86a:	4602      	mov	r2, r0
 800b86c:	460b      	mov	r3, r1
 800b86e:	4630      	mov	r0, r6
 800b870:	4639      	mov	r1, r7
 800b872:	f7f4 fcb9 	bl	80001e8 <__aeabi_dsub>
 800b876:	4652      	mov	r2, sl
 800b878:	465b      	mov	r3, fp
 800b87a:	f7f4 fcb5 	bl	80001e8 <__aeabi_dsub>
 800b87e:	4602      	mov	r2, r0
 800b880:	460b      	mov	r3, r1
 800b882:	4620      	mov	r0, r4
 800b884:	4629      	mov	r1, r5
 800b886:	e7d9      	b.n	800b83c <__ieee754_log+0x26c>
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	4650      	mov	r0, sl
 800b88e:	4659      	mov	r1, fp
 800b890:	f7f4 fcaa 	bl	80001e8 <__aeabi_dsub>
 800b894:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b898:	f7f4 fe5e 	bl	8000558 <__aeabi_dmul>
 800b89c:	4606      	mov	r6, r0
 800b89e:	460f      	mov	r7, r1
 800b8a0:	2c00      	cmp	r4, #0
 800b8a2:	f43f af25 	beq.w	800b6f0 <__ieee754_log+0x120>
 800b8a6:	a30a      	add	r3, pc, #40	@ (adr r3, 800b8d0 <__ieee754_log+0x300>)
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8b0:	f7f4 fe52 	bl	8000558 <__aeabi_dmul>
 800b8b4:	a308      	add	r3, pc, #32	@ (adr r3, 800b8d8 <__ieee754_log+0x308>)
 800b8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	460d      	mov	r5, r1
 800b8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8c2:	e729      	b.n	800b718 <__ieee754_log+0x148>
 800b8c4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800b920 <__ieee754_log+0x350>
 800b8c8:	e698      	b.n	800b5fc <__ieee754_log+0x2c>
 800b8ca:	bf00      	nop
 800b8cc:	f3af 8000 	nop.w
 800b8d0:	fee00000 	.word	0xfee00000
 800b8d4:	3fe62e42 	.word	0x3fe62e42
 800b8d8:	35793c76 	.word	0x35793c76
 800b8dc:	3dea39ef 	.word	0x3dea39ef
 800b8e0:	55555555 	.word	0x55555555
 800b8e4:	3fd55555 	.word	0x3fd55555
 800b8e8:	df3e5244 	.word	0xdf3e5244
 800b8ec:	3fc2f112 	.word	0x3fc2f112
 800b8f0:	96cb03de 	.word	0x96cb03de
 800b8f4:	3fc74664 	.word	0x3fc74664
 800b8f8:	94229359 	.word	0x94229359
 800b8fc:	3fd24924 	.word	0x3fd24924
 800b900:	55555593 	.word	0x55555593
 800b904:	3fe55555 	.word	0x3fe55555
 800b908:	d078c69f 	.word	0xd078c69f
 800b90c:	3fc39a09 	.word	0x3fc39a09
 800b910:	1d8e78af 	.word	0x1d8e78af
 800b914:	3fcc71c5 	.word	0x3fcc71c5
 800b918:	9997fa04 	.word	0x9997fa04
 800b91c:	3fd99999 	.word	0x3fd99999
	...
 800b928:	c3500000 	.word	0xc3500000
 800b92c:	43500000 	.word	0x43500000
 800b930:	7fefffff 	.word	0x7fefffff
 800b934:	3ff00000 	.word	0x3ff00000
 800b938:	3fe00000 	.word	0x3fe00000

0800b93c <_init>:
 800b93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93e:	bf00      	nop
 800b940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b942:	bc08      	pop	{r3}
 800b944:	469e      	mov	lr, r3
 800b946:	4770      	bx	lr

0800b948 <_fini>:
 800b948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94a:	bf00      	nop
 800b94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b94e:	bc08      	pop	{r3}
 800b950:	469e      	mov	lr, r3
 800b952:	4770      	bx	lr
