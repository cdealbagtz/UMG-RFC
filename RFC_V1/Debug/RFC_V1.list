
RFC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f614  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800f7b8  0800f7b8  000107b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa48  0800fa48  00011120  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa48  0800fa48  00010a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa50  0800fa50  00011120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa50  0800fa50  00010a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa54  0800fa54  00010a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  0800fa58  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b38  20000120  0800fb78  00011120  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004c58  0800fb78  00011c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011120  2**0
                  CONTENTS, READONLY
 12 .debug_info   000249b4  00000000  00000000  00011150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000660a  00000000  00000000  00035b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020e8  00000000  00000000  0003c110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001969  00000000  00000000  0003e1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c5f  00000000  00000000  0003fb61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000323bd  00000000  00000000  000607c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab1c7  00000000  00000000  00092b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013dd44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e38  00000000  00000000  0013dd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00146bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000120 	.word	0x20000120
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f79c 	.word	0x0800f79c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000124 	.word	0x20000124
 80001dc:	0800f79c 	.word	0x0800f79c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9b5 	b.w	8000f74 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <Mount_SD>:




void Mount_SD (const TCHAR* path)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000f80:	2201      	movs	r2, #1
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <Mount_SD+0x24>)
 8000f86:	f00a fbb5 	bl	800b6f4 <f_mount>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <Mount_SD+0x28>)
 8000f90:	701a      	strb	r2, [r3, #0]
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000013c 	.word	0x2000013c
 8000fa0:	20000370 	.word	0x20000370

08000fa4 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f00a fc05 	bl	800b7bc <f_mkdir>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <Create_Dir+0x48>)
 8000fb8:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <Create_Dir+0x48>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d107      	bne.n	8000fd2 <Create_Dir+0x2e>
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 8000fc2:	2064      	movs	r0, #100	@ 0x64
 8000fc4:	f00c ffea 	bl	800df9c <pvPortMalloc>
 8000fc8:	60b8      	str	r0, [r7, #8]

    	vPortFree(buf);
 8000fca:	68b8      	ldr	r0, [r7, #8]
 8000fcc:	f00d f8b4 	bl	800e138 <vPortFree>
 8000fd0:	e006      	b.n	8000fe0 <Create_Dir+0x3c>
    }
    else
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 8000fd2:	2064      	movs	r0, #100	@ 0x64
 8000fd4:	f00c ffe2 	bl	800df9c <pvPortMalloc>
 8000fd8:	60f8      	str	r0, [r7, #12]
    	vPortFree(buf);
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f00d f8ac 	bl	800e138 <vPortFree>
    }
    return fresult;
 8000fe0:	4b02      	ldr	r3, [pc, #8]	@ (8000fec <Create_Dir+0x48>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000370 	.word	0x20000370

08000ff0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001002:	4b21      	ldr	r3, [pc, #132]	@ (8001088 <MX_ADC1_Init+0x98>)
 8001004:	4a21      	ldr	r2, [pc, #132]	@ (800108c <MX_ADC1_Init+0x9c>)
 8001006:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001008:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <MX_ADC1_Init+0x98>)
 800100a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800100e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001010:	4b1d      	ldr	r3, [pc, #116]	@ (8001088 <MX_ADC1_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001016:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <MX_ADC1_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800101c:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <MX_ADC1_Init+0x98>)
 800101e:	2200      	movs	r2, #0
 8001020:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001022:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <MX_ADC1_Init+0x98>)
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001030:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <MX_ADC1_Init+0x98>)
 8001032:	4a17      	ldr	r2, [pc, #92]	@ (8001090 <MX_ADC1_Init+0xa0>)
 8001034:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001036:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <MX_ADC1_Init+0x98>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <MX_ADC1_Init+0x98>)
 800103e:	2201      	movs	r2, #1
 8001040:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_ADC1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104a:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_ADC1_Init+0x98>)
 800104c:	2201      	movs	r2, #1
 800104e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001050:	480d      	ldr	r0, [pc, #52]	@ (8001088 <MX_ADC1_Init+0x98>)
 8001052:	f003 fe0d 	bl	8004c70 <HAL_ADC_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800105c:	f001 f93e 	bl	80022dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001060:	2301      	movs	r3, #1
 8001062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001064:	2301      	movs	r3, #1
 8001066:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_ADC1_Init+0x98>)
 8001072:	f003 fe41 	bl	8004cf8 <HAL_ADC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800107c:	f001 f92e 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000374 	.word	0x20000374
 800108c:	40012000 	.word	0x40012000
 8001090:	0f000001 	.word	0x0f000001

08001094 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a17      	ldr	r2, [pc, #92]	@ (8001110 <HAL_ADC_MspInit+0x7c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d127      	bne.n	8001106 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	4b16      	ldr	r3, [pc, #88]	@ (8001114 <HAL_ADC_MspInit+0x80>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010be:	4a15      	ldr	r2, [pc, #84]	@ (8001114 <HAL_ADC_MspInit+0x80>)
 80010c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010c6:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <HAL_ADC_MspInit+0x80>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <HAL_ADC_MspInit+0x80>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a0e      	ldr	r2, [pc, #56]	@ (8001114 <HAL_ADC_MspInit+0x80>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <HAL_ADC_MspInit+0x80>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_VBat_Pin;
 80010ee:	2302      	movs	r3, #2
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f2:	2303      	movs	r3, #3
 80010f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VBat_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	@ (8001118 <HAL_ADC_MspInit+0x84>)
 8001102:	f004 ff09 	bl	8005f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	@ 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40012000 	.word	0x40012000
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000

0800111c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_DMA_Init+0x5c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a13      	ldr	r2, [pc, #76]	@ (8001178 <MX_DMA_Init+0x5c>)
 800112c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_DMA_Init+0x5c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2105      	movs	r1, #5
 8001142:	200b      	movs	r0, #11
 8001144:	f004 f8be 	bl	80052c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001148:	200b      	movs	r0, #11
 800114a:	f004 f8d7 	bl	80052fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2105      	movs	r1, #5
 8001152:	200e      	movs	r0, #14
 8001154:	f004 f8b6 	bl	80052c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001158:	200e      	movs	r0, #14
 800115a:	f004 f8cf 	bl	80052fc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2105      	movs	r1, #5
 8001162:	2010      	movs	r0, #16
 8001164:	f004 f8ae 	bl	80052c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001168:	2010      	movs	r0, #16
 800116a:	f004 f8c7 	bl	80052fc <HAL_NVIC_EnableIRQ>

}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800

0800117c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2101      	movs	r1, #1
 8001184:	4802      	ldr	r0, [pc, #8]	@ (8001190 <SELECT+0x14>)
 8001186:	f005 f84b 	bl	8006220 <HAL_GPIO_WritePin>
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020400 	.word	0x40020400

08001194 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2101      	movs	r1, #1
 800119c:	4802      	ldr	r0, [pc, #8]	@ (80011a8 <DESELECT+0x14>)
 800119e:	f005 f83f 	bl	8006220 <HAL_GPIO_WritePin>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40020400 	.word	0x40020400

080011ac <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011b6:	bf00      	nop
 80011b8:	4808      	ldr	r0, [pc, #32]	@ (80011dc <SPI_TxByte+0x30>)
 80011ba:	f007 fa87 	bl	80086cc <HAL_SPI_GetState>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d1f9      	bne.n	80011b8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80011c4:	1df9      	adds	r1, r7, #7
 80011c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ca:	2201      	movs	r2, #1
 80011cc:	4803      	ldr	r0, [pc, #12]	@ (80011dc <SPI_TxByte+0x30>)
 80011ce:	f006 fd78 	bl	8007cc2 <HAL_SPI_Transmit>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000728 	.word	0x20000728

080011e0 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80011e6:	23ff      	movs	r3, #255	@ 0xff
 80011e8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80011ee:	bf00      	nop
 80011f0:	4809      	ldr	r0, [pc, #36]	@ (8001218 <SPI_RxByte+0x38>)
 80011f2:	f007 fa6b 	bl	80086cc <HAL_SPI_GetState>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d1f9      	bne.n	80011f0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80011fc:	1dba      	adds	r2, r7, #6
 80011fe:	1df9      	adds	r1, r7, #7
 8001200:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	4803      	ldr	r0, [pc, #12]	@ (8001218 <SPI_RxByte+0x38>)
 800120a:	f006 ffb7 	bl	800817c <HAL_SPI_TransmitReceive>
  
  return data;
 800120e:	79bb      	ldrb	r3, [r7, #6]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000728 	.word	0x20000728

0800121c <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001224:	f7ff ffdc 	bl	80011e0 <SPI_RxByte>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	701a      	strb	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 800123e:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <SD_ReadyWait+0x34>)
 8001240:	2232      	movs	r2, #50	@ 0x32
 8001242:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8001244:	f7ff ffcc 	bl	80011e0 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8001248:	f7ff ffca 	bl	80011e0 <SPI_RxByte>
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2bff      	cmp	r3, #255	@ 0xff
 8001254:	d004      	beq.n	8001260 <SD_ReadyWait+0x28>
 8001256:	4b05      	ldr	r3, [pc, #20]	@ (800126c <SD_ReadyWait+0x34>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f3      	bne.n	8001248 <SD_ReadyWait+0x10>
  
  return res;
 8001260:	79fb      	ldrb	r3, [r7, #7]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	2000099a 	.word	0x2000099a

08001270 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001276:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800127a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 800127c:	f7ff ff8a 	bl	8001194 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	e005      	b.n	8001292 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001286:	20ff      	movs	r0, #255	@ 0xff
 8001288:	f7ff ff90 	bl	80011ac <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	3301      	adds	r3, #1
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	2b09      	cmp	r3, #9
 8001296:	ddf6      	ble.n	8001286 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8001298:	f7ff ff70 	bl	800117c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 800129c:	2340      	movs	r3, #64	@ 0x40
 800129e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80012b0:	2395      	movs	r3, #149	@ 0x95
 80012b2:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e009      	b.n	80012ce <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80012ba:	1d3a      	adds	r2, r7, #4
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff72 	bl	80011ac <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	ddf2      	ble.n	80012ba <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80012d4:	e002      	b.n	80012dc <SD_PowerOn+0x6c>
  {
    Count--;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3b01      	subs	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80012dc:	f7ff ff80 	bl	80011e0 <SPI_RxByte>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d002      	beq.n	80012ec <SD_PowerOn+0x7c>
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f4      	bne.n	80012d6 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80012ec:	f7ff ff52 	bl	8001194 <DESELECT>
  SPI_TxByte(0XFF);
 80012f0:	20ff      	movs	r0, #255	@ 0xff
 80012f2:	f7ff ff5b 	bl	80011ac <SPI_TxByte>
  
  PowerFlag = 1;
 80012f6:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <SD_PowerOn+0x94>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200003bd 	.word	0x200003bd

08001308 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <SD_PowerOff+0x14>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	200003bd 	.word	0x200003bd

08001320 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001324:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <SD_CheckPower+0x14>)
 8001326:	781b      	ldrb	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200003bd 	.word	0x200003bd

08001338 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <SD_RxDataBlock+0x68>)
 8001344:	220a      	movs	r2, #10
 8001346:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001348:	f7ff ff4a 	bl	80011e0 <SPI_RxByte>
 800134c:	4603      	mov	r3, r0
 800134e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	2bff      	cmp	r3, #255	@ 0xff
 8001354:	d104      	bne.n	8001360 <SD_RxDataBlock+0x28>
 8001356:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <SD_RxDataBlock+0x68>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f3      	bne.n	8001348 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	2bfe      	cmp	r3, #254	@ 0xfe
 8001364:	d001      	beq.n	800136a <SD_RxDataBlock+0x32>
    return FALSE;
 8001366:	2300      	movs	r3, #0
 8001368:	e016      	b.n	8001398 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff53 	bl	800121c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff4d 	bl	800121c <SPI_RxBytePtr>
  } while(btr -= 2);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	3b02      	subs	r3, #2
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1ed      	bne.n	800136a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800138e:	f7ff ff27 	bl	80011e0 <SPI_RxByte>
  SPI_RxByte();
 8001392:	f7ff ff25 	bl	80011e0 <SPI_RxByte>
  
  return TRUE;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000999 	.word	0x20000999

080013a4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80013b4:	f7ff ff40 	bl	8001238 <SD_ReadyWait>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2bff      	cmp	r3, #255	@ 0xff
 80013bc:	d001      	beq.n	80013c2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80013be:	2300      	movs	r3, #0
 80013c0:	e040      	b.n	8001444 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fef1 	bl	80011ac <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	2bfd      	cmp	r3, #253	@ 0xfd
 80013ce:	d031      	beq.n	8001434 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fee5 	bl	80011ac <SPI_TxByte>
      SPI_TxByte(*buff++);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fede 	bl	80011ac <SPI_TxByte>
    } while (--wc);
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	73bb      	strb	r3, [r7, #14]
 80013f6:	7bbb      	ldrb	r3, [r7, #14]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1eb      	bne.n	80013d4 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80013fc:	f7ff fef0 	bl	80011e0 <SPI_RxByte>
    SPI_RxByte();
 8001400:	f7ff feee 	bl	80011e0 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001404:	e00b      	b.n	800141e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001406:	f7ff feeb 	bl	80011e0 <SPI_RxByte>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	2b05      	cmp	r3, #5
 8001416:	d006      	beq.n	8001426 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001418:	7b7b      	ldrb	r3, [r7, #13]
 800141a:	3301      	adds	r3, #1
 800141c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800141e:	7b7b      	ldrb	r3, [r7, #13]
 8001420:	2b40      	cmp	r3, #64	@ 0x40
 8001422:	d9f0      	bls.n	8001406 <SD_TxDataBlock+0x62>
 8001424:	e000      	b.n	8001428 <SD_TxDataBlock+0x84>
        break;
 8001426:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001428:	bf00      	nop
 800142a:	f7ff fed9 	bl	80011e0 <SPI_RxByte>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0fa      	beq.n	800142a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	f003 031f 	and.w	r3, r3, #31
 800143a:	2b05      	cmp	r3, #5
 800143c:	d101      	bne.n	8001442 <SD_TxDataBlock+0x9e>
    return TRUE;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001458:	f7ff feee 	bl	8001238 <SD_ReadyWait>
 800145c:	4603      	mov	r3, r0
 800145e:	2bff      	cmp	r3, #255	@ 0xff
 8001460:	d001      	beq.n	8001466 <SD_SendCmd+0x1a>
    return 0xFF;
 8001462:	23ff      	movs	r3, #255	@ 0xff
 8001464:	e040      	b.n	80014e8 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fe9f 	bl	80011ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	0e1b      	lsrs	r3, r3, #24
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fe99 	bl	80011ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	0c1b      	lsrs	r3, r3, #16
 800147e:	b2db      	uxtb	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fe93 	bl	80011ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	b2db      	uxtb	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fe8d 	bl	80011ac <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fe88 	bl	80011ac <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2b40      	cmp	r3, #64	@ 0x40
 80014a4:	d101      	bne.n	80014aa <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80014a6:	2395      	movs	r3, #149	@ 0x95
 80014a8:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b48      	cmp	r3, #72	@ 0x48
 80014ae:	d101      	bne.n	80014b4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80014b0:	2387      	movs	r3, #135	@ 0x87
 80014b2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fe78 	bl	80011ac <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	2b4c      	cmp	r3, #76	@ 0x4c
 80014c0:	d101      	bne.n	80014c6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80014c2:	f7ff fe8d 	bl	80011e0 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80014c6:	230a      	movs	r3, #10
 80014c8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80014ca:	f7ff fe89 	bl	80011e0 <SPI_RxByte>
 80014ce:	4603      	mov	r3, r0
 80014d0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80014d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	da05      	bge.n	80014e6 <SD_SendCmd+0x9a>
 80014da:	7bbb      	ldrb	r3, [r7, #14]
 80014dc:	3b01      	subs	r3, #1
 80014de:	73bb      	strb	r3, [r7, #14]
 80014e0:	7bbb      	ldrb	r3, [r7, #14]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f1      	bne.n	80014ca <SD_SendCmd+0x7e>
  
  return res;
 80014e6:	7b7b      	ldrb	r3, [r7, #13]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001500:	2301      	movs	r3, #1
 8001502:	e0d5      	b.n	80016b0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001504:	4b6c      	ldr	r3, [pc, #432]	@ (80016b8 <SD_disk_initialize+0x1c8>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <SD_disk_initialize+0x2a>
    return Stat;        
 8001512:	4b69      	ldr	r3, [pc, #420]	@ (80016b8 <SD_disk_initialize+0x1c8>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	e0ca      	b.n	80016b0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800151a:	f7ff fea9 	bl	8001270 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800151e:	f7ff fe2d 	bl	800117c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001526:	2100      	movs	r1, #0
 8001528:	2040      	movs	r0, #64	@ 0x40
 800152a:	f7ff ff8f 	bl	800144c <SD_SendCmd>
 800152e:	4603      	mov	r3, r0
 8001530:	2b01      	cmp	r3, #1
 8001532:	f040 80a5 	bne.w	8001680 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001536:	4b61      	ldr	r3, [pc, #388]	@ (80016bc <SD_disk_initialize+0x1cc>)
 8001538:	2264      	movs	r2, #100	@ 0x64
 800153a:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 800153c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001540:	2048      	movs	r0, #72	@ 0x48
 8001542:	f7ff ff83 	bl	800144c <SD_SendCmd>
 8001546:	4603      	mov	r3, r0
 8001548:	2b01      	cmp	r3, #1
 800154a:	d158      	bne.n	80015fe <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e00c      	b.n	800156c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001552:	7bfc      	ldrb	r4, [r7, #15]
 8001554:	f7ff fe44 	bl	80011e0 <SPI_RxByte>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	f104 0310 	add.w	r3, r4, #16
 8001560:	443b      	add	r3, r7
 8001562:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	3301      	adds	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	2b03      	cmp	r3, #3
 8001570:	d9ef      	bls.n	8001552 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001572:	7abb      	ldrb	r3, [r7, #10]
 8001574:	2b01      	cmp	r3, #1
 8001576:	f040 8083 	bne.w	8001680 <SD_disk_initialize+0x190>
 800157a:	7afb      	ldrb	r3, [r7, #11]
 800157c:	2baa      	cmp	r3, #170	@ 0xaa
 800157e:	d17f      	bne.n	8001680 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001580:	2100      	movs	r1, #0
 8001582:	2077      	movs	r0, #119	@ 0x77
 8001584:	f7ff ff62 	bl	800144c <SD_SendCmd>
 8001588:	4603      	mov	r3, r0
 800158a:	2b01      	cmp	r3, #1
 800158c:	d807      	bhi.n	800159e <SD_disk_initialize+0xae>
 800158e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001592:	2069      	movs	r0, #105	@ 0x69
 8001594:	f7ff ff5a 	bl	800144c <SD_SendCmd>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800159e:	4b47      	ldr	r3, [pc, #284]	@ (80016bc <SD_disk_initialize+0x1cc>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1eb      	bne.n	8001580 <SD_disk_initialize+0x90>
 80015a8:	e000      	b.n	80015ac <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80015aa:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80015ac:	4b43      	ldr	r3, [pc, #268]	@ (80016bc <SD_disk_initialize+0x1cc>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d064      	beq.n	8001680 <SD_disk_initialize+0x190>
 80015b6:	2100      	movs	r1, #0
 80015b8:	207a      	movs	r0, #122	@ 0x7a
 80015ba:	f7ff ff47 	bl	800144c <SD_SendCmd>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d15d      	bne.n	8001680 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e00c      	b.n	80015e4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80015ca:	7bfc      	ldrb	r4, [r7, #15]
 80015cc:	f7ff fe08 	bl	80011e0 <SPI_RxByte>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	f104 0310 	add.w	r3, r4, #16
 80015d8:	443b      	add	r3, r7
 80015da:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	3301      	adds	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d9ef      	bls.n	80015ca <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80015ea:	7a3b      	ldrb	r3, [r7, #8]
 80015ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SD_disk_initialize+0x108>
 80015f4:	2306      	movs	r3, #6
 80015f6:	e000      	b.n	80015fa <SD_disk_initialize+0x10a>
 80015f8:	2302      	movs	r3, #2
 80015fa:	73bb      	strb	r3, [r7, #14]
 80015fc:	e040      	b.n	8001680 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80015fe:	2100      	movs	r1, #0
 8001600:	2077      	movs	r0, #119	@ 0x77
 8001602:	f7ff ff23 	bl	800144c <SD_SendCmd>
 8001606:	4603      	mov	r3, r0
 8001608:	2b01      	cmp	r3, #1
 800160a:	d808      	bhi.n	800161e <SD_disk_initialize+0x12e>
 800160c:	2100      	movs	r1, #0
 800160e:	2069      	movs	r0, #105	@ 0x69
 8001610:	f7ff ff1c 	bl	800144c <SD_SendCmd>
 8001614:	4603      	mov	r3, r0
 8001616:	2b01      	cmp	r3, #1
 8001618:	d801      	bhi.n	800161e <SD_disk_initialize+0x12e>
 800161a:	2302      	movs	r3, #2
 800161c:	e000      	b.n	8001620 <SD_disk_initialize+0x130>
 800161e:	2301      	movs	r3, #1
 8001620:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001622:	7bbb      	ldrb	r3, [r7, #14]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d10e      	bne.n	8001646 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001628:	2100      	movs	r1, #0
 800162a:	2077      	movs	r0, #119	@ 0x77
 800162c:	f7ff ff0e 	bl	800144c <SD_SendCmd>
 8001630:	4603      	mov	r3, r0
 8001632:	2b01      	cmp	r3, #1
 8001634:	d80e      	bhi.n	8001654 <SD_disk_initialize+0x164>
 8001636:	2100      	movs	r1, #0
 8001638:	2069      	movs	r0, #105	@ 0x69
 800163a:	f7ff ff07 	bl	800144c <SD_SendCmd>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d107      	bne.n	8001654 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001644:	e00d      	b.n	8001662 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001646:	2100      	movs	r1, #0
 8001648:	2041      	movs	r0, #65	@ 0x41
 800164a:	f7ff feff 	bl	800144c <SD_SendCmd>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001654:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <SD_disk_initialize+0x1cc>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1e1      	bne.n	8001622 <SD_disk_initialize+0x132>
 800165e:	e000      	b.n	8001662 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001660:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <SD_disk_initialize+0x1cc>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	d007      	beq.n	800167c <SD_disk_initialize+0x18c>
 800166c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001670:	2050      	movs	r0, #80	@ 0x50
 8001672:	f7ff feeb 	bl	800144c <SD_SendCmd>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001680:	4a0f      	ldr	r2, [pc, #60]	@ (80016c0 <SD_disk_initialize+0x1d0>)
 8001682:	7bbb      	ldrb	r3, [r7, #14]
 8001684:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001686:	f7ff fd85 	bl	8001194 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800168a:	f7ff fda9 	bl	80011e0 <SPI_RxByte>
  
  if (type) 
 800168e:	7bbb      	ldrb	r3, [r7, #14]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d008      	beq.n	80016a6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <SD_disk_initialize+0x1c8>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b2db      	uxtb	r3, r3
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <SD_disk_initialize+0x1c8>)
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e001      	b.n	80016aa <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80016a6:	f7ff fe2f 	bl	8001308 <SD_PowerOff>
  }
  
  return Stat;
 80016aa:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <SD_disk_initialize+0x1c8>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b2db      	uxtb	r3, r3
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd90      	pop	{r4, r7, pc}
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000999 	.word	0x20000999
 80016c0:	200003bc 	.word	0x200003bc

080016c4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80016d4:	2301      	movs	r3, #1
 80016d6:	e002      	b.n	80016de <SD_disk_status+0x1a>
  
  return Stat;
 80016d8:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <SD_disk_status+0x28>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b2db      	uxtb	r3, r3
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000000 	.word	0x20000000

080016f0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001700:	7bfb      	ldrb	r3, [r7, #15]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d102      	bne.n	800170c <SD_disk_read+0x1c>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <SD_disk_read+0x20>
    return RES_PARERR;
 800170c:	2304      	movs	r3, #4
 800170e:	e051      	b.n	80017b4 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001710:	4b2a      	ldr	r3, [pc, #168]	@ (80017bc <SD_disk_read+0xcc>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b2db      	uxtb	r3, r3
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800171e:	2303      	movs	r3, #3
 8001720:	e048      	b.n	80017b4 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001722:	4b27      	ldr	r3, [pc, #156]	@ (80017c0 <SD_disk_read+0xd0>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	025b      	lsls	r3, r3, #9
 8001732:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001734:	f7ff fd22 	bl	800117c <SELECT>
  
  if (count == 1) 
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d111      	bne.n	8001762 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	2051      	movs	r0, #81	@ 0x51
 8001742:	f7ff fe83 	bl	800144c <SD_SendCmd>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d129      	bne.n	80017a0 <SD_disk_read+0xb0>
 800174c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001750:	68b8      	ldr	r0, [r7, #8]
 8001752:	f7ff fdf1 	bl	8001338 <SD_RxDataBlock>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d021      	beq.n	80017a0 <SD_disk_read+0xb0>
      count = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	e01e      	b.n	80017a0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	2052      	movs	r0, #82	@ 0x52
 8001766:	f7ff fe71 	bl	800144c <SD_SendCmd>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d117      	bne.n	80017a0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001770:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001774:	68b8      	ldr	r0, [r7, #8]
 8001776:	f7ff fddf 	bl	8001338 <SD_RxDataBlock>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00a      	beq.n	8001796 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001786:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	3b01      	subs	r3, #1
 800178c:	603b      	str	r3, [r7, #0]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1ed      	bne.n	8001770 <SD_disk_read+0x80>
 8001794:	e000      	b.n	8001798 <SD_disk_read+0xa8>
          break;
 8001796:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001798:	2100      	movs	r1, #0
 800179a:	204c      	movs	r0, #76	@ 0x4c
 800179c:	f7ff fe56 	bl	800144c <SD_SendCmd>
    }
  }
  
  DESELECT();
 80017a0:	f7ff fcf8 	bl	8001194 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80017a4:	f7ff fd1c 	bl	80011e0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf14      	ite	ne
 80017ae:	2301      	movne	r3, #1
 80017b0:	2300      	moveq	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000000 	.word	0x20000000
 80017c0:	200003bc 	.word	0x200003bc

080017c4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	603b      	str	r3, [r7, #0]
 80017d0:	4603      	mov	r3, r0
 80017d2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <SD_disk_write+0x1c>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <SD_disk_write+0x20>
    return RES_PARERR;
 80017e0:	2304      	movs	r3, #4
 80017e2:	e06b      	b.n	80018bc <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80017e4:	4b37      	ldr	r3, [pc, #220]	@ (80018c4 <SD_disk_write+0x100>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e062      	b.n	80018bc <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80017f6:	4b33      	ldr	r3, [pc, #204]	@ (80018c4 <SD_disk_write+0x100>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001804:	2302      	movs	r3, #2
 8001806:	e059      	b.n	80018bc <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001808:	4b2f      	ldr	r3, [pc, #188]	@ (80018c8 <SD_disk_write+0x104>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	025b      	lsls	r3, r3, #9
 8001818:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800181a:	f7ff fcaf 	bl	800117c <SELECT>
  
  if (count == 1) 
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d110      	bne.n	8001846 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	2058      	movs	r0, #88	@ 0x58
 8001828:	f7ff fe10 	bl	800144c <SD_SendCmd>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d13a      	bne.n	80018a8 <SD_disk_write+0xe4>
 8001832:	21fe      	movs	r1, #254	@ 0xfe
 8001834:	68b8      	ldr	r0, [r7, #8]
 8001836:	f7ff fdb5 	bl	80013a4 <SD_TxDataBlock>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d033      	beq.n	80018a8 <SD_disk_write+0xe4>
      count = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	e030      	b.n	80018a8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001846:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <SD_disk_write+0x104>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001852:	2100      	movs	r1, #0
 8001854:	2077      	movs	r0, #119	@ 0x77
 8001856:	f7ff fdf9 	bl	800144c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800185a:	6839      	ldr	r1, [r7, #0]
 800185c:	2057      	movs	r0, #87	@ 0x57
 800185e:	f7ff fdf5 	bl	800144c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	2059      	movs	r0, #89	@ 0x59
 8001866:	f7ff fdf1 	bl	800144c <SD_SendCmd>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d11b      	bne.n	80018a8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001870:	21fc      	movs	r1, #252	@ 0xfc
 8001872:	68b8      	ldr	r0, [r7, #8]
 8001874:	f7ff fd96 	bl	80013a4 <SD_TxDataBlock>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00a      	beq.n	8001894 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001884:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	3b01      	subs	r3, #1
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1ee      	bne.n	8001870 <SD_disk_write+0xac>
 8001892:	e000      	b.n	8001896 <SD_disk_write+0xd2>
          break;
 8001894:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001896:	21fd      	movs	r1, #253	@ 0xfd
 8001898:	2000      	movs	r0, #0
 800189a:	f7ff fd83 	bl	80013a4 <SD_TxDataBlock>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <SD_disk_write+0xe4>
      {        
        count = 1;
 80018a4:	2301      	movs	r3, #1
 80018a6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80018a8:	f7ff fc74 	bl	8001194 <DESELECT>
  SPI_RxByte();
 80018ac:	f7ff fc98 	bl	80011e0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf14      	ite	ne
 80018b6:	2301      	movne	r3, #1
 80018b8:	2300      	moveq	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000000 	.word	0x20000000
 80018c8:	200003bc 	.word	0x200003bc

080018cc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b08b      	sub	sp, #44	@ 0x2c
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	603a      	str	r2, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
 80018d8:	460b      	mov	r3, r1
 80018da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80018e6:	2304      	movs	r3, #4
 80018e8:	e119      	b.n	8001b1e <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	2b05      	cmp	r3, #5
 80018f4:	d129      	bne.n	800194a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d017      	beq.n	800192e <SD_disk_ioctl+0x62>
 80018fe:	2b02      	cmp	r3, #2
 8001900:	dc1f      	bgt.n	8001942 <SD_disk_ioctl+0x76>
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <SD_disk_ioctl+0x40>
 8001906:	2b01      	cmp	r3, #1
 8001908:	d00b      	beq.n	8001922 <SD_disk_ioctl+0x56>
 800190a:	e01a      	b.n	8001942 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800190c:	f7ff fd08 	bl	8001320 <SD_CheckPower>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001916:	f7ff fcf7 	bl	8001308 <SD_PowerOff>
      res = RES_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001920:	e0fb      	b.n	8001b1a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001922:	f7ff fca5 	bl	8001270 <SD_PowerOn>
      res = RES_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800192c:	e0f5      	b.n	8001b1a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	1c5c      	adds	r4, r3, #1
 8001932:	f7ff fcf5 	bl	8001320 <SD_CheckPower>
 8001936:	4603      	mov	r3, r0
 8001938:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800193a:	2300      	movs	r3, #0
 800193c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001940:	e0eb      	b.n	8001b1a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001942:	2304      	movs	r3, #4
 8001944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001948:	e0e7      	b.n	8001b1a <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800194a:	4b77      	ldr	r3, [pc, #476]	@ (8001b28 <SD_disk_ioctl+0x25c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001958:	2303      	movs	r3, #3
 800195a:	e0e0      	b.n	8001b1e <SD_disk_ioctl+0x252>
    
    SELECT();
 800195c:	f7ff fc0e 	bl	800117c <SELECT>
    
    switch (ctrl) 
 8001960:	79bb      	ldrb	r3, [r7, #6]
 8001962:	2b0d      	cmp	r3, #13
 8001964:	f200 80ca 	bhi.w	8001afc <SD_disk_ioctl+0x230>
 8001968:	a201      	add	r2, pc, #4	@ (adr r2, 8001970 <SD_disk_ioctl+0xa4>)
 800196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196e:	bf00      	nop
 8001970:	08001a67 	.word	0x08001a67
 8001974:	080019a9 	.word	0x080019a9
 8001978:	08001a57 	.word	0x08001a57
 800197c:	08001afd 	.word	0x08001afd
 8001980:	08001afd 	.word	0x08001afd
 8001984:	08001afd 	.word	0x08001afd
 8001988:	08001afd 	.word	0x08001afd
 800198c:	08001afd 	.word	0x08001afd
 8001990:	08001afd 	.word	0x08001afd
 8001994:	08001afd 	.word	0x08001afd
 8001998:	08001afd 	.word	0x08001afd
 800199c:	08001a79 	.word	0x08001a79
 80019a0:	08001a9d 	.word	0x08001a9d
 80019a4:	08001ac1 	.word	0x08001ac1
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80019a8:	2100      	movs	r1, #0
 80019aa:	2049      	movs	r0, #73	@ 0x49
 80019ac:	f7ff fd4e 	bl	800144c <SD_SendCmd>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f040 80a6 	bne.w	8001b04 <SD_disk_ioctl+0x238>
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	2110      	movs	r1, #16
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fcba 	bl	8001338 <SD_RxDataBlock>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 809c 	beq.w	8001b04 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 80019cc:	7b3b      	ldrb	r3, [r7, #12]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d10d      	bne.n	80019f2 <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80019d6:	7d7b      	ldrb	r3, [r7, #21]
 80019d8:	461a      	mov	r2, r3
 80019da:	7d3b      	ldrb	r3, [r7, #20]
 80019dc:	021b      	lsls	r3, r3, #8
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80019e8:	8bfb      	ldrh	r3, [r7, #30]
 80019ea:	029a      	lsls	r2, r3, #10
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e02d      	b.n	8001a4e <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80019f2:	7c7b      	ldrb	r3, [r7, #17]
 80019f4:	f003 030f 	and.w	r3, r3, #15
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	7dbb      	ldrb	r3, [r7, #22]
 80019fc:	09db      	lsrs	r3, r3, #7
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	7d7b      	ldrb	r3, [r7, #21]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f003 0306 	and.w	r3, r3, #6
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	3302      	adds	r3, #2
 8001a16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a1a:	7d3b      	ldrb	r3, [r7, #20]
 8001a1c:	099b      	lsrs	r3, r3, #6
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	7cfb      	ldrb	r3, [r7, #19]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	7cbb      	ldrb	r3, [r7, #18]
 8001a2e:	029b      	lsls	r3, r3, #10
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001a40:	8bfa      	ldrh	r2, [r7, #30]
 8001a42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a46:	3b09      	subs	r3, #9
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001a54:	e056      	b.n	8001b04 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a5c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001a64:	e055      	b.n	8001b12 <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001a66:	f7ff fbe7 	bl	8001238 <SD_ReadyWait>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2bff      	cmp	r3, #255	@ 0xff
 8001a6e:	d14b      	bne.n	8001b08 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001a76:	e047      	b.n	8001b08 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2049      	movs	r0, #73	@ 0x49
 8001a7c:	f7ff fce6 	bl	800144c <SD_SendCmd>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d142      	bne.n	8001b0c <SD_disk_ioctl+0x240>
 8001a86:	2110      	movs	r1, #16
 8001a88:	6a38      	ldr	r0, [r7, #32]
 8001a8a:	f7ff fc55 	bl	8001338 <SD_RxDataBlock>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d03b      	beq.n	8001b0c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001a9a:	e037      	b.n	8001b0c <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	204a      	movs	r0, #74	@ 0x4a
 8001aa0:	f7ff fcd4 	bl	800144c <SD_SendCmd>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d132      	bne.n	8001b10 <SD_disk_ioctl+0x244>
 8001aaa:	2110      	movs	r1, #16
 8001aac:	6a38      	ldr	r0, [r7, #32]
 8001aae:	f7ff fc43 	bl	8001338 <SD_RxDataBlock>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d02b      	beq.n	8001b10 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001abe:	e027      	b.n	8001b10 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	207a      	movs	r0, #122	@ 0x7a
 8001ac4:	f7ff fcc2 	bl	800144c <SD_SendCmd>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d116      	bne.n	8001afc <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001ad4:	e00b      	b.n	8001aee <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8001ad6:	6a3c      	ldr	r4, [r7, #32]
 8001ad8:	1c63      	adds	r3, r4, #1
 8001ada:	623b      	str	r3, [r7, #32]
 8001adc:	f7ff fb80 	bl	80011e0 <SPI_RxByte>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001ae4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001aee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d9ef      	bls.n	8001ad6 <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001afc:	2304      	movs	r3, #4
 8001afe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b02:	e006      	b.n	8001b12 <SD_disk_ioctl+0x246>
      break;
 8001b04:	bf00      	nop
 8001b06:	e004      	b.n	8001b12 <SD_disk_ioctl+0x246>
      break;
 8001b08:	bf00      	nop
 8001b0a:	e002      	b.n	8001b12 <SD_disk_ioctl+0x246>
      break;
 8001b0c:	bf00      	nop
 8001b0e:	e000      	b.n	8001b12 <SD_disk_ioctl+0x246>
      break;
 8001b10:	bf00      	nop
    }
    
    DESELECT();
 8001b12:	f7ff fb3f 	bl	8001194 <DESELECT>
    SPI_RxByte();
 8001b16:	f7ff fb63 	bl	80011e0 <SPI_RxByte>
  }
  
  return res;
 8001b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	372c      	adds	r7, #44	@ 0x2c
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd90      	pop	{r4, r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000000 	.word	0x20000000

08001b2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	4a06      	ldr	r2, [pc, #24]	@ (8001b5c <vApplicationGetIdleTaskMemory+0x30>)
 8001b42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2280      	movs	r2, #128	@ 0x80
 8001b48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	200003d8 	.word	0x200003d8
 8001b5c:	2000042c 	.word	0x2000042c

08001b60 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001b60:	b5b0      	push	{r4, r5, r7, lr}
 8001b62:	b0aa      	sub	sp, #168	@ 0xa8
 8001b64:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_5ms */
  osThreadDef(Task_5ms, Task5ms, osPriorityNormal, 0, 128);
 8001b66:	4b3a      	ldr	r3, [pc, #232]	@ (8001c50 <MX_FREERTOS_Init+0xf0>)
 8001b68:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8001b6c:	461d      	mov	r5, r3
 8001b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_5msHandle = osThreadCreate(osThread(Task_5ms), NULL);
 8001b7a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f00a f801 	bl	800bb88 <osThreadCreate>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4a32      	ldr	r2, [pc, #200]	@ (8001c54 <MX_FREERTOS_Init+0xf4>)
 8001b8a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, Task10ms, osPriorityNormal, 0, 128);
 8001b8c:	4b32      	ldr	r3, [pc, #200]	@ (8001c58 <MX_FREERTOS_Init+0xf8>)
 8001b8e:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001b92:	461d      	mov	r5, r3
 8001b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 8001ba0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f009 ffee 	bl	800bb88 <osThreadCreate>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4a2b      	ldr	r2, [pc, #172]	@ (8001c5c <MX_FREERTOS_Init+0xfc>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_50ms */
  osThreadDef(Task_50ms, Task50ms, osPriorityNormal, 0, 128);
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <MX_FREERTOS_Init+0x100>)
 8001bb4:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001bb8:	461d      	mov	r5, r3
 8001bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_50msHandle = osThreadCreate(osThread(Task_50ms), NULL);
 8001bc6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f009 ffdb 	bl	800bb88 <osThreadCreate>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a23      	ldr	r2, [pc, #140]	@ (8001c64 <MX_FREERTOS_Init+0x104>)
 8001bd6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, Task100ms, osPriorityNormal, 0, 128);
 8001bd8:	4b23      	ldr	r3, [pc, #140]	@ (8001c68 <MX_FREERTOS_Init+0x108>)
 8001bda:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001bde:	461d      	mov	r5, r3
 8001be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001be8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 8001bec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f009 ffc8 	bl	800bb88 <osThreadCreate>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8001c6c <MX_FREERTOS_Init+0x10c>)
 8001bfc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_500ms */
  osThreadDef(Task_500ms, Task500ms, osPriorityNormal, 0, 128);
 8001bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8001c70 <MX_FREERTOS_Init+0x110>)
 8001c00:	f107 041c 	add.w	r4, r7, #28
 8001c04:	461d      	mov	r5, r3
 8001c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_500msHandle = osThreadCreate(osThread(Task_500ms), NULL);
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f009 ffb5 	bl	800bb88 <osThreadCreate>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4a14      	ldr	r2, [pc, #80]	@ (8001c74 <MX_FREERTOS_Init+0x114>)
 8001c22:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, Task1ms, osPriorityNormal, 0, 128);
 8001c24:	4b14      	ldr	r3, [pc, #80]	@ (8001c78 <MX_FREERTOS_Init+0x118>)
 8001c26:	463c      	mov	r4, r7
 8001c28:	461d      	mov	r5, r3
 8001c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 8001c36:	463b      	mov	r3, r7
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f009 ffa4 	bl	800bb88 <osThreadCreate>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4a0e      	ldr	r2, [pc, #56]	@ (8001c7c <MX_FREERTOS_Init+0x11c>)
 8001c44:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001c46:	bf00      	nop
 8001c48:	37a8      	adds	r7, #168	@ 0xa8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	0800f7c4 	.word	0x0800f7c4
 8001c54:	200003c0 	.word	0x200003c0
 8001c58:	0800f7ec 	.word	0x0800f7ec
 8001c5c:	200003c4 	.word	0x200003c4
 8001c60:	0800f814 	.word	0x0800f814
 8001c64:	200003c8 	.word	0x200003c8
 8001c68:	0800f83c 	.word	0x0800f83c
 8001c6c:	200003cc 	.word	0x200003cc
 8001c70:	0800f864 	.word	0x0800f864
 8001c74:	200003d0 	.word	0x200003d0
 8001c78:	0800f88c 	.word	0x0800f88c
 8001c7c:	200003d4 	.word	0x200003d4

08001c80 <Task5ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task5ms */
void Task5ms(void const * argument)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task5ms */
	init_task_5ms();
 8001c88:	f002 ff2a 	bl	8004ae0 <init_task_5ms>
  /* Infinite loop */
  for(;;)
  {
	task_5ms();
 8001c8c:	f002 ff52 	bl	8004b34 <task_5ms>
    osDelay(5);
 8001c90:	2005      	movs	r0, #5
 8001c92:	f009 ffc5 	bl	800bc20 <osDelay>
	task_5ms();
 8001c96:	bf00      	nop
 8001c98:	e7f8      	b.n	8001c8c <Task5ms+0xc>

08001c9a <Task10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task10ms */
void Task10ms(void const * argument)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task10ms */
	init_task_10ms();
 8001ca2:	f002 ff23 	bl	8004aec <init_task_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 8001ca6:	f002 ff51 	bl	8004b4c <task_10ms>
    osDelay(10);
 8001caa:	200a      	movs	r0, #10
 8001cac:	f009 ffb8 	bl	800bc20 <osDelay>
	task_10ms();
 8001cb0:	bf00      	nop
 8001cb2:	e7f8      	b.n	8001ca6 <Task10ms+0xc>

08001cb4 <Task50ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task50ms */
void Task50ms(void const * argument)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task50ms */
	init_task_50ms();
 8001cbc:	f002 ff1d 	bl	8004afa <init_task_50ms>
  /* Infinite loop */
  for(;;)
  {
	task_50ms();
 8001cc0:	f002 ff4b 	bl	8004b5a <task_50ms>
    osDelay(50);
 8001cc4:	2032      	movs	r0, #50	@ 0x32
 8001cc6:	f009 ffab 	bl	800bc20 <osDelay>
	task_50ms();
 8001cca:	bf00      	nop
 8001ccc:	e7f8      	b.n	8001cc0 <Task50ms+0xc>

08001cce <Task100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task100ms */
void Task100ms(void const * argument)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task100ms */
	init_task_100ms();
 8001cd6:	f002 ff17 	bl	8004b08 <init_task_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 8001cda:	f002 ff44 	bl	8004b66 <task_100ms>
    osDelay(100);
 8001cde:	2064      	movs	r0, #100	@ 0x64
 8001ce0:	f009 ff9e 	bl	800bc20 <osDelay>
	task_100ms();
 8001ce4:	bf00      	nop
 8001ce6:	e7f8      	b.n	8001cda <Task100ms+0xc>

08001ce8 <Task500ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task500ms */
void Task500ms(void const * argument)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task500ms */
	init_task_500ms();
 8001cf0:	f002 ff11 	bl	8004b16 <init_task_500ms>
  /* Infinite loop */
  for(;;)
  {
	task_500ms();
 8001cf4:	f002 ff3e 	bl	8004b74 <task_500ms>
    osDelay(500);
 8001cf8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cfc:	f009 ff90 	bl	800bc20 <osDelay>
	task_500ms();
 8001d00:	bf00      	nop
 8001d02:	e7f7      	b.n	8001cf4 <Task500ms+0xc>

08001d04 <Task1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1ms */
void Task1ms(void const * argument)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1ms */
	init_task_1ms();
 8001d0c:	f002 fee2 	bl	8004ad4 <init_task_1ms>
  /* Infinite loop */
  for(;;)
  {
	task_1ms();
 8001d10:	f002 ff08 	bl	8004b24 <task_1ms>
    osDelay(1);
 8001d14:	2001      	movs	r0, #1
 8001d16:	f009 ff83 	bl	800bc20 <osDelay>
	task_1ms();
 8001d1a:	bf00      	nop
 8001d1c:	e7f8      	b.n	8001d10 <Task1ms+0xc>
	...

08001d20 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	@ 0x28
 8001d24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
 8001d34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	4b56      	ldr	r3, [pc, #344]	@ (8001e94 <MX_GPIO_Init+0x174>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a55      	ldr	r2, [pc, #340]	@ (8001e94 <MX_GPIO_Init+0x174>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b53      	ldr	r3, [pc, #332]	@ (8001e94 <MX_GPIO_Init+0x174>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	4b4f      	ldr	r3, [pc, #316]	@ (8001e94 <MX_GPIO_Init+0x174>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	4a4e      	ldr	r2, [pc, #312]	@ (8001e94 <MX_GPIO_Init+0x174>)
 8001d5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d62:	4b4c      	ldr	r3, [pc, #304]	@ (8001e94 <MX_GPIO_Init+0x174>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	4b48      	ldr	r3, [pc, #288]	@ (8001e94 <MX_GPIO_Init+0x174>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	4a47      	ldr	r2, [pc, #284]	@ (8001e94 <MX_GPIO_Init+0x174>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7e:	4b45      	ldr	r3, [pc, #276]	@ (8001e94 <MX_GPIO_Init+0x174>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	4b41      	ldr	r3, [pc, #260]	@ (8001e94 <MX_GPIO_Init+0x174>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a40      	ldr	r2, [pc, #256]	@ (8001e94 <MX_GPIO_Init+0x174>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e94 <MX_GPIO_Init+0x174>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 8001da6:	2200      	movs	r2, #0
 8001da8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dac:	483a      	ldr	r0, [pc, #232]	@ (8001e98 <MX_GPIO_Init+0x178>)
 8001dae:	f004 fa37 	bl	8006220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|BMP_CS_Pin, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2105      	movs	r1, #5
 8001db6:	4839      	ldr	r0, [pc, #228]	@ (8001e9c <MX_GPIO_Init+0x17c>)
 8001db8:	f004 fa32 	bl	8006220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, uLed_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8001dc2:	4837      	ldr	r0, [pc, #220]	@ (8001ea0 <MX_GPIO_Init+0x180>)
 8001dc4:	f004 fa2c 	bl	8006220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CS_Pin;
 8001dc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CS_GPIO_Port, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	482d      	ldr	r0, [pc, #180]	@ (8001e98 <MX_GPIO_Init+0x178>)
 8001de2:	f004 f899 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001de6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dec:	2303      	movs	r3, #3
 8001dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4827      	ldr	r0, [pc, #156]	@ (8001e98 <MX_GPIO_Init+0x178>)
 8001dfc:	f004 f88c 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA4 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_12;
 8001e00:	f241 0315 	movw	r3, #4117	@ 0x1015
 8001e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e06:	2303      	movs	r3, #3
 8001e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4822      	ldr	r0, [pc, #136]	@ (8001ea0 <MX_GPIO_Init+0x180>)
 8001e16:	f004 f87f 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|BMP_CS_Pin;
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	481a      	ldr	r0, [pc, #104]	@ (8001e9c <MX_GPIO_Init+0x17c>)
 8001e32:	f004 f871 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 8001e36:	f240 2302 	movw	r3, #514	@ 0x202
 8001e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4814      	ldr	r0, [pc, #80]	@ (8001e9c <MX_GPIO_Init+0x17c>)
 8001e4c:	f004 f864 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uLed_Pin;
 8001e50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uLed_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	480d      	ldr	r0, [pc, #52]	@ (8001ea0 <MX_GPIO_Init+0x180>)
 8001e6a:	f004 f855 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8001e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	4806      	ldr	r0, [pc, #24]	@ (8001ea0 <MX_GPIO_Init+0x180>)
 8001e88:	f004 f846 	bl	8005f18 <HAL_GPIO_Init>

}
 8001e8c:	bf00      	nop
 8001e8e:	3728      	adds	r7, #40	@ 0x28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	40020000 	.word	0x40020000

08001ea4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ea8:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <MX_I2C1_Init+0x54>)
 8001eaa:	4a14      	ldr	r2, [pc, #80]	@ (8001efc <MX_I2C1_Init+0x58>)
 8001eac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 8001eae:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <MX_I2C1_Init+0x54>)
 8001eb0:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001eb4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001eb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <MX_I2C1_Init+0x54>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <MX_I2C1_Init+0x54>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <MX_I2C1_Init+0x54>)
 8001ec4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ec8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <MX_I2C1_Init+0x54>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ed0:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <MX_I2C1_Init+0x54>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <MX_I2C1_Init+0x54>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <MX_I2C1_Init+0x54>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ee2:	4805      	ldr	r0, [pc, #20]	@ (8001ef8 <MX_I2C1_Init+0x54>)
 8001ee4:	f004 f9b6 	bl	8006254 <HAL_I2C_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001eee:	f000 f9f5 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000062c 	.word	0x2000062c
 8001efc:	40005400 	.word	0x40005400

08001f00 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f04:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <MX_I2C2_Init+0x50>)
 8001f06:	4a13      	ldr	r2, [pc, #76]	@ (8001f54 <MX_I2C2_Init+0x54>)
 8001f08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 200000;
 8001f0a:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <MX_I2C2_Init+0x50>)
 8001f0c:	4a12      	ldr	r2, [pc, #72]	@ (8001f58 <MX_I2C2_Init+0x58>)
 8001f0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <MX_I2C2_Init+0x50>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	@ (8001f50 <MX_I2C2_Init+0x50>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <MX_I2C2_Init+0x50>)
 8001f1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f24:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <MX_I2C2_Init+0x50>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <MX_I2C2_Init+0x50>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f30:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <MX_I2C2_Init+0x50>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <MX_I2C2_Init+0x50>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f3c:	4804      	ldr	r0, [pc, #16]	@ (8001f50 <MX_I2C2_Init+0x50>)
 8001f3e:	f004 f989 	bl	8006254 <HAL_I2C_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f48:	f000 f9c8 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000680 	.word	0x20000680
 8001f54:	40005800 	.word	0x40005800
 8001f58:	00030d40 	.word	0x00030d40

08001f5c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f60:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <MX_I2C3_Init+0x50>)
 8001f62:	4a13      	ldr	r2, [pc, #76]	@ (8001fb0 <MX_I2C3_Init+0x54>)
 8001f64:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001f66:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <MX_I2C3_Init+0x50>)
 8001f68:	4a12      	ldr	r2, [pc, #72]	@ (8001fb4 <MX_I2C3_Init+0x58>)
 8001f6a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fac <MX_I2C3_Init+0x50>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <MX_I2C3_Init+0x50>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <MX_I2C3_Init+0x50>)
 8001f7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f7e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f80:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <MX_I2C3_Init+0x50>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001f86:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <MX_I2C3_Init+0x50>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f8c:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <MX_I2C3_Init+0x50>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_I2C3_Init+0x50>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f98:	4804      	ldr	r0, [pc, #16]	@ (8001fac <MX_I2C3_Init+0x50>)
 8001f9a:	f004 f95b 	bl	8006254 <HAL_I2C_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001fa4:	f000 f99a 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200006d4 	.word	0x200006d4
 8001fb0:	40005c00 	.word	0x40005c00
 8001fb4:	000186a0 	.word	0x000186a0

08001fb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08e      	sub	sp, #56	@ 0x38
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a63      	ldr	r2, [pc, #396]	@ (8002164 <HAL_I2C_MspInit+0x1ac>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d12c      	bne.n	8002034 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
 8001fde:	4b62      	ldr	r3, [pc, #392]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a61      	ldr	r2, [pc, #388]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b5f      	ldr	r3, [pc, #380]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	623b      	str	r3, [r7, #32]
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ff6:	23c0      	movs	r3, #192	@ 0xc0
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ffa:	2312      	movs	r3, #18
 8001ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002002:	2303      	movs	r3, #3
 8002004:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002006:	2304      	movs	r3, #4
 8002008:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800200e:	4619      	mov	r1, r3
 8002010:	4856      	ldr	r0, [pc, #344]	@ (800216c <HAL_I2C_MspInit+0x1b4>)
 8002012:	f003 ff81 	bl	8005f18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	4b53      	ldr	r3, [pc, #332]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	4a52      	ldr	r2, [pc, #328]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 8002020:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002024:	6413      	str	r3, [r2, #64]	@ 0x40
 8002026:	4b50      	ldr	r3, [pc, #320]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002032:	e093      	b.n	800215c <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a4d      	ldr	r2, [pc, #308]	@ (8002170 <HAL_I2C_MspInit+0x1b8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d13d      	bne.n	80020ba <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	4b49      	ldr	r3, [pc, #292]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	4a48      	ldr	r2, [pc, #288]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	6313      	str	r3, [r2, #48]	@ 0x30
 800204e:	4b46      	ldr	r3, [pc, #280]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	61bb      	str	r3, [r7, #24]
 8002058:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800205a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002060:	2312      	movs	r3, #18
 8002062:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002068:	2303      	movs	r3, #3
 800206a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800206c:	2304      	movs	r3, #4
 800206e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002074:	4619      	mov	r1, r3
 8002076:	483d      	ldr	r0, [pc, #244]	@ (800216c <HAL_I2C_MspInit+0x1b4>)
 8002078:	f003 ff4e 	bl	8005f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800207c:	2308      	movs	r3, #8
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002080:	2312      	movs	r3, #18
 8002082:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800208c:	2309      	movs	r3, #9
 800208e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002094:	4619      	mov	r1, r3
 8002096:	4835      	ldr	r0, [pc, #212]	@ (800216c <HAL_I2C_MspInit+0x1b4>)
 8002098:	f003 ff3e 	bl	8005f18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	4b31      	ldr	r3, [pc, #196]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a4:	4a30      	ldr	r2, [pc, #192]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 80020a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	697b      	ldr	r3, [r7, #20]
}
 80020b8:	e050      	b.n	800215c <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C3)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a2d      	ldr	r2, [pc, #180]	@ (8002174 <HAL_I2C_MspInit+0x1bc>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d14b      	bne.n	800215c <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c4:	2300      	movs	r3, #0
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	4b27      	ldr	r3, [pc, #156]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020cc:	4a26      	ldr	r2, [pc, #152]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d4:	4b24      	ldr	r3, [pc, #144]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	4b20      	ldr	r3, [pc, #128]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 80020f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAG_SCL_Pin;
 80020fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002100:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002102:	2312      	movs	r3, #18
 8002104:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210a:	2303      	movs	r3, #3
 800210c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800210e:	2304      	movs	r3, #4
 8002110:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SCL_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002116:	4619      	mov	r1, r3
 8002118:	4817      	ldr	r0, [pc, #92]	@ (8002178 <HAL_I2C_MspInit+0x1c0>)
 800211a:	f003 fefd 	bl	8005f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAG_SDA_Pin;
 800211e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002124:	2312      	movs	r3, #18
 8002126:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212c:	2303      	movs	r3, #3
 800212e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002130:	2309      	movs	r3, #9
 8002132:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SDA_GPIO_Port, &GPIO_InitStruct);
 8002134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002138:	4619      	mov	r1, r3
 800213a:	480c      	ldr	r0, [pc, #48]	@ (800216c <HAL_I2C_MspInit+0x1b4>)
 800213c:	f003 feec 	bl	8005f18 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	4a07      	ldr	r2, [pc, #28]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 800214a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800214e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002150:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <HAL_I2C_MspInit+0x1b0>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002154:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
}
 800215c:	bf00      	nop
 800215e:	3738      	adds	r7, #56	@ 0x38
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40005400 	.word	0x40005400
 8002168:	40023800 	.word	0x40023800
 800216c:	40020400 	.word	0x40020400
 8002170:	40005800 	.word	0x40005800
 8002174:	40005c00 	.word	0x40005c00
 8002178:	40020000 	.word	0x40020000

0800217c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002180:	f002 fd34 	bl	8004bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002184:	f000 f830 	bl	80021e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002188:	f7ff fdca 	bl	8001d20 <MX_GPIO_Init>
  MX_DMA_Init();
 800218c:	f7fe ffc6 	bl	800111c <MX_DMA_Init>
  MX_ADC1_Init();
 8002190:	f7fe ff2e 	bl	8000ff0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002194:	f7ff fe86 	bl	8001ea4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002198:	f7ff feb2 	bl	8001f00 <MX_I2C2_Init>
  MX_I2C3_Init();
 800219c:	f7ff fede 	bl	8001f5c <MX_I2C3_Init>
  MX_SPI1_Init();
 80021a0:	f000 f8a2 	bl	80022e8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80021a4:	f000 f8d6 	bl	8002354 <MX_SPI2_Init>
  MX_SPI3_Init();
 80021a8:	f000 f90a 	bl	80023c0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80021ac:	f000 fd4c 	bl	8002c48 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80021b0:	f000 fc12 	bl	80029d8 <MX_TIM2_Init>
  MX_TIM5_Init();
 80021b4:	f000 fc86 	bl	8002ac4 <MX_TIM5_Init>
  MX_FATFS_Init();
 80021b8:	f007 fe68 	bl	8009e8c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MEMORY_init();
 80021bc:	f002 fc44 	bl	8004a48 <MEMORY_init>
  BlackBox_init();
 80021c0:	f001 ff8c 	bl	80040dc <BlackBox_init>
  TIM2->CCR4 = 1000;
 80021c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80021cc:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80021ce:	210c      	movs	r1, #12
 80021d0:	4804      	ldr	r0, [pc, #16]	@ (80021e4 <main+0x68>)
 80021d2:	f006 fceb 	bl	8008bac <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80021d6:	f7ff fcc3 	bl	8001b60 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80021da:	f009 fcce 	bl	800bb7a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021de:	bf00      	nop
 80021e0:	e7fd      	b.n	80021de <main+0x62>
 80021e2:	bf00      	nop
 80021e4:	200009a0 	.word	0x200009a0

080021e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b094      	sub	sp, #80	@ 0x50
 80021ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ee:	f107 0320 	add.w	r3, r7, #32
 80021f2:	2230      	movs	r2, #48	@ 0x30
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f00c f8de 	bl	800e3b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	609a      	str	r2, [r3, #8]
 8002208:	60da      	str	r2, [r3, #12]
 800220a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	4b27      	ldr	r3, [pc, #156]	@ (80022b0 <SystemClock_Config+0xc8>)
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	4a26      	ldr	r2, [pc, #152]	@ (80022b0 <SystemClock_Config+0xc8>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800221a:	6413      	str	r3, [r2, #64]	@ 0x40
 800221c:	4b24      	ldr	r3, [pc, #144]	@ (80022b0 <SystemClock_Config+0xc8>)
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002228:	2300      	movs	r3, #0
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	4b21      	ldr	r3, [pc, #132]	@ (80022b4 <SystemClock_Config+0xcc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a20      	ldr	r2, [pc, #128]	@ (80022b4 <SystemClock_Config+0xcc>)
 8002232:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4b1e      	ldr	r3, [pc, #120]	@ (80022b4 <SystemClock_Config+0xcc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002244:	2301      	movs	r3, #1
 8002246:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002248:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800224e:	2302      	movs	r3, #2
 8002250:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002252:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002256:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002258:	230c      	movs	r3, #12
 800225a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800225c:	2360      	movs	r3, #96	@ 0x60
 800225e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002260:	2302      	movs	r3, #2
 8002262:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002264:	2304      	movs	r3, #4
 8002266:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002268:	f107 0320 	add.w	r3, r7, #32
 800226c:	4618      	mov	r0, r3
 800226e:	f005 f815 	bl	800729c <HAL_RCC_OscConfig>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002278:	f000 f830 	bl	80022dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800227c:	230f      	movs	r3, #15
 800227e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002280:	2302      	movs	r3, #2
 8002282:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002288:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800228c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	2103      	movs	r1, #3
 8002298:	4618      	mov	r0, r3
 800229a:	f005 fa77 	bl	800778c <HAL_RCC_ClockConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80022a4:	f000 f81a 	bl	80022dc <Error_Handler>
  }
}
 80022a8:	bf00      	nop
 80022aa:	3750      	adds	r7, #80	@ 0x50
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40007000 	.word	0x40007000

080022b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a04      	ldr	r2, [pc, #16]	@ (80022d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022ca:	f002 fcb1 	bl	8004c30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40014800 	.word	0x40014800

080022dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e0:	b672      	cpsid	i
}
 80022e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <Error_Handler+0x8>

080022e8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80022ec:	4b17      	ldr	r3, [pc, #92]	@ (800234c <MX_SPI1_Init+0x64>)
 80022ee:	4a18      	ldr	r2, [pc, #96]	@ (8002350 <MX_SPI1_Init+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022f2:	4b16      	ldr	r3, [pc, #88]	@ (800234c <MX_SPI1_Init+0x64>)
 80022f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022fa:	4b14      	ldr	r3, [pc, #80]	@ (800234c <MX_SPI1_Init+0x64>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002300:	4b12      	ldr	r3, [pc, #72]	@ (800234c <MX_SPI1_Init+0x64>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002306:	4b11      	ldr	r3, [pc, #68]	@ (800234c <MX_SPI1_Init+0x64>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800230c:	4b0f      	ldr	r3, [pc, #60]	@ (800234c <MX_SPI1_Init+0x64>)
 800230e:	2200      	movs	r2, #0
 8002310:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002312:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <MX_SPI1_Init+0x64>)
 8002314:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002318:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800231a:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <MX_SPI1_Init+0x64>)
 800231c:	2200      	movs	r2, #0
 800231e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002320:	4b0a      	ldr	r3, [pc, #40]	@ (800234c <MX_SPI1_Init+0x64>)
 8002322:	2200      	movs	r2, #0
 8002324:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002326:	4b09      	ldr	r3, [pc, #36]	@ (800234c <MX_SPI1_Init+0x64>)
 8002328:	2200      	movs	r2, #0
 800232a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800232c:	4b07      	ldr	r3, [pc, #28]	@ (800234c <MX_SPI1_Init+0x64>)
 800232e:	2200      	movs	r2, #0
 8002330:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <MX_SPI1_Init+0x64>)
 8002334:	220a      	movs	r2, #10
 8002336:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002338:	4804      	ldr	r0, [pc, #16]	@ (800234c <MX_SPI1_Init+0x64>)
 800233a:	f005 fc39 	bl	8007bb0 <HAL_SPI_Init>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002344:	f7ff ffca 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000728 	.word	0x20000728
 8002350:	40013000 	.word	0x40013000

08002354 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002358:	4b17      	ldr	r3, [pc, #92]	@ (80023b8 <MX_SPI2_Init+0x64>)
 800235a:	4a18      	ldr	r2, [pc, #96]	@ (80023bc <MX_SPI2_Init+0x68>)
 800235c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800235e:	4b16      	ldr	r3, [pc, #88]	@ (80023b8 <MX_SPI2_Init+0x64>)
 8002360:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002364:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002366:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <MX_SPI2_Init+0x64>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800236c:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <MX_SPI2_Init+0x64>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002372:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <MX_SPI2_Init+0x64>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002378:	4b0f      	ldr	r3, [pc, #60]	@ (80023b8 <MX_SPI2_Init+0x64>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800237e:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <MX_SPI2_Init+0x64>)
 8002380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002384:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002386:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <MX_SPI2_Init+0x64>)
 8002388:	2218      	movs	r2, #24
 800238a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800238c:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <MX_SPI2_Init+0x64>)
 800238e:	2200      	movs	r2, #0
 8002390:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002392:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <MX_SPI2_Init+0x64>)
 8002394:	2200      	movs	r2, #0
 8002396:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002398:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <MX_SPI2_Init+0x64>)
 800239a:	2200      	movs	r2, #0
 800239c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800239e:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <MX_SPI2_Init+0x64>)
 80023a0:	220a      	movs	r2, #10
 80023a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023a4:	4804      	ldr	r0, [pc, #16]	@ (80023b8 <MX_SPI2_Init+0x64>)
 80023a6:	f005 fc03 	bl	8007bb0 <HAL_SPI_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80023b0:	f7ff ff94 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000780 	.word	0x20000780
 80023bc:	40003800 	.word	0x40003800

080023c0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80023c4:	4b17      	ldr	r3, [pc, #92]	@ (8002424 <MX_SPI3_Init+0x64>)
 80023c6:	4a18      	ldr	r2, [pc, #96]	@ (8002428 <MX_SPI3_Init+0x68>)
 80023c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023ca:	4b16      	ldr	r3, [pc, #88]	@ (8002424 <MX_SPI3_Init+0x64>)
 80023cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023d2:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <MX_SPI3_Init+0x64>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80023d8:	4b12      	ldr	r3, [pc, #72]	@ (8002424 <MX_SPI3_Init+0x64>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023de:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <MX_SPI3_Init+0x64>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002424 <MX_SPI3_Init+0x64>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <MX_SPI3_Init+0x64>)
 80023ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023f0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <MX_SPI3_Init+0x64>)
 80023f4:	2210      	movs	r2, #16
 80023f6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002424 <MX_SPI3_Init+0x64>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023fe:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <MX_SPI3_Init+0x64>)
 8002400:	2200      	movs	r2, #0
 8002402:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002404:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <MX_SPI3_Init+0x64>)
 8002406:	2200      	movs	r2, #0
 8002408:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <MX_SPI3_Init+0x64>)
 800240c:	220a      	movs	r2, #10
 800240e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002410:	4804      	ldr	r0, [pc, #16]	@ (8002424 <MX_SPI3_Init+0x64>)
 8002412:	f005 fbcd 	bl	8007bb0 <HAL_SPI_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800241c:	f7ff ff5e 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	200007d8 	.word	0x200007d8
 8002428:	40003c00 	.word	0x40003c00

0800242c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08e      	sub	sp, #56	@ 0x38
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a9d      	ldr	r2, [pc, #628]	@ (80026c0 <HAL_SPI_MspInit+0x294>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d12c      	bne.n	80024a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
 8002452:	4b9c      	ldr	r3, [pc, #624]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	4a9b      	ldr	r2, [pc, #620]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 8002458:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800245c:	6453      	str	r3, [r2, #68]	@ 0x44
 800245e:	4b99      	ldr	r3, [pc, #612]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002462:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002466:	623b      	str	r3, [r7, #32]
 8002468:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	4b95      	ldr	r3, [pc, #596]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	4a94      	ldr	r2, [pc, #592]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	6313      	str	r3, [r2, #48]	@ 0x30
 800247a:	4b92      	ldr	r3, [pc, #584]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	61fb      	str	r3, [r7, #28]
 8002484:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002486:	23e0      	movs	r3, #224	@ 0xe0
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002492:	2303      	movs	r3, #3
 8002494:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002496:	2305      	movs	r3, #5
 8002498:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800249e:	4619      	mov	r1, r3
 80024a0:	4889      	ldr	r0, [pc, #548]	@ (80026c8 <HAL_SPI_MspInit+0x29c>)
 80024a2:	f003 fd39 	bl	8005f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80024a6:	e106      	b.n	80026b6 <HAL_SPI_MspInit+0x28a>
  else if(spiHandle->Instance==SPI2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a87      	ldr	r2, [pc, #540]	@ (80026cc <HAL_SPI_MspInit+0x2a0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d162      	bne.n	8002578 <HAL_SPI_MspInit+0x14c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	4b83      	ldr	r3, [pc, #524]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	4a82      	ldr	r2, [pc, #520]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 80024bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024c2:	4b80      	ldr	r3, [pc, #512]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ca:	61bb      	str	r3, [r7, #24]
 80024cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	4b7c      	ldr	r3, [pc, #496]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	4a7b      	ldr	r2, [pc, #492]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024de:	4b79      	ldr	r3, [pc, #484]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 80024ea:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024fc:	2305      	movs	r3, #5
 80024fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002504:	4619      	mov	r1, r3
 8002506:	4872      	ldr	r0, [pc, #456]	@ (80026d0 <HAL_SPI_MspInit+0x2a4>)
 8002508:	f003 fd06 	bl	8005f18 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800250c:	4b71      	ldr	r3, [pc, #452]	@ (80026d4 <HAL_SPI_MspInit+0x2a8>)
 800250e:	4a72      	ldr	r2, [pc, #456]	@ (80026d8 <HAL_SPI_MspInit+0x2ac>)
 8002510:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002512:	4b70      	ldr	r3, [pc, #448]	@ (80026d4 <HAL_SPI_MspInit+0x2a8>)
 8002514:	2200      	movs	r2, #0
 8002516:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002518:	4b6e      	ldr	r3, [pc, #440]	@ (80026d4 <HAL_SPI_MspInit+0x2a8>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800251e:	4b6d      	ldr	r3, [pc, #436]	@ (80026d4 <HAL_SPI_MspInit+0x2a8>)
 8002520:	2200      	movs	r2, #0
 8002522:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002524:	4b6b      	ldr	r3, [pc, #428]	@ (80026d4 <HAL_SPI_MspInit+0x2a8>)
 8002526:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800252a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800252c:	4b69      	ldr	r3, [pc, #420]	@ (80026d4 <HAL_SPI_MspInit+0x2a8>)
 800252e:	2200      	movs	r2, #0
 8002530:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002532:	4b68      	ldr	r3, [pc, #416]	@ (80026d4 <HAL_SPI_MspInit+0x2a8>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002538:	4b66      	ldr	r3, [pc, #408]	@ (80026d4 <HAL_SPI_MspInit+0x2a8>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800253e:	4b65      	ldr	r3, [pc, #404]	@ (80026d4 <HAL_SPI_MspInit+0x2a8>)
 8002540:	2200      	movs	r2, #0
 8002542:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002544:	4b63      	ldr	r3, [pc, #396]	@ (80026d4 <HAL_SPI_MspInit+0x2a8>)
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800254a:	4862      	ldr	r0, [pc, #392]	@ (80026d4 <HAL_SPI_MspInit+0x2a8>)
 800254c:	f002 fee4 	bl	8005318 <HAL_DMA_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8002556:	f7ff fec1 	bl	80022dc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a5d      	ldr	r2, [pc, #372]	@ (80026d4 <HAL_SPI_MspInit+0x2a8>)
 800255e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002560:	4a5c      	ldr	r2, [pc, #368]	@ (80026d4 <HAL_SPI_MspInit+0x2a8>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	2105      	movs	r1, #5
 800256a:	2024      	movs	r0, #36	@ 0x24
 800256c:	f002 feaa 	bl	80052c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002570:	2024      	movs	r0, #36	@ 0x24
 8002572:	f002 fec3 	bl	80052fc <HAL_NVIC_EnableIRQ>
}
 8002576:	e09e      	b.n	80026b6 <HAL_SPI_MspInit+0x28a>
  else if(spiHandle->Instance==SPI3)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a57      	ldr	r2, [pc, #348]	@ (80026dc <HAL_SPI_MspInit+0x2b0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	f040 8099 	bne.w	80026b6 <HAL_SPI_MspInit+0x28a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002584:	2300      	movs	r3, #0
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	4b4e      	ldr	r3, [pc, #312]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258c:	4a4d      	ldr	r2, [pc, #308]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 800258e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002592:	6413      	str	r3, [r2, #64]	@ 0x40
 8002594:	4b4b      	ldr	r3, [pc, #300]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	4b47      	ldr	r3, [pc, #284]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a8:	4a46      	ldr	r2, [pc, #280]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 80025aa:	f043 0302 	orr.w	r3, r3, #2
 80025ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b0:	4b44      	ldr	r3, [pc, #272]	@ (80026c4 <HAL_SPI_MspInit+0x298>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NRF_SCK_Pin;
 80025bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80025ce:	2307      	movs	r3, #7
 80025d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 80025d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d6:	4619      	mov	r1, r3
 80025d8:	483d      	ldr	r0, [pc, #244]	@ (80026d0 <HAL_SPI_MspInit+0x2a4>)
 80025da:	f003 fc9d 	bl	8005f18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NRF_MISO_Pin|NRF_MOSI_Pin;
 80025de:	2330      	movs	r3, #48	@ 0x30
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e2:	2302      	movs	r3, #2
 80025e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ea:	2303      	movs	r3, #3
 80025ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025ee:	2306      	movs	r3, #6
 80025f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025f6:	4619      	mov	r1, r3
 80025f8:	4835      	ldr	r0, [pc, #212]	@ (80026d0 <HAL_SPI_MspInit+0x2a4>)
 80025fa:	f003 fc8d 	bl	8005f18 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80025fe:	4b38      	ldr	r3, [pc, #224]	@ (80026e0 <HAL_SPI_MspInit+0x2b4>)
 8002600:	4a38      	ldr	r2, [pc, #224]	@ (80026e4 <HAL_SPI_MspInit+0x2b8>)
 8002602:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8002604:	4b36      	ldr	r3, [pc, #216]	@ (80026e0 <HAL_SPI_MspInit+0x2b4>)
 8002606:	2200      	movs	r2, #0
 8002608:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800260a:	4b35      	ldr	r3, [pc, #212]	@ (80026e0 <HAL_SPI_MspInit+0x2b4>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002610:	4b33      	ldr	r3, [pc, #204]	@ (80026e0 <HAL_SPI_MspInit+0x2b4>)
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002616:	4b32      	ldr	r3, [pc, #200]	@ (80026e0 <HAL_SPI_MspInit+0x2b4>)
 8002618:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800261c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800261e:	4b30      	ldr	r3, [pc, #192]	@ (80026e0 <HAL_SPI_MspInit+0x2b4>)
 8002620:	2200      	movs	r2, #0
 8002622:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002624:	4b2e      	ldr	r3, [pc, #184]	@ (80026e0 <HAL_SPI_MspInit+0x2b4>)
 8002626:	2200      	movs	r2, #0
 8002628:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800262a:	4b2d      	ldr	r3, [pc, #180]	@ (80026e0 <HAL_SPI_MspInit+0x2b4>)
 800262c:	2200      	movs	r2, #0
 800262e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002630:	4b2b      	ldr	r3, [pc, #172]	@ (80026e0 <HAL_SPI_MspInit+0x2b4>)
 8002632:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002636:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002638:	4b29      	ldr	r3, [pc, #164]	@ (80026e0 <HAL_SPI_MspInit+0x2b4>)
 800263a:	2200      	movs	r2, #0
 800263c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800263e:	4828      	ldr	r0, [pc, #160]	@ (80026e0 <HAL_SPI_MspInit+0x2b4>)
 8002640:	f002 fe6a 	bl	8005318 <HAL_DMA_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800264a:	f7ff fe47 	bl	80022dc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a23      	ldr	r2, [pc, #140]	@ (80026e0 <HAL_SPI_MspInit+0x2b4>)
 8002652:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002654:	4a22      	ldr	r2, [pc, #136]	@ (80026e0 <HAL_SPI_MspInit+0x2b4>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800265a:	4b23      	ldr	r3, [pc, #140]	@ (80026e8 <HAL_SPI_MspInit+0x2bc>)
 800265c:	4a23      	ldr	r2, [pc, #140]	@ (80026ec <HAL_SPI_MspInit+0x2c0>)
 800265e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002660:	4b21      	ldr	r3, [pc, #132]	@ (80026e8 <HAL_SPI_MspInit+0x2bc>)
 8002662:	2200      	movs	r2, #0
 8002664:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002666:	4b20      	ldr	r3, [pc, #128]	@ (80026e8 <HAL_SPI_MspInit+0x2bc>)
 8002668:	2240      	movs	r2, #64	@ 0x40
 800266a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800266c:	4b1e      	ldr	r3, [pc, #120]	@ (80026e8 <HAL_SPI_MspInit+0x2bc>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002672:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <HAL_SPI_MspInit+0x2bc>)
 8002674:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002678:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800267a:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <HAL_SPI_MspInit+0x2bc>)
 800267c:	2200      	movs	r2, #0
 800267e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002680:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <HAL_SPI_MspInit+0x2bc>)
 8002682:	2200      	movs	r2, #0
 8002684:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8002686:	4b18      	ldr	r3, [pc, #96]	@ (80026e8 <HAL_SPI_MspInit+0x2bc>)
 8002688:	2200      	movs	r2, #0
 800268a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800268c:	4b16      	ldr	r3, [pc, #88]	@ (80026e8 <HAL_SPI_MspInit+0x2bc>)
 800268e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002692:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002694:	4b14      	ldr	r3, [pc, #80]	@ (80026e8 <HAL_SPI_MspInit+0x2bc>)
 8002696:	2200      	movs	r2, #0
 8002698:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800269a:	4813      	ldr	r0, [pc, #76]	@ (80026e8 <HAL_SPI_MspInit+0x2bc>)
 800269c:	f002 fe3c 	bl	8005318 <HAL_DMA_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 80026a6:	f7ff fe19 	bl	80022dc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a0e      	ldr	r2, [pc, #56]	@ (80026e8 <HAL_SPI_MspInit+0x2bc>)
 80026ae:	649a      	str	r2, [r3, #72]	@ 0x48
 80026b0:	4a0d      	ldr	r2, [pc, #52]	@ (80026e8 <HAL_SPI_MspInit+0x2bc>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80026b6:	bf00      	nop
 80026b8:	3738      	adds	r7, #56	@ 0x38
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40013000 	.word	0x40013000
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40003800 	.word	0x40003800
 80026d0:	40020400 	.word	0x40020400
 80026d4:	20000830 	.word	0x20000830
 80026d8:	40026058 	.word	0x40026058
 80026dc:	40003c00 	.word	0x40003c00
 80026e0:	20000890 	.word	0x20000890
 80026e4:	40026010 	.word	0x40026010
 80026e8:	200008f0 	.word	0x200008f0
 80026ec:	40026088 	.word	0x40026088

080026f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	4b12      	ldr	r3, [pc, #72]	@ (8002744 <HAL_MspInit+0x54>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	4a11      	ldr	r2, [pc, #68]	@ (8002744 <HAL_MspInit+0x54>)
 8002700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002704:	6453      	str	r3, [r2, #68]	@ 0x44
 8002706:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <HAL_MspInit+0x54>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <HAL_MspInit+0x54>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <HAL_MspInit+0x54>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002720:	6413      	str	r3, [r2, #64]	@ 0x40
 8002722:	4b08      	ldr	r3, [pc, #32]	@ (8002744 <HAL_MspInit+0x54>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272a:	603b      	str	r3, [r7, #0]
 800272c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	210f      	movs	r1, #15
 8002732:	f06f 0001 	mvn.w	r0, #1
 8002736:	f002 fdc5 	bl	80052c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800

08002748 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08c      	sub	sp, #48	@ 0x30
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	4b2e      	ldr	r3, [pc, #184]	@ (8002818 <HAL_InitTick+0xd0>)
 800275e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002760:	4a2d      	ldr	r2, [pc, #180]	@ (8002818 <HAL_InitTick+0xd0>)
 8002762:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002766:	6453      	str	r3, [r2, #68]	@ 0x44
 8002768:	4b2b      	ldr	r3, [pc, #172]	@ (8002818 <HAL_InitTick+0xd0>)
 800276a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002774:	f107 020c 	add.w	r2, r7, #12
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f005 f9e4 	bl	8007b4c <HAL_RCC_GetClockConfig>
  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002784:	f005 f9ce 	bl	8007b24 <HAL_RCC_GetPCLK2Freq>
 8002788:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800278a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278c:	4a23      	ldr	r2, [pc, #140]	@ (800281c <HAL_InitTick+0xd4>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0c9b      	lsrs	r3, r3, #18
 8002794:	3b01      	subs	r3, #1
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002798:	4b21      	ldr	r3, [pc, #132]	@ (8002820 <HAL_InitTick+0xd8>)
 800279a:	4a22      	ldr	r2, [pc, #136]	@ (8002824 <HAL_InitTick+0xdc>)
 800279c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800279e:	4b20      	ldr	r3, [pc, #128]	@ (8002820 <HAL_InitTick+0xd8>)
 80027a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027a4:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80027a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002820 <HAL_InitTick+0xd8>)
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80027ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <HAL_InitTick+0xd8>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002820 <HAL_InitTick+0xd8>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b8:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <HAL_InitTick+0xd8>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 80027be:	4818      	ldr	r0, [pc, #96]	@ (8002820 <HAL_InitTick+0xd8>)
 80027c0:	f006 f8e8 	bl	8008994 <HAL_TIM_Base_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80027ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d11b      	bne.n	800280a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80027d2:	4813      	ldr	r0, [pc, #76]	@ (8002820 <HAL_InitTick+0xd8>)
 80027d4:	f006 f92e 	bl	8008a34 <HAL_TIM_Base_Start_IT>
 80027d8:	4603      	mov	r3, r0
 80027da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80027de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d111      	bne.n	800280a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80027e6:	201a      	movs	r0, #26
 80027e8:	f002 fd88 	bl	80052fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b0f      	cmp	r3, #15
 80027f0:	d808      	bhi.n	8002804 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80027f2:	2200      	movs	r2, #0
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	201a      	movs	r0, #26
 80027f8:	f002 fd64 	bl	80052c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002828 <HAL_InitTick+0xe0>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e002      	b.n	800280a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800280a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800280e:	4618      	mov	r0, r3
 8002810:	3730      	adds	r7, #48	@ 0x30
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	431bde83 	.word	0x431bde83
 8002820:	20000950 	.word	0x20000950
 8002824:	40014800 	.word	0x40014800
 8002828:	2000009c 	.word	0x2000009c

0800282c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002830:	4b0e      	ldr	r3, [pc, #56]	@ (800286c <SDTimer_Handler+0x40>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d006      	beq.n	8002848 <SDTimer_Handler+0x1c>
    Timer1--;
 800283a:	4b0c      	ldr	r3, [pc, #48]	@ (800286c <SDTimer_Handler+0x40>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	b2db      	uxtb	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	4b09      	ldr	r3, [pc, #36]	@ (800286c <SDTimer_Handler+0x40>)
 8002846:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002848:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <SDTimer_Handler+0x44>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <SDTimer_Handler+0x34>
    Timer2--;
 8002852:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <SDTimer_Handler+0x44>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b04      	ldr	r3, [pc, #16]	@ (8002870 <SDTimer_Handler+0x44>)
 800285e:	701a      	strb	r2, [r3, #0]
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000999 	.word	0x20000999
 8002870:	2000099a 	.word	0x2000099a

08002874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <NMI_Handler+0x4>

0800287c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <HardFault_Handler+0x4>

08002884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <MemManage_Handler+0x4>

0800288c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002890:	bf00      	nop
 8002892:	e7fd      	b.n	8002890 <BusFault_Handler+0x4>

08002894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <UsageFault_Handler+0x4>

0800289c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80028b0:	4802      	ldr	r0, [pc, #8]	@ (80028bc <DMA1_Stream0_IRQHandler+0x10>)
 80028b2:	f002 fe01 	bl	80054b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000890 	.word	0x20000890

080028c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80028c4:	4802      	ldr	r0, [pc, #8]	@ (80028d0 <DMA1_Stream3_IRQHandler+0x10>)
 80028c6:	f002 fdf7 	bl	80054b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000830 	.word	0x20000830

080028d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80028d8:	4802      	ldr	r0, [pc, #8]	@ (80028e4 <DMA1_Stream5_IRQHandler+0x10>)
 80028da:	f002 fded 	bl	80054b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200008f0 	.word	0x200008f0

080028e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	FatFsCnt++;
 80028ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4b08      	ldr	r3, [pc, #32]	@ (8002918 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 80028f8:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 80028fa:	4b07      	ldr	r3, [pc, #28]	@ (8002918 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b09      	cmp	r3, #9
 8002902:	d904      	bls.n	800290e <TIM1_TRG_COM_TIM11_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8002904:	4b04      	ldr	r3, [pc, #16]	@ (8002918 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 800290a:	f7ff ff8f 	bl	800282c <SDTimer_Handler>
	}
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800290e:	4803      	ldr	r0, [pc, #12]	@ (800291c <TIM1_TRG_COM_TIM11_IRQHandler+0x34>)
 8002910:	f006 f9fc 	bl	8008d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000998 	.word	0x20000998
 800291c:	20000950 	.word	0x20000950

08002920 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002924:	4802      	ldr	r0, [pc, #8]	@ (8002930 <SPI2_IRQHandler+0x10>)
 8002926:	f005 fdd3 	bl	80084d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000780 	.word	0x20000780

08002934 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002938:	4802      	ldr	r0, [pc, #8]	@ (8002944 <TIM5_IRQHandler+0x10>)
 800293a:	f006 f9e7 	bl	8008d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200009e8 	.word	0x200009e8

08002948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002950:	4a14      	ldr	r2, [pc, #80]	@ (80029a4 <_sbrk+0x5c>)
 8002952:	4b15      	ldr	r3, [pc, #84]	@ (80029a8 <_sbrk+0x60>)
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800295c:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <_sbrk+0x64>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002964:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <_sbrk+0x64>)
 8002966:	4a12      	ldr	r2, [pc, #72]	@ (80029b0 <_sbrk+0x68>)
 8002968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <_sbrk+0x64>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4413      	add	r3, r2
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	429a      	cmp	r2, r3
 8002976:	d207      	bcs.n	8002988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002978:	f00b fd26 	bl	800e3c8 <__errno>
 800297c:	4603      	mov	r3, r0
 800297e:	220c      	movs	r2, #12
 8002980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
 8002986:	e009      	b.n	800299c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002988:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <_sbrk+0x64>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800298e:	4b07      	ldr	r3, [pc, #28]	@ (80029ac <_sbrk+0x64>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	4a05      	ldr	r2, [pc, #20]	@ (80029ac <_sbrk+0x64>)
 8002998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800299a:	68fb      	ldr	r3, [r7, #12]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20020000 	.word	0x20020000
 80029a8:	00000400 	.word	0x00000400
 80029ac:	2000099c 	.word	0x2000099c
 80029b0:	20004c58 	.word	0x20004c58

080029b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029b8:	4b06      	ldr	r3, [pc, #24]	@ (80029d4 <SystemInit+0x20>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029be:	4a05      	ldr	r2, [pc, #20]	@ (80029d4 <SystemInit+0x20>)
 80029c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08e      	sub	sp, #56	@ 0x38
 80029dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ec:	f107 0320 	add.w	r3, r7, #32
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
 8002a04:	615a      	str	r2, [r3, #20]
 8002a06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a08:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac0 <MX_TIM2_Init+0xe8>)
 8002a0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8002a10:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac0 <MX_TIM2_Init+0xe8>)
 8002a12:	2263      	movs	r2, #99	@ 0x63
 8002a14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a16:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac0 <MX_TIM2_Init+0xe8>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 8002a1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ac0 <MX_TIM2_Init+0xe8>)
 8002a1e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002a22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a24:	4b26      	ldr	r3, [pc, #152]	@ (8002ac0 <MX_TIM2_Init+0xe8>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a2a:	4b25      	ldr	r3, [pc, #148]	@ (8002ac0 <MX_TIM2_Init+0xe8>)
 8002a2c:	2280      	movs	r2, #128	@ 0x80
 8002a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a30:	4823      	ldr	r0, [pc, #140]	@ (8002ac0 <MX_TIM2_Init+0xe8>)
 8002a32:	f005 ffaf 	bl	8008994 <HAL_TIM_Base_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002a3c:	f7ff fc4e 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	481c      	ldr	r0, [pc, #112]	@ (8002ac0 <MX_TIM2_Init+0xe8>)
 8002a4e:	f006 fb0f 	bl	8009070 <HAL_TIM_ConfigClockSource>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002a58:	f7ff fc40 	bl	80022dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a5c:	4818      	ldr	r0, [pc, #96]	@ (8002ac0 <MX_TIM2_Init+0xe8>)
 8002a5e:	f006 f84b 	bl	8008af8 <HAL_TIM_PWM_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002a68:	f7ff fc38 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a74:	f107 0320 	add.w	r3, r7, #32
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4811      	ldr	r0, [pc, #68]	@ (8002ac0 <MX_TIM2_Init+0xe8>)
 8002a7c:	f006 fec0 	bl	8009800 <HAL_TIMEx_MasterConfigSynchronization>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002a86:	f7ff fc29 	bl	80022dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a8a:	2360      	movs	r3, #96	@ 0x60
 8002a8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	220c      	movs	r2, #12
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4807      	ldr	r0, [pc, #28]	@ (8002ac0 <MX_TIM2_Init+0xe8>)
 8002aa2:	f006 fa23 	bl	8008eec <HAL_TIM_PWM_ConfigChannel>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002aac:	f7ff fc16 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ab0:	4803      	ldr	r0, [pc, #12]	@ (8002ac0 <MX_TIM2_Init+0xe8>)
 8002ab2:	f000 f891 	bl	8002bd8 <HAL_TIM_MspPostInit>

}
 8002ab6:	bf00      	nop
 8002ab8:	3738      	adds	r7, #56	@ 0x38
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	200009a0 	.word	0x200009a0

08002ac4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aca:	f107 0308 	add.w	r3, r7, #8
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad8:	463b      	mov	r3, r7
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b58 <MX_TIM5_Init+0x94>)
 8002ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b5c <MX_TIM5_Init+0x98>)
 8002ae4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1000-1;
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b58 <MX_TIM5_Init+0x94>)
 8002ae8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002aec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aee:	4b1a      	ldr	r3, [pc, #104]	@ (8002b58 <MX_TIM5_Init+0x94>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8002af4:	4b18      	ldr	r3, [pc, #96]	@ (8002b58 <MX_TIM5_Init+0x94>)
 8002af6:	2263      	movs	r2, #99	@ 0x63
 8002af8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002afa:	4b17      	ldr	r3, [pc, #92]	@ (8002b58 <MX_TIM5_Init+0x94>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b00:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <MX_TIM5_Init+0x94>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002b06:	4814      	ldr	r0, [pc, #80]	@ (8002b58 <MX_TIM5_Init+0x94>)
 8002b08:	f005 ff44 	bl	8008994 <HAL_TIM_Base_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002b12:	f7ff fbe3 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002b1c:	f107 0308 	add.w	r3, r7, #8
 8002b20:	4619      	mov	r1, r3
 8002b22:	480d      	ldr	r0, [pc, #52]	@ (8002b58 <MX_TIM5_Init+0x94>)
 8002b24:	f006 faa4 	bl	8009070 <HAL_TIM_ConfigClockSource>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002b2e:	f7ff fbd5 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b3a:	463b      	mov	r3, r7
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4806      	ldr	r0, [pc, #24]	@ (8002b58 <MX_TIM5_Init+0x94>)
 8002b40:	f006 fe5e 	bl	8009800 <HAL_TIMEx_MasterConfigSynchronization>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002b4a:	f7ff fbc7 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	200009e8 	.word	0x200009e8
 8002b5c:	40000c00 	.word	0x40000c00

08002b60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b70:	d10e      	bne.n	8002b90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4b16      	ldr	r3, [pc, #88]	@ (8002bd0 <HAL_TIM_Base_MspInit+0x70>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	4a15      	ldr	r2, [pc, #84]	@ (8002bd0 <HAL_TIM_Base_MspInit+0x70>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b82:	4b13      	ldr	r3, [pc, #76]	@ (8002bd0 <HAL_TIM_Base_MspInit+0x70>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002b8e:	e01a      	b.n	8002bc6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0f      	ldr	r2, [pc, #60]	@ (8002bd4 <HAL_TIM_Base_MspInit+0x74>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d115      	bne.n	8002bc6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd0 <HAL_TIM_Base_MspInit+0x70>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd0 <HAL_TIM_Base_MspInit+0x70>)
 8002ba4:	f043 0308 	orr.w	r3, r3, #8
 8002ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002baa:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <HAL_TIM_Base_MspInit+0x70>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2105      	movs	r1, #5
 8002bba:	2032      	movs	r0, #50	@ 0x32
 8002bbc:	f002 fb82 	bl	80052c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002bc0:	2032      	movs	r0, #50	@ 0x32
 8002bc2:	f002 fb9b 	bl	80052fc <HAL_NVIC_EnableIRQ>
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40000c00 	.word	0x40000c00

08002bd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 030c 	add.w	r3, r7, #12
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf8:	d11d      	bne.n	8002c36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <HAL_TIM_MspPostInit+0x68>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c02:	4a0f      	ldr	r2, [pc, #60]	@ (8002c40 <HAL_TIM_MspPostInit+0x68>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <HAL_TIM_MspPostInit+0x68>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c16:	2308      	movs	r3, #8
 8002c18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c26:	2301      	movs	r3, #1
 8002c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f107 030c 	add.w	r3, r7, #12
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4804      	ldr	r0, [pc, #16]	@ (8002c44 <HAL_TIM_MspPostInit+0x6c>)
 8002c32:	f003 f971 	bl	8005f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c36:	bf00      	nop
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40020000 	.word	0x40020000

08002c48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c4c:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c4e:	4a12      	ldr	r2, [pc, #72]	@ (8002c98 <MX_USART1_UART_Init+0x50>)
 8002c50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c52:	4b10      	ldr	r3, [pc, #64]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c60:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c66:	4b0b      	ldr	r3, [pc, #44]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c6c:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c6e:	220c      	movs	r2, #12
 8002c70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c72:	4b08      	ldr	r3, [pc, #32]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c7e:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <MX_USART1_UART_Init+0x4c>)
 8002c80:	f006 fe40 	bl	8009904 <HAL_UART_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c8a:	f7ff fb27 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000a30 	.word	0x20000a30
 8002c98:	40011000 	.word	0x40011000

08002c9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	@ 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a19      	ldr	r2, [pc, #100]	@ (8002d20 <HAL_UART_MspInit+0x84>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d12c      	bne.n	8002d18 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	4b18      	ldr	r3, [pc, #96]	@ (8002d24 <HAL_UART_MspInit+0x88>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	4a17      	ldr	r2, [pc, #92]	@ (8002d24 <HAL_UART_MspInit+0x88>)
 8002cc8:	f043 0310 	orr.w	r3, r3, #16
 8002ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cce:	4b15      	ldr	r3, [pc, #84]	@ (8002d24 <HAL_UART_MspInit+0x88>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <HAL_UART_MspInit+0x88>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	4a10      	ldr	r2, [pc, #64]	@ (8002d24 <HAL_UART_MspInit+0x88>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cea:	4b0e      	ldr	r3, [pc, #56]	@ (8002d24 <HAL_UART_MspInit+0x88>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002cf6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d04:	2303      	movs	r3, #3
 8002d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d08:	2307      	movs	r3, #7
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	4619      	mov	r1, r3
 8002d12:	4805      	ldr	r0, [pc, #20]	@ (8002d28 <HAL_UART_MspInit+0x8c>)
 8002d14:	f003 f900 	bl	8005f18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d18:	bf00      	nop
 8002d1a:	3728      	adds	r7, #40	@ 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40011000 	.word	0x40011000
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40020000 	.word	0x40020000

08002d2c <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	460a      	mov	r2, r1
 8002d36:	71fb      	strb	r3, [r7, #7]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2104      	movs	r1, #4
 8002d40:	480e      	ldr	r0, [pc, #56]	@ (8002d7c <BMP280_write+0x50>)
 8002d42:	f003 fa6d 	bl	8006220 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8002d50:	1df9      	adds	r1, r7, #7
 8002d52:	2364      	movs	r3, #100	@ 0x64
 8002d54:	2201      	movs	r2, #1
 8002d56:	480a      	ldr	r0, [pc, #40]	@ (8002d80 <BMP280_write+0x54>)
 8002d58:	f004 ffb3 	bl	8007cc2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8002d5c:	1db9      	adds	r1, r7, #6
 8002d5e:	2364      	movs	r3, #100	@ 0x64
 8002d60:	2201      	movs	r2, #1
 8002d62:	4807      	ldr	r0, [pc, #28]	@ (8002d80 <BMP280_write+0x54>)
 8002d64:	f004 ffad 	bl	8007cc2 <HAL_SPI_Transmit>

	BMP280_unselect();
 8002d68:	2201      	movs	r2, #1
 8002d6a:	2104      	movs	r1, #4
 8002d6c:	4803      	ldr	r0, [pc, #12]	@ (8002d7c <BMP280_write+0x50>)
 8002d6e:	f003 fa57 	bl	8006220 <HAL_GPIO_WritePin>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40020400 	.word	0x40020400
 8002d80:	20000780 	.word	0x20000780

08002d84 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2104      	movs	r1, #4
 8002d9c:	480f      	ldr	r0, [pc, #60]	@ (8002ddc <BMP280_read+0x58>)
 8002d9e:	f003 fa3f 	bl	8006220 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8002da2:	f107 010f 	add.w	r1, r7, #15
 8002da6:	2364      	movs	r3, #100	@ 0x64
 8002da8:	2201      	movs	r2, #1
 8002daa:	480d      	ldr	r0, [pc, #52]	@ (8002de0 <BMP280_read+0x5c>)
 8002dac:	f004 ff89 	bl	8007cc2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8002db0:	f107 010f 	add.w	r1, r7, #15
 8002db4:	2364      	movs	r3, #100	@ 0x64
 8002db6:	2201      	movs	r2, #1
 8002db8:	4809      	ldr	r0, [pc, #36]	@ (8002de0 <BMP280_read+0x5c>)
 8002dba:	f005 f8c6 	bl	8007f4a <HAL_SPI_Receive>
	BMP280_unselect();
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	2104      	movs	r1, #4
 8002dc2:	4806      	ldr	r0, [pc, #24]	@ (8002ddc <BMP280_read+0x58>)
 8002dc4:	f003 fa2c 	bl	8006220 <HAL_GPIO_WritePin>

	BMP280.Temp = 2500;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <BMP280_read+0x60>)
 8002dca:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002dce:	605a      	str	r2, [r3, #4]

	return Buffer;
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40020400 	.word	0x40020400
 8002de0:	20000780 	.word	0x20000780
 8002de4:	20000a78 	.word	0x20000a78

08002de8 <BMP280_config>:

void BMP280_config(void){
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8002dec:	2157      	movs	r1, #87	@ 0x57
 8002dee:	20f4      	movs	r0, #244	@ 0xf4
 8002df0:	f7ff ff9c 	bl	8002d2c <BMP280_write>
	BMP280_write(config, 0x10);
 8002df4:	2110      	movs	r1, #16
 8002df6:	20f5      	movs	r0, #245	@ 0xf5
 8002df8:	f7ff ff98 	bl	8002d2c <BMP280_write>
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8002e06:	2388      	movs	r3, #136	@ 0x88
 8002e08:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
 8002e0e:	f107 0308 	add.w	r3, r7, #8
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	609a      	str	r2, [r3, #8]
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	611a      	str	r2, [r3, #16]
	BMP280_select();
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2104      	movs	r1, #4
 8002e22:	4843      	ldr	r0, [pc, #268]	@ (8002f30 <BMP280_calibrationData+0x130>)
 8002e24:	f003 f9fc 	bl	8006220 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8002e28:	f107 011f 	add.w	r1, r7, #31
 8002e2c:	2364      	movs	r3, #100	@ 0x64
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4840      	ldr	r0, [pc, #256]	@ (8002f34 <BMP280_calibrationData+0x134>)
 8002e32:	f004 ff46 	bl	8007cc2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8002e36:	1d39      	adds	r1, r7, #4
 8002e38:	2364      	movs	r3, #100	@ 0x64
 8002e3a:	2218      	movs	r2, #24
 8002e3c:	483d      	ldr	r0, [pc, #244]	@ (8002f34 <BMP280_calibrationData+0x134>)
 8002e3e:	f005 f884 	bl	8007f4a <HAL_SPI_Receive>
	BMP280_unselect();
 8002e42:	2201      	movs	r2, #1
 8002e44:	2104      	movs	r1, #4
 8002e46:	483a      	ldr	r0, [pc, #232]	@ (8002f30 <BMP280_calibrationData+0x130>)
 8002e48:	f003 f9ea 	bl	8006220 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8002e4c:	797b      	ldrb	r3, [r7, #5]
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	b21a      	sxth	r2, r3
 8002e52:	793b      	ldrb	r3, [r7, #4]
 8002e54:	b21b      	sxth	r3, r3
 8002e56:	4313      	orrs	r3, r2
 8002e58:	b21b      	sxth	r3, r3
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	4b36      	ldr	r3, [pc, #216]	@ (8002f38 <BMP280_calibrationData+0x138>)
 8002e5e:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	79bb      	ldrb	r3, [r7, #6]
 8002e68:	b21b      	sxth	r3, r3
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	b21a      	sxth	r2, r3
 8002e6e:	4b33      	ldr	r3, [pc, #204]	@ (8002f3c <BMP280_calibrationData+0x13c>)
 8002e70:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8002e72:	7a7b      	ldrb	r3, [r7, #9]
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	b21a      	sxth	r2, r3
 8002e78:	7a3b      	ldrb	r3, [r7, #8]
 8002e7a:	b21b      	sxth	r3, r3
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	b21a      	sxth	r2, r3
 8002e80:	4b2f      	ldr	r3, [pc, #188]	@ (8002f40 <BMP280_calibrationData+0x140>)
 8002e82:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8002e84:	7afb      	ldrb	r3, [r7, #11]
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	b21a      	sxth	r2, r3
 8002e8a:	7abb      	ldrb	r3, [r7, #10]
 8002e8c:	b21b      	sxth	r3, r3
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	b21b      	sxth	r3, r3
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	4b2b      	ldr	r3, [pc, #172]	@ (8002f44 <BMP280_calibrationData+0x144>)
 8002e96:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8002e98:	7b7b      	ldrb	r3, [r7, #13]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	b21a      	sxth	r2, r3
 8002e9e:	7b3b      	ldrb	r3, [r7, #12]
 8002ea0:	b21b      	sxth	r3, r3
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	b21a      	sxth	r2, r3
 8002ea6:	4b28      	ldr	r3, [pc, #160]	@ (8002f48 <BMP280_calibrationData+0x148>)
 8002ea8:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	021b      	lsls	r3, r3, #8
 8002eae:	b21a      	sxth	r2, r3
 8002eb0:	7bbb      	ldrb	r3, [r7, #14]
 8002eb2:	b21b      	sxth	r3, r3
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	b21a      	sxth	r2, r3
 8002eb8:	4b24      	ldr	r3, [pc, #144]	@ (8002f4c <BMP280_calibrationData+0x14c>)
 8002eba:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 8002ebc:	7c7b      	ldrb	r3, [r7, #17]
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	b21a      	sxth	r2, r3
 8002ec2:	7c3b      	ldrb	r3, [r7, #16]
 8002ec4:	b21b      	sxth	r3, r3
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	b21a      	sxth	r2, r3
 8002eca:	4b21      	ldr	r3, [pc, #132]	@ (8002f50 <BMP280_calibrationData+0x150>)
 8002ecc:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 8002ece:	7cfb      	ldrb	r3, [r7, #19]
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	b21a      	sxth	r2, r3
 8002ed4:	7cbb      	ldrb	r3, [r7, #18]
 8002ed6:	b21b      	sxth	r3, r3
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	b21a      	sxth	r2, r3
 8002edc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <BMP280_calibrationData+0x154>)
 8002ede:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8002ee0:	7d7b      	ldrb	r3, [r7, #21]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	b21a      	sxth	r2, r3
 8002ee6:	7d3b      	ldrb	r3, [r7, #20]
 8002ee8:	b21b      	sxth	r3, r3
 8002eea:	4313      	orrs	r3, r2
 8002eec:	b21a      	sxth	r2, r3
 8002eee:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <BMP280_calibrationData+0x158>)
 8002ef0:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	b21a      	sxth	r2, r3
 8002ef8:	7dbb      	ldrb	r3, [r7, #22]
 8002efa:	b21b      	sxth	r3, r3
 8002efc:	4313      	orrs	r3, r2
 8002efe:	b21a      	sxth	r2, r3
 8002f00:	4b16      	ldr	r3, [pc, #88]	@ (8002f5c <BMP280_calibrationData+0x15c>)
 8002f02:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8002f04:	7e7b      	ldrb	r3, [r7, #25]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	b21a      	sxth	r2, r3
 8002f0a:	7e3b      	ldrb	r3, [r7, #24]
 8002f0c:	b21b      	sxth	r3, r3
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	b21a      	sxth	r2, r3
 8002f12:	4b13      	ldr	r3, [pc, #76]	@ (8002f60 <BMP280_calibrationData+0x160>)
 8002f14:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 8002f16:	7efb      	ldrb	r3, [r7, #27]
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	b21a      	sxth	r2, r3
 8002f1c:	7ebb      	ldrb	r3, [r7, #26]
 8002f1e:	b21b      	sxth	r3, r3
 8002f20:	4313      	orrs	r3, r2
 8002f22:	b21a      	sxth	r2, r3
 8002f24:	4b0f      	ldr	r3, [pc, #60]	@ (8002f64 <BMP280_calibrationData+0x164>)
 8002f26:	801a      	strh	r2, [r3, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40020400 	.word	0x40020400
 8002f34:	20000780 	.word	0x20000780
 8002f38:	20000a8c 	.word	0x20000a8c
 8002f3c:	20000a90 	.word	0x20000a90
 8002f40:	20000a92 	.word	0x20000a92
 8002f44:	20000a8e 	.word	0x20000a8e
 8002f48:	20000a94 	.word	0x20000a94
 8002f4c:	20000a96 	.word	0x20000a96
 8002f50:	20000a98 	.word	0x20000a98
 8002f54:	20000a9a 	.word	0x20000a9a
 8002f58:	20000a9c 	.word	0x20000a9c
 8002f5c:	20000a9e 	.word	0x20000a9e
 8002f60:	20000aa0 	.word	0x20000aa0
 8002f64:	20000aa2 	.word	0x20000aa2

08002f68 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 8002f6e:	23f7      	movs	r3, #247	@ 0xf7
 8002f70:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8002f72:	2300      	movs	r3, #0
 8002f74:	603b      	str	r3, [r7, #0]
 8002f76:	2300      	movs	r3, #0
 8002f78:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2104      	movs	r1, #4
 8002f7e:	4817      	ldr	r0, [pc, #92]	@ (8002fdc <BMP280_readRawValues+0x74>)
 8002f80:	f003 f94e 	bl	8006220 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8002f84:	1df9      	adds	r1, r7, #7
 8002f86:	2364      	movs	r3, #100	@ 0x64
 8002f88:	2201      	movs	r2, #1
 8002f8a:	4815      	ldr	r0, [pc, #84]	@ (8002fe0 <BMP280_readRawValues+0x78>)
 8002f8c:	f004 fe99 	bl	8007cc2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8002f90:	4639      	mov	r1, r7
 8002f92:	2364      	movs	r3, #100	@ 0x64
 8002f94:	2206      	movs	r2, #6
 8002f96:	4812      	ldr	r0, [pc, #72]	@ (8002fe0 <BMP280_readRawValues+0x78>)
 8002f98:	f004 ffd7 	bl	8007f4a <HAL_SPI_Receive>
	BMP280_unselect();
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	2104      	movs	r1, #4
 8002fa0:	480e      	ldr	r0, [pc, #56]	@ (8002fdc <BMP280_readRawValues+0x74>)
 8002fa2:	f003 f93d 	bl	8006220 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8002fa6:	783b      	ldrb	r3, [r7, #0]
 8002fa8:	031a      	lsls	r2, r3, #12
 8002faa:	787b      	ldrb	r3, [r7, #1]
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	78ba      	ldrb	r2, [r7, #2]
 8002fb2:	0912      	lsrs	r2, r2, #4
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <BMP280_readRawValues+0x7c>)
 8002fba:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	031a      	lsls	r2, r3, #12
 8002fc0:	793b      	ldrb	r3, [r7, #4]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	797a      	ldrb	r2, [r7, #5]
 8002fc8:	0912      	lsrs	r2, r2, #4
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	4a06      	ldr	r2, [pc, #24]	@ (8002fe8 <BMP280_readRawValues+0x80>)
 8002fd0:	6013      	str	r3, [r2, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40020400 	.word	0x40020400
 8002fe0:	20000780 	.word	0x20000780
 8002fe4:	20000aa8 	.word	0x20000aa8
 8002fe8:	20000aa4 	.word	0x20000aa4

08002fec <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8002ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8003060 <BMP280_measureT+0x74>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	10da      	asrs	r2, r3, #3
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8003064 <BMP280_measureT+0x78>)
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	4a19      	ldr	r2, [pc, #100]	@ (8003068 <BMP280_measureT+0x7c>)
 8003004:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003008:	fb02 f303 	mul.w	r3, r2, r3
 800300c:	12db      	asrs	r3, r3, #11
 800300e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	111b      	asrs	r3, r3, #4
 8003014:	4a13      	ldr	r2, [pc, #76]	@ (8003064 <BMP280_measureT+0x78>)
 8003016:	8812      	ldrh	r2, [r2, #0]
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	1112      	asrs	r2, r2, #4
 800301e:	4911      	ldr	r1, [pc, #68]	@ (8003064 <BMP280_measureT+0x78>)
 8003020:	8809      	ldrh	r1, [r1, #0]
 8003022:	1a52      	subs	r2, r2, r1
 8003024:	fb02 f303 	mul.w	r3, r2, r3
 8003028:	131b      	asrs	r3, r3, #12
 800302a:	4a10      	ldr	r2, [pc, #64]	@ (800306c <BMP280_measureT+0x80>)
 800302c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003030:	fb02 f303 	mul.w	r3, r2, r3
 8003034:	139b      	asrs	r3, r3, #14
 8003036:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4413      	add	r3, r2
 800303e:	4a0c      	ldr	r2, [pc, #48]	@ (8003070 <BMP280_measureT+0x84>)
 8003040:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8003042:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <BMP280_measureT+0x84>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	3380      	adds	r3, #128	@ 0x80
 800304e:	121b      	asrs	r3, r3, #8
 8003050:	60fb      	str	r3, [r7, #12]
	return T;
 8003052:	68fb      	ldr	r3, [r7, #12]
}
 8003054:	4618      	mov	r0, r3
 8003056:	371c      	adds	r7, #28
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	20000aa4 	.word	0x20000aa4
 8003064:	20000a8c 	.word	0x20000a8c
 8003068:	20000a90 	.word	0x20000a90
 800306c:	20000a92 	.word	0x20000a92
 8003070:	20000aac 	.word	0x20000aac

08003074 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8003074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003078:	b0ca      	sub	sp, #296	@ 0x128
 800307a:	af00      	add	r7, sp, #0
 800307c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8003080:	4baf      	ldr	r3, [pc, #700]	@ (8003340 <BMP280_measureP+0x2cc>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	17da      	asrs	r2, r3, #31
 8003086:	461c      	mov	r4, r3
 8003088:	4615      	mov	r5, r2
 800308a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800308e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8003092:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8003096:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800309a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800309e:	fb03 f102 	mul.w	r1, r3, r2
 80030a2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80030a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030aa:	fb02 f303 	mul.w	r3, r2, r3
 80030ae:	18ca      	adds	r2, r1, r3
 80030b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80030b4:	fba3 8903 	umull	r8, r9, r3, r3
 80030b8:	eb02 0309 	add.w	r3, r2, r9
 80030bc:	4699      	mov	r9, r3
 80030be:	4ba1      	ldr	r3, [pc, #644]	@ (8003344 <BMP280_measureP+0x2d0>)
 80030c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c4:	b21b      	sxth	r3, r3
 80030c6:	17da      	asrs	r2, r3, #31
 80030c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80030d0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80030d4:	4603      	mov	r3, r0
 80030d6:	fb03 f209 	mul.w	r2, r3, r9
 80030da:	460b      	mov	r3, r1
 80030dc:	fb08 f303 	mul.w	r3, r8, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	4602      	mov	r2, r0
 80030e4:	fba8 1202 	umull	r1, r2, r8, r2
 80030e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80030ec:	460a      	mov	r2, r1
 80030ee:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80030f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80030f6:	4413      	add	r3, r2
 80030f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80030fc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8003100:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8003104:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8003108:	4b8f      	ldr	r3, [pc, #572]	@ (8003348 <BMP280_measureP+0x2d4>)
 800310a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800310e:	b21b      	sxth	r3, r3
 8003110:	17da      	asrs	r2, r3, #31
 8003112:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003116:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800311a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800311e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8003122:	462a      	mov	r2, r5
 8003124:	fb02 f203 	mul.w	r2, r2, r3
 8003128:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800312c:	4621      	mov	r1, r4
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	441a      	add	r2, r3
 8003134:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003138:	4621      	mov	r1, r4
 800313a:	fba3 1301 	umull	r1, r3, r3, r1
 800313e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003142:	460b      	mov	r3, r1
 8003144:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800314c:	18d3      	adds	r3, r2, r3
 800314e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003152:	f04f 0000 	mov.w	r0, #0
 8003156:	f04f 0100 	mov.w	r1, #0
 800315a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800315e:	462b      	mov	r3, r5
 8003160:	0459      	lsls	r1, r3, #17
 8003162:	4623      	mov	r3, r4
 8003164:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8003168:	4623      	mov	r3, r4
 800316a:	0458      	lsls	r0, r3, #17
 800316c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003170:	1814      	adds	r4, r2, r0
 8003172:	643c      	str	r4, [r7, #64]	@ 0x40
 8003174:	414b      	adcs	r3, r1
 8003176:	647b      	str	r3, [r7, #68]	@ 0x44
 8003178:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800317c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8003180:	4b72      	ldr	r3, [pc, #456]	@ (800334c <BMP280_measureP+0x2d8>)
 8003182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003186:	b21b      	sxth	r3, r3
 8003188:	17da      	asrs	r2, r3, #31
 800318a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800318e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800319e:	00d9      	lsls	r1, r3, #3
 80031a0:	2000      	movs	r0, #0
 80031a2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80031a6:	1814      	adds	r4, r2, r0
 80031a8:	63bc      	str	r4, [r7, #56]	@ 0x38
 80031aa:	414b      	adcs	r3, r1
 80031ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ae:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80031b2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80031b6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80031ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80031be:	fb03 f102 	mul.w	r1, r3, r2
 80031c2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80031c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	18ca      	adds	r2, r1, r3
 80031d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80031d4:	fba3 1303 	umull	r1, r3, r3, r3
 80031d8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80031dc:	460b      	mov	r3, r1
 80031de:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80031e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031e6:	18d3      	adds	r3, r2, r3
 80031e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80031ec:	4b58      	ldr	r3, [pc, #352]	@ (8003350 <BMP280_measureP+0x2dc>)
 80031ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031f2:	b21b      	sxth	r3, r3
 80031f4:	17da      	asrs	r2, r3, #31
 80031f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80031fe:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8003202:	462b      	mov	r3, r5
 8003204:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003208:	4642      	mov	r2, r8
 800320a:	fb02 f203 	mul.w	r2, r2, r3
 800320e:	464b      	mov	r3, r9
 8003210:	4621      	mov	r1, r4
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	4622      	mov	r2, r4
 800321a:	4641      	mov	r1, r8
 800321c:	fba2 1201 	umull	r1, r2, r2, r1
 8003220:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8003224:	460a      	mov	r2, r1
 8003226:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800322a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800322e:	4413      	add	r3, r2
 8003230:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003234:	f04f 0000 	mov.w	r0, #0
 8003238:	f04f 0100 	mov.w	r1, #0
 800323c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8003240:	4623      	mov	r3, r4
 8003242:	0a18      	lsrs	r0, r3, #8
 8003244:	462b      	mov	r3, r5
 8003246:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800324a:	462b      	mov	r3, r5
 800324c:	1219      	asrs	r1, r3, #8
 800324e:	4b41      	ldr	r3, [pc, #260]	@ (8003354 <BMP280_measureP+0x2e0>)
 8003250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003254:	b21b      	sxth	r3, r3
 8003256:	17da      	asrs	r2, r3, #31
 8003258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800325c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003260:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003264:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8003268:	464a      	mov	r2, r9
 800326a:	fb02 f203 	mul.w	r2, r2, r3
 800326e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003272:	4644      	mov	r4, r8
 8003274:	fb04 f303 	mul.w	r3, r4, r3
 8003278:	441a      	add	r2, r3
 800327a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800327e:	4644      	mov	r4, r8
 8003280:	fba3 4304 	umull	r4, r3, r3, r4
 8003284:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003288:	4623      	mov	r3, r4
 800328a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800328e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003292:	18d3      	adds	r3, r2, r3
 8003294:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80032a4:	464c      	mov	r4, r9
 80032a6:	0323      	lsls	r3, r4, #12
 80032a8:	4644      	mov	r4, r8
 80032aa:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80032ae:	4644      	mov	r4, r8
 80032b0:	0322      	lsls	r2, r4, #12
 80032b2:	1884      	adds	r4, r0, r2
 80032b4:	633c      	str	r4, [r7, #48]	@ 0x30
 80032b6:	eb41 0303 	adc.w	r3, r1, r3
 80032ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80032bc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80032c0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80032c4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80032c8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80032cc:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80032d0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80032d4:	4b20      	ldr	r3, [pc, #128]	@ (8003358 <BMP280_measureP+0x2e4>)
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2200      	movs	r2, #0
 80032dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032e4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032e8:	462b      	mov	r3, r5
 80032ea:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80032ee:	4642      	mov	r2, r8
 80032f0:	fb02 f203 	mul.w	r2, r2, r3
 80032f4:	464b      	mov	r3, r9
 80032f6:	4621      	mov	r1, r4
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	4622      	mov	r2, r4
 8003300:	4641      	mov	r1, r8
 8003302:	fba2 1201 	umull	r1, r2, r2, r1
 8003306:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800330a:	460a      	mov	r2, r1
 800330c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8003310:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003314:	4413      	add	r3, r2
 8003316:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8003326:	4629      	mov	r1, r5
 8003328:	104a      	asrs	r2, r1, #1
 800332a:	4629      	mov	r1, r5
 800332c:	17cb      	asrs	r3, r1, #31
 800332e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8003332:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003336:	4313      	orrs	r3, r2
 8003338:	d110      	bne.n	800335c <BMP280_measureP+0x2e8>
	{
	return 0;
 800333a:	2300      	movs	r3, #0
 800333c:	e154      	b.n	80035e8 <BMP280_measureP+0x574>
 800333e:	bf00      	nop
 8003340:	20000aac 	.word	0x20000aac
 8003344:	20000a9c 	.word	0x20000a9c
 8003348:	20000a9a 	.word	0x20000a9a
 800334c:	20000a98 	.word	0x20000a98
 8003350:	20000a96 	.word	0x20000a96
 8003354:	20000a94 	.word	0x20000a94
 8003358:	20000a8e 	.word	0x20000a8e
	}
	p = 1048576-adc_P;
 800335c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003360:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8003364:	17da      	asrs	r2, r3, #31
 8003366:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003368:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800336a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800336e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8003372:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003376:	105b      	asrs	r3, r3, #1
 8003378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800337c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003380:	07db      	lsls	r3, r3, #31
 8003382:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003386:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800338a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800338e:	4621      	mov	r1, r4
 8003390:	1a89      	subs	r1, r1, r2
 8003392:	67b9      	str	r1, [r7, #120]	@ 0x78
 8003394:	4629      	mov	r1, r5
 8003396:	eb61 0303 	sbc.w	r3, r1, r3
 800339a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800339c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80033a0:	4622      	mov	r2, r4
 80033a2:	462b      	mov	r3, r5
 80033a4:	1891      	adds	r1, r2, r2
 80033a6:	6239      	str	r1, [r7, #32]
 80033a8:	415b      	adcs	r3, r3
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033b0:	4621      	mov	r1, r4
 80033b2:	1851      	adds	r1, r2, r1
 80033b4:	61b9      	str	r1, [r7, #24]
 80033b6:	4629      	mov	r1, r5
 80033b8:	414b      	adcs	r3, r1
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80033c8:	4649      	mov	r1, r9
 80033ca:	018b      	lsls	r3, r1, #6
 80033cc:	4641      	mov	r1, r8
 80033ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033d2:	4641      	mov	r1, r8
 80033d4:	018a      	lsls	r2, r1, #6
 80033d6:	4641      	mov	r1, r8
 80033d8:	1889      	adds	r1, r1, r2
 80033da:	6139      	str	r1, [r7, #16]
 80033dc:	4649      	mov	r1, r9
 80033de:	eb43 0101 	adc.w	r1, r3, r1
 80033e2:	6179      	str	r1, [r7, #20]
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80033f0:	4649      	mov	r1, r9
 80033f2:	008b      	lsls	r3, r1, #2
 80033f4:	4641      	mov	r1, r8
 80033f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033fa:	4641      	mov	r1, r8
 80033fc:	008a      	lsls	r2, r1, #2
 80033fe:	4610      	mov	r0, r2
 8003400:	4619      	mov	r1, r3
 8003402:	4603      	mov	r3, r0
 8003404:	4622      	mov	r2, r4
 8003406:	189b      	adds	r3, r3, r2
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	460b      	mov	r3, r1
 800340c:	462a      	mov	r2, r5
 800340e:	eb42 0303 	adc.w	r3, r2, r3
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003420:	4649      	mov	r1, r9
 8003422:	008b      	lsls	r3, r1, #2
 8003424:	4641      	mov	r1, r8
 8003426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800342a:	4641      	mov	r1, r8
 800342c:	008a      	lsls	r2, r1, #2
 800342e:	4610      	mov	r0, r2
 8003430:	4619      	mov	r1, r3
 8003432:	4603      	mov	r3, r0
 8003434:	4622      	mov	r2, r4
 8003436:	189b      	adds	r3, r3, r2
 8003438:	673b      	str	r3, [r7, #112]	@ 0x70
 800343a:	462b      	mov	r3, r5
 800343c:	460a      	mov	r2, r1
 800343e:	eb42 0303 	adc.w	r3, r2, r3
 8003442:	677b      	str	r3, [r7, #116]	@ 0x74
 8003444:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003448:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800344c:	f7fd fbcc 	bl	8000be8 <__aeabi_ldivmod>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8003458:	4b66      	ldr	r3, [pc, #408]	@ (80035f4 <BMP280_measureP+0x580>)
 800345a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800345e:	b21b      	sxth	r3, r3
 8003460:	17da      	asrs	r2, r3, #31
 8003462:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003464:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003466:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800346a:	f04f 0000 	mov.w	r0, #0
 800346e:	f04f 0100 	mov.w	r1, #0
 8003472:	0b50      	lsrs	r0, r2, #13
 8003474:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003478:	1359      	asrs	r1, r3, #13
 800347a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800347e:	462b      	mov	r3, r5
 8003480:	fb00 f203 	mul.w	r2, r0, r3
 8003484:	4623      	mov	r3, r4
 8003486:	fb03 f301 	mul.w	r3, r3, r1
 800348a:	4413      	add	r3, r2
 800348c:	4622      	mov	r2, r4
 800348e:	fba2 1200 	umull	r1, r2, r2, r0
 8003492:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003496:	460a      	mov	r2, r1
 8003498:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800349c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80034a0:	4413      	add	r3, r2
 80034a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80034a6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80034aa:	f04f 0000 	mov.w	r0, #0
 80034ae:	f04f 0100 	mov.w	r1, #0
 80034b2:	0b50      	lsrs	r0, r2, #13
 80034b4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80034b8:	1359      	asrs	r1, r3, #13
 80034ba:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80034be:	462b      	mov	r3, r5
 80034c0:	fb00 f203 	mul.w	r2, r0, r3
 80034c4:	4623      	mov	r3, r4
 80034c6:	fb03 f301 	mul.w	r3, r3, r1
 80034ca:	4413      	add	r3, r2
 80034cc:	4622      	mov	r2, r4
 80034ce:	fba2 1200 	umull	r1, r2, r2, r0
 80034d2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80034d6:	460a      	mov	r2, r1
 80034d8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80034dc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80034e0:	4413      	add	r3, r2
 80034e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80034f2:	4621      	mov	r1, r4
 80034f4:	0e4a      	lsrs	r2, r1, #25
 80034f6:	4629      	mov	r1, r5
 80034f8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80034fc:	4629      	mov	r1, r5
 80034fe:	164b      	asrs	r3, r1, #25
 8003500:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8003504:	4b3c      	ldr	r3, [pc, #240]	@ (80035f8 <BMP280_measureP+0x584>)
 8003506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800350a:	b21b      	sxth	r3, r3
 800350c:	17da      	asrs	r2, r3, #31
 800350e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003510:	667a      	str	r2, [r7, #100]	@ 0x64
 8003512:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003516:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800351a:	462a      	mov	r2, r5
 800351c:	fb02 f203 	mul.w	r2, r2, r3
 8003520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003524:	4621      	mov	r1, r4
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003530:	4621      	mov	r1, r4
 8003532:	fba2 1201 	umull	r1, r2, r2, r1
 8003536:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800353a:	460a      	mov	r2, r1
 800353c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8003540:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003544:	4413      	add	r3, r2
 8003546:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8003556:	4621      	mov	r1, r4
 8003558:	0cca      	lsrs	r2, r1, #19
 800355a:	4629      	mov	r1, r5
 800355c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003560:	4629      	mov	r1, r5
 8003562:	14cb      	asrs	r3, r1, #19
 8003564:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8003568:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800356c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8003570:	1884      	adds	r4, r0, r2
 8003572:	65bc      	str	r4, [r7, #88]	@ 0x58
 8003574:	eb41 0303 	adc.w	r3, r1, r3
 8003578:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800357a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800357e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8003582:	4621      	mov	r1, r4
 8003584:	1889      	adds	r1, r1, r2
 8003586:	6539      	str	r1, [r7, #80]	@ 0x50
 8003588:	4629      	mov	r1, r5
 800358a:	eb43 0101 	adc.w	r1, r3, r1
 800358e:	6579      	str	r1, [r7, #84]	@ 0x54
 8003590:	f04f 0000 	mov.w	r0, #0
 8003594:	f04f 0100 	mov.w	r1, #0
 8003598:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800359c:	4623      	mov	r3, r4
 800359e:	0a18      	lsrs	r0, r3, #8
 80035a0:	462b      	mov	r3, r5
 80035a2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80035a6:	462b      	mov	r3, r5
 80035a8:	1219      	asrs	r1, r3, #8
 80035aa:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <BMP280_measureP+0x588>)
 80035ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	17da      	asrs	r2, r3, #31
 80035b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80035c4:	464c      	mov	r4, r9
 80035c6:	0123      	lsls	r3, r4, #4
 80035c8:	4644      	mov	r4, r8
 80035ca:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80035ce:	4644      	mov	r4, r8
 80035d0:	0122      	lsls	r2, r4, #4
 80035d2:	1884      	adds	r4, r0, r2
 80035d4:	603c      	str	r4, [r7, #0]
 80035d6:	eb41 0303 	adc.w	r3, r1, r3
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	e9d7 3400 	ldrd	r3, r4, [r7]
 80035e0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80035e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80035ee:	46bd      	mov	sp, r7
 80035f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035f4:	20000aa2 	.word	0x20000aa2
 80035f8:	20000aa0 	.word	0x20000aa0
 80035fc:	20000a9e 	.word	0x20000a9e

08003600 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <BMP280_measureH+0x14>
 8003610:	2300      	movs	r3, #0
 8003612:	e051      	b.n	80036b8 <BMP280_measureH+0xb8>
	var1 = -log(((double)Pres)/101325);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7fc ff75 	bl	8000504 <__aeabi_ui2d>
 800361a:	a32e      	add	r3, pc, #184	@ (adr r3, 80036d4 <BMP280_measureH+0xd4>)
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	f7fd f914 	bl	800084c <__aeabi_ddiv>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	ec43 2b17 	vmov	d7, r2, r3
 800362c:	eeb0 0a47 	vmov.f32	s0, s14
 8003630:	eef0 0a67 	vmov.f32	s1, s15
 8003634:	f00b fb44 	bl	800ecc0 <log>
 8003638:	ec53 2b10 	vmov	r2, r3, d0
 800363c:	4611      	mov	r1, r2
 800363e:	61b9      	str	r1, [r7, #24]
 8003640:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003644:	61fb      	str	r3, [r7, #28]

	if(var1 == 0) return 0;
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003652:	f7fd fa39 	bl	8000ac8 <__aeabi_dcmpeq>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <BMP280_measureH+0x60>
 800365c:	2300      	movs	r3, #0
 800365e:	e02b      	b.n	80036b8 <BMP280_measureH+0xb8>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8003660:	6838      	ldr	r0, [r7, #0]
 8003662:	f7fc ff5f 	bl	8000524 <__aeabi_i2d>
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	4b19      	ldr	r3, [pc, #100]	@ (80036d0 <BMP280_measureH+0xd0>)
 800366c:	f7fd f8ee 	bl	800084c <__aeabi_ddiv>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	a311      	add	r3, pc, #68	@ (adr r3, 80036c0 <BMP280_measureH+0xc0>)
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f7fc fe05 	bl	800028c <__adddf3>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	a110      	add	r1, pc, #64	@ (adr r1, 80036c8 <BMP280_measureH+0xc8>)
 8003688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800368c:	f7fd f8de 	bl	800084c <__aeabi_ddiv>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	e9c7 2304 	strd	r2, r3, [r7, #16]
	h = var1/var2;
 8003698:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800369c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036a0:	f7fd f8d4 	bl	800084c <__aeabi_ddiv>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (uint16_t)h;
 80036ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036b0:	f7fd fa7a 	bl	8000ba8 <__aeabi_d2uiz>
 80036b4:	4603      	mov	r3, r0
 80036b6:	b29b      	uxth	r3, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	66666666 	.word	0x66666666
 80036c4:	40711266 	.word	0x40711266
 80036c8:	ca402a92 	.word	0xca402a92
 80036cc:	3fa17e3e 	.word	0x3fa17e3e
 80036d0:	40590000 	.word	0x40590000
 80036d4:	00000000 	.word	0x00000000
 80036d8:	40f8bcd0 	.word	0x40f8bcd0

080036dc <BMP280_init>:

void BMP280_init(void){
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
	BMP280_unselect();
 80036e0:	2201      	movs	r2, #1
 80036e2:	2104      	movs	r1, #4
 80036e4:	480c      	ldr	r0, [pc, #48]	@ (8003718 <BMP280_init+0x3c>)
 80036e6:	f002 fd9b 	bl	8006220 <HAL_GPIO_WritePin>
	BMP280_config();
 80036ea:	f7ff fb7d 	bl	8002de8 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 80036ee:	2089      	movs	r0, #137	@ 0x89
 80036f0:	f7ff fb48 	bl	8002d84 <BMP280_read>
 80036f4:	4603      	mov	r3, r0
 80036f6:	461a      	mov	r2, r3
 80036f8:	4b08      	ldr	r3, [pc, #32]	@ (800371c <BMP280_init+0x40>)
 80036fa:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 80036fc:	f7ff fb80 	bl	8002e00 <BMP280_calibrationData>
	BMP280_readRawValues();
 8003700:	f7ff fc32 	bl	8002f68 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 8003704:	4b06      	ldr	r3, [pc, #24]	@ (8003720 <BMP280_init+0x44>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff fc6f 	bl	8002fec <BMP280_measureT>
 800370e:	4603      	mov	r3, r0
 8003710:	4a02      	ldr	r2, [pc, #8]	@ (800371c <BMP280_init+0x40>)
 8003712:	6093      	str	r3, [r2, #8]
}
 8003714:	bf00      	nop
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40020400 	.word	0x40020400
 800371c:	20000a78 	.word	0x20000a78
 8003720:	20000aa4 	.word	0x20000aa4

08003724 <BMP280_calculate>:

void BMP280_calculate(void){
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
	BMP280_readRawValues();
 8003728:	f7ff fc1e 	bl	8002f68 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 800372c:	4b0f      	ldr	r3, [pc, #60]	@ (800376c <BMP280_calculate+0x48>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff fc5b 	bl	8002fec <BMP280_measureT>
 8003736:	4603      	mov	r3, r0
 8003738:	4a0d      	ldr	r2, [pc, #52]	@ (8003770 <BMP280_calculate+0x4c>)
 800373a:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 800373c:	4b0d      	ldr	r3, [pc, #52]	@ (8003774 <BMP280_calculate+0x50>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fc97 	bl	8003074 <BMP280_measureP>
 8003746:	4603      	mov	r3, r0
 8003748:	0a1b      	lsrs	r3, r3, #8
 800374a:	4a09      	ldr	r2, [pc, #36]	@ (8003770 <BMP280_calculate+0x4c>)
 800374c:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 800374e:	4b08      	ldr	r3, [pc, #32]	@ (8003770 <BMP280_calculate+0x4c>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	4a07      	ldr	r2, [pc, #28]	@ (8003770 <BMP280_calculate+0x4c>)
 8003754:	6892      	ldr	r2, [r2, #8]
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff51 	bl	8003600 <BMP280_measureH>
 800375e:	4603      	mov	r3, r0
 8003760:	461a      	mov	r2, r3
 8003762:	4b03      	ldr	r3, [pc, #12]	@ (8003770 <BMP280_calculate+0x4c>)
 8003764:	821a      	strh	r2, [r3, #16]
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000aa4 	.word	0x20000aa4
 8003770:	20000a78 	.word	0x20000a78
 8003774:	20000aa8 	.word	0x20000aa8

08003778 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a2e      	ldr	r2, [pc, #184]	@ (8003840 <GetSector+0xc8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d806      	bhi.n	800379a <GetSector+0x22>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003792:	d302      	bcc.n	800379a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	e04b      	b.n	8003832 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a29      	ldr	r2, [pc, #164]	@ (8003844 <GetSector+0xcc>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d806      	bhi.n	80037b0 <GetSector+0x38>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a28      	ldr	r2, [pc, #160]	@ (8003848 <GetSector+0xd0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d302      	bcc.n	80037b0 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80037aa:	2301      	movs	r3, #1
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	e040      	b.n	8003832 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a26      	ldr	r2, [pc, #152]	@ (800384c <GetSector+0xd4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d806      	bhi.n	80037c6 <GetSector+0x4e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a25      	ldr	r2, [pc, #148]	@ (8003850 <GetSector+0xd8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d302      	bcc.n	80037c6 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80037c0:	2302      	movs	r3, #2
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	e035      	b.n	8003832 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a22      	ldr	r2, [pc, #136]	@ (8003854 <GetSector+0xdc>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d206      	bcs.n	80037dc <GetSector+0x64>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a21      	ldr	r2, [pc, #132]	@ (8003858 <GetSector+0xe0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d302      	bcc.n	80037dc <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 80037d6:	2303      	movs	r3, #3
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	e02a      	b.n	8003832 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a1f      	ldr	r2, [pc, #124]	@ (800385c <GetSector+0xe4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d206      	bcs.n	80037f2 <GetSector+0x7a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003854 <GetSector+0xdc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d902      	bls.n	80037f2 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80037ec:	2304      	movs	r3, #4
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	e01f      	b.n	8003832 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003860 <GetSector+0xe8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d206      	bcs.n	8003808 <GetSector+0x90>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a17      	ldr	r2, [pc, #92]	@ (800385c <GetSector+0xe4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d902      	bls.n	8003808 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8003802:	2305      	movs	r3, #5
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	e014      	b.n	8003832 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a16      	ldr	r2, [pc, #88]	@ (8003864 <GetSector+0xec>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d206      	bcs.n	800381e <GetSector+0xa6>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a13      	ldr	r2, [pc, #76]	@ (8003860 <GetSector+0xe8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d902      	bls.n	800381e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8003818:	2306      	movs	r3, #6
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e009      	b.n	8003832 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a11      	ldr	r2, [pc, #68]	@ (8003868 <GetSector+0xf0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d205      	bcs.n	8003832 <GetSector+0xba>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a0e      	ldr	r2, [pc, #56]	@ (8003864 <GetSector+0xec>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d901      	bls.n	8003832 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 800382e:	2307      	movs	r3, #7
 8003830:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 8003832:	68fb      	ldr	r3, [r7, #12]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	08003ffe 	.word	0x08003ffe
 8003844:	08007ffe 	.word	0x08007ffe
 8003848:	08004000 	.word	0x08004000
 800384c:	0800bffe 	.word	0x0800bffe
 8003850:	08008000 	.word	0x08008000
 8003854:	0800ffff 	.word	0x0800ffff
 8003858:	0800c000 	.word	0x0800c000
 800385c:	0801ffff 	.word	0x0801ffff
 8003860:	0803ffff 	.word	0x0803ffff
 8003864:	0805ffff 	.word	0x0805ffff
 8003868:	0807ffff 	.word	0x0807ffff

0800386c <Flash_Write>:


uint32_t Flash_Write (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 800386c:	b5b0      	push	{r4, r5, r7, lr}
 800386e:	b08a      	sub	sp, #40	@ 0x28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	4613      	mov	r3, r2
 8003878:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 800387a:	2300      	movs	r3, #0
 800387c:	627b      	str	r3, [r7, #36]	@ 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 800387e:	f002 f8ab 	bl	80059d8 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff ff78 	bl	8003778 <GetSector>
 8003888:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8003896:	69f8      	ldr	r0, [r7, #28]
 8003898:	f7ff ff6e 	bl	8003778 <GetSector>
 800389c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800389e:	4b1e      	ldr	r3, [pc, #120]	@ (8003918 <Flash_Write+0xac>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 80038a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003918 <Flash_Write+0xac>)
 80038a6:	2202      	movs	r2, #2
 80038a8:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 80038aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003918 <Flash_Write+0xac>)
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	3301      	adds	r3, #1
 80038b8:	4a17      	ldr	r2, [pc, #92]	@ (8003918 <Flash_Write+0xac>)
 80038ba:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	4619      	mov	r1, r3
 80038c2:	4815      	ldr	r0, [pc, #84]	@ (8003918 <Flash_Write+0xac>)
 80038c4:	f002 fa06 	bl	8005cd4 <HAL_FLASHEx_Erase>

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
 80038c8:	e01b      	b.n	8003902 <Flash_Write+0x96>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	4413      	add	r3, r2
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2200      	movs	r2, #0
 80038d6:	461c      	mov	r4, r3
 80038d8:	4615      	mov	r5, r2
 80038da:	4622      	mov	r2, r4
 80038dc:	462b      	mov	r3, r5
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	2002      	movs	r0, #2
 80038e2:	f002 f825 	bl	8005930 <HAL_FLASH_Program>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <Flash_Write+0x8e>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3304      	adds	r3, #4
 80038f0:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	3301      	adds	r3, #1
 80038f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f8:	e003      	b.n	8003902 <Flash_Write+0x96>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 80038fa:	f002 f89f 	bl	8005a3c <HAL_FLASH_GetError>
 80038fe:	4603      	mov	r3, r0
 8003900:	e006      	b.n	8003910 <Flash_Write+0xa4>
	   while (sofar<numberofwords)
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003906:	429a      	cmp	r2, r3
 8003908:	dbdf      	blt.n	80038ca <Flash_Write+0x5e>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800390a:	f002 f887 	bl	8005a1c <HAL_FLASH_Lock>

	   return 0;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3728      	adds	r7, #40	@ 0x28
 8003914:	46bd      	mov	sp, r7
 8003916:	bdb0      	pop	{r4, r5, r7, pc}
 8003918:	20000ab0 	.word	0x20000ab0

0800391c <Flash_Read>:


void Flash_Read (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	4613      	mov	r3, r2
 8003928:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3304      	adds	r3, #4
 8003936:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	3304      	adds	r3, #4
 800393c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	1e5a      	subs	r2, r3, #1
 8003942:	80fa      	strh	r2, [r7, #6]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d000      	beq.n	800394a <Flash_Read+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8003948:	e7ef      	b.n	800392a <Flash_Read+0xe>
		if (!(numberofwords--)) break;
 800394a:	bf00      	nop
	}
}
 800394c:	bf00      	nop
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <MPU6050_getPromModule>:

#define MPU6050_ADDR 0xD0
const uint16_t i2c_timeout = 10;
const double Accel_Z_corrector = 2048.0;

void MPU6050_getPromModule(MPU6050_t *DataStruct){
 8003958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800395c:	b09e      	sub	sp, #120	@ 0x78
 800395e:	af00      	add	r7, sp, #0
 8003960:	64f8      	str	r0, [r7, #76]	@ 0x4c
	int64_t Buffer = 0;
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	int32_t AuxBuffer[5] = {0};
 800396e:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8003972:	2300      	movs	r3, #0
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	6053      	str	r3, [r2, #4]
 8003978:	6093      	str	r3, [r2, #8]
 800397a:	60d3      	str	r3, [r2, #12]
 800397c:	6113      	str	r3, [r2, #16]

	for(uint8_t n = 0;n<5;n++){
 800397e:	2300      	movs	r3, #0
 8003980:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8003984:	e016      	b.n	80039b4 <MPU6050_getPromModule+0x5c>
		AuxBuffer[n] = DataStruct->PromBuffer[n].Accel_X_RAW;
 8003986:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800398a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800398c:	3304      	adds	r3, #4
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	4413      	add	r3, r2
 8003992:	3304      	adds	r3, #4
 8003994:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003998:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	3330      	adds	r3, #48	@ 0x30
 80039a0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80039a4:	440b      	add	r3, r1
 80039a6:	f843 2c24 	str.w	r2, [r3, #-36]
	for(uint8_t n = 0;n<5;n++){
 80039aa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80039ae:	3301      	adds	r3, #1
 80039b0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80039b4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d9e4      	bls.n	8003986 <MPU6050_getPromModule+0x2e>
	}
	for(uint8_t n = 0;n<4;n++){
 80039bc:	2300      	movs	r3, #0
 80039be:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80039c2:	e02d      	b.n	8003a20 <MPU6050_getPromModule+0xc8>

		DataStruct->PromBuffer[n+1].Accel_X_RAW = AuxBuffer[n];
 80039c4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	3330      	adds	r3, #48	@ 0x30
 80039cc:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80039d0:	4413      	add	r3, r2
 80039d2:	f853 2c24 	ldr.w	r2, [r3, #-36]
 80039d6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80039da:	3301      	adds	r3, #1
 80039dc:	b211      	sxth	r1, r2
 80039de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039e0:	3304      	adds	r3, #4
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	4413      	add	r3, r2
 80039e6:	1d1a      	adds	r2, r3, #4
 80039e8:	460b      	mov	r3, r1
 80039ea:	8013      	strh	r3, [r2, #0]
		Buffer += DataStruct->PromBuffer[n].Accel_X_RAW;
 80039ec:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80039f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039f2:	3304      	adds	r3, #4
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	4413      	add	r3, r2
 80039f8:	3304      	adds	r3, #4
 80039fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039fe:	b21b      	sxth	r3, r3
 8003a00:	17da      	asrs	r2, r3, #31
 8003a02:	461c      	mov	r4, r3
 8003a04:	4615      	mov	r5, r2
 8003a06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003a0a:	eb12 0804 	adds.w	r8, r2, r4
 8003a0e:	eb43 0905 	adc.w	r9, r3, r5
 8003a12:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
	for(uint8_t n = 0;n<4;n++){
 8003a16:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8003a20:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d9cd      	bls.n	80039c4 <MPU6050_getPromModule+0x6c>
	}
	DataStruct->PromBuffer[0].Accel_X_RAW = DataStruct->Accel_X_RAW;
 8003a28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a30:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
	Buffer += DataStruct->PromBuffer[0].Accel_X_RAW;
 8003a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a36:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8003a3a:	b21b      	sxth	r3, r3
 8003a3c:	17da      	asrs	r2, r3, #31
 8003a3e:	469a      	mov	sl, r3
 8003a40:	4693      	mov	fp, r2
 8003a42:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003a46:	eb12 010a 	adds.w	r1, r2, sl
 8003a4a:	6239      	str	r1, [r7, #32]
 8003a4c:	eb43 030b 	adc.w	r3, r3, fp
 8003a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a52:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003a56:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	DataStruct->Prom.Accel_X_RAW = Buffer / 5;
 8003a5a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003a5e:	f04f 0205 	mov.w	r2, #5
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	f7fd f8bf 	bl	8000be8 <__aeabi_ldivmod>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	b213      	sxth	r3, r2
 8003a70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a72:	f8a2 3094 	strh.w	r3, [r2, #148]	@ 0x94

	Buffer = 0;
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	for(uint8_t n = 0;n<5;n++){
 8003a82:	2300      	movs	r3, #0
 8003a84:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8003a88:	e016      	b.n	8003ab8 <MPU6050_getPromModule+0x160>
		AuxBuffer[n] = DataStruct->PromBuffer[n].Accel_Y_RAW;
 8003a8a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003a8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a90:	3304      	adds	r3, #4
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	4413      	add	r3, r2
 8003a96:	3306      	adds	r3, #6
 8003a98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003a9c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	3330      	adds	r3, #48	@ 0x30
 8003aa4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8003aa8:	440b      	add	r3, r1
 8003aaa:	f843 2c24 	str.w	r2, [r3, #-36]
	for(uint8_t n = 0;n<5;n++){
 8003aae:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8003ab8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d9e4      	bls.n	8003a8a <MPU6050_getPromModule+0x132>
	}
	for(uint8_t n = 0;n<4;n++){
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8003ac6:	e033      	b.n	8003b30 <MPU6050_getPromModule+0x1d8>

		DataStruct->PromBuffer[n+1].Accel_Y_RAW = AuxBuffer[n];
 8003ac8:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	3330      	adds	r3, #48	@ 0x30
 8003ad0:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8003ada:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8003ade:	3301      	adds	r3, #1
 8003ae0:	b211      	sxth	r1, r2
 8003ae2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	4413      	add	r3, r2
 8003aea:	1d9a      	adds	r2, r3, #6
 8003aec:	460b      	mov	r3, r1
 8003aee:	8013      	strh	r3, [r2, #0]
		Buffer += DataStruct->PromBuffer[n].Accel_Y_RAW;
 8003af0:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8003af4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003af6:	3304      	adds	r3, #4
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	4413      	add	r3, r2
 8003afc:	3306      	adds	r3, #6
 8003afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b02:	b21b      	sxth	r3, r3
 8003b04:	17da      	asrs	r2, r3, #31
 8003b06:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b08:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b0e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8003b12:	4621      	mov	r1, r4
 8003b14:	1851      	adds	r1, r2, r1
 8003b16:	61b9      	str	r1, [r7, #24]
 8003b18:	4629      	mov	r1, r5
 8003b1a:	414b      	adcs	r3, r1
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003b22:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	for(uint8_t n = 0;n<4;n++){
 8003b26:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8003b30:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8003b34:	2b03      	cmp	r3, #3
 8003b36:	d9c7      	bls.n	8003ac8 <MPU6050_getPromModule+0x170>
	}
	DataStruct->PromBuffer[0].Accel_Y_RAW = DataStruct->Accel_Y_RAW;
 8003b38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b40:	f8a2 3046 	strh.w	r3, [r2, #70]	@ 0x46
	Buffer += DataStruct->PromBuffer[0].Accel_Y_RAW;
 8003b44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b46:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8003b4a:	b21b      	sxth	r3, r3
 8003b4c:	17da      	asrs	r2, r3, #31
 8003b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b50:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003b56:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	1851      	adds	r1, r2, r1
 8003b5e:	6139      	str	r1, [r7, #16]
 8003b60:	4629      	mov	r1, r5
 8003b62:	eb43 0101 	adc.w	r1, r3, r1
 8003b66:	6179      	str	r1, [r7, #20]
 8003b68:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003b6c:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	DataStruct->Prom.Accel_Y_RAW = Buffer / 5;
 8003b70:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003b74:	f04f 0205 	mov.w	r2, #5
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	f7fd f834 	bl	8000be8 <__aeabi_ldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	b212      	sxth	r2, r2
 8003b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b88:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96

	Buffer = 0;
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

	for(uint8_t n = 0;n<5;n++){
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8003b9e:	e016      	b.n	8003bce <MPU6050_getPromModule+0x276>
		AuxBuffer[n] = DataStruct->PromBuffer[n].Accel_Z_RAW;
 8003ba0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8003ba4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	4413      	add	r3, r2
 8003bac:	3308      	adds	r3, #8
 8003bae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003bb2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	3330      	adds	r3, #48	@ 0x30
 8003bba:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8003bbe:	440b      	add	r3, r1
 8003bc0:	f843 2c24 	str.w	r2, [r3, #-36]
	for(uint8_t n = 0;n<5;n++){
 8003bc4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8003bc8:	3301      	adds	r3, #1
 8003bca:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8003bce:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d9e4      	bls.n	8003ba0 <MPU6050_getPromModule+0x248>
	}
	for(uint8_t n = 0;n<4;n++){
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8003bdc:	e033      	b.n	8003c46 <MPU6050_getPromModule+0x2ee>

		DataStruct->PromBuffer[n+1].Accel_Z_RAW = AuxBuffer[n];
 8003bde:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	3330      	adds	r3, #48	@ 0x30
 8003be6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8003bea:	4413      	add	r3, r2
 8003bec:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8003bf0:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	b211      	sxth	r1, r2
 8003bf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	4413      	add	r3, r2
 8003c00:	3308      	adds	r3, #8
 8003c02:	460a      	mov	r2, r1
 8003c04:	801a      	strh	r2, [r3, #0]
		Buffer += DataStruct->PromBuffer[n].Accel_Z_RAW;
 8003c06:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8003c0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	4413      	add	r3, r2
 8003c12:	3308      	adds	r3, #8
 8003c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c18:	b21b      	sxth	r3, r3
 8003c1a:	17da      	asrs	r2, r3, #31
 8003c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c1e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003c20:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c28:	4621      	mov	r1, r4
 8003c2a:	1851      	adds	r1, r2, r1
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	4629      	mov	r1, r5
 8003c30:	414b      	adcs	r3, r1
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003c38:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	for(uint8_t n = 0;n<4;n++){
 8003c3c:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8003c40:	3301      	adds	r3, #1
 8003c42:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8003c46:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d9c7      	bls.n	8003bde <MPU6050_getPromModule+0x286>
	}
	DataStruct->PromBuffer[0].Accel_Z_RAW = DataStruct->Accel_Z_RAW;
 8003c4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c50:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c56:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	Buffer += DataStruct->PromBuffer[0].Accel_Z_RAW;
 8003c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c5c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8003c60:	b21b      	sxth	r3, r3
 8003c62:	17da      	asrs	r2, r3, #31
 8003c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c68:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c6c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8003c70:	4621      	mov	r1, r4
 8003c72:	1851      	adds	r1, r2, r1
 8003c74:	6039      	str	r1, [r7, #0]
 8003c76:	4629      	mov	r1, r5
 8003c78:	eb43 0101 	adc.w	r1, r3, r1
 8003c7c:	6079      	str	r1, [r7, #4]
 8003c7e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003c82:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
	DataStruct->Prom.Accel_Z_RAW = Buffer / 5;
 8003c86:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003c8a:	f04f 0205 	mov.w	r2, #5
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	f7fc ffa9 	bl	8000be8 <__aeabi_ldivmod>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	b212      	sxth	r2, r2
 8003c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c9e:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98


}
 8003ca2:	bf00      	nop
 8003ca4:	3778      	adds	r7, #120	@ 0x78
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003cac <MPU6050_status>:

uint8_t MPU6050_status(void){
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af04      	add	r7, sp, #16
	uint8_t check  = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	71fb      	strb	r3, [r7, #7]

	static uint8_t eCont1 = 0, eCont2 = 0;

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003cba:	230a      	movs	r3, #10
 8003cbc:	9302      	str	r3, [sp, #8]
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	1dbb      	adds	r3, r7, #6
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	2275      	movs	r2, #117	@ 0x75
 8003cca:	21d0      	movs	r1, #208	@ 0xd0
 8003ccc:	4822      	ldr	r0, [pc, #136]	@ (8003d58 <MPU6050_status+0xac>)
 8003cce:	f002 fcff 	bl	80066d0 <HAL_I2C_Mem_Read>
	if(check != 104){
 8003cd2:	79bb      	ldrb	r3, [r7, #6]
 8003cd4:	2b68      	cmp	r3, #104	@ 0x68
 8003cd6:	d011      	beq.n	8003cfc <MPU6050_status+0x50>
		eCont1++;
 8003cd8:	4b20      	ldr	r3, [pc, #128]	@ (8003d5c <MPU6050_status+0xb0>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8003d5c <MPU6050_status+0xb0>)
 8003ce2:	701a      	strb	r2, [r3, #0]
		if(eCont1 > 2){
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d5c <MPU6050_status+0xb0>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d90a      	bls.n	8003d02 <MPU6050_status+0x56>
			status |= 0x01;
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	f043 0301 	orr.w	r3, r3, #1
 8003cf2:	71fb      	strb	r3, [r7, #7]
			eCont1 = 3;
 8003cf4:	4b19      	ldr	r3, [pc, #100]	@ (8003d5c <MPU6050_status+0xb0>)
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	e002      	b.n	8003d02 <MPU6050_status+0x56>
		}
	}
	else{
		eCont1 = 0;
 8003cfc:	4b17      	ldr	r3, [pc, #92]	@ (8003d5c <MPU6050_status+0xb0>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
	}
	check = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003d06:	230a      	movs	r3, #10
 8003d08:	9302      	str	r3, [sp, #8]
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	1dbb      	adds	r3, r7, #6
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	2301      	movs	r3, #1
 8003d14:	2275      	movs	r2, #117	@ 0x75
 8003d16:	21d0      	movs	r1, #208	@ 0xd0
 8003d18:	4811      	ldr	r0, [pc, #68]	@ (8003d60 <MPU6050_status+0xb4>)
 8003d1a:	f002 fcd9 	bl	80066d0 <HAL_I2C_Mem_Read>
	if(check != 104){
 8003d1e:	79bb      	ldrb	r3, [r7, #6]
 8003d20:	2b68      	cmp	r3, #104	@ 0x68
 8003d22:	d011      	beq.n	8003d48 <MPU6050_status+0x9c>
		eCont2++;
 8003d24:	4b0f      	ldr	r3, [pc, #60]	@ (8003d64 <MPU6050_status+0xb8>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d64 <MPU6050_status+0xb8>)
 8003d2e:	701a      	strb	r2, [r3, #0]
		if(eCont1 > 2){
 8003d30:	4b0a      	ldr	r3, [pc, #40]	@ (8003d5c <MPU6050_status+0xb0>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d90a      	bls.n	8003d4e <MPU6050_status+0xa2>
			status |= 0x01;
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	71fb      	strb	r3, [r7, #7]
			eCont2 = 3;
 8003d40:	4b08      	ldr	r3, [pc, #32]	@ (8003d64 <MPU6050_status+0xb8>)
 8003d42:	2203      	movs	r2, #3
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	e002      	b.n	8003d4e <MPU6050_status+0xa2>
		}
	}
	else{
		eCont2 = 0;
 8003d48:	4b06      	ldr	r3, [pc, #24]	@ (8003d64 <MPU6050_status+0xb8>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	2000062c 	.word	0x2000062c
 8003d5c:	20000ce8 	.word	0x20000ce8
 8003d60:	20000680 	.word	0x20000680
 8003d64:	20000ce9 	.word	0x20000ce9

08003d68 <MPU6050_memoryRefresh>:

void MPU6050_memoryRefresh(void){
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
	MPU6050.Module_1.OffSet.Ax_Offset = MEMORY.str.MPU6050_1.Ax_Offset;
 8003d6c:	4b26      	ldr	r3, [pc, #152]	@ (8003e08 <MPU6050_memoryRefresh+0xa0>)
 8003d6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003d72:	4b26      	ldr	r3, [pc, #152]	@ (8003e0c <MPU6050_memoryRefresh+0xa4>)
 8003d74:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
	MPU6050.Module_1.OffSet.Ay_Offset = MEMORY.str.MPU6050_1.Ay_Offset;
 8003d78:	4b23      	ldr	r3, [pc, #140]	@ (8003e08 <MPU6050_memoryRefresh+0xa0>)
 8003d7a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003d7e:	4b23      	ldr	r3, [pc, #140]	@ (8003e0c <MPU6050_memoryRefresh+0xa4>)
 8003d80:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
	MPU6050.Module_1.OffSet.Az_Offset = MEMORY.str.MPU6050_1.Az_Offset;
 8003d84:	4b20      	ldr	r3, [pc, #128]	@ (8003e08 <MPU6050_memoryRefresh+0xa0>)
 8003d86:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003d8a:	4b20      	ldr	r3, [pc, #128]	@ (8003e0c <MPU6050_memoryRefresh+0xa4>)
 8003d8c:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8

	MPU6050.Module_1.OffSet.Gx_Offset = MEMORY.str.MPU6050_1.Gx_Offset;
 8003d90:	4b1d      	ldr	r3, [pc, #116]	@ (8003e08 <MPU6050_memoryRefresh+0xa0>)
 8003d92:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003d96:	4b1d      	ldr	r3, [pc, #116]	@ (8003e0c <MPU6050_memoryRefresh+0xa4>)
 8003d98:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa
	MPU6050.Module_1.OffSet.Gy_Offset = MEMORY.str.MPU6050_1.Gy_Offset;
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e08 <MPU6050_memoryRefresh+0xa0>)
 8003d9e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8003da2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e0c <MPU6050_memoryRefresh+0xa4>)
 8003da4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
	MPU6050.Module_1.OffSet.Gz_Offset = MEMORY.str.MPU6050_1.Gz_Offset;
 8003da8:	4b17      	ldr	r3, [pc, #92]	@ (8003e08 <MPU6050_memoryRefresh+0xa0>)
 8003daa:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8003dae:	4b17      	ldr	r3, [pc, #92]	@ (8003e0c <MPU6050_memoryRefresh+0xa4>)
 8003db0:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae

	MPU6050.Module_2.OffSet.Ax_Offset = MEMORY.str.MPU6050_2.Ax_Offset;
 8003db4:	4b14      	ldr	r3, [pc, #80]	@ (8003e08 <MPU6050_memoryRefresh+0xa0>)
 8003db6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8003dba:	4b14      	ldr	r3, [pc, #80]	@ (8003e0c <MPU6050_memoryRefresh+0xa4>)
 8003dbc:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	MPU6050.Module_2.OffSet.Ay_Offset = MEMORY.str.MPU6050_2.Ay_Offset;
 8003dc0:	4b11      	ldr	r3, [pc, #68]	@ (8003e08 <MPU6050_memoryRefresh+0xa0>)
 8003dc2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8003dc6:	4b11      	ldr	r3, [pc, #68]	@ (8003e0c <MPU6050_memoryRefresh+0xa4>)
 8003dc8:	f8a3 2156 	strh.w	r2, [r3, #342]	@ 0x156
	MPU6050.Module_2.OffSet.Az_Offset = MEMORY.str.MPU6050_2.Az_Offset;
 8003dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8003e08 <MPU6050_memoryRefresh+0xa0>)
 8003dce:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8003dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003e0c <MPU6050_memoryRefresh+0xa4>)
 8003dd4:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158

	MPU6050.Module_2.OffSet.Gx_Offset = MEMORY.str.MPU6050_2.Gx_Offset;
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e08 <MPU6050_memoryRefresh+0xa0>)
 8003dda:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8003dde:	4b0b      	ldr	r3, [pc, #44]	@ (8003e0c <MPU6050_memoryRefresh+0xa4>)
 8003de0:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a
	MPU6050.Module_2.OffSet.Gy_Offset = MEMORY.str.MPU6050_2.Gy_Offset;
 8003de4:	4b08      	ldr	r3, [pc, #32]	@ (8003e08 <MPU6050_memoryRefresh+0xa0>)
 8003de6:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8003dea:	4b08      	ldr	r3, [pc, #32]	@ (8003e0c <MPU6050_memoryRefresh+0xa4>)
 8003dec:	f8a3 215c 	strh.w	r2, [r3, #348]	@ 0x15c
	MPU6050.Module_2.OffSet.Gz_Offset = MEMORY.str.MPU6050_2.Gz_Offset;
 8003df0:	4b05      	ldr	r3, [pc, #20]	@ (8003e08 <MPU6050_memoryRefresh+0xa0>)
 8003df2:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8003df6:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <MPU6050_memoryRefresh+0xa4>)
 8003df8:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000cf8 	.word	0x20000cf8
 8003e0c:	20000ac8 	.word	0x20000ac8

08003e10 <MPU6050_Init_Module>:
    MEMORY_write();
}



uint8_t MPU6050_Init_Module(I2C_HandleTypeDef *I2Cx) {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af04      	add	r7, sp, #16
 8003e16:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003e18:	230a      	movs	r3, #10
 8003e1a:	9302      	str	r3, [sp, #8]
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	f107 030f 	add.w	r3, r7, #15
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	2301      	movs	r3, #1
 8003e28:	2275      	movs	r2, #117	@ 0x75
 8003e2a:	21d0      	movs	r1, #208	@ 0xd0
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f002 fc4f 	bl	80066d0 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	2b68      	cmp	r3, #104	@ 0x68
 8003e36:	d13d      	bne.n	8003eb4 <MPU6050_Init_Module+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8003e3c:	230a      	movs	r3, #10
 8003e3e:	9302      	str	r3, [sp, #8]
 8003e40:	2301      	movs	r3, #1
 8003e42:	9301      	str	r3, [sp, #4]
 8003e44:	f107 030e 	add.w	r3, r7, #14
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	226b      	movs	r2, #107	@ 0x6b
 8003e4e:	21d0      	movs	r1, #208	@ 0xd0
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f002 fb43 	bl	80064dc <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8003e56:	2307      	movs	r3, #7
 8003e58:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8003e5a:	230a      	movs	r3, #10
 8003e5c:	9302      	str	r3, [sp, #8]
 8003e5e:	2301      	movs	r3, #1
 8003e60:	9301      	str	r3, [sp, #4]
 8003e62:	f107 030e 	add.w	r3, r7, #14
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2301      	movs	r3, #1
 8003e6a:	2219      	movs	r2, #25
 8003e6c:	21d0      	movs	r1, #208	@ 0xd0
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f002 fb34 	bl	80064dc <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x18;
 8003e74:	2318      	movs	r3, #24
 8003e76:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003e78:	230a      	movs	r3, #10
 8003e7a:	9302      	str	r3, [sp, #8]
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	f107 030e 	add.w	r3, r7, #14
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	2301      	movs	r3, #1
 8003e88:	221c      	movs	r2, #28
 8003e8a:	21d0      	movs	r1, #208	@ 0xd0
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f002 fb25 	bl	80064dc <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x18;
 8003e92:	2318      	movs	r3, #24
 8003e94:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003e96:	230a      	movs	r3, #10
 8003e98:	9302      	str	r3, [sp, #8]
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	f107 030e 	add.w	r3, r7, #14
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	221b      	movs	r2, #27
 8003ea8:	21d0      	movs	r1, #208	@ 0xd0
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f002 fb16 	bl	80064dc <HAL_I2C_Mem_Write>
        return 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e000      	b.n	8003eb6 <MPU6050_Init_Module+0xa6>
    }
    return 1;
 8003eb4:	2301      	movs	r3, #1
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <MPU6050_Read_All>:

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	@ 0x28
 8003ec4:	af04      	add	r7, sp, #16
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8003eca:	230a      	movs	r3, #10
 8003ecc:	9302      	str	r3, [sp, #8]
 8003ece:	230e      	movs	r3, #14
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	f107 0308 	add.w	r3, r7, #8
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2301      	movs	r3, #1
 8003eda:	223b      	movs	r2, #59	@ 0x3b
 8003edc:	21d0      	movs	r1, #208	@ 0xd0
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f002 fbf6 	bl	80066d0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = ((int16_t) (Rec_Data[0] << 8 | Rec_Data[1]) - DataStruct->OffSet.Ax_Offset);
 8003ee4:	7a3b      	ldrb	r3, [r7, #8]
 8003ee6:	021b      	lsls	r3, r3, #8
 8003ee8:	b21a      	sxth	r2, r3
 8003eea:	7a7b      	ldrb	r3, [r7, #9]
 8003eec:	b21b      	sxth	r3, r3
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	b21b      	sxth	r3, r3
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	@ 0xa4
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	b21a      	sxth	r2, r3
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = ((int16_t) (Rec_Data[2] << 8 | Rec_Data[3]) - DataStruct->OffSet.Ay_Offset);
 8003f06:	7abb      	ldrb	r3, [r7, #10]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	b21a      	sxth	r2, r3
 8003f0c:	7afb      	ldrb	r3, [r7, #11]
 8003f0e:	b21b      	sxth	r3, r3
 8003f10:	4313      	orrs	r3, r2
 8003f12:	b21b      	sxth	r3, r3
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	b21a      	sxth	r2, r3
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = ((int16_t) (Rec_Data[4] << 8 | Rec_Data[5]) - DataStruct->OffSet.Az_Offset);
 8003f28:	7b3b      	ldrb	r3, [r7, #12]
 8003f2a:	021b      	lsls	r3, r3, #8
 8003f2c:	b21a      	sxth	r2, r3
 8003f2e:	7b7b      	ldrb	r3, [r7, #13]
 8003f30:	b21b      	sxth	r3, r3
 8003f32:	4313      	orrs	r3, r2
 8003f34:	b21b      	sxth	r3, r3
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	@ 0xa8
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	b21a      	sxth	r2, r3
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8003f4a:	7bbb      	ldrb	r3, [r7, #14]
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	b21a      	sxth	r2, r3
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	b21b      	sxth	r3, r3
 8003f54:	4313      	orrs	r3, r2
 8003f56:	82fb      	strh	r3, [r7, #22]
    DataStruct->Gyro_X_RAW = ((int16_t) (Rec_Data[8] << 8 | Rec_Data[9])  - DataStruct->OffSet.Gx_Offset);
 8003f58:	7c3b      	ldrb	r3, [r7, #16]
 8003f5a:	021b      	lsls	r3, r3, #8
 8003f5c:	b21a      	sxth	r2, r3
 8003f5e:	7c7b      	ldrb	r3, [r7, #17]
 8003f60:	b21b      	sxth	r3, r3
 8003f62:	4313      	orrs	r3, r2
 8003f64:	b21b      	sxth	r3, r3
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f9b3 30aa 	ldrsh.w	r3, [r3, #170]	@ 0xaa
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	b21a      	sxth	r2, r3
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = ((int16_t) (Rec_Data[10] << 8 | Rec_Data[11])- DataStruct->OffSet.Gy_Offset);
 8003f7a:	7cbb      	ldrb	r3, [r7, #18]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	b21a      	sxth	r2, r3
 8003f80:	7cfb      	ldrb	r3, [r7, #19]
 8003f82:	b21b      	sxth	r3, r3
 8003f84:	4313      	orrs	r3, r2
 8003f86:	b21b      	sxth	r3, r3
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	@ 0xac
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	b21a      	sxth	r2, r3
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = ((int16_t) (Rec_Data[12] << 8 | Rec_Data[13])- DataStruct->OffSet.Gz_Offset);
 8003f9c:	7d3b      	ldrb	r3, [r7, #20]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	b21a      	sxth	r2, r3
 8003fa2:	7d7b      	ldrb	r3, [r7, #21]
 8003fa4:	b21b      	sxth	r3, r3
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	b21b      	sxth	r3, r3
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f9b3 30ae 	ldrsh.w	r3, [r3, #174]	@ 0xae
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	b21a      	sxth	r2, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 2048.0;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fc faad 	bl	8000524 <__aeabi_i2d>
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	4b38      	ldr	r3, [pc, #224]	@ (80040b0 <MPU6050_Read_All+0x1f0>)
 8003fd0:	f7fc fc3c 	bl	800084c <__aeabi_ddiv>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	6839      	ldr	r1, [r7, #0]
 8003fda:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 2048.0;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fc fa9d 	bl	8000524 <__aeabi_i2d>
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	4b30      	ldr	r3, [pc, #192]	@ (80040b0 <MPU6050_Read_All+0x1f0>)
 8003ff0:	f7fc fc2c 	bl	800084c <__aeabi_ddiv>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	6839      	ldr	r1, [r7, #0]
 8003ffa:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004004:	4618      	mov	r0, r3
 8004006:	f7fc fa8d 	bl	8000524 <__aeabi_i2d>
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	4b28      	ldr	r3, [pc, #160]	@ (80040b0 <MPU6050_Read_All+0x1f0>)
 8004010:	f7fc fc1c 	bl	800084c <__aeabi_ddiv>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 800401e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800402a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80040b4 <MPU6050_Read_All+0x1f4>
 800402e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004032:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80040b8 <MPU6050_Read_All+0x1f8>
 8004036:	ee77 7a87 	vadd.f32	s15, s15, s14
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 16.4;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fc fa6c 	bl	8000524 <__aeabi_i2d>
 800404c:	a316      	add	r3, pc, #88	@ (adr r3, 80040a8 <MPU6050_Read_All+0x1e8>)
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004052:	f7fc fbfb 	bl	800084c <__aeabi_ddiv>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	6839      	ldr	r1, [r7, #0]
 800405c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 16.4;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8004066:	4618      	mov	r0, r3
 8004068:	f7fc fa5c 	bl	8000524 <__aeabi_i2d>
 800406c:	a30e      	add	r3, pc, #56	@ (adr r3, 80040a8 <MPU6050_Read_All+0x1e8>)
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	f7fc fbeb 	bl	800084c <__aeabi_ddiv>
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 16.4;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc fa4c 	bl	8000524 <__aeabi_i2d>
 800408c:	a306      	add	r3, pc, #24	@ (adr r3, 80040a8 <MPU6050_Read_All+0x1e8>)
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	f7fc fbdb 	bl	800084c <__aeabi_ddiv>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	6839      	ldr	r1, [r7, #0]
 800409c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

}
 80040a0:	bf00      	nop
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	66666666 	.word	0x66666666
 80040ac:	40306666 	.word	0x40306666
 80040b0:	40a00000 	.word	0x40a00000
 80040b4:	43aa0000 	.word	0x43aa0000
 80040b8:	42121eb8 	.word	0x42121eb8

080040bc <MPU6050_Init>:



void MPU6050_Init(void){
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0

	MPU6050_Init_Module(&hi2c1);
 80040c0:	4804      	ldr	r0, [pc, #16]	@ (80040d4 <MPU6050_Init+0x18>)
 80040c2:	f7ff fea5 	bl	8003e10 <MPU6050_Init_Module>
	MPU6050_Init_Module(&hi2c2);
 80040c6:	4804      	ldr	r0, [pc, #16]	@ (80040d8 <MPU6050_Init+0x1c>)
 80040c8:	f7ff fea2 	bl	8003e10 <MPU6050_Init_Module>
	MPU6050_memoryRefresh();
 80040cc:	f7ff fe4c 	bl	8003d68 <MPU6050_memoryRefresh>

}
 80040d0:	bf00      	nop
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	2000062c 	.word	0x2000062c
 80040d8:	20000680 	.word	0x20000680

080040dc <BlackBox_init>:

#include "Modules/BlackBox/blackbox.h"

char gucDirName[7];

void BlackBox_init(void){
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0

	uint8_t buf = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	71fb      	strb	r3, [r7, #7]

	Mount_SD("/");
 80040e6:	4829      	ldr	r0, [pc, #164]	@ (800418c <BlackBox_init+0xb0>)
 80040e8:	f7fc ff46 	bl	8000f78 <Mount_SD>

	buf = MEMORY.str.STATUS.Reset_Number;
 80040ec:	4b28      	ldr	r3, [pc, #160]	@ (8004190 <BlackBox_init+0xb4>)
 80040ee:	7f1b      	ldrb	r3, [r3, #28]
 80040f0:	71fb      	strb	r3, [r7, #7]

	sprintf(gucDirName,"LOG_");
 80040f2:	4928      	ldr	r1, [pc, #160]	@ (8004194 <BlackBox_init+0xb8>)
 80040f4:	4828      	ldr	r0, [pc, #160]	@ (8004198 <BlackBox_init+0xbc>)
 80040f6:	f00a f93f 	bl	800e378 <siprintf>
	gucDirName[4] = buf/100 + 48;
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	4a27      	ldr	r2, [pc, #156]	@ (800419c <BlackBox_init+0xc0>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	b2db      	uxtb	r3, r3
 8004106:	3330      	adds	r3, #48	@ 0x30
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4b23      	ldr	r3, [pc, #140]	@ (8004198 <BlackBox_init+0xbc>)
 800410c:	711a      	strb	r2, [r3, #4]

	buf -= (buf/100) * 100;
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	4a22      	ldr	r2, [pc, #136]	@ (800419c <BlackBox_init+0xc0>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	0092      	lsls	r2, r2, #2
 800411e:	441a      	add	r2, r3
 8004120:	00d2      	lsls	r2, r2, #3
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	b2da      	uxtb	r2, r3
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	4413      	add	r3, r2
 800412c:	71fb      	strb	r3, [r7, #7]

	gucDirName[5] = buf/10 + 48;
 800412e:	79fb      	ldrb	r3, [r7, #7]
 8004130:	4a1b      	ldr	r2, [pc, #108]	@ (80041a0 <BlackBox_init+0xc4>)
 8004132:	fba2 2303 	umull	r2, r3, r2, r3
 8004136:	08db      	lsrs	r3, r3, #3
 8004138:	b2db      	uxtb	r3, r3
 800413a:	3330      	adds	r3, #48	@ 0x30
 800413c:	b2da      	uxtb	r2, r3
 800413e:	4b16      	ldr	r3, [pc, #88]	@ (8004198 <BlackBox_init+0xbc>)
 8004140:	715a      	strb	r2, [r3, #5]

	buf -= (buf/10) * 10;
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	4a16      	ldr	r2, [pc, #88]	@ (80041a0 <BlackBox_init+0xc4>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	08db      	lsrs	r3, r3, #3
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	0152      	lsls	r2, r2, #5
 8004152:	1ad2      	subs	r2, r2, r3
 8004154:	0092      	lsls	r2, r2, #2
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	b2da      	uxtb	r2, r3
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	4413      	add	r3, r2
 8004160:	71fb      	strb	r3, [r7, #7]

	gucDirName[6] = buf + 48;
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	3330      	adds	r3, #48	@ 0x30
 8004166:	b2da      	uxtb	r2, r3
 8004168:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <BlackBox_init+0xbc>)
 800416a:	719a      	strb	r2, [r3, #6]

	MEMORY.str.STATUS.Reset_Number++;
 800416c:	4b08      	ldr	r3, [pc, #32]	@ (8004190 <BlackBox_init+0xb4>)
 800416e:	7f1b      	ldrb	r3, [r3, #28]
 8004170:	3301      	adds	r3, #1
 8004172:	b2da      	uxtb	r2, r3
 8004174:	4b06      	ldr	r3, [pc, #24]	@ (8004190 <BlackBox_init+0xb4>)
 8004176:	771a      	strb	r2, [r3, #28]

	Create_Dir(gucDirName);
 8004178:	4807      	ldr	r0, [pc, #28]	@ (8004198 <BlackBox_init+0xbc>)
 800417a:	f7fc ff13 	bl	8000fa4 <Create_Dir>

	MEMORY_write();
 800417e:	f000 fc71 	bl	8004a64 <MEMORY_write>
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	0800f8a8 	.word	0x0800f8a8
 8004190:	20000cf8 	.word	0x20000cf8
 8004194:	0800f8ac 	.word	0x0800f8ac
 8004198:	20000cec 	.word	0x20000cec
 800419c:	51eb851f 	.word	0x51eb851f
 80041a0:	cccccccd 	.word	0xcccccccd

080041a4 <get_ACC>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

void get_ACC(void){
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0


	if(!(SYSTEM_STATUS.peripheral_Flags & (MPU60501_ERRORMASK | MPU60502_ERRORMASK))){
 80041a8:	4bb1      	ldr	r3, [pc, #708]	@ (8004470 <get_ACC+0x2cc>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f040 8102 	bne.w	80043ba <get_ACC+0x216>
		MPU6050_Read_All(&hi2c1, &MPU6050.Module_1);
 80041b6:	49af      	ldr	r1, [pc, #700]	@ (8004474 <get_ACC+0x2d0>)
 80041b8:	48af      	ldr	r0, [pc, #700]	@ (8004478 <get_ACC+0x2d4>)
 80041ba:	f7ff fe81 	bl	8003ec0 <MPU6050_Read_All>
		MPU6050_Read_All(&hi2c2, &MPU6050.Module_2);
 80041be:	49af      	ldr	r1, [pc, #700]	@ (800447c <get_ACC+0x2d8>)
 80041c0:	48af      	ldr	r0, [pc, #700]	@ (8004480 <get_ACC+0x2dc>)
 80041c2:	f7ff fe7d 	bl	8003ec0 <MPU6050_Read_All>

		MPU6050_getPromModule(&MPU6050.Module_1);
 80041c6:	48ab      	ldr	r0, [pc, #684]	@ (8004474 <get_ACC+0x2d0>)
 80041c8:	f7ff fbc6 	bl	8003958 <MPU6050_getPromModule>
		MPU6050_getPromModule(&MPU6050.Module_2);
 80041cc:	48ab      	ldr	r0, [pc, #684]	@ (800447c <get_ACC+0x2d8>)
 80041ce:	f7ff fbc3 	bl	8003958 <MPU6050_getPromModule>

		MPU6050.Data.Accel_X_RAW = (MPU6050.Module_1.Accel_X_RAW + MPU6050.Module_2.Accel_X_RAW)/2;
 80041d2:	4ba8      	ldr	r3, [pc, #672]	@ (8004474 <get_ACC+0x2d0>)
 80041d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041d8:	461a      	mov	r2, r3
 80041da:	4ba6      	ldr	r3, [pc, #664]	@ (8004474 <get_ACC+0x2d0>)
 80041dc:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	@ 0xb0
 80041e0:	4413      	add	r3, r2
 80041e2:	0fda      	lsrs	r2, r3, #31
 80041e4:	4413      	add	r3, r2
 80041e6:	105b      	asrs	r3, r3, #1
 80041e8:	b21a      	sxth	r2, r3
 80041ea:	4ba2      	ldr	r3, [pc, #648]	@ (8004474 <get_ACC+0x2d0>)
 80041ec:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
		MPU6050.Data.Accel_Y_RAW = (MPU6050.Module_1.Accel_Y_RAW + MPU6050.Module_2.Accel_Y_RAW)/2;
 80041f0:	4ba0      	ldr	r3, [pc, #640]	@ (8004474 <get_ACC+0x2d0>)
 80041f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80041f6:	461a      	mov	r2, r3
 80041f8:	4b9e      	ldr	r3, [pc, #632]	@ (8004474 <get_ACC+0x2d0>)
 80041fa:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	@ 0xb2
 80041fe:	4413      	add	r3, r2
 8004200:	0fda      	lsrs	r2, r3, #31
 8004202:	4413      	add	r3, r2
 8004204:	105b      	asrs	r3, r3, #1
 8004206:	b21a      	sxth	r2, r3
 8004208:	4b9a      	ldr	r3, [pc, #616]	@ (8004474 <get_ACC+0x2d0>)
 800420a:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		MPU6050.Data.Accel_Z_RAW = (MPU6050.Module_1.Accel_Z_RAW + MPU6050.Module_2.Accel_Z_RAW)/2;
 800420e:	4b99      	ldr	r3, [pc, #612]	@ (8004474 <get_ACC+0x2d0>)
 8004210:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004214:	461a      	mov	r2, r3
 8004216:	4b97      	ldr	r3, [pc, #604]	@ (8004474 <get_ACC+0x2d0>)
 8004218:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800421c:	4413      	add	r3, r2
 800421e:	0fda      	lsrs	r2, r3, #31
 8004220:	4413      	add	r3, r2
 8004222:	105b      	asrs	r3, r3, #1
 8004224:	b21a      	sxth	r2, r3
 8004226:	4b93      	ldr	r3, [pc, #588]	@ (8004474 <get_ACC+0x2d0>)
 8004228:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

		MPU6050.Data.Gyro_X_RAW  = (MPU6050.Module_1.Gyro_X_RAW + MPU6050.Module_2.Gyro_X_RAW)/2;
 800422c:	4b91      	ldr	r3, [pc, #580]	@ (8004474 <get_ACC+0x2d0>)
 800422e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004232:	461a      	mov	r2, r3
 8004234:	4b8f      	ldr	r3, [pc, #572]	@ (8004474 <get_ACC+0x2d0>)
 8004236:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 800423a:	4413      	add	r3, r2
 800423c:	0fda      	lsrs	r2, r3, #31
 800423e:	4413      	add	r3, r2
 8004240:	105b      	asrs	r3, r3, #1
 8004242:	b21a      	sxth	r2, r3
 8004244:	4b8b      	ldr	r3, [pc, #556]	@ (8004474 <get_ACC+0x2d0>)
 8004246:	f8a3 2180 	strh.w	r2, [r3, #384]	@ 0x180
		MPU6050.Data.Gyro_Y_RAW  = (MPU6050.Module_1.Gyro_Y_RAW + MPU6050.Module_2.Gyro_Y_RAW)/2;
 800424a:	4b8a      	ldr	r3, [pc, #552]	@ (8004474 <get_ACC+0x2d0>)
 800424c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8004250:	461a      	mov	r2, r3
 8004252:	4b88      	ldr	r3, [pc, #544]	@ (8004474 <get_ACC+0x2d0>)
 8004254:	f9b3 30d2 	ldrsh.w	r3, [r3, #210]	@ 0xd2
 8004258:	4413      	add	r3, r2
 800425a:	0fda      	lsrs	r2, r3, #31
 800425c:	4413      	add	r3, r2
 800425e:	105b      	asrs	r3, r3, #1
 8004260:	b21a      	sxth	r2, r3
 8004262:	4b84      	ldr	r3, [pc, #528]	@ (8004474 <get_ACC+0x2d0>)
 8004264:	f8a3 2182 	strh.w	r2, [r3, #386]	@ 0x182
		MPU6050.Data.Gyro_Z_RAW  = (MPU6050.Module_1.Gyro_Z_RAW + MPU6050.Module_2.Gyro_Z_RAW)/2;
 8004268:	4b82      	ldr	r3, [pc, #520]	@ (8004474 <get_ACC+0x2d0>)
 800426a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800426e:	461a      	mov	r2, r3
 8004270:	4b80      	ldr	r3, [pc, #512]	@ (8004474 <get_ACC+0x2d0>)
 8004272:	f9b3 30d4 	ldrsh.w	r3, [r3, #212]	@ 0xd4
 8004276:	4413      	add	r3, r2
 8004278:	0fda      	lsrs	r2, r3, #31
 800427a:	4413      	add	r3, r2
 800427c:	105b      	asrs	r3, r3, #1
 800427e:	b21a      	sxth	r2, r3
 8004280:	4b7c      	ldr	r3, [pc, #496]	@ (8004474 <get_ACC+0x2d0>)
 8004282:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

		MPU6050.Data.Ax			 = (MPU6050.Module_1.Ax + MPU6050.Module_2.Ax)/2;
 8004286:	4b7b      	ldr	r3, [pc, #492]	@ (8004474 <get_ACC+0x2d0>)
 8004288:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800428c:	4b79      	ldr	r3, [pc, #484]	@ (8004474 <get_ACC+0x2d0>)
 800428e:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8004292:	f7fb fffb 	bl	800028c <__adddf3>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80042a6:	f7fc fad1 	bl	800084c <__aeabi_ddiv>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4971      	ldr	r1, [pc, #452]	@ (8004474 <get_ACC+0x2d0>)
 80042b0:	e9c1 235a 	strd	r2, r3, [r1, #360]	@ 0x168
		MPU6050.Data.Ay			 = (MPU6050.Module_1.Ay + MPU6050.Module_2.Ay)/2;
 80042b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004474 <get_ACC+0x2d0>)
 80042b6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80042ba:	4b6e      	ldr	r3, [pc, #440]	@ (8004474 <get_ACC+0x2d0>)
 80042bc:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80042c0:	f7fb ffe4 	bl	800028c <__adddf3>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4610      	mov	r0, r2
 80042ca:	4619      	mov	r1, r3
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80042d4:	f7fc faba 	bl	800084c <__aeabi_ddiv>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4965      	ldr	r1, [pc, #404]	@ (8004474 <get_ACC+0x2d0>)
 80042de:	e9c1 235c 	strd	r2, r3, [r1, #368]	@ 0x170
		MPU6050.Data.Az			 = (MPU6050.Module_1.Az + MPU6050.Module_2.Az)/2;
 80042e2:	4b64      	ldr	r3, [pc, #400]	@ (8004474 <get_ACC+0x2d0>)
 80042e4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80042e8:	4b62      	ldr	r3, [pc, #392]	@ (8004474 <get_ACC+0x2d0>)
 80042ea:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80042ee:	f7fb ffcd 	bl	800028c <__adddf3>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004302:	f7fc faa3 	bl	800084c <__aeabi_ddiv>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	495a      	ldr	r1, [pc, #360]	@ (8004474 <get_ACC+0x2d0>)
 800430c:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178

		MPU6050.Data.Gx			 = (MPU6050.Module_1.Gx + MPU6050.Module_2.Gx)/2;
 8004310:	4b58      	ldr	r3, [pc, #352]	@ (8004474 <get_ACC+0x2d0>)
 8004312:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8004316:	4b57      	ldr	r3, [pc, #348]	@ (8004474 <get_ACC+0x2d0>)
 8004318:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	@ 0xd8
 800431c:	f7fb ffb6 	bl	800028c <__adddf3>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4610      	mov	r0, r2
 8004326:	4619      	mov	r1, r3
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004330:	f7fc fa8c 	bl	800084c <__aeabi_ddiv>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	494e      	ldr	r1, [pc, #312]	@ (8004474 <get_ACC+0x2d0>)
 800433a:	e9c1 2362 	strd	r2, r3, [r1, #392]	@ 0x188
		MPU6050.Data.Gy			 = (MPU6050.Module_1.Gy + MPU6050.Module_2.Gy)/2;
 800433e:	4b4d      	ldr	r3, [pc, #308]	@ (8004474 <get_ACC+0x2d0>)
 8004340:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8004344:	4b4b      	ldr	r3, [pc, #300]	@ (8004474 <get_ACC+0x2d0>)
 8004346:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 800434a:	f7fb ff9f 	bl	800028c <__adddf3>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800435e:	f7fc fa75 	bl	800084c <__aeabi_ddiv>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4943      	ldr	r1, [pc, #268]	@ (8004474 <get_ACC+0x2d0>)
 8004368:	e9c1 2364 	strd	r2, r3, [r1, #400]	@ 0x190
		MPU6050.Data.Gz			 = (MPU6050.Module_1.Gz + MPU6050.Module_2.Gz)/2;
 800436c:	4b41      	ldr	r3, [pc, #260]	@ (8004474 <get_ACC+0x2d0>)
 800436e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8004372:	4b40      	ldr	r3, [pc, #256]	@ (8004474 <get_ACC+0x2d0>)
 8004374:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 8004378:	f7fb ff88 	bl	800028c <__adddf3>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800438c:	f7fc fa5e 	bl	800084c <__aeabi_ddiv>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4937      	ldr	r1, [pc, #220]	@ (8004474 <get_ACC+0x2d0>)
 8004396:	e9c1 2366 	strd	r2, r3, [r1, #408]	@ 0x198

		MPU6050.Data.Temperature = (MPU6050.Module_1.Temperature + MPU6050.Module_2.Temperature)/2;
 800439a:	4b36      	ldr	r3, [pc, #216]	@ (8004474 <get_ACC+0x2d0>)
 800439c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80043a0:	4b34      	ldr	r3, [pc, #208]	@ (8004474 <get_ACC+0x2d0>)
 80043a2:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 80043a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043aa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80043ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043b2:	4b30      	ldr	r3, [pc, #192]	@ (8004474 <get_ACC+0x2d0>)
 80043b4:	edc3 7a68 	vstr	s15, [r3, #416]	@ 0x1a0
 80043b8:	e0bf      	b.n	800453a <get_ACC+0x396>
	}
	else if(!(SYSTEM_STATUS.peripheral_Flags & MPU60501_ERRORMASK)){
 80043ba:	4b2d      	ldr	r3, [pc, #180]	@ (8004470 <get_ACC+0x2cc>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d15e      	bne.n	8004484 <get_ACC+0x2e0>
		MPU6050_Read_All(&hi2c1, &MPU6050.Module_1);
 80043c6:	492b      	ldr	r1, [pc, #172]	@ (8004474 <get_ACC+0x2d0>)
 80043c8:	482b      	ldr	r0, [pc, #172]	@ (8004478 <get_ACC+0x2d4>)
 80043ca:	f7ff fd79 	bl	8003ec0 <MPU6050_Read_All>
		MPU6050_getPromModule(&MPU6050.Module_1);
 80043ce:	4829      	ldr	r0, [pc, #164]	@ (8004474 <get_ACC+0x2d0>)
 80043d0:	f7ff fac2 	bl	8003958 <MPU6050_getPromModule>

		MPU6050.Data.Accel_X_RAW = MPU6050.Module_1.Accel_X_RAW;
 80043d4:	4b27      	ldr	r3, [pc, #156]	@ (8004474 <get_ACC+0x2d0>)
 80043d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80043da:	4b26      	ldr	r3, [pc, #152]	@ (8004474 <get_ACC+0x2d0>)
 80043dc:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
		MPU6050.Data.Accel_Y_RAW = MPU6050.Module_1.Accel_Y_RAW;
 80043e0:	4b24      	ldr	r3, [pc, #144]	@ (8004474 <get_ACC+0x2d0>)
 80043e2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80043e6:	4b23      	ldr	r3, [pc, #140]	@ (8004474 <get_ACC+0x2d0>)
 80043e8:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		MPU6050.Data.Accel_Z_RAW = MPU6050.Module_1.Accel_Z_RAW;
 80043ec:	4b21      	ldr	r3, [pc, #132]	@ (8004474 <get_ACC+0x2d0>)
 80043ee:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80043f2:	4b20      	ldr	r3, [pc, #128]	@ (8004474 <get_ACC+0x2d0>)
 80043f4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

		MPU6050.Data.Gyro_X_RAW  = MPU6050.Module_1.Gyro_X_RAW;
 80043f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004474 <get_ACC+0x2d0>)
 80043fa:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80043fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004474 <get_ACC+0x2d0>)
 8004400:	f8a3 2180 	strh.w	r2, [r3, #384]	@ 0x180
		MPU6050.Data.Gyro_Y_RAW  = MPU6050.Module_1.Gyro_Y_RAW;
 8004404:	4b1b      	ldr	r3, [pc, #108]	@ (8004474 <get_ACC+0x2d0>)
 8004406:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 800440a:	4b1a      	ldr	r3, [pc, #104]	@ (8004474 <get_ACC+0x2d0>)
 800440c:	f8a3 2182 	strh.w	r2, [r3, #386]	@ 0x182
		MPU6050.Data.Gyro_Z_RAW  = MPU6050.Module_1.Gyro_Z_RAW;
 8004410:	4b18      	ldr	r3, [pc, #96]	@ (8004474 <get_ACC+0x2d0>)
 8004412:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 8004416:	4b17      	ldr	r3, [pc, #92]	@ (8004474 <get_ACC+0x2d0>)
 8004418:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

		MPU6050.Data.Ax			 = MPU6050.Module_1.Ax;
 800441c:	4b15      	ldr	r3, [pc, #84]	@ (8004474 <get_ACC+0x2d0>)
 800441e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004422:	4914      	ldr	r1, [pc, #80]	@ (8004474 <get_ACC+0x2d0>)
 8004424:	e9c1 235a 	strd	r2, r3, [r1, #360]	@ 0x168
		MPU6050.Data.Ay			 = MPU6050.Module_1.Ay;
 8004428:	4b12      	ldr	r3, [pc, #72]	@ (8004474 <get_ACC+0x2d0>)
 800442a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800442e:	4911      	ldr	r1, [pc, #68]	@ (8004474 <get_ACC+0x2d0>)
 8004430:	e9c1 235c 	strd	r2, r3, [r1, #368]	@ 0x170
		MPU6050.Data.Az			 = MPU6050.Module_1.Az;
 8004434:	4b0f      	ldr	r3, [pc, #60]	@ (8004474 <get_ACC+0x2d0>)
 8004436:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800443a:	490e      	ldr	r1, [pc, #56]	@ (8004474 <get_ACC+0x2d0>)
 800443c:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178

		MPU6050.Data.Gx			 = MPU6050.Module_1.Gx;
 8004440:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <get_ACC+0x2d0>)
 8004442:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004446:	490b      	ldr	r1, [pc, #44]	@ (8004474 <get_ACC+0x2d0>)
 8004448:	e9c1 2362 	strd	r2, r3, [r1, #392]	@ 0x188
		MPU6050.Data.Gy			 = MPU6050.Module_1.Gy;
 800444c:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <get_ACC+0x2d0>)
 800444e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004452:	4908      	ldr	r1, [pc, #32]	@ (8004474 <get_ACC+0x2d0>)
 8004454:	e9c1 2364 	strd	r2, r3, [r1, #400]	@ 0x190
		MPU6050.Data.Gz			 = MPU6050.Module_1.Gz;
 8004458:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <get_ACC+0x2d0>)
 800445a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800445e:	4905      	ldr	r1, [pc, #20]	@ (8004474 <get_ACC+0x2d0>)
 8004460:	e9c1 2366 	strd	r2, r3, [r1, #408]	@ 0x198

		MPU6050.Data.Temperature = MPU6050.Module_1.Temperature;
 8004464:	4b03      	ldr	r3, [pc, #12]	@ (8004474 <get_ACC+0x2d0>)
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	4a02      	ldr	r2, [pc, #8]	@ (8004474 <get_ACC+0x2d0>)
 800446a:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
 800446e:	e064      	b.n	800453a <get_ACC+0x396>
 8004470:	20000d18 	.word	0x20000d18
 8004474:	20000ac8 	.word	0x20000ac8
 8004478:	2000062c 	.word	0x2000062c
 800447c:	20000b78 	.word	0x20000b78
 8004480:	20000680 	.word	0x20000680
	}
	else if(!(SYSTEM_STATUS.peripheral_Flags & MPU60502_ERRORMASK)){
 8004484:	4b2f      	ldr	r3, [pc, #188]	@ (8004544 <get_ACC+0x3a0>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d154      	bne.n	800453a <get_ACC+0x396>
		MPU6050_Read_All(&hi2c2, &MPU6050.Module_2);
 8004490:	492d      	ldr	r1, [pc, #180]	@ (8004548 <get_ACC+0x3a4>)
 8004492:	482e      	ldr	r0, [pc, #184]	@ (800454c <get_ACC+0x3a8>)
 8004494:	f7ff fd14 	bl	8003ec0 <MPU6050_Read_All>
		MPU6050_getPromModule(&MPU6050.Module_2);
 8004498:	482b      	ldr	r0, [pc, #172]	@ (8004548 <get_ACC+0x3a4>)
 800449a:	f7ff fa5d 	bl	8003958 <MPU6050_getPromModule>

		MPU6050.Data.Accel_X_RAW = MPU6050.Module_2.Accel_X_RAW;
 800449e:	4b2c      	ldr	r3, [pc, #176]	@ (8004550 <get_ACC+0x3ac>)
 80044a0:	f9b3 20b0 	ldrsh.w	r2, [r3, #176]	@ 0xb0
 80044a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004550 <get_ACC+0x3ac>)
 80044a6:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160
		MPU6050.Data.Accel_Y_RAW = MPU6050.Module_2.Accel_Y_RAW;
 80044aa:	4b29      	ldr	r3, [pc, #164]	@ (8004550 <get_ACC+0x3ac>)
 80044ac:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	@ 0xb2
 80044b0:	4b27      	ldr	r3, [pc, #156]	@ (8004550 <get_ACC+0x3ac>)
 80044b2:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		MPU6050.Data.Accel_Z_RAW = MPU6050.Module_2.Accel_Z_RAW;
 80044b6:	4b26      	ldr	r3, [pc, #152]	@ (8004550 <get_ACC+0x3ac>)
 80044b8:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	@ 0xb4
 80044bc:	4b24      	ldr	r3, [pc, #144]	@ (8004550 <get_ACC+0x3ac>)
 80044be:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

		MPU6050.Data.Gyro_X_RAW  = MPU6050.Module_2.Gyro_X_RAW;
 80044c2:	4b23      	ldr	r3, [pc, #140]	@ (8004550 <get_ACC+0x3ac>)
 80044c4:	f9b3 20d0 	ldrsh.w	r2, [r3, #208]	@ 0xd0
 80044c8:	4b21      	ldr	r3, [pc, #132]	@ (8004550 <get_ACC+0x3ac>)
 80044ca:	f8a3 2180 	strh.w	r2, [r3, #384]	@ 0x180
		MPU6050.Data.Gyro_Y_RAW  = MPU6050.Module_2.Gyro_Y_RAW;
 80044ce:	4b20      	ldr	r3, [pc, #128]	@ (8004550 <get_ACC+0x3ac>)
 80044d0:	f9b3 20d2 	ldrsh.w	r2, [r3, #210]	@ 0xd2
 80044d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004550 <get_ACC+0x3ac>)
 80044d6:	f8a3 2182 	strh.w	r2, [r3, #386]	@ 0x182
		MPU6050.Data.Gyro_Z_RAW  = MPU6050.Module_2.Gyro_Z_RAW;
 80044da:	4b1d      	ldr	r3, [pc, #116]	@ (8004550 <get_ACC+0x3ac>)
 80044dc:	f9b3 20d4 	ldrsh.w	r2, [r3, #212]	@ 0xd4
 80044e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004550 <get_ACC+0x3ac>)
 80044e2:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184

		MPU6050.Data.Ax			 = MPU6050.Module_2.Ax;
 80044e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004550 <get_ACC+0x3ac>)
 80044e8:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 80044ec:	4918      	ldr	r1, [pc, #96]	@ (8004550 <get_ACC+0x3ac>)
 80044ee:	e9c1 235a 	strd	r2, r3, [r1, #360]	@ 0x168
		MPU6050.Data.Ay			 = MPU6050.Module_2.Ay;
 80044f2:	4b17      	ldr	r3, [pc, #92]	@ (8004550 <get_ACC+0x3ac>)
 80044f4:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80044f8:	4915      	ldr	r1, [pc, #84]	@ (8004550 <get_ACC+0x3ac>)
 80044fa:	e9c1 235c 	strd	r2, r3, [r1, #368]	@ 0x170
		MPU6050.Data.Az			 = MPU6050.Module_2.Az;
 80044fe:	4b14      	ldr	r3, [pc, #80]	@ (8004550 <get_ACC+0x3ac>)
 8004500:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8004504:	4912      	ldr	r1, [pc, #72]	@ (8004550 <get_ACC+0x3ac>)
 8004506:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178

		MPU6050.Data.Gx			 = MPU6050.Module_2.Gx;
 800450a:	4b11      	ldr	r3, [pc, #68]	@ (8004550 <get_ACC+0x3ac>)
 800450c:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	@ 0xd8
 8004510:	490f      	ldr	r1, [pc, #60]	@ (8004550 <get_ACC+0x3ac>)
 8004512:	e9c1 2362 	strd	r2, r3, [r1, #392]	@ 0x188
		MPU6050.Data.Gy			 = MPU6050.Module_2.Gy;
 8004516:	4b0e      	ldr	r3, [pc, #56]	@ (8004550 <get_ACC+0x3ac>)
 8004518:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	@ 0xe0
 800451c:	490c      	ldr	r1, [pc, #48]	@ (8004550 <get_ACC+0x3ac>)
 800451e:	e9c1 2364 	strd	r2, r3, [r1, #400]	@ 0x190
		MPU6050.Data.Gz			 = MPU6050.Module_2.Gz;
 8004522:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <get_ACC+0x3ac>)
 8004524:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	@ 0xe8
 8004528:	4909      	ldr	r1, [pc, #36]	@ (8004550 <get_ACC+0x3ac>)
 800452a:	e9c1 2366 	strd	r2, r3, [r1, #408]	@ 0x198

		MPU6050.Data.Temperature = MPU6050.Module_2.Temperature;
 800452e:	4b08      	ldr	r3, [pc, #32]	@ (8004550 <get_ACC+0x3ac>)
 8004530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004534:	4a06      	ldr	r2, [pc, #24]	@ (8004550 <get_ACC+0x3ac>)
 8004536:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
	}
	MPU6050_getPromModule(&MPU6050.Data);
 800453a:	4806      	ldr	r0, [pc, #24]	@ (8004554 <get_ACC+0x3b0>)
 800453c:	f7ff fa0c 	bl	8003958 <MPU6050_getPromModule>
}
 8004540:	bf00      	nop
 8004542:	bd80      	pop	{r7, pc}
 8004544:	20000d18 	.word	0x20000d18
 8004548:	20000b78 	.word	0x20000b78
 800454c:	20000680 	.word	0x20000680
 8004550:	20000ac8 	.word	0x20000ac8
 8004554:	20000c28 	.word	0x20000c28

08004558 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8004558:	b5b0      	push	{r4, r5, r7, lr}
 800455a:	b096      	sub	sp, #88	@ 0x58
 800455c:	af00      	add	r7, sp, #0
 800455e:	61f8      	str	r0, [r7, #28]
 8004560:	ed87 0b04 	vstr	d0, [r7, #16]
 8004564:	ed87 1b02 	vstr	d1, [r7, #8]
 8004568:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004572:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004576:	f7fb fe87 	bl	8000288 <__aeabi_dsub>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004588:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800458c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004590:	f7fc f832 	bl	80005f8 <__aeabi_dmul>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4620      	mov	r0, r4
 800459a:	4629      	mov	r1, r5
 800459c:	f7fb fe76 	bl	800028c <__adddf3>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	69f9      	ldr	r1, [r7, #28]
 80045a6:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80045b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ba:	f7fc f81d 	bl	80005f8 <__aeabi_dmul>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4610      	mov	r0, r2
 80045c4:	4619      	mov	r1, r3
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80045cc:	f7fb fe5c 	bl	8000288 <__aeabi_dsub>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4610      	mov	r0, r2
 80045d6:	4619      	mov	r1, r3
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80045de:	f7fb fe53 	bl	8000288 <__aeabi_dsub>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	f7fb fe4c 	bl	800028c <__adddf3>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4610      	mov	r0, r2
 80045fa:	4619      	mov	r1, r3
 80045fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004600:	f7fb fffa 	bl	80005f8 <__aeabi_dmul>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4620      	mov	r0, r4
 800460a:	4629      	mov	r1, r5
 800460c:	f7fb fe3e 	bl	800028c <__adddf3>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	69f9      	ldr	r1, [r7, #28]
 8004616:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8004626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800462a:	f7fb ffe5 	bl	80005f8 <__aeabi_dmul>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4620      	mov	r0, r4
 8004634:	4629      	mov	r1, r5
 8004636:	f7fb fe27 	bl	8000288 <__aeabi_dsub>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	69f9      	ldr	r1, [r7, #28]
 8004640:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8004650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004654:	f7fb ffd0 	bl	80005f8 <__aeabi_dmul>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4620      	mov	r0, r4
 800465e:	4629      	mov	r1, r5
 8004660:	f7fb fe12 	bl	8000288 <__aeabi_dsub>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	69f9      	ldr	r1, [r7, #28]
 800466a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800467a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800467e:	f7fb ffbb 	bl	80005f8 <__aeabi_dmul>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4620      	mov	r0, r4
 8004688:	4629      	mov	r1, r5
 800468a:	f7fb fdff 	bl	800028c <__adddf3>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	69f9      	ldr	r1, [r7, #28]
 8004694:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80046a4:	f7fb fdf2 	bl	800028c <__adddf3>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80046b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046ba:	f7fc f8c7 	bl	800084c <__aeabi_ddiv>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80046cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80046d0:	f7fc f8bc 	bl	800084c <__aeabi_ddiv>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80046e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80046e6:	f7fb fdcf 	bl	8000288 <__aeabi_dsub>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80046f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80046fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004700:	f7fb ff7a 	bl	80005f8 <__aeabi_dmul>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4620      	mov	r0, r4
 800470a:	4629      	mov	r1, r5
 800470c:	f7fb fdbe 	bl	800028c <__adddf3>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	69f9      	ldr	r1, [r7, #28]
 8004716:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8004720:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004724:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004728:	f7fb ff66 	bl	80005f8 <__aeabi_dmul>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4620      	mov	r0, r4
 8004732:	4629      	mov	r1, r5
 8004734:	f7fb fdaa 	bl	800028c <__adddf3>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	69f9      	ldr	r1, [r7, #28]
 800473e:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8004748:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004752:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800475c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004760:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004764:	f7fb ff48 	bl	80005f8 <__aeabi_dmul>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4620      	mov	r0, r4
 800476e:	4629      	mov	r1, r5
 8004770:	f7fb fd8a 	bl	8000288 <__aeabi_dsub>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	69f9      	ldr	r1, [r7, #28]
 800477a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8004784:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004788:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800478c:	f7fb ff34 	bl	80005f8 <__aeabi_dmul>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4620      	mov	r0, r4
 8004796:	4629      	mov	r1, r5
 8004798:	f7fb fd76 	bl	8000288 <__aeabi_dsub>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	69f9      	ldr	r1, [r7, #28]
 80047a2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80047ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80047b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80047b4:	f7fb ff20 	bl	80005f8 <__aeabi_dmul>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4620      	mov	r0, r4
 80047be:	4629      	mov	r1, r5
 80047c0:	f7fb fd62 	bl	8000288 <__aeabi_dsub>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	69f9      	ldr	r1, [r7, #28]
 80047ca:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80047d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80047d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80047dc:	f7fb ff0c 	bl	80005f8 <__aeabi_dmul>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4620      	mov	r0, r4
 80047e6:	4629      	mov	r1, r5
 80047e8:	f7fb fd4e 	bl	8000288 <__aeabi_dsub>
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	69f9      	ldr	r1, [r7, #28]
 80047f2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80047fc:	ec43 2b17 	vmov	d7, r2, r3
};
 8004800:	eeb0 0a47 	vmov.f32	s0, s14
 8004804:	eef0 0a67 	vmov.f32	s1, s15
 8004808:	3758      	adds	r7, #88	@ 0x58
 800480a:	46bd      	mov	sp, r7
 800480c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004810 <get_ATTS>:

void get_ATTS(MPU6050_modules_t *DataStruct){
 8004810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004814:	b08a      	sub	sp, #40	@ 0x28
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800481a:	f000 fa1d 	bl	8004c58 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	4b83      	ldr	r3, [pc, #524]	@ (8004a30 <get_ATTS+0x220>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	4618      	mov	r0, r3
 8004828:	f7fb fe6c 	bl	8000504 <__aeabi_ui2d>
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	4b80      	ldr	r3, [pc, #512]	@ (8004a34 <get_ATTS+0x224>)
 8004832:	f7fc f80b 	bl	800084c <__aeabi_ddiv>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    timer = HAL_GetTick();
 800483e:	f000 fa0b 	bl	8004c58 <HAL_GetTick>
 8004842:	4603      	mov	r3, r0
 8004844:	4a7a      	ldr	r2, [pc, #488]	@ (8004a30 <get_ATTS+0x220>)
 8004846:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Data.Prom.Accel_X_RAW * DataStruct->Data.Prom.Accel_X_RAW + DataStruct->Data.Prom.Accel_Z_RAW * DataStruct->Data.Prom.Accel_Z_RAW);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	@ 0x1f4
 800484e:	461a      	mov	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	@ 0x1f4
 8004856:	fb03 f202 	mul.w	r2, r3, r2
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	@ 0x1f8
 8004860:	4619      	mov	r1, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	@ 0x1f8
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800486e:	4618      	mov	r0, r3
 8004870:	f7fb fe58 	bl	8000524 <__aeabi_i2d>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	ec43 2b10 	vmov	d0, r2, r3
 800487c:	f00a fa5e 	bl	800ed3c <sqrt>
 8004880:	ed87 0b04 	vstr	d0, [r7, #16]
    if (roll_sqrt != 0.0) {
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004890:	f7fc f91a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d11f      	bne.n	80048da <get_ATTS+0xca>
        roll = atan(DataStruct->Data.Prom.Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	@ 0x1f6
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fb fe3f 	bl	8000524 <__aeabi_i2d>
 80048a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048aa:	f7fb ffcf 	bl	800084c <__aeabi_ddiv>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	ec43 2b17 	vmov	d7, r2, r3
 80048b6:	eeb0 0a47 	vmov.f32	s0, s14
 80048ba:	eef0 0a67 	vmov.f32	s1, s15
 80048be:	f00a fa6b 	bl	800ed98 <atan>
 80048c2:	ec51 0b10 	vmov	r0, r1, d0
 80048c6:	a358      	add	r3, pc, #352	@ (adr r3, 8004a28 <get_ATTS+0x218>)
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f7fb fe94 	bl	80005f8 <__aeabi_dmul>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80048d8:	e005      	b.n	80048e6 <get_ATTS+0xd6>
    } else {
        roll = 0.0;
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
    double pitch = atan2(-DataStruct->Data.Prom.Accel_X_RAW, DataStruct->Data.Prom.Accel_Z_RAW) * RAD_TO_DEG;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	@ 0x1f4
 80048ec:	425b      	negs	r3, r3
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fb fe18 	bl	8000524 <__aeabi_i2d>
 80048f4:	4682      	mov	sl, r0
 80048f6:	468b      	mov	fp, r1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	@ 0x1f8
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fb fe10 	bl	8000524 <__aeabi_i2d>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	ec43 2b11 	vmov	d1, r2, r3
 800490c:	ec4b ab10 	vmov	d0, sl, fp
 8004910:	f00a f9d2 	bl	800ecb8 <atan2>
 8004914:	ec51 0b10 	vmov	r0, r1, d0
 8004918:	a343      	add	r3, pc, #268	@ (adr r3, 8004a28 <get_ATTS+0x218>)
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	f7fb fe6b 	bl	80005f8 <__aeabi_dmul>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	e9c7 2302 	strd	r2, r3, [r7, #8]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	4b42      	ldr	r3, [pc, #264]	@ (8004a38 <get_ATTS+0x228>)
 8004930:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004934:	f7fc f8d2 	bl	8000adc <__aeabi_dcmplt>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <get_ATTS+0x144>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	@ 0x218
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	4b3c      	ldr	r3, [pc, #240]	@ (8004a3c <get_ATTS+0x22c>)
 800494a:	f7fc f8e5 	bl	8000b18 <__aeabi_dcmpgt>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d114      	bne.n	800497e <get_ATTS+0x16e>
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	4b38      	ldr	r3, [pc, #224]	@ (8004a3c <get_ATTS+0x22c>)
 800495a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800495e:	f7fc f8db 	bl	8000b18 <__aeabi_dcmpgt>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d015      	beq.n	8004994 <get_ATTS+0x184>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	e9d3 0186 	ldrd	r0, r1, [r3, #536]	@ 0x218
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	4b31      	ldr	r3, [pc, #196]	@ (8004a38 <get_ATTS+0x228>)
 8004974:	f7fc f8b2 	bl	8000adc <__aeabi_dcmplt>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <get_ATTS+0x184>
        KalmanY.angle = pitch;
 800497e:	4930      	ldr	r1, [pc, #192]	@ (8004a40 <get_ATTS+0x230>)
 8004980:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004984:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800498e:	e9c1 2386 	strd	r2, r3, [r1, #536]	@ 0x218
 8004992:	e014      	b.n	80049be <get_ATTS+0x1ae>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Data.Gy, dt);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	ed93 7b64 	vldr	d7, [r3, #400]	@ 0x190
 800499a:	ed97 2b06 	vldr	d2, [r7, #24]
 800499e:	eeb0 1a47 	vmov.f32	s2, s14
 80049a2:	eef0 1a67 	vmov.f32	s3, s15
 80049a6:	ed97 0b02 	vldr	d0, [r7, #8]
 80049aa:	4825      	ldr	r0, [pc, #148]	@ (8004a40 <get_ATTS+0x230>)
 80049ac:	f7ff fdd4 	bl	8004558 <Kalman_getAngle>
 80049b0:	eeb0 7a40 	vmov.f32	s14, s0
 80049b4:	eef0 7a60 	vmov.f32	s15, s1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	ed83 7b86 	vstr	d7, [r3, #536]	@ 0x218
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	@ 0x218
 80049c4:	4690      	mov	r8, r2
 80049c6:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	4b1b      	ldr	r3, [pc, #108]	@ (8004a3c <get_ATTS+0x22c>)
 80049d0:	4640      	mov	r0, r8
 80049d2:	4649      	mov	r1, r9
 80049d4:	f7fc f8a0 	bl	8000b18 <__aeabi_dcmpgt>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <get_ATTS+0x1e0>
        DataStruct->Data.Gx = -DataStruct->Data.Gx;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	@ 0x188
 80049e4:	4614      	mov	r4, r2
 80049e6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	e9c3 4562 	strd	r4, r5, [r3, #392]	@ 0x188
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Data.Gy, dt);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	ed93 7b64 	vldr	d7, [r3, #400]	@ 0x190
 80049f6:	ed97 2b06 	vldr	d2, [r7, #24]
 80049fa:	eeb0 1a47 	vmov.f32	s2, s14
 80049fe:	eef0 1a67 	vmov.f32	s3, s15
 8004a02:	ed97 0b08 	vldr	d0, [r7, #32]
 8004a06:	480f      	ldr	r0, [pc, #60]	@ (8004a44 <get_ATTS+0x234>)
 8004a08:	f7ff fda6 	bl	8004558 <Kalman_getAngle>
 8004a0c:	eeb0 7a40 	vmov.f32	s14, s0
 8004a10:	eef0 7a60 	vmov.f32	s15, s1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	ed83 7b84 	vstr	d7, [r3, #528]	@ 0x210

}
 8004a1a:	bf00      	nop
 8004a1c:	3728      	adds	r7, #40	@ 0x28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a24:	f3af 8000 	nop.w
 8004a28:	1a63c1f8 	.word	0x1a63c1f8
 8004a2c:	404ca5dc 	.word	0x404ca5dc
 8004a30:	20000cf4 	.word	0x20000cf4
 8004a34:	408f4000 	.word	0x408f4000
 8004a38:	c0568000 	.word	0xc0568000
 8004a3c:	40568000 	.word	0x40568000
 8004a40:	20000050 	.word	0x20000050
 8004a44:	20000008 	.word	0x20000008

08004a48 <MEMORY_init>:

#include "Modules/Status/memory.h"

MEMORY_u MEMORY;

void MEMORY_init(void){
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
	Flash_Read(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	4903      	ldr	r1, [pc, #12]	@ (8004a5c <MEMORY_init+0x14>)
 8004a50:	4803      	ldr	r0, [pc, #12]	@ (8004a60 <MEMORY_init+0x18>)
 8004a52:	f7fe ff63 	bl	800391c <Flash_Read>
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000cf8 	.word	0x20000cf8
 8004a60:	08020000 	.word	0x08020000

08004a64 <MEMORY_write>:


void MEMORY_write(void){
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
	Flash_Write(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 8004a68:	2208      	movs	r2, #8
 8004a6a:	4905      	ldr	r1, [pc, #20]	@ (8004a80 <MEMORY_write+0x1c>)
 8004a6c:	4805      	ldr	r0, [pc, #20]	@ (8004a84 <MEMORY_write+0x20>)
 8004a6e:	f7fe fefd 	bl	800386c <Flash_Write>
	Flash_Read(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 8004a72:	2208      	movs	r2, #8
 8004a74:	4902      	ldr	r1, [pc, #8]	@ (8004a80 <MEMORY_write+0x1c>)
 8004a76:	4803      	ldr	r0, [pc, #12]	@ (8004a84 <MEMORY_write+0x20>)
 8004a78:	f7fe ff50 	bl	800391c <Flash_Read>
}
 8004a7c:	bf00      	nop
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000cf8 	.word	0x20000cf8
 8004a84:	08020000 	.word	0x08020000

08004a88 <get_STATUS>:

#include "Modules/Status/status.h"

status_t SYSTEM_STATUS;

void get_STATUS(void){
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	af00      	add	r7, sp, #0
	SYSTEM_STATUS.peripheral_Flags = MPU6050_status();
 8004a8c:	f7ff f90e 	bl	8003cac <MPU6050_status>
 8004a90:	4603      	mov	r3, r0
 8004a92:	461a      	mov	r2, r3
 8004a94:	4b01      	ldr	r3, [pc, #4]	@ (8004a9c <get_STATUS+0x14>)
 8004a96:	701a      	strb	r2, [r3, #0]
}
 8004a98:	bf00      	nop
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20000d18 	.word	0x20000d18

08004aa0 <DeployParachute>:
 */


#include "Modules/Telemetry/payload.h"

void DeployParachute(void){
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0


	if((abs((int)MPU6050.KalmanAngleX))>45){
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad0 <DeployParachute+0x30>)
 8004aa6:	e9d3 2384 	ldrd	r2, r3, [r3, #528]	@ 0x210
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4619      	mov	r1, r3
 8004aae:	f7fc f853 	bl	8000b58 <__aeabi_d2iz>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bfb8      	it	lt
 8004ab8:	425b      	neglt	r3, r3
 8004aba:	2b2d      	cmp	r3, #45	@ 0x2d
 8004abc:	dc06      	bgt.n	8004acc <DeployParachute+0x2c>

	}
	else if((abs((int)MPU6050.KalmanAngleY))>45){
 8004abe:	4b04      	ldr	r3, [pc, #16]	@ (8004ad0 <DeployParachute+0x30>)
 8004ac0:	e9d3 2386 	ldrd	r2, r3, [r3, #536]	@ 0x218
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	f7fc f846 	bl	8000b58 <__aeabi_d2iz>

	}
}
 8004acc:	bf00      	nop
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000ac8 	.word	0x20000ac8

08004ad4 <init_task_1ms>:

uint16_t test = 300;

//////////////////////////////INICIALIZACIÓN DE FUNCIONES///////////////////////////////////////

void init_task_1ms(void){
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
	MPU6050_Init();
 8004ad8:	f7ff faf0 	bl	80040bc <MPU6050_Init>
}
 8004adc:	bf00      	nop
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <init_task_5ms>:

void init_task_5ms(void){
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
	BMP280_init();
 8004ae4:	f7fe fdfa 	bl	80036dc <BMP280_init>


}
 8004ae8:	bf00      	nop
 8004aea:	bd80      	pop	{r7, pc}

08004aec <init_task_10ms>:

void init_task_10ms(void){
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0

}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <init_task_50ms>:

void init_task_50ms(void){
 8004afa:	b480      	push	{r7}
 8004afc:	af00      	add	r7, sp, #0

}
 8004afe:	bf00      	nop
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <init_task_100ms>:

void init_task_100ms(void){
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0

}
 8004b0c:	bf00      	nop
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <init_task_500ms>:

void init_task_500ms(void){
 8004b16:	b480      	push	{r7}
 8004b18:	af00      	add	r7, sp, #0

}
 8004b1a:	bf00      	nop
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <task_1ms>:

//////////////////////////////FUNCIONES PERIODICAS///////////////////////////////////////

void task_1ms(void){
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
	get_ACC();
 8004b28:	f7ff fb3c 	bl	80041a4 <get_ACC>
	get_STATUS();
 8004b2c:	f7ff ffac 	bl	8004a88 <get_STATUS>
}
 8004b30:	bf00      	nop
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <task_5ms>:

void task_5ms(void){
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
	BMP280_calculate();
 8004b38:	f7fe fdf4 	bl	8003724 <BMP280_calculate>
	get_ATTS(&MPU6050);
 8004b3c:	4802      	ldr	r0, [pc, #8]	@ (8004b48 <task_5ms+0x14>)
 8004b3e:	f7ff fe67 	bl	8004810 <get_ATTS>

}
 8004b42:	bf00      	nop
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20000ac8 	.word	0x20000ac8

08004b4c <task_10ms>:

void task_10ms(void){
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
	//if(test == 1){
	//	MPU6050_calibration();
	//	test = 0;
	//}
}
 8004b50:	bf00      	nop
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <task_50ms>:

void task_50ms(void){
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	af00      	add	r7, sp, #0
	DeployParachute();
 8004b5e:	f7ff ff9f 	bl	8004aa0 <DeployParachute>

}
 8004b62:	bf00      	nop
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <task_100ms>:

void task_100ms(void){
 8004b66:	b480      	push	{r7}
 8004b68:	af00      	add	r7, sp, #0

}
 8004b6a:	bf00      	nop
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <task_500ms>:

void task_500ms(void){
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
	  TIM2->CCR4 = test;
 8004b78:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <task_500ms+0x1c>)
 8004b7a:	881a      	ldrh	r2, [r3, #0]
 8004b7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004b80:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004b82:	210c      	movs	r1, #12
 8004b84:	4803      	ldr	r0, [pc, #12]	@ (8004b94 <task_500ms+0x20>)
 8004b86:	f004 f811 	bl	8008bac <HAL_TIM_PWM_Start>
}
 8004b8a:	bf00      	nop
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000098 	.word	0x20000098
 8004b94:	200009a0 	.word	0x200009a0

08004b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004bd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b9c:	f7fd ff0a 	bl	80029b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ba0:	480c      	ldr	r0, [pc, #48]	@ (8004bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004ba2:	490d      	ldr	r1, [pc, #52]	@ (8004bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8004bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ba8:	e002      	b.n	8004bb0 <LoopCopyDataInit>

08004baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bae:	3304      	adds	r3, #4

08004bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bb4:	d3f9      	bcc.n	8004baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8004be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bbc:	e001      	b.n	8004bc2 <LoopFillZerobss>

08004bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bc0:	3204      	adds	r2, #4

08004bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bc4:	d3fb      	bcc.n	8004bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004bc6:	f009 fc05 	bl	800e3d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bca:	f7fd fad7 	bl	800217c <main>
  bx  lr    
 8004bce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004bd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bd8:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8004bdc:	0800fa58 	.word	0x0800fa58
  ldr r2, =_sbss
 8004be0:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8004be4:	20004c58 	.word	0x20004c58

08004be8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004be8:	e7fe      	b.n	8004be8 <ADC_IRQHandler>
	...

08004bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8004c2c <HAL_Init+0x40>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8004c2c <HAL_Init+0x40>)
 8004bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c2c <HAL_Init+0x40>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0a      	ldr	r2, [pc, #40]	@ (8004c2c <HAL_Init+0x40>)
 8004c02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c08:	4b08      	ldr	r3, [pc, #32]	@ (8004c2c <HAL_Init+0x40>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a07      	ldr	r2, [pc, #28]	@ (8004c2c <HAL_Init+0x40>)
 8004c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c14:	2003      	movs	r0, #3
 8004c16:	f000 fb4a 	bl	80052ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c1a:	200f      	movs	r0, #15
 8004c1c:	f7fd fd94 	bl	8002748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c20:	f7fd fd66 	bl	80026f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023c00 	.word	0x40023c00

08004c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c34:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <HAL_IncTick+0x20>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4b06      	ldr	r3, [pc, #24]	@ (8004c54 <HAL_IncTick+0x24>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4413      	add	r3, r2
 8004c40:	4a04      	ldr	r2, [pc, #16]	@ (8004c54 <HAL_IncTick+0x24>)
 8004c42:	6013      	str	r3, [r2, #0]
}
 8004c44:	bf00      	nop
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	200000a0 	.word	0x200000a0
 8004c54:	20000d1c 	.word	0x20000d1c

08004c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c5c:	4b03      	ldr	r3, [pc, #12]	@ (8004c6c <HAL_GetTick+0x14>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	20000d1c 	.word	0x20000d1c

08004c70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e033      	b.n	8004cee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fc fa00 	bl	8001094 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d118      	bne.n	8004ce0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004cb6:	f023 0302 	bic.w	r3, r3, #2
 8004cba:	f043 0202 	orr.w	r2, r3, #2
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f94a 	bl	8004f5c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	f023 0303 	bic.w	r3, r3, #3
 8004cd6:	f043 0201 	orr.w	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cde:	e001      	b.n	8004ce4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x1c>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e113      	b.n	8004f3c <HAL_ADC_ConfigChannel+0x244>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b09      	cmp	r3, #9
 8004d22:	d925      	bls.n	8004d70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68d9      	ldr	r1, [r3, #12]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	4613      	mov	r3, r2
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	4413      	add	r3, r2
 8004d38:	3b1e      	subs	r3, #30
 8004d3a:	2207      	movs	r2, #7
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	43da      	mvns	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	400a      	ands	r2, r1
 8004d48:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68d9      	ldr	r1, [r3, #12]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	4403      	add	r3, r0
 8004d62:	3b1e      	subs	r3, #30
 8004d64:	409a      	lsls	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	60da      	str	r2, [r3, #12]
 8004d6e:	e022      	b.n	8004db6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6919      	ldr	r1, [r3, #16]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4613      	mov	r3, r2
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	4413      	add	r3, r2
 8004d84:	2207      	movs	r2, #7
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43da      	mvns	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	400a      	ands	r2, r1
 8004d92:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6919      	ldr	r1, [r3, #16]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	4618      	mov	r0, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4403      	add	r3, r0
 8004dac:	409a      	lsls	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b06      	cmp	r3, #6
 8004dbc:	d824      	bhi.n	8004e08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	3b05      	subs	r3, #5
 8004dd0:	221f      	movs	r2, #31
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43da      	mvns	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	400a      	ands	r2, r1
 8004dde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	4618      	mov	r0, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	3b05      	subs	r3, #5
 8004dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e06:	e04c      	b.n	8004ea2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b0c      	cmp	r3, #12
 8004e0e:	d824      	bhi.n	8004e5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	3b23      	subs	r3, #35	@ 0x23
 8004e22:	221f      	movs	r2, #31
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43da      	mvns	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	400a      	ands	r2, r1
 8004e30:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	4618      	mov	r0, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	3b23      	subs	r3, #35	@ 0x23
 8004e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e58:	e023      	b.n	8004ea2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	3b41      	subs	r3, #65	@ 0x41
 8004e6c:	221f      	movs	r2, #31
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	43da      	mvns	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	400a      	ands	r2, r1
 8004e7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	4618      	mov	r0, r3
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	3b41      	subs	r3, #65	@ 0x41
 8004e96:	fa00 f203 	lsl.w	r2, r0, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ea2:	4b29      	ldr	r3, [pc, #164]	@ (8004f48 <HAL_ADC_ConfigChannel+0x250>)
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a28      	ldr	r2, [pc, #160]	@ (8004f4c <HAL_ADC_ConfigChannel+0x254>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d10f      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x1d8>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b12      	cmp	r3, #18
 8004eb6:	d10b      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f4c <HAL_ADC_ConfigChannel+0x254>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d12b      	bne.n	8004f32 <HAL_ADC_ConfigChannel+0x23a>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1c      	ldr	r2, [pc, #112]	@ (8004f50 <HAL_ADC_ConfigChannel+0x258>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <HAL_ADC_ConfigChannel+0x1f4>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b11      	cmp	r3, #17
 8004eea:	d122      	bne.n	8004f32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a11      	ldr	r2, [pc, #68]	@ (8004f50 <HAL_ADC_ConfigChannel+0x258>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d111      	bne.n	8004f32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f0e:	4b11      	ldr	r3, [pc, #68]	@ (8004f54 <HAL_ADC_ConfigChannel+0x25c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a11      	ldr	r2, [pc, #68]	@ (8004f58 <HAL_ADC_ConfigChannel+0x260>)
 8004f14:	fba2 2303 	umull	r2, r3, r2, r3
 8004f18:	0c9a      	lsrs	r2, r3, #18
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f24:	e002      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f9      	bne.n	8004f26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40012300 	.word	0x40012300
 8004f4c:	40012000 	.word	0x40012000
 8004f50:	10000012 	.word	0x10000012
 8004f54:	20000004 	.word	0x20000004
 8004f58:	431bde83 	.word	0x431bde83

08004f5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f64:	4b79      	ldr	r3, [pc, #484]	@ (800514c <ADC_Init+0x1f0>)
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6859      	ldr	r1, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	021a      	lsls	r2, r3, #8
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6859      	ldr	r1, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6899      	ldr	r1, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fee:	4a58      	ldr	r2, [pc, #352]	@ (8005150 <ADC_Init+0x1f4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d022      	beq.n	800503a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005002:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6899      	ldr	r1, [r3, #8]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6899      	ldr	r1, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	609a      	str	r2, [r3, #8]
 8005038:	e00f      	b.n	800505a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005058:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0202 	bic.w	r2, r2, #2
 8005068:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6899      	ldr	r1, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	7e1b      	ldrb	r3, [r3, #24]
 8005074:	005a      	lsls	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01b      	beq.n	80050c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005096:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80050a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6859      	ldr	r1, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b2:	3b01      	subs	r3, #1
 80050b4:	035a      	lsls	r2, r3, #13
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
 80050be:	e007      	b.n	80050d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80050de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	051a      	lsls	r2, r3, #20
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005104:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6899      	ldr	r1, [r3, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005112:	025a      	lsls	r2, r3, #9
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800512a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6899      	ldr	r1, [r3, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	029a      	lsls	r2, r3, #10
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	609a      	str	r2, [r3, #8]
}
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40012300 	.word	0x40012300
 8005150:	0f000001 	.word	0x0f000001

08005154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005164:	4b0c      	ldr	r3, [pc, #48]	@ (8005198 <__NVIC_SetPriorityGrouping+0x44>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005170:	4013      	ands	r3, r2
 8005172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800517c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005186:	4a04      	ldr	r2, [pc, #16]	@ (8005198 <__NVIC_SetPriorityGrouping+0x44>)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	60d3      	str	r3, [r2, #12]
}
 800518c:	bf00      	nop
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr
 8005198:	e000ed00 	.word	0xe000ed00

0800519c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051a0:	4b04      	ldr	r3, [pc, #16]	@ (80051b4 <__NVIC_GetPriorityGrouping+0x18>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	0a1b      	lsrs	r3, r3, #8
 80051a6:	f003 0307 	and.w	r3, r3, #7
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	e000ed00 	.word	0xe000ed00

080051b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	db0b      	blt.n	80051e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	f003 021f 	and.w	r2, r3, #31
 80051d0:	4907      	ldr	r1, [pc, #28]	@ (80051f0 <__NVIC_EnableIRQ+0x38>)
 80051d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	2001      	movs	r0, #1
 80051da:	fa00 f202 	lsl.w	r2, r0, r2
 80051de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	e000e100 	.word	0xe000e100

080051f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	4603      	mov	r3, r0
 80051fc:	6039      	str	r1, [r7, #0]
 80051fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005204:	2b00      	cmp	r3, #0
 8005206:	db0a      	blt.n	800521e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	b2da      	uxtb	r2, r3
 800520c:	490c      	ldr	r1, [pc, #48]	@ (8005240 <__NVIC_SetPriority+0x4c>)
 800520e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005212:	0112      	lsls	r2, r2, #4
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	440b      	add	r3, r1
 8005218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800521c:	e00a      	b.n	8005234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	4908      	ldr	r1, [pc, #32]	@ (8005244 <__NVIC_SetPriority+0x50>)
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	3b04      	subs	r3, #4
 800522c:	0112      	lsls	r2, r2, #4
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	440b      	add	r3, r1
 8005232:	761a      	strb	r2, [r3, #24]
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	e000e100 	.word	0xe000e100
 8005244:	e000ed00 	.word	0xe000ed00

08005248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005248:	b480      	push	{r7}
 800524a:	b089      	sub	sp, #36	@ 0x24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f1c3 0307 	rsb	r3, r3, #7
 8005262:	2b04      	cmp	r3, #4
 8005264:	bf28      	it	cs
 8005266:	2304      	movcs	r3, #4
 8005268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	3304      	adds	r3, #4
 800526e:	2b06      	cmp	r3, #6
 8005270:	d902      	bls.n	8005278 <NVIC_EncodePriority+0x30>
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	3b03      	subs	r3, #3
 8005276:	e000      	b.n	800527a <NVIC_EncodePriority+0x32>
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800527c:	f04f 32ff 	mov.w	r2, #4294967295
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	fa02 f303 	lsl.w	r3, r2, r3
 8005286:	43da      	mvns	r2, r3
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	401a      	ands	r2, r3
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005290:	f04f 31ff 	mov.w	r1, #4294967295
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	fa01 f303 	lsl.w	r3, r1, r3
 800529a:	43d9      	mvns	r1, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052a0:	4313      	orrs	r3, r2
         );
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3724      	adds	r7, #36	@ 0x24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff ff4c 	bl	8005154 <__NVIC_SetPriorityGrouping>
}
 80052bc:	bf00      	nop
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052d6:	f7ff ff61 	bl	800519c <__NVIC_GetPriorityGrouping>
 80052da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	6978      	ldr	r0, [r7, #20]
 80052e2:	f7ff ffb1 	bl	8005248 <NVIC_EncodePriority>
 80052e6:	4602      	mov	r2, r0
 80052e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ec:	4611      	mov	r1, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff ff80 	bl	80051f4 <__NVIC_SetPriority>
}
 80052f4:	bf00      	nop
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff ff54 	bl	80051b8 <__NVIC_EnableIRQ>
}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005324:	f7ff fc98 	bl	8004c58 <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e099      	b.n	8005468 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0201 	bic.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005354:	e00f      	b.n	8005376 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005356:	f7ff fc7f 	bl	8004c58 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b05      	cmp	r3, #5
 8005362:	d908      	bls.n	8005376 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2203      	movs	r2, #3
 800536e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e078      	b.n	8005468 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e8      	bne.n	8005356 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4b38      	ldr	r3, [pc, #224]	@ (8005470 <HAL_DMA_Init+0x158>)
 8005390:	4013      	ands	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d107      	bne.n	80053e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d8:	4313      	orrs	r3, r2
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f023 0307 	bic.w	r3, r3, #7
 80053f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005406:	2b04      	cmp	r3, #4
 8005408:	d117      	bne.n	800543a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00e      	beq.n	800543a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fa0b 	bl	8005838 <DMA_CheckFifoParam>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2240      	movs	r2, #64	@ 0x40
 800542c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005436:	2301      	movs	r3, #1
 8005438:	e016      	b.n	8005468 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f9c2 	bl	80057cc <DMA_CalcBaseAndBitshift>
 8005448:	4603      	mov	r3, r0
 800544a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005450:	223f      	movs	r2, #63	@ 0x3f
 8005452:	409a      	lsls	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	f010803f 	.word	0xf010803f

08005474 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d004      	beq.n	8005492 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2280      	movs	r2, #128	@ 0x80
 800548c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e00c      	b.n	80054ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2205      	movs	r2, #5
 8005496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0201 	bic.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054c4:	4b8e      	ldr	r3, [pc, #568]	@ (8005700 <HAL_DMA_IRQHandler+0x248>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a8e      	ldr	r2, [pc, #568]	@ (8005704 <HAL_DMA_IRQHandler+0x24c>)
 80054ca:	fba2 2303 	umull	r2, r3, r2, r3
 80054ce:	0a9b      	lsrs	r3, r3, #10
 80054d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e2:	2208      	movs	r2, #8
 80054e4:	409a      	lsls	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4013      	ands	r3, r2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d01a      	beq.n	8005524 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d013      	beq.n	8005524 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0204 	bic.w	r2, r2, #4
 800550a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005510:	2208      	movs	r2, #8
 8005512:	409a      	lsls	r2, r3
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800551c:	f043 0201 	orr.w	r2, r3, #1
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005528:	2201      	movs	r2, #1
 800552a:	409a      	lsls	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4013      	ands	r3, r2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d012      	beq.n	800555a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00b      	beq.n	800555a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005546:	2201      	movs	r2, #1
 8005548:	409a      	lsls	r2, r3
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005552:	f043 0202 	orr.w	r2, r3, #2
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800555e:	2204      	movs	r2, #4
 8005560:	409a      	lsls	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4013      	ands	r3, r2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d012      	beq.n	8005590 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00b      	beq.n	8005590 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800557c:	2204      	movs	r2, #4
 800557e:	409a      	lsls	r2, r3
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005588:	f043 0204 	orr.w	r2, r3, #4
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005594:	2210      	movs	r2, #16
 8005596:	409a      	lsls	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4013      	ands	r3, r2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d043      	beq.n	8005628 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d03c      	beq.n	8005628 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b2:	2210      	movs	r2, #16
 80055b4:	409a      	lsls	r2, r3
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d018      	beq.n	80055fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d108      	bne.n	80055e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d024      	beq.n	8005628 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	4798      	blx	r3
 80055e6:	e01f      	b.n	8005628 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01b      	beq.n	8005628 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4798      	blx	r3
 80055f8:	e016      	b.n	8005628 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005604:	2b00      	cmp	r3, #0
 8005606:	d107      	bne.n	8005618 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0208 	bic.w	r2, r2, #8
 8005616:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800562c:	2220      	movs	r2, #32
 800562e:	409a      	lsls	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4013      	ands	r3, r2
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 808f 	beq.w	8005758 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 8087 	beq.w	8005758 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800564e:	2220      	movs	r2, #32
 8005650:	409a      	lsls	r2, r3
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b05      	cmp	r3, #5
 8005660:	d136      	bne.n	80056d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0216 	bic.w	r2, r2, #22
 8005670:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695a      	ldr	r2, [r3, #20]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005680:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d103      	bne.n	8005692 <HAL_DMA_IRQHandler+0x1da>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800568e:	2b00      	cmp	r3, #0
 8005690:	d007      	beq.n	80056a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0208 	bic.w	r2, r2, #8
 80056a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a6:	223f      	movs	r2, #63	@ 0x3f
 80056a8:	409a      	lsls	r2, r3
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d07e      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	4798      	blx	r3
        }
        return;
 80056ce:	e079      	b.n	80057c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d01d      	beq.n	800571a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10d      	bne.n	8005708 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d031      	beq.n	8005758 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	4798      	blx	r3
 80056fc:	e02c      	b.n	8005758 <HAL_DMA_IRQHandler+0x2a0>
 80056fe:	bf00      	nop
 8005700:	20000004 	.word	0x20000004
 8005704:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d023      	beq.n	8005758 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	4798      	blx	r3
 8005718:	e01e      	b.n	8005758 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10f      	bne.n	8005748 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0210 	bic.w	r2, r2, #16
 8005736:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800575c:	2b00      	cmp	r3, #0
 800575e:	d032      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d022      	beq.n	80057b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2205      	movs	r2, #5
 8005770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0201 	bic.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	3301      	adds	r3, #1
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	429a      	cmp	r2, r3
 800578e:	d307      	bcc.n	80057a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f2      	bne.n	8005784 <HAL_DMA_IRQHandler+0x2cc>
 800579e:	e000      	b.n	80057a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80057a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	4798      	blx	r3
 80057c2:	e000      	b.n	80057c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80057c4:	bf00      	nop
    }
  }
}
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	3b10      	subs	r3, #16
 80057dc:	4a14      	ldr	r2, [pc, #80]	@ (8005830 <DMA_CalcBaseAndBitshift+0x64>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	091b      	lsrs	r3, r3, #4
 80057e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80057e6:	4a13      	ldr	r2, [pc, #76]	@ (8005834 <DMA_CalcBaseAndBitshift+0x68>)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d909      	bls.n	800580e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005802:	f023 0303 	bic.w	r3, r3, #3
 8005806:	1d1a      	adds	r2, r3, #4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	659a      	str	r2, [r3, #88]	@ 0x58
 800580c:	e007      	b.n	800581e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005816:	f023 0303 	bic.w	r3, r3, #3
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	aaaaaaab 	.word	0xaaaaaaab
 8005834:	0800f918 	.word	0x0800f918

08005838 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005848:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d11f      	bne.n	8005892 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b03      	cmp	r3, #3
 8005856:	d856      	bhi.n	8005906 <DMA_CheckFifoParam+0xce>
 8005858:	a201      	add	r2, pc, #4	@ (adr r2, 8005860 <DMA_CheckFifoParam+0x28>)
 800585a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585e:	bf00      	nop
 8005860:	08005871 	.word	0x08005871
 8005864:	08005883 	.word	0x08005883
 8005868:	08005871 	.word	0x08005871
 800586c:	08005907 	.word	0x08005907
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005874:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d046      	beq.n	800590a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005880:	e043      	b.n	800590a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005886:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800588a:	d140      	bne.n	800590e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005890:	e03d      	b.n	800590e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800589a:	d121      	bne.n	80058e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d837      	bhi.n	8005912 <DMA_CheckFifoParam+0xda>
 80058a2:	a201      	add	r2, pc, #4	@ (adr r2, 80058a8 <DMA_CheckFifoParam+0x70>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	080058b9 	.word	0x080058b9
 80058ac:	080058bf 	.word	0x080058bf
 80058b0:	080058b9 	.word	0x080058b9
 80058b4:	080058d1 	.word	0x080058d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
      break;
 80058bc:	e030      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d025      	beq.n	8005916 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058ce:	e022      	b.n	8005916 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80058d8:	d11f      	bne.n	800591a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80058de:	e01c      	b.n	800591a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d903      	bls.n	80058ee <DMA_CheckFifoParam+0xb6>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d003      	beq.n	80058f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80058ec:	e018      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
      break;
 80058f2:	e015      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00e      	beq.n	800591e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
      break;
 8005904:	e00b      	b.n	800591e <DMA_CheckFifoParam+0xe6>
      break;
 8005906:	bf00      	nop
 8005908:	e00a      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      break;
 800590a:	bf00      	nop
 800590c:	e008      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      break;
 800590e:	bf00      	nop
 8005910:	e006      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      break;
 8005912:	bf00      	nop
 8005914:	e004      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      break;
 8005916:	bf00      	nop
 8005918:	e002      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      break;   
 800591a:	bf00      	nop
 800591c:	e000      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      break;
 800591e:	bf00      	nop
    }
  } 
  
  return status; 
 8005920:	7bfb      	ldrb	r3, [r7, #15]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop

08005930 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005942:	4b23      	ldr	r3, [pc, #140]	@ (80059d0 <HAL_FLASH_Program+0xa0>)
 8005944:	7e1b      	ldrb	r3, [r3, #24]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_FLASH_Program+0x1e>
 800594a:	2302      	movs	r3, #2
 800594c:	e03b      	b.n	80059c6 <HAL_FLASH_Program+0x96>
 800594e:	4b20      	ldr	r3, [pc, #128]	@ (80059d0 <HAL_FLASH_Program+0xa0>)
 8005950:	2201      	movs	r2, #1
 8005952:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005954:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005958:	f000 f87c 	bl	8005a54 <FLASH_WaitForLastOperation>
 800595c:	4603      	mov	r3, r0
 800595e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005960:	7dfb      	ldrb	r3, [r7, #23]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d12b      	bne.n	80059be <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800596c:	783b      	ldrb	r3, [r7, #0]
 800596e:	4619      	mov	r1, r3
 8005970:	68b8      	ldr	r0, [r7, #8]
 8005972:	f000 f927 	bl	8005bc4 <FLASH_Program_Byte>
 8005976:	e016      	b.n	80059a6 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d105      	bne.n	800598a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800597e:	883b      	ldrh	r3, [r7, #0]
 8005980:	4619      	mov	r1, r3
 8005982:	68b8      	ldr	r0, [r7, #8]
 8005984:	f000 f8fa 	bl	8005b7c <FLASH_Program_HalfWord>
 8005988:	e00d      	b.n	80059a6 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d105      	bne.n	800599c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	4619      	mov	r1, r3
 8005994:	68b8      	ldr	r0, [r7, #8]
 8005996:	f000 f8cf 	bl	8005b38 <FLASH_Program_Word>
 800599a:	e004      	b.n	80059a6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800599c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059a0:	68b8      	ldr	r0, [r7, #8]
 80059a2:	f000 f897 	bl	8005ad4 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059a6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80059aa:	f000 f853 	bl	8005a54 <FLASH_WaitForLastOperation>
 80059ae:	4603      	mov	r3, r0
 80059b0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80059b2:	4b08      	ldr	r3, [pc, #32]	@ (80059d4 <HAL_FLASH_Program+0xa4>)
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	4a07      	ldr	r2, [pc, #28]	@ (80059d4 <HAL_FLASH_Program+0xa4>)
 80059b8:	f023 0301 	bic.w	r3, r3, #1
 80059bc:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80059be:	4b04      	ldr	r3, [pc, #16]	@ (80059d0 <HAL_FLASH_Program+0xa0>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	761a      	strb	r2, [r3, #24]

  return status;
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20000d20 	.word	0x20000d20
 80059d4:	40023c00 	.word	0x40023c00

080059d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80059e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005a10 <HAL_FLASH_Unlock+0x38>)
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	da0b      	bge.n	8005a02 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80059ea:	4b09      	ldr	r3, [pc, #36]	@ (8005a10 <HAL_FLASH_Unlock+0x38>)
 80059ec:	4a09      	ldr	r2, [pc, #36]	@ (8005a14 <HAL_FLASH_Unlock+0x3c>)
 80059ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80059f0:	4b07      	ldr	r3, [pc, #28]	@ (8005a10 <HAL_FLASH_Unlock+0x38>)
 80059f2:	4a09      	ldr	r2, [pc, #36]	@ (8005a18 <HAL_FLASH_Unlock+0x40>)
 80059f4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80059f6:	4b06      	ldr	r3, [pc, #24]	@ (8005a10 <HAL_FLASH_Unlock+0x38>)
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	da01      	bge.n	8005a02 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005a02:	79fb      	ldrb	r3, [r7, #7]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	40023c00 	.word	0x40023c00
 8005a14:	45670123 	.word	0x45670123
 8005a18:	cdef89ab 	.word	0xcdef89ab

08005a1c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005a20:	4b05      	ldr	r3, [pc, #20]	@ (8005a38 <HAL_FLASH_Lock+0x1c>)
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	4a04      	ldr	r2, [pc, #16]	@ (8005a38 <HAL_FLASH_Lock+0x1c>)
 8005a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a2a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	40023c00 	.word	0x40023c00

08005a3c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag
  */
uint32_t HAL_FLASH_GetError(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8005a40:	4b03      	ldr	r3, [pc, #12]	@ (8005a50 <HAL_FLASH_GetError+0x14>)
 8005a42:	69db      	ldr	r3, [r3, #28]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000d20 	.word	0x20000d20

08005a54 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a60:	4b1a      	ldr	r3, [pc, #104]	@ (8005acc <FLASH_WaitForLastOperation+0x78>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005a66:	f7ff f8f7 	bl	8004c58 <HAL_GetTick>
 8005a6a:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8005a6c:	e010      	b.n	8005a90 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a74:	d00c      	beq.n	8005a90 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d007      	beq.n	8005a8c <FLASH_WaitForLastOperation+0x38>
 8005a7c:	f7ff f8ec 	bl	8004c58 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d201      	bcs.n	8005a90 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e019      	b.n	8005ac4 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8005a90:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad0 <FLASH_WaitForLastOperation+0x7c>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e8      	bne.n	8005a6e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad0 <FLASH_WaitForLastOperation+0x7c>)
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005aa8:	4b09      	ldr	r3, [pc, #36]	@ (8005ad0 <FLASH_WaitForLastOperation+0x7c>)
 8005aaa:	2201      	movs	r2, #1
 8005aac:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005aae:	4b08      	ldr	r3, [pc, #32]	@ (8005ad0 <FLASH_WaitForLastOperation+0x7c>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005aba:	f000 f8a5 	bl	8005c08 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0

}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20000d20 	.word	0x20000d20
 8005ad0:	40023c00 	.word	0x40023c00

08005ad4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ae0:	4b14      	ldr	r3, [pc, #80]	@ (8005b34 <FLASH_Program_DoubleWord+0x60>)
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	4a13      	ldr	r2, [pc, #76]	@ (8005b34 <FLASH_Program_DoubleWord+0x60>)
 8005ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005aea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005aec:	4b11      	ldr	r3, [pc, #68]	@ (8005b34 <FLASH_Program_DoubleWord+0x60>)
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	4a10      	ldr	r2, [pc, #64]	@ (8005b34 <FLASH_Program_DoubleWord+0x60>)
 8005af2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005af6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005af8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b34 <FLASH_Program_DoubleWord+0x60>)
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	4a0d      	ldr	r2, [pc, #52]	@ (8005b34 <FLASH_Program_DoubleWord+0x60>)
 8005afe:	f043 0301 	orr.w	r3, r3, #1
 8005b02:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005b0a:	f3bf 8f6f 	isb	sy
}
 8005b0e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8005b10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	000a      	movs	r2, r1
 8005b1e:	2300      	movs	r3, #0
 8005b20:	68f9      	ldr	r1, [r7, #12]
 8005b22:	3104      	adds	r1, #4
 8005b24:	4613      	mov	r3, r2
 8005b26:	600b      	str	r3, [r1, #0]
}
 8005b28:	bf00      	nop
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	40023c00 	.word	0x40023c00

08005b38 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b42:	4b0d      	ldr	r3, [pc, #52]	@ (8005b78 <FLASH_Program_Word+0x40>)
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	4a0c      	ldr	r2, [pc, #48]	@ (8005b78 <FLASH_Program_Word+0x40>)
 8005b48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b78 <FLASH_Program_Word+0x40>)
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	4a09      	ldr	r2, [pc, #36]	@ (8005b78 <FLASH_Program_Word+0x40>)
 8005b54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b5a:	4b07      	ldr	r3, [pc, #28]	@ (8005b78 <FLASH_Program_Word+0x40>)
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	4a06      	ldr	r2, [pc, #24]	@ (8005b78 <FLASH_Program_Word+0x40>)
 8005b60:	f043 0301 	orr.w	r3, r3, #1
 8005b64:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	601a      	str	r2, [r3, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	40023c00 	.word	0x40023c00

08005b7c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b88:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <FLASH_Program_HalfWord+0x44>)
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8005bc0 <FLASH_Program_HalfWord+0x44>)
 8005b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005b94:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc0 <FLASH_Program_HalfWord+0x44>)
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	4a09      	ldr	r2, [pc, #36]	@ (8005bc0 <FLASH_Program_HalfWord+0x44>)
 8005b9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005ba0:	4b07      	ldr	r3, [pc, #28]	@ (8005bc0 <FLASH_Program_HalfWord+0x44>)
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	4a06      	ldr	r2, [pc, #24]	@ (8005bc0 <FLASH_Program_HalfWord+0x44>)
 8005ba6:	f043 0301 	orr.w	r3, r3, #1
 8005baa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	887a      	ldrh	r2, [r7, #2]
 8005bb0:	801a      	strh	r2, [r3, #0]
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	40023c00 	.word	0x40023c00

08005bc4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c04 <FLASH_Program_Byte+0x40>)
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8005c04 <FLASH_Program_Byte+0x40>)
 8005bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005bdc:	4b09      	ldr	r3, [pc, #36]	@ (8005c04 <FLASH_Program_Byte+0x40>)
 8005bde:	4a09      	ldr	r2, [pc, #36]	@ (8005c04 <FLASH_Program_Byte+0x40>)
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005be4:	4b07      	ldr	r3, [pc, #28]	@ (8005c04 <FLASH_Program_Byte+0x40>)
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	4a06      	ldr	r2, [pc, #24]	@ (8005c04 <FLASH_Program_Byte+0x40>)
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	78fa      	ldrb	r2, [r7, #3]
 8005bf4:	701a      	strb	r2, [r3, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40023c00 	.word	0x40023c00

08005c08 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005c0c:	4b2f      	ldr	r3, [pc, #188]	@ (8005ccc <FLASH_SetErrorCode+0xc4>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d008      	beq.n	8005c2a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005c18:	4b2d      	ldr	r3, [pc, #180]	@ (8005cd0 <FLASH_SetErrorCode+0xc8>)
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	f043 0310 	orr.w	r3, r3, #16
 8005c20:	4a2b      	ldr	r2, [pc, #172]	@ (8005cd0 <FLASH_SetErrorCode+0xc8>)
 8005c22:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005c24:	4b29      	ldr	r3, [pc, #164]	@ (8005ccc <FLASH_SetErrorCode+0xc4>)
 8005c26:	2210      	movs	r2, #16
 8005c28:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005c2a:	4b28      	ldr	r3, [pc, #160]	@ (8005ccc <FLASH_SetErrorCode+0xc4>)
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d008      	beq.n	8005c48 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005c36:	4b26      	ldr	r3, [pc, #152]	@ (8005cd0 <FLASH_SetErrorCode+0xc8>)
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	f043 0308 	orr.w	r3, r3, #8
 8005c3e:	4a24      	ldr	r2, [pc, #144]	@ (8005cd0 <FLASH_SetErrorCode+0xc8>)
 8005c40:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005c42:	4b22      	ldr	r3, [pc, #136]	@ (8005ccc <FLASH_SetErrorCode+0xc4>)
 8005c44:	2220      	movs	r2, #32
 8005c46:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005c48:	4b20      	ldr	r3, [pc, #128]	@ (8005ccc <FLASH_SetErrorCode+0xc4>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005c54:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd0 <FLASH_SetErrorCode+0xc8>)
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f043 0304 	orr.w	r3, r3, #4
 8005c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd0 <FLASH_SetErrorCode+0xc8>)
 8005c5e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005c60:	4b1a      	ldr	r3, [pc, #104]	@ (8005ccc <FLASH_SetErrorCode+0xc4>)
 8005c62:	2240      	movs	r2, #64	@ 0x40
 8005c64:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005c66:	4b19      	ldr	r3, [pc, #100]	@ (8005ccc <FLASH_SetErrorCode+0xc4>)
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d008      	beq.n	8005c84 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005c72:	4b17      	ldr	r3, [pc, #92]	@ (8005cd0 <FLASH_SetErrorCode+0xc8>)
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f043 0302 	orr.w	r3, r3, #2
 8005c7a:	4a15      	ldr	r2, [pc, #84]	@ (8005cd0 <FLASH_SetErrorCode+0xc8>)
 8005c7c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005c7e:	4b13      	ldr	r3, [pc, #76]	@ (8005ccc <FLASH_SetErrorCode+0xc4>)
 8005c80:	2280      	movs	r2, #128	@ 0x80
 8005c82:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005c84:	4b11      	ldr	r3, [pc, #68]	@ (8005ccc <FLASH_SetErrorCode+0xc4>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d009      	beq.n	8005ca4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005c90:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd0 <FLASH_SetErrorCode+0xc8>)
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	f043 0301 	orr.w	r3, r3, #1
 8005c98:	4a0d      	ldr	r2, [pc, #52]	@ (8005cd0 <FLASH_SetErrorCode+0xc8>)
 8005c9a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ccc <FLASH_SetErrorCode+0xc4>)
 8005c9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ca2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005ca4:	4b09      	ldr	r3, [pc, #36]	@ (8005ccc <FLASH_SetErrorCode+0xc4>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d008      	beq.n	8005cc2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005cb0:	4b07      	ldr	r3, [pc, #28]	@ (8005cd0 <FLASH_SetErrorCode+0xc8>)
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	f043 0320 	orr.w	r3, r3, #32
 8005cb8:	4a05      	ldr	r2, [pc, #20]	@ (8005cd0 <FLASH_SetErrorCode+0xc8>)
 8005cba:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005cbc:	4b03      	ldr	r3, [pc, #12]	@ (8005ccc <FLASH_SetErrorCode+0xc4>)
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	60da      	str	r2, [r3, #12]
  }
}
 8005cc2:	bf00      	nop
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	40023c00 	.word	0x40023c00
 8005cd0:	20000d20 	.word	0x20000d20

08005cd4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ce6:	4b31      	ldr	r3, [pc, #196]	@ (8005dac <HAL_FLASHEx_Erase+0xd8>)
 8005ce8:	7e1b      	ldrb	r3, [r3, #24]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d101      	bne.n	8005cf2 <HAL_FLASHEx_Erase+0x1e>
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e058      	b.n	8005da4 <HAL_FLASHEx_Erase+0xd0>
 8005cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8005dac <HAL_FLASHEx_Erase+0xd8>)
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005cf8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005cfc:	f7ff feaa 	bl	8005a54 <FLASH_WaitForLastOperation>
 8005d00:	4603      	mov	r3, r0
 8005d02:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d148      	bne.n	8005d9c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d10:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d115      	bne.n	8005d46 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	4619      	mov	r1, r3
 8005d26:	4610      	mov	r0, r2
 8005d28:	f000 f844 	bl	8005db4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d2c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005d30:	f7ff fe90 	bl	8005a54 <FLASH_WaitForLastOperation>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005d38:	4b1d      	ldr	r3, [pc, #116]	@ (8005db0 <HAL_FLASHEx_Erase+0xdc>)
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005db0 <HAL_FLASHEx_Erase+0xdc>)
 8005d3e:	f023 0304 	bic.w	r3, r3, #4
 8005d42:	6113      	str	r3, [r2, #16]
 8005d44:	e028      	b.n	8005d98 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	60bb      	str	r3, [r7, #8]
 8005d4c:	e01c      	b.n	8005d88 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	4619      	mov	r1, r3
 8005d56:	68b8      	ldr	r0, [r7, #8]
 8005d58:	f000 f850 	bl	8005dfc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d5c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005d60:	f7ff fe78 	bl	8005a54 <FLASH_WaitForLastOperation>
 8005d64:	4603      	mov	r3, r0
 8005d66:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005d68:	4b11      	ldr	r3, [pc, #68]	@ (8005db0 <HAL_FLASHEx_Erase+0xdc>)
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	4a10      	ldr	r2, [pc, #64]	@ (8005db0 <HAL_FLASHEx_Erase+0xdc>)
 8005d6e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8005d72:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	601a      	str	r2, [r3, #0]
          break;
 8005d80:	e00a      	b.n	8005d98 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	3301      	adds	r3, #1
 8005d86:	60bb      	str	r3, [r7, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	4413      	add	r3, r2
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d3da      	bcc.n	8005d4e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005d98:	f000 f878 	bl	8005e8c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005d9c:	4b03      	ldr	r3, [pc, #12]	@ (8005dac <HAL_FLASHEx_Erase+0xd8>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	761a      	strb	r2, [r3, #24]

  return status;
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20000d20 	.word	0x20000d20
 8005db0:	40023c00 	.word	0x40023c00

08005db4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	4603      	mov	r3, r0
 8005dbc:	6039      	str	r1, [r7, #0]
 8005dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8005df8 <FLASH_MassErase+0x44>)
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8005df8 <FLASH_MassErase+0x44>)
 8005dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005df8 <FLASH_MassErase+0x44>)
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	4a09      	ldr	r2, [pc, #36]	@ (8005df8 <FLASH_MassErase+0x44>)
 8005dd2:	f043 0304 	orr.w	r3, r3, #4
 8005dd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005dd8:	4b07      	ldr	r3, [pc, #28]	@ (8005df8 <FLASH_MassErase+0x44>)
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	79fb      	ldrb	r3, [r7, #7]
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	4313      	orrs	r3, r2
 8005de2:	4a05      	ldr	r2, [pc, #20]	@ (8005df8 <FLASH_MassErase+0x44>)
 8005de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de8:	6113      	str	r3, [r2, #16]
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40023c00 	.word	0x40023c00

08005dfc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	460b      	mov	r3, r1
 8005e06:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d102      	bne.n	8005e18 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	e010      	b.n	8005e3a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d103      	bne.n	8005e26 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005e1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	e009      	b.n	8005e3a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d103      	bne.n	8005e34 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e002      	b.n	8005e3a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005e34:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005e38:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e3a:	4b13      	ldr	r3, [pc, #76]	@ (8005e88 <FLASH_Erase_Sector+0x8c>)
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	4a12      	ldr	r2, [pc, #72]	@ (8005e88 <FLASH_Erase_Sector+0x8c>)
 8005e40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005e46:	4b10      	ldr	r3, [pc, #64]	@ (8005e88 <FLASH_Erase_Sector+0x8c>)
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	490f      	ldr	r1, [pc, #60]	@ (8005e88 <FLASH_Erase_Sector+0x8c>)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005e52:	4b0d      	ldr	r3, [pc, #52]	@ (8005e88 <FLASH_Erase_Sector+0x8c>)
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	4a0c      	ldr	r2, [pc, #48]	@ (8005e88 <FLASH_Erase_Sector+0x8c>)
 8005e58:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005e5c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8005e88 <FLASH_Erase_Sector+0x8c>)
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	4313      	orrs	r3, r2
 8005e68:	4a07      	ldr	r2, [pc, #28]	@ (8005e88 <FLASH_Erase_Sector+0x8c>)
 8005e6a:	f043 0302 	orr.w	r3, r3, #2
 8005e6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005e70:	4b05      	ldr	r3, [pc, #20]	@ (8005e88 <FLASH_Erase_Sector+0x8c>)
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	4a04      	ldr	r2, [pc, #16]	@ (8005e88 <FLASH_Erase_Sector+0x8c>)
 8005e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e7a:	6113      	str	r3, [r2, #16]
}
 8005e7c:	bf00      	nop
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	40023c00 	.word	0x40023c00

08005e8c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005e90:	4b20      	ldr	r3, [pc, #128]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d017      	beq.n	8005ecc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005ea2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ea6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a19      	ldr	r2, [pc, #100]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005eae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	4b17      	ldr	r3, [pc, #92]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a16      	ldr	r2, [pc, #88]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005eba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ebe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ec0:	4b14      	ldr	r3, [pc, #80]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a13      	ldr	r2, [pc, #76]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005eca:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005ecc:	4b11      	ldr	r3, [pc, #68]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d017      	beq.n	8005f08 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a0d      	ldr	r2, [pc, #52]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005ede:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ee2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005eea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	4b08      	ldr	r3, [pc, #32]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a07      	ldr	r2, [pc, #28]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005ef6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005efa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a04      	ldr	r2, [pc, #16]	@ (8005f14 <FLASH_FlushCaches+0x88>)
 8005f02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f06:	6013      	str	r3, [r2, #0]
  }
}
 8005f08:	bf00      	nop
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40023c00 	.word	0x40023c00

08005f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b089      	sub	sp, #36	@ 0x24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61fb      	str	r3, [r7, #28]
 8005f32:	e159      	b.n	80061e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f34:	2201      	movs	r2, #1
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4013      	ands	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	f040 8148 	bne.w	80061e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d005      	beq.n	8005f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d130      	bne.n	8005fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	2203      	movs	r2, #3
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	4013      	ands	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	091b      	lsrs	r3, r3, #4
 8005fb6:	f003 0201 	and.w	r2, r3, #1
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f003 0303 	and.w	r3, r3, #3
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d017      	beq.n	8006008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	2203      	movs	r2, #3
 8005fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	4013      	ands	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d123      	bne.n	800605c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	08da      	lsrs	r2, r3, #3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3208      	adds	r2, #8
 800601c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	220f      	movs	r2, #15
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	43db      	mvns	r3, r3
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	4013      	ands	r3, r2
 8006036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	4313      	orrs	r3, r2
 800604c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	08da      	lsrs	r2, r3, #3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3208      	adds	r2, #8
 8006056:	69b9      	ldr	r1, [r7, #24]
 8006058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	2203      	movs	r2, #3
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	43db      	mvns	r3, r3
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	4013      	ands	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f003 0203 	and.w	r2, r3, #3
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	4313      	orrs	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 80a2 	beq.w	80061e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
 80060a2:	4b57      	ldr	r3, [pc, #348]	@ (8006200 <HAL_GPIO_Init+0x2e8>)
 80060a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a6:	4a56      	ldr	r2, [pc, #344]	@ (8006200 <HAL_GPIO_Init+0x2e8>)
 80060a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80060ae:	4b54      	ldr	r3, [pc, #336]	@ (8006200 <HAL_GPIO_Init+0x2e8>)
 80060b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060ba:	4a52      	ldr	r2, [pc, #328]	@ (8006204 <HAL_GPIO_Init+0x2ec>)
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	089b      	lsrs	r3, r3, #2
 80060c0:	3302      	adds	r3, #2
 80060c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	220f      	movs	r2, #15
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	43db      	mvns	r3, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	4013      	ands	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a49      	ldr	r2, [pc, #292]	@ (8006208 <HAL_GPIO_Init+0x2f0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d019      	beq.n	800611a <HAL_GPIO_Init+0x202>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a48      	ldr	r2, [pc, #288]	@ (800620c <HAL_GPIO_Init+0x2f4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d013      	beq.n	8006116 <HAL_GPIO_Init+0x1fe>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a47      	ldr	r2, [pc, #284]	@ (8006210 <HAL_GPIO_Init+0x2f8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d00d      	beq.n	8006112 <HAL_GPIO_Init+0x1fa>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a46      	ldr	r2, [pc, #280]	@ (8006214 <HAL_GPIO_Init+0x2fc>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d007      	beq.n	800610e <HAL_GPIO_Init+0x1f6>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a45      	ldr	r2, [pc, #276]	@ (8006218 <HAL_GPIO_Init+0x300>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d101      	bne.n	800610a <HAL_GPIO_Init+0x1f2>
 8006106:	2304      	movs	r3, #4
 8006108:	e008      	b.n	800611c <HAL_GPIO_Init+0x204>
 800610a:	2307      	movs	r3, #7
 800610c:	e006      	b.n	800611c <HAL_GPIO_Init+0x204>
 800610e:	2303      	movs	r3, #3
 8006110:	e004      	b.n	800611c <HAL_GPIO_Init+0x204>
 8006112:	2302      	movs	r3, #2
 8006114:	e002      	b.n	800611c <HAL_GPIO_Init+0x204>
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <HAL_GPIO_Init+0x204>
 800611a:	2300      	movs	r3, #0
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	f002 0203 	and.w	r2, r2, #3
 8006122:	0092      	lsls	r2, r2, #2
 8006124:	4093      	lsls	r3, r2
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	4313      	orrs	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800612c:	4935      	ldr	r1, [pc, #212]	@ (8006204 <HAL_GPIO_Init+0x2ec>)
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	089b      	lsrs	r3, r3, #2
 8006132:	3302      	adds	r3, #2
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800613a:	4b38      	ldr	r3, [pc, #224]	@ (800621c <HAL_GPIO_Init+0x304>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	43db      	mvns	r3, r3
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	4013      	ands	r3, r2
 8006148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800615e:	4a2f      	ldr	r2, [pc, #188]	@ (800621c <HAL_GPIO_Init+0x304>)
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006164:	4b2d      	ldr	r3, [pc, #180]	@ (800621c <HAL_GPIO_Init+0x304>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	43db      	mvns	r3, r3
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	4013      	ands	r3, r2
 8006172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006188:	4a24      	ldr	r2, [pc, #144]	@ (800621c <HAL_GPIO_Init+0x304>)
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800618e:	4b23      	ldr	r3, [pc, #140]	@ (800621c <HAL_GPIO_Init+0x304>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	43db      	mvns	r3, r3
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	4013      	ands	r3, r2
 800619c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061b2:	4a1a      	ldr	r2, [pc, #104]	@ (800621c <HAL_GPIO_Init+0x304>)
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061b8:	4b18      	ldr	r3, [pc, #96]	@ (800621c <HAL_GPIO_Init+0x304>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	43db      	mvns	r3, r3
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	4013      	ands	r3, r2
 80061c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061dc:	4a0f      	ldr	r2, [pc, #60]	@ (800621c <HAL_GPIO_Init+0x304>)
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	3301      	adds	r3, #1
 80061e6:	61fb      	str	r3, [r7, #28]
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	2b0f      	cmp	r3, #15
 80061ec:	f67f aea2 	bls.w	8005f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	3724      	adds	r7, #36	@ 0x24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40023800 	.word	0x40023800
 8006204:	40013800 	.word	0x40013800
 8006208:	40020000 	.word	0x40020000
 800620c:	40020400 	.word	0x40020400
 8006210:	40020800 	.word	0x40020800
 8006214:	40020c00 	.word	0x40020c00
 8006218:	40021000 	.word	0x40021000
 800621c:	40013c00 	.word	0x40013c00

08006220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	807b      	strh	r3, [r7, #2]
 800622c:	4613      	mov	r3, r2
 800622e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006230:	787b      	ldrb	r3, [r7, #1]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006236:	887a      	ldrh	r2, [r7, #2]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800623c:	e003      	b.n	8006246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800623e:	887b      	ldrh	r3, [r7, #2]
 8006240:	041a      	lsls	r2, r3, #16
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	619a      	str	r2, [r3, #24]
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
	...

08006254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e12b      	b.n	80064be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fb fe9c 	bl	8001fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2224      	movs	r2, #36	@ 0x24
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062b8:	f001 fc20 	bl	8007afc <HAL_RCC_GetPCLK1Freq>
 80062bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	4a81      	ldr	r2, [pc, #516]	@ (80064c8 <HAL_I2C_Init+0x274>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d807      	bhi.n	80062d8 <HAL_I2C_Init+0x84>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4a80      	ldr	r2, [pc, #512]	@ (80064cc <HAL_I2C_Init+0x278>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	bf94      	ite	ls
 80062d0:	2301      	movls	r3, #1
 80062d2:	2300      	movhi	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	e006      	b.n	80062e6 <HAL_I2C_Init+0x92>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4a7d      	ldr	r2, [pc, #500]	@ (80064d0 <HAL_I2C_Init+0x27c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	bf94      	ite	ls
 80062e0:	2301      	movls	r3, #1
 80062e2:	2300      	movhi	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e0e7      	b.n	80064be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4a78      	ldr	r2, [pc, #480]	@ (80064d4 <HAL_I2C_Init+0x280>)
 80062f2:	fba2 2303 	umull	r2, r3, r2, r3
 80062f6:	0c9b      	lsrs	r3, r3, #18
 80062f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	430a      	orrs	r2, r1
 800630c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	4a6a      	ldr	r2, [pc, #424]	@ (80064c8 <HAL_I2C_Init+0x274>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d802      	bhi.n	8006328 <HAL_I2C_Init+0xd4>
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	3301      	adds	r3, #1
 8006326:	e009      	b.n	800633c <HAL_I2C_Init+0xe8>
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800632e:	fb02 f303 	mul.w	r3, r2, r3
 8006332:	4a69      	ldr	r2, [pc, #420]	@ (80064d8 <HAL_I2C_Init+0x284>)
 8006334:	fba2 2303 	umull	r2, r3, r2, r3
 8006338:	099b      	lsrs	r3, r3, #6
 800633a:	3301      	adds	r3, #1
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	430b      	orrs	r3, r1
 8006342:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800634e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	495c      	ldr	r1, [pc, #368]	@ (80064c8 <HAL_I2C_Init+0x274>)
 8006358:	428b      	cmp	r3, r1
 800635a:	d819      	bhi.n	8006390 <HAL_I2C_Init+0x13c>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	1e59      	subs	r1, r3, #1
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	fbb1 f3f3 	udiv	r3, r1, r3
 800636a:	1c59      	adds	r1, r3, #1
 800636c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006370:	400b      	ands	r3, r1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <HAL_I2C_Init+0x138>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	1e59      	subs	r1, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	fbb1 f3f3 	udiv	r3, r1, r3
 8006384:	3301      	adds	r3, #1
 8006386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800638a:	e051      	b.n	8006430 <HAL_I2C_Init+0x1dc>
 800638c:	2304      	movs	r3, #4
 800638e:	e04f      	b.n	8006430 <HAL_I2C_Init+0x1dc>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d111      	bne.n	80063bc <HAL_I2C_Init+0x168>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	1e58      	subs	r0, r3, #1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6859      	ldr	r1, [r3, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	440b      	add	r3, r1
 80063a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80063aa:	3301      	adds	r3, #1
 80063ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	bf0c      	ite	eq
 80063b4:	2301      	moveq	r3, #1
 80063b6:	2300      	movne	r3, #0
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	e012      	b.n	80063e2 <HAL_I2C_Init+0x18e>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	1e58      	subs	r0, r3, #1
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6859      	ldr	r1, [r3, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	440b      	add	r3, r1
 80063ca:	0099      	lsls	r1, r3, #2
 80063cc:	440b      	add	r3, r1
 80063ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80063d2:	3301      	adds	r3, #1
 80063d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bf0c      	ite	eq
 80063dc:	2301      	moveq	r3, #1
 80063de:	2300      	movne	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <HAL_I2C_Init+0x196>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e022      	b.n	8006430 <HAL_I2C_Init+0x1dc>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10e      	bne.n	8006410 <HAL_I2C_Init+0x1bc>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1e58      	subs	r0, r3, #1
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6859      	ldr	r1, [r3, #4]
 80063fa:	460b      	mov	r3, r1
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	440b      	add	r3, r1
 8006400:	fbb0 f3f3 	udiv	r3, r0, r3
 8006404:	3301      	adds	r3, #1
 8006406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800640a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800640e:	e00f      	b.n	8006430 <HAL_I2C_Init+0x1dc>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	1e58      	subs	r0, r3, #1
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6859      	ldr	r1, [r3, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	0099      	lsls	r1, r3, #2
 8006420:	440b      	add	r3, r1
 8006422:	fbb0 f3f3 	udiv	r3, r0, r3
 8006426:	3301      	adds	r3, #1
 8006428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800642c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	6809      	ldr	r1, [r1, #0]
 8006434:	4313      	orrs	r3, r2
 8006436:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69da      	ldr	r2, [r3, #28]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800645e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6911      	ldr	r1, [r2, #16]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	68d2      	ldr	r2, [r2, #12]
 800646a:	4311      	orrs	r1, r2
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	6812      	ldr	r2, [r2, #0]
 8006470:	430b      	orrs	r3, r1
 8006472:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	695a      	ldr	r2, [r3, #20]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0201 	orr.w	r2, r2, #1
 800649e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	000186a0 	.word	0x000186a0
 80064cc:	001e847f 	.word	0x001e847f
 80064d0:	003d08ff 	.word	0x003d08ff
 80064d4:	431bde83 	.word	0x431bde83
 80064d8:	10624dd3 	.word	0x10624dd3

080064dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	4608      	mov	r0, r1
 80064e6:	4611      	mov	r1, r2
 80064e8:	461a      	mov	r2, r3
 80064ea:	4603      	mov	r3, r0
 80064ec:	817b      	strh	r3, [r7, #10]
 80064ee:	460b      	mov	r3, r1
 80064f0:	813b      	strh	r3, [r7, #8]
 80064f2:	4613      	mov	r3, r2
 80064f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80064f6:	f7fe fbaf 	bl	8004c58 <HAL_GetTick>
 80064fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b20      	cmp	r3, #32
 8006506:	f040 80d9 	bne.w	80066bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	2319      	movs	r3, #25
 8006510:	2201      	movs	r2, #1
 8006512:	496d      	ldr	r1, [pc, #436]	@ (80066c8 <HAL_I2C_Mem_Write+0x1ec>)
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 fc8b 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006520:	2302      	movs	r3, #2
 8006522:	e0cc      	b.n	80066be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800652a:	2b01      	cmp	r3, #1
 800652c:	d101      	bne.n	8006532 <HAL_I2C_Mem_Write+0x56>
 800652e:	2302      	movs	r3, #2
 8006530:	e0c5      	b.n	80066be <HAL_I2C_Mem_Write+0x1e2>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b01      	cmp	r3, #1
 8006546:	d007      	beq.n	8006558 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0201 	orr.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006566:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2221      	movs	r2, #33	@ 0x21
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2240      	movs	r2, #64	@ 0x40
 8006574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a3a      	ldr	r2, [r7, #32]
 8006582:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006588:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4a4d      	ldr	r2, [pc, #308]	@ (80066cc <HAL_I2C_Mem_Write+0x1f0>)
 8006598:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800659a:	88f8      	ldrh	r0, [r7, #6]
 800659c:	893a      	ldrh	r2, [r7, #8]
 800659e:	8979      	ldrh	r1, [r7, #10]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	9301      	str	r3, [sp, #4]
 80065a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	4603      	mov	r3, r0
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 fac2 	bl	8006b34 <I2C_RequestMemoryWrite>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d052      	beq.n	800665c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e081      	b.n	80066be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 fd50 	bl	8007064 <I2C_WaitOnTXEFlagUntilTimeout>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00d      	beq.n	80065e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d107      	bne.n	80065e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e06b      	b.n	80066be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ea:	781a      	ldrb	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b04      	cmp	r3, #4
 8006622:	d11b      	bne.n	800665c <HAL_I2C_Mem_Write+0x180>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006628:	2b00      	cmp	r3, #0
 800662a:	d017      	beq.n	800665c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006630:	781a      	ldrb	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1aa      	bne.n	80065ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 fd43 	bl	80070f4 <I2C_WaitOnBTFFlagUntilTimeout>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00d      	beq.n	8006690 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006678:	2b04      	cmp	r3, #4
 800667a:	d107      	bne.n	800668c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800668a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e016      	b.n	80066be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800669e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	e000      	b.n	80066be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80066bc:	2302      	movs	r3, #2
  }
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	00100002 	.word	0x00100002
 80066cc:	ffff0000 	.word	0xffff0000

080066d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b08c      	sub	sp, #48	@ 0x30
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	4608      	mov	r0, r1
 80066da:	4611      	mov	r1, r2
 80066dc:	461a      	mov	r2, r3
 80066de:	4603      	mov	r3, r0
 80066e0:	817b      	strh	r3, [r7, #10]
 80066e2:	460b      	mov	r3, r1
 80066e4:	813b      	strh	r3, [r7, #8]
 80066e6:	4613      	mov	r3, r2
 80066e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066ea:	f7fe fab5 	bl	8004c58 <HAL_GetTick>
 80066ee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	f040 8214 	bne.w	8006b26 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	2319      	movs	r3, #25
 8006704:	2201      	movs	r2, #1
 8006706:	497b      	ldr	r1, [pc, #492]	@ (80068f4 <HAL_I2C_Mem_Read+0x224>)
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 fb91 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006714:	2302      	movs	r3, #2
 8006716:	e207      	b.n	8006b28 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800671e:	2b01      	cmp	r3, #1
 8006720:	d101      	bne.n	8006726 <HAL_I2C_Mem_Read+0x56>
 8006722:	2302      	movs	r3, #2
 8006724:	e200      	b.n	8006b28 <HAL_I2C_Mem_Read+0x458>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b01      	cmp	r3, #1
 800673a:	d007      	beq.n	800674c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0201 	orr.w	r2, r2, #1
 800674a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800675a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2222      	movs	r2, #34	@ 0x22
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2240      	movs	r2, #64	@ 0x40
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006776:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800677c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006782:	b29a      	uxth	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4a5b      	ldr	r2, [pc, #364]	@ (80068f8 <HAL_I2C_Mem_Read+0x228>)
 800678c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800678e:	88f8      	ldrh	r0, [r7, #6]
 8006790:	893a      	ldrh	r2, [r7, #8]
 8006792:	8979      	ldrh	r1, [r7, #10]
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	4603      	mov	r3, r0
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 fa5e 	bl	8006c60 <I2C_RequestMemoryRead>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e1bc      	b.n	8006b28 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d113      	bne.n	80067de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067b6:	2300      	movs	r3, #0
 80067b8:	623b      	str	r3, [r7, #32]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	623b      	str	r3, [r7, #32]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	623b      	str	r3, [r7, #32]
 80067ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	e190      	b.n	8006b00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d11b      	bne.n	800681e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067f6:	2300      	movs	r3, #0
 80067f8:	61fb      	str	r3, [r7, #28]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	61fb      	str	r3, [r7, #28]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	61fb      	str	r3, [r7, #28]
 800680a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800681a:	601a      	str	r2, [r3, #0]
 800681c:	e170      	b.n	8006b00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006822:	2b02      	cmp	r3, #2
 8006824:	d11b      	bne.n	800685e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006834:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006844:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006846:	2300      	movs	r3, #0
 8006848:	61bb      	str	r3, [r7, #24]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	61bb      	str	r3, [r7, #24]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	61bb      	str	r3, [r7, #24]
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	e150      	b.n	8006b00 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800685e:	2300      	movs	r3, #0
 8006860:	617b      	str	r3, [r7, #20]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	617b      	str	r3, [r7, #20]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006874:	e144      	b.n	8006b00 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800687a:	2b03      	cmp	r3, #3
 800687c:	f200 80f1 	bhi.w	8006a62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006884:	2b01      	cmp	r3, #1
 8006886:	d123      	bne.n	80068d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800688a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 fc79 	bl	8007184 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e145      	b.n	8006b28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691a      	ldr	r2, [r3, #16]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068ce:	e117      	b.n	8006b00 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d14e      	bne.n	8006976 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068de:	2200      	movs	r2, #0
 80068e0:	4906      	ldr	r1, [pc, #24]	@ (80068fc <HAL_I2C_Mem_Read+0x22c>)
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 faa4 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d008      	beq.n	8006900 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e11a      	b.n	8006b28 <HAL_I2C_Mem_Read+0x458>
 80068f2:	bf00      	nop
 80068f4:	00100002 	.word	0x00100002
 80068f8:	ffff0000 	.word	0xffff0000
 80068fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800690e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691a      	ldr	r2, [r3, #16]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800695e:	3b01      	subs	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800696a:	b29b      	uxth	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006974:	e0c4      	b.n	8006b00 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697c:	2200      	movs	r2, #0
 800697e:	496c      	ldr	r1, [pc, #432]	@ (8006b30 <HAL_I2C_Mem_Read+0x460>)
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 fa55 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e0cb      	b.n	8006b28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800699e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691a      	ldr	r2, [r3, #16]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d8:	2200      	movs	r2, #0
 80069da:	4955      	ldr	r1, [pc, #340]	@ (8006b30 <HAL_I2C_Mem_Read+0x460>)
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 fa27 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d001      	beq.n	80069ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e09d      	b.n	8006b28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691a      	ldr	r2, [r3, #16]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	3b01      	subs	r3, #1
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a38:	b2d2      	uxtb	r2, r2
 8006a3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006a60:	e04e      	b.n	8006b00 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 fb8c 	bl	8007184 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e058      	b.n	8006b28 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a92:	3b01      	subs	r3, #1
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	f003 0304 	and.w	r3, r3, #4
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d124      	bne.n	8006b00 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d107      	bne.n	8006ace <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006acc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	691a      	ldr	r2, [r3, #16]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad8:	b2d2      	uxtb	r2, r2
 8006ada:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aea:	3b01      	subs	r3, #1
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3b01      	subs	r3, #1
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f47f aeb6 	bne.w	8006876 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e000      	b.n	8006b28 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006b26:	2302      	movs	r3, #2
  }
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3728      	adds	r7, #40	@ 0x28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	00010004 	.word	0x00010004

08006b34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af02      	add	r7, sp, #8
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	4611      	mov	r1, r2
 8006b40:	461a      	mov	r2, r3
 8006b42:	4603      	mov	r3, r0
 8006b44:	817b      	strh	r3, [r7, #10]
 8006b46:	460b      	mov	r3, r1
 8006b48:	813b      	strh	r3, [r7, #8]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 f960 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00d      	beq.n	8006b92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b84:	d103      	bne.n	8006b8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e05f      	b.n	8006c52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b92:	897b      	ldrh	r3, [r7, #10]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ba0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba4:	6a3a      	ldr	r2, [r7, #32]
 8006ba6:	492d      	ldr	r1, [pc, #180]	@ (8006c5c <I2C_RequestMemoryWrite+0x128>)
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 f9bb 	bl	8006f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e04c      	b.n	8006c52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bd0:	6a39      	ldr	r1, [r7, #32]
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 fa46 	bl	8007064 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00d      	beq.n	8006bfa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d107      	bne.n	8006bf6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e02b      	b.n	8006c52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bfa:	88fb      	ldrh	r3, [r7, #6]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d105      	bne.n	8006c0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c00:	893b      	ldrh	r3, [r7, #8]
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	611a      	str	r2, [r3, #16]
 8006c0a:	e021      	b.n	8006c50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c0c:	893b      	ldrh	r3, [r7, #8]
 8006c0e:	0a1b      	lsrs	r3, r3, #8
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c1c:	6a39      	ldr	r1, [r7, #32]
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 fa20 	bl	8007064 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00d      	beq.n	8006c46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d107      	bne.n	8006c42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e005      	b.n	8006c52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c46:	893b      	ldrh	r3, [r7, #8]
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	00010002 	.word	0x00010002

08006c60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	4608      	mov	r0, r1
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4603      	mov	r3, r0
 8006c70:	817b      	strh	r3, [r7, #10]
 8006c72:	460b      	mov	r3, r1
 8006c74:	813b      	strh	r3, [r7, #8]
 8006c76:	4613      	mov	r3, r2
 8006c78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006c88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 f8c2 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00d      	beq.n	8006cce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc0:	d103      	bne.n	8006cca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cc8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e0aa      	b.n	8006e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cce:	897b      	ldrh	r3, [r7, #10]
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006cdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	6a3a      	ldr	r2, [r7, #32]
 8006ce2:	4952      	ldr	r1, [pc, #328]	@ (8006e2c <I2C_RequestMemoryRead+0x1cc>)
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f91d 	bl	8006f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e097      	b.n	8006e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	617b      	str	r3, [r7, #20]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d0c:	6a39      	ldr	r1, [r7, #32]
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 f9a8 	bl	8007064 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00d      	beq.n	8006d36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d107      	bne.n	8006d32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e076      	b.n	8006e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d36:	88fb      	ldrh	r3, [r7, #6]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d105      	bne.n	8006d48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d3c:	893b      	ldrh	r3, [r7, #8]
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	611a      	str	r2, [r3, #16]
 8006d46:	e021      	b.n	8006d8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d48:	893b      	ldrh	r3, [r7, #8]
 8006d4a:	0a1b      	lsrs	r3, r3, #8
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d58:	6a39      	ldr	r1, [r7, #32]
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f982 	bl	8007064 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00d      	beq.n	8006d82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d107      	bne.n	8006d7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e050      	b.n	8006e24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d82:	893b      	ldrh	r3, [r7, #8]
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d8e:	6a39      	ldr	r1, [r7, #32]
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 f967 	bl	8007064 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00d      	beq.n	8006db8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d107      	bne.n	8006db4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006db2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e035      	b.n	8006e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006dc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f82b 	bl	8006e30 <I2C_WaitOnFlagUntilTimeout>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00d      	beq.n	8006dfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dee:	d103      	bne.n	8006df8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006df6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e013      	b.n	8006e24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006dfc:	897b      	ldrh	r3, [r7, #10]
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	f043 0301 	orr.w	r3, r3, #1
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0e:	6a3a      	ldr	r2, [r7, #32]
 8006e10:	4906      	ldr	r1, [pc, #24]	@ (8006e2c <I2C_RequestMemoryRead+0x1cc>)
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 f886 	bl	8006f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e000      	b.n	8006e24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	00010002 	.word	0x00010002

08006e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	603b      	str	r3, [r7, #0]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e40:	e048      	b.n	8006ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d044      	beq.n	8006ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e4a:	f7fd ff05 	bl	8004c58 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d302      	bcc.n	8006e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d139      	bne.n	8006ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	0c1b      	lsrs	r3, r3, #16
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d10d      	bne.n	8006e86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	43da      	mvns	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	4013      	ands	r3, r2
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bf0c      	ite	eq
 8006e7c:	2301      	moveq	r3, #1
 8006e7e:	2300      	movne	r3, #0
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	461a      	mov	r2, r3
 8006e84:	e00c      	b.n	8006ea0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	43da      	mvns	r2, r3
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	4013      	ands	r3, r2
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bf0c      	ite	eq
 8006e98:	2301      	moveq	r3, #1
 8006e9a:	2300      	movne	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	79fb      	ldrb	r3, [r7, #7]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d116      	bne.n	8006ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec0:	f043 0220 	orr.w	r2, r3, #32
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e023      	b.n	8006f1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	0c1b      	lsrs	r3, r3, #16
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d10d      	bne.n	8006efa <I2C_WaitOnFlagUntilTimeout+0xca>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	43da      	mvns	r2, r3
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bf0c      	ite	eq
 8006ef0:	2301      	moveq	r3, #1
 8006ef2:	2300      	movne	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	e00c      	b.n	8006f14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	43da      	mvns	r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	4013      	ands	r3, r2
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2301      	moveq	r3, #1
 8006f0e:	2300      	movne	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	461a      	mov	r2, r3
 8006f14:	79fb      	ldrb	r3, [r7, #7]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d093      	beq.n	8006e42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f32:	e071      	b.n	8007018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f42:	d123      	bne.n	8006f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f78:	f043 0204 	orr.w	r2, r3, #4
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e067      	b.n	800705c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f92:	d041      	beq.n	8007018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f94:	f7fd fe60 	bl	8004c58 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d302      	bcc.n	8006faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d136      	bne.n	8007018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	0c1b      	lsrs	r3, r3, #16
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d10c      	bne.n	8006fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	43da      	mvns	r2, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bf14      	ite	ne
 8006fc6:	2301      	movne	r3, #1
 8006fc8:	2300      	moveq	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	e00b      	b.n	8006fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	43da      	mvns	r2, r3
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	4013      	ands	r3, r2
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bf14      	ite	ne
 8006fe0:	2301      	movne	r3, #1
 8006fe2:	2300      	moveq	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d016      	beq.n	8007018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007004:	f043 0220 	orr.w	r2, r3, #32
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e021      	b.n	800705c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	0c1b      	lsrs	r3, r3, #16
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b01      	cmp	r3, #1
 8007020:	d10c      	bne.n	800703c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	43da      	mvns	r2, r3
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	4013      	ands	r3, r2
 800702e:	b29b      	uxth	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	bf14      	ite	ne
 8007034:	2301      	movne	r3, #1
 8007036:	2300      	moveq	r3, #0
 8007038:	b2db      	uxtb	r3, r3
 800703a:	e00b      	b.n	8007054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	43da      	mvns	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4013      	ands	r3, r2
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	bf14      	ite	ne
 800704e:	2301      	movne	r3, #1
 8007050:	2300      	moveq	r3, #0
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	f47f af6d 	bne.w	8006f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007070:	e034      	b.n	80070dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 f8e3 	bl	800723e <I2C_IsAcknowledgeFailed>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e034      	b.n	80070ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007088:	d028      	beq.n	80070dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800708a:	f7fd fde5 	bl	8004c58 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	429a      	cmp	r2, r3
 8007098:	d302      	bcc.n	80070a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d11d      	bne.n	80070dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070aa:	2b80      	cmp	r3, #128	@ 0x80
 80070ac:	d016      	beq.n	80070dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2220      	movs	r2, #32
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c8:	f043 0220 	orr.w	r2, r3, #32
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e007      	b.n	80070ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e6:	2b80      	cmp	r3, #128	@ 0x80
 80070e8:	d1c3      	bne.n	8007072 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007100:	e034      	b.n	800716c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f000 f89b 	bl	800723e <I2C_IsAcknowledgeFailed>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e034      	b.n	800717c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007118:	d028      	beq.n	800716c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800711a:	f7fd fd9d 	bl	8004c58 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	429a      	cmp	r2, r3
 8007128:	d302      	bcc.n	8007130 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d11d      	bne.n	800716c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	f003 0304 	and.w	r3, r3, #4
 800713a:	2b04      	cmp	r3, #4
 800713c:	d016      	beq.n	800716c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2220      	movs	r2, #32
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007158:	f043 0220 	orr.w	r2, r3, #32
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e007      	b.n	800717c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	f003 0304 	and.w	r3, r3, #4
 8007176:	2b04      	cmp	r3, #4
 8007178:	d1c3      	bne.n	8007102 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007190:	e049      	b.n	8007226 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	f003 0310 	and.w	r3, r3, #16
 800719c:	2b10      	cmp	r3, #16
 800719e:	d119      	bne.n	80071d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f06f 0210 	mvn.w	r2, #16
 80071a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e030      	b.n	8007236 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071d4:	f7fd fd40 	bl	8004c58 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d302      	bcc.n	80071ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d11d      	bne.n	8007226 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f4:	2b40      	cmp	r3, #64	@ 0x40
 80071f6:	d016      	beq.n	8007226 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007212:	f043 0220 	orr.w	r2, r3, #32
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e007      	b.n	8007236 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007230:	2b40      	cmp	r3, #64	@ 0x40
 8007232:	d1ae      	bne.n	8007192 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007254:	d11b      	bne.n	800728e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800725e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800727a:	f043 0204 	orr.w	r2, r3, #4
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e267      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d075      	beq.n	80073a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80072ba:	4b88      	ldr	r3, [pc, #544]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f003 030c 	and.w	r3, r3, #12
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	d00c      	beq.n	80072e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072c6:	4b85      	ldr	r3, [pc, #532]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80072ce:	2b08      	cmp	r3, #8
 80072d0:	d112      	bne.n	80072f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072d2:	4b82      	ldr	r3, [pc, #520]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072de:	d10b      	bne.n	80072f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072e0:	4b7e      	ldr	r3, [pc, #504]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d05b      	beq.n	80073a4 <HAL_RCC_OscConfig+0x108>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d157      	bne.n	80073a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e242      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007300:	d106      	bne.n	8007310 <HAL_RCC_OscConfig+0x74>
 8007302:	4b76      	ldr	r3, [pc, #472]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a75      	ldr	r2, [pc, #468]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 8007308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	e01d      	b.n	800734c <HAL_RCC_OscConfig+0xb0>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007318:	d10c      	bne.n	8007334 <HAL_RCC_OscConfig+0x98>
 800731a:	4b70      	ldr	r3, [pc, #448]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a6f      	ldr	r2, [pc, #444]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 8007320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007324:	6013      	str	r3, [r2, #0]
 8007326:	4b6d      	ldr	r3, [pc, #436]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a6c      	ldr	r2, [pc, #432]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 800732c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	e00b      	b.n	800734c <HAL_RCC_OscConfig+0xb0>
 8007334:	4b69      	ldr	r3, [pc, #420]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a68      	ldr	r2, [pc, #416]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 800733a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	4b66      	ldr	r3, [pc, #408]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a65      	ldr	r2, [pc, #404]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 8007346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800734a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d013      	beq.n	800737c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007354:	f7fd fc80 	bl	8004c58 <HAL_GetTick>
 8007358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800735a:	e008      	b.n	800736e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800735c:	f7fd fc7c 	bl	8004c58 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b64      	cmp	r3, #100	@ 0x64
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e207      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800736e:	4b5b      	ldr	r3, [pc, #364]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0f0      	beq.n	800735c <HAL_RCC_OscConfig+0xc0>
 800737a:	e014      	b.n	80073a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800737c:	f7fd fc6c 	bl	8004c58 <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007382:	e008      	b.n	8007396 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007384:	f7fd fc68 	bl	8004c58 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b64      	cmp	r3, #100	@ 0x64
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e1f3      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007396:	4b51      	ldr	r3, [pc, #324]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1f0      	bne.n	8007384 <HAL_RCC_OscConfig+0xe8>
 80073a2:	e000      	b.n	80073a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d063      	beq.n	800747a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80073b2:	4b4a      	ldr	r3, [pc, #296]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f003 030c 	and.w	r3, r3, #12
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00b      	beq.n	80073d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073be:	4b47      	ldr	r3, [pc, #284]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80073c6:	2b08      	cmp	r3, #8
 80073c8:	d11c      	bne.n	8007404 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073ca:	4b44      	ldr	r3, [pc, #272]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d116      	bne.n	8007404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073d6:	4b41      	ldr	r3, [pc, #260]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d005      	beq.n	80073ee <HAL_RCC_OscConfig+0x152>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d001      	beq.n	80073ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e1c7      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073ee:	4b3b      	ldr	r3, [pc, #236]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	00db      	lsls	r3, r3, #3
 80073fc:	4937      	ldr	r1, [pc, #220]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007402:	e03a      	b.n	800747a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d020      	beq.n	800744e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800740c:	4b34      	ldr	r3, [pc, #208]	@ (80074e0 <HAL_RCC_OscConfig+0x244>)
 800740e:	2201      	movs	r2, #1
 8007410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007412:	f7fd fc21 	bl	8004c58 <HAL_GetTick>
 8007416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007418:	e008      	b.n	800742c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800741a:	f7fd fc1d 	bl	8004c58 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e1a8      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800742c:	4b2b      	ldr	r3, [pc, #172]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0f0      	beq.n	800741a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007438:	4b28      	ldr	r3, [pc, #160]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	00db      	lsls	r3, r3, #3
 8007446:	4925      	ldr	r1, [pc, #148]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 8007448:	4313      	orrs	r3, r2
 800744a:	600b      	str	r3, [r1, #0]
 800744c:	e015      	b.n	800747a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800744e:	4b24      	ldr	r3, [pc, #144]	@ (80074e0 <HAL_RCC_OscConfig+0x244>)
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007454:	f7fd fc00 	bl	8004c58 <HAL_GetTick>
 8007458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800745a:	e008      	b.n	800746e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800745c:	f7fd fbfc 	bl	8004c58 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	2b02      	cmp	r3, #2
 8007468:	d901      	bls.n	800746e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e187      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800746e:	4b1b      	ldr	r3, [pc, #108]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1f0      	bne.n	800745c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0308 	and.w	r3, r3, #8
 8007482:	2b00      	cmp	r3, #0
 8007484:	d036      	beq.n	80074f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d016      	beq.n	80074bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800748e:	4b15      	ldr	r3, [pc, #84]	@ (80074e4 <HAL_RCC_OscConfig+0x248>)
 8007490:	2201      	movs	r2, #1
 8007492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007494:	f7fd fbe0 	bl	8004c58 <HAL_GetTick>
 8007498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800749a:	e008      	b.n	80074ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800749c:	f7fd fbdc 	bl	8004c58 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e167      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074ae:	4b0b      	ldr	r3, [pc, #44]	@ (80074dc <HAL_RCC_OscConfig+0x240>)
 80074b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074b2:	f003 0302 	and.w	r3, r3, #2
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0f0      	beq.n	800749c <HAL_RCC_OscConfig+0x200>
 80074ba:	e01b      	b.n	80074f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074bc:	4b09      	ldr	r3, [pc, #36]	@ (80074e4 <HAL_RCC_OscConfig+0x248>)
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074c2:	f7fd fbc9 	bl	8004c58 <HAL_GetTick>
 80074c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074c8:	e00e      	b.n	80074e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ca:	f7fd fbc5 	bl	8004c58 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d907      	bls.n	80074e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e150      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
 80074dc:	40023800 	.word	0x40023800
 80074e0:	42470000 	.word	0x42470000
 80074e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074e8:	4b88      	ldr	r3, [pc, #544]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 80074ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1ea      	bne.n	80074ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 8097 	beq.w	8007630 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007502:	2300      	movs	r3, #0
 8007504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007506:	4b81      	ldr	r3, [pc, #516]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 8007508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10f      	bne.n	8007532 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007512:	2300      	movs	r3, #0
 8007514:	60bb      	str	r3, [r7, #8]
 8007516:	4b7d      	ldr	r3, [pc, #500]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 8007518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751a:	4a7c      	ldr	r2, [pc, #496]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 800751c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007520:	6413      	str	r3, [r2, #64]	@ 0x40
 8007522:	4b7a      	ldr	r3, [pc, #488]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 8007524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800752a:	60bb      	str	r3, [r7, #8]
 800752c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800752e:	2301      	movs	r3, #1
 8007530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007532:	4b77      	ldr	r3, [pc, #476]	@ (8007710 <HAL_RCC_OscConfig+0x474>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800753a:	2b00      	cmp	r3, #0
 800753c:	d118      	bne.n	8007570 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800753e:	4b74      	ldr	r3, [pc, #464]	@ (8007710 <HAL_RCC_OscConfig+0x474>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a73      	ldr	r2, [pc, #460]	@ (8007710 <HAL_RCC_OscConfig+0x474>)
 8007544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800754a:	f7fd fb85 	bl	8004c58 <HAL_GetTick>
 800754e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007550:	e008      	b.n	8007564 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007552:	f7fd fb81 	bl	8004c58 <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d901      	bls.n	8007564 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e10c      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007564:	4b6a      	ldr	r3, [pc, #424]	@ (8007710 <HAL_RCC_OscConfig+0x474>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0f0      	beq.n	8007552 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d106      	bne.n	8007586 <HAL_RCC_OscConfig+0x2ea>
 8007578:	4b64      	ldr	r3, [pc, #400]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 800757a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800757c:	4a63      	ldr	r2, [pc, #396]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 800757e:	f043 0301 	orr.w	r3, r3, #1
 8007582:	6713      	str	r3, [r2, #112]	@ 0x70
 8007584:	e01c      	b.n	80075c0 <HAL_RCC_OscConfig+0x324>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	2b05      	cmp	r3, #5
 800758c:	d10c      	bne.n	80075a8 <HAL_RCC_OscConfig+0x30c>
 800758e:	4b5f      	ldr	r3, [pc, #380]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 8007590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007592:	4a5e      	ldr	r2, [pc, #376]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 8007594:	f043 0304 	orr.w	r3, r3, #4
 8007598:	6713      	str	r3, [r2, #112]	@ 0x70
 800759a:	4b5c      	ldr	r3, [pc, #368]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 800759c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800759e:	4a5b      	ldr	r2, [pc, #364]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 80075a0:	f043 0301 	orr.w	r3, r3, #1
 80075a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80075a6:	e00b      	b.n	80075c0 <HAL_RCC_OscConfig+0x324>
 80075a8:	4b58      	ldr	r3, [pc, #352]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 80075aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ac:	4a57      	ldr	r2, [pc, #348]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 80075ae:	f023 0301 	bic.w	r3, r3, #1
 80075b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80075b4:	4b55      	ldr	r3, [pc, #340]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 80075b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075b8:	4a54      	ldr	r2, [pc, #336]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 80075ba:	f023 0304 	bic.w	r3, r3, #4
 80075be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d015      	beq.n	80075f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075c8:	f7fd fb46 	bl	8004c58 <HAL_GetTick>
 80075cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075ce:	e00a      	b.n	80075e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075d0:	f7fd fb42 	bl	8004c58 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075de:	4293      	cmp	r3, r2
 80075e0:	d901      	bls.n	80075e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e0cb      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075e6:	4b49      	ldr	r3, [pc, #292]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 80075e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ea:	f003 0302 	and.w	r3, r3, #2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0ee      	beq.n	80075d0 <HAL_RCC_OscConfig+0x334>
 80075f2:	e014      	b.n	800761e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075f4:	f7fd fb30 	bl	8004c58 <HAL_GetTick>
 80075f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075fa:	e00a      	b.n	8007612 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075fc:	f7fd fb2c 	bl	8004c58 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800760a:	4293      	cmp	r3, r2
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e0b5      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007612:	4b3e      	ldr	r3, [pc, #248]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 8007614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007616:	f003 0302 	and.w	r3, r3, #2
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1ee      	bne.n	80075fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d105      	bne.n	8007630 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007624:	4b39      	ldr	r3, [pc, #228]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 8007626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007628:	4a38      	ldr	r2, [pc, #224]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 800762a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800762e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 80a1 	beq.w	800777c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800763a:	4b34      	ldr	r3, [pc, #208]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f003 030c 	and.w	r3, r3, #12
 8007642:	2b08      	cmp	r3, #8
 8007644:	d05c      	beq.n	8007700 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	2b02      	cmp	r3, #2
 800764c:	d141      	bne.n	80076d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800764e:	4b31      	ldr	r3, [pc, #196]	@ (8007714 <HAL_RCC_OscConfig+0x478>)
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007654:	f7fd fb00 	bl	8004c58 <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800765c:	f7fd fafc 	bl	8004c58 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e087      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800766e:	4b27      	ldr	r3, [pc, #156]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1f0      	bne.n	800765c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	69da      	ldr	r2, [r3, #28]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007688:	019b      	lsls	r3, r3, #6
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007690:	085b      	lsrs	r3, r3, #1
 8007692:	3b01      	subs	r3, #1
 8007694:	041b      	lsls	r3, r3, #16
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769c:	061b      	lsls	r3, r3, #24
 800769e:	491b      	ldr	r1, [pc, #108]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076a4:	4b1b      	ldr	r3, [pc, #108]	@ (8007714 <HAL_RCC_OscConfig+0x478>)
 80076a6:	2201      	movs	r2, #1
 80076a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076aa:	f7fd fad5 	bl	8004c58 <HAL_GetTick>
 80076ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076b0:	e008      	b.n	80076c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076b2:	f7fd fad1 	bl	8004c58 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d901      	bls.n	80076c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e05c      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076c4:	4b11      	ldr	r3, [pc, #68]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0f0      	beq.n	80076b2 <HAL_RCC_OscConfig+0x416>
 80076d0:	e054      	b.n	800777c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076d2:	4b10      	ldr	r3, [pc, #64]	@ (8007714 <HAL_RCC_OscConfig+0x478>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076d8:	f7fd fabe 	bl	8004c58 <HAL_GetTick>
 80076dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076de:	e008      	b.n	80076f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076e0:	f7fd faba 	bl	8004c58 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d901      	bls.n	80076f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e045      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076f2:	4b06      	ldr	r3, [pc, #24]	@ (800770c <HAL_RCC_OscConfig+0x470>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1f0      	bne.n	80076e0 <HAL_RCC_OscConfig+0x444>
 80076fe:	e03d      	b.n	800777c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d107      	bne.n	8007718 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e038      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
 800770c:	40023800 	.word	0x40023800
 8007710:	40007000 	.word	0x40007000
 8007714:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007718:	4b1b      	ldr	r3, [pc, #108]	@ (8007788 <HAL_RCC_OscConfig+0x4ec>)
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d028      	beq.n	8007778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007730:	429a      	cmp	r2, r3
 8007732:	d121      	bne.n	8007778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800773e:	429a      	cmp	r2, r3
 8007740:	d11a      	bne.n	8007778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007748:	4013      	ands	r3, r2
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800774e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007750:	4293      	cmp	r3, r2
 8007752:	d111      	bne.n	8007778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775e:	085b      	lsrs	r3, r3, #1
 8007760:	3b01      	subs	r3, #1
 8007762:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007764:	429a      	cmp	r2, r3
 8007766:	d107      	bne.n	8007778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007772:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007774:	429a      	cmp	r2, r3
 8007776:	d001      	beq.n	800777c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e000      	b.n	800777e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	40023800 	.word	0x40023800

0800778c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e0cc      	b.n	800793a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077a0:	4b68      	ldr	r3, [pc, #416]	@ (8007944 <HAL_RCC_ClockConfig+0x1b8>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0307 	and.w	r3, r3, #7
 80077a8:	683a      	ldr	r2, [r7, #0]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d90c      	bls.n	80077c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ae:	4b65      	ldr	r3, [pc, #404]	@ (8007944 <HAL_RCC_ClockConfig+0x1b8>)
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	b2d2      	uxtb	r2, r2
 80077b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077b6:	4b63      	ldr	r3, [pc, #396]	@ (8007944 <HAL_RCC_ClockConfig+0x1b8>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0307 	and.w	r3, r3, #7
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d001      	beq.n	80077c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e0b8      	b.n	800793a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d020      	beq.n	8007816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077e0:	4b59      	ldr	r3, [pc, #356]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	4a58      	ldr	r2, [pc, #352]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 80077e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80077ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d005      	beq.n	8007804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077f8:	4b53      	ldr	r3, [pc, #332]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	4a52      	ldr	r2, [pc, #328]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 80077fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007804:	4b50      	ldr	r3, [pc, #320]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	494d      	ldr	r1, [pc, #308]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 8007812:	4313      	orrs	r3, r2
 8007814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d044      	beq.n	80078ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d107      	bne.n	800783a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800782a:	4b47      	ldr	r3, [pc, #284]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d119      	bne.n	800786a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e07f      	b.n	800793a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	2b02      	cmp	r3, #2
 8007840:	d003      	beq.n	800784a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007846:	2b03      	cmp	r3, #3
 8007848:	d107      	bne.n	800785a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800784a:	4b3f      	ldr	r3, [pc, #252]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d109      	bne.n	800786a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e06f      	b.n	800793a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800785a:	4b3b      	ldr	r3, [pc, #236]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e067      	b.n	800793a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800786a:	4b37      	ldr	r3, [pc, #220]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f023 0203 	bic.w	r2, r3, #3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	4934      	ldr	r1, [pc, #208]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 8007878:	4313      	orrs	r3, r2
 800787a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800787c:	f7fd f9ec 	bl	8004c58 <HAL_GetTick>
 8007880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007882:	e00a      	b.n	800789a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007884:	f7fd f9e8 	bl	8004c58 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007892:	4293      	cmp	r3, r2
 8007894:	d901      	bls.n	800789a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e04f      	b.n	800793a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800789a:	4b2b      	ldr	r3, [pc, #172]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f003 020c 	and.w	r2, r3, #12
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d1eb      	bne.n	8007884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078ac:	4b25      	ldr	r3, [pc, #148]	@ (8007944 <HAL_RCC_ClockConfig+0x1b8>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d20c      	bcs.n	80078d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ba:	4b22      	ldr	r3, [pc, #136]	@ (8007944 <HAL_RCC_ClockConfig+0x1b8>)
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078c2:	4b20      	ldr	r3, [pc, #128]	@ (8007944 <HAL_RCC_ClockConfig+0x1b8>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d001      	beq.n	80078d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e032      	b.n	800793a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d008      	beq.n	80078f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078e0:	4b19      	ldr	r3, [pc, #100]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	4916      	ldr	r1, [pc, #88]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0308 	and.w	r3, r3, #8
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d009      	beq.n	8007912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078fe:	4b12      	ldr	r3, [pc, #72]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	490e      	ldr	r1, [pc, #56]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 800790e:	4313      	orrs	r3, r2
 8007910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007912:	f000 f821 	bl	8007958 <HAL_RCC_GetSysClockFreq>
 8007916:	4602      	mov	r2, r0
 8007918:	4b0b      	ldr	r3, [pc, #44]	@ (8007948 <HAL_RCC_ClockConfig+0x1bc>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	091b      	lsrs	r3, r3, #4
 800791e:	f003 030f 	and.w	r3, r3, #15
 8007922:	490a      	ldr	r1, [pc, #40]	@ (800794c <HAL_RCC_ClockConfig+0x1c0>)
 8007924:	5ccb      	ldrb	r3, [r1, r3]
 8007926:	fa22 f303 	lsr.w	r3, r2, r3
 800792a:	4a09      	ldr	r2, [pc, #36]	@ (8007950 <HAL_RCC_ClockConfig+0x1c4>)
 800792c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800792e:	4b09      	ldr	r3, [pc, #36]	@ (8007954 <HAL_RCC_ClockConfig+0x1c8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4618      	mov	r0, r3
 8007934:	f7fa ff08 	bl	8002748 <HAL_InitTick>

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	40023c00 	.word	0x40023c00
 8007948:	40023800 	.word	0x40023800
 800794c:	0800f900 	.word	0x0800f900
 8007950:	20000004 	.word	0x20000004
 8007954:	2000009c 	.word	0x2000009c

08007958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800795c:	b090      	sub	sp, #64	@ 0x40
 800795e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007968:	2300      	movs	r3, #0
 800796a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800796c:	2300      	movs	r3, #0
 800796e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007970:	4b59      	ldr	r3, [pc, #356]	@ (8007ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f003 030c 	and.w	r3, r3, #12
 8007978:	2b08      	cmp	r3, #8
 800797a:	d00d      	beq.n	8007998 <HAL_RCC_GetSysClockFreq+0x40>
 800797c:	2b08      	cmp	r3, #8
 800797e:	f200 80a1 	bhi.w	8007ac4 <HAL_RCC_GetSysClockFreq+0x16c>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d002      	beq.n	800798c <HAL_RCC_GetSysClockFreq+0x34>
 8007986:	2b04      	cmp	r3, #4
 8007988:	d003      	beq.n	8007992 <HAL_RCC_GetSysClockFreq+0x3a>
 800798a:	e09b      	b.n	8007ac4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800798c:	4b53      	ldr	r3, [pc, #332]	@ (8007adc <HAL_RCC_GetSysClockFreq+0x184>)
 800798e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007990:	e09b      	b.n	8007aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007992:	4b53      	ldr	r3, [pc, #332]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007994:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007996:	e098      	b.n	8007aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007998:	4b4f      	ldr	r3, [pc, #316]	@ (8007ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079a2:	4b4d      	ldr	r3, [pc, #308]	@ (8007ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d028      	beq.n	8007a00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079ae:	4b4a      	ldr	r3, [pc, #296]	@ (8007ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	099b      	lsrs	r3, r3, #6
 80079b4:	2200      	movs	r2, #0
 80079b6:	623b      	str	r3, [r7, #32]
 80079b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80079c0:	2100      	movs	r1, #0
 80079c2:	4b47      	ldr	r3, [pc, #284]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80079c4:	fb03 f201 	mul.w	r2, r3, r1
 80079c8:	2300      	movs	r3, #0
 80079ca:	fb00 f303 	mul.w	r3, r0, r3
 80079ce:	4413      	add	r3, r2
 80079d0:	4a43      	ldr	r2, [pc, #268]	@ (8007ae0 <HAL_RCC_GetSysClockFreq+0x188>)
 80079d2:	fba0 1202 	umull	r1, r2, r0, r2
 80079d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079d8:	460a      	mov	r2, r1
 80079da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80079dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079de:	4413      	add	r3, r2
 80079e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e4:	2200      	movs	r2, #0
 80079e6:	61bb      	str	r3, [r7, #24]
 80079e8:	61fa      	str	r2, [r7, #28]
 80079ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80079f2:	f7f9 f949 	bl	8000c88 <__aeabi_uldivmod>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4613      	mov	r3, r2
 80079fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079fe:	e053      	b.n	8007aa8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a00:	4b35      	ldr	r3, [pc, #212]	@ (8007ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	099b      	lsrs	r3, r3, #6
 8007a06:	2200      	movs	r2, #0
 8007a08:	613b      	str	r3, [r7, #16]
 8007a0a:	617a      	str	r2, [r7, #20]
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007a12:	f04f 0b00 	mov.w	fp, #0
 8007a16:	4652      	mov	r2, sl
 8007a18:	465b      	mov	r3, fp
 8007a1a:	f04f 0000 	mov.w	r0, #0
 8007a1e:	f04f 0100 	mov.w	r1, #0
 8007a22:	0159      	lsls	r1, r3, #5
 8007a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a28:	0150      	lsls	r0, r2, #5
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	ebb2 080a 	subs.w	r8, r2, sl
 8007a32:	eb63 090b 	sbc.w	r9, r3, fp
 8007a36:	f04f 0200 	mov.w	r2, #0
 8007a3a:	f04f 0300 	mov.w	r3, #0
 8007a3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007a42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007a46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007a4a:	ebb2 0408 	subs.w	r4, r2, r8
 8007a4e:	eb63 0509 	sbc.w	r5, r3, r9
 8007a52:	f04f 0200 	mov.w	r2, #0
 8007a56:	f04f 0300 	mov.w	r3, #0
 8007a5a:	00eb      	lsls	r3, r5, #3
 8007a5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a60:	00e2      	lsls	r2, r4, #3
 8007a62:	4614      	mov	r4, r2
 8007a64:	461d      	mov	r5, r3
 8007a66:	eb14 030a 	adds.w	r3, r4, sl
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	eb45 030b 	adc.w	r3, r5, fp
 8007a70:	607b      	str	r3, [r7, #4]
 8007a72:	f04f 0200 	mov.w	r2, #0
 8007a76:	f04f 0300 	mov.w	r3, #0
 8007a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a7e:	4629      	mov	r1, r5
 8007a80:	028b      	lsls	r3, r1, #10
 8007a82:	4621      	mov	r1, r4
 8007a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a88:	4621      	mov	r1, r4
 8007a8a:	028a      	lsls	r2, r1, #10
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a92:	2200      	movs	r2, #0
 8007a94:	60bb      	str	r3, [r7, #8]
 8007a96:	60fa      	str	r2, [r7, #12]
 8007a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a9c:	f7f9 f8f4 	bl	8000c88 <__aeabi_uldivmod>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	0c1b      	lsrs	r3, r3, #16
 8007aae:	f003 0303 	and.w	r3, r3, #3
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007ab8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ac2:	e002      	b.n	8007aca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ac4:	4b05      	ldr	r3, [pc, #20]	@ (8007adc <HAL_RCC_GetSysClockFreq+0x184>)
 8007ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3740      	adds	r7, #64	@ 0x40
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ad6:	bf00      	nop
 8007ad8:	40023800 	.word	0x40023800
 8007adc:	00f42400 	.word	0x00f42400
 8007ae0:	017d7840 	.word	0x017d7840

08007ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ae8:	4b03      	ldr	r3, [pc, #12]	@ (8007af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007aea:	681b      	ldr	r3, [r3, #0]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	20000004 	.word	0x20000004

08007afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b00:	f7ff fff0 	bl	8007ae4 <HAL_RCC_GetHCLKFreq>
 8007b04:	4602      	mov	r2, r0
 8007b06:	4b05      	ldr	r3, [pc, #20]	@ (8007b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	0a9b      	lsrs	r3, r3, #10
 8007b0c:	f003 0307 	and.w	r3, r3, #7
 8007b10:	4903      	ldr	r1, [pc, #12]	@ (8007b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b12:	5ccb      	ldrb	r3, [r1, r3]
 8007b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	40023800 	.word	0x40023800
 8007b20:	0800f910 	.word	0x0800f910

08007b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007b28:	f7ff ffdc 	bl	8007ae4 <HAL_RCC_GetHCLKFreq>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	4b05      	ldr	r3, [pc, #20]	@ (8007b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	0b5b      	lsrs	r3, r3, #13
 8007b34:	f003 0307 	and.w	r3, r3, #7
 8007b38:	4903      	ldr	r1, [pc, #12]	@ (8007b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b3a:	5ccb      	ldrb	r3, [r1, r3]
 8007b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	40023800 	.word	0x40023800
 8007b48:	0800f910 	.word	0x0800f910

08007b4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	220f      	movs	r2, #15
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007b5c:	4b12      	ldr	r3, [pc, #72]	@ (8007ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f003 0203 	and.w	r2, r3, #3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007b68:	4b0f      	ldr	r3, [pc, #60]	@ (8007ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007b74:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007b80:	4b09      	ldr	r3, [pc, #36]	@ (8007ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	08db      	lsrs	r3, r3, #3
 8007b86:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b8e:	4b07      	ldr	r3, [pc, #28]	@ (8007bac <HAL_RCC_GetClockConfig+0x60>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0207 	and.w	r2, r3, #7
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	601a      	str	r2, [r3, #0]
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	40023800 	.word	0x40023800
 8007bac:	40023c00 	.word	0x40023c00

08007bb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e07b      	b.n	8007cba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d108      	bne.n	8007bdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bd2:	d009      	beq.n	8007be8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	61da      	str	r2, [r3, #28]
 8007bda:	e005      	b.n	8007be8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d106      	bne.n	8007c08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7fa fc12 	bl	800242c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007c30:	431a      	orrs	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	f003 0302 	and.w	r3, r3, #2
 8007c44:	431a      	orrs	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c62:	431a      	orrs	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c6c:	ea42 0103 	orr.w	r1, r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	0c1b      	lsrs	r3, r3, #16
 8007c86:	f003 0104 	and.w	r1, r3, #4
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8e:	f003 0210 	and.w	r2, r3, #16
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69da      	ldr	r2, [r3, #28]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ca8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b088      	sub	sp, #32
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	603b      	str	r3, [r7, #0]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cd2:	f7fc ffc1 	bl	8004c58 <HAL_GetTick>
 8007cd6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007cd8:	88fb      	ldrh	r3, [r7, #6]
 8007cda:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d001      	beq.n	8007cec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e12a      	b.n	8007f42 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <HAL_SPI_Transmit+0x36>
 8007cf2:	88fb      	ldrh	r3, [r7, #6]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e122      	b.n	8007f42 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d101      	bne.n	8007d0a <HAL_SPI_Transmit+0x48>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e11b      	b.n	8007f42 <HAL_SPI_Transmit+0x280>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2203      	movs	r2, #3
 8007d16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	88fa      	ldrh	r2, [r7, #6]
 8007d2a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	88fa      	ldrh	r2, [r7, #6]
 8007d30:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d58:	d10f      	bne.n	8007d7a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d84:	2b40      	cmp	r3, #64	@ 0x40
 8007d86:	d007      	beq.n	8007d98 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007da0:	d152      	bne.n	8007e48 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <HAL_SPI_Transmit+0xee>
 8007daa:	8b7b      	ldrh	r3, [r7, #26]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d145      	bne.n	8007e3c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007db4:	881a      	ldrh	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc0:	1c9a      	adds	r2, r3, #2
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007dd4:	e032      	b.n	8007e3c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f003 0302 	and.w	r3, r3, #2
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d112      	bne.n	8007e0a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de8:	881a      	ldrh	r2, [r3, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df4:	1c9a      	adds	r2, r3, #2
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	3b01      	subs	r3, #1
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007e08:	e018      	b.n	8007e3c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e0a:	f7fc ff25 	bl	8004c58 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d803      	bhi.n	8007e22 <HAL_SPI_Transmit+0x160>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e20:	d102      	bne.n	8007e28 <HAL_SPI_Transmit+0x166>
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d109      	bne.n	8007e3c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e082      	b.n	8007f42 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1c7      	bne.n	8007dd6 <HAL_SPI_Transmit+0x114>
 8007e46:	e053      	b.n	8007ef0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d002      	beq.n	8007e56 <HAL_SPI_Transmit+0x194>
 8007e50:	8b7b      	ldrh	r3, [r7, #26]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d147      	bne.n	8007ee6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	330c      	adds	r3, #12
 8007e60:	7812      	ldrb	r2, [r2, #0]
 8007e62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e68:	1c5a      	adds	r2, r3, #1
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	3b01      	subs	r3, #1
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007e7c:	e033      	b.n	8007ee6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f003 0302 	and.w	r3, r3, #2
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d113      	bne.n	8007eb4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	330c      	adds	r3, #12
 8007e96:	7812      	ldrb	r2, [r2, #0]
 8007e98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e9e:	1c5a      	adds	r2, r3, #1
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007eb2:	e018      	b.n	8007ee6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007eb4:	f7fc fed0 	bl	8004c58 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d803      	bhi.n	8007ecc <HAL_SPI_Transmit+0x20a>
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eca:	d102      	bne.n	8007ed2 <HAL_SPI_Transmit+0x210>
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d109      	bne.n	8007ee6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	e02d      	b.n	8007f42 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1c6      	bne.n	8007e7e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ef0:	69fa      	ldr	r2, [r7, #28]
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 fcf9 	bl	80088ec <SPI_EndRxTxTransaction>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2220      	movs	r2, #32
 8007f04:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10a      	bne.n	8007f24 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f0e:	2300      	movs	r3, #0
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	617b      	str	r3, [r7, #20]
 8007f22:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e000      	b.n	8007f42 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007f40:	2300      	movs	r3, #0
  }
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3720      	adds	r7, #32
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b088      	sub	sp, #32
 8007f4e:	af02      	add	r7, sp, #8
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	603b      	str	r3, [r7, #0]
 8007f56:	4613      	mov	r3, r2
 8007f58:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d001      	beq.n	8007f6a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007f66:	2302      	movs	r3, #2
 8007f68:	e104      	b.n	8008174 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f72:	d112      	bne.n	8007f9a <HAL_SPI_Receive+0x50>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10e      	bne.n	8007f9a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2204      	movs	r2, #4
 8007f80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007f84:	88fa      	ldrh	r2, [r7, #6]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f8f3 	bl	800817c <HAL_SPI_TransmitReceive>
 8007f96:	4603      	mov	r3, r0
 8007f98:	e0ec      	b.n	8008174 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f9a:	f7fc fe5d 	bl	8004c58 <HAL_GetTick>
 8007f9e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <HAL_SPI_Receive+0x62>
 8007fa6:	88fb      	ldrh	r3, [r7, #6]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e0e1      	b.n	8008174 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d101      	bne.n	8007fbe <HAL_SPI_Receive+0x74>
 8007fba:	2302      	movs	r3, #2
 8007fbc:	e0da      	b.n	8008174 <HAL_SPI_Receive+0x22a>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2204      	movs	r2, #4
 8007fca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	88fa      	ldrh	r2, [r7, #6]
 8007fde:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	88fa      	ldrh	r2, [r7, #6]
 8007fe4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800800c:	d10f      	bne.n	800802e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800801c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800802c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008038:	2b40      	cmp	r3, #64	@ 0x40
 800803a:	d007      	beq.n	800804c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800804a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d170      	bne.n	8008136 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008054:	e035      	b.n	80080c2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b01      	cmp	r3, #1
 8008062:	d115      	bne.n	8008090 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f103 020c 	add.w	r2, r3, #12
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008070:	7812      	ldrb	r2, [r2, #0]
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807a:	1c5a      	adds	r2, r3, #1
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008084:	b29b      	uxth	r3, r3
 8008086:	3b01      	subs	r3, #1
 8008088:	b29a      	uxth	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800808e:	e018      	b.n	80080c2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008090:	f7fc fde2 	bl	8004c58 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	429a      	cmp	r2, r3
 800809e:	d803      	bhi.n	80080a8 <HAL_SPI_Receive+0x15e>
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a6:	d102      	bne.n	80080ae <HAL_SPI_Receive+0x164>
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d109      	bne.n	80080c2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e058      	b.n	8008174 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1c4      	bne.n	8008056 <HAL_SPI_Receive+0x10c>
 80080cc:	e038      	b.n	8008140 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d113      	bne.n	8008104 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68da      	ldr	r2, [r3, #12]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e6:	b292      	uxth	r2, r2
 80080e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ee:	1c9a      	adds	r2, r3, #2
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	3b01      	subs	r3, #1
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008102:	e018      	b.n	8008136 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008104:	f7fc fda8 	bl	8004c58 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d803      	bhi.n	800811c <HAL_SPI_Receive+0x1d2>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811a:	d102      	bne.n	8008122 <HAL_SPI_Receive+0x1d8>
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d109      	bne.n	8008136 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e01e      	b.n	8008174 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800813a:	b29b      	uxth	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1c6      	bne.n	80080ce <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	6839      	ldr	r1, [r7, #0]
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f000 fb6b 	bl	8008820 <SPI_EndRxTransaction>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2220      	movs	r2, #32
 8008154:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8008172:	2300      	movs	r3, #0
  }
}
 8008174:	4618      	mov	r0, r3
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08a      	sub	sp, #40	@ 0x28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800818a:	2301      	movs	r3, #1
 800818c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800818e:	f7fc fd63 	bl	8004c58 <HAL_GetTick>
 8008192:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800819a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80081a2:	887b      	ldrh	r3, [r7, #2]
 80081a4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081a6:	7ffb      	ldrb	r3, [r7, #31]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d00c      	beq.n	80081c6 <HAL_SPI_TransmitReceive+0x4a>
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081b2:	d106      	bne.n	80081c2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d102      	bne.n	80081c2 <HAL_SPI_TransmitReceive+0x46>
 80081bc:	7ffb      	ldrb	r3, [r7, #31]
 80081be:	2b04      	cmp	r3, #4
 80081c0:	d001      	beq.n	80081c6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80081c2:	2302      	movs	r3, #2
 80081c4:	e17f      	b.n	80084c6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d005      	beq.n	80081d8 <HAL_SPI_TransmitReceive+0x5c>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <HAL_SPI_TransmitReceive+0x5c>
 80081d2:	887b      	ldrh	r3, [r7, #2]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e174      	b.n	80084c6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d101      	bne.n	80081ea <HAL_SPI_TransmitReceive+0x6e>
 80081e6:	2302      	movs	r3, #2
 80081e8:	e16d      	b.n	80084c6 <HAL_SPI_TransmitReceive+0x34a>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b04      	cmp	r3, #4
 80081fc:	d003      	beq.n	8008206 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2205      	movs	r2, #5
 8008202:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	887a      	ldrh	r2, [r7, #2]
 8008216:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	887a      	ldrh	r2, [r7, #2]
 800821c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	887a      	ldrh	r2, [r7, #2]
 8008228:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	887a      	ldrh	r2, [r7, #2]
 800822e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008246:	2b40      	cmp	r3, #64	@ 0x40
 8008248:	d007      	beq.n	800825a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008258:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008262:	d17e      	bne.n	8008362 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <HAL_SPI_TransmitReceive+0xf6>
 800826c:	8afb      	ldrh	r3, [r7, #22]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d16c      	bne.n	800834c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008276:	881a      	ldrh	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008282:	1c9a      	adds	r2, r3, #2
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800828c:	b29b      	uxth	r3, r3
 800828e:	3b01      	subs	r3, #1
 8008290:	b29a      	uxth	r2, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008296:	e059      	b.n	800834c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d11b      	bne.n	80082de <HAL_SPI_TransmitReceive+0x162>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d016      	beq.n	80082de <HAL_SPI_TransmitReceive+0x162>
 80082b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d113      	bne.n	80082de <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ba:	881a      	ldrh	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c6:	1c9a      	adds	r2, r3, #2
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	3b01      	subs	r3, #1
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d119      	bne.n	8008320 <HAL_SPI_TransmitReceive+0x1a4>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d014      	beq.n	8008320 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68da      	ldr	r2, [r3, #12]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008300:	b292      	uxth	r2, r2
 8008302:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008308:	1c9a      	adds	r2, r3, #2
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008312:	b29b      	uxth	r3, r3
 8008314:	3b01      	subs	r3, #1
 8008316:	b29a      	uxth	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800831c:	2301      	movs	r3, #1
 800831e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008320:	f7fc fc9a 	bl	8004c58 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800832c:	429a      	cmp	r2, r3
 800832e:	d80d      	bhi.n	800834c <HAL_SPI_TransmitReceive+0x1d0>
 8008330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008336:	d009      	beq.n	800834c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e0bc      	b.n	80084c6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008350:	b29b      	uxth	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1a0      	bne.n	8008298 <HAL_SPI_TransmitReceive+0x11c>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800835a:	b29b      	uxth	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	d19b      	bne.n	8008298 <HAL_SPI_TransmitReceive+0x11c>
 8008360:	e082      	b.n	8008468 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <HAL_SPI_TransmitReceive+0x1f4>
 800836a:	8afb      	ldrh	r3, [r7, #22]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d171      	bne.n	8008454 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	330c      	adds	r3, #12
 800837a:	7812      	ldrb	r2, [r2, #0]
 800837c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800838c:	b29b      	uxth	r3, r3
 800838e:	3b01      	subs	r3, #1
 8008390:	b29a      	uxth	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008396:	e05d      	b.n	8008454 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f003 0302 	and.w	r3, r3, #2
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d11c      	bne.n	80083e0 <HAL_SPI_TransmitReceive+0x264>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d017      	beq.n	80083e0 <HAL_SPI_TransmitReceive+0x264>
 80083b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d114      	bne.n	80083e0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	330c      	adds	r3, #12
 80083c0:	7812      	ldrb	r2, [r2, #0]
 80083c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c8:	1c5a      	adds	r2, r3, #1
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	3b01      	subs	r3, #1
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d119      	bne.n	8008422 <HAL_SPI_TransmitReceive+0x2a6>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d014      	beq.n	8008422 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68da      	ldr	r2, [r3, #12]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008414:	b29b      	uxth	r3, r3
 8008416:	3b01      	subs	r3, #1
 8008418:	b29a      	uxth	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800841e:	2301      	movs	r3, #1
 8008420:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008422:	f7fc fc19 	bl	8004c58 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800842e:	429a      	cmp	r2, r3
 8008430:	d803      	bhi.n	800843a <HAL_SPI_TransmitReceive+0x2be>
 8008432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008438:	d102      	bne.n	8008440 <HAL_SPI_TransmitReceive+0x2c4>
 800843a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843c:	2b00      	cmp	r3, #0
 800843e:	d109      	bne.n	8008454 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e038      	b.n	80084c6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008458:	b29b      	uxth	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d19c      	bne.n	8008398 <HAL_SPI_TransmitReceive+0x21c>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008462:	b29b      	uxth	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	d197      	bne.n	8008398 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008468:	6a3a      	ldr	r2, [r7, #32]
 800846a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 fa3d 	bl	80088ec <SPI_EndRxTxTransaction>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d008      	beq.n	800848a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2220      	movs	r2, #32
 800847c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e01d      	b.n	80084c6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10a      	bne.n	80084a8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008492:	2300      	movs	r3, #0
 8008494:	613b      	str	r3, [r7, #16]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	613b      	str	r3, [r7, #16]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	613b      	str	r3, [r7, #16]
 80084a6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e000      	b.n	80084c6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80084c4:	2300      	movs	r3, #0
  }
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3728      	adds	r7, #40	@ 0x28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
	...

080084d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b088      	sub	sp, #32
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10e      	bne.n	8008510 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d009      	beq.n	8008510 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008502:	2b00      	cmp	r3, #0
 8008504:	d004      	beq.n	8008510 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	4798      	blx	r3
    return;
 800850e:	e0ce      	b.n	80086ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	f003 0302 	and.w	r3, r3, #2
 8008516:	2b00      	cmp	r3, #0
 8008518:	d009      	beq.n	800852e <HAL_SPI_IRQHandler+0x5e>
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008520:	2b00      	cmp	r3, #0
 8008522:	d004      	beq.n	800852e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	4798      	blx	r3
    return;
 800852c:	e0bf      	b.n	80086ae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	f003 0320 	and.w	r3, r3, #32
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10a      	bne.n	800854e <HAL_SPI_IRQHandler+0x7e>
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800853e:	2b00      	cmp	r3, #0
 8008540:	d105      	bne.n	800854e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 80b0 	beq.w	80086ae <HAL_SPI_IRQHandler+0x1de>
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	f003 0320 	and.w	r3, r3, #32
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 80aa 	beq.w	80086ae <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008560:	2b00      	cmp	r3, #0
 8008562:	d023      	beq.n	80085ac <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b03      	cmp	r3, #3
 800856e:	d011      	beq.n	8008594 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008574:	f043 0204 	orr.w	r2, r3, #4
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	617b      	str	r3, [r7, #20]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	e00b      	b.n	80085ac <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008594:	2300      	movs	r3, #0
 8008596:	613b      	str	r3, [r7, #16]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	613b      	str	r3, [r7, #16]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	613b      	str	r3, [r7, #16]
 80085a8:	693b      	ldr	r3, [r7, #16]
        return;
 80085aa:	e080      	b.n	80086ae <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d014      	beq.n	80085e0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ba:	f043 0201 	orr.w	r2, r3, #1
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80085c2:	2300      	movs	r3, #0
 80085c4:	60fb      	str	r3, [r7, #12]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085dc:	601a      	str	r2, [r3, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00c      	beq.n	8008604 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ee:	f043 0208 	orr.w	r2, r3, #8
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80085f6:	2300      	movs	r3, #0
 80085f8:	60bb      	str	r3, [r7, #8]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	60bb      	str	r3, [r7, #8]
 8008602:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008608:	2b00      	cmp	r3, #0
 800860a:	d04f      	beq.n	80086ac <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685a      	ldr	r2, [r3, #4]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800861a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	f003 0302 	and.w	r3, r3, #2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d104      	bne.n	8008638 <HAL_SPI_IRQHandler+0x168>
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	2b00      	cmp	r3, #0
 8008636:	d034      	beq.n	80086a2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0203 	bic.w	r2, r2, #3
 8008646:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800864c:	2b00      	cmp	r3, #0
 800864e:	d011      	beq.n	8008674 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008654:	4a17      	ldr	r2, [pc, #92]	@ (80086b4 <HAL_SPI_IRQHandler+0x1e4>)
 8008656:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800865c:	4618      	mov	r0, r3
 800865e:	f7fc ff09 	bl	8005474 <HAL_DMA_Abort_IT>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d005      	beq.n	8008674 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800866c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008678:	2b00      	cmp	r3, #0
 800867a:	d016      	beq.n	80086aa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008680:	4a0c      	ldr	r2, [pc, #48]	@ (80086b4 <HAL_SPI_IRQHandler+0x1e4>)
 8008682:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008688:	4618      	mov	r0, r3
 800868a:	f7fc fef3 	bl	8005474 <HAL_DMA_Abort_IT>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00a      	beq.n	80086aa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008698:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80086a0:	e003      	b.n	80086aa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f808 	bl	80086b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80086a8:	e000      	b.n	80086ac <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80086aa:	bf00      	nop
    return;
 80086ac:	bf00      	nop
  }
}
 80086ae:	3720      	adds	r7, #32
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	080086e9 	.word	0x080086e9

080086b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80086da:	b2db      	uxtb	r3, r3
}
 80086dc:	4618      	mov	r0, r3
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f7ff ffd8 	bl	80086b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008708:	bf00      	nop
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	4613      	mov	r3, r2
 800871e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008720:	f7fc fa9a 	bl	8004c58 <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008728:	1a9b      	subs	r3, r3, r2
 800872a:	683a      	ldr	r2, [r7, #0]
 800872c:	4413      	add	r3, r2
 800872e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008730:	f7fc fa92 	bl	8004c58 <HAL_GetTick>
 8008734:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008736:	4b39      	ldr	r3, [pc, #228]	@ (800881c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	015b      	lsls	r3, r3, #5
 800873c:	0d1b      	lsrs	r3, r3, #20
 800873e:	69fa      	ldr	r2, [r7, #28]
 8008740:	fb02 f303 	mul.w	r3, r2, r3
 8008744:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008746:	e054      	b.n	80087f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874e:	d050      	beq.n	80087f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008750:	f7fc fa82 	bl	8004c58 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	429a      	cmp	r2, r3
 800875e:	d902      	bls.n	8008766 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d13d      	bne.n	80087e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008774:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800877e:	d111      	bne.n	80087a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008788:	d004      	beq.n	8008794 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008792:	d107      	bne.n	80087a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80087a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ac:	d10f      	bne.n	80087ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80087cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e017      	b.n	8008812 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d101      	bne.n	80087ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	3b01      	subs	r3, #1
 80087f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	4013      	ands	r3, r2
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	429a      	cmp	r2, r3
 8008800:	bf0c      	ite	eq
 8008802:	2301      	moveq	r3, #1
 8008804:	2300      	movne	r3, #0
 8008806:	b2db      	uxtb	r3, r3
 8008808:	461a      	mov	r2, r3
 800880a:	79fb      	ldrb	r3, [r7, #7]
 800880c:	429a      	cmp	r2, r3
 800880e:	d19b      	bne.n	8008748 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20000004 	.word	0x20000004

08008820 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af02      	add	r7, sp, #8
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008834:	d111      	bne.n	800885a <SPI_EndRxTransaction+0x3a>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800883e:	d004      	beq.n	800884a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008848:	d107      	bne.n	800885a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008858:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008862:	d12a      	bne.n	80088ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800886c:	d012      	beq.n	8008894 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2200      	movs	r2, #0
 8008876:	2180      	movs	r1, #128	@ 0x80
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f7ff ff49 	bl	8008710 <SPI_WaitFlagStateUntilTimeout>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d02d      	beq.n	80088e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008888:	f043 0220 	orr.w	r2, r3, #32
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e026      	b.n	80088e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2200      	movs	r2, #0
 800889c:	2101      	movs	r1, #1
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f7ff ff36 	bl	8008710 <SPI_WaitFlagStateUntilTimeout>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d01a      	beq.n	80088e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ae:	f043 0220 	orr.w	r2, r3, #32
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80088b6:	2303      	movs	r3, #3
 80088b8:	e013      	b.n	80088e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	2200      	movs	r2, #0
 80088c2:	2101      	movs	r1, #1
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f7ff ff23 	bl	8008710 <SPI_WaitFlagStateUntilTimeout>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d007      	beq.n	80088e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d4:	f043 0220 	orr.w	r2, r3, #32
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	e000      	b.n	80088e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
	...

080088ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af02      	add	r7, sp, #8
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2201      	movs	r2, #1
 8008900:	2102      	movs	r1, #2
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7ff ff04 	bl	8008710 <SPI_WaitFlagStateUntilTimeout>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d007      	beq.n	800891e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008912:	f043 0220 	orr.w	r2, r3, #32
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e032      	b.n	8008984 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800891e:	4b1b      	ldr	r3, [pc, #108]	@ (800898c <SPI_EndRxTxTransaction+0xa0>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a1b      	ldr	r2, [pc, #108]	@ (8008990 <SPI_EndRxTxTransaction+0xa4>)
 8008924:	fba2 2303 	umull	r2, r3, r2, r3
 8008928:	0d5b      	lsrs	r3, r3, #21
 800892a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800892e:	fb02 f303 	mul.w	r3, r2, r3
 8008932:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800893c:	d112      	bne.n	8008964 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2200      	movs	r2, #0
 8008946:	2180      	movs	r1, #128	@ 0x80
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f7ff fee1 	bl	8008710 <SPI_WaitFlagStateUntilTimeout>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d016      	beq.n	8008982 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008958:	f043 0220 	orr.w	r2, r3, #32
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e00f      	b.n	8008984 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00a      	beq.n	8008980 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	3b01      	subs	r3, #1
 800896e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800897a:	2b80      	cmp	r3, #128	@ 0x80
 800897c:	d0f2      	beq.n	8008964 <SPI_EndRxTxTransaction+0x78>
 800897e:	e000      	b.n	8008982 <SPI_EndRxTxTransaction+0x96>
        break;
 8008980:	bf00      	nop
  }

  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20000004 	.word	0x20000004
 8008990:	165e9f81 	.word	0x165e9f81

08008994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e041      	b.n	8008a2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d106      	bne.n	80089c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7fa f8d0 	bl	8002b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2202      	movs	r2, #2
 80089c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3304      	adds	r3, #4
 80089d0:	4619      	mov	r1, r3
 80089d2:	4610      	mov	r0, r2
 80089d4:	f000 fc3c 	bl	8009250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
	...

08008a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d001      	beq.n	8008a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e044      	b.n	8008ad6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f042 0201 	orr.w	r2, r2, #1
 8008a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a1e      	ldr	r2, [pc, #120]	@ (8008ae4 <HAL_TIM_Base_Start_IT+0xb0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d018      	beq.n	8008aa0 <HAL_TIM_Base_Start_IT+0x6c>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a76:	d013      	beq.n	8008aa0 <HAL_TIM_Base_Start_IT+0x6c>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8008ae8 <HAL_TIM_Base_Start_IT+0xb4>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d00e      	beq.n	8008aa0 <HAL_TIM_Base_Start_IT+0x6c>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a19      	ldr	r2, [pc, #100]	@ (8008aec <HAL_TIM_Base_Start_IT+0xb8>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d009      	beq.n	8008aa0 <HAL_TIM_Base_Start_IT+0x6c>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a17      	ldr	r2, [pc, #92]	@ (8008af0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d004      	beq.n	8008aa0 <HAL_TIM_Base_Start_IT+0x6c>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a16      	ldr	r2, [pc, #88]	@ (8008af4 <HAL_TIM_Base_Start_IT+0xc0>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d111      	bne.n	8008ac4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b06      	cmp	r3, #6
 8008ab0:	d010      	beq.n	8008ad4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f042 0201 	orr.w	r2, r2, #1
 8008ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ac2:	e007      	b.n	8008ad4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f042 0201 	orr.w	r2, r2, #1
 8008ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	40010000 	.word	0x40010000
 8008ae8:	40000400 	.word	0x40000400
 8008aec:	40000800 	.word	0x40000800
 8008af0:	40000c00 	.word	0x40000c00
 8008af4:	40014000 	.word	0x40014000

08008af8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e041      	b.n	8008b8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d106      	bne.n	8008b24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f839 	bl	8008b96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	3304      	adds	r3, #4
 8008b34:	4619      	mov	r1, r3
 8008b36:	4610      	mov	r0, r2
 8008b38:	f000 fb8a 	bl	8009250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
	...

08008bac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d109      	bne.n	8008bd0 <HAL_TIM_PWM_Start+0x24>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	bf14      	ite	ne
 8008bc8:	2301      	movne	r3, #1
 8008bca:	2300      	moveq	r3, #0
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	e022      	b.n	8008c16 <HAL_TIM_PWM_Start+0x6a>
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	d109      	bne.n	8008bea <HAL_TIM_PWM_Start+0x3e>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	bf14      	ite	ne
 8008be2:	2301      	movne	r3, #1
 8008be4:	2300      	moveq	r3, #0
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	e015      	b.n	8008c16 <HAL_TIM_PWM_Start+0x6a>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b08      	cmp	r3, #8
 8008bee:	d109      	bne.n	8008c04 <HAL_TIM_PWM_Start+0x58>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	bf14      	ite	ne
 8008bfc:	2301      	movne	r3, #1
 8008bfe:	2300      	moveq	r3, #0
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	e008      	b.n	8008c16 <HAL_TIM_PWM_Start+0x6a>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	bf14      	ite	ne
 8008c10:	2301      	movne	r3, #1
 8008c12:	2300      	moveq	r3, #0
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e068      	b.n	8008cf0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d104      	bne.n	8008c2e <HAL_TIM_PWM_Start+0x82>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2202      	movs	r2, #2
 8008c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c2c:	e013      	b.n	8008c56 <HAL_TIM_PWM_Start+0xaa>
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d104      	bne.n	8008c3e <HAL_TIM_PWM_Start+0x92>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c3c:	e00b      	b.n	8008c56 <HAL_TIM_PWM_Start+0xaa>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d104      	bne.n	8008c4e <HAL_TIM_PWM_Start+0xa2>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2202      	movs	r2, #2
 8008c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c4c:	e003      	b.n	8008c56 <HAL_TIM_PWM_Start+0xaa>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2202      	movs	r2, #2
 8008c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 fda8 	bl	80097b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a23      	ldr	r2, [pc, #140]	@ (8008cf8 <HAL_TIM_PWM_Start+0x14c>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d107      	bne.n	8008c7e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a1d      	ldr	r2, [pc, #116]	@ (8008cf8 <HAL_TIM_PWM_Start+0x14c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d018      	beq.n	8008cba <HAL_TIM_PWM_Start+0x10e>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c90:	d013      	beq.n	8008cba <HAL_TIM_PWM_Start+0x10e>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a19      	ldr	r2, [pc, #100]	@ (8008cfc <HAL_TIM_PWM_Start+0x150>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d00e      	beq.n	8008cba <HAL_TIM_PWM_Start+0x10e>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a17      	ldr	r2, [pc, #92]	@ (8008d00 <HAL_TIM_PWM_Start+0x154>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d009      	beq.n	8008cba <HAL_TIM_PWM_Start+0x10e>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a16      	ldr	r2, [pc, #88]	@ (8008d04 <HAL_TIM_PWM_Start+0x158>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d004      	beq.n	8008cba <HAL_TIM_PWM_Start+0x10e>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a14      	ldr	r2, [pc, #80]	@ (8008d08 <HAL_TIM_PWM_Start+0x15c>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d111      	bne.n	8008cde <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f003 0307 	and.w	r3, r3, #7
 8008cc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2b06      	cmp	r3, #6
 8008cca:	d010      	beq.n	8008cee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f042 0201 	orr.w	r2, r2, #1
 8008cda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cdc:	e007      	b.n	8008cee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f042 0201 	orr.w	r2, r2, #1
 8008cec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	40010000 	.word	0x40010000
 8008cfc:	40000400 	.word	0x40000400
 8008d00:	40000800 	.word	0x40000800
 8008d04:	40000c00 	.word	0x40000c00
 8008d08:	40014000 	.word	0x40014000

08008d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	f003 0302 	and.w	r3, r3, #2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d020      	beq.n	8008d70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f003 0302 	and.w	r3, r3, #2
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d01b      	beq.n	8008d70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f06f 0202 	mvn.w	r2, #2
 8008d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	f003 0303 	and.w	r3, r3, #3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fa5b 	bl	8009212 <HAL_TIM_IC_CaptureCallback>
 8008d5c:	e005      	b.n	8008d6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fa4d 	bl	80091fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fa5e 	bl	8009226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	f003 0304 	and.w	r3, r3, #4
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d020      	beq.n	8008dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f003 0304 	and.w	r3, r3, #4
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d01b      	beq.n	8008dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f06f 0204 	mvn.w	r2, #4
 8008d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2202      	movs	r2, #2
 8008d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fa35 	bl	8009212 <HAL_TIM_IC_CaptureCallback>
 8008da8:	e005      	b.n	8008db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fa27 	bl	80091fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fa38 	bl	8009226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	f003 0308 	and.w	r3, r3, #8
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d020      	beq.n	8008e08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f003 0308 	and.w	r3, r3, #8
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d01b      	beq.n	8008e08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f06f 0208 	mvn.w	r2, #8
 8008dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2204      	movs	r2, #4
 8008dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	69db      	ldr	r3, [r3, #28]
 8008de6:	f003 0303 	and.w	r3, r3, #3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d003      	beq.n	8008df6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fa0f 	bl	8009212 <HAL_TIM_IC_CaptureCallback>
 8008df4:	e005      	b.n	8008e02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa01 	bl	80091fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fa12 	bl	8009226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	f003 0310 	and.w	r3, r3, #16
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d020      	beq.n	8008e54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f003 0310 	and.w	r3, r3, #16
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d01b      	beq.n	8008e54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f06f 0210 	mvn.w	r2, #16
 8008e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2208      	movs	r2, #8
 8008e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d003      	beq.n	8008e42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f9e9 	bl	8009212 <HAL_TIM_IC_CaptureCallback>
 8008e40:	e005      	b.n	8008e4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f9db 	bl	80091fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 f9ec 	bl	8009226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00c      	beq.n	8008e78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d007      	beq.n	8008e78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f06f 0201 	mvn.w	r2, #1
 8008e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7f9 fa20 	bl	80022b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00c      	beq.n	8008e9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d007      	beq.n	8008e9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fd2a 	bl	80098f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00c      	beq.n	8008ec0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d007      	beq.n	8008ec0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f9bd 	bl	800923a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f003 0320 	and.w	r3, r3, #32
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00c      	beq.n	8008ee4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f003 0320 	and.w	r3, r3, #32
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d007      	beq.n	8008ee4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f06f 0220 	mvn.w	r2, #32
 8008edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fcfc 	bl	80098dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ee4:	bf00      	nop
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d101      	bne.n	8008f0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f06:	2302      	movs	r3, #2
 8008f08:	e0ae      	b.n	8009068 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b0c      	cmp	r3, #12
 8008f16:	f200 809f 	bhi.w	8009058 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f20:	08008f55 	.word	0x08008f55
 8008f24:	08009059 	.word	0x08009059
 8008f28:	08009059 	.word	0x08009059
 8008f2c:	08009059 	.word	0x08009059
 8008f30:	08008f95 	.word	0x08008f95
 8008f34:	08009059 	.word	0x08009059
 8008f38:	08009059 	.word	0x08009059
 8008f3c:	08009059 	.word	0x08009059
 8008f40:	08008fd7 	.word	0x08008fd7
 8008f44:	08009059 	.word	0x08009059
 8008f48:	08009059 	.word	0x08009059
 8008f4c:	08009059 	.word	0x08009059
 8008f50:	08009017 	.word	0x08009017
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68b9      	ldr	r1, [r7, #8]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 fa04 	bl	8009368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	699a      	ldr	r2, [r3, #24]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f042 0208 	orr.w	r2, r2, #8
 8008f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	699a      	ldr	r2, [r3, #24]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f022 0204 	bic.w	r2, r2, #4
 8008f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6999      	ldr	r1, [r3, #24]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	691a      	ldr	r2, [r3, #16]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	430a      	orrs	r2, r1
 8008f90:	619a      	str	r2, [r3, #24]
      break;
 8008f92:	e064      	b.n	800905e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68b9      	ldr	r1, [r7, #8]
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 fa4a 	bl	8009434 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	699a      	ldr	r2, [r3, #24]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	699a      	ldr	r2, [r3, #24]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6999      	ldr	r1, [r3, #24]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	021a      	lsls	r2, r3, #8
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	619a      	str	r2, [r3, #24]
      break;
 8008fd4:	e043      	b.n	800905e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68b9      	ldr	r1, [r7, #8]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fa95 	bl	800950c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	69da      	ldr	r2, [r3, #28]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f042 0208 	orr.w	r2, r2, #8
 8008ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	69da      	ldr	r2, [r3, #28]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f022 0204 	bic.w	r2, r2, #4
 8009000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	69d9      	ldr	r1, [r3, #28]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	691a      	ldr	r2, [r3, #16]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	430a      	orrs	r2, r1
 8009012:	61da      	str	r2, [r3, #28]
      break;
 8009014:	e023      	b.n	800905e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68b9      	ldr	r1, [r7, #8]
 800901c:	4618      	mov	r0, r3
 800901e:	f000 fadf 	bl	80095e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69da      	ldr	r2, [r3, #28]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	69da      	ldr	r2, [r3, #28]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	69d9      	ldr	r1, [r3, #28]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	021a      	lsls	r2, r3, #8
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	430a      	orrs	r2, r1
 8009054:	61da      	str	r2, [r3, #28]
      break;
 8009056:	e002      	b.n	800905e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	75fb      	strb	r3, [r7, #23]
      break;
 800905c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009066:	7dfb      	ldrb	r3, [r7, #23]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3718      	adds	r7, #24
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_TIM_ConfigClockSource+0x1c>
 8009088:	2302      	movs	r3, #2
 800908a:	e0b4      	b.n	80091f6 <HAL_TIM_ConfigClockSource+0x186>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2202      	movs	r2, #2
 8009098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80090aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090c4:	d03e      	beq.n	8009144 <HAL_TIM_ConfigClockSource+0xd4>
 80090c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090ca:	f200 8087 	bhi.w	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 80090ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090d2:	f000 8086 	beq.w	80091e2 <HAL_TIM_ConfigClockSource+0x172>
 80090d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090da:	d87f      	bhi.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 80090dc:	2b70      	cmp	r3, #112	@ 0x70
 80090de:	d01a      	beq.n	8009116 <HAL_TIM_ConfigClockSource+0xa6>
 80090e0:	2b70      	cmp	r3, #112	@ 0x70
 80090e2:	d87b      	bhi.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 80090e4:	2b60      	cmp	r3, #96	@ 0x60
 80090e6:	d050      	beq.n	800918a <HAL_TIM_ConfigClockSource+0x11a>
 80090e8:	2b60      	cmp	r3, #96	@ 0x60
 80090ea:	d877      	bhi.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 80090ec:	2b50      	cmp	r3, #80	@ 0x50
 80090ee:	d03c      	beq.n	800916a <HAL_TIM_ConfigClockSource+0xfa>
 80090f0:	2b50      	cmp	r3, #80	@ 0x50
 80090f2:	d873      	bhi.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 80090f4:	2b40      	cmp	r3, #64	@ 0x40
 80090f6:	d058      	beq.n	80091aa <HAL_TIM_ConfigClockSource+0x13a>
 80090f8:	2b40      	cmp	r3, #64	@ 0x40
 80090fa:	d86f      	bhi.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 80090fc:	2b30      	cmp	r3, #48	@ 0x30
 80090fe:	d064      	beq.n	80091ca <HAL_TIM_ConfigClockSource+0x15a>
 8009100:	2b30      	cmp	r3, #48	@ 0x30
 8009102:	d86b      	bhi.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 8009104:	2b20      	cmp	r3, #32
 8009106:	d060      	beq.n	80091ca <HAL_TIM_ConfigClockSource+0x15a>
 8009108:	2b20      	cmp	r3, #32
 800910a:	d867      	bhi.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 800910c:	2b00      	cmp	r3, #0
 800910e:	d05c      	beq.n	80091ca <HAL_TIM_ConfigClockSource+0x15a>
 8009110:	2b10      	cmp	r3, #16
 8009112:	d05a      	beq.n	80091ca <HAL_TIM_ConfigClockSource+0x15a>
 8009114:	e062      	b.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009126:	f000 fb25 	bl	8009774 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	609a      	str	r2, [r3, #8]
      break;
 8009142:	e04f      	b.n	80091e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009154:	f000 fb0e 	bl	8009774 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689a      	ldr	r2, [r3, #8]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009166:	609a      	str	r2, [r3, #8]
      break;
 8009168:	e03c      	b.n	80091e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009176:	461a      	mov	r2, r3
 8009178:	f000 fa82 	bl	8009680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2150      	movs	r1, #80	@ 0x50
 8009182:	4618      	mov	r0, r3
 8009184:	f000 fadb 	bl	800973e <TIM_ITRx_SetConfig>
      break;
 8009188:	e02c      	b.n	80091e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009196:	461a      	mov	r2, r3
 8009198:	f000 faa1 	bl	80096de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2160      	movs	r1, #96	@ 0x60
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 facb 	bl	800973e <TIM_ITRx_SetConfig>
      break;
 80091a8:	e01c      	b.n	80091e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091b6:	461a      	mov	r2, r3
 80091b8:	f000 fa62 	bl	8009680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2140      	movs	r1, #64	@ 0x40
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 fabb 	bl	800973e <TIM_ITRx_SetConfig>
      break;
 80091c8:	e00c      	b.n	80091e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4619      	mov	r1, r3
 80091d4:	4610      	mov	r0, r2
 80091d6:	f000 fab2 	bl	800973e <TIM_ITRx_SetConfig>
      break;
 80091da:	e003      	b.n	80091e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	73fb      	strb	r3, [r7, #15]
      break;
 80091e0:	e000      	b.n	80091e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80091e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091fe:	b480      	push	{r7}
 8009200:	b083      	sub	sp, #12
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009206:	bf00      	nop
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009212:	b480      	push	{r7}
 8009214:	b083      	sub	sp, #12
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800921a:	bf00      	nop
 800921c:	370c      	adds	r7, #12
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009226:	b480      	push	{r7}
 8009228:	b083      	sub	sp, #12
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800922e:	bf00      	nop
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800923a:	b480      	push	{r7}
 800923c:	b083      	sub	sp, #12
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009242:	bf00      	nop
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
	...

08009250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a3a      	ldr	r2, [pc, #232]	@ (800934c <TIM_Base_SetConfig+0xfc>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d00f      	beq.n	8009288 <TIM_Base_SetConfig+0x38>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800926e:	d00b      	beq.n	8009288 <TIM_Base_SetConfig+0x38>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a37      	ldr	r2, [pc, #220]	@ (8009350 <TIM_Base_SetConfig+0x100>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d007      	beq.n	8009288 <TIM_Base_SetConfig+0x38>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a36      	ldr	r2, [pc, #216]	@ (8009354 <TIM_Base_SetConfig+0x104>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d003      	beq.n	8009288 <TIM_Base_SetConfig+0x38>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a35      	ldr	r2, [pc, #212]	@ (8009358 <TIM_Base_SetConfig+0x108>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d108      	bne.n	800929a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800928e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	4313      	orrs	r3, r2
 8009298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a2b      	ldr	r2, [pc, #172]	@ (800934c <TIM_Base_SetConfig+0xfc>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d01b      	beq.n	80092da <TIM_Base_SetConfig+0x8a>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092a8:	d017      	beq.n	80092da <TIM_Base_SetConfig+0x8a>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a28      	ldr	r2, [pc, #160]	@ (8009350 <TIM_Base_SetConfig+0x100>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d013      	beq.n	80092da <TIM_Base_SetConfig+0x8a>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a27      	ldr	r2, [pc, #156]	@ (8009354 <TIM_Base_SetConfig+0x104>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d00f      	beq.n	80092da <TIM_Base_SetConfig+0x8a>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a26      	ldr	r2, [pc, #152]	@ (8009358 <TIM_Base_SetConfig+0x108>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d00b      	beq.n	80092da <TIM_Base_SetConfig+0x8a>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a25      	ldr	r2, [pc, #148]	@ (800935c <TIM_Base_SetConfig+0x10c>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d007      	beq.n	80092da <TIM_Base_SetConfig+0x8a>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a24      	ldr	r2, [pc, #144]	@ (8009360 <TIM_Base_SetConfig+0x110>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d003      	beq.n	80092da <TIM_Base_SetConfig+0x8a>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a23      	ldr	r2, [pc, #140]	@ (8009364 <TIM_Base_SetConfig+0x114>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d108      	bne.n	80092ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	695b      	ldr	r3, [r3, #20]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	4a0e      	ldr	r2, [pc, #56]	@ (800934c <TIM_Base_SetConfig+0xfc>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d103      	bne.n	8009320 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	691a      	ldr	r2, [r3, #16]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	2b01      	cmp	r3, #1
 8009330:	d105      	bne.n	800933e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	f023 0201 	bic.w	r2, r3, #1
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	611a      	str	r2, [r3, #16]
  }
}
 800933e:	bf00      	nop
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	40010000 	.word	0x40010000
 8009350:	40000400 	.word	0x40000400
 8009354:	40000800 	.word	0x40000800
 8009358:	40000c00 	.word	0x40000c00
 800935c:	40014000 	.word	0x40014000
 8009360:	40014400 	.word	0x40014400
 8009364:	40014800 	.word	0x40014800

08009368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009368:	b480      	push	{r7}
 800936a:	b087      	sub	sp, #28
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	f023 0201 	bic.w	r2, r3, #1
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0303 	bic.w	r3, r3, #3
 800939e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f023 0302 	bic.w	r3, r3, #2
 80093b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a1c      	ldr	r2, [pc, #112]	@ (8009430 <TIM_OC1_SetConfig+0xc8>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d10c      	bne.n	80093de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	f023 0308 	bic.w	r3, r3, #8
 80093ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	f023 0304 	bic.w	r3, r3, #4
 80093dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a13      	ldr	r2, [pc, #76]	@ (8009430 <TIM_OC1_SetConfig+0xc8>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d111      	bne.n	800940a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80093f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	4313      	orrs	r3, r2
 8009408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	685a      	ldr	r2, [r3, #4]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	621a      	str	r2, [r3, #32]
}
 8009424:	bf00      	nop
 8009426:	371c      	adds	r7, #28
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	40010000 	.word	0x40010000

08009434 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009434:	b480      	push	{r7}
 8009436:	b087      	sub	sp, #28
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a1b      	ldr	r3, [r3, #32]
 8009448:	f023 0210 	bic.w	r2, r3, #16
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800946a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	021b      	lsls	r3, r3, #8
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	4313      	orrs	r3, r2
 8009476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f023 0320 	bic.w	r3, r3, #32
 800947e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	011b      	lsls	r3, r3, #4
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	4313      	orrs	r3, r2
 800948a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a1e      	ldr	r2, [pc, #120]	@ (8009508 <TIM_OC2_SetConfig+0xd4>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d10d      	bne.n	80094b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800949a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	011b      	lsls	r3, r3, #4
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a15      	ldr	r2, [pc, #84]	@ (8009508 <TIM_OC2_SetConfig+0xd4>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d113      	bne.n	80094e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80094be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80094c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	693a      	ldr	r2, [r7, #16]
 80094dc:	4313      	orrs	r3, r2
 80094de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	621a      	str	r2, [r3, #32]
}
 80094fa:	bf00      	nop
 80094fc:	371c      	adds	r7, #28
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	40010000 	.word	0x40010000

0800950c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800950c:	b480      	push	{r7}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a1b      	ldr	r3, [r3, #32]
 800951a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a1b      	ldr	r3, [r3, #32]
 8009520:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	69db      	ldr	r3, [r3, #28]
 8009532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800953a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f023 0303 	bic.w	r3, r3, #3
 8009542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	4313      	orrs	r3, r2
 800954c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	021b      	lsls	r3, r3, #8
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	4313      	orrs	r3, r2
 8009560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a1d      	ldr	r2, [pc, #116]	@ (80095dc <TIM_OC3_SetConfig+0xd0>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d10d      	bne.n	8009586 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	4313      	orrs	r3, r2
 800957c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a14      	ldr	r2, [pc, #80]	@ (80095dc <TIM_OC3_SetConfig+0xd0>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d113      	bne.n	80095b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800959c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	011b      	lsls	r3, r3, #4
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	011b      	lsls	r3, r3, #4
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	621a      	str	r2, [r3, #32]
}
 80095d0:	bf00      	nop
 80095d2:	371c      	adds	r7, #28
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	40010000 	.word	0x40010000

080095e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a1b      	ldr	r3, [r3, #32]
 80095f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	69db      	ldr	r3, [r3, #28]
 8009606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800960e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	021b      	lsls	r3, r3, #8
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	4313      	orrs	r3, r2
 8009622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800962a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	031b      	lsls	r3, r3, #12
 8009632:	693a      	ldr	r2, [r7, #16]
 8009634:	4313      	orrs	r3, r2
 8009636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a10      	ldr	r2, [pc, #64]	@ (800967c <TIM_OC4_SetConfig+0x9c>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d109      	bne.n	8009654 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	019b      	lsls	r3, r3, #6
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	4313      	orrs	r3, r2
 8009652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	697a      	ldr	r2, [r7, #20]
 8009658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	621a      	str	r2, [r3, #32]
}
 800966e:	bf00      	nop
 8009670:	371c      	adds	r7, #28
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	40010000 	.word	0x40010000

08009680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009680:	b480      	push	{r7}
 8009682:	b087      	sub	sp, #28
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	f023 0201 	bic.w	r2, r3, #1
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	011b      	lsls	r3, r3, #4
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f023 030a 	bic.w	r3, r3, #10
 80096bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	621a      	str	r2, [r3, #32]
}
 80096d2:	bf00      	nop
 80096d4:	371c      	adds	r7, #28
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096de:	b480      	push	{r7}
 80096e0:	b087      	sub	sp, #28
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	60f8      	str	r0, [r7, #12]
 80096e6:	60b9      	str	r1, [r7, #8]
 80096e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	f023 0210 	bic.w	r2, r3, #16
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009708:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	031b      	lsls	r3, r3, #12
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	4313      	orrs	r3, r2
 8009712:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800971a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	011b      	lsls	r3, r3, #4
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	4313      	orrs	r3, r2
 8009724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	621a      	str	r2, [r3, #32]
}
 8009732:	bf00      	nop
 8009734:	371c      	adds	r7, #28
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800973e:	b480      	push	{r7}
 8009740:	b085      	sub	sp, #20
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	4313      	orrs	r3, r2
 800975c:	f043 0307 	orr.w	r3, r3, #7
 8009760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	609a      	str	r2, [r3, #8]
}
 8009768:	bf00      	nop
 800976a:	3714      	adds	r7, #20
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009774:	b480      	push	{r7}
 8009776:	b087      	sub	sp, #28
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
 8009780:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800978e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	021a      	lsls	r2, r3, #8
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	431a      	orrs	r2, r3
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	4313      	orrs	r3, r2
 800979c:	697a      	ldr	r2, [r7, #20]
 800979e:	4313      	orrs	r3, r2
 80097a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	697a      	ldr	r2, [r7, #20]
 80097a6:	609a      	str	r2, [r3, #8]
}
 80097a8:	bf00      	nop
 80097aa:	371c      	adds	r7, #28
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	f003 031f 	and.w	r3, r3, #31
 80097c6:	2201      	movs	r2, #1
 80097c8:	fa02 f303 	lsl.w	r3, r2, r3
 80097cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6a1a      	ldr	r2, [r3, #32]
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	43db      	mvns	r3, r3
 80097d6:	401a      	ands	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a1a      	ldr	r2, [r3, #32]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	f003 031f 	and.w	r3, r3, #31
 80097e6:	6879      	ldr	r1, [r7, #4]
 80097e8:	fa01 f303 	lsl.w	r3, r1, r3
 80097ec:	431a      	orrs	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	621a      	str	r2, [r3, #32]
}
 80097f2:	bf00      	nop
 80097f4:	371c      	adds	r7, #28
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
	...

08009800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009810:	2b01      	cmp	r3, #1
 8009812:	d101      	bne.n	8009818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009814:	2302      	movs	r3, #2
 8009816:	e050      	b.n	80098ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2202      	movs	r2, #2
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800983e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	4313      	orrs	r3, r2
 8009848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a1c      	ldr	r2, [pc, #112]	@ (80098c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d018      	beq.n	800988e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009864:	d013      	beq.n	800988e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a18      	ldr	r2, [pc, #96]	@ (80098cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d00e      	beq.n	800988e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a16      	ldr	r2, [pc, #88]	@ (80098d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d009      	beq.n	800988e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a15      	ldr	r2, [pc, #84]	@ (80098d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d004      	beq.n	800988e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a13      	ldr	r2, [pc, #76]	@ (80098d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d10c      	bne.n	80098a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	4313      	orrs	r3, r2
 800989e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3714      	adds	r7, #20
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	40010000 	.word	0x40010000
 80098cc:	40000400 	.word	0x40000400
 80098d0:	40000800 	.word	0x40000800
 80098d4:	40000c00 	.word	0x40000c00
 80098d8:	40014000 	.word	0x40014000

080098dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e042      	b.n	800999c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800991c:	b2db      	uxtb	r3, r3
 800991e:	2b00      	cmp	r3, #0
 8009920:	d106      	bne.n	8009930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f7f9 f9b6 	bl	8002c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2224      	movs	r2, #36	@ 0x24
 8009934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	68da      	ldr	r2, [r3, #12]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f82b 	bl	80099a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	691a      	ldr	r2, [r3, #16]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800995c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	695a      	ldr	r2, [r3, #20]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800996c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68da      	ldr	r2, [r3, #12]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800997c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2220      	movs	r2, #32
 8009988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2220      	movs	r2, #32
 8009990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099a8:	b0c0      	sub	sp, #256	@ 0x100
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80099bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099c0:	68d9      	ldr	r1, [r3, #12]
 80099c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	ea40 0301 	orr.w	r3, r0, r1
 80099cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80099ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099d2:	689a      	ldr	r2, [r3, #8]
 80099d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	431a      	orrs	r2, r3
 80099dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	431a      	orrs	r2, r3
 80099e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80099f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80099fc:	f021 010c 	bic.w	r1, r1, #12
 8009a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009a0a:	430b      	orrs	r3, r1
 8009a0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a1e:	6999      	ldr	r1, [r3, #24]
 8009a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	ea40 0301 	orr.w	r3, r0, r1
 8009a2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4b8f      	ldr	r3, [pc, #572]	@ (8009c70 <UART_SetConfig+0x2cc>)
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d005      	beq.n	8009a44 <UART_SetConfig+0xa0>
 8009a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8009c74 <UART_SetConfig+0x2d0>)
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d104      	bne.n	8009a4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a44:	f7fe f86e 	bl	8007b24 <HAL_RCC_GetPCLK2Freq>
 8009a48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009a4c:	e003      	b.n	8009a56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a4e:	f7fe f855 	bl	8007afc <HAL_RCC_GetPCLK1Freq>
 8009a52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a60:	f040 810c 	bne.w	8009c7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009a72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009a76:	4622      	mov	r2, r4
 8009a78:	462b      	mov	r3, r5
 8009a7a:	1891      	adds	r1, r2, r2
 8009a7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009a7e:	415b      	adcs	r3, r3
 8009a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009a86:	4621      	mov	r1, r4
 8009a88:	eb12 0801 	adds.w	r8, r2, r1
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	eb43 0901 	adc.w	r9, r3, r1
 8009a92:	f04f 0200 	mov.w	r2, #0
 8009a96:	f04f 0300 	mov.w	r3, #0
 8009a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009aa6:	4690      	mov	r8, r2
 8009aa8:	4699      	mov	r9, r3
 8009aaa:	4623      	mov	r3, r4
 8009aac:	eb18 0303 	adds.w	r3, r8, r3
 8009ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ab4:	462b      	mov	r3, r5
 8009ab6:	eb49 0303 	adc.w	r3, r9, r3
 8009aba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009aca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009ace:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	18db      	adds	r3, r3, r3
 8009ad6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ad8:	4613      	mov	r3, r2
 8009ada:	eb42 0303 	adc.w	r3, r2, r3
 8009ade:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ae0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009ae4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009ae8:	f7f7 f8ce 	bl	8000c88 <__aeabi_uldivmod>
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	4b61      	ldr	r3, [pc, #388]	@ (8009c78 <UART_SetConfig+0x2d4>)
 8009af2:	fba3 2302 	umull	r2, r3, r3, r2
 8009af6:	095b      	lsrs	r3, r3, #5
 8009af8:	011c      	lsls	r4, r3, #4
 8009afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009afe:	2200      	movs	r2, #0
 8009b00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009b08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009b0c:	4642      	mov	r2, r8
 8009b0e:	464b      	mov	r3, r9
 8009b10:	1891      	adds	r1, r2, r2
 8009b12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009b14:	415b      	adcs	r3, r3
 8009b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009b1c:	4641      	mov	r1, r8
 8009b1e:	eb12 0a01 	adds.w	sl, r2, r1
 8009b22:	4649      	mov	r1, r9
 8009b24:	eb43 0b01 	adc.w	fp, r3, r1
 8009b28:	f04f 0200 	mov.w	r2, #0
 8009b2c:	f04f 0300 	mov.w	r3, #0
 8009b30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b3c:	4692      	mov	sl, r2
 8009b3e:	469b      	mov	fp, r3
 8009b40:	4643      	mov	r3, r8
 8009b42:	eb1a 0303 	adds.w	r3, sl, r3
 8009b46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b4a:	464b      	mov	r3, r9
 8009b4c:	eb4b 0303 	adc.w	r3, fp, r3
 8009b50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009b64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	18db      	adds	r3, r3, r3
 8009b6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b6e:	4613      	mov	r3, r2
 8009b70:	eb42 0303 	adc.w	r3, r2, r3
 8009b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009b7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009b7e:	f7f7 f883 	bl	8000c88 <__aeabi_uldivmod>
 8009b82:	4602      	mov	r2, r0
 8009b84:	460b      	mov	r3, r1
 8009b86:	4611      	mov	r1, r2
 8009b88:	4b3b      	ldr	r3, [pc, #236]	@ (8009c78 <UART_SetConfig+0x2d4>)
 8009b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8009b8e:	095b      	lsrs	r3, r3, #5
 8009b90:	2264      	movs	r2, #100	@ 0x64
 8009b92:	fb02 f303 	mul.w	r3, r2, r3
 8009b96:	1acb      	subs	r3, r1, r3
 8009b98:	00db      	lsls	r3, r3, #3
 8009b9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009b9e:	4b36      	ldr	r3, [pc, #216]	@ (8009c78 <UART_SetConfig+0x2d4>)
 8009ba0:	fba3 2302 	umull	r2, r3, r3, r2
 8009ba4:	095b      	lsrs	r3, r3, #5
 8009ba6:	005b      	lsls	r3, r3, #1
 8009ba8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009bac:	441c      	add	r4, r3
 8009bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009bb8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009bbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009bc0:	4642      	mov	r2, r8
 8009bc2:	464b      	mov	r3, r9
 8009bc4:	1891      	adds	r1, r2, r2
 8009bc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009bc8:	415b      	adcs	r3, r3
 8009bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009bd0:	4641      	mov	r1, r8
 8009bd2:	1851      	adds	r1, r2, r1
 8009bd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	414b      	adcs	r3, r1
 8009bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bdc:	f04f 0200 	mov.w	r2, #0
 8009be0:	f04f 0300 	mov.w	r3, #0
 8009be4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009be8:	4659      	mov	r1, fp
 8009bea:	00cb      	lsls	r3, r1, #3
 8009bec:	4651      	mov	r1, sl
 8009bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bf2:	4651      	mov	r1, sl
 8009bf4:	00ca      	lsls	r2, r1, #3
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	4642      	mov	r2, r8
 8009bfe:	189b      	adds	r3, r3, r2
 8009c00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c04:	464b      	mov	r3, r9
 8009c06:	460a      	mov	r2, r1
 8009c08:	eb42 0303 	adc.w	r3, r2, r3
 8009c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009c20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009c24:	460b      	mov	r3, r1
 8009c26:	18db      	adds	r3, r3, r3
 8009c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	eb42 0303 	adc.w	r3, r2, r3
 8009c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009c36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009c3a:	f7f7 f825 	bl	8000c88 <__aeabi_uldivmod>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	4b0d      	ldr	r3, [pc, #52]	@ (8009c78 <UART_SetConfig+0x2d4>)
 8009c44:	fba3 1302 	umull	r1, r3, r3, r2
 8009c48:	095b      	lsrs	r3, r3, #5
 8009c4a:	2164      	movs	r1, #100	@ 0x64
 8009c4c:	fb01 f303 	mul.w	r3, r1, r3
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	3332      	adds	r3, #50	@ 0x32
 8009c56:	4a08      	ldr	r2, [pc, #32]	@ (8009c78 <UART_SetConfig+0x2d4>)
 8009c58:	fba2 2303 	umull	r2, r3, r2, r3
 8009c5c:	095b      	lsrs	r3, r3, #5
 8009c5e:	f003 0207 	and.w	r2, r3, #7
 8009c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4422      	add	r2, r4
 8009c6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c6c:	e106      	b.n	8009e7c <UART_SetConfig+0x4d8>
 8009c6e:	bf00      	nop
 8009c70:	40011000 	.word	0x40011000
 8009c74:	40011400 	.word	0x40011400
 8009c78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c80:	2200      	movs	r2, #0
 8009c82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009c8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009c8e:	4642      	mov	r2, r8
 8009c90:	464b      	mov	r3, r9
 8009c92:	1891      	adds	r1, r2, r2
 8009c94:	6239      	str	r1, [r7, #32]
 8009c96:	415b      	adcs	r3, r3
 8009c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c9e:	4641      	mov	r1, r8
 8009ca0:	1854      	adds	r4, r2, r1
 8009ca2:	4649      	mov	r1, r9
 8009ca4:	eb43 0501 	adc.w	r5, r3, r1
 8009ca8:	f04f 0200 	mov.w	r2, #0
 8009cac:	f04f 0300 	mov.w	r3, #0
 8009cb0:	00eb      	lsls	r3, r5, #3
 8009cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009cb6:	00e2      	lsls	r2, r4, #3
 8009cb8:	4614      	mov	r4, r2
 8009cba:	461d      	mov	r5, r3
 8009cbc:	4643      	mov	r3, r8
 8009cbe:	18e3      	adds	r3, r4, r3
 8009cc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009cc4:	464b      	mov	r3, r9
 8009cc6:	eb45 0303 	adc.w	r3, r5, r3
 8009cca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009cda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009cde:	f04f 0200 	mov.w	r2, #0
 8009ce2:	f04f 0300 	mov.w	r3, #0
 8009ce6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009cea:	4629      	mov	r1, r5
 8009cec:	008b      	lsls	r3, r1, #2
 8009cee:	4621      	mov	r1, r4
 8009cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	008a      	lsls	r2, r1, #2
 8009cf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009cfc:	f7f6 ffc4 	bl	8000c88 <__aeabi_uldivmod>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4b60      	ldr	r3, [pc, #384]	@ (8009e88 <UART_SetConfig+0x4e4>)
 8009d06:	fba3 2302 	umull	r2, r3, r3, r2
 8009d0a:	095b      	lsrs	r3, r3, #5
 8009d0c:	011c      	lsls	r4, r3, #4
 8009d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d12:	2200      	movs	r2, #0
 8009d14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009d1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009d20:	4642      	mov	r2, r8
 8009d22:	464b      	mov	r3, r9
 8009d24:	1891      	adds	r1, r2, r2
 8009d26:	61b9      	str	r1, [r7, #24]
 8009d28:	415b      	adcs	r3, r3
 8009d2a:	61fb      	str	r3, [r7, #28]
 8009d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d30:	4641      	mov	r1, r8
 8009d32:	1851      	adds	r1, r2, r1
 8009d34:	6139      	str	r1, [r7, #16]
 8009d36:	4649      	mov	r1, r9
 8009d38:	414b      	adcs	r3, r1
 8009d3a:	617b      	str	r3, [r7, #20]
 8009d3c:	f04f 0200 	mov.w	r2, #0
 8009d40:	f04f 0300 	mov.w	r3, #0
 8009d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d48:	4659      	mov	r1, fp
 8009d4a:	00cb      	lsls	r3, r1, #3
 8009d4c:	4651      	mov	r1, sl
 8009d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d52:	4651      	mov	r1, sl
 8009d54:	00ca      	lsls	r2, r1, #3
 8009d56:	4610      	mov	r0, r2
 8009d58:	4619      	mov	r1, r3
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	4642      	mov	r2, r8
 8009d5e:	189b      	adds	r3, r3, r2
 8009d60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d64:	464b      	mov	r3, r9
 8009d66:	460a      	mov	r2, r1
 8009d68:	eb42 0303 	adc.w	r3, r2, r3
 8009d6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009d7c:	f04f 0200 	mov.w	r2, #0
 8009d80:	f04f 0300 	mov.w	r3, #0
 8009d84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009d88:	4649      	mov	r1, r9
 8009d8a:	008b      	lsls	r3, r1, #2
 8009d8c:	4641      	mov	r1, r8
 8009d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d92:	4641      	mov	r1, r8
 8009d94:	008a      	lsls	r2, r1, #2
 8009d96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009d9a:	f7f6 ff75 	bl	8000c88 <__aeabi_uldivmod>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	4611      	mov	r1, r2
 8009da4:	4b38      	ldr	r3, [pc, #224]	@ (8009e88 <UART_SetConfig+0x4e4>)
 8009da6:	fba3 2301 	umull	r2, r3, r3, r1
 8009daa:	095b      	lsrs	r3, r3, #5
 8009dac:	2264      	movs	r2, #100	@ 0x64
 8009dae:	fb02 f303 	mul.w	r3, r2, r3
 8009db2:	1acb      	subs	r3, r1, r3
 8009db4:	011b      	lsls	r3, r3, #4
 8009db6:	3332      	adds	r3, #50	@ 0x32
 8009db8:	4a33      	ldr	r2, [pc, #204]	@ (8009e88 <UART_SetConfig+0x4e4>)
 8009dba:	fba2 2303 	umull	r2, r3, r2, r3
 8009dbe:	095b      	lsrs	r3, r3, #5
 8009dc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009dc4:	441c      	add	r4, r3
 8009dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dca:	2200      	movs	r2, #0
 8009dcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8009dce:	677a      	str	r2, [r7, #116]	@ 0x74
 8009dd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009dd4:	4642      	mov	r2, r8
 8009dd6:	464b      	mov	r3, r9
 8009dd8:	1891      	adds	r1, r2, r2
 8009dda:	60b9      	str	r1, [r7, #8]
 8009ddc:	415b      	adcs	r3, r3
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009de4:	4641      	mov	r1, r8
 8009de6:	1851      	adds	r1, r2, r1
 8009de8:	6039      	str	r1, [r7, #0]
 8009dea:	4649      	mov	r1, r9
 8009dec:	414b      	adcs	r3, r1
 8009dee:	607b      	str	r3, [r7, #4]
 8009df0:	f04f 0200 	mov.w	r2, #0
 8009df4:	f04f 0300 	mov.w	r3, #0
 8009df8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009dfc:	4659      	mov	r1, fp
 8009dfe:	00cb      	lsls	r3, r1, #3
 8009e00:	4651      	mov	r1, sl
 8009e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e06:	4651      	mov	r1, sl
 8009e08:	00ca      	lsls	r2, r1, #3
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4603      	mov	r3, r0
 8009e10:	4642      	mov	r2, r8
 8009e12:	189b      	adds	r3, r3, r2
 8009e14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e16:	464b      	mov	r3, r9
 8009e18:	460a      	mov	r2, r1
 8009e1a:	eb42 0303 	adc.w	r3, r2, r3
 8009e1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8009e2c:	f04f 0200 	mov.w	r2, #0
 8009e30:	f04f 0300 	mov.w	r3, #0
 8009e34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009e38:	4649      	mov	r1, r9
 8009e3a:	008b      	lsls	r3, r1, #2
 8009e3c:	4641      	mov	r1, r8
 8009e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e42:	4641      	mov	r1, r8
 8009e44:	008a      	lsls	r2, r1, #2
 8009e46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009e4a:	f7f6 ff1d 	bl	8000c88 <__aeabi_uldivmod>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	4b0d      	ldr	r3, [pc, #52]	@ (8009e88 <UART_SetConfig+0x4e4>)
 8009e54:	fba3 1302 	umull	r1, r3, r3, r2
 8009e58:	095b      	lsrs	r3, r3, #5
 8009e5a:	2164      	movs	r1, #100	@ 0x64
 8009e5c:	fb01 f303 	mul.w	r3, r1, r3
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	011b      	lsls	r3, r3, #4
 8009e64:	3332      	adds	r3, #50	@ 0x32
 8009e66:	4a08      	ldr	r2, [pc, #32]	@ (8009e88 <UART_SetConfig+0x4e4>)
 8009e68:	fba2 2303 	umull	r2, r3, r2, r3
 8009e6c:	095b      	lsrs	r3, r3, #5
 8009e6e:	f003 020f 	and.w	r2, r3, #15
 8009e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4422      	add	r2, r4
 8009e7a:	609a      	str	r2, [r3, #8]
}
 8009e7c:	bf00      	nop
 8009e7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009e82:	46bd      	mov	sp, r7
 8009e84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e88:	51eb851f 	.word	0x51eb851f

08009e8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009e90:	4904      	ldr	r1, [pc, #16]	@ (8009ea4 <MX_FATFS_Init+0x18>)
 8009e92:	4805      	ldr	r0, [pc, #20]	@ (8009ea8 <MX_FATFS_Init+0x1c>)
 8009e94:	f001 fdec 	bl	800ba70 <FATFS_LinkDriver>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	4b03      	ldr	r3, [pc, #12]	@ (8009eac <MX_FATFS_Init+0x20>)
 8009e9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009ea0:	bf00      	nop
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	20000d44 	.word	0x20000d44
 8009ea8:	200000a4 	.word	0x200000a4
 8009eac:	20000d40 	.word	0x20000d40

08009eb0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009eb4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return SD_disk_initialize (pdrv);
 8009eca:	79fb      	ldrb	r3, [r7, #7]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7f7 fb0f 	bl	80014f0 <SD_disk_initialize>
 8009ed2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
     return SD_disk_status(pdrv);
 8009ee6:	79fb      	ldrb	r3, [r7, #7]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7f7 fbeb 	bl	80016c4 <SD_disk_status>
 8009eee:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3708      	adds	r7, #8
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60b9      	str	r1, [r7, #8]
 8009f00:	607a      	str	r2, [r7, #4]
 8009f02:	603b      	str	r3, [r7, #0]
 8009f04:	4603      	mov	r3, r0
 8009f06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 8009f08:	7bf8      	ldrb	r0, [r7, #15]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	68b9      	ldr	r1, [r7, #8]
 8009f10:	f7f7 fbee 	bl	80016f0 <SD_disk_read>
 8009f14:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
 8009f28:	603b      	str	r3, [r7, #0]
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 8009f2e:	7bf8      	ldrb	r0, [r7, #15]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	68b9      	ldr	r1, [r7, #8]
 8009f36:	f7f7 fc45 	bl	80017c4 <SD_disk_write>
 8009f3a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	603a      	str	r2, [r7, #0]
 8009f4e:	71fb      	strb	r3, [r7, #7]
 8009f50:	460b      	mov	r3, r1
 8009f52:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8009f54:	79b9      	ldrb	r1, [r7, #6]
 8009f56:	79fb      	ldrb	r3, [r7, #7]
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7f7 fcb6 	bl	80018cc <SD_disk_ioctl>
 8009f60:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
	...

08009f6c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	4603      	mov	r3, r0
 8009f74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009f76:	79fb      	ldrb	r3, [r7, #7]
 8009f78:	4a08      	ldr	r2, [pc, #32]	@ (8009f9c <disk_status+0x30>)
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	79fa      	ldrb	r2, [r7, #7]
 8009f84:	4905      	ldr	r1, [pc, #20]	@ (8009f9c <disk_status+0x30>)
 8009f86:	440a      	add	r2, r1
 8009f88:	7a12      	ldrb	r2, [r2, #8]
 8009f8a:	4610      	mov	r0, r2
 8009f8c:	4798      	blx	r3
 8009f8e:	4603      	mov	r3, r0
 8009f90:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	20000d70 	.word	0x20000d70

08009fa0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009fae:	79fb      	ldrb	r3, [r7, #7]
 8009fb0:	4a0e      	ldr	r2, [pc, #56]	@ (8009fec <disk_initialize+0x4c>)
 8009fb2:	5cd3      	ldrb	r3, [r2, r3]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d114      	bne.n	8009fe2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009fb8:	79fb      	ldrb	r3, [r7, #7]
 8009fba:	4a0c      	ldr	r2, [pc, #48]	@ (8009fec <disk_initialize+0x4c>)
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	79fa      	ldrb	r2, [r7, #7]
 8009fc6:	4909      	ldr	r1, [pc, #36]	@ (8009fec <disk_initialize+0x4c>)
 8009fc8:	440a      	add	r2, r1
 8009fca:	7a12      	ldrb	r2, [r2, #8]
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4798      	blx	r3
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d103      	bne.n	8009fe2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009fda:	79fb      	ldrb	r3, [r7, #7]
 8009fdc:	4a03      	ldr	r2, [pc, #12]	@ (8009fec <disk_initialize+0x4c>)
 8009fde:	2101      	movs	r1, #1
 8009fe0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3710      	adds	r7, #16
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	20000d70 	.word	0x20000d70

08009ff0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009ff0:	b590      	push	{r4, r7, lr}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60b9      	str	r1, [r7, #8]
 8009ff8:	607a      	str	r2, [r7, #4]
 8009ffa:	603b      	str	r3, [r7, #0]
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a000:	7bfb      	ldrb	r3, [r7, #15]
 800a002:	4a0a      	ldr	r2, [pc, #40]	@ (800a02c <disk_read+0x3c>)
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	689c      	ldr	r4, [r3, #8]
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
 800a00e:	4a07      	ldr	r2, [pc, #28]	@ (800a02c <disk_read+0x3c>)
 800a010:	4413      	add	r3, r2
 800a012:	7a18      	ldrb	r0, [r3, #8]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	68b9      	ldr	r1, [r7, #8]
 800a01a:	47a0      	blx	r4
 800a01c:	4603      	mov	r3, r0
 800a01e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a020:	7dfb      	ldrb	r3, [r7, #23]
}
 800a022:	4618      	mov	r0, r3
 800a024:	371c      	adds	r7, #28
 800a026:	46bd      	mov	sp, r7
 800a028:	bd90      	pop	{r4, r7, pc}
 800a02a:	bf00      	nop
 800a02c:	20000d70 	.word	0x20000d70

0800a030 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a030:	b590      	push	{r4, r7, lr}
 800a032:	b087      	sub	sp, #28
 800a034:	af00      	add	r7, sp, #0
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	607a      	str	r2, [r7, #4]
 800a03a:	603b      	str	r3, [r7, #0]
 800a03c:	4603      	mov	r3, r0
 800a03e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a040:	7bfb      	ldrb	r3, [r7, #15]
 800a042:	4a0a      	ldr	r2, [pc, #40]	@ (800a06c <disk_write+0x3c>)
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4413      	add	r3, r2
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	68dc      	ldr	r4, [r3, #12]
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
 800a04e:	4a07      	ldr	r2, [pc, #28]	@ (800a06c <disk_write+0x3c>)
 800a050:	4413      	add	r3, r2
 800a052:	7a18      	ldrb	r0, [r3, #8]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	68b9      	ldr	r1, [r7, #8]
 800a05a:	47a0      	blx	r4
 800a05c:	4603      	mov	r3, r0
 800a05e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a060:	7dfb      	ldrb	r3, [r7, #23]
}
 800a062:	4618      	mov	r0, r3
 800a064:	371c      	adds	r7, #28
 800a066:	46bd      	mov	sp, r7
 800a068:	bd90      	pop	{r4, r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20000d70 	.word	0x20000d70

0800a070 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	603a      	str	r2, [r7, #0]
 800a07a:	71fb      	strb	r3, [r7, #7]
 800a07c:	460b      	mov	r3, r1
 800a07e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a080:	79fb      	ldrb	r3, [r7, #7]
 800a082:	4a09      	ldr	r2, [pc, #36]	@ (800a0a8 <disk_ioctl+0x38>)
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	79fa      	ldrb	r2, [r7, #7]
 800a08e:	4906      	ldr	r1, [pc, #24]	@ (800a0a8 <disk_ioctl+0x38>)
 800a090:	440a      	add	r2, r1
 800a092:	7a10      	ldrb	r0, [r2, #8]
 800a094:	79b9      	ldrb	r1, [r7, #6]
 800a096:	683a      	ldr	r2, [r7, #0]
 800a098:	4798      	blx	r3
 800a09a:	4603      	mov	r3, r0
 800a09c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	20000d70 	.word	0x20000d70

0800a0ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a0bc:	89fb      	ldrh	r3, [r7, #14]
 800a0be:	021b      	lsls	r3, r3, #8
 800a0c0:	b21a      	sxth	r2, r3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	b21b      	sxth	r3, r3
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	b21b      	sxth	r3, r3
 800a0cc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a0ce:	89fb      	ldrh	r3, [r7, #14]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	3303      	adds	r3, #3
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	021b      	lsls	r3, r3, #8
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	3202      	adds	r2, #2
 800a0f4:	7812      	ldrb	r2, [r2, #0]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	021b      	lsls	r3, r3, #8
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	3201      	adds	r2, #1
 800a102:	7812      	ldrb	r2, [r2, #0]
 800a104:	4313      	orrs	r3, r2
 800a106:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	021b      	lsls	r3, r3, #8
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	7812      	ldrb	r2, [r2, #0]
 800a110:	4313      	orrs	r3, r2
 800a112:	60fb      	str	r3, [r7, #12]
	return rv;
 800a114:	68fb      	ldr	r3, [r7, #12]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a122:	b480      	push	{r7}
 800a124:	b083      	sub	sp, #12
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
 800a12a:	460b      	mov	r3, r1
 800a12c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	607a      	str	r2, [r7, #4]
 800a134:	887a      	ldrh	r2, [r7, #2]
 800a136:	b2d2      	uxtb	r2, r2
 800a138:	701a      	strb	r2, [r3, #0]
 800a13a:	887b      	ldrh	r3, [r7, #2]
 800a13c:	0a1b      	lsrs	r3, r3, #8
 800a13e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	1c5a      	adds	r2, r3, #1
 800a144:	607a      	str	r2, [r7, #4]
 800a146:	887a      	ldrh	r2, [r7, #2]
 800a148:	b2d2      	uxtb	r2, r2
 800a14a:	701a      	strb	r2, [r3, #0]
}
 800a14c:	bf00      	nop
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr

0800a158 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	1c5a      	adds	r2, r3, #1
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	b2d2      	uxtb	r2, r2
 800a16c:	701a      	strb	r2, [r3, #0]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	0a1b      	lsrs	r3, r3, #8
 800a172:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	1c5a      	adds	r2, r3, #1
 800a178:	607a      	str	r2, [r7, #4]
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	b2d2      	uxtb	r2, r2
 800a17e:	701a      	strb	r2, [r3, #0]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	0a1b      	lsrs	r3, r3, #8
 800a184:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	1c5a      	adds	r2, r3, #1
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	b2d2      	uxtb	r2, r2
 800a190:	701a      	strb	r2, [r3, #0]
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	0a1b      	lsrs	r3, r3, #8
 800a196:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	1c5a      	adds	r2, r3, #1
 800a19c:	607a      	str	r2, [r7, #4]
 800a19e:	683a      	ldr	r2, [r7, #0]
 800a1a0:	b2d2      	uxtb	r2, r2
 800a1a2:	701a      	strb	r2, [r3, #0]
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a1b0:	b480      	push	{r7}
 800a1b2:	b087      	sub	sp, #28
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00d      	beq.n	800a1e6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	1c53      	adds	r3, r2, #1
 800a1ce:	613b      	str	r3, [r7, #16]
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	1c59      	adds	r1, r3, #1
 800a1d4:	6179      	str	r1, [r7, #20]
 800a1d6:	7812      	ldrb	r2, [r2, #0]
 800a1d8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	607b      	str	r3, [r7, #4]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1f1      	bne.n	800a1ca <mem_cpy+0x1a>
	}
}
 800a1e6:	bf00      	nop
 800a1e8:	371c      	adds	r7, #28
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a1f2:	b480      	push	{r7}
 800a1f4:	b087      	sub	sp, #28
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	60f8      	str	r0, [r7, #12]
 800a1fa:	60b9      	str	r1, [r7, #8]
 800a1fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	1c5a      	adds	r2, r3, #1
 800a206:	617a      	str	r2, [r7, #20]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	b2d2      	uxtb	r2, r2
 800a20c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	3b01      	subs	r3, #1
 800a212:	607b      	str	r3, [r7, #4]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1f3      	bne.n	800a202 <mem_set+0x10>
}
 800a21a:	bf00      	nop
 800a21c:	bf00      	nop
 800a21e:	371c      	adds	r7, #28
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a228:	b480      	push	{r7}
 800a22a:	b089      	sub	sp, #36	@ 0x24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	61fb      	str	r3, [r7, #28]
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	1c5a      	adds	r2, r3, #1
 800a244:	61fa      	str	r2, [r7, #28]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	4619      	mov	r1, r3
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	1c5a      	adds	r2, r3, #1
 800a24e:	61ba      	str	r2, [r7, #24]
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	1acb      	subs	r3, r1, r3
 800a254:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	3b01      	subs	r3, #1
 800a25a:	607b      	str	r3, [r7, #4]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d002      	beq.n	800a268 <mem_cmp+0x40>
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d0eb      	beq.n	800a240 <mem_cmp+0x18>

	return r;
 800a268:	697b      	ldr	r3, [r7, #20]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3724      	adds	r7, #36	@ 0x24
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a276:	b480      	push	{r7}
 800a278:	b083      	sub	sp, #12
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a280:	e002      	b.n	800a288 <chk_chr+0x12>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	3301      	adds	r3, #1
 800a286:	607b      	str	r3, [r7, #4]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d005      	beq.n	800a29c <chk_chr+0x26>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	461a      	mov	r2, r3
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	4293      	cmp	r3, r2
 800a29a:	d1f2      	bne.n	800a282 <chk_chr+0xc>
	return *str;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	781b      	ldrb	r3, [r3, #0]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	370c      	adds	r7, #12
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d009      	beq.n	800a2ce <lock_fs+0x22>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f001 fc11 	bl	800bae6 <ff_req_grant>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d001      	beq.n	800a2ce <lock_fs+0x22>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e000      	b.n	800a2d0 <lock_fs+0x24>
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00d      	beq.n	800a306 <unlock_fs+0x2e>
 800a2ea:	78fb      	ldrb	r3, [r7, #3]
 800a2ec:	2b0c      	cmp	r3, #12
 800a2ee:	d00a      	beq.n	800a306 <unlock_fs+0x2e>
 800a2f0:	78fb      	ldrb	r3, [r7, #3]
 800a2f2:	2b0b      	cmp	r3, #11
 800a2f4:	d007      	beq.n	800a306 <unlock_fs+0x2e>
 800a2f6:	78fb      	ldrb	r3, [r7, #3]
 800a2f8:	2b0f      	cmp	r3, #15
 800a2fa:	d004      	beq.n	800a306 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	4618      	mov	r0, r3
 800a302:	f001 fc05 	bl	800bb10 <ff_rel_grant>
	}
}
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a310:	b480      	push	{r7}
 800a312:	b085      	sub	sp, #20
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a318:	2300      	movs	r3, #0
 800a31a:	60fb      	str	r3, [r7, #12]
 800a31c:	e010      	b.n	800a340 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a31e:	4a0d      	ldr	r2, [pc, #52]	@ (800a354 <clear_lock+0x44>)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	011b      	lsls	r3, r3, #4
 800a324:	4413      	add	r3, r2
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d105      	bne.n	800a33a <clear_lock+0x2a>
 800a32e:	4a09      	ldr	r2, [pc, #36]	@ (800a354 <clear_lock+0x44>)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	011b      	lsls	r3, r3, #4
 800a334:	4413      	add	r3, r2
 800a336:	2200      	movs	r2, #0
 800a338:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3301      	adds	r3, #1
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d9eb      	bls.n	800a31e <clear_lock+0xe>
	}
}
 800a346:	bf00      	nop
 800a348:	bf00      	nop
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	20000d50 	.word	0x20000d50

0800a358 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	78db      	ldrb	r3, [r3, #3]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d034      	beq.n	800a3d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a370:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	7858      	ldrb	r0, [r3, #1]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a37c:	2301      	movs	r3, #1
 800a37e:	697a      	ldr	r2, [r7, #20]
 800a380:	f7ff fe56 	bl	800a030 <disk_write>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	73fb      	strb	r3, [r7, #15]
 800a38e:	e022      	b.n	800a3d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	1ad2      	subs	r2, r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	69db      	ldr	r3, [r3, #28]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d217      	bcs.n	800a3d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	789b      	ldrb	r3, [r3, #2]
 800a3aa:	613b      	str	r3, [r7, #16]
 800a3ac:	e010      	b.n	800a3d0 <sync_window+0x78>
					wsect += fs->fsize;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	69db      	ldr	r3, [r3, #28]
 800a3b2:	697a      	ldr	r2, [r7, #20]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	7858      	ldrb	r0, [r3, #1]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	697a      	ldr	r2, [r7, #20]
 800a3c6:	f7ff fe33 	bl	800a030 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	613b      	str	r3, [r7, #16]
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	2b01      	cmp	r3, #1
 800a3d4:	d8eb      	bhi.n	800a3ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3f2:	683a      	ldr	r2, [r7, #0]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d01b      	beq.n	800a430 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7ff ffad 	bl	800a358 <sync_window>
 800a3fe:	4603      	mov	r3, r0
 800a400:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a402:	7bfb      	ldrb	r3, [r7, #15]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d113      	bne.n	800a430 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	7858      	ldrb	r0, [r3, #1]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a412:	2301      	movs	r3, #1
 800a414:	683a      	ldr	r2, [r7, #0]
 800a416:	f7ff fdeb 	bl	8009ff0 <disk_read>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d004      	beq.n	800a42a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a420:	f04f 33ff 	mov.w	r3, #4294967295
 800a424:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a426:	2301      	movs	r3, #1
 800a428:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800a430:	7bfb      	ldrb	r3, [r7, #15]
}
 800a432:	4618      	mov	r0, r3
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
	...

0800a43c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7ff ff87 	bl	800a358 <sync_window>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d158      	bne.n	800a506 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	2b03      	cmp	r3, #3
 800a45a:	d148      	bne.n	800a4ee <sync_fs+0xb2>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	791b      	ldrb	r3, [r3, #4]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d144      	bne.n	800a4ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	3334      	adds	r3, #52	@ 0x34
 800a468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a46c:	2100      	movs	r1, #0
 800a46e:	4618      	mov	r0, r3
 800a470:	f7ff febf 	bl	800a1f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	3334      	adds	r3, #52	@ 0x34
 800a478:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a47c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff fe4e 	bl	800a122 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	3334      	adds	r3, #52	@ 0x34
 800a48a:	4921      	ldr	r1, [pc, #132]	@ (800a510 <sync_fs+0xd4>)
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7ff fe63 	bl	800a158 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	3334      	adds	r3, #52	@ 0x34
 800a496:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a49a:	491e      	ldr	r1, [pc, #120]	@ (800a514 <sync_fs+0xd8>)
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7ff fe5b 	bl	800a158 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	3334      	adds	r3, #52	@ 0x34
 800a4a6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	f7ff fe51 	bl	800a158 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	3334      	adds	r3, #52	@ 0x34
 800a4ba:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	4610      	mov	r0, r2
 800a4c6:	f7ff fe47 	bl	800a158 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a1b      	ldr	r3, [r3, #32]
 800a4ce:	1c5a      	adds	r2, r3, #1
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	7858      	ldrb	r0, [r3, #1]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	f7ff fda4 	bl	800a030 <disk_write>
			fs->fsi_flag = 0;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	785b      	ldrb	r3, [r3, #1]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	2100      	movs	r1, #0
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff fdba 	bl	800a070 <disk_ioctl>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <sync_fs+0xca>
 800a502:	2301      	movs	r3, #1
 800a504:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a506:	7bfb      	ldrb	r3, [r7, #15]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	41615252 	.word	0x41615252
 800a514:	61417272 	.word	0x61417272

0800a518 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	3b02      	subs	r3, #2
 800a526:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	3b02      	subs	r3, #2
 800a52e:	683a      	ldr	r2, [r7, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d301      	bcc.n	800a538 <clust2sect+0x20>
 800a534:	2300      	movs	r3, #0
 800a536:	e008      	b.n	800a54a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	895b      	ldrh	r3, [r3, #10]
 800a53c:	461a      	mov	r2, r3
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	fb03 f202 	mul.w	r2, r3, r2
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a548:	4413      	add	r3, r2
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b086      	sub	sp, #24
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	2b01      	cmp	r3, #1
 800a56a:	d904      	bls.n	800a576 <get_fat+0x20>
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	699b      	ldr	r3, [r3, #24]
 800a570:	683a      	ldr	r2, [r7, #0]
 800a572:	429a      	cmp	r2, r3
 800a574:	d302      	bcc.n	800a57c <get_fat+0x26>
		val = 1;	/* Internal error */
 800a576:	2301      	movs	r3, #1
 800a578:	617b      	str	r3, [r7, #20]
 800a57a:	e08e      	b.n	800a69a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a57c:	f04f 33ff 	mov.w	r3, #4294967295
 800a580:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	2b03      	cmp	r3, #3
 800a588:	d061      	beq.n	800a64e <get_fat+0xf8>
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	dc7b      	bgt.n	800a686 <get_fat+0x130>
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d002      	beq.n	800a598 <get_fat+0x42>
 800a592:	2b02      	cmp	r3, #2
 800a594:	d041      	beq.n	800a61a <get_fat+0xc4>
 800a596:	e076      	b.n	800a686 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	60fb      	str	r3, [r7, #12]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	085b      	lsrs	r3, r3, #1
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	0a5b      	lsrs	r3, r3, #9
 800a5ae:	4413      	add	r3, r2
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6938      	ldr	r0, [r7, #16]
 800a5b4:	f7ff ff14 	bl	800a3e0 <move_window>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d166      	bne.n	800a68c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	1c5a      	adds	r2, r3, #1
 800a5c2:	60fa      	str	r2, [r7, #12]
 800a5c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a5d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	0a5b      	lsrs	r3, r3, #9
 800a5da:	4413      	add	r3, r2
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6938      	ldr	r0, [r7, #16]
 800a5e0:	f7ff fefe 	bl	800a3e0 <move_window>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d152      	bne.n	800a690 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a5f8:	021b      	lsls	r3, r3, #8
 800a5fa:	68ba      	ldr	r2, [r7, #8]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	2b00      	cmp	r3, #0
 800a608:	d002      	beq.n	800a610 <get_fat+0xba>
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	091b      	lsrs	r3, r3, #4
 800a60e:	e002      	b.n	800a616 <get_fat+0xc0>
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a616:	617b      	str	r3, [r7, #20]
			break;
 800a618:	e03f      	b.n	800a69a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	0a1b      	lsrs	r3, r3, #8
 800a622:	4413      	add	r3, r2
 800a624:	4619      	mov	r1, r3
 800a626:	6938      	ldr	r0, [r7, #16]
 800a628:	f7ff feda 	bl	800a3e0 <move_window>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d130      	bne.n	800a694 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	005b      	lsls	r3, r3, #1
 800a63c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a640:	4413      	add	r3, r2
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff fd32 	bl	800a0ac <ld_word>
 800a648:	4603      	mov	r3, r0
 800a64a:	617b      	str	r3, [r7, #20]
			break;
 800a64c:	e025      	b.n	800a69a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	09db      	lsrs	r3, r3, #7
 800a656:	4413      	add	r3, r2
 800a658:	4619      	mov	r1, r3
 800a65a:	6938      	ldr	r0, [r7, #16]
 800a65c:	f7ff fec0 	bl	800a3e0 <move_window>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d118      	bne.n	800a698 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a674:	4413      	add	r3, r2
 800a676:	4618      	mov	r0, r3
 800a678:	f7ff fd30 	bl	800a0dc <ld_dword>
 800a67c:	4603      	mov	r3, r0
 800a67e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a682:	617b      	str	r3, [r7, #20]
			break;
 800a684:	e009      	b.n	800a69a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a686:	2301      	movs	r3, #1
 800a688:	617b      	str	r3, [r7, #20]
 800a68a:	e006      	b.n	800a69a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a68c:	bf00      	nop
 800a68e:	e004      	b.n	800a69a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a690:	bf00      	nop
 800a692:	e002      	b.n	800a69a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a694:	bf00      	nop
 800a696:	e000      	b.n	800a69a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a698:	bf00      	nop
		}
	}

	return val;
 800a69a:	697b      	ldr	r3, [r7, #20]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3718      	adds	r7, #24
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a6a4:	b590      	push	{r4, r7, lr}
 800a6a6:	b089      	sub	sp, #36	@ 0x24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	f240 80d9 	bls.w	800a86e <put_fat+0x1ca>
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	f080 80d3 	bcs.w	800a86e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	2b03      	cmp	r3, #3
 800a6ce:	f000 8096 	beq.w	800a7fe <put_fat+0x15a>
 800a6d2:	2b03      	cmp	r3, #3
 800a6d4:	f300 80cb 	bgt.w	800a86e <put_fat+0x1ca>
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d002      	beq.n	800a6e2 <put_fat+0x3e>
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d06e      	beq.n	800a7be <put_fat+0x11a>
 800a6e0:	e0c5      	b.n	800a86e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	61bb      	str	r3, [r7, #24]
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	085b      	lsrs	r3, r3, #1
 800a6ea:	69ba      	ldr	r2, [r7, #24]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	0a5b      	lsrs	r3, r3, #9
 800a6f8:	4413      	add	r3, r2
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f7ff fe6f 	bl	800a3e0 <move_window>
 800a702:	4603      	mov	r3, r0
 800a704:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a706:	7ffb      	ldrb	r3, [r7, #31]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f040 80a9 	bne.w	800a860 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a714:	69bb      	ldr	r3, [r7, #24]
 800a716:	1c59      	adds	r1, r3, #1
 800a718:	61b9      	str	r1, [r7, #24]
 800a71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a71e:	4413      	add	r3, r2
 800a720:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	f003 0301 	and.w	r3, r3, #1
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00d      	beq.n	800a748 <put_fat+0xa4>
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	b25b      	sxtb	r3, r3
 800a732:	f003 030f 	and.w	r3, r3, #15
 800a736:	b25a      	sxtb	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	011b      	lsls	r3, r3, #4
 800a73e:	b25b      	sxtb	r3, r3
 800a740:	4313      	orrs	r3, r2
 800a742:	b25b      	sxtb	r3, r3
 800a744:	b2db      	uxtb	r3, r3
 800a746:	e001      	b.n	800a74c <put_fat+0xa8>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2201      	movs	r2, #1
 800a754:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	0a5b      	lsrs	r3, r3, #9
 800a75e:	4413      	add	r3, r2
 800a760:	4619      	mov	r1, r3
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f7ff fe3c 	bl	800a3e0 <move_window>
 800a768:	4603      	mov	r3, r0
 800a76a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a76c:	7ffb      	ldrb	r3, [r7, #31]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d178      	bne.n	800a864 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a77e:	4413      	add	r3, r2
 800a780:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	f003 0301 	and.w	r3, r3, #1
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d003      	beq.n	800a794 <put_fat+0xf0>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	091b      	lsrs	r3, r3, #4
 800a790:	b2db      	uxtb	r3, r3
 800a792:	e00e      	b.n	800a7b2 <put_fat+0x10e>
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	b25b      	sxtb	r3, r3
 800a79a:	f023 030f 	bic.w	r3, r3, #15
 800a79e:	b25a      	sxtb	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	0a1b      	lsrs	r3, r3, #8
 800a7a4:	b25b      	sxtb	r3, r3
 800a7a6:	f003 030f 	and.w	r3, r3, #15
 800a7aa:	b25b      	sxtb	r3, r3
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	b25b      	sxtb	r3, r3
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	70da      	strb	r2, [r3, #3]
			break;
 800a7bc:	e057      	b.n	800a86e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	0a1b      	lsrs	r3, r3, #8
 800a7c6:	4413      	add	r3, r2
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f7ff fe08 	bl	800a3e0 <move_window>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7d4:	7ffb      	ldrb	r3, [r7, #31]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d146      	bne.n	800a868 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	005b      	lsls	r3, r3, #1
 800a7e4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a7e8:	4413      	add	r3, r2
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	b292      	uxth	r2, r2
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff fc96 	bl	800a122 <st_word>
			fs->wflag = 1;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	70da      	strb	r2, [r3, #3]
			break;
 800a7fc:	e037      	b.n	800a86e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	09db      	lsrs	r3, r3, #7
 800a806:	4413      	add	r3, r2
 800a808:	4619      	mov	r1, r3
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f7ff fde8 	bl	800a3e0 <move_window>
 800a810:	4603      	mov	r3, r0
 800a812:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a814:	7ffb      	ldrb	r3, [r7, #31]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d128      	bne.n	800a86c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a82e:	4413      	add	r3, r2
 800a830:	4618      	mov	r0, r3
 800a832:	f7ff fc53 	bl	800a0dc <ld_dword>
 800a836:	4603      	mov	r3, r0
 800a838:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a83c:	4323      	orrs	r3, r4
 800a83e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a84e:	4413      	add	r3, r2
 800a850:	6879      	ldr	r1, [r7, #4]
 800a852:	4618      	mov	r0, r3
 800a854:	f7ff fc80 	bl	800a158 <st_dword>
			fs->wflag = 1;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2201      	movs	r2, #1
 800a85c:	70da      	strb	r2, [r3, #3]
			break;
 800a85e:	e006      	b.n	800a86e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a860:	bf00      	nop
 800a862:	e004      	b.n	800a86e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a864:	bf00      	nop
 800a866:	e002      	b.n	800a86e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a868:	bf00      	nop
 800a86a:	e000      	b.n	800a86e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a86c:	bf00      	nop
		}
	}
	return res;
 800a86e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3724      	adds	r7, #36	@ 0x24
 800a874:	46bd      	mov	sp, r7
 800a876:	bd90      	pop	{r4, r7, pc}

0800a878 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b088      	sub	sp, #32
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d904      	bls.n	800a89e <remove_chain+0x26>
 800a894:	69bb      	ldr	r3, [r7, #24]
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d301      	bcc.n	800a8a2 <remove_chain+0x2a>
 800a89e:	2302      	movs	r3, #2
 800a8a0:	e04b      	b.n	800a93a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d00c      	beq.n	800a8c2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ac:	6879      	ldr	r1, [r7, #4]
 800a8ae:	69b8      	ldr	r0, [r7, #24]
 800a8b0:	f7ff fef8 	bl	800a6a4 <put_fat>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a8b8:	7ffb      	ldrb	r3, [r7, #31]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <remove_chain+0x4a>
 800a8be:	7ffb      	ldrb	r3, [r7, #31]
 800a8c0:	e03b      	b.n	800a93a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a8c2:	68b9      	ldr	r1, [r7, #8]
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f7ff fe46 	bl	800a556 <get_fat>
 800a8ca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d031      	beq.n	800a936 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d101      	bne.n	800a8dc <remove_chain+0x64>
 800a8d8:	2302      	movs	r3, #2
 800a8da:	e02e      	b.n	800a93a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e2:	d101      	bne.n	800a8e8 <remove_chain+0x70>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e028      	b.n	800a93a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	68b9      	ldr	r1, [r7, #8]
 800a8ec:	69b8      	ldr	r0, [r7, #24]
 800a8ee:	f7ff fed9 	bl	800a6a4 <put_fat>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a8f6:	7ffb      	ldrb	r3, [r7, #31]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d001      	beq.n	800a900 <remove_chain+0x88>
 800a8fc:	7ffb      	ldrb	r3, [r7, #31]
 800a8fe:	e01c      	b.n	800a93a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	695a      	ldr	r2, [r3, #20]
 800a904:	69bb      	ldr	r3, [r7, #24]
 800a906:	699b      	ldr	r3, [r3, #24]
 800a908:	3b02      	subs	r3, #2
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d20b      	bcs.n	800a926 <remove_chain+0xae>
			fs->free_clst++;
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	695b      	ldr	r3, [r3, #20]
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	791b      	ldrb	r3, [r3, #4]
 800a91c:	f043 0301 	orr.w	r3, r3, #1
 800a920:	b2da      	uxtb	r2, r3
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	429a      	cmp	r2, r3
 800a932:	d3c6      	bcc.n	800a8c2 <remove_chain+0x4a>
 800a934:	e000      	b.n	800a938 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a936:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3720      	adds	r7, #32
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b088      	sub	sp, #32
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10d      	bne.n	800a974 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d004      	beq.n	800a96e <create_chain+0x2c>
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d31b      	bcc.n	800a9a6 <create_chain+0x64>
 800a96e:	2301      	movs	r3, #1
 800a970:	61bb      	str	r3, [r7, #24]
 800a972:	e018      	b.n	800a9a6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f7ff fded 	bl	800a556 <get_fat>
 800a97c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d801      	bhi.n	800a988 <create_chain+0x46>
 800a984:	2301      	movs	r3, #1
 800a986:	e070      	b.n	800aa6a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98e:	d101      	bne.n	800a994 <create_chain+0x52>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	e06a      	b.n	800aa6a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	699b      	ldr	r3, [r3, #24]
 800a998:	68fa      	ldr	r2, [r7, #12]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d201      	bcs.n	800a9a2 <create_chain+0x60>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	e063      	b.n	800aa6a <create_chain+0x128>
		scl = clst;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	69fa      	ldr	r2, [r7, #28]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d307      	bcc.n	800a9ca <create_chain+0x88>
				ncl = 2;
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a9be:	69fa      	ldr	r2, [r7, #28]
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d901      	bls.n	800a9ca <create_chain+0x88>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	e04f      	b.n	800aa6a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a9ca:	69f9      	ldr	r1, [r7, #28]
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f7ff fdc2 	bl	800a556 <get_fat>
 800a9d2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00e      	beq.n	800a9f8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d003      	beq.n	800a9e8 <create_chain+0xa6>
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e6:	d101      	bne.n	800a9ec <create_chain+0xaa>
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	e03e      	b.n	800aa6a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a9ec:	69fa      	ldr	r2, [r7, #28]
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d1da      	bne.n	800a9aa <create_chain+0x68>
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	e038      	b.n	800aa6a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a9f8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a9fe:	69f9      	ldr	r1, [r7, #28]
 800aa00:	6938      	ldr	r0, [r7, #16]
 800aa02:	f7ff fe4f 	bl	800a6a4 <put_fat>
 800aa06:	4603      	mov	r3, r0
 800aa08:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aa0a:	7dfb      	ldrb	r3, [r7, #23]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d109      	bne.n	800aa24 <create_chain+0xe2>
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d006      	beq.n	800aa24 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800aa16:	69fa      	ldr	r2, [r7, #28]
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	6938      	ldr	r0, [r7, #16]
 800aa1c:	f7ff fe42 	bl	800a6a4 <put_fat>
 800aa20:	4603      	mov	r3, r0
 800aa22:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800aa24:	7dfb      	ldrb	r3, [r7, #23]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d116      	bne.n	800aa58 <create_chain+0x116>
		fs->last_clst = ncl;
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	69fa      	ldr	r2, [r7, #28]
 800aa2e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	695a      	ldr	r2, [r3, #20]
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	3b02      	subs	r3, #2
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d804      	bhi.n	800aa48 <create_chain+0x106>
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	695b      	ldr	r3, [r3, #20]
 800aa42:	1e5a      	subs	r2, r3, #1
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	791b      	ldrb	r3, [r3, #4]
 800aa4c:	f043 0301 	orr.w	r3, r3, #1
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	711a      	strb	r2, [r3, #4]
 800aa56:	e007      	b.n	800aa68 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800aa58:	7dfb      	ldrb	r3, [r7, #23]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d102      	bne.n	800aa64 <create_chain+0x122>
 800aa5e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa62:	e000      	b.n	800aa66 <create_chain+0x124>
 800aa64:	2301      	movs	r3, #1
 800aa66:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800aa68:	69fb      	ldr	r3, [r7, #28]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3720      	adds	r7, #32
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b086      	sub	sp, #24
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
 800aa7a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa88:	d204      	bcs.n	800aa94 <dir_sdi+0x22>
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	f003 031f 	and.w	r3, r3, #31
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d001      	beq.n	800aa98 <dir_sdi+0x26>
		return FR_INT_ERR;
 800aa94:	2302      	movs	r3, #2
 800aa96:	e063      	b.n	800ab60 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	683a      	ldr	r2, [r7, #0]
 800aa9c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d106      	bne.n	800aab8 <dir_sdi+0x46>
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d902      	bls.n	800aab8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aab6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10c      	bne.n	800aad8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	095b      	lsrs	r3, r3, #5
 800aac2:	693a      	ldr	r2, [r7, #16]
 800aac4:	8912      	ldrh	r2, [r2, #8]
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d301      	bcc.n	800aace <dir_sdi+0x5c>
 800aaca:	2302      	movs	r3, #2
 800aacc:	e048      	b.n	800ab60 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	61da      	str	r2, [r3, #28]
 800aad6:	e029      	b.n	800ab2c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	895b      	ldrh	r3, [r3, #10]
 800aadc:	025b      	lsls	r3, r3, #9
 800aade:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aae0:	e019      	b.n	800ab16 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6979      	ldr	r1, [r7, #20]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7ff fd35 	bl	800a556 <get_fat>
 800aaec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf4:	d101      	bne.n	800aafa <dir_sdi+0x88>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e032      	b.n	800ab60 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d904      	bls.n	800ab0a <dir_sdi+0x98>
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d301      	bcc.n	800ab0e <dir_sdi+0x9c>
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	e028      	b.n	800ab60 <dir_sdi+0xee>
			ofs -= csz;
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ab16:	683a      	ldr	r2, [r7, #0]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d2e1      	bcs.n	800aae2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ab1e:	6979      	ldr	r1, [r7, #20]
 800ab20:	6938      	ldr	r0, [r7, #16]
 800ab22:	f7ff fcf9 	bl	800a518 <clust2sect>
 800ab26:	4602      	mov	r2, r0
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	697a      	ldr	r2, [r7, #20]
 800ab30:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	69db      	ldr	r3, [r3, #28]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d101      	bne.n	800ab3e <dir_sdi+0xcc>
 800ab3a:	2302      	movs	r3, #2
 800ab3c:	e010      	b.n	800ab60 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	69da      	ldr	r2, [r3, #28]
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	0a5b      	lsrs	r3, r3, #9
 800ab46:	441a      	add	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab58:	441a      	add	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3718      	adds	r7, #24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	3320      	adds	r3, #32
 800ab7e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	69db      	ldr	r3, [r3, #28]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d003      	beq.n	800ab90 <dir_next+0x28>
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab8e:	d301      	bcc.n	800ab94 <dir_next+0x2c>
 800ab90:	2304      	movs	r3, #4
 800ab92:	e0aa      	b.n	800acea <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f040 8098 	bne.w	800acd0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	69db      	ldr	r3, [r3, #28]
 800aba4:	1c5a      	adds	r2, r3, #1
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10b      	bne.n	800abca <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	095b      	lsrs	r3, r3, #5
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	8912      	ldrh	r2, [r2, #8]
 800abba:	4293      	cmp	r3, r2
 800abbc:	f0c0 8088 	bcc.w	800acd0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	61da      	str	r2, [r3, #28]
 800abc6:	2304      	movs	r3, #4
 800abc8:	e08f      	b.n	800acea <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	0a5b      	lsrs	r3, r3, #9
 800abce:	68fa      	ldr	r2, [r7, #12]
 800abd0:	8952      	ldrh	r2, [r2, #10]
 800abd2:	3a01      	subs	r2, #1
 800abd4:	4013      	ands	r3, r2
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d17a      	bne.n	800acd0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	4619      	mov	r1, r3
 800abe2:	4610      	mov	r0, r2
 800abe4:	f7ff fcb7 	bl	800a556 <get_fat>
 800abe8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d801      	bhi.n	800abf4 <dir_next+0x8c>
 800abf0:	2302      	movs	r3, #2
 800abf2:	e07a      	b.n	800acea <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abfa:	d101      	bne.n	800ac00 <dir_next+0x98>
 800abfc:	2301      	movs	r3, #1
 800abfe:	e074      	b.n	800acea <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d358      	bcc.n	800acbc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d104      	bne.n	800ac1a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	61da      	str	r2, [r3, #28]
 800ac16:	2304      	movs	r3, #4
 800ac18:	e067      	b.n	800acea <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	699b      	ldr	r3, [r3, #24]
 800ac20:	4619      	mov	r1, r3
 800ac22:	4610      	mov	r0, r2
 800ac24:	f7ff fe8d 	bl	800a942 <create_chain>
 800ac28:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d101      	bne.n	800ac34 <dir_next+0xcc>
 800ac30:	2307      	movs	r3, #7
 800ac32:	e05a      	b.n	800acea <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d101      	bne.n	800ac3e <dir_next+0xd6>
 800ac3a:	2302      	movs	r3, #2
 800ac3c:	e055      	b.n	800acea <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac44:	d101      	bne.n	800ac4a <dir_next+0xe2>
 800ac46:	2301      	movs	r3, #1
 800ac48:	e04f      	b.n	800acea <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f7ff fb84 	bl	800a358 <sync_window>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d001      	beq.n	800ac5a <dir_next+0xf2>
 800ac56:	2301      	movs	r3, #1
 800ac58:	e047      	b.n	800acea <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	3334      	adds	r3, #52	@ 0x34
 800ac5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac62:	2100      	movs	r1, #0
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7ff fac4 	bl	800a1f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	613b      	str	r3, [r7, #16]
 800ac6e:	6979      	ldr	r1, [r7, #20]
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f7ff fc51 	bl	800a518 <clust2sect>
 800ac76:	4602      	mov	r2, r0
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac7c:	e012      	b.n	800aca4 <dir_next+0x13c>
						fs->wflag = 1;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2201      	movs	r2, #1
 800ac82:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ac84:	68f8      	ldr	r0, [r7, #12]
 800ac86:	f7ff fb67 	bl	800a358 <sync_window>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d001      	beq.n	800ac94 <dir_next+0x12c>
 800ac90:	2301      	movs	r3, #1
 800ac92:	e02a      	b.n	800acea <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	3301      	adds	r3, #1
 800ac98:	613b      	str	r3, [r7, #16]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac9e:	1c5a      	adds	r2, r3, #1
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	631a      	str	r2, [r3, #48]	@ 0x30
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	895b      	ldrh	r3, [r3, #10]
 800aca8:	461a      	mov	r2, r3
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	4293      	cmp	r3, r2
 800acae:	d3e6      	bcc.n	800ac7e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	1ad2      	subs	r2, r2, r3
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800acc2:	6979      	ldr	r1, [r7, #20]
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f7ff fc27 	bl	800a518 <clust2sect>
 800acca:	4602      	mov	r2, r0
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ace2:	441a      	add	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b086      	sub	sp, #24
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ad02:	2100      	movs	r1, #0
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff feb4 	bl	800aa72 <dir_sdi>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ad0e:	7dfb      	ldrb	r3, [r7, #23]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d12b      	bne.n	800ad6c <dir_alloc+0x7a>
		n = 0;
 800ad14:	2300      	movs	r3, #0
 800ad16:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	69db      	ldr	r3, [r3, #28]
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f7ff fb5e 	bl	800a3e0 <move_window>
 800ad24:	4603      	mov	r3, r0
 800ad26:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ad28:	7dfb      	ldrb	r3, [r7, #23]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d11d      	bne.n	800ad6a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	2be5      	cmp	r3, #229	@ 0xe5
 800ad36:	d004      	beq.n	800ad42 <dir_alloc+0x50>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d107      	bne.n	800ad52 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	3301      	adds	r3, #1
 800ad46:	613b      	str	r3, [r7, #16]
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d102      	bne.n	800ad56 <dir_alloc+0x64>
 800ad50:	e00c      	b.n	800ad6c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ad52:	2300      	movs	r3, #0
 800ad54:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ad56:	2101      	movs	r1, #1
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7ff ff05 	bl	800ab68 <dir_next>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d0d7      	beq.n	800ad18 <dir_alloc+0x26>
 800ad68:	e000      	b.n	800ad6c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ad6a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
 800ad6e:	2b04      	cmp	r3, #4
 800ad70:	d101      	bne.n	800ad76 <dir_alloc+0x84>
 800ad72:	2307      	movs	r3, #7
 800ad74:	75fb      	strb	r3, [r7, #23]
	return res;
 800ad76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3718      	adds	r7, #24
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	331a      	adds	r3, #26
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7ff f98c 	bl	800a0ac <ld_word>
 800ad94:	4603      	mov	r3, r0
 800ad96:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	2b03      	cmp	r3, #3
 800ad9e:	d109      	bne.n	800adb4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	3314      	adds	r3, #20
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7ff f981 	bl	800a0ac <ld_word>
 800adaa:	4603      	mov	r3, r0
 800adac:	041b      	lsls	r3, r3, #16
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800adb4:	68fb      	ldr	r3, [r7, #12]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b084      	sub	sp, #16
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	60f8      	str	r0, [r7, #12]
 800adc6:	60b9      	str	r1, [r7, #8]
 800adc8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	331a      	adds	r3, #26
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	b292      	uxth	r2, r2
 800add2:	4611      	mov	r1, r2
 800add4:	4618      	mov	r0, r3
 800add6:	f7ff f9a4 	bl	800a122 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d109      	bne.n	800adf6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	f103 0214 	add.w	r2, r3, #20
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	0c1b      	lsrs	r3, r3, #16
 800adec:	b29b      	uxth	r3, r3
 800adee:	4619      	mov	r1, r3
 800adf0:	4610      	mov	r0, r2
 800adf2:	f7ff f996 	bl	800a122 <st_word>
	}
}
 800adf6:	bf00      	nop
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b086      	sub	sp, #24
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7ff fe2f 	bl	800aa72 <dir_sdi>
 800ae14:	4603      	mov	r3, r0
 800ae16:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ae18:	7dfb      	ldrb	r3, [r7, #23]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d001      	beq.n	800ae22 <dir_find+0x24>
 800ae1e:	7dfb      	ldrb	r3, [r7, #23]
 800ae20:	e03e      	b.n	800aea0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	69db      	ldr	r3, [r3, #28]
 800ae26:	4619      	mov	r1, r3
 800ae28:	6938      	ldr	r0, [r7, #16]
 800ae2a:	f7ff fad9 	bl	800a3e0 <move_window>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d12f      	bne.n	800ae98 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a1b      	ldr	r3, [r3, #32]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d102      	bne.n	800ae4c <dir_find+0x4e>
 800ae46:	2304      	movs	r3, #4
 800ae48:	75fb      	strb	r3, [r7, #23]
 800ae4a:	e028      	b.n	800ae9e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a1b      	ldr	r3, [r3, #32]
 800ae50:	330b      	adds	r3, #11
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae58:	b2da      	uxtb	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6a1b      	ldr	r3, [r3, #32]
 800ae62:	330b      	adds	r3, #11
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	f003 0308 	and.w	r3, r3, #8
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10a      	bne.n	800ae84 <dir_find+0x86>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a18      	ldr	r0, [r3, #32]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	3324      	adds	r3, #36	@ 0x24
 800ae76:	220b      	movs	r2, #11
 800ae78:	4619      	mov	r1, r3
 800ae7a:	f7ff f9d5 	bl	800a228 <mem_cmp>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00b      	beq.n	800ae9c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ae84:	2100      	movs	r1, #0
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7ff fe6e 	bl	800ab68 <dir_next>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ae90:	7dfb      	ldrb	r3, [r7, #23]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d0c5      	beq.n	800ae22 <dir_find+0x24>
 800ae96:	e002      	b.n	800ae9e <dir_find+0xa0>
		if (res != FR_OK) break;
 800ae98:	bf00      	nop
 800ae9a:	e000      	b.n	800ae9e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ae9c:	bf00      	nop

	return res;
 800ae9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3718      	adds	r7, #24
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aeb6:	2101      	movs	r1, #1
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f7ff ff1a 	bl	800acf2 <dir_alloc>
 800aebe:	4603      	mov	r3, r0
 800aec0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d11c      	bne.n	800af02 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	69db      	ldr	r3, [r3, #28]
 800aecc:	4619      	mov	r1, r3
 800aece:	68b8      	ldr	r0, [r7, #8]
 800aed0:	f7ff fa86 	bl	800a3e0 <move_window>
 800aed4:	4603      	mov	r3, r0
 800aed6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aed8:	7bfb      	ldrb	r3, [r7, #15]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d111      	bne.n	800af02 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6a1b      	ldr	r3, [r3, #32]
 800aee2:	2220      	movs	r2, #32
 800aee4:	2100      	movs	r1, #0
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7ff f983 	bl	800a1f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a18      	ldr	r0, [r3, #32]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	3324      	adds	r3, #36	@ 0x24
 800aef4:	220b      	movs	r2, #11
 800aef6:	4619      	mov	r1, r3
 800aef8:	f7ff f95a 	bl	800a1b0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	2201      	movs	r2, #1
 800af00:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800af02:	7bfb      	ldrb	r3, [r7, #15]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b088      	sub	sp, #32
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	3324      	adds	r3, #36	@ 0x24
 800af20:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800af22:	220b      	movs	r2, #11
 800af24:	2120      	movs	r1, #32
 800af26:	68b8      	ldr	r0, [r7, #8]
 800af28:	f7ff f963 	bl	800a1f2 <mem_set>
	si = i = 0; ni = 8;
 800af2c:	2300      	movs	r3, #0
 800af2e:	613b      	str	r3, [r7, #16]
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	61fb      	str	r3, [r7, #28]
 800af34:	2308      	movs	r3, #8
 800af36:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	1c5a      	adds	r2, r3, #1
 800af3c:	61fa      	str	r2, [r7, #28]
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	4413      	add	r3, r2
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800af46:	7efb      	ldrb	r3, [r7, #27]
 800af48:	2b20      	cmp	r3, #32
 800af4a:	d94e      	bls.n	800afea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800af4c:	7efb      	ldrb	r3, [r7, #27]
 800af4e:	2b2f      	cmp	r3, #47	@ 0x2f
 800af50:	d006      	beq.n	800af60 <create_name+0x54>
 800af52:	7efb      	ldrb	r3, [r7, #27]
 800af54:	2b5c      	cmp	r3, #92	@ 0x5c
 800af56:	d110      	bne.n	800af7a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800af58:	e002      	b.n	800af60 <create_name+0x54>
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	3301      	adds	r3, #1
 800af5e:	61fb      	str	r3, [r7, #28]
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	4413      	add	r3, r2
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	2b2f      	cmp	r3, #47	@ 0x2f
 800af6a:	d0f6      	beq.n	800af5a <create_name+0x4e>
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	4413      	add	r3, r2
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	2b5c      	cmp	r3, #92	@ 0x5c
 800af76:	d0f0      	beq.n	800af5a <create_name+0x4e>
			break;
 800af78:	e038      	b.n	800afec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800af7a:	7efb      	ldrb	r3, [r7, #27]
 800af7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800af7e:	d003      	beq.n	800af88 <create_name+0x7c>
 800af80:	693a      	ldr	r2, [r7, #16]
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	429a      	cmp	r2, r3
 800af86:	d30c      	bcc.n	800afa2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	2b0b      	cmp	r3, #11
 800af8c:	d002      	beq.n	800af94 <create_name+0x88>
 800af8e:	7efb      	ldrb	r3, [r7, #27]
 800af90:	2b2e      	cmp	r3, #46	@ 0x2e
 800af92:	d001      	beq.n	800af98 <create_name+0x8c>
 800af94:	2306      	movs	r3, #6
 800af96:	e044      	b.n	800b022 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800af98:	2308      	movs	r3, #8
 800af9a:	613b      	str	r3, [r7, #16]
 800af9c:	230b      	movs	r3, #11
 800af9e:	617b      	str	r3, [r7, #20]
			continue;
 800afa0:	e022      	b.n	800afe8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800afa2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	da04      	bge.n	800afb4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800afaa:	7efb      	ldrb	r3, [r7, #27]
 800afac:	3b80      	subs	r3, #128	@ 0x80
 800afae:	4a1f      	ldr	r2, [pc, #124]	@ (800b02c <create_name+0x120>)
 800afb0:	5cd3      	ldrb	r3, [r2, r3]
 800afb2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800afb4:	7efb      	ldrb	r3, [r7, #27]
 800afb6:	4619      	mov	r1, r3
 800afb8:	481d      	ldr	r0, [pc, #116]	@ (800b030 <create_name+0x124>)
 800afba:	f7ff f95c 	bl	800a276 <chk_chr>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d001      	beq.n	800afc8 <create_name+0xbc>
 800afc4:	2306      	movs	r3, #6
 800afc6:	e02c      	b.n	800b022 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800afc8:	7efb      	ldrb	r3, [r7, #27]
 800afca:	2b60      	cmp	r3, #96	@ 0x60
 800afcc:	d905      	bls.n	800afda <create_name+0xce>
 800afce:	7efb      	ldrb	r3, [r7, #27]
 800afd0:	2b7a      	cmp	r3, #122	@ 0x7a
 800afd2:	d802      	bhi.n	800afda <create_name+0xce>
 800afd4:	7efb      	ldrb	r3, [r7, #27]
 800afd6:	3b20      	subs	r3, #32
 800afd8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	1c5a      	adds	r2, r3, #1
 800afde:	613a      	str	r2, [r7, #16]
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	4413      	add	r3, r2
 800afe4:	7efa      	ldrb	r2, [r7, #27]
 800afe6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800afe8:	e7a6      	b.n	800af38 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800afea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	441a      	add	r2, r3
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <create_name+0xf4>
 800affc:	2306      	movs	r3, #6
 800affe:	e010      	b.n	800b022 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	2be5      	cmp	r3, #229	@ 0xe5
 800b006:	d102      	bne.n	800b00e <create_name+0x102>
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2205      	movs	r2, #5
 800b00c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b00e:	7efb      	ldrb	r3, [r7, #27]
 800b010:	2b20      	cmp	r3, #32
 800b012:	d801      	bhi.n	800b018 <create_name+0x10c>
 800b014:	2204      	movs	r2, #4
 800b016:	e000      	b.n	800b01a <create_name+0x10e>
 800b018:	2200      	movs	r2, #0
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	330b      	adds	r3, #11
 800b01e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b020:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b022:	4618      	mov	r0, r3
 800b024:	3720      	adds	r7, #32
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	0800f920 	.word	0x0800f920
 800b030:	0800f8b4 	.word	0x0800f8b4

0800b034 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b086      	sub	sp, #24
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b048:	e002      	b.n	800b050 <follow_path+0x1c>
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	3301      	adds	r3, #1
 800b04e:	603b      	str	r3, [r7, #0]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	2b2f      	cmp	r3, #47	@ 0x2f
 800b056:	d0f8      	beq.n	800b04a <follow_path+0x16>
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	2b5c      	cmp	r3, #92	@ 0x5c
 800b05e:	d0f4      	beq.n	800b04a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	2200      	movs	r2, #0
 800b064:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	2b1f      	cmp	r3, #31
 800b06c:	d80a      	bhi.n	800b084 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2280      	movs	r2, #128	@ 0x80
 800b072:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b076:	2100      	movs	r1, #0
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7ff fcfa 	bl	800aa72 <dir_sdi>
 800b07e:	4603      	mov	r3, r0
 800b080:	75fb      	strb	r3, [r7, #23]
 800b082:	e043      	b.n	800b10c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b084:	463b      	mov	r3, r7
 800b086:	4619      	mov	r1, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7ff ff3f 	bl	800af0c <create_name>
 800b08e:	4603      	mov	r3, r0
 800b090:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b092:	7dfb      	ldrb	r3, [r7, #23]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d134      	bne.n	800b102 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f7ff feb0 	bl	800adfe <dir_find>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b0a8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00a      	beq.n	800b0c6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b0b0:	7dfb      	ldrb	r3, [r7, #23]
 800b0b2:	2b04      	cmp	r3, #4
 800b0b4:	d127      	bne.n	800b106 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b0b6:	7afb      	ldrb	r3, [r7, #11]
 800b0b8:	f003 0304 	and.w	r3, r3, #4
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d122      	bne.n	800b106 <follow_path+0xd2>
 800b0c0:	2305      	movs	r3, #5
 800b0c2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b0c4:	e01f      	b.n	800b106 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b0c6:	7afb      	ldrb	r3, [r7, #11]
 800b0c8:	f003 0304 	and.w	r3, r3, #4
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d11c      	bne.n	800b10a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	799b      	ldrb	r3, [r3, #6]
 800b0d4:	f003 0310 	and.w	r3, r3, #16
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d102      	bne.n	800b0e2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b0dc:	2305      	movs	r3, #5
 800b0de:	75fb      	strb	r3, [r7, #23]
 800b0e0:	e014      	b.n	800b10c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	695b      	ldr	r3, [r3, #20]
 800b0ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0f0:	4413      	add	r3, r2
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f7ff fe43 	bl	800ad80 <ld_clust>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b100:	e7c0      	b.n	800b084 <follow_path+0x50>
			if (res != FR_OK) break;
 800b102:	bf00      	nop
 800b104:	e002      	b.n	800b10c <follow_path+0xd8>
				break;
 800b106:	bf00      	nop
 800b108:	e000      	b.n	800b10c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b10a:	bf00      	nop
			}
		}
	}

	return res;
 800b10c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3718      	adds	r7, #24
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b116:	b480      	push	{r7}
 800b118:	b087      	sub	sp, #28
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b11e:	f04f 33ff 	mov.w	r3, #4294967295
 800b122:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d031      	beq.n	800b190 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	617b      	str	r3, [r7, #20]
 800b132:	e002      	b.n	800b13a <get_ldnumber+0x24>
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	3301      	adds	r3, #1
 800b138:	617b      	str	r3, [r7, #20]
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	2b20      	cmp	r3, #32
 800b140:	d903      	bls.n	800b14a <get_ldnumber+0x34>
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	2b3a      	cmp	r3, #58	@ 0x3a
 800b148:	d1f4      	bne.n	800b134 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	2b3a      	cmp	r3, #58	@ 0x3a
 800b150:	d11c      	bne.n	800b18c <get_ldnumber+0x76>
			tp = *path;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	1c5a      	adds	r2, r3, #1
 800b15c:	60fa      	str	r2, [r7, #12]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	3b30      	subs	r3, #48	@ 0x30
 800b162:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	2b09      	cmp	r3, #9
 800b168:	d80e      	bhi.n	800b188 <get_ldnumber+0x72>
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d10a      	bne.n	800b188 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d107      	bne.n	800b188 <get_ldnumber+0x72>
					vol = (int)i;
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	3301      	adds	r3, #1
 800b180:	617b      	str	r3, [r7, #20]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	697a      	ldr	r2, [r7, #20]
 800b186:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	e002      	b.n	800b192 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b18c:	2300      	movs	r3, #0
 800b18e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b190:	693b      	ldr	r3, [r7, #16]
}
 800b192:	4618      	mov	r0, r3
 800b194:	371c      	adds	r7, #28
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
	...

0800b1a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	70da      	strb	r2, [r3, #3]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7ff f910 	bl	800a3e0 <move_window>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d001      	beq.n	800b1ca <check_fs+0x2a>
 800b1c6:	2304      	movs	r3, #4
 800b1c8:	e038      	b.n	800b23c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	3334      	adds	r3, #52	@ 0x34
 800b1ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fe ff6a 	bl	800a0ac <ld_word>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	461a      	mov	r2, r3
 800b1dc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d001      	beq.n	800b1e8 <check_fs+0x48>
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	e029      	b.n	800b23c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b1ee:	2be9      	cmp	r3, #233	@ 0xe9
 800b1f0:	d009      	beq.n	800b206 <check_fs+0x66>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b1f8:	2beb      	cmp	r3, #235	@ 0xeb
 800b1fa:	d11e      	bne.n	800b23a <check_fs+0x9a>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800b202:	2b90      	cmp	r3, #144	@ 0x90
 800b204:	d119      	bne.n	800b23a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	3334      	adds	r3, #52	@ 0x34
 800b20a:	3336      	adds	r3, #54	@ 0x36
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fe ff65 	bl	800a0dc <ld_dword>
 800b212:	4603      	mov	r3, r0
 800b214:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b218:	4a0a      	ldr	r2, [pc, #40]	@ (800b244 <check_fs+0xa4>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d101      	bne.n	800b222 <check_fs+0x82>
 800b21e:	2300      	movs	r3, #0
 800b220:	e00c      	b.n	800b23c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	3334      	adds	r3, #52	@ 0x34
 800b226:	3352      	adds	r3, #82	@ 0x52
 800b228:	4618      	mov	r0, r3
 800b22a:	f7fe ff57 	bl	800a0dc <ld_dword>
 800b22e:	4603      	mov	r3, r0
 800b230:	4a05      	ldr	r2, [pc, #20]	@ (800b248 <check_fs+0xa8>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d101      	bne.n	800b23a <check_fs+0x9a>
 800b236:	2300      	movs	r3, #0
 800b238:	e000      	b.n	800b23c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b23a:	2302      	movs	r3, #2
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	00544146 	.word	0x00544146
 800b248:	33544146 	.word	0x33544146

0800b24c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b096      	sub	sp, #88	@ 0x58
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	4613      	mov	r3, r2
 800b258:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	2200      	movs	r2, #0
 800b25e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f7ff ff58 	bl	800b116 <get_ldnumber>
 800b266:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	da01      	bge.n	800b272 <find_volume+0x26>
 800b26e:	230b      	movs	r3, #11
 800b270:	e235      	b.n	800b6de <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b272:	4aa5      	ldr	r2, [pc, #660]	@ (800b508 <find_volume+0x2bc>)
 800b274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b27a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <find_volume+0x3a>
 800b282:	230c      	movs	r3, #12
 800b284:	e22b      	b.n	800b6de <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800b286:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b288:	f7ff f810 	bl	800a2ac <lock_fs>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d101      	bne.n	800b296 <find_volume+0x4a>
 800b292:	230f      	movs	r3, #15
 800b294:	e223      	b.n	800b6de <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b29a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b29c:	79fb      	ldrb	r3, [r7, #7]
 800b29e:	f023 0301 	bic.w	r3, r3, #1
 800b2a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a6:	781b      	ldrb	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d01a      	beq.n	800b2e2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ae:	785b      	ldrb	r3, [r3, #1]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7fe fe5b 	bl	8009f6c <disk_status>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b2bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b2c0:	f003 0301 	and.w	r3, r3, #1
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d10c      	bne.n	800b2e2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b2c8:	79fb      	ldrb	r3, [r7, #7]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d007      	beq.n	800b2de <find_volume+0x92>
 800b2ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b2d2:	f003 0304 	and.w	r3, r3, #4
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b2da:	230a      	movs	r3, #10
 800b2dc:	e1ff      	b.n	800b6de <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800b2de:	2300      	movs	r3, #0
 800b2e0:	e1fd      	b.n	800b6de <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b2e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f2:	785b      	ldrb	r3, [r3, #1]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7fe fe53 	bl	8009fa0 <disk_initialize>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b300:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b304:	f003 0301 	and.w	r3, r3, #1
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d001      	beq.n	800b310 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b30c:	2303      	movs	r3, #3
 800b30e:	e1e6      	b.n	800b6de <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b310:	79fb      	ldrb	r3, [r7, #7]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d007      	beq.n	800b326 <find_volume+0xda>
 800b316:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b31a:	f003 0304 	and.w	r3, r3, #4
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b322:	230a      	movs	r3, #10
 800b324:	e1db      	b.n	800b6de <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b326:	2300      	movs	r3, #0
 800b328:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b32a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b32c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b32e:	f7ff ff37 	bl	800b1a0 <check_fs>
 800b332:	4603      	mov	r3, r0
 800b334:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b338:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b33c:	2b02      	cmp	r3, #2
 800b33e:	d149      	bne.n	800b3d4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b340:	2300      	movs	r3, #0
 800b342:	643b      	str	r3, [r7, #64]	@ 0x40
 800b344:	e01e      	b.n	800b384 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b348:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b34c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b34e:	011b      	lsls	r3, r3, #4
 800b350:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b354:	4413      	add	r3, r2
 800b356:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35a:	3304      	adds	r3, #4
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d006      	beq.n	800b370 <find_volume+0x124>
 800b362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b364:	3308      	adds	r3, #8
 800b366:	4618      	mov	r0, r3
 800b368:	f7fe feb8 	bl	800a0dc <ld_dword>
 800b36c:	4602      	mov	r2, r0
 800b36e:	e000      	b.n	800b372 <find_volume+0x126>
 800b370:	2200      	movs	r2, #0
 800b372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	3358      	adds	r3, #88	@ 0x58
 800b378:	443b      	add	r3, r7
 800b37a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b37e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b380:	3301      	adds	r3, #1
 800b382:	643b      	str	r3, [r7, #64]	@ 0x40
 800b384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b386:	2b03      	cmp	r3, #3
 800b388:	d9dd      	bls.n	800b346 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b38a:	2300      	movs	r3, #0
 800b38c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b38e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <find_volume+0x14e>
 800b394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b396:	3b01      	subs	r3, #1
 800b398:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b39a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	3358      	adds	r3, #88	@ 0x58
 800b3a0:	443b      	add	r3, r7
 800b3a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b3a6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b3a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d005      	beq.n	800b3ba <find_volume+0x16e>
 800b3ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b3b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b3b2:	f7ff fef5 	bl	800b1a0 <check_fs>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	e000      	b.n	800b3bc <find_volume+0x170>
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b3c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d905      	bls.n	800b3d4 <find_volume+0x188>
 800b3c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3d0:	2b03      	cmp	r3, #3
 800b3d2:	d9e2      	bls.n	800b39a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b3d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b3d8:	2b04      	cmp	r3, #4
 800b3da:	d101      	bne.n	800b3e0 <find_volume+0x194>
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e17e      	b.n	800b6de <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b3e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d901      	bls.n	800b3ec <find_volume+0x1a0>
 800b3e8:	230d      	movs	r3, #13
 800b3ea:	e178      	b.n	800b6de <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ee:	3334      	adds	r3, #52	@ 0x34
 800b3f0:	330b      	adds	r3, #11
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fe fe5a 	bl	800a0ac <ld_word>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3fe:	d001      	beq.n	800b404 <find_volume+0x1b8>
 800b400:	230d      	movs	r3, #13
 800b402:	e16c      	b.n	800b6de <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b406:	3334      	adds	r3, #52	@ 0x34
 800b408:	3316      	adds	r3, #22
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fe fe4e 	bl	800a0ac <ld_word>
 800b410:	4603      	mov	r3, r0
 800b412:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b416:	2b00      	cmp	r3, #0
 800b418:	d106      	bne.n	800b428 <find_volume+0x1dc>
 800b41a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b41c:	3334      	adds	r3, #52	@ 0x34
 800b41e:	3324      	adds	r3, #36	@ 0x24
 800b420:	4618      	mov	r0, r3
 800b422:	f7fe fe5b 	bl	800a0dc <ld_dword>
 800b426:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b42a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b42c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b430:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b436:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43a:	789b      	ldrb	r3, [r3, #2]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d005      	beq.n	800b44c <find_volume+0x200>
 800b440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b442:	789b      	ldrb	r3, [r3, #2]
 800b444:	2b02      	cmp	r3, #2
 800b446:	d001      	beq.n	800b44c <find_volume+0x200>
 800b448:	230d      	movs	r3, #13
 800b44a:	e148      	b.n	800b6de <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44e:	789b      	ldrb	r3, [r3, #2]
 800b450:	461a      	mov	r2, r3
 800b452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b454:	fb02 f303 	mul.w	r3, r2, r3
 800b458:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b460:	461a      	mov	r2, r3
 800b462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b464:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b468:	895b      	ldrh	r3, [r3, #10]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d008      	beq.n	800b480 <find_volume+0x234>
 800b46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b470:	895b      	ldrh	r3, [r3, #10]
 800b472:	461a      	mov	r2, r3
 800b474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b476:	895b      	ldrh	r3, [r3, #10]
 800b478:	3b01      	subs	r3, #1
 800b47a:	4013      	ands	r3, r2
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <find_volume+0x238>
 800b480:	230d      	movs	r3, #13
 800b482:	e12c      	b.n	800b6de <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b486:	3334      	adds	r3, #52	@ 0x34
 800b488:	3311      	adds	r3, #17
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7fe fe0e 	bl	800a0ac <ld_word>
 800b490:	4603      	mov	r3, r0
 800b492:	461a      	mov	r2, r3
 800b494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b496:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b49a:	891b      	ldrh	r3, [r3, #8]
 800b49c:	f003 030f 	and.w	r3, r3, #15
 800b4a0:	b29b      	uxth	r3, r3
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <find_volume+0x25e>
 800b4a6:	230d      	movs	r3, #13
 800b4a8:	e119      	b.n	800b6de <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ac:	3334      	adds	r3, #52	@ 0x34
 800b4ae:	3313      	adds	r3, #19
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fe fdfb 	bl	800a0ac <ld_word>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b4ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d106      	bne.n	800b4ce <find_volume+0x282>
 800b4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c2:	3334      	adds	r3, #52	@ 0x34
 800b4c4:	3320      	adds	r3, #32
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fe fe08 	bl	800a0dc <ld_dword>
 800b4cc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d0:	3334      	adds	r3, #52	@ 0x34
 800b4d2:	330e      	adds	r3, #14
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7fe fde9 	bl	800a0ac <ld_word>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b4de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <find_volume+0x29c>
 800b4e4:	230d      	movs	r3, #13
 800b4e6:	e0fa      	b.n	800b6de <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b4e8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b4ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4ec:	4413      	add	r3, r2
 800b4ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b4f0:	8912      	ldrh	r2, [r2, #8]
 800b4f2:	0912      	lsrs	r2, r2, #4
 800b4f4:	b292      	uxth	r2, r2
 800b4f6:	4413      	add	r3, r2
 800b4f8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b4fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d204      	bcs.n	800b50c <find_volume+0x2c0>
 800b502:	230d      	movs	r3, #13
 800b504:	e0eb      	b.n	800b6de <find_volume+0x492>
 800b506:	bf00      	nop
 800b508:	20000d48 	.word	0x20000d48
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b50c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b514:	8952      	ldrh	r2, [r2, #10]
 800b516:	fbb3 f3f2 	udiv	r3, r3, r2
 800b51a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <find_volume+0x2da>
 800b522:	230d      	movs	r3, #13
 800b524:	e0db      	b.n	800b6de <find_volume+0x492>
		fmt = FS_FAT32;
 800b526:	2303      	movs	r3, #3
 800b528:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b532:	4293      	cmp	r3, r2
 800b534:	d802      	bhi.n	800b53c <find_volume+0x2f0>
 800b536:	2302      	movs	r3, #2
 800b538:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b542:	4293      	cmp	r3, r2
 800b544:	d802      	bhi.n	800b54c <find_volume+0x300>
 800b546:	2301      	movs	r3, #1
 800b548:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b54e:	1c9a      	adds	r2, r3, #2
 800b550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b552:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b556:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b558:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b55a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b55c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b55e:	441a      	add	r2, r3
 800b560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b562:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b564:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b568:	441a      	add	r2, r3
 800b56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b56c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800b56e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b572:	2b03      	cmp	r3, #3
 800b574:	d11e      	bne.n	800b5b4 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b578:	3334      	adds	r3, #52	@ 0x34
 800b57a:	332a      	adds	r3, #42	@ 0x2a
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7fe fd95 	bl	800a0ac <ld_word>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d001      	beq.n	800b58c <find_volume+0x340>
 800b588:	230d      	movs	r3, #13
 800b58a:	e0a8      	b.n	800b6de <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b58e:	891b      	ldrh	r3, [r3, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d001      	beq.n	800b598 <find_volume+0x34c>
 800b594:	230d      	movs	r3, #13
 800b596:	e0a2      	b.n	800b6de <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b59a:	3334      	adds	r3, #52	@ 0x34
 800b59c:	332c      	adds	r3, #44	@ 0x2c
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fe fd9c 	bl	800a0dc <ld_dword>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ac:	699b      	ldr	r3, [r3, #24]
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5b2:	e01f      	b.n	800b5f4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b6:	891b      	ldrh	r3, [r3, #8]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d101      	bne.n	800b5c0 <find_volume+0x374>
 800b5bc:	230d      	movs	r3, #13
 800b5be:	e08e      	b.n	800b6de <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5c6:	441a      	add	r2, r3
 800b5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ca:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b5cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d103      	bne.n	800b5dc <find_volume+0x390>
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d6:	699b      	ldr	r3, [r3, #24]
 800b5d8:	005b      	lsls	r3, r3, #1
 800b5da:	e00a      	b.n	800b5f2 <find_volume+0x3a6>
 800b5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5de:	699a      	ldr	r2, [r3, #24]
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	005b      	lsls	r3, r3, #1
 800b5e4:	4413      	add	r3, r2
 800b5e6:	085a      	lsrs	r2, r3, #1
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ea:	699b      	ldr	r3, [r3, #24]
 800b5ec:	f003 0301 	and.w	r3, r3, #1
 800b5f0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b5f2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f6:	69da      	ldr	r2, [r3, #28]
 800b5f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5fa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b5fe:	0a5b      	lsrs	r3, r3, #9
 800b600:	429a      	cmp	r2, r3
 800b602:	d201      	bcs.n	800b608 <find_volume+0x3bc>
 800b604:	230d      	movs	r3, #13
 800b606:	e06a      	b.n	800b6de <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60a:	f04f 32ff 	mov.w	r2, #4294967295
 800b60e:	615a      	str	r2, [r3, #20]
 800b610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b612:	695a      	ldr	r2, [r3, #20]
 800b614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b616:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b61a:	2280      	movs	r2, #128	@ 0x80
 800b61c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b61e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b622:	2b03      	cmp	r3, #3
 800b624:	d149      	bne.n	800b6ba <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b628:	3334      	adds	r3, #52	@ 0x34
 800b62a:	3330      	adds	r3, #48	@ 0x30
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7fe fd3d 	bl	800a0ac <ld_word>
 800b632:	4603      	mov	r3, r0
 800b634:	2b01      	cmp	r3, #1
 800b636:	d140      	bne.n	800b6ba <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b63a:	3301      	adds	r3, #1
 800b63c:	4619      	mov	r1, r3
 800b63e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b640:	f7fe fece 	bl	800a3e0 <move_window>
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d137      	bne.n	800b6ba <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800b64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b64c:	2200      	movs	r2, #0
 800b64e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b652:	3334      	adds	r3, #52	@ 0x34
 800b654:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b658:	4618      	mov	r0, r3
 800b65a:	f7fe fd27 	bl	800a0ac <ld_word>
 800b65e:	4603      	mov	r3, r0
 800b660:	461a      	mov	r2, r3
 800b662:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b666:	429a      	cmp	r2, r3
 800b668:	d127      	bne.n	800b6ba <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b66c:	3334      	adds	r3, #52	@ 0x34
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fe fd34 	bl	800a0dc <ld_dword>
 800b674:	4603      	mov	r3, r0
 800b676:	4a1c      	ldr	r2, [pc, #112]	@ (800b6e8 <find_volume+0x49c>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d11e      	bne.n	800b6ba <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b67e:	3334      	adds	r3, #52	@ 0x34
 800b680:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b684:	4618      	mov	r0, r3
 800b686:	f7fe fd29 	bl	800a0dc <ld_dword>
 800b68a:	4603      	mov	r3, r0
 800b68c:	4a17      	ldr	r2, [pc, #92]	@ (800b6ec <find_volume+0x4a0>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d113      	bne.n	800b6ba <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b694:	3334      	adds	r3, #52	@ 0x34
 800b696:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7fe fd1e 	bl	800a0dc <ld_dword>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a8:	3334      	adds	r3, #52	@ 0x34
 800b6aa:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fe fd14 	bl	800a0dc <ld_dword>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6b8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b6ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6bc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b6c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b6c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b6f0 <find_volume+0x4a4>)
 800b6c4:	881b      	ldrh	r3, [r3, #0]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	b29a      	uxth	r2, r3
 800b6ca:	4b09      	ldr	r3, [pc, #36]	@ (800b6f0 <find_volume+0x4a4>)
 800b6cc:	801a      	strh	r2, [r3, #0]
 800b6ce:	4b08      	ldr	r3, [pc, #32]	@ (800b6f0 <find_volume+0x4a4>)
 800b6d0:	881a      	ldrh	r2, [r3, #0]
 800b6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6d4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b6d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b6d8:	f7fe fe1a 	bl	800a310 <clear_lock>
#endif
	return FR_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3758      	adds	r7, #88	@ 0x58
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	41615252 	.word	0x41615252
 800b6ec:	61417272 	.word	0x61417272
 800b6f0:	20000d4c 	.word	0x20000d4c

0800b6f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b088      	sub	sp, #32
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	4613      	mov	r3, r2
 800b700:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b706:	f107 0310 	add.w	r3, r7, #16
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7ff fd03 	bl	800b116 <get_ldnumber>
 800b710:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	2b00      	cmp	r3, #0
 800b716:	da01      	bge.n	800b71c <f_mount+0x28>
 800b718:	230b      	movs	r3, #11
 800b71a:	e048      	b.n	800b7ae <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b71c:	4a26      	ldr	r2, [pc, #152]	@ (800b7b8 <f_mount+0xc4>)
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b724:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00f      	beq.n	800b74c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b72c:	69b8      	ldr	r0, [r7, #24]
 800b72e:	f7fe fdef 	bl	800a310 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	4618      	mov	r0, r3
 800b738:	f000 f9c9 	bl	800bace <ff_del_syncobj>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d101      	bne.n	800b746 <f_mount+0x52>
 800b742:	2302      	movs	r3, #2
 800b744:	e033      	b.n	800b7ae <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	2200      	movs	r2, #0
 800b74a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00f      	beq.n	800b772 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	b2da      	uxtb	r2, r3
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	330c      	adds	r3, #12
 800b760:	4619      	mov	r1, r3
 800b762:	4610      	mov	r0, r2
 800b764:	f000 f993 	bl	800ba8e <ff_cre_syncobj>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d101      	bne.n	800b772 <f_mount+0x7e>
 800b76e:	2302      	movs	r3, #2
 800b770:	e01d      	b.n	800b7ae <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	4910      	ldr	r1, [pc, #64]	@ (800b7b8 <f_mount+0xc4>)
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d002      	beq.n	800b788 <f_mount+0x94>
 800b782:	79fb      	ldrb	r3, [r7, #7]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d001      	beq.n	800b78c <f_mount+0x98>
 800b788:	2300      	movs	r3, #0
 800b78a:	e010      	b.n	800b7ae <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b78c:	f107 010c 	add.w	r1, r7, #12
 800b790:	f107 0308 	add.w	r3, r7, #8
 800b794:	2200      	movs	r2, #0
 800b796:	4618      	mov	r0, r3
 800b798:	f7ff fd58 	bl	800b24c <find_volume>
 800b79c:	4603      	mov	r3, r0
 800b79e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	7dfa      	ldrb	r2, [r7, #23]
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fe fd96 	bl	800a2d8 <unlock_fs>
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3720      	adds	r7, #32
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20000d48 	.word	0x20000d48

0800b7bc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b096      	sub	sp, #88	@ 0x58
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b7c4:	f107 0108 	add.w	r1, r7, #8
 800b7c8:	1d3b      	adds	r3, r7, #4
 800b7ca:	2202      	movs	r2, #2
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff fd3d 	bl	800b24c <find_volume>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800b7dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f040 80ec 	bne.w	800b9be <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	f107 030c 	add.w	r3, r7, #12
 800b7ec:	4611      	mov	r1, r2
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7ff fc20 	bl	800b034 <follow_path>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800b7fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d102      	bne.n	800b808 <f_mkdir+0x4c>
 800b802:	2308      	movs	r3, #8
 800b804:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800b808:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b80c:	2b04      	cmp	r3, #4
 800b80e:	f040 80d6 	bne.w	800b9be <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800b812:	f107 030c 	add.w	r3, r7, #12
 800b816:	2100      	movs	r1, #0
 800b818:	4618      	mov	r0, r3
 800b81a:	f7ff f892 	bl	800a942 <create_chain>
 800b81e:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	895b      	ldrh	r3, [r3, #10]
 800b824:	025b      	lsls	r3, r3, #9
 800b826:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800b828:	2300      	movs	r3, #0
 800b82a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800b82e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b830:	2b00      	cmp	r3, #0
 800b832:	d102      	bne.n	800b83a <f_mkdir+0x7e>
 800b834:	2307      	movs	r3, #7
 800b836:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800b83a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d102      	bne.n	800b846 <f_mkdir+0x8a>
 800b840:	2302      	movs	r3, #2
 800b842:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b84c:	d102      	bne.n	800b854 <f_mkdir+0x98>
 800b84e:	2301      	movs	r3, #1
 800b850:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800b854:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d106      	bne.n	800b86a <f_mkdir+0xae>
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fe fd7a 	bl	800a358 <sync_window>
 800b864:	4603      	mov	r3, r0
 800b866:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 800b86a:	f7fe fb21 	bl	8009eb0 <get_fattime>
 800b86e:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800b870:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b874:	2b00      	cmp	r3, #0
 800b876:	d16a      	bne.n	800b94e <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7fe fe4b 	bl	800a518 <clust2sect>
 800b882:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	3334      	adds	r3, #52	@ 0x34
 800b888:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 800b88a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b88e:	2100      	movs	r1, #0
 800b890:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b892:	f7fe fcae 	bl	800a1f2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800b896:	220b      	movs	r2, #11
 800b898:	2120      	movs	r1, #32
 800b89a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b89c:	f7fe fca9 	bl	800a1f2 <mem_set>
					dir[DIR_Name] = '.';
 800b8a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8a2:	222e      	movs	r2, #46	@ 0x2e
 800b8a4:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800b8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8a8:	330b      	adds	r3, #11
 800b8aa:	2210      	movs	r2, #16
 800b8ac:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800b8ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8b0:	3316      	adds	r3, #22
 800b8b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7fe fc4f 	bl	800a158 <st_dword>
					st_clust(fs, dir, dcl);
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7ff fa7c 	bl	800adbe <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800b8c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8c8:	3320      	adds	r3, #32
 800b8ca:	2220      	movs	r2, #32
 800b8cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fe fc6e 	bl	800a1b0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800b8d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8d6:	3321      	adds	r3, #33	@ 0x21
 800b8d8:	222e      	movs	r2, #46	@ 0x2e
 800b8da:	701a      	strb	r2, [r3, #0]
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	2b03      	cmp	r3, #3
 800b8e6:	d106      	bne.n	800b8f6 <f_mkdir+0x13a>
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d101      	bne.n	800b8f6 <f_mkdir+0x13a>
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800b8f6:	68b8      	ldr	r0, [r7, #8]
 800b8f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8fa:	3320      	adds	r3, #32
 800b8fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8fe:	4619      	mov	r1, r3
 800b900:	f7ff fa5d 	bl	800adbe <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	895b      	ldrh	r3, [r3, #10]
 800b908:	653b      	str	r3, [r7, #80]	@ 0x50
 800b90a:	e01b      	b.n	800b944 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800b90c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b90e:	1c5a      	adds	r2, r3, #1
 800b910:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2201      	movs	r2, #1
 800b91a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe fd1a 	bl	800a358 <sync_window>
 800b924:	4603      	mov	r3, r0
 800b926:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 800b92a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10c      	bne.n	800b94c <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800b932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b936:	2100      	movs	r1, #0
 800b938:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b93a:	f7fe fc5a 	bl	800a1f2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b93e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b940:	3b01      	subs	r3, #1
 800b942:	653b      	str	r3, [r7, #80]	@ 0x50
 800b944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1e0      	bne.n	800b90c <f_mkdir+0x150>
 800b94a:	e000      	b.n	800b94e <f_mkdir+0x192>
					if (res != FR_OK) break;
 800b94c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800b94e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b952:	2b00      	cmp	r3, #0
 800b954:	d107      	bne.n	800b966 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800b956:	f107 030c 	add.w	r3, r7, #12
 800b95a:	4618      	mov	r0, r3
 800b95c:	f7ff faa4 	bl	800aea8 <dir_register>
 800b960:	4603      	mov	r3, r0
 800b962:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 800b966:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d120      	bne.n	800b9b0 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800b96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b970:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800b972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b974:	3316      	adds	r3, #22
 800b976:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fe fbed 	bl	800a158 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b982:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b984:	4618      	mov	r0, r3
 800b986:	f7ff fa1a 	bl	800adbe <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800b98a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b98c:	330b      	adds	r3, #11
 800b98e:	2210      	movs	r2, #16
 800b990:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	2201      	movs	r2, #1
 800b996:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800b998:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d10e      	bne.n	800b9be <f_mkdir+0x202>
					res = sync_fs(fs);
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7fe fd4a 	bl	800a43c <sync_fs>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800b9ae:	e006      	b.n	800b9be <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800b9b0:	f107 030c 	add.w	r3, r7, #12
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f7fe ff5d 	bl	800a878 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7fe fc86 	bl	800a2d8 <unlock_fs>
 800b9cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3758      	adds	r7, #88	@ 0x58
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b087      	sub	sp, #28
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	60b9      	str	r1, [r7, #8]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b9ee:	4b1f      	ldr	r3, [pc, #124]	@ (800ba6c <FATFS_LinkDriverEx+0x94>)
 800b9f0:	7a5b      	ldrb	r3, [r3, #9]
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d131      	bne.n	800ba5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b9f8:	4b1c      	ldr	r3, [pc, #112]	@ (800ba6c <FATFS_LinkDriverEx+0x94>)
 800b9fa:	7a5b      	ldrb	r3, [r3, #9]
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	461a      	mov	r2, r3
 800ba00:	4b1a      	ldr	r3, [pc, #104]	@ (800ba6c <FATFS_LinkDriverEx+0x94>)
 800ba02:	2100      	movs	r1, #0
 800ba04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ba06:	4b19      	ldr	r3, [pc, #100]	@ (800ba6c <FATFS_LinkDriverEx+0x94>)
 800ba08:	7a5b      	ldrb	r3, [r3, #9]
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	4a17      	ldr	r2, [pc, #92]	@ (800ba6c <FATFS_LinkDriverEx+0x94>)
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	4413      	add	r3, r2
 800ba12:	68fa      	ldr	r2, [r7, #12]
 800ba14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ba16:	4b15      	ldr	r3, [pc, #84]	@ (800ba6c <FATFS_LinkDriverEx+0x94>)
 800ba18:	7a5b      	ldrb	r3, [r3, #9]
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	4b13      	ldr	r3, [pc, #76]	@ (800ba6c <FATFS_LinkDriverEx+0x94>)
 800ba20:	4413      	add	r3, r2
 800ba22:	79fa      	ldrb	r2, [r7, #7]
 800ba24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ba26:	4b11      	ldr	r3, [pc, #68]	@ (800ba6c <FATFS_LinkDriverEx+0x94>)
 800ba28:	7a5b      	ldrb	r3, [r3, #9]
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	1c5a      	adds	r2, r3, #1
 800ba2e:	b2d1      	uxtb	r1, r2
 800ba30:	4a0e      	ldr	r2, [pc, #56]	@ (800ba6c <FATFS_LinkDriverEx+0x94>)
 800ba32:	7251      	strb	r1, [r2, #9]
 800ba34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ba36:	7dbb      	ldrb	r3, [r7, #22]
 800ba38:	3330      	adds	r3, #48	@ 0x30
 800ba3a:	b2da      	uxtb	r2, r3
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	3301      	adds	r3, #1
 800ba44:	223a      	movs	r2, #58	@ 0x3a
 800ba46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	3302      	adds	r3, #2
 800ba4c:	222f      	movs	r2, #47	@ 0x2f
 800ba4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	3303      	adds	r3, #3
 800ba54:	2200      	movs	r2, #0
 800ba56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ba5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	371c      	adds	r7, #28
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	20000d70 	.word	0x20000d70

0800ba70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	6839      	ldr	r1, [r7, #0]
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f7ff ffaa 	bl	800b9d8 <FATFS_LinkDriverEx>
 800ba84:	4603      	mov	r3, r0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b086      	sub	sp, #24
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	4603      	mov	r3, r0
 800ba96:	6039      	str	r1, [r7, #0]
 800ba98:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	60fb      	str	r3, [r7, #12]
 800ba9e:	2300      	movs	r3, #0
 800baa0:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800baa2:	f107 030c 	add.w	r3, r7, #12
 800baa6:	2101      	movs	r1, #1
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 f8cd 	bl	800bc48 <osSemaphoreCreate>
 800baae:	4602      	mov	r2, r0
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	bf14      	ite	ne
 800babc:	2301      	movne	r3, #1
 800babe:	2300      	moveq	r3, #0
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	617b      	str	r3, [r7, #20]

    return ret;
 800bac4:	697b      	ldr	r3, [r7, #20]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3718      	adds	r7, #24
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b082      	sub	sp, #8
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 f96c 	bl	800bdb4 <osSemaphoreDelete>
#endif
    return 1;
 800badc:	2301      	movs	r3, #1
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b084      	sub	sp, #16
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800baf2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 f8d8 	bl	800bcac <osSemaphoreWait>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d101      	bne.n	800bb06 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800bb02:	2301      	movs	r3, #1
 800bb04:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800bb06:	68fb      	ldr	r3, [r7, #12]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 f915 	bl	800bd48 <osSemaphoreRelease>
#endif
}
 800bb1e:	bf00      	nop
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bb26:	b480      	push	{r7}
 800bb28:	b085      	sub	sp, #20
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bb30:	2300      	movs	r3, #0
 800bb32:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bb34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bb38:	2b84      	cmp	r3, #132	@ 0x84
 800bb3a:	d005      	beq.n	800bb48 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bb3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	4413      	add	r3, r2
 800bb44:	3303      	adds	r3, #3
 800bb46:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bb48:	68fb      	ldr	r3, [r7, #12]
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3714      	adds	r7, #20
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr

0800bb56 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bb56:	b480      	push	{r7}
 800bb58:	b083      	sub	sp, #12
 800bb5a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb5c:	f3ef 8305 	mrs	r3, IPSR
 800bb60:	607b      	str	r3, [r7, #4]
  return(result);
 800bb62:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	bf14      	ite	ne
 800bb68:	2301      	movne	r3, #1
 800bb6a:	2300      	moveq	r3, #0
 800bb6c:	b2db      	uxtb	r3, r3
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	370c      	adds	r7, #12
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bb7e:	f001 f98b 	bl	800ce98 <vTaskStartScheduler>
  
  return osOK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bb88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb8a:	b089      	sub	sp, #36	@ 0x24
 800bb8c:	af04      	add	r7, sp, #16
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	695b      	ldr	r3, [r3, #20]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d020      	beq.n	800bbdc <osThreadCreate+0x54>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	699b      	ldr	r3, [r3, #24]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d01c      	beq.n	800bbdc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	685c      	ldr	r4, [r3, #4]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	691e      	ldr	r6, [r3, #16]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7ff ffb6 	bl	800bb26 <makeFreeRtosPriority>
 800bbba:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	695b      	ldr	r3, [r3, #20]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbc4:	9202      	str	r2, [sp, #8]
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	9100      	str	r1, [sp, #0]
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	4632      	mov	r2, r6
 800bbce:	4629      	mov	r1, r5
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	f000 ff93 	bl	800cafc <xTaskCreateStatic>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	60fb      	str	r3, [r7, #12]
 800bbda:	e01c      	b.n	800bc16 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	685c      	ldr	r4, [r3, #4]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbe8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7ff ff98 	bl	800bb26 <makeFreeRtosPriority>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	f107 030c 	add.w	r3, r7, #12
 800bbfc:	9301      	str	r3, [sp, #4]
 800bbfe:	9200      	str	r2, [sp, #0]
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	4632      	mov	r2, r6
 800bc04:	4629      	mov	r1, r5
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 ffd8 	bl	800cbbc <xTaskCreate>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d001      	beq.n	800bc16 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bc12:	2300      	movs	r3, #0
 800bc14:	e000      	b.n	800bc18 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bc16:	68fb      	ldr	r3, [r7, #12]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3714      	adds	r7, #20
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc20 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d001      	beq.n	800bc36 <osDelay+0x16>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	e000      	b.n	800bc38 <osDelay+0x18>
 800bc36:	2301      	movs	r3, #1
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f001 f8f7 	bl	800ce2c <vTaskDelay>
  
  return osOK;
 800bc3e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af02      	add	r7, sp, #8
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00f      	beq.n	800bc7a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d10a      	bne.n	800bc76 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	2203      	movs	r2, #3
 800bc66:	9200      	str	r2, [sp, #0]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	2001      	movs	r0, #1
 800bc6e:	f000 f9d3 	bl	800c018 <xQueueGenericCreateStatic>
 800bc72:	4603      	mov	r3, r0
 800bc74:	e016      	b.n	800bca4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800bc76:	2300      	movs	r3, #0
 800bc78:	e014      	b.n	800bca4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d110      	bne.n	800bca2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800bc80:	2203      	movs	r2, #3
 800bc82:	2100      	movs	r1, #0
 800bc84:	2001      	movs	r0, #1
 800bc86:	f000 fa44 	bl	800c112 <xQueueGenericCreate>
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d005      	beq.n	800bc9e <osSemaphoreCreate+0x56>
 800bc92:	2300      	movs	r3, #0
 800bc94:	2200      	movs	r2, #0
 800bc96:	2100      	movs	r1, #0
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	f000 fa95 	bl	800c1c8 <xQueueGenericSend>
      return sema;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	e000      	b.n	800bca4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800bca2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3710      	adds	r7, #16
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d101      	bne.n	800bcc4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bcc0:	2380      	movs	r3, #128	@ 0x80
 800bcc2:	e03a      	b.n	800bd3a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcce:	d103      	bne.n	800bcd8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bcd0:	f04f 33ff 	mov.w	r3, #4294967295
 800bcd4:	60fb      	str	r3, [r7, #12]
 800bcd6:	e009      	b.n	800bcec <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d006      	beq.n	800bcec <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d101      	bne.n	800bcec <osSemaphoreWait+0x40>
      ticks = 1;
 800bce8:	2301      	movs	r3, #1
 800bcea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bcec:	f7ff ff33 	bl	800bb56 <inHandlerMode>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d017      	beq.n	800bd26 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bcf6:	f107 0308 	add.w	r3, r7, #8
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fd04 	bl	800c70c <xQueueReceiveFromISR>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b01      	cmp	r3, #1
 800bd08:	d001      	beq.n	800bd0e <osSemaphoreWait+0x62>
      return osErrorOS;
 800bd0a:	23ff      	movs	r3, #255	@ 0xff
 800bd0c:	e015      	b.n	800bd3a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d011      	beq.n	800bd38 <osSemaphoreWait+0x8c>
 800bd14:	4b0b      	ldr	r3, [pc, #44]	@ (800bd44 <osSemaphoreWait+0x98>)
 800bd16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd1a:	601a      	str	r2, [r3, #0]
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	f3bf 8f6f 	isb	sy
 800bd24:	e008      	b.n	800bd38 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bd26:	68f9      	ldr	r1, [r7, #12]
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 fbdf 	bl	800c4ec <xQueueSemaphoreTake>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d001      	beq.n	800bd38 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bd34:	23ff      	movs	r3, #255	@ 0xff
 800bd36:	e000      	b.n	800bd3a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	e000ed04 	.word	0xe000ed04

0800bd48 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bd50:	2300      	movs	r3, #0
 800bd52:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bd54:	2300      	movs	r3, #0
 800bd56:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bd58:	f7ff fefd 	bl	800bb56 <inHandlerMode>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d016      	beq.n	800bd90 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bd62:	f107 0308 	add.w	r3, r7, #8
 800bd66:	4619      	mov	r1, r3
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 fb2f 	bl	800c3cc <xQueueGiveFromISR>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d001      	beq.n	800bd78 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bd74:	23ff      	movs	r3, #255	@ 0xff
 800bd76:	e017      	b.n	800bda8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d013      	beq.n	800bda6 <osSemaphoreRelease+0x5e>
 800bd7e:	4b0c      	ldr	r3, [pc, #48]	@ (800bdb0 <osSemaphoreRelease+0x68>)
 800bd80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd84:	601a      	str	r2, [r3, #0]
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	e00a      	b.n	800bda6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bd90:	2300      	movs	r3, #0
 800bd92:	2200      	movs	r2, #0
 800bd94:	2100      	movs	r1, #0
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fa16 	bl	800c1c8 <xQueueGenericSend>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	d001      	beq.n	800bda6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800bda2:	23ff      	movs	r3, #255	@ 0xff
 800bda4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800bda6:	68fb      	ldr	r3, [r7, #12]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	e000ed04 	.word	0xe000ed04

0800bdb4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800bdbc:	f7ff fecb 	bl	800bb56 <inHandlerMode>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d001      	beq.n	800bdca <osSemaphoreDelete+0x16>
    return osErrorISR;
 800bdc6:	2382      	movs	r3, #130	@ 0x82
 800bdc8:	e003      	b.n	800bdd2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fd20 	bl	800c810 <vQueueDelete>

  return osOK; 
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bdda:	b480      	push	{r7}
 800bddc:	b083      	sub	sp, #12
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f103 0208 	add.w	r2, r3, #8
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f04f 32ff 	mov.w	r2, #4294967295
 800bdf2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f103 0208 	add.w	r2, r3, #8
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f103 0208 	add.w	r2, r3, #8
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be0e:	bf00      	nop
 800be10:	370c      	adds	r7, #12
 800be12:	46bd      	mov	sp, r7
 800be14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be18:	4770      	bx	lr

0800be1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800be1a:	b480      	push	{r7}
 800be1c:	b083      	sub	sp, #12
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be28:	bf00      	nop
 800be2a:	370c      	adds	r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	689a      	ldr	r2, [r3, #8]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	683a      	ldr	r2, [r7, #0]
 800be5e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	1c5a      	adds	r2, r3, #1
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	601a      	str	r2, [r3, #0]
}
 800be70:	bf00      	nop
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be92:	d103      	bne.n	800be9c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	691b      	ldr	r3, [r3, #16]
 800be98:	60fb      	str	r3, [r7, #12]
 800be9a:	e00c      	b.n	800beb6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	3308      	adds	r3, #8
 800bea0:	60fb      	str	r3, [r7, #12]
 800bea2:	e002      	b.n	800beaa <vListInsert+0x2e>
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	60fb      	str	r3, [r7, #12]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	68ba      	ldr	r2, [r7, #8]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d2f6      	bcs.n	800bea4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	683a      	ldr	r2, [r7, #0]
 800bec4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	1c5a      	adds	r2, r3, #1
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	601a      	str	r2, [r3, #0]
}
 800bee2:	bf00      	nop
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800beee:	b480      	push	{r7}
 800bef0:	b085      	sub	sp, #20
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	691b      	ldr	r3, [r3, #16]
 800befa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	6892      	ldr	r2, [r2, #8]
 800bf04:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	6852      	ldr	r2, [r2, #4]
 800bf0e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d103      	bne.n	800bf22 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	689a      	ldr	r2, [r3, #8]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	1e5a      	subs	r2, r3, #1
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3714      	adds	r7, #20
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr
	...

0800bf44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d10b      	bne.n	800bf70 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bf58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf5c:	f383 8811 	msr	BASEPRI, r3
 800bf60:	f3bf 8f6f 	isb	sy
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bf6a:	bf00      	nop
 800bf6c:	bf00      	nop
 800bf6e:	e7fd      	b.n	800bf6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bf70:	f001 fef2 	bl	800dd58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf7c:	68f9      	ldr	r1, [r7, #12]
 800bf7e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bf80:	fb01 f303 	mul.w	r3, r1, r3
 800bf84:	441a      	add	r2, r3
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	68f9      	ldr	r1, [r7, #12]
 800bfa4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bfa6:	fb01 f303 	mul.w	r3, r1, r3
 800bfaa:	441a      	add	r2, r3
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	22ff      	movs	r2, #255	@ 0xff
 800bfb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	22ff      	movs	r2, #255	@ 0xff
 800bfbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d114      	bne.n	800bff0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d01a      	beq.n	800c004 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3310      	adds	r3, #16
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f001 f9aa 	bl	800d32c <xTaskRemoveFromEventList>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d012      	beq.n	800c004 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bfde:	4b0d      	ldr	r3, [pc, #52]	@ (800c014 <xQueueGenericReset+0xd0>)
 800bfe0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	f3bf 8f4f 	dsb	sy
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	e009      	b.n	800c004 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	3310      	adds	r3, #16
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7ff fef0 	bl	800bdda <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3324      	adds	r3, #36	@ 0x24
 800bffe:	4618      	mov	r0, r3
 800c000:	f7ff feeb 	bl	800bdda <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c004:	f001 feda 	bl	800ddbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c008:	2301      	movs	r3, #1
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	e000ed04 	.word	0xe000ed04

0800c018 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b08e      	sub	sp, #56	@ 0x38
 800c01c:	af02      	add	r7, sp, #8
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
 800c024:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10b      	bne.n	800c044 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c030:	f383 8811 	msr	BASEPRI, r3
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c03e:	bf00      	nop
 800c040:	bf00      	nop
 800c042:	e7fd      	b.n	800c040 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10b      	bne.n	800c062 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c05c:	bf00      	nop
 800c05e:	bf00      	nop
 800c060:	e7fd      	b.n	800c05e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d002      	beq.n	800c06e <xQueueGenericCreateStatic+0x56>
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <xQueueGenericCreateStatic+0x5a>
 800c06e:	2301      	movs	r3, #1
 800c070:	e000      	b.n	800c074 <xQueueGenericCreateStatic+0x5c>
 800c072:	2300      	movs	r3, #0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10b      	bne.n	800c090 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07c:	f383 8811 	msr	BASEPRI, r3
 800c080:	f3bf 8f6f 	isb	sy
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	623b      	str	r3, [r7, #32]
}
 800c08a:	bf00      	nop
 800c08c:	bf00      	nop
 800c08e:	e7fd      	b.n	800c08c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d102      	bne.n	800c09c <xQueueGenericCreateStatic+0x84>
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d101      	bne.n	800c0a0 <xQueueGenericCreateStatic+0x88>
 800c09c:	2301      	movs	r3, #1
 800c09e:	e000      	b.n	800c0a2 <xQueueGenericCreateStatic+0x8a>
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d10b      	bne.n	800c0be <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0aa:	f383 8811 	msr	BASEPRI, r3
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	61fb      	str	r3, [r7, #28]
}
 800c0b8:	bf00      	nop
 800c0ba:	bf00      	nop
 800c0bc:	e7fd      	b.n	800c0ba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c0be:	2348      	movs	r3, #72	@ 0x48
 800c0c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c0c2:	697b      	ldr	r3, [r7, #20]
 800c0c4:	2b48      	cmp	r3, #72	@ 0x48
 800c0c6:	d00b      	beq.n	800c0e0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0cc:	f383 8811 	msr	BASEPRI, r3
 800c0d0:	f3bf 8f6f 	isb	sy
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	61bb      	str	r3, [r7, #24]
}
 800c0da:	bf00      	nop
 800c0dc:	bf00      	nop
 800c0de:	e7fd      	b.n	800c0dc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c0e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00d      	beq.n	800c108 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c0f4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	68b9      	ldr	r1, [r7, #8]
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f000 f840 	bl	800c188 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3730      	adds	r7, #48	@ 0x30
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c112:	b580      	push	{r7, lr}
 800c114:	b08a      	sub	sp, #40	@ 0x28
 800c116:	af02      	add	r7, sp, #8
 800c118:	60f8      	str	r0, [r7, #12]
 800c11a:	60b9      	str	r1, [r7, #8]
 800c11c:	4613      	mov	r3, r2
 800c11e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d10b      	bne.n	800c13e <xQueueGenericCreate+0x2c>
	__asm volatile
 800c126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	f3bf 8f6f 	isb	sy
 800c132:	f3bf 8f4f 	dsb	sy
 800c136:	613b      	str	r3, [r7, #16]
}
 800c138:	bf00      	nop
 800c13a:	bf00      	nop
 800c13c:	e7fd      	b.n	800c13a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	fb02 f303 	mul.w	r3, r2, r3
 800c146:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	3348      	adds	r3, #72	@ 0x48
 800c14c:	4618      	mov	r0, r3
 800c14e:	f001 ff25 	bl	800df9c <pvPortMalloc>
 800c152:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d011      	beq.n	800c17e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c15a:	69bb      	ldr	r3, [r7, #24]
 800c15c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	3348      	adds	r3, #72	@ 0x48
 800c162:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	2200      	movs	r2, #0
 800c168:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c16c:	79fa      	ldrb	r2, [r7, #7]
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	4613      	mov	r3, r2
 800c174:	697a      	ldr	r2, [r7, #20]
 800c176:	68b9      	ldr	r1, [r7, #8]
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	f000 f805 	bl	800c188 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c17e:	69bb      	ldr	r3, [r7, #24]
	}
 800c180:	4618      	mov	r0, r3
 800c182:	3720      	adds	r7, #32
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
 800c194:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d103      	bne.n	800c1a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	69ba      	ldr	r2, [r7, #24]
 800c1a0:	601a      	str	r2, [r3, #0]
 800c1a2:	e002      	b.n	800c1aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c1b6:	2101      	movs	r1, #1
 800c1b8:	69b8      	ldr	r0, [r7, #24]
 800c1ba:	f7ff fec3 	bl	800bf44 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c1be:	bf00      	nop
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
	...

0800c1c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b08e      	sub	sp, #56	@ 0x38
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
 800c1d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d10b      	bne.n	800c1fc <xQueueGenericSend+0x34>
	__asm volatile
 800c1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e8:	f383 8811 	msr	BASEPRI, r3
 800c1ec:	f3bf 8f6f 	isb	sy
 800c1f0:	f3bf 8f4f 	dsb	sy
 800c1f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c1f6:	bf00      	nop
 800c1f8:	bf00      	nop
 800c1fa:	e7fd      	b.n	800c1f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d103      	bne.n	800c20a <xQueueGenericSend+0x42>
 800c202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c206:	2b00      	cmp	r3, #0
 800c208:	d101      	bne.n	800c20e <xQueueGenericSend+0x46>
 800c20a:	2301      	movs	r3, #1
 800c20c:	e000      	b.n	800c210 <xQueueGenericSend+0x48>
 800c20e:	2300      	movs	r3, #0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d10b      	bne.n	800c22c <xQueueGenericSend+0x64>
	__asm volatile
 800c214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c218:	f383 8811 	msr	BASEPRI, r3
 800c21c:	f3bf 8f6f 	isb	sy
 800c220:	f3bf 8f4f 	dsb	sy
 800c224:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c226:	bf00      	nop
 800c228:	bf00      	nop
 800c22a:	e7fd      	b.n	800c228 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	2b02      	cmp	r3, #2
 800c230:	d103      	bne.n	800c23a <xQueueGenericSend+0x72>
 800c232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c236:	2b01      	cmp	r3, #1
 800c238:	d101      	bne.n	800c23e <xQueueGenericSend+0x76>
 800c23a:	2301      	movs	r3, #1
 800c23c:	e000      	b.n	800c240 <xQueueGenericSend+0x78>
 800c23e:	2300      	movs	r3, #0
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10b      	bne.n	800c25c <xQueueGenericSend+0x94>
	__asm volatile
 800c244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c248:	f383 8811 	msr	BASEPRI, r3
 800c24c:	f3bf 8f6f 	isb	sy
 800c250:	f3bf 8f4f 	dsb	sy
 800c254:	623b      	str	r3, [r7, #32]
}
 800c256:	bf00      	nop
 800c258:	bf00      	nop
 800c25a:	e7fd      	b.n	800c258 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c25c:	f001 fa26 	bl	800d6ac <xTaskGetSchedulerState>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d102      	bne.n	800c26c <xQueueGenericSend+0xa4>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d101      	bne.n	800c270 <xQueueGenericSend+0xa8>
 800c26c:	2301      	movs	r3, #1
 800c26e:	e000      	b.n	800c272 <xQueueGenericSend+0xaa>
 800c270:	2300      	movs	r3, #0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d10b      	bne.n	800c28e <xQueueGenericSend+0xc6>
	__asm volatile
 800c276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	61fb      	str	r3, [r7, #28]
}
 800c288:	bf00      	nop
 800c28a:	bf00      	nop
 800c28c:	e7fd      	b.n	800c28a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c28e:	f001 fd63 	bl	800dd58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d302      	bcc.n	800c2a4 <xQueueGenericSend+0xdc>
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	2b02      	cmp	r3, #2
 800c2a2:	d129      	bne.n	800c2f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2a4:	683a      	ldr	r2, [r7, #0]
 800c2a6:	68b9      	ldr	r1, [r7, #8]
 800c2a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c2aa:	f000 faed 	bl	800c888 <prvCopyDataToQueue>
 800c2ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d010      	beq.n	800c2da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ba:	3324      	adds	r3, #36	@ 0x24
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f001 f835 	bl	800d32c <xTaskRemoveFromEventList>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d013      	beq.n	800c2f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c2c8:	4b3f      	ldr	r3, [pc, #252]	@ (800c3c8 <xQueueGenericSend+0x200>)
 800c2ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2ce:	601a      	str	r2, [r3, #0]
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	e00a      	b.n	800c2f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c2da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d007      	beq.n	800c2f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c2e0:	4b39      	ldr	r3, [pc, #228]	@ (800c3c8 <xQueueGenericSend+0x200>)
 800c2e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2e6:	601a      	str	r2, [r3, #0]
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c2f0:	f001 fd64 	bl	800ddbc <vPortExitCritical>
				return pdPASS;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	e063      	b.n	800c3c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d103      	bne.n	800c306 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2fe:	f001 fd5d 	bl	800ddbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c302:	2300      	movs	r3, #0
 800c304:	e05c      	b.n	800c3c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d106      	bne.n	800c31a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c30c:	f107 0314 	add.w	r3, r7, #20
 800c310:	4618      	mov	r0, r3
 800c312:	f001 f86f 	bl	800d3f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c316:	2301      	movs	r3, #1
 800c318:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c31a:	f001 fd4f 	bl	800ddbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c31e:	f000 fe1d 	bl	800cf5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c322:	f001 fd19 	bl	800dd58 <vPortEnterCritical>
 800c326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c328:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c32c:	b25b      	sxtb	r3, r3
 800c32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c332:	d103      	bne.n	800c33c <xQueueGenericSend+0x174>
 800c334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c336:	2200      	movs	r2, #0
 800c338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c33e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c342:	b25b      	sxtb	r3, r3
 800c344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c348:	d103      	bne.n	800c352 <xQueueGenericSend+0x18a>
 800c34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c34c:	2200      	movs	r2, #0
 800c34e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c352:	f001 fd33 	bl	800ddbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c356:	1d3a      	adds	r2, r7, #4
 800c358:	f107 0314 	add.w	r3, r7, #20
 800c35c:	4611      	mov	r1, r2
 800c35e:	4618      	mov	r0, r3
 800c360:	f001 f85e 	bl	800d420 <xTaskCheckForTimeOut>
 800c364:	4603      	mov	r3, r0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d124      	bne.n	800c3b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c36a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c36c:	f000 fb84 	bl	800ca78 <prvIsQueueFull>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	d018      	beq.n	800c3a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c378:	3310      	adds	r3, #16
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	4611      	mov	r1, r2
 800c37e:	4618      	mov	r0, r3
 800c380:	f000 ffae 	bl	800d2e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c386:	f000 fb0f 	bl	800c9a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c38a:	f000 fdf5 	bl	800cf78 <xTaskResumeAll>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	f47f af7c 	bne.w	800c28e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c396:	4b0c      	ldr	r3, [pc, #48]	@ (800c3c8 <xQueueGenericSend+0x200>)
 800c398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c39c:	601a      	str	r2, [r3, #0]
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	f3bf 8f6f 	isb	sy
 800c3a6:	e772      	b.n	800c28e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c3a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3aa:	f000 fafd 	bl	800c9a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3ae:	f000 fde3 	bl	800cf78 <xTaskResumeAll>
 800c3b2:	e76c      	b.n	800c28e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c3b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3b6:	f000 faf7 	bl	800c9a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3ba:	f000 fddd 	bl	800cf78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c3be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3738      	adds	r7, #56	@ 0x38
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	e000ed04 	.word	0xe000ed04

0800c3cc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08e      	sub	sp, #56	@ 0x38
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10b      	bne.n	800c3f8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	623b      	str	r3, [r7, #32]
}
 800c3f2:	bf00      	nop
 800c3f4:	bf00      	nop
 800c3f6:	e7fd      	b.n	800c3f4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00b      	beq.n	800c418 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c404:	f383 8811 	msr	BASEPRI, r3
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	f3bf 8f4f 	dsb	sy
 800c410:	61fb      	str	r3, [r7, #28]
}
 800c412:	bf00      	nop
 800c414:	bf00      	nop
 800c416:	e7fd      	b.n	800c414 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d103      	bne.n	800c428 <xQueueGiveFromISR+0x5c>
 800c420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d101      	bne.n	800c42c <xQueueGiveFromISR+0x60>
 800c428:	2301      	movs	r3, #1
 800c42a:	e000      	b.n	800c42e <xQueueGiveFromISR+0x62>
 800c42c:	2300      	movs	r3, #0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10b      	bne.n	800c44a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	61bb      	str	r3, [r7, #24]
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop
 800c448:	e7fd      	b.n	800c446 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c44a:	f001 fd65 	bl	800df18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c44e:	f3ef 8211 	mrs	r2, BASEPRI
 800c452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c456:	f383 8811 	msr	BASEPRI, r3
 800c45a:	f3bf 8f6f 	isb	sy
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	617a      	str	r2, [r7, #20]
 800c464:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c466:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c468:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c46c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c46e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c476:	429a      	cmp	r2, r3
 800c478:	d22b      	bcs.n	800c4d2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c47c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c486:	1c5a      	adds	r2, r3, #1
 800c488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c48a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c48c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c494:	d112      	bne.n	800c4bc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d016      	beq.n	800c4cc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a0:	3324      	adds	r3, #36	@ 0x24
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f000 ff42 	bl	800d32c <xTaskRemoveFromEventList>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00e      	beq.n	800c4cc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00b      	beq.n	800c4cc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	601a      	str	r2, [r3, #0]
 800c4ba:	e007      	b.n	800c4cc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c4bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	b25a      	sxtb	r2, r3
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4d0:	e001      	b.n	800c4d6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c4e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c4e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3738      	adds	r7, #56	@ 0x38
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b08e      	sub	sp, #56	@ 0x38
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c4fe:	2300      	movs	r3, #0
 800c500:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10b      	bne.n	800c520 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c50c:	f383 8811 	msr	BASEPRI, r3
 800c510:	f3bf 8f6f 	isb	sy
 800c514:	f3bf 8f4f 	dsb	sy
 800c518:	623b      	str	r3, [r7, #32]
}
 800c51a:	bf00      	nop
 800c51c:	bf00      	nop
 800c51e:	e7fd      	b.n	800c51c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c524:	2b00      	cmp	r3, #0
 800c526:	d00b      	beq.n	800c540 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52c:	f383 8811 	msr	BASEPRI, r3
 800c530:	f3bf 8f6f 	isb	sy
 800c534:	f3bf 8f4f 	dsb	sy
 800c538:	61fb      	str	r3, [r7, #28]
}
 800c53a:	bf00      	nop
 800c53c:	bf00      	nop
 800c53e:	e7fd      	b.n	800c53c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c540:	f001 f8b4 	bl	800d6ac <xTaskGetSchedulerState>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d102      	bne.n	800c550 <xQueueSemaphoreTake+0x64>
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d101      	bne.n	800c554 <xQueueSemaphoreTake+0x68>
 800c550:	2301      	movs	r3, #1
 800c552:	e000      	b.n	800c556 <xQueueSemaphoreTake+0x6a>
 800c554:	2300      	movs	r3, #0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10b      	bne.n	800c572 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c55e:	f383 8811 	msr	BASEPRI, r3
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	f3bf 8f4f 	dsb	sy
 800c56a:	61bb      	str	r3, [r7, #24]
}
 800c56c:	bf00      	nop
 800c56e:	bf00      	nop
 800c570:	e7fd      	b.n	800c56e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c572:	f001 fbf1 	bl	800dd58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c57a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d024      	beq.n	800c5cc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c584:	1e5a      	subs	r2, r3, #1
 800c586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c588:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c58a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d104      	bne.n	800c59c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c592:	f001 fa37 	bl	800da04 <pvTaskIncrementMutexHeldCount>
 800c596:	4602      	mov	r2, r0
 800c598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c59a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00f      	beq.n	800c5c4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5a6:	3310      	adds	r3, #16
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f000 febf 	bl	800d32c <xTaskRemoveFromEventList>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d007      	beq.n	800c5c4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5b4:	4b54      	ldr	r3, [pc, #336]	@ (800c708 <xQueueSemaphoreTake+0x21c>)
 800c5b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5ba:	601a      	str	r2, [r3, #0]
 800c5bc:	f3bf 8f4f 	dsb	sy
 800c5c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5c4:	f001 fbfa 	bl	800ddbc <vPortExitCritical>
				return pdPASS;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e098      	b.n	800c6fe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d112      	bne.n	800c5f8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d00b      	beq.n	800c5f0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800c5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5dc:	f383 8811 	msr	BASEPRI, r3
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	f3bf 8f4f 	dsb	sy
 800c5e8:	617b      	str	r3, [r7, #20]
}
 800c5ea:	bf00      	nop
 800c5ec:	bf00      	nop
 800c5ee:	e7fd      	b.n	800c5ec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c5f0:	f001 fbe4 	bl	800ddbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	e082      	b.n	800c6fe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c5f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d106      	bne.n	800c60c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c5fe:	f107 030c 	add.w	r3, r7, #12
 800c602:	4618      	mov	r0, r3
 800c604:	f000 fef6 	bl	800d3f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c608:	2301      	movs	r3, #1
 800c60a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c60c:	f001 fbd6 	bl	800ddbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c610:	f000 fca4 	bl	800cf5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c614:	f001 fba0 	bl	800dd58 <vPortEnterCritical>
 800c618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c61a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c61e:	b25b      	sxtb	r3, r3
 800c620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c624:	d103      	bne.n	800c62e <xQueueSemaphoreTake+0x142>
 800c626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c628:	2200      	movs	r2, #0
 800c62a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c630:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c634:	b25b      	sxtb	r3, r3
 800c636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c63a:	d103      	bne.n	800c644 <xQueueSemaphoreTake+0x158>
 800c63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c63e:	2200      	movs	r2, #0
 800c640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c644:	f001 fbba 	bl	800ddbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c648:	463a      	mov	r2, r7
 800c64a:	f107 030c 	add.w	r3, r7, #12
 800c64e:	4611      	mov	r1, r2
 800c650:	4618      	mov	r0, r3
 800c652:	f000 fee5 	bl	800d420 <xTaskCheckForTimeOut>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d132      	bne.n	800c6c2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c65c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c65e:	f000 f9f5 	bl	800ca4c <prvIsQueueEmpty>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d026      	beq.n	800c6b6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d109      	bne.n	800c684 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c670:	f001 fb72 	bl	800dd58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	4618      	mov	r0, r3
 800c67a:	f001 f835 	bl	800d6e8 <xTaskPriorityInherit>
 800c67e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c680:	f001 fb9c 	bl	800ddbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c686:	3324      	adds	r3, #36	@ 0x24
 800c688:	683a      	ldr	r2, [r7, #0]
 800c68a:	4611      	mov	r1, r2
 800c68c:	4618      	mov	r0, r3
 800c68e:	f000 fe27 	bl	800d2e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c692:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c694:	f000 f988 	bl	800c9a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c698:	f000 fc6e 	bl	800cf78 <xTaskResumeAll>
 800c69c:	4603      	mov	r3, r0
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	f47f af67 	bne.w	800c572 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c6a4:	4b18      	ldr	r3, [pc, #96]	@ (800c708 <xQueueSemaphoreTake+0x21c>)
 800c6a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6aa:	601a      	str	r2, [r3, #0]
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	f3bf 8f6f 	isb	sy
 800c6b4:	e75d      	b.n	800c572 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c6b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6b8:	f000 f976 	bl	800c9a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6bc:	f000 fc5c 	bl	800cf78 <xTaskResumeAll>
 800c6c0:	e757      	b.n	800c572 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c6c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6c4:	f000 f970 	bl	800c9a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6c8:	f000 fc56 	bl	800cf78 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6ce:	f000 f9bd 	bl	800ca4c <prvIsQueueEmpty>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f43f af4c 	beq.w	800c572 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00d      	beq.n	800c6fc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c6e0:	f001 fb3a 	bl	800dd58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c6e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c6e6:	f000 f8b7 	bl	800c858 <prvGetDisinheritPriorityAfterTimeout>
 800c6ea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f001 f8f6 	bl	800d8e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c6f8:	f001 fb60 	bl	800ddbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c6fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3738      	adds	r7, #56	@ 0x38
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	e000ed04 	.word	0xe000ed04

0800c70c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b08e      	sub	sp, #56	@ 0x38
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10b      	bne.n	800c73a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	623b      	str	r3, [r7, #32]
}
 800c734:	bf00      	nop
 800c736:	bf00      	nop
 800c738:	e7fd      	b.n	800c736 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d103      	bne.n	800c748 <xQueueReceiveFromISR+0x3c>
 800c740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c744:	2b00      	cmp	r3, #0
 800c746:	d101      	bne.n	800c74c <xQueueReceiveFromISR+0x40>
 800c748:	2301      	movs	r3, #1
 800c74a:	e000      	b.n	800c74e <xQueueReceiveFromISR+0x42>
 800c74c:	2300      	movs	r3, #0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10b      	bne.n	800c76a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	61fb      	str	r3, [r7, #28]
}
 800c764:	bf00      	nop
 800c766:	bf00      	nop
 800c768:	e7fd      	b.n	800c766 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c76a:	f001 fbd5 	bl	800df18 <vPortValidateInterruptPriority>
	__asm volatile
 800c76e:	f3ef 8211 	mrs	r2, BASEPRI
 800c772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c776:	f383 8811 	msr	BASEPRI, r3
 800c77a:	f3bf 8f6f 	isb	sy
 800c77e:	f3bf 8f4f 	dsb	sy
 800c782:	61ba      	str	r2, [r7, #24]
 800c784:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c786:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c788:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c78c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c78e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c792:	2b00      	cmp	r3, #0
 800c794:	d02f      	beq.n	800c7f6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c798:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c79c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7a0:	68b9      	ldr	r1, [r7, #8]
 800c7a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c7a4:	f000 f8da 	bl	800c95c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7aa:	1e5a      	subs	r2, r3, #1
 800c7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c7b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b8:	d112      	bne.n	800c7e0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d016      	beq.n	800c7f0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c4:	3310      	adds	r3, #16
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f000 fdb0 	bl	800d32c <xTaskRemoveFromEventList>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d00e      	beq.n	800c7f0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d00b      	beq.n	800c7f0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	601a      	str	r2, [r3, #0]
 800c7de:	e007      	b.n	800c7f0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c7e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	b25a      	sxtb	r2, r3
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7f4:	e001      	b.n	800c7fa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	f383 8811 	msr	BASEPRI, r3
}
 800c804:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3738      	adds	r7, #56	@ 0x38
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d10b      	bne.n	800c83a <vQueueDelete+0x2a>
	__asm volatile
 800c822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c826:	f383 8811 	msr	BASEPRI, r3
 800c82a:	f3bf 8f6f 	isb	sy
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	60bb      	str	r3, [r7, #8]
}
 800c834:	bf00      	nop
 800c836:	bf00      	nop
 800c838:	e7fd      	b.n	800c836 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f000 f934 	bl	800caa8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c846:	2b00      	cmp	r3, #0
 800c848:	d102      	bne.n	800c850 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800c84a:	68f8      	ldr	r0, [r7, #12]
 800c84c:	f001 fc74 	bl	800e138 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c850:	bf00      	nop
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c864:	2b00      	cmp	r3, #0
 800c866:	d006      	beq.n	800c876 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f1c3 0307 	rsb	r3, r3, #7
 800c872:	60fb      	str	r3, [r7, #12]
 800c874:	e001      	b.n	800c87a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c876:	2300      	movs	r3, #0
 800c878:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c87a:	68fb      	ldr	r3, [r7, #12]
	}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b086      	sub	sp, #24
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c894:	2300      	movs	r3, #0
 800c896:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c89c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d10d      	bne.n	800c8c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d14d      	bne.n	800c94a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 ff8e 	bl	800d7d4 <xTaskPriorityDisinherit>
 800c8b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	609a      	str	r2, [r3, #8]
 800c8c0:	e043      	b.n	800c94a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d119      	bne.n	800c8fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6858      	ldr	r0, [r3, #4]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	68b9      	ldr	r1, [r7, #8]
 800c8d4:	f001 fda4 	bl	800e420 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	685a      	ldr	r2, [r3, #4]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8e0:	441a      	add	r2, r3
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	685a      	ldr	r2, [r3, #4]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d32b      	bcc.n	800c94a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	605a      	str	r2, [r3, #4]
 800c8fa:	e026      	b.n	800c94a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	68d8      	ldr	r0, [r3, #12]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c904:	461a      	mov	r2, r3
 800c906:	68b9      	ldr	r1, [r7, #8]
 800c908:	f001 fd8a 	bl	800e420 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	68da      	ldr	r2, [r3, #12]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c914:	425b      	negs	r3, r3
 800c916:	441a      	add	r2, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	68da      	ldr	r2, [r3, #12]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	429a      	cmp	r2, r3
 800c926:	d207      	bcs.n	800c938 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	689a      	ldr	r2, [r3, #8]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c930:	425b      	negs	r3, r3
 800c932:	441a      	add	r2, r3
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d105      	bne.n	800c94a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d002      	beq.n	800c94a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	3b01      	subs	r3, #1
 800c948:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	1c5a      	adds	r2, r3, #1
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c952:	697b      	ldr	r3, [r7, #20]
}
 800c954:	4618      	mov	r0, r3
 800c956:	3718      	adds	r7, #24
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d018      	beq.n	800c9a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	68da      	ldr	r2, [r3, #12]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c976:	441a      	add	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	68da      	ldr	r2, [r3, #12]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	429a      	cmp	r2, r3
 800c986:	d303      	bcc.n	800c990 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	68d9      	ldr	r1, [r3, #12]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c998:	461a      	mov	r2, r3
 800c99a:	6838      	ldr	r0, [r7, #0]
 800c99c:	f001 fd40 	bl	800e420 <memcpy>
	}
}
 800c9a0:	bf00      	nop
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c9b0:	f001 f9d2 	bl	800dd58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c9ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9bc:	e011      	b.n	800c9e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d012      	beq.n	800c9ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	3324      	adds	r3, #36	@ 0x24
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f000 fcae 	bl	800d32c <xTaskRemoveFromEventList>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d001      	beq.n	800c9da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c9d6:	f000 fd87 	bl	800d4e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c9da:	7bfb      	ldrb	r3, [r7, #15]
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	dce9      	bgt.n	800c9be <prvUnlockQueue+0x16>
 800c9ea:	e000      	b.n	800c9ee <prvUnlockQueue+0x46>
					break;
 800c9ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	22ff      	movs	r2, #255	@ 0xff
 800c9f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c9f6:	f001 f9e1 	bl	800ddbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c9fa:	f001 f9ad 	bl	800dd58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca06:	e011      	b.n	800ca2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	691b      	ldr	r3, [r3, #16]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d012      	beq.n	800ca36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	3310      	adds	r3, #16
 800ca14:	4618      	mov	r0, r3
 800ca16:	f000 fc89 	bl	800d32c <xTaskRemoveFromEventList>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d001      	beq.n	800ca24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca20:	f000 fd62 	bl	800d4e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca24:	7bbb      	ldrb	r3, [r7, #14]
 800ca26:	3b01      	subs	r3, #1
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	dce9      	bgt.n	800ca08 <prvUnlockQueue+0x60>
 800ca34:	e000      	b.n	800ca38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	22ff      	movs	r2, #255	@ 0xff
 800ca3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ca40:	f001 f9bc 	bl	800ddbc <vPortExitCritical>
}
 800ca44:	bf00      	nop
 800ca46:	3710      	adds	r7, #16
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca54:	f001 f980 	bl	800dd58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d102      	bne.n	800ca66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca60:	2301      	movs	r3, #1
 800ca62:	60fb      	str	r3, [r7, #12]
 800ca64:	e001      	b.n	800ca6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca66:	2300      	movs	r3, #0
 800ca68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca6a:	f001 f9a7 	bl	800ddbc <vPortExitCritical>

	return xReturn;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3710      	adds	r7, #16
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca80:	f001 f96a 	bl	800dd58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d102      	bne.n	800ca96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca90:	2301      	movs	r3, #1
 800ca92:	60fb      	str	r3, [r7, #12]
 800ca94:	e001      	b.n	800ca9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca96:	2300      	movs	r3, #0
 800ca98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca9a:	f001 f98f 	bl	800ddbc <vPortExitCritical>

	return xReturn;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3710      	adds	r7, #16
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800caa8:	b480      	push	{r7}
 800caaa:	b085      	sub	sp, #20
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cab0:	2300      	movs	r3, #0
 800cab2:	60fb      	str	r3, [r7, #12]
 800cab4:	e016      	b.n	800cae4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cab6:	4a10      	ldr	r2, [pc, #64]	@ (800caf8 <vQueueUnregisterQueue+0x50>)
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	00db      	lsls	r3, r3, #3
 800cabc:	4413      	add	r3, r2
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d10b      	bne.n	800cade <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cac6:	4a0c      	ldr	r2, [pc, #48]	@ (800caf8 <vQueueUnregisterQueue+0x50>)
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2100      	movs	r1, #0
 800cacc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cad0:	4a09      	ldr	r2, [pc, #36]	@ (800caf8 <vQueueUnregisterQueue+0x50>)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	00db      	lsls	r3, r3, #3
 800cad6:	4413      	add	r3, r2
 800cad8:	2200      	movs	r2, #0
 800cada:	605a      	str	r2, [r3, #4]
				break;
 800cadc:	e006      	b.n	800caec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	3301      	adds	r3, #1
 800cae2:	60fb      	str	r3, [r7, #12]
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2b07      	cmp	r3, #7
 800cae8:	d9e5      	bls.n	800cab6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800caea:	bf00      	nop
 800caec:	bf00      	nop
 800caee:	3714      	adds	r7, #20
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr
 800caf8:	20000d7c 	.word	0x20000d7c

0800cafc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b08e      	sub	sp, #56	@ 0x38
 800cb00:	af04      	add	r7, sp, #16
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
 800cb08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d10b      	bne.n	800cb28 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cb10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb14:	f383 8811 	msr	BASEPRI, r3
 800cb18:	f3bf 8f6f 	isb	sy
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	623b      	str	r3, [r7, #32]
}
 800cb22:	bf00      	nop
 800cb24:	bf00      	nop
 800cb26:	e7fd      	b.n	800cb24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cb28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d10b      	bne.n	800cb46 <xTaskCreateStatic+0x4a>
	__asm volatile
 800cb2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb32:	f383 8811 	msr	BASEPRI, r3
 800cb36:	f3bf 8f6f 	isb	sy
 800cb3a:	f3bf 8f4f 	dsb	sy
 800cb3e:	61fb      	str	r3, [r7, #28]
}
 800cb40:	bf00      	nop
 800cb42:	bf00      	nop
 800cb44:	e7fd      	b.n	800cb42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb46:	2354      	movs	r3, #84	@ 0x54
 800cb48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	2b54      	cmp	r3, #84	@ 0x54
 800cb4e:	d00b      	beq.n	800cb68 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	61bb      	str	r3, [r7, #24]
}
 800cb62:	bf00      	nop
 800cb64:	bf00      	nop
 800cb66:	e7fd      	b.n	800cb64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cb68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d01e      	beq.n	800cbae <xTaskCreateStatic+0xb2>
 800cb70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d01b      	beq.n	800cbae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb82:	2202      	movs	r2, #2
 800cb84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb88:	2300      	movs	r3, #0
 800cb8a:	9303      	str	r3, [sp, #12]
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8e:	9302      	str	r3, [sp, #8]
 800cb90:	f107 0314 	add.w	r3, r7, #20
 800cb94:	9301      	str	r3, [sp, #4]
 800cb96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb98:	9300      	str	r3, [sp, #0]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	68b9      	ldr	r1, [r7, #8]
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f000 f850 	bl	800cc46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cba6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cba8:	f000 f8d6 	bl	800cd58 <prvAddNewTaskToReadyList>
 800cbac:	e001      	b.n	800cbb2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cbb2:	697b      	ldr	r3, [r7, #20]
	}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3728      	adds	r7, #40	@ 0x28
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b08c      	sub	sp, #48	@ 0x30
 800cbc0:	af04      	add	r7, sp, #16
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	603b      	str	r3, [r7, #0]
 800cbc8:	4613      	mov	r3, r2
 800cbca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cbcc:	88fb      	ldrh	r3, [r7, #6]
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f001 f9e3 	bl	800df9c <pvPortMalloc>
 800cbd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d00e      	beq.n	800cbfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cbde:	2054      	movs	r0, #84	@ 0x54
 800cbe0:	f001 f9dc 	bl	800df9c <pvPortMalloc>
 800cbe4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d003      	beq.n	800cbf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	697a      	ldr	r2, [r7, #20]
 800cbf0:	631a      	str	r2, [r3, #48]	@ 0x30
 800cbf2:	e005      	b.n	800cc00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cbf4:	6978      	ldr	r0, [r7, #20]
 800cbf6:	f001 fa9f 	bl	800e138 <vPortFree>
 800cbfa:	e001      	b.n	800cc00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d017      	beq.n	800cc36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc0e:	88fa      	ldrh	r2, [r7, #6]
 800cc10:	2300      	movs	r3, #0
 800cc12:	9303      	str	r3, [sp, #12]
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	9302      	str	r3, [sp, #8]
 800cc18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc1a:	9301      	str	r3, [sp, #4]
 800cc1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc1e:	9300      	str	r3, [sp, #0]
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	68b9      	ldr	r1, [r7, #8]
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f000 f80e 	bl	800cc46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc2a:	69f8      	ldr	r0, [r7, #28]
 800cc2c:	f000 f894 	bl	800cd58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc30:	2301      	movs	r3, #1
 800cc32:	61bb      	str	r3, [r7, #24]
 800cc34:	e002      	b.n	800cc3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc36:	f04f 33ff 	mov.w	r3, #4294967295
 800cc3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc3c:	69bb      	ldr	r3, [r7, #24]
	}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3720      	adds	r7, #32
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b088      	sub	sp, #32
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	60f8      	str	r0, [r7, #12]
 800cc4e:	60b9      	str	r1, [r7, #8]
 800cc50:	607a      	str	r2, [r7, #4]
 800cc52:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc5e:	3b01      	subs	r3, #1
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	4413      	add	r3, r2
 800cc64:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	f023 0307 	bic.w	r3, r3, #7
 800cc6c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc6e:	69bb      	ldr	r3, [r7, #24]
 800cc70:	f003 0307 	and.w	r3, r3, #7
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00b      	beq.n	800cc90 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800cc78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc7c:	f383 8811 	msr	BASEPRI, r3
 800cc80:	f3bf 8f6f 	isb	sy
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	617b      	str	r3, [r7, #20]
}
 800cc8a:	bf00      	nop
 800cc8c:	bf00      	nop
 800cc8e:	e7fd      	b.n	800cc8c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d01f      	beq.n	800ccd6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc96:	2300      	movs	r3, #0
 800cc98:	61fb      	str	r3, [r7, #28]
 800cc9a:	e012      	b.n	800ccc2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	4413      	add	r3, r2
 800cca2:	7819      	ldrb	r1, [r3, #0]
 800cca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cca6:	69fb      	ldr	r3, [r7, #28]
 800cca8:	4413      	add	r3, r2
 800ccaa:	3334      	adds	r3, #52	@ 0x34
 800ccac:	460a      	mov	r2, r1
 800ccae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ccb0:	68ba      	ldr	r2, [r7, #8]
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	4413      	add	r3, r2
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d006      	beq.n	800ccca <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	61fb      	str	r3, [r7, #28]
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	2b0f      	cmp	r3, #15
 800ccc6:	d9e9      	bls.n	800cc9c <prvInitialiseNewTask+0x56>
 800ccc8:	e000      	b.n	800cccc <prvInitialiseNewTask+0x86>
			{
				break;
 800ccca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ccd4:	e003      	b.n	800ccde <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd8:	2200      	movs	r2, #0
 800ccda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ccde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cce0:	2b06      	cmp	r3, #6
 800cce2:	d901      	bls.n	800cce8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cce4:	2306      	movs	r3, #6
 800cce6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ccee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccf2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccfc:	3304      	adds	r3, #4
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7ff f88b 	bl	800be1a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd06:	3318      	adds	r3, #24
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7ff f886 	bl	800be1a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd16:	f1c3 0207 	rsb	r2, r3, #7
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd22:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd26:	2200      	movs	r2, #0
 800cd28:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd32:	683a      	ldr	r2, [r7, #0]
 800cd34:	68f9      	ldr	r1, [r7, #12]
 800cd36:	69b8      	ldr	r0, [r7, #24]
 800cd38:	f000 fede 	bl	800daf8 <pxPortInitialiseStack>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cd42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d002      	beq.n	800cd4e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd4e:	bf00      	nop
 800cd50:	3720      	adds	r7, #32
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
	...

0800cd58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd60:	f000 fffa 	bl	800dd58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd64:	4b2a      	ldr	r3, [pc, #168]	@ (800ce10 <prvAddNewTaskToReadyList+0xb8>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	4a29      	ldr	r2, [pc, #164]	@ (800ce10 <prvAddNewTaskToReadyList+0xb8>)
 800cd6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd6e:	4b29      	ldr	r3, [pc, #164]	@ (800ce14 <prvAddNewTaskToReadyList+0xbc>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d109      	bne.n	800cd8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd76:	4a27      	ldr	r2, [pc, #156]	@ (800ce14 <prvAddNewTaskToReadyList+0xbc>)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cd7c:	4b24      	ldr	r3, [pc, #144]	@ (800ce10 <prvAddNewTaskToReadyList+0xb8>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d110      	bne.n	800cda6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cd84:	f000 fbd4 	bl	800d530 <prvInitialiseTaskLists>
 800cd88:	e00d      	b.n	800cda6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cd8a:	4b23      	ldr	r3, [pc, #140]	@ (800ce18 <prvAddNewTaskToReadyList+0xc0>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d109      	bne.n	800cda6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cd92:	4b20      	ldr	r3, [pc, #128]	@ (800ce14 <prvAddNewTaskToReadyList+0xbc>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d802      	bhi.n	800cda6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cda0:	4a1c      	ldr	r2, [pc, #112]	@ (800ce14 <prvAddNewTaskToReadyList+0xbc>)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cda6:	4b1d      	ldr	r3, [pc, #116]	@ (800ce1c <prvAddNewTaskToReadyList+0xc4>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	4a1b      	ldr	r2, [pc, #108]	@ (800ce1c <prvAddNewTaskToReadyList+0xc4>)
 800cdae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	409a      	lsls	r2, r3
 800cdb8:	4b19      	ldr	r3, [pc, #100]	@ (800ce20 <prvAddNewTaskToReadyList+0xc8>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	4a18      	ldr	r2, [pc, #96]	@ (800ce20 <prvAddNewTaskToReadyList+0xc8>)
 800cdc0:	6013      	str	r3, [r2, #0]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdc6:	4613      	mov	r3, r2
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	4413      	add	r3, r2
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	4a15      	ldr	r2, [pc, #84]	@ (800ce24 <prvAddNewTaskToReadyList+0xcc>)
 800cdd0:	441a      	add	r2, r3
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	3304      	adds	r3, #4
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	4610      	mov	r0, r2
 800cdda:	f7ff f82b 	bl	800be34 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cdde:	f000 ffed 	bl	800ddbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cde2:	4b0d      	ldr	r3, [pc, #52]	@ (800ce18 <prvAddNewTaskToReadyList+0xc0>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00e      	beq.n	800ce08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cdea:	4b0a      	ldr	r3, [pc, #40]	@ (800ce14 <prvAddNewTaskToReadyList+0xbc>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdf4:	429a      	cmp	r2, r3
 800cdf6:	d207      	bcs.n	800ce08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cdf8:	4b0b      	ldr	r3, [pc, #44]	@ (800ce28 <prvAddNewTaskToReadyList+0xd0>)
 800cdfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdfe:	601a      	str	r2, [r3, #0]
 800ce00:	f3bf 8f4f 	dsb	sy
 800ce04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce08:	bf00      	nop
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	20000ebc 	.word	0x20000ebc
 800ce14:	20000dbc 	.word	0x20000dbc
 800ce18:	20000ec8 	.word	0x20000ec8
 800ce1c:	20000ed8 	.word	0x20000ed8
 800ce20:	20000ec4 	.word	0x20000ec4
 800ce24:	20000dc0 	.word	0x20000dc0
 800ce28:	e000ed04 	.word	0xe000ed04

0800ce2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce34:	2300      	movs	r3, #0
 800ce36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d018      	beq.n	800ce70 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ce3e:	4b14      	ldr	r3, [pc, #80]	@ (800ce90 <vTaskDelay+0x64>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00b      	beq.n	800ce5e <vTaskDelay+0x32>
	__asm volatile
 800ce46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce4a:	f383 8811 	msr	BASEPRI, r3
 800ce4e:	f3bf 8f6f 	isb	sy
 800ce52:	f3bf 8f4f 	dsb	sy
 800ce56:	60bb      	str	r3, [r7, #8]
}
 800ce58:	bf00      	nop
 800ce5a:	bf00      	nop
 800ce5c:	e7fd      	b.n	800ce5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ce5e:	f000 f87d 	bl	800cf5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ce62:	2100      	movs	r1, #0
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 fde1 	bl	800da2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ce6a:	f000 f885 	bl	800cf78 <xTaskResumeAll>
 800ce6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d107      	bne.n	800ce86 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ce76:	4b07      	ldr	r3, [pc, #28]	@ (800ce94 <vTaskDelay+0x68>)
 800ce78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce7c:	601a      	str	r2, [r3, #0]
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce86:	bf00      	nop
 800ce88:	3710      	adds	r7, #16
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	20000ee4 	.word	0x20000ee4
 800ce94:	e000ed04 	.word	0xe000ed04

0800ce98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b08a      	sub	sp, #40	@ 0x28
 800ce9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cea2:	2300      	movs	r3, #0
 800cea4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cea6:	463a      	mov	r2, r7
 800cea8:	1d39      	adds	r1, r7, #4
 800ceaa:	f107 0308 	add.w	r3, r7, #8
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7f4 fe3c 	bl	8001b2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ceb4:	6839      	ldr	r1, [r7, #0]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	68ba      	ldr	r2, [r7, #8]
 800ceba:	9202      	str	r2, [sp, #8]
 800cebc:	9301      	str	r3, [sp, #4]
 800cebe:	2300      	movs	r3, #0
 800cec0:	9300      	str	r3, [sp, #0]
 800cec2:	2300      	movs	r3, #0
 800cec4:	460a      	mov	r2, r1
 800cec6:	491f      	ldr	r1, [pc, #124]	@ (800cf44 <vTaskStartScheduler+0xac>)
 800cec8:	481f      	ldr	r0, [pc, #124]	@ (800cf48 <vTaskStartScheduler+0xb0>)
 800ceca:	f7ff fe17 	bl	800cafc <xTaskCreateStatic>
 800cece:	4603      	mov	r3, r0
 800ced0:	4a1e      	ldr	r2, [pc, #120]	@ (800cf4c <vTaskStartScheduler+0xb4>)
 800ced2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ced4:	4b1d      	ldr	r3, [pc, #116]	@ (800cf4c <vTaskStartScheduler+0xb4>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d002      	beq.n	800cee2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cedc:	2301      	movs	r3, #1
 800cede:	617b      	str	r3, [r7, #20]
 800cee0:	e001      	b.n	800cee6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cee2:	2300      	movs	r3, #0
 800cee4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d116      	bne.n	800cf1a <vTaskStartScheduler+0x82>
	__asm volatile
 800ceec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef0:	f383 8811 	msr	BASEPRI, r3
 800cef4:	f3bf 8f6f 	isb	sy
 800cef8:	f3bf 8f4f 	dsb	sy
 800cefc:	613b      	str	r3, [r7, #16]
}
 800cefe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf00:	4b13      	ldr	r3, [pc, #76]	@ (800cf50 <vTaskStartScheduler+0xb8>)
 800cf02:	f04f 32ff 	mov.w	r2, #4294967295
 800cf06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf08:	4b12      	ldr	r3, [pc, #72]	@ (800cf54 <vTaskStartScheduler+0xbc>)
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf0e:	4b12      	ldr	r3, [pc, #72]	@ (800cf58 <vTaskStartScheduler+0xc0>)
 800cf10:	2200      	movs	r2, #0
 800cf12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf14:	f000 fe7c 	bl	800dc10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf18:	e00f      	b.n	800cf3a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf20:	d10b      	bne.n	800cf3a <vTaskStartScheduler+0xa2>
	__asm volatile
 800cf22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf26:	f383 8811 	msr	BASEPRI, r3
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	60fb      	str	r3, [r7, #12]
}
 800cf34:	bf00      	nop
 800cf36:	bf00      	nop
 800cf38:	e7fd      	b.n	800cf36 <vTaskStartScheduler+0x9e>
}
 800cf3a:	bf00      	nop
 800cf3c:	3718      	adds	r7, #24
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	0800f8f8 	.word	0x0800f8f8
 800cf48:	0800d501 	.word	0x0800d501
 800cf4c:	20000ee0 	.word	0x20000ee0
 800cf50:	20000edc 	.word	0x20000edc
 800cf54:	20000ec8 	.word	0x20000ec8
 800cf58:	20000ec0 	.word	0x20000ec0

0800cf5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cf60:	4b04      	ldr	r3, [pc, #16]	@ (800cf74 <vTaskSuspendAll+0x18>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	3301      	adds	r3, #1
 800cf66:	4a03      	ldr	r2, [pc, #12]	@ (800cf74 <vTaskSuspendAll+0x18>)
 800cf68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cf6a:	bf00      	nop
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr
 800cf74:	20000ee4 	.word	0x20000ee4

0800cf78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cf82:	2300      	movs	r3, #0
 800cf84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cf86:	4b42      	ldr	r3, [pc, #264]	@ (800d090 <xTaskResumeAll+0x118>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10b      	bne.n	800cfa6 <xTaskResumeAll+0x2e>
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	603b      	str	r3, [r7, #0]
}
 800cfa0:	bf00      	nop
 800cfa2:	bf00      	nop
 800cfa4:	e7fd      	b.n	800cfa2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cfa6:	f000 fed7 	bl	800dd58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cfaa:	4b39      	ldr	r3, [pc, #228]	@ (800d090 <xTaskResumeAll+0x118>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	4a37      	ldr	r2, [pc, #220]	@ (800d090 <xTaskResumeAll+0x118>)
 800cfb2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfb4:	4b36      	ldr	r3, [pc, #216]	@ (800d090 <xTaskResumeAll+0x118>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d161      	bne.n	800d080 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cfbc:	4b35      	ldr	r3, [pc, #212]	@ (800d094 <xTaskResumeAll+0x11c>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d05d      	beq.n	800d080 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cfc4:	e02e      	b.n	800d024 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfc6:	4b34      	ldr	r3, [pc, #208]	@ (800d098 <xTaskResumeAll+0x120>)
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	68db      	ldr	r3, [r3, #12]
 800cfcc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	3318      	adds	r3, #24
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fe ff8b 	bl	800beee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	3304      	adds	r3, #4
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7fe ff86 	bl	800beee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	409a      	lsls	r2, r3
 800cfea:	4b2c      	ldr	r3, [pc, #176]	@ (800d09c <xTaskResumeAll+0x124>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4313      	orrs	r3, r2
 800cff0:	4a2a      	ldr	r2, [pc, #168]	@ (800d09c <xTaskResumeAll+0x124>)
 800cff2:	6013      	str	r3, [r2, #0]
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cff8:	4613      	mov	r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4413      	add	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4a27      	ldr	r2, [pc, #156]	@ (800d0a0 <xTaskResumeAll+0x128>)
 800d002:	441a      	add	r2, r3
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	3304      	adds	r3, #4
 800d008:	4619      	mov	r1, r3
 800d00a:	4610      	mov	r0, r2
 800d00c:	f7fe ff12 	bl	800be34 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d014:	4b23      	ldr	r3, [pc, #140]	@ (800d0a4 <xTaskResumeAll+0x12c>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d302      	bcc.n	800d024 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d01e:	4b22      	ldr	r3, [pc, #136]	@ (800d0a8 <xTaskResumeAll+0x130>)
 800d020:	2201      	movs	r2, #1
 800d022:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d024:	4b1c      	ldr	r3, [pc, #112]	@ (800d098 <xTaskResumeAll+0x120>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1cc      	bne.n	800cfc6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d001      	beq.n	800d036 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d032:	f000 fb1b 	bl	800d66c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d036:	4b1d      	ldr	r3, [pc, #116]	@ (800d0ac <xTaskResumeAll+0x134>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d010      	beq.n	800d064 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d042:	f000 f837 	bl	800d0b4 <xTaskIncrementTick>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d002      	beq.n	800d052 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d04c:	4b16      	ldr	r3, [pc, #88]	@ (800d0a8 <xTaskResumeAll+0x130>)
 800d04e:	2201      	movs	r2, #1
 800d050:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	3b01      	subs	r3, #1
 800d056:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d1f1      	bne.n	800d042 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d05e:	4b13      	ldr	r3, [pc, #76]	@ (800d0ac <xTaskResumeAll+0x134>)
 800d060:	2200      	movs	r2, #0
 800d062:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d064:	4b10      	ldr	r3, [pc, #64]	@ (800d0a8 <xTaskResumeAll+0x130>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d009      	beq.n	800d080 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d06c:	2301      	movs	r3, #1
 800d06e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d070:	4b0f      	ldr	r3, [pc, #60]	@ (800d0b0 <xTaskResumeAll+0x138>)
 800d072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d076:	601a      	str	r2, [r3, #0]
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d080:	f000 fe9c 	bl	800ddbc <vPortExitCritical>

	return xAlreadyYielded;
 800d084:	68bb      	ldr	r3, [r7, #8]
}
 800d086:	4618      	mov	r0, r3
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	20000ee4 	.word	0x20000ee4
 800d094:	20000ebc 	.word	0x20000ebc
 800d098:	20000e7c 	.word	0x20000e7c
 800d09c:	20000ec4 	.word	0x20000ec4
 800d0a0:	20000dc0 	.word	0x20000dc0
 800d0a4:	20000dbc 	.word	0x20000dbc
 800d0a8:	20000ed0 	.word	0x20000ed0
 800d0ac:	20000ecc 	.word	0x20000ecc
 800d0b0:	e000ed04 	.word	0xe000ed04

0800d0b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b086      	sub	sp, #24
 800d0b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0be:	4b4f      	ldr	r3, [pc, #316]	@ (800d1fc <xTaskIncrementTick+0x148>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f040 808f 	bne.w	800d1e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d0c8:	4b4d      	ldr	r3, [pc, #308]	@ (800d200 <xTaskIncrementTick+0x14c>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d0d0:	4a4b      	ldr	r2, [pc, #300]	@ (800d200 <xTaskIncrementTick+0x14c>)
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d121      	bne.n	800d120 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d0dc:	4b49      	ldr	r3, [pc, #292]	@ (800d204 <xTaskIncrementTick+0x150>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00b      	beq.n	800d0fe <xTaskIncrementTick+0x4a>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	603b      	str	r3, [r7, #0]
}
 800d0f8:	bf00      	nop
 800d0fa:	bf00      	nop
 800d0fc:	e7fd      	b.n	800d0fa <xTaskIncrementTick+0x46>
 800d0fe:	4b41      	ldr	r3, [pc, #260]	@ (800d204 <xTaskIncrementTick+0x150>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	60fb      	str	r3, [r7, #12]
 800d104:	4b40      	ldr	r3, [pc, #256]	@ (800d208 <xTaskIncrementTick+0x154>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a3e      	ldr	r2, [pc, #248]	@ (800d204 <xTaskIncrementTick+0x150>)
 800d10a:	6013      	str	r3, [r2, #0]
 800d10c:	4a3e      	ldr	r2, [pc, #248]	@ (800d208 <xTaskIncrementTick+0x154>)
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	6013      	str	r3, [r2, #0]
 800d112:	4b3e      	ldr	r3, [pc, #248]	@ (800d20c <xTaskIncrementTick+0x158>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	3301      	adds	r3, #1
 800d118:	4a3c      	ldr	r2, [pc, #240]	@ (800d20c <xTaskIncrementTick+0x158>)
 800d11a:	6013      	str	r3, [r2, #0]
 800d11c:	f000 faa6 	bl	800d66c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d120:	4b3b      	ldr	r3, [pc, #236]	@ (800d210 <xTaskIncrementTick+0x15c>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	693a      	ldr	r2, [r7, #16]
 800d126:	429a      	cmp	r2, r3
 800d128:	d348      	bcc.n	800d1bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d12a:	4b36      	ldr	r3, [pc, #216]	@ (800d204 <xTaskIncrementTick+0x150>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d104      	bne.n	800d13e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d134:	4b36      	ldr	r3, [pc, #216]	@ (800d210 <xTaskIncrementTick+0x15c>)
 800d136:	f04f 32ff 	mov.w	r2, #4294967295
 800d13a:	601a      	str	r2, [r3, #0]
					break;
 800d13c:	e03e      	b.n	800d1bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d13e:	4b31      	ldr	r3, [pc, #196]	@ (800d204 <xTaskIncrementTick+0x150>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d14e:	693a      	ldr	r2, [r7, #16]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	429a      	cmp	r2, r3
 800d154:	d203      	bcs.n	800d15e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d156:	4a2e      	ldr	r2, [pc, #184]	@ (800d210 <xTaskIncrementTick+0x15c>)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d15c:	e02e      	b.n	800d1bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	3304      	adds	r3, #4
 800d162:	4618      	mov	r0, r3
 800d164:	f7fe fec3 	bl	800beee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d004      	beq.n	800d17a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	3318      	adds	r3, #24
 800d174:	4618      	mov	r0, r3
 800d176:	f7fe feba 	bl	800beee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d17e:	2201      	movs	r2, #1
 800d180:	409a      	lsls	r2, r3
 800d182:	4b24      	ldr	r3, [pc, #144]	@ (800d214 <xTaskIncrementTick+0x160>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4313      	orrs	r3, r2
 800d188:	4a22      	ldr	r2, [pc, #136]	@ (800d214 <xTaskIncrementTick+0x160>)
 800d18a:	6013      	str	r3, [r2, #0]
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d190:	4613      	mov	r3, r2
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	4413      	add	r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4a1f      	ldr	r2, [pc, #124]	@ (800d218 <xTaskIncrementTick+0x164>)
 800d19a:	441a      	add	r2, r3
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	3304      	adds	r3, #4
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	4610      	mov	r0, r2
 800d1a4:	f7fe fe46 	bl	800be34 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1ac:	4b1b      	ldr	r3, [pc, #108]	@ (800d21c <xTaskIncrementTick+0x168>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d3b9      	bcc.n	800d12a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1ba:	e7b6      	b.n	800d12a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d1bc:	4b17      	ldr	r3, [pc, #92]	@ (800d21c <xTaskIncrementTick+0x168>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1c2:	4915      	ldr	r1, [pc, #84]	@ (800d218 <xTaskIncrementTick+0x164>)
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	4413      	add	r3, r2
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	440b      	add	r3, r1
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d901      	bls.n	800d1d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d1d8:	4b11      	ldr	r3, [pc, #68]	@ (800d220 <xTaskIncrementTick+0x16c>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d007      	beq.n	800d1f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	617b      	str	r3, [r7, #20]
 800d1e4:	e004      	b.n	800d1f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800d224 <xTaskIncrementTick+0x170>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	4a0d      	ldr	r2, [pc, #52]	@ (800d224 <xTaskIncrementTick+0x170>)
 800d1ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d1f0:	697b      	ldr	r3, [r7, #20]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3718      	adds	r7, #24
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	20000ee4 	.word	0x20000ee4
 800d200:	20000ec0 	.word	0x20000ec0
 800d204:	20000e74 	.word	0x20000e74
 800d208:	20000e78 	.word	0x20000e78
 800d20c:	20000ed4 	.word	0x20000ed4
 800d210:	20000edc 	.word	0x20000edc
 800d214:	20000ec4 	.word	0x20000ec4
 800d218:	20000dc0 	.word	0x20000dc0
 800d21c:	20000dbc 	.word	0x20000dbc
 800d220:	20000ed0 	.word	0x20000ed0
 800d224:	20000ecc 	.word	0x20000ecc

0800d228 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d228:	b480      	push	{r7}
 800d22a:	b087      	sub	sp, #28
 800d22c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d22e:	4b27      	ldr	r3, [pc, #156]	@ (800d2cc <vTaskSwitchContext+0xa4>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d003      	beq.n	800d23e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d236:	4b26      	ldr	r3, [pc, #152]	@ (800d2d0 <vTaskSwitchContext+0xa8>)
 800d238:	2201      	movs	r2, #1
 800d23a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d23c:	e040      	b.n	800d2c0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800d23e:	4b24      	ldr	r3, [pc, #144]	@ (800d2d0 <vTaskSwitchContext+0xa8>)
 800d240:	2200      	movs	r2, #0
 800d242:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d244:	4b23      	ldr	r3, [pc, #140]	@ (800d2d4 <vTaskSwitchContext+0xac>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	fab3 f383 	clz	r3, r3
 800d250:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d252:	7afb      	ldrb	r3, [r7, #11]
 800d254:	f1c3 031f 	rsb	r3, r3, #31
 800d258:	617b      	str	r3, [r7, #20]
 800d25a:	491f      	ldr	r1, [pc, #124]	@ (800d2d8 <vTaskSwitchContext+0xb0>)
 800d25c:	697a      	ldr	r2, [r7, #20]
 800d25e:	4613      	mov	r3, r2
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	4413      	add	r3, r2
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	440b      	add	r3, r1
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d10b      	bne.n	800d286 <vTaskSwitchContext+0x5e>
	__asm volatile
 800d26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d272:	f383 8811 	msr	BASEPRI, r3
 800d276:	f3bf 8f6f 	isb	sy
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	607b      	str	r3, [r7, #4]
}
 800d280:	bf00      	nop
 800d282:	bf00      	nop
 800d284:	e7fd      	b.n	800d282 <vTaskSwitchContext+0x5a>
 800d286:	697a      	ldr	r2, [r7, #20]
 800d288:	4613      	mov	r3, r2
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	4413      	add	r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	4a11      	ldr	r2, [pc, #68]	@ (800d2d8 <vTaskSwitchContext+0xb0>)
 800d292:	4413      	add	r3, r2
 800d294:	613b      	str	r3, [r7, #16]
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	685a      	ldr	r2, [r3, #4]
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	605a      	str	r2, [r3, #4]
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	685a      	ldr	r2, [r3, #4]
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	3308      	adds	r3, #8
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d104      	bne.n	800d2b6 <vTaskSwitchContext+0x8e>
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	685a      	ldr	r2, [r3, #4]
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	605a      	str	r2, [r3, #4]
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	4a07      	ldr	r2, [pc, #28]	@ (800d2dc <vTaskSwitchContext+0xb4>)
 800d2be:	6013      	str	r3, [r2, #0]
}
 800d2c0:	bf00      	nop
 800d2c2:	371c      	adds	r7, #28
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr
 800d2cc:	20000ee4 	.word	0x20000ee4
 800d2d0:	20000ed0 	.word	0x20000ed0
 800d2d4:	20000ec4 	.word	0x20000ec4
 800d2d8:	20000dc0 	.word	0x20000dc0
 800d2dc:	20000dbc 	.word	0x20000dbc

0800d2e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d10b      	bne.n	800d308 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f4:	f383 8811 	msr	BASEPRI, r3
 800d2f8:	f3bf 8f6f 	isb	sy
 800d2fc:	f3bf 8f4f 	dsb	sy
 800d300:	60fb      	str	r3, [r7, #12]
}
 800d302:	bf00      	nop
 800d304:	bf00      	nop
 800d306:	e7fd      	b.n	800d304 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d308:	4b07      	ldr	r3, [pc, #28]	@ (800d328 <vTaskPlaceOnEventList+0x48>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	3318      	adds	r3, #24
 800d30e:	4619      	mov	r1, r3
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f7fe fdb3 	bl	800be7c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d316:	2101      	movs	r1, #1
 800d318:	6838      	ldr	r0, [r7, #0]
 800d31a:	f000 fb87 	bl	800da2c <prvAddCurrentTaskToDelayedList>
}
 800d31e:	bf00      	nop
 800d320:	3710      	adds	r7, #16
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	20000dbc 	.word	0x20000dbc

0800d32c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b086      	sub	sp, #24
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	68db      	ldr	r3, [r3, #12]
 800d33a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d10b      	bne.n	800d35a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d346:	f383 8811 	msr	BASEPRI, r3
 800d34a:	f3bf 8f6f 	isb	sy
 800d34e:	f3bf 8f4f 	dsb	sy
 800d352:	60fb      	str	r3, [r7, #12]
}
 800d354:	bf00      	nop
 800d356:	bf00      	nop
 800d358:	e7fd      	b.n	800d356 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	3318      	adds	r3, #24
 800d35e:	4618      	mov	r0, r3
 800d360:	f7fe fdc5 	bl	800beee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d364:	4b1d      	ldr	r3, [pc, #116]	@ (800d3dc <xTaskRemoveFromEventList+0xb0>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d11c      	bne.n	800d3a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	3304      	adds	r3, #4
 800d370:	4618      	mov	r0, r3
 800d372:	f7fe fdbc 	bl	800beee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d37a:	2201      	movs	r2, #1
 800d37c:	409a      	lsls	r2, r3
 800d37e:	4b18      	ldr	r3, [pc, #96]	@ (800d3e0 <xTaskRemoveFromEventList+0xb4>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4313      	orrs	r3, r2
 800d384:	4a16      	ldr	r2, [pc, #88]	@ (800d3e0 <xTaskRemoveFromEventList+0xb4>)
 800d386:	6013      	str	r3, [r2, #0]
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d38c:	4613      	mov	r3, r2
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	4413      	add	r3, r2
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	4a13      	ldr	r2, [pc, #76]	@ (800d3e4 <xTaskRemoveFromEventList+0xb8>)
 800d396:	441a      	add	r2, r3
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	3304      	adds	r3, #4
 800d39c:	4619      	mov	r1, r3
 800d39e:	4610      	mov	r0, r2
 800d3a0:	f7fe fd48 	bl	800be34 <vListInsertEnd>
 800d3a4:	e005      	b.n	800d3b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	3318      	adds	r3, #24
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	480e      	ldr	r0, [pc, #56]	@ (800d3e8 <xTaskRemoveFromEventList+0xbc>)
 800d3ae:	f7fe fd41 	bl	800be34 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800d3ec <xTaskRemoveFromEventList+0xc0>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d905      	bls.n	800d3cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d3c4:	4b0a      	ldr	r3, [pc, #40]	@ (800d3f0 <xTaskRemoveFromEventList+0xc4>)
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	601a      	str	r2, [r3, #0]
 800d3ca:	e001      	b.n	800d3d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d3d0:	697b      	ldr	r3, [r7, #20]
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3718      	adds	r7, #24
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	20000ee4 	.word	0x20000ee4
 800d3e0:	20000ec4 	.word	0x20000ec4
 800d3e4:	20000dc0 	.word	0x20000dc0
 800d3e8:	20000e7c 	.word	0x20000e7c
 800d3ec:	20000dbc 	.word	0x20000dbc
 800d3f0:	20000ed0 	.word	0x20000ed0

0800d3f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b083      	sub	sp, #12
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d3fc:	4b06      	ldr	r3, [pc, #24]	@ (800d418 <vTaskInternalSetTimeOutState+0x24>)
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d404:	4b05      	ldr	r3, [pc, #20]	@ (800d41c <vTaskInternalSetTimeOutState+0x28>)
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	605a      	str	r2, [r3, #4]
}
 800d40c:	bf00      	nop
 800d40e:	370c      	adds	r7, #12
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr
 800d418:	20000ed4 	.word	0x20000ed4
 800d41c:	20000ec0 	.word	0x20000ec0

0800d420 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b088      	sub	sp, #32
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d10b      	bne.n	800d448 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d434:	f383 8811 	msr	BASEPRI, r3
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	f3bf 8f4f 	dsb	sy
 800d440:	613b      	str	r3, [r7, #16]
}
 800d442:	bf00      	nop
 800d444:	bf00      	nop
 800d446:	e7fd      	b.n	800d444 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d10b      	bne.n	800d466 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d452:	f383 8811 	msr	BASEPRI, r3
 800d456:	f3bf 8f6f 	isb	sy
 800d45a:	f3bf 8f4f 	dsb	sy
 800d45e:	60fb      	str	r3, [r7, #12]
}
 800d460:	bf00      	nop
 800d462:	bf00      	nop
 800d464:	e7fd      	b.n	800d462 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d466:	f000 fc77 	bl	800dd58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d46a:	4b1d      	ldr	r3, [pc, #116]	@ (800d4e0 <xTaskCheckForTimeOut+0xc0>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	69ba      	ldr	r2, [r7, #24]
 800d476:	1ad3      	subs	r3, r2, r3
 800d478:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d482:	d102      	bne.n	800d48a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d484:	2300      	movs	r3, #0
 800d486:	61fb      	str	r3, [r7, #28]
 800d488:	e023      	b.n	800d4d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	4b15      	ldr	r3, [pc, #84]	@ (800d4e4 <xTaskCheckForTimeOut+0xc4>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	429a      	cmp	r2, r3
 800d494:	d007      	beq.n	800d4a6 <xTaskCheckForTimeOut+0x86>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	69ba      	ldr	r2, [r7, #24]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d302      	bcc.n	800d4a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	61fb      	str	r3, [r7, #28]
 800d4a4:	e015      	b.n	800d4d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	697a      	ldr	r2, [r7, #20]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d20b      	bcs.n	800d4c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	681a      	ldr	r2, [r3, #0]
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	1ad2      	subs	r2, r2, r3
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f7ff ff99 	bl	800d3f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	61fb      	str	r3, [r7, #28]
 800d4c6:	e004      	b.n	800d4d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d4d2:	f000 fc73 	bl	800ddbc <vPortExitCritical>

	return xReturn;
 800d4d6:	69fb      	ldr	r3, [r7, #28]
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3720      	adds	r7, #32
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	20000ec0 	.word	0x20000ec0
 800d4e4:	20000ed4 	.word	0x20000ed4

0800d4e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d4ec:	4b03      	ldr	r3, [pc, #12]	@ (800d4fc <vTaskMissedYield+0x14>)
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	601a      	str	r2, [r3, #0]
}
 800d4f2:	bf00      	nop
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr
 800d4fc:	20000ed0 	.word	0x20000ed0

0800d500 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d508:	f000 f852 	bl	800d5b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d50c:	4b06      	ldr	r3, [pc, #24]	@ (800d528 <prvIdleTask+0x28>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d9f9      	bls.n	800d508 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d514:	4b05      	ldr	r3, [pc, #20]	@ (800d52c <prvIdleTask+0x2c>)
 800d516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d51a:	601a      	str	r2, [r3, #0]
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d524:	e7f0      	b.n	800d508 <prvIdleTask+0x8>
 800d526:	bf00      	nop
 800d528:	20000dc0 	.word	0x20000dc0
 800d52c:	e000ed04 	.word	0xe000ed04

0800d530 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d536:	2300      	movs	r3, #0
 800d538:	607b      	str	r3, [r7, #4]
 800d53a:	e00c      	b.n	800d556 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	4613      	mov	r3, r2
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	4413      	add	r3, r2
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	4a12      	ldr	r2, [pc, #72]	@ (800d590 <prvInitialiseTaskLists+0x60>)
 800d548:	4413      	add	r3, r2
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7fe fc45 	bl	800bdda <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	3301      	adds	r3, #1
 800d554:	607b      	str	r3, [r7, #4]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2b06      	cmp	r3, #6
 800d55a:	d9ef      	bls.n	800d53c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d55c:	480d      	ldr	r0, [pc, #52]	@ (800d594 <prvInitialiseTaskLists+0x64>)
 800d55e:	f7fe fc3c 	bl	800bdda <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d562:	480d      	ldr	r0, [pc, #52]	@ (800d598 <prvInitialiseTaskLists+0x68>)
 800d564:	f7fe fc39 	bl	800bdda <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d568:	480c      	ldr	r0, [pc, #48]	@ (800d59c <prvInitialiseTaskLists+0x6c>)
 800d56a:	f7fe fc36 	bl	800bdda <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d56e:	480c      	ldr	r0, [pc, #48]	@ (800d5a0 <prvInitialiseTaskLists+0x70>)
 800d570:	f7fe fc33 	bl	800bdda <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d574:	480b      	ldr	r0, [pc, #44]	@ (800d5a4 <prvInitialiseTaskLists+0x74>)
 800d576:	f7fe fc30 	bl	800bdda <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d57a:	4b0b      	ldr	r3, [pc, #44]	@ (800d5a8 <prvInitialiseTaskLists+0x78>)
 800d57c:	4a05      	ldr	r2, [pc, #20]	@ (800d594 <prvInitialiseTaskLists+0x64>)
 800d57e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d580:	4b0a      	ldr	r3, [pc, #40]	@ (800d5ac <prvInitialiseTaskLists+0x7c>)
 800d582:	4a05      	ldr	r2, [pc, #20]	@ (800d598 <prvInitialiseTaskLists+0x68>)
 800d584:	601a      	str	r2, [r3, #0]
}
 800d586:	bf00      	nop
 800d588:	3708      	adds	r7, #8
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	20000dc0 	.word	0x20000dc0
 800d594:	20000e4c 	.word	0x20000e4c
 800d598:	20000e60 	.word	0x20000e60
 800d59c:	20000e7c 	.word	0x20000e7c
 800d5a0:	20000e90 	.word	0x20000e90
 800d5a4:	20000ea8 	.word	0x20000ea8
 800d5a8:	20000e74 	.word	0x20000e74
 800d5ac:	20000e78 	.word	0x20000e78

0800d5b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d5b6:	e019      	b.n	800d5ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d5b8:	f000 fbce 	bl	800dd58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5bc:	4b10      	ldr	r3, [pc, #64]	@ (800d600 <prvCheckTasksWaitingTermination+0x50>)
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	3304      	adds	r3, #4
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7fe fc90 	bl	800beee <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d5ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d604 <prvCheckTasksWaitingTermination+0x54>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	3b01      	subs	r3, #1
 800d5d4:	4a0b      	ldr	r2, [pc, #44]	@ (800d604 <prvCheckTasksWaitingTermination+0x54>)
 800d5d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d5d8:	4b0b      	ldr	r3, [pc, #44]	@ (800d608 <prvCheckTasksWaitingTermination+0x58>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3b01      	subs	r3, #1
 800d5de:	4a0a      	ldr	r2, [pc, #40]	@ (800d608 <prvCheckTasksWaitingTermination+0x58>)
 800d5e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d5e2:	f000 fbeb 	bl	800ddbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 f810 	bl	800d60c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d5ec:	4b06      	ldr	r3, [pc, #24]	@ (800d608 <prvCheckTasksWaitingTermination+0x58>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d1e1      	bne.n	800d5b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d5f4:	bf00      	nop
 800d5f6:	bf00      	nop
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	20000e90 	.word	0x20000e90
 800d604:	20000ebc 	.word	0x20000ebc
 800d608:	20000ea4 	.word	0x20000ea4

0800d60c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d108      	bne.n	800d630 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d622:	4618      	mov	r0, r3
 800d624:	f000 fd88 	bl	800e138 <vPortFree>
				vPortFree( pxTCB );
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 fd85 	bl	800e138 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d62e:	e019      	b.n	800d664 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d636:	2b01      	cmp	r3, #1
 800d638:	d103      	bne.n	800d642 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 fd7c 	bl	800e138 <vPortFree>
	}
 800d640:	e010      	b.n	800d664 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d648:	2b02      	cmp	r3, #2
 800d64a:	d00b      	beq.n	800d664 <prvDeleteTCB+0x58>
	__asm volatile
 800d64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d650:	f383 8811 	msr	BASEPRI, r3
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	f3bf 8f4f 	dsb	sy
 800d65c:	60fb      	str	r3, [r7, #12]
}
 800d65e:	bf00      	nop
 800d660:	bf00      	nop
 800d662:	e7fd      	b.n	800d660 <prvDeleteTCB+0x54>
	}
 800d664:	bf00      	nop
 800d666:	3710      	adds	r7, #16
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d672:	4b0c      	ldr	r3, [pc, #48]	@ (800d6a4 <prvResetNextTaskUnblockTime+0x38>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d104      	bne.n	800d686 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d67c:	4b0a      	ldr	r3, [pc, #40]	@ (800d6a8 <prvResetNextTaskUnblockTime+0x3c>)
 800d67e:	f04f 32ff 	mov.w	r2, #4294967295
 800d682:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d684:	e008      	b.n	800d698 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d686:	4b07      	ldr	r3, [pc, #28]	@ (800d6a4 <prvResetNextTaskUnblockTime+0x38>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	68db      	ldr	r3, [r3, #12]
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	4a04      	ldr	r2, [pc, #16]	@ (800d6a8 <prvResetNextTaskUnblockTime+0x3c>)
 800d696:	6013      	str	r3, [r2, #0]
}
 800d698:	bf00      	nop
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr
 800d6a4:	20000e74 	.word	0x20000e74
 800d6a8:	20000edc 	.word	0x20000edc

0800d6ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d6b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d6e0 <xTaskGetSchedulerState+0x34>)
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d102      	bne.n	800d6c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	607b      	str	r3, [r7, #4]
 800d6be:	e008      	b.n	800d6d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6c0:	4b08      	ldr	r3, [pc, #32]	@ (800d6e4 <xTaskGetSchedulerState+0x38>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d102      	bne.n	800d6ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d6c8:	2302      	movs	r3, #2
 800d6ca:	607b      	str	r3, [r7, #4]
 800d6cc:	e001      	b.n	800d6d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d6d2:	687b      	ldr	r3, [r7, #4]
	}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	370c      	adds	r7, #12
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr
 800d6e0:	20000ec8 	.word	0x20000ec8
 800d6e4:	20000ee4 	.word	0x20000ee4

0800d6e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d05e      	beq.n	800d7bc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d702:	4b31      	ldr	r3, [pc, #196]	@ (800d7c8 <xTaskPriorityInherit+0xe0>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d708:	429a      	cmp	r2, r3
 800d70a:	d24e      	bcs.n	800d7aa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	699b      	ldr	r3, [r3, #24]
 800d710:	2b00      	cmp	r3, #0
 800d712:	db06      	blt.n	800d722 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d714:	4b2c      	ldr	r3, [pc, #176]	@ (800d7c8 <xTaskPriorityInherit+0xe0>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d71a:	f1c3 0207 	rsb	r2, r3, #7
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	6959      	ldr	r1, [r3, #20]
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d72a:	4613      	mov	r3, r2
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	4413      	add	r3, r2
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	4a26      	ldr	r2, [pc, #152]	@ (800d7cc <xTaskPriorityInherit+0xe4>)
 800d734:	4413      	add	r3, r2
 800d736:	4299      	cmp	r1, r3
 800d738:	d12f      	bne.n	800d79a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	3304      	adds	r3, #4
 800d73e:	4618      	mov	r0, r3
 800d740:	f7fe fbd5 	bl	800beee <uxListRemove>
 800d744:	4603      	mov	r3, r0
 800d746:	2b00      	cmp	r3, #0
 800d748:	d10a      	bne.n	800d760 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d74e:	2201      	movs	r2, #1
 800d750:	fa02 f303 	lsl.w	r3, r2, r3
 800d754:	43da      	mvns	r2, r3
 800d756:	4b1e      	ldr	r3, [pc, #120]	@ (800d7d0 <xTaskPriorityInherit+0xe8>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4013      	ands	r3, r2
 800d75c:	4a1c      	ldr	r2, [pc, #112]	@ (800d7d0 <xTaskPriorityInherit+0xe8>)
 800d75e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d760:	4b19      	ldr	r3, [pc, #100]	@ (800d7c8 <xTaskPriorityInherit+0xe0>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d76e:	2201      	movs	r2, #1
 800d770:	409a      	lsls	r2, r3
 800d772:	4b17      	ldr	r3, [pc, #92]	@ (800d7d0 <xTaskPriorityInherit+0xe8>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4313      	orrs	r3, r2
 800d778:	4a15      	ldr	r2, [pc, #84]	@ (800d7d0 <xTaskPriorityInherit+0xe8>)
 800d77a:	6013      	str	r3, [r2, #0]
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d780:	4613      	mov	r3, r2
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	4413      	add	r3, r2
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	4a10      	ldr	r2, [pc, #64]	@ (800d7cc <xTaskPriorityInherit+0xe4>)
 800d78a:	441a      	add	r2, r3
 800d78c:	68bb      	ldr	r3, [r7, #8]
 800d78e:	3304      	adds	r3, #4
 800d790:	4619      	mov	r1, r3
 800d792:	4610      	mov	r0, r2
 800d794:	f7fe fb4e 	bl	800be34 <vListInsertEnd>
 800d798:	e004      	b.n	800d7a4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d79a:	4b0b      	ldr	r3, [pc, #44]	@ (800d7c8 <xTaskPriorityInherit+0xe0>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	60fb      	str	r3, [r7, #12]
 800d7a8:	e008      	b.n	800d7bc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d7ae:	4b06      	ldr	r3, [pc, #24]	@ (800d7c8 <xTaskPriorityInherit+0xe0>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d201      	bcs.n	800d7bc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
	}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3710      	adds	r7, #16
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	20000dbc 	.word	0x20000dbc
 800d7cc:	20000dc0 	.word	0x20000dc0
 800d7d0:	20000ec4 	.word	0x20000ec4

0800d7d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b086      	sub	sp, #24
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d070      	beq.n	800d8cc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d7ea:	4b3b      	ldr	r3, [pc, #236]	@ (800d8d8 <xTaskPriorityDisinherit+0x104>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	693a      	ldr	r2, [r7, #16]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d00b      	beq.n	800d80c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f8:	f383 8811 	msr	BASEPRI, r3
 800d7fc:	f3bf 8f6f 	isb	sy
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	60fb      	str	r3, [r7, #12]
}
 800d806:	bf00      	nop
 800d808:	bf00      	nop
 800d80a:	e7fd      	b.n	800d808 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10b      	bne.n	800d82c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
 800d824:	60bb      	str	r3, [r7, #8]
}
 800d826:	bf00      	nop
 800d828:	bf00      	nop
 800d82a:	e7fd      	b.n	800d828 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d830:	1e5a      	subs	r2, r3, #1
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d83e:	429a      	cmp	r2, r3
 800d840:	d044      	beq.n	800d8cc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d846:	2b00      	cmp	r3, #0
 800d848:	d140      	bne.n	800d8cc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	3304      	adds	r3, #4
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fe fb4d 	bl	800beee <uxListRemove>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d115      	bne.n	800d886 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d85e:	491f      	ldr	r1, [pc, #124]	@ (800d8dc <xTaskPriorityDisinherit+0x108>)
 800d860:	4613      	mov	r3, r2
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	4413      	add	r3, r2
 800d866:	009b      	lsls	r3, r3, #2
 800d868:	440b      	add	r3, r1
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d10a      	bne.n	800d886 <xTaskPriorityDisinherit+0xb2>
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d874:	2201      	movs	r2, #1
 800d876:	fa02 f303 	lsl.w	r3, r2, r3
 800d87a:	43da      	mvns	r2, r3
 800d87c:	4b18      	ldr	r3, [pc, #96]	@ (800d8e0 <xTaskPriorityDisinherit+0x10c>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4013      	ands	r3, r2
 800d882:	4a17      	ldr	r2, [pc, #92]	@ (800d8e0 <xTaskPriorityDisinherit+0x10c>)
 800d884:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d892:	f1c3 0207 	rsb	r2, r3, #7
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d89e:	2201      	movs	r2, #1
 800d8a0:	409a      	lsls	r2, r3
 800d8a2:	4b0f      	ldr	r3, [pc, #60]	@ (800d8e0 <xTaskPriorityDisinherit+0x10c>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	4a0d      	ldr	r2, [pc, #52]	@ (800d8e0 <xTaskPriorityDisinherit+0x10c>)
 800d8aa:	6013      	str	r3, [r2, #0]
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8b0:	4613      	mov	r3, r2
 800d8b2:	009b      	lsls	r3, r3, #2
 800d8b4:	4413      	add	r3, r2
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	4a08      	ldr	r2, [pc, #32]	@ (800d8dc <xTaskPriorityDisinherit+0x108>)
 800d8ba:	441a      	add	r2, r3
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	3304      	adds	r3, #4
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	4610      	mov	r0, r2
 800d8c4:	f7fe fab6 	bl	800be34 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d8cc:	697b      	ldr	r3, [r7, #20]
	}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3718      	adds	r7, #24
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	20000dbc 	.word	0x20000dbc
 800d8dc:	20000dc0 	.word	0x20000dc0
 800d8e0:	20000ec4 	.word	0x20000ec4

0800d8e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b088      	sub	sp, #32
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d079      	beq.n	800d9f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d900:	2b00      	cmp	r3, #0
 800d902:	d10b      	bne.n	800d91c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d908:	f383 8811 	msr	BASEPRI, r3
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	60fb      	str	r3, [r7, #12]
}
 800d916:	bf00      	nop
 800d918:	bf00      	nop
 800d91a:	e7fd      	b.n	800d918 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d920:	683a      	ldr	r2, [r7, #0]
 800d922:	429a      	cmp	r2, r3
 800d924:	d902      	bls.n	800d92c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	61fb      	str	r3, [r7, #28]
 800d92a:	e002      	b.n	800d932 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d930:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d936:	69fa      	ldr	r2, [r7, #28]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d059      	beq.n	800d9f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d940:	697a      	ldr	r2, [r7, #20]
 800d942:	429a      	cmp	r2, r3
 800d944:	d154      	bne.n	800d9f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d946:	4b2c      	ldr	r3, [pc, #176]	@ (800d9f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	69ba      	ldr	r2, [r7, #24]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d10b      	bne.n	800d968 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800d950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d954:	f383 8811 	msr	BASEPRI, r3
 800d958:	f3bf 8f6f 	isb	sy
 800d95c:	f3bf 8f4f 	dsb	sy
 800d960:	60bb      	str	r3, [r7, #8]
}
 800d962:	bf00      	nop
 800d964:	bf00      	nop
 800d966:	e7fd      	b.n	800d964 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d968:	69bb      	ldr	r3, [r7, #24]
 800d96a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d96c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	69fa      	ldr	r2, [r7, #28]
 800d972:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d974:	69bb      	ldr	r3, [r7, #24]
 800d976:	699b      	ldr	r3, [r3, #24]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	db04      	blt.n	800d986 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	f1c3 0207 	rsb	r2, r3, #7
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	6959      	ldr	r1, [r3, #20]
 800d98a:	693a      	ldr	r2, [r7, #16]
 800d98c:	4613      	mov	r3, r2
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	4413      	add	r3, r2
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	4a19      	ldr	r2, [pc, #100]	@ (800d9fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d996:	4413      	add	r3, r2
 800d998:	4299      	cmp	r1, r3
 800d99a:	d129      	bne.n	800d9f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	3304      	adds	r3, #4
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7fe faa4 	bl	800beee <uxListRemove>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d10a      	bne.n	800d9c2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d9b6:	43da      	mvns	r2, r3
 800d9b8:	4b11      	ldr	r3, [pc, #68]	@ (800da00 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4013      	ands	r3, r2
 800d9be:	4a10      	ldr	r2, [pc, #64]	@ (800da00 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d9c0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	409a      	lsls	r2, r3
 800d9ca:	4b0d      	ldr	r3, [pc, #52]	@ (800da00 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	4a0b      	ldr	r2, [pc, #44]	@ (800da00 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d9d2:	6013      	str	r3, [r2, #0]
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9d8:	4613      	mov	r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4413      	add	r3, r2
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	4a06      	ldr	r2, [pc, #24]	@ (800d9fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d9e2:	441a      	add	r2, r3
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	3304      	adds	r3, #4
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	4610      	mov	r0, r2
 800d9ec:	f7fe fa22 	bl	800be34 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d9f0:	bf00      	nop
 800d9f2:	3720      	adds	r7, #32
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	20000dbc 	.word	0x20000dbc
 800d9fc:	20000dc0 	.word	0x20000dc0
 800da00:	20000ec4 	.word	0x20000ec4

0800da04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800da04:	b480      	push	{r7}
 800da06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800da08:	4b07      	ldr	r3, [pc, #28]	@ (800da28 <pvTaskIncrementMutexHeldCount+0x24>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d004      	beq.n	800da1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800da10:	4b05      	ldr	r3, [pc, #20]	@ (800da28 <pvTaskIncrementMutexHeldCount+0x24>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800da16:	3201      	adds	r2, #1
 800da18:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800da1a:	4b03      	ldr	r3, [pc, #12]	@ (800da28 <pvTaskIncrementMutexHeldCount+0x24>)
 800da1c:	681b      	ldr	r3, [r3, #0]
	}
 800da1e:	4618      	mov	r0, r3
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr
 800da28:	20000dbc 	.word	0x20000dbc

0800da2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800da36:	4b29      	ldr	r3, [pc, #164]	@ (800dadc <prvAddCurrentTaskToDelayedList+0xb0>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da3c:	4b28      	ldr	r3, [pc, #160]	@ (800dae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	3304      	adds	r3, #4
 800da42:	4618      	mov	r0, r3
 800da44:	f7fe fa53 	bl	800beee <uxListRemove>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d10b      	bne.n	800da66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800da4e:	4b24      	ldr	r3, [pc, #144]	@ (800dae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da54:	2201      	movs	r2, #1
 800da56:	fa02 f303 	lsl.w	r3, r2, r3
 800da5a:	43da      	mvns	r2, r3
 800da5c:	4b21      	ldr	r3, [pc, #132]	@ (800dae4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4013      	ands	r3, r2
 800da62:	4a20      	ldr	r2, [pc, #128]	@ (800dae4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800da64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da6c:	d10a      	bne.n	800da84 <prvAddCurrentTaskToDelayedList+0x58>
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d007      	beq.n	800da84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da74:	4b1a      	ldr	r3, [pc, #104]	@ (800dae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	3304      	adds	r3, #4
 800da7a:	4619      	mov	r1, r3
 800da7c:	481a      	ldr	r0, [pc, #104]	@ (800dae8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800da7e:	f7fe f9d9 	bl	800be34 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800da82:	e026      	b.n	800dad2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800da84:	68fa      	ldr	r2, [r7, #12]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	4413      	add	r3, r2
 800da8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800da8c:	4b14      	ldr	r3, [pc, #80]	@ (800dae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800da94:	68ba      	ldr	r2, [r7, #8]
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d209      	bcs.n	800dab0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da9c:	4b13      	ldr	r3, [pc, #76]	@ (800daec <prvAddCurrentTaskToDelayedList+0xc0>)
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	4b0f      	ldr	r3, [pc, #60]	@ (800dae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	3304      	adds	r3, #4
 800daa6:	4619      	mov	r1, r3
 800daa8:	4610      	mov	r0, r2
 800daaa:	f7fe f9e7 	bl	800be7c <vListInsert>
}
 800daae:	e010      	b.n	800dad2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dab0:	4b0f      	ldr	r3, [pc, #60]	@ (800daf0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dab2:	681a      	ldr	r2, [r3, #0]
 800dab4:	4b0a      	ldr	r3, [pc, #40]	@ (800dae0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	3304      	adds	r3, #4
 800daba:	4619      	mov	r1, r3
 800dabc:	4610      	mov	r0, r2
 800dabe:	f7fe f9dd 	bl	800be7c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dac2:	4b0c      	ldr	r3, [pc, #48]	@ (800daf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	68ba      	ldr	r2, [r7, #8]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d202      	bcs.n	800dad2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dacc:	4a09      	ldr	r2, [pc, #36]	@ (800daf4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	6013      	str	r3, [r2, #0]
}
 800dad2:	bf00      	nop
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	20000ec0 	.word	0x20000ec0
 800dae0:	20000dbc 	.word	0x20000dbc
 800dae4:	20000ec4 	.word	0x20000ec4
 800dae8:	20000ea8 	.word	0x20000ea8
 800daec:	20000e78 	.word	0x20000e78
 800daf0:	20000e74 	.word	0x20000e74
 800daf4:	20000edc 	.word	0x20000edc

0800daf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800daf8:	b480      	push	{r7}
 800dafa:	b085      	sub	sp, #20
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	3b04      	subs	r3, #4
 800db08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800db10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	3b04      	subs	r3, #4
 800db16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	f023 0201 	bic.w	r2, r3, #1
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	3b04      	subs	r3, #4
 800db26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800db28:	4a0c      	ldr	r2, [pc, #48]	@ (800db5c <pxPortInitialiseStack+0x64>)
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	3b14      	subs	r3, #20
 800db32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	3b04      	subs	r3, #4
 800db3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f06f 0202 	mvn.w	r2, #2
 800db46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	3b20      	subs	r3, #32
 800db4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800db4e:	68fb      	ldr	r3, [r7, #12]
}
 800db50:	4618      	mov	r0, r3
 800db52:	3714      	adds	r7, #20
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr
 800db5c:	0800db61 	.word	0x0800db61

0800db60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800db60:	b480      	push	{r7}
 800db62:	b085      	sub	sp, #20
 800db64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800db66:	2300      	movs	r3, #0
 800db68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800db6a:	4b13      	ldr	r3, [pc, #76]	@ (800dbb8 <prvTaskExitError+0x58>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db72:	d00b      	beq.n	800db8c <prvTaskExitError+0x2c>
	__asm volatile
 800db74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db78:	f383 8811 	msr	BASEPRI, r3
 800db7c:	f3bf 8f6f 	isb	sy
 800db80:	f3bf 8f4f 	dsb	sy
 800db84:	60fb      	str	r3, [r7, #12]
}
 800db86:	bf00      	nop
 800db88:	bf00      	nop
 800db8a:	e7fd      	b.n	800db88 <prvTaskExitError+0x28>
	__asm volatile
 800db8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db90:	f383 8811 	msr	BASEPRI, r3
 800db94:	f3bf 8f6f 	isb	sy
 800db98:	f3bf 8f4f 	dsb	sy
 800db9c:	60bb      	str	r3, [r7, #8]
}
 800db9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dba0:	bf00      	nop
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d0fc      	beq.n	800dba2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dba8:	bf00      	nop
 800dbaa:	bf00      	nop
 800dbac:	3714      	adds	r7, #20
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	200000b8 	.word	0x200000b8
 800dbbc:	00000000 	.word	0x00000000

0800dbc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dbc0:	4b07      	ldr	r3, [pc, #28]	@ (800dbe0 <pxCurrentTCBConst2>)
 800dbc2:	6819      	ldr	r1, [r3, #0]
 800dbc4:	6808      	ldr	r0, [r1, #0]
 800dbc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbca:	f380 8809 	msr	PSP, r0
 800dbce:	f3bf 8f6f 	isb	sy
 800dbd2:	f04f 0000 	mov.w	r0, #0
 800dbd6:	f380 8811 	msr	BASEPRI, r0
 800dbda:	4770      	bx	lr
 800dbdc:	f3af 8000 	nop.w

0800dbe0 <pxCurrentTCBConst2>:
 800dbe0:	20000dbc 	.word	0x20000dbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dbe4:	bf00      	nop
 800dbe6:	bf00      	nop

0800dbe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dbe8:	4808      	ldr	r0, [pc, #32]	@ (800dc0c <prvPortStartFirstTask+0x24>)
 800dbea:	6800      	ldr	r0, [r0, #0]
 800dbec:	6800      	ldr	r0, [r0, #0]
 800dbee:	f380 8808 	msr	MSP, r0
 800dbf2:	f04f 0000 	mov.w	r0, #0
 800dbf6:	f380 8814 	msr	CONTROL, r0
 800dbfa:	b662      	cpsie	i
 800dbfc:	b661      	cpsie	f
 800dbfe:	f3bf 8f4f 	dsb	sy
 800dc02:	f3bf 8f6f 	isb	sy
 800dc06:	df00      	svc	0
 800dc08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dc0a:	bf00      	nop
 800dc0c:	e000ed08 	.word	0xe000ed08

0800dc10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b086      	sub	sp, #24
 800dc14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dc16:	4b47      	ldr	r3, [pc, #284]	@ (800dd34 <xPortStartScheduler+0x124>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a47      	ldr	r2, [pc, #284]	@ (800dd38 <xPortStartScheduler+0x128>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d10b      	bne.n	800dc38 <xPortStartScheduler+0x28>
	__asm volatile
 800dc20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc24:	f383 8811 	msr	BASEPRI, r3
 800dc28:	f3bf 8f6f 	isb	sy
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	613b      	str	r3, [r7, #16]
}
 800dc32:	bf00      	nop
 800dc34:	bf00      	nop
 800dc36:	e7fd      	b.n	800dc34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dc38:	4b3e      	ldr	r3, [pc, #248]	@ (800dd34 <xPortStartScheduler+0x124>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4a3f      	ldr	r2, [pc, #252]	@ (800dd3c <xPortStartScheduler+0x12c>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d10b      	bne.n	800dc5a <xPortStartScheduler+0x4a>
	__asm volatile
 800dc42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc46:	f383 8811 	msr	BASEPRI, r3
 800dc4a:	f3bf 8f6f 	isb	sy
 800dc4e:	f3bf 8f4f 	dsb	sy
 800dc52:	60fb      	str	r3, [r7, #12]
}
 800dc54:	bf00      	nop
 800dc56:	bf00      	nop
 800dc58:	e7fd      	b.n	800dc56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dc5a:	4b39      	ldr	r3, [pc, #228]	@ (800dd40 <xPortStartScheduler+0x130>)
 800dc5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	22ff      	movs	r2, #255	@ 0xff
 800dc6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dc74:	78fb      	ldrb	r3, [r7, #3]
 800dc76:	b2db      	uxtb	r3, r3
 800dc78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800dc7c:	b2da      	uxtb	r2, r3
 800dc7e:	4b31      	ldr	r3, [pc, #196]	@ (800dd44 <xPortStartScheduler+0x134>)
 800dc80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dc82:	4b31      	ldr	r3, [pc, #196]	@ (800dd48 <xPortStartScheduler+0x138>)
 800dc84:	2207      	movs	r2, #7
 800dc86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc88:	e009      	b.n	800dc9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800dc8a:	4b2f      	ldr	r3, [pc, #188]	@ (800dd48 <xPortStartScheduler+0x138>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	3b01      	subs	r3, #1
 800dc90:	4a2d      	ldr	r2, [pc, #180]	@ (800dd48 <xPortStartScheduler+0x138>)
 800dc92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dc94:	78fb      	ldrb	r3, [r7, #3]
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	005b      	lsls	r3, r3, #1
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc9e:	78fb      	ldrb	r3, [r7, #3]
 800dca0:	b2db      	uxtb	r3, r3
 800dca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dca6:	2b80      	cmp	r3, #128	@ 0x80
 800dca8:	d0ef      	beq.n	800dc8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dcaa:	4b27      	ldr	r3, [pc, #156]	@ (800dd48 <xPortStartScheduler+0x138>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f1c3 0307 	rsb	r3, r3, #7
 800dcb2:	2b04      	cmp	r3, #4
 800dcb4:	d00b      	beq.n	800dcce <xPortStartScheduler+0xbe>
	__asm volatile
 800dcb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcba:	f383 8811 	msr	BASEPRI, r3
 800dcbe:	f3bf 8f6f 	isb	sy
 800dcc2:	f3bf 8f4f 	dsb	sy
 800dcc6:	60bb      	str	r3, [r7, #8]
}
 800dcc8:	bf00      	nop
 800dcca:	bf00      	nop
 800dccc:	e7fd      	b.n	800dcca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dcce:	4b1e      	ldr	r3, [pc, #120]	@ (800dd48 <xPortStartScheduler+0x138>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	021b      	lsls	r3, r3, #8
 800dcd4:	4a1c      	ldr	r2, [pc, #112]	@ (800dd48 <xPortStartScheduler+0x138>)
 800dcd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dcd8:	4b1b      	ldr	r3, [pc, #108]	@ (800dd48 <xPortStartScheduler+0x138>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dce0:	4a19      	ldr	r2, [pc, #100]	@ (800dd48 <xPortStartScheduler+0x138>)
 800dce2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	b2da      	uxtb	r2, r3
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dcec:	4b17      	ldr	r3, [pc, #92]	@ (800dd4c <xPortStartScheduler+0x13c>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a16      	ldr	r2, [pc, #88]	@ (800dd4c <xPortStartScheduler+0x13c>)
 800dcf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800dcf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dcf8:	4b14      	ldr	r3, [pc, #80]	@ (800dd4c <xPortStartScheduler+0x13c>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a13      	ldr	r2, [pc, #76]	@ (800dd4c <xPortStartScheduler+0x13c>)
 800dcfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dd02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dd04:	f000 f8da 	bl	800debc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dd08:	4b11      	ldr	r3, [pc, #68]	@ (800dd50 <xPortStartScheduler+0x140>)
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dd0e:	f000 f8f9 	bl	800df04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dd12:	4b10      	ldr	r3, [pc, #64]	@ (800dd54 <xPortStartScheduler+0x144>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4a0f      	ldr	r2, [pc, #60]	@ (800dd54 <xPortStartScheduler+0x144>)
 800dd18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800dd1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dd1e:	f7ff ff63 	bl	800dbe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dd22:	f7ff fa81 	bl	800d228 <vTaskSwitchContext>
	prvTaskExitError();
 800dd26:	f7ff ff1b 	bl	800db60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dd2a:	2300      	movs	r3, #0
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3718      	adds	r7, #24
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	e000ed00 	.word	0xe000ed00
 800dd38:	410fc271 	.word	0x410fc271
 800dd3c:	410fc270 	.word	0x410fc270
 800dd40:	e000e400 	.word	0xe000e400
 800dd44:	20000ee8 	.word	0x20000ee8
 800dd48:	20000eec 	.word	0x20000eec
 800dd4c:	e000ed20 	.word	0xe000ed20
 800dd50:	200000b8 	.word	0x200000b8
 800dd54:	e000ef34 	.word	0xe000ef34

0800dd58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
	__asm volatile
 800dd5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	607b      	str	r3, [r7, #4]
}
 800dd70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dd72:	4b10      	ldr	r3, [pc, #64]	@ (800ddb4 <vPortEnterCritical+0x5c>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	3301      	adds	r3, #1
 800dd78:	4a0e      	ldr	r2, [pc, #56]	@ (800ddb4 <vPortEnterCritical+0x5c>)
 800dd7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dd7c:	4b0d      	ldr	r3, [pc, #52]	@ (800ddb4 <vPortEnterCritical+0x5c>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d110      	bne.n	800dda6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dd84:	4b0c      	ldr	r3, [pc, #48]	@ (800ddb8 <vPortEnterCritical+0x60>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d00b      	beq.n	800dda6 <vPortEnterCritical+0x4e>
	__asm volatile
 800dd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd92:	f383 8811 	msr	BASEPRI, r3
 800dd96:	f3bf 8f6f 	isb	sy
 800dd9a:	f3bf 8f4f 	dsb	sy
 800dd9e:	603b      	str	r3, [r7, #0]
}
 800dda0:	bf00      	nop
 800dda2:	bf00      	nop
 800dda4:	e7fd      	b.n	800dda2 <vPortEnterCritical+0x4a>
	}
}
 800dda6:	bf00      	nop
 800dda8:	370c      	adds	r7, #12
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr
 800ddb2:	bf00      	nop
 800ddb4:	200000b8 	.word	0x200000b8
 800ddb8:	e000ed04 	.word	0xe000ed04

0800ddbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ddc2:	4b12      	ldr	r3, [pc, #72]	@ (800de0c <vPortExitCritical+0x50>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d10b      	bne.n	800dde2 <vPortExitCritical+0x26>
	__asm volatile
 800ddca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddce:	f383 8811 	msr	BASEPRI, r3
 800ddd2:	f3bf 8f6f 	isb	sy
 800ddd6:	f3bf 8f4f 	dsb	sy
 800ddda:	607b      	str	r3, [r7, #4]
}
 800dddc:	bf00      	nop
 800ddde:	bf00      	nop
 800dde0:	e7fd      	b.n	800ddde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dde2:	4b0a      	ldr	r3, [pc, #40]	@ (800de0c <vPortExitCritical+0x50>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3b01      	subs	r3, #1
 800dde8:	4a08      	ldr	r2, [pc, #32]	@ (800de0c <vPortExitCritical+0x50>)
 800ddea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ddec:	4b07      	ldr	r3, [pc, #28]	@ (800de0c <vPortExitCritical+0x50>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d105      	bne.n	800de00 <vPortExitCritical+0x44>
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	f383 8811 	msr	BASEPRI, r3
}
 800ddfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800de00:	bf00      	nop
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr
 800de0c:	200000b8 	.word	0x200000b8

0800de10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800de10:	f3ef 8009 	mrs	r0, PSP
 800de14:	f3bf 8f6f 	isb	sy
 800de18:	4b15      	ldr	r3, [pc, #84]	@ (800de70 <pxCurrentTCBConst>)
 800de1a:	681a      	ldr	r2, [r3, #0]
 800de1c:	f01e 0f10 	tst.w	lr, #16
 800de20:	bf08      	it	eq
 800de22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800de26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de2a:	6010      	str	r0, [r2, #0]
 800de2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800de30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800de34:	f380 8811 	msr	BASEPRI, r0
 800de38:	f3bf 8f4f 	dsb	sy
 800de3c:	f3bf 8f6f 	isb	sy
 800de40:	f7ff f9f2 	bl	800d228 <vTaskSwitchContext>
 800de44:	f04f 0000 	mov.w	r0, #0
 800de48:	f380 8811 	msr	BASEPRI, r0
 800de4c:	bc09      	pop	{r0, r3}
 800de4e:	6819      	ldr	r1, [r3, #0]
 800de50:	6808      	ldr	r0, [r1, #0]
 800de52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de56:	f01e 0f10 	tst.w	lr, #16
 800de5a:	bf08      	it	eq
 800de5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800de60:	f380 8809 	msr	PSP, r0
 800de64:	f3bf 8f6f 	isb	sy
 800de68:	4770      	bx	lr
 800de6a:	bf00      	nop
 800de6c:	f3af 8000 	nop.w

0800de70 <pxCurrentTCBConst>:
 800de70:	20000dbc 	.word	0x20000dbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800de74:	bf00      	nop
 800de76:	bf00      	nop

0800de78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
	__asm volatile
 800de7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de82:	f383 8811 	msr	BASEPRI, r3
 800de86:	f3bf 8f6f 	isb	sy
 800de8a:	f3bf 8f4f 	dsb	sy
 800de8e:	607b      	str	r3, [r7, #4]
}
 800de90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800de92:	f7ff f90f 	bl	800d0b4 <xTaskIncrementTick>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d003      	beq.n	800dea4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800de9c:	4b06      	ldr	r3, [pc, #24]	@ (800deb8 <SysTick_Handler+0x40>)
 800de9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dea2:	601a      	str	r2, [r3, #0]
 800dea4:	2300      	movs	r3, #0
 800dea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	f383 8811 	msr	BASEPRI, r3
}
 800deae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800deb0:	bf00      	nop
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	e000ed04 	.word	0xe000ed04

0800debc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800debc:	b480      	push	{r7}
 800debe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dec0:	4b0b      	ldr	r3, [pc, #44]	@ (800def0 <vPortSetupTimerInterrupt+0x34>)
 800dec2:	2200      	movs	r2, #0
 800dec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dec6:	4b0b      	ldr	r3, [pc, #44]	@ (800def4 <vPortSetupTimerInterrupt+0x38>)
 800dec8:	2200      	movs	r2, #0
 800deca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800decc:	4b0a      	ldr	r3, [pc, #40]	@ (800def8 <vPortSetupTimerInterrupt+0x3c>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a0a      	ldr	r2, [pc, #40]	@ (800defc <vPortSetupTimerInterrupt+0x40>)
 800ded2:	fba2 2303 	umull	r2, r3, r2, r3
 800ded6:	099b      	lsrs	r3, r3, #6
 800ded8:	4a09      	ldr	r2, [pc, #36]	@ (800df00 <vPortSetupTimerInterrupt+0x44>)
 800deda:	3b01      	subs	r3, #1
 800dedc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dede:	4b04      	ldr	r3, [pc, #16]	@ (800def0 <vPortSetupTimerInterrupt+0x34>)
 800dee0:	2207      	movs	r2, #7
 800dee2:	601a      	str	r2, [r3, #0]
}
 800dee4:	bf00      	nop
 800dee6:	46bd      	mov	sp, r7
 800dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deec:	4770      	bx	lr
 800deee:	bf00      	nop
 800def0:	e000e010 	.word	0xe000e010
 800def4:	e000e018 	.word	0xe000e018
 800def8:	20000004 	.word	0x20000004
 800defc:	10624dd3 	.word	0x10624dd3
 800df00:	e000e014 	.word	0xe000e014

0800df04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800df04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800df14 <vPortEnableVFP+0x10>
 800df08:	6801      	ldr	r1, [r0, #0]
 800df0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800df0e:	6001      	str	r1, [r0, #0]
 800df10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800df12:	bf00      	nop
 800df14:	e000ed88 	.word	0xe000ed88

0800df18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800df18:	b480      	push	{r7}
 800df1a:	b085      	sub	sp, #20
 800df1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800df1e:	f3ef 8305 	mrs	r3, IPSR
 800df22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2b0f      	cmp	r3, #15
 800df28:	d915      	bls.n	800df56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800df2a:	4a18      	ldr	r2, [pc, #96]	@ (800df8c <vPortValidateInterruptPriority+0x74>)
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	4413      	add	r3, r2
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800df34:	4b16      	ldr	r3, [pc, #88]	@ (800df90 <vPortValidateInterruptPriority+0x78>)
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	7afa      	ldrb	r2, [r7, #11]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d20b      	bcs.n	800df56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800df3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df42:	f383 8811 	msr	BASEPRI, r3
 800df46:	f3bf 8f6f 	isb	sy
 800df4a:	f3bf 8f4f 	dsb	sy
 800df4e:	607b      	str	r3, [r7, #4]
}
 800df50:	bf00      	nop
 800df52:	bf00      	nop
 800df54:	e7fd      	b.n	800df52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800df56:	4b0f      	ldr	r3, [pc, #60]	@ (800df94 <vPortValidateInterruptPriority+0x7c>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800df5e:	4b0e      	ldr	r3, [pc, #56]	@ (800df98 <vPortValidateInterruptPriority+0x80>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	429a      	cmp	r2, r3
 800df64:	d90b      	bls.n	800df7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800df66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df6a:	f383 8811 	msr	BASEPRI, r3
 800df6e:	f3bf 8f6f 	isb	sy
 800df72:	f3bf 8f4f 	dsb	sy
 800df76:	603b      	str	r3, [r7, #0]
}
 800df78:	bf00      	nop
 800df7a:	bf00      	nop
 800df7c:	e7fd      	b.n	800df7a <vPortValidateInterruptPriority+0x62>
	}
 800df7e:	bf00      	nop
 800df80:	3714      	adds	r7, #20
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr
 800df8a:	bf00      	nop
 800df8c:	e000e3f0 	.word	0xe000e3f0
 800df90:	20000ee8 	.word	0x20000ee8
 800df94:	e000ed0c 	.word	0xe000ed0c
 800df98:	20000eec 	.word	0x20000eec

0800df9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b08a      	sub	sp, #40	@ 0x28
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dfa8:	f7fe ffd8 	bl	800cf5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dfac:	4b5c      	ldr	r3, [pc, #368]	@ (800e120 <pvPortMalloc+0x184>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d101      	bne.n	800dfb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dfb4:	f000 f924 	bl	800e200 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dfb8:	4b5a      	ldr	r3, [pc, #360]	@ (800e124 <pvPortMalloc+0x188>)
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	4013      	ands	r3, r2
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f040 8095 	bne.w	800e0f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d01e      	beq.n	800e00a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800dfcc:	2208      	movs	r2, #8
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f003 0307 	and.w	r3, r3, #7
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d015      	beq.n	800e00a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f023 0307 	bic.w	r3, r3, #7
 800dfe4:	3308      	adds	r3, #8
 800dfe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f003 0307 	and.w	r3, r3, #7
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d00b      	beq.n	800e00a <pvPortMalloc+0x6e>
	__asm volatile
 800dff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff6:	f383 8811 	msr	BASEPRI, r3
 800dffa:	f3bf 8f6f 	isb	sy
 800dffe:	f3bf 8f4f 	dsb	sy
 800e002:	617b      	str	r3, [r7, #20]
}
 800e004:	bf00      	nop
 800e006:	bf00      	nop
 800e008:	e7fd      	b.n	800e006 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d06f      	beq.n	800e0f0 <pvPortMalloc+0x154>
 800e010:	4b45      	ldr	r3, [pc, #276]	@ (800e128 <pvPortMalloc+0x18c>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	429a      	cmp	r2, r3
 800e018:	d86a      	bhi.n	800e0f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e01a:	4b44      	ldr	r3, [pc, #272]	@ (800e12c <pvPortMalloc+0x190>)
 800e01c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e01e:	4b43      	ldr	r3, [pc, #268]	@ (800e12c <pvPortMalloc+0x190>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e024:	e004      	b.n	800e030 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e028:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e032:	685b      	ldr	r3, [r3, #4]
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	429a      	cmp	r2, r3
 800e038:	d903      	bls.n	800e042 <pvPortMalloc+0xa6>
 800e03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1f1      	bne.n	800e026 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e042:	4b37      	ldr	r3, [pc, #220]	@ (800e120 <pvPortMalloc+0x184>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e048:	429a      	cmp	r2, r3
 800e04a:	d051      	beq.n	800e0f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e04c:	6a3b      	ldr	r3, [r7, #32]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2208      	movs	r2, #8
 800e052:	4413      	add	r3, r2
 800e054:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	6a3b      	ldr	r3, [r7, #32]
 800e05c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e060:	685a      	ldr	r2, [r3, #4]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	1ad2      	subs	r2, r2, r3
 800e066:	2308      	movs	r3, #8
 800e068:	005b      	lsls	r3, r3, #1
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d920      	bls.n	800e0b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e06e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	4413      	add	r3, r2
 800e074:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e076:	69bb      	ldr	r3, [r7, #24]
 800e078:	f003 0307 	and.w	r3, r3, #7
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d00b      	beq.n	800e098 <pvPortMalloc+0xfc>
	__asm volatile
 800e080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e084:	f383 8811 	msr	BASEPRI, r3
 800e088:	f3bf 8f6f 	isb	sy
 800e08c:	f3bf 8f4f 	dsb	sy
 800e090:	613b      	str	r3, [r7, #16]
}
 800e092:	bf00      	nop
 800e094:	bf00      	nop
 800e096:	e7fd      	b.n	800e094 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e09a:	685a      	ldr	r2, [r3, #4]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	1ad2      	subs	r2, r2, r3
 800e0a0:	69bb      	ldr	r3, [r7, #24]
 800e0a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e0aa:	69b8      	ldr	r0, [r7, #24]
 800e0ac:	f000 f90a 	bl	800e2c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e0b0:	4b1d      	ldr	r3, [pc, #116]	@ (800e128 <pvPortMalloc+0x18c>)
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	1ad3      	subs	r3, r2, r3
 800e0ba:	4a1b      	ldr	r2, [pc, #108]	@ (800e128 <pvPortMalloc+0x18c>)
 800e0bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e0be:	4b1a      	ldr	r3, [pc, #104]	@ (800e128 <pvPortMalloc+0x18c>)
 800e0c0:	681a      	ldr	r2, [r3, #0]
 800e0c2:	4b1b      	ldr	r3, [pc, #108]	@ (800e130 <pvPortMalloc+0x194>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d203      	bcs.n	800e0d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e0ca:	4b17      	ldr	r3, [pc, #92]	@ (800e128 <pvPortMalloc+0x18c>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	4a18      	ldr	r2, [pc, #96]	@ (800e130 <pvPortMalloc+0x194>)
 800e0d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d4:	685a      	ldr	r2, [r3, #4]
 800e0d6:	4b13      	ldr	r3, [pc, #76]	@ (800e124 <pvPortMalloc+0x188>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	431a      	orrs	r2, r3
 800e0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e0e6:	4b13      	ldr	r3, [pc, #76]	@ (800e134 <pvPortMalloc+0x198>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	4a11      	ldr	r2, [pc, #68]	@ (800e134 <pvPortMalloc+0x198>)
 800e0ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e0f0:	f7fe ff42 	bl	800cf78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e0f4:	69fb      	ldr	r3, [r7, #28]
 800e0f6:	f003 0307 	and.w	r3, r3, #7
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00b      	beq.n	800e116 <pvPortMalloc+0x17a>
	__asm volatile
 800e0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	60fb      	str	r3, [r7, #12]
}
 800e110:	bf00      	nop
 800e112:	bf00      	nop
 800e114:	e7fd      	b.n	800e112 <pvPortMalloc+0x176>
	return pvReturn;
 800e116:	69fb      	ldr	r3, [r7, #28]
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3728      	adds	r7, #40	@ 0x28
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	20004af8 	.word	0x20004af8
 800e124:	20004b0c 	.word	0x20004b0c
 800e128:	20004afc 	.word	0x20004afc
 800e12c:	20004af0 	.word	0x20004af0
 800e130:	20004b00 	.word	0x20004b00
 800e134:	20004b04 	.word	0x20004b04

0800e138 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b086      	sub	sp, #24
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d04f      	beq.n	800e1ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e14a:	2308      	movs	r3, #8
 800e14c:	425b      	negs	r3, r3
 800e14e:	697a      	ldr	r2, [r7, #20]
 800e150:	4413      	add	r3, r2
 800e152:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	685a      	ldr	r2, [r3, #4]
 800e15c:	4b25      	ldr	r3, [pc, #148]	@ (800e1f4 <vPortFree+0xbc>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4013      	ands	r3, r2
 800e162:	2b00      	cmp	r3, #0
 800e164:	d10b      	bne.n	800e17e <vPortFree+0x46>
	__asm volatile
 800e166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16a:	f383 8811 	msr	BASEPRI, r3
 800e16e:	f3bf 8f6f 	isb	sy
 800e172:	f3bf 8f4f 	dsb	sy
 800e176:	60fb      	str	r3, [r7, #12]
}
 800e178:	bf00      	nop
 800e17a:	bf00      	nop
 800e17c:	e7fd      	b.n	800e17a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d00b      	beq.n	800e19e <vPortFree+0x66>
	__asm volatile
 800e186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e18a:	f383 8811 	msr	BASEPRI, r3
 800e18e:	f3bf 8f6f 	isb	sy
 800e192:	f3bf 8f4f 	dsb	sy
 800e196:	60bb      	str	r3, [r7, #8]
}
 800e198:	bf00      	nop
 800e19a:	bf00      	nop
 800e19c:	e7fd      	b.n	800e19a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	685a      	ldr	r2, [r3, #4]
 800e1a2:	4b14      	ldr	r3, [pc, #80]	@ (800e1f4 <vPortFree+0xbc>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	4013      	ands	r3, r2
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d01e      	beq.n	800e1ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d11a      	bne.n	800e1ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	685a      	ldr	r2, [r3, #4]
 800e1b8:	4b0e      	ldr	r3, [pc, #56]	@ (800e1f4 <vPortFree+0xbc>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	43db      	mvns	r3, r3
 800e1be:	401a      	ands	r2, r3
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e1c4:	f7fe feca 	bl	800cf5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	685a      	ldr	r2, [r3, #4]
 800e1cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e1f8 <vPortFree+0xc0>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4413      	add	r3, r2
 800e1d2:	4a09      	ldr	r2, [pc, #36]	@ (800e1f8 <vPortFree+0xc0>)
 800e1d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e1d6:	6938      	ldr	r0, [r7, #16]
 800e1d8:	f000 f874 	bl	800e2c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e1dc:	4b07      	ldr	r3, [pc, #28]	@ (800e1fc <vPortFree+0xc4>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	4a06      	ldr	r2, [pc, #24]	@ (800e1fc <vPortFree+0xc4>)
 800e1e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e1e6:	f7fe fec7 	bl	800cf78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e1ea:	bf00      	nop
 800e1ec:	3718      	adds	r7, #24
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	20004b0c 	.word	0x20004b0c
 800e1f8:	20004afc 	.word	0x20004afc
 800e1fc:	20004b08 	.word	0x20004b08

0800e200 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e200:	b480      	push	{r7}
 800e202:	b085      	sub	sp, #20
 800e204:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e206:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e20a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e20c:	4b27      	ldr	r3, [pc, #156]	@ (800e2ac <prvHeapInit+0xac>)
 800e20e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f003 0307 	and.w	r3, r3, #7
 800e216:	2b00      	cmp	r3, #0
 800e218:	d00c      	beq.n	800e234 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	3307      	adds	r3, #7
 800e21e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f023 0307 	bic.w	r3, r3, #7
 800e226:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e228:	68ba      	ldr	r2, [r7, #8]
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	1ad3      	subs	r3, r2, r3
 800e22e:	4a1f      	ldr	r2, [pc, #124]	@ (800e2ac <prvHeapInit+0xac>)
 800e230:	4413      	add	r3, r2
 800e232:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e238:	4a1d      	ldr	r2, [pc, #116]	@ (800e2b0 <prvHeapInit+0xb0>)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e23e:	4b1c      	ldr	r3, [pc, #112]	@ (800e2b0 <prvHeapInit+0xb0>)
 800e240:	2200      	movs	r2, #0
 800e242:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	68ba      	ldr	r2, [r7, #8]
 800e248:	4413      	add	r3, r2
 800e24a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e24c:	2208      	movs	r2, #8
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	1a9b      	subs	r3, r3, r2
 800e252:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	f023 0307 	bic.w	r3, r3, #7
 800e25a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	4a15      	ldr	r2, [pc, #84]	@ (800e2b4 <prvHeapInit+0xb4>)
 800e260:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e262:	4b14      	ldr	r3, [pc, #80]	@ (800e2b4 <prvHeapInit+0xb4>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2200      	movs	r2, #0
 800e268:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e26a:	4b12      	ldr	r3, [pc, #72]	@ (800e2b4 <prvHeapInit+0xb4>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	2200      	movs	r2, #0
 800e270:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	68fa      	ldr	r2, [r7, #12]
 800e27a:	1ad2      	subs	r2, r2, r3
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e280:	4b0c      	ldr	r3, [pc, #48]	@ (800e2b4 <prvHeapInit+0xb4>)
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	685b      	ldr	r3, [r3, #4]
 800e28c:	4a0a      	ldr	r2, [pc, #40]	@ (800e2b8 <prvHeapInit+0xb8>)
 800e28e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	4a09      	ldr	r2, [pc, #36]	@ (800e2bc <prvHeapInit+0xbc>)
 800e296:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e298:	4b09      	ldr	r3, [pc, #36]	@ (800e2c0 <prvHeapInit+0xc0>)
 800e29a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e29e:	601a      	str	r2, [r3, #0]
}
 800e2a0:	bf00      	nop
 800e2a2:	3714      	adds	r7, #20
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr
 800e2ac:	20000ef0 	.word	0x20000ef0
 800e2b0:	20004af0 	.word	0x20004af0
 800e2b4:	20004af8 	.word	0x20004af8
 800e2b8:	20004b00 	.word	0x20004b00
 800e2bc:	20004afc 	.word	0x20004afc
 800e2c0:	20004b0c 	.word	0x20004b0c

0800e2c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b085      	sub	sp, #20
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e2cc:	4b28      	ldr	r3, [pc, #160]	@ (800e370 <prvInsertBlockIntoFreeList+0xac>)
 800e2ce:	60fb      	str	r3, [r7, #12]
 800e2d0:	e002      	b.n	800e2d8 <prvInsertBlockIntoFreeList+0x14>
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	60fb      	str	r3, [r7, #12]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d8f7      	bhi.n	800e2d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	68ba      	ldr	r2, [r7, #8]
 800e2ec:	4413      	add	r3, r2
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d108      	bne.n	800e306 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	685a      	ldr	r2, [r3, #4]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	441a      	add	r2, r3
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	68ba      	ldr	r2, [r7, #8]
 800e310:	441a      	add	r2, r3
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	429a      	cmp	r2, r3
 800e318:	d118      	bne.n	800e34c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681a      	ldr	r2, [r3, #0]
 800e31e:	4b15      	ldr	r3, [pc, #84]	@ (800e374 <prvInsertBlockIntoFreeList+0xb0>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	429a      	cmp	r2, r3
 800e324:	d00d      	beq.n	800e342 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	685a      	ldr	r2, [r3, #4]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	441a      	add	r2, r3
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	681a      	ldr	r2, [r3, #0]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	601a      	str	r2, [r3, #0]
 800e340:	e008      	b.n	800e354 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e342:	4b0c      	ldr	r3, [pc, #48]	@ (800e374 <prvInsertBlockIntoFreeList+0xb0>)
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	601a      	str	r2, [r3, #0]
 800e34a:	e003      	b.n	800e354 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d002      	beq.n	800e362 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e362:	bf00      	nop
 800e364:	3714      	adds	r7, #20
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr
 800e36e:	bf00      	nop
 800e370:	20004af0 	.word	0x20004af0
 800e374:	20004af8 	.word	0x20004af8

0800e378 <siprintf>:
 800e378:	b40e      	push	{r1, r2, r3}
 800e37a:	b500      	push	{lr}
 800e37c:	b09c      	sub	sp, #112	@ 0x70
 800e37e:	ab1d      	add	r3, sp, #116	@ 0x74
 800e380:	9002      	str	r0, [sp, #8]
 800e382:	9006      	str	r0, [sp, #24]
 800e384:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e388:	4809      	ldr	r0, [pc, #36]	@ (800e3b0 <siprintf+0x38>)
 800e38a:	9107      	str	r1, [sp, #28]
 800e38c:	9104      	str	r1, [sp, #16]
 800e38e:	4909      	ldr	r1, [pc, #36]	@ (800e3b4 <siprintf+0x3c>)
 800e390:	f853 2b04 	ldr.w	r2, [r3], #4
 800e394:	9105      	str	r1, [sp, #20]
 800e396:	6800      	ldr	r0, [r0, #0]
 800e398:	9301      	str	r3, [sp, #4]
 800e39a:	a902      	add	r1, sp, #8
 800e39c:	f000 f9a2 	bl	800e6e4 <_svfiprintf_r>
 800e3a0:	9b02      	ldr	r3, [sp, #8]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	701a      	strb	r2, [r3, #0]
 800e3a6:	b01c      	add	sp, #112	@ 0x70
 800e3a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3ac:	b003      	add	sp, #12
 800e3ae:	4770      	bx	lr
 800e3b0:	200000bc 	.word	0x200000bc
 800e3b4:	ffff0208 	.word	0xffff0208

0800e3b8 <memset>:
 800e3b8:	4402      	add	r2, r0
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d100      	bne.n	800e3c2 <memset+0xa>
 800e3c0:	4770      	bx	lr
 800e3c2:	f803 1b01 	strb.w	r1, [r3], #1
 800e3c6:	e7f9      	b.n	800e3bc <memset+0x4>

0800e3c8 <__errno>:
 800e3c8:	4b01      	ldr	r3, [pc, #4]	@ (800e3d0 <__errno+0x8>)
 800e3ca:	6818      	ldr	r0, [r3, #0]
 800e3cc:	4770      	bx	lr
 800e3ce:	bf00      	nop
 800e3d0:	200000bc 	.word	0x200000bc

0800e3d4 <__libc_init_array>:
 800e3d4:	b570      	push	{r4, r5, r6, lr}
 800e3d6:	4d0d      	ldr	r5, [pc, #52]	@ (800e40c <__libc_init_array+0x38>)
 800e3d8:	4c0d      	ldr	r4, [pc, #52]	@ (800e410 <__libc_init_array+0x3c>)
 800e3da:	1b64      	subs	r4, r4, r5
 800e3dc:	10a4      	asrs	r4, r4, #2
 800e3de:	2600      	movs	r6, #0
 800e3e0:	42a6      	cmp	r6, r4
 800e3e2:	d109      	bne.n	800e3f8 <__libc_init_array+0x24>
 800e3e4:	4d0b      	ldr	r5, [pc, #44]	@ (800e414 <__libc_init_array+0x40>)
 800e3e6:	4c0c      	ldr	r4, [pc, #48]	@ (800e418 <__libc_init_array+0x44>)
 800e3e8:	f001 f9d8 	bl	800f79c <_init>
 800e3ec:	1b64      	subs	r4, r4, r5
 800e3ee:	10a4      	asrs	r4, r4, #2
 800e3f0:	2600      	movs	r6, #0
 800e3f2:	42a6      	cmp	r6, r4
 800e3f4:	d105      	bne.n	800e402 <__libc_init_array+0x2e>
 800e3f6:	bd70      	pop	{r4, r5, r6, pc}
 800e3f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3fc:	4798      	blx	r3
 800e3fe:	3601      	adds	r6, #1
 800e400:	e7ee      	b.n	800e3e0 <__libc_init_array+0xc>
 800e402:	f855 3b04 	ldr.w	r3, [r5], #4
 800e406:	4798      	blx	r3
 800e408:	3601      	adds	r6, #1
 800e40a:	e7f2      	b.n	800e3f2 <__libc_init_array+0x1e>
 800e40c:	0800fa50 	.word	0x0800fa50
 800e410:	0800fa50 	.word	0x0800fa50
 800e414:	0800fa50 	.word	0x0800fa50
 800e418:	0800fa54 	.word	0x0800fa54

0800e41c <__retarget_lock_acquire_recursive>:
 800e41c:	4770      	bx	lr

0800e41e <__retarget_lock_release_recursive>:
 800e41e:	4770      	bx	lr

0800e420 <memcpy>:
 800e420:	440a      	add	r2, r1
 800e422:	4291      	cmp	r1, r2
 800e424:	f100 33ff 	add.w	r3, r0, #4294967295
 800e428:	d100      	bne.n	800e42c <memcpy+0xc>
 800e42a:	4770      	bx	lr
 800e42c:	b510      	push	{r4, lr}
 800e42e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e432:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e436:	4291      	cmp	r1, r2
 800e438:	d1f9      	bne.n	800e42e <memcpy+0xe>
 800e43a:	bd10      	pop	{r4, pc}

0800e43c <_free_r>:
 800e43c:	b538      	push	{r3, r4, r5, lr}
 800e43e:	4605      	mov	r5, r0
 800e440:	2900      	cmp	r1, #0
 800e442:	d041      	beq.n	800e4c8 <_free_r+0x8c>
 800e444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e448:	1f0c      	subs	r4, r1, #4
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	bfb8      	it	lt
 800e44e:	18e4      	addlt	r4, r4, r3
 800e450:	f000 f8e0 	bl	800e614 <__malloc_lock>
 800e454:	4a1d      	ldr	r2, [pc, #116]	@ (800e4cc <_free_r+0x90>)
 800e456:	6813      	ldr	r3, [r2, #0]
 800e458:	b933      	cbnz	r3, 800e468 <_free_r+0x2c>
 800e45a:	6063      	str	r3, [r4, #4]
 800e45c:	6014      	str	r4, [r2, #0]
 800e45e:	4628      	mov	r0, r5
 800e460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e464:	f000 b8dc 	b.w	800e620 <__malloc_unlock>
 800e468:	42a3      	cmp	r3, r4
 800e46a:	d908      	bls.n	800e47e <_free_r+0x42>
 800e46c:	6820      	ldr	r0, [r4, #0]
 800e46e:	1821      	adds	r1, r4, r0
 800e470:	428b      	cmp	r3, r1
 800e472:	bf01      	itttt	eq
 800e474:	6819      	ldreq	r1, [r3, #0]
 800e476:	685b      	ldreq	r3, [r3, #4]
 800e478:	1809      	addeq	r1, r1, r0
 800e47a:	6021      	streq	r1, [r4, #0]
 800e47c:	e7ed      	b.n	800e45a <_free_r+0x1e>
 800e47e:	461a      	mov	r2, r3
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	b10b      	cbz	r3, 800e488 <_free_r+0x4c>
 800e484:	42a3      	cmp	r3, r4
 800e486:	d9fa      	bls.n	800e47e <_free_r+0x42>
 800e488:	6811      	ldr	r1, [r2, #0]
 800e48a:	1850      	adds	r0, r2, r1
 800e48c:	42a0      	cmp	r0, r4
 800e48e:	d10b      	bne.n	800e4a8 <_free_r+0x6c>
 800e490:	6820      	ldr	r0, [r4, #0]
 800e492:	4401      	add	r1, r0
 800e494:	1850      	adds	r0, r2, r1
 800e496:	4283      	cmp	r3, r0
 800e498:	6011      	str	r1, [r2, #0]
 800e49a:	d1e0      	bne.n	800e45e <_free_r+0x22>
 800e49c:	6818      	ldr	r0, [r3, #0]
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	6053      	str	r3, [r2, #4]
 800e4a2:	4408      	add	r0, r1
 800e4a4:	6010      	str	r0, [r2, #0]
 800e4a6:	e7da      	b.n	800e45e <_free_r+0x22>
 800e4a8:	d902      	bls.n	800e4b0 <_free_r+0x74>
 800e4aa:	230c      	movs	r3, #12
 800e4ac:	602b      	str	r3, [r5, #0]
 800e4ae:	e7d6      	b.n	800e45e <_free_r+0x22>
 800e4b0:	6820      	ldr	r0, [r4, #0]
 800e4b2:	1821      	adds	r1, r4, r0
 800e4b4:	428b      	cmp	r3, r1
 800e4b6:	bf04      	itt	eq
 800e4b8:	6819      	ldreq	r1, [r3, #0]
 800e4ba:	685b      	ldreq	r3, [r3, #4]
 800e4bc:	6063      	str	r3, [r4, #4]
 800e4be:	bf04      	itt	eq
 800e4c0:	1809      	addeq	r1, r1, r0
 800e4c2:	6021      	streq	r1, [r4, #0]
 800e4c4:	6054      	str	r4, [r2, #4]
 800e4c6:	e7ca      	b.n	800e45e <_free_r+0x22>
 800e4c8:	bd38      	pop	{r3, r4, r5, pc}
 800e4ca:	bf00      	nop
 800e4cc:	20004c54 	.word	0x20004c54

0800e4d0 <sbrk_aligned>:
 800e4d0:	b570      	push	{r4, r5, r6, lr}
 800e4d2:	4e0f      	ldr	r6, [pc, #60]	@ (800e510 <sbrk_aligned+0x40>)
 800e4d4:	460c      	mov	r4, r1
 800e4d6:	6831      	ldr	r1, [r6, #0]
 800e4d8:	4605      	mov	r5, r0
 800e4da:	b911      	cbnz	r1, 800e4e2 <sbrk_aligned+0x12>
 800e4dc:	f000 fba6 	bl	800ec2c <_sbrk_r>
 800e4e0:	6030      	str	r0, [r6, #0]
 800e4e2:	4621      	mov	r1, r4
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	f000 fba1 	bl	800ec2c <_sbrk_r>
 800e4ea:	1c43      	adds	r3, r0, #1
 800e4ec:	d103      	bne.n	800e4f6 <sbrk_aligned+0x26>
 800e4ee:	f04f 34ff 	mov.w	r4, #4294967295
 800e4f2:	4620      	mov	r0, r4
 800e4f4:	bd70      	pop	{r4, r5, r6, pc}
 800e4f6:	1cc4      	adds	r4, r0, #3
 800e4f8:	f024 0403 	bic.w	r4, r4, #3
 800e4fc:	42a0      	cmp	r0, r4
 800e4fe:	d0f8      	beq.n	800e4f2 <sbrk_aligned+0x22>
 800e500:	1a21      	subs	r1, r4, r0
 800e502:	4628      	mov	r0, r5
 800e504:	f000 fb92 	bl	800ec2c <_sbrk_r>
 800e508:	3001      	adds	r0, #1
 800e50a:	d1f2      	bne.n	800e4f2 <sbrk_aligned+0x22>
 800e50c:	e7ef      	b.n	800e4ee <sbrk_aligned+0x1e>
 800e50e:	bf00      	nop
 800e510:	20004c50 	.word	0x20004c50

0800e514 <_malloc_r>:
 800e514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e518:	1ccd      	adds	r5, r1, #3
 800e51a:	f025 0503 	bic.w	r5, r5, #3
 800e51e:	3508      	adds	r5, #8
 800e520:	2d0c      	cmp	r5, #12
 800e522:	bf38      	it	cc
 800e524:	250c      	movcc	r5, #12
 800e526:	2d00      	cmp	r5, #0
 800e528:	4606      	mov	r6, r0
 800e52a:	db01      	blt.n	800e530 <_malloc_r+0x1c>
 800e52c:	42a9      	cmp	r1, r5
 800e52e:	d904      	bls.n	800e53a <_malloc_r+0x26>
 800e530:	230c      	movs	r3, #12
 800e532:	6033      	str	r3, [r6, #0]
 800e534:	2000      	movs	r0, #0
 800e536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e53a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e610 <_malloc_r+0xfc>
 800e53e:	f000 f869 	bl	800e614 <__malloc_lock>
 800e542:	f8d8 3000 	ldr.w	r3, [r8]
 800e546:	461c      	mov	r4, r3
 800e548:	bb44      	cbnz	r4, 800e59c <_malloc_r+0x88>
 800e54a:	4629      	mov	r1, r5
 800e54c:	4630      	mov	r0, r6
 800e54e:	f7ff ffbf 	bl	800e4d0 <sbrk_aligned>
 800e552:	1c43      	adds	r3, r0, #1
 800e554:	4604      	mov	r4, r0
 800e556:	d158      	bne.n	800e60a <_malloc_r+0xf6>
 800e558:	f8d8 4000 	ldr.w	r4, [r8]
 800e55c:	4627      	mov	r7, r4
 800e55e:	2f00      	cmp	r7, #0
 800e560:	d143      	bne.n	800e5ea <_malloc_r+0xd6>
 800e562:	2c00      	cmp	r4, #0
 800e564:	d04b      	beq.n	800e5fe <_malloc_r+0xea>
 800e566:	6823      	ldr	r3, [r4, #0]
 800e568:	4639      	mov	r1, r7
 800e56a:	4630      	mov	r0, r6
 800e56c:	eb04 0903 	add.w	r9, r4, r3
 800e570:	f000 fb5c 	bl	800ec2c <_sbrk_r>
 800e574:	4581      	cmp	r9, r0
 800e576:	d142      	bne.n	800e5fe <_malloc_r+0xea>
 800e578:	6821      	ldr	r1, [r4, #0]
 800e57a:	1a6d      	subs	r5, r5, r1
 800e57c:	4629      	mov	r1, r5
 800e57e:	4630      	mov	r0, r6
 800e580:	f7ff ffa6 	bl	800e4d0 <sbrk_aligned>
 800e584:	3001      	adds	r0, #1
 800e586:	d03a      	beq.n	800e5fe <_malloc_r+0xea>
 800e588:	6823      	ldr	r3, [r4, #0]
 800e58a:	442b      	add	r3, r5
 800e58c:	6023      	str	r3, [r4, #0]
 800e58e:	f8d8 3000 	ldr.w	r3, [r8]
 800e592:	685a      	ldr	r2, [r3, #4]
 800e594:	bb62      	cbnz	r2, 800e5f0 <_malloc_r+0xdc>
 800e596:	f8c8 7000 	str.w	r7, [r8]
 800e59a:	e00f      	b.n	800e5bc <_malloc_r+0xa8>
 800e59c:	6822      	ldr	r2, [r4, #0]
 800e59e:	1b52      	subs	r2, r2, r5
 800e5a0:	d420      	bmi.n	800e5e4 <_malloc_r+0xd0>
 800e5a2:	2a0b      	cmp	r2, #11
 800e5a4:	d917      	bls.n	800e5d6 <_malloc_r+0xc2>
 800e5a6:	1961      	adds	r1, r4, r5
 800e5a8:	42a3      	cmp	r3, r4
 800e5aa:	6025      	str	r5, [r4, #0]
 800e5ac:	bf18      	it	ne
 800e5ae:	6059      	strne	r1, [r3, #4]
 800e5b0:	6863      	ldr	r3, [r4, #4]
 800e5b2:	bf08      	it	eq
 800e5b4:	f8c8 1000 	streq.w	r1, [r8]
 800e5b8:	5162      	str	r2, [r4, r5]
 800e5ba:	604b      	str	r3, [r1, #4]
 800e5bc:	4630      	mov	r0, r6
 800e5be:	f000 f82f 	bl	800e620 <__malloc_unlock>
 800e5c2:	f104 000b 	add.w	r0, r4, #11
 800e5c6:	1d23      	adds	r3, r4, #4
 800e5c8:	f020 0007 	bic.w	r0, r0, #7
 800e5cc:	1ac2      	subs	r2, r0, r3
 800e5ce:	bf1c      	itt	ne
 800e5d0:	1a1b      	subne	r3, r3, r0
 800e5d2:	50a3      	strne	r3, [r4, r2]
 800e5d4:	e7af      	b.n	800e536 <_malloc_r+0x22>
 800e5d6:	6862      	ldr	r2, [r4, #4]
 800e5d8:	42a3      	cmp	r3, r4
 800e5da:	bf0c      	ite	eq
 800e5dc:	f8c8 2000 	streq.w	r2, [r8]
 800e5e0:	605a      	strne	r2, [r3, #4]
 800e5e2:	e7eb      	b.n	800e5bc <_malloc_r+0xa8>
 800e5e4:	4623      	mov	r3, r4
 800e5e6:	6864      	ldr	r4, [r4, #4]
 800e5e8:	e7ae      	b.n	800e548 <_malloc_r+0x34>
 800e5ea:	463c      	mov	r4, r7
 800e5ec:	687f      	ldr	r7, [r7, #4]
 800e5ee:	e7b6      	b.n	800e55e <_malloc_r+0x4a>
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	42a3      	cmp	r3, r4
 800e5f6:	d1fb      	bne.n	800e5f0 <_malloc_r+0xdc>
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	6053      	str	r3, [r2, #4]
 800e5fc:	e7de      	b.n	800e5bc <_malloc_r+0xa8>
 800e5fe:	230c      	movs	r3, #12
 800e600:	6033      	str	r3, [r6, #0]
 800e602:	4630      	mov	r0, r6
 800e604:	f000 f80c 	bl	800e620 <__malloc_unlock>
 800e608:	e794      	b.n	800e534 <_malloc_r+0x20>
 800e60a:	6005      	str	r5, [r0, #0]
 800e60c:	e7d6      	b.n	800e5bc <_malloc_r+0xa8>
 800e60e:	bf00      	nop
 800e610:	20004c54 	.word	0x20004c54

0800e614 <__malloc_lock>:
 800e614:	4801      	ldr	r0, [pc, #4]	@ (800e61c <__malloc_lock+0x8>)
 800e616:	f7ff bf01 	b.w	800e41c <__retarget_lock_acquire_recursive>
 800e61a:	bf00      	nop
 800e61c:	20004c4c 	.word	0x20004c4c

0800e620 <__malloc_unlock>:
 800e620:	4801      	ldr	r0, [pc, #4]	@ (800e628 <__malloc_unlock+0x8>)
 800e622:	f7ff befc 	b.w	800e41e <__retarget_lock_release_recursive>
 800e626:	bf00      	nop
 800e628:	20004c4c 	.word	0x20004c4c

0800e62c <__ssputs_r>:
 800e62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e630:	688e      	ldr	r6, [r1, #8]
 800e632:	461f      	mov	r7, r3
 800e634:	42be      	cmp	r6, r7
 800e636:	680b      	ldr	r3, [r1, #0]
 800e638:	4682      	mov	sl, r0
 800e63a:	460c      	mov	r4, r1
 800e63c:	4690      	mov	r8, r2
 800e63e:	d82d      	bhi.n	800e69c <__ssputs_r+0x70>
 800e640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e644:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e648:	d026      	beq.n	800e698 <__ssputs_r+0x6c>
 800e64a:	6965      	ldr	r5, [r4, #20]
 800e64c:	6909      	ldr	r1, [r1, #16]
 800e64e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e652:	eba3 0901 	sub.w	r9, r3, r1
 800e656:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e65a:	1c7b      	adds	r3, r7, #1
 800e65c:	444b      	add	r3, r9
 800e65e:	106d      	asrs	r5, r5, #1
 800e660:	429d      	cmp	r5, r3
 800e662:	bf38      	it	cc
 800e664:	461d      	movcc	r5, r3
 800e666:	0553      	lsls	r3, r2, #21
 800e668:	d527      	bpl.n	800e6ba <__ssputs_r+0x8e>
 800e66a:	4629      	mov	r1, r5
 800e66c:	f7ff ff52 	bl	800e514 <_malloc_r>
 800e670:	4606      	mov	r6, r0
 800e672:	b360      	cbz	r0, 800e6ce <__ssputs_r+0xa2>
 800e674:	6921      	ldr	r1, [r4, #16]
 800e676:	464a      	mov	r2, r9
 800e678:	f7ff fed2 	bl	800e420 <memcpy>
 800e67c:	89a3      	ldrh	r3, [r4, #12]
 800e67e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e686:	81a3      	strh	r3, [r4, #12]
 800e688:	6126      	str	r6, [r4, #16]
 800e68a:	6165      	str	r5, [r4, #20]
 800e68c:	444e      	add	r6, r9
 800e68e:	eba5 0509 	sub.w	r5, r5, r9
 800e692:	6026      	str	r6, [r4, #0]
 800e694:	60a5      	str	r5, [r4, #8]
 800e696:	463e      	mov	r6, r7
 800e698:	42be      	cmp	r6, r7
 800e69a:	d900      	bls.n	800e69e <__ssputs_r+0x72>
 800e69c:	463e      	mov	r6, r7
 800e69e:	6820      	ldr	r0, [r4, #0]
 800e6a0:	4632      	mov	r2, r6
 800e6a2:	4641      	mov	r1, r8
 800e6a4:	f000 faa8 	bl	800ebf8 <memmove>
 800e6a8:	68a3      	ldr	r3, [r4, #8]
 800e6aa:	1b9b      	subs	r3, r3, r6
 800e6ac:	60a3      	str	r3, [r4, #8]
 800e6ae:	6823      	ldr	r3, [r4, #0]
 800e6b0:	4433      	add	r3, r6
 800e6b2:	6023      	str	r3, [r4, #0]
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6ba:	462a      	mov	r2, r5
 800e6bc:	f000 fac6 	bl	800ec4c <_realloc_r>
 800e6c0:	4606      	mov	r6, r0
 800e6c2:	2800      	cmp	r0, #0
 800e6c4:	d1e0      	bne.n	800e688 <__ssputs_r+0x5c>
 800e6c6:	6921      	ldr	r1, [r4, #16]
 800e6c8:	4650      	mov	r0, sl
 800e6ca:	f7ff feb7 	bl	800e43c <_free_r>
 800e6ce:	230c      	movs	r3, #12
 800e6d0:	f8ca 3000 	str.w	r3, [sl]
 800e6d4:	89a3      	ldrh	r3, [r4, #12]
 800e6d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6da:	81a3      	strh	r3, [r4, #12]
 800e6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e0:	e7e9      	b.n	800e6b6 <__ssputs_r+0x8a>
	...

0800e6e4 <_svfiprintf_r>:
 800e6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e8:	4698      	mov	r8, r3
 800e6ea:	898b      	ldrh	r3, [r1, #12]
 800e6ec:	061b      	lsls	r3, r3, #24
 800e6ee:	b09d      	sub	sp, #116	@ 0x74
 800e6f0:	4607      	mov	r7, r0
 800e6f2:	460d      	mov	r5, r1
 800e6f4:	4614      	mov	r4, r2
 800e6f6:	d510      	bpl.n	800e71a <_svfiprintf_r+0x36>
 800e6f8:	690b      	ldr	r3, [r1, #16]
 800e6fa:	b973      	cbnz	r3, 800e71a <_svfiprintf_r+0x36>
 800e6fc:	2140      	movs	r1, #64	@ 0x40
 800e6fe:	f7ff ff09 	bl	800e514 <_malloc_r>
 800e702:	6028      	str	r0, [r5, #0]
 800e704:	6128      	str	r0, [r5, #16]
 800e706:	b930      	cbnz	r0, 800e716 <_svfiprintf_r+0x32>
 800e708:	230c      	movs	r3, #12
 800e70a:	603b      	str	r3, [r7, #0]
 800e70c:	f04f 30ff 	mov.w	r0, #4294967295
 800e710:	b01d      	add	sp, #116	@ 0x74
 800e712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e716:	2340      	movs	r3, #64	@ 0x40
 800e718:	616b      	str	r3, [r5, #20]
 800e71a:	2300      	movs	r3, #0
 800e71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e71e:	2320      	movs	r3, #32
 800e720:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e724:	f8cd 800c 	str.w	r8, [sp, #12]
 800e728:	2330      	movs	r3, #48	@ 0x30
 800e72a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e8c8 <_svfiprintf_r+0x1e4>
 800e72e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e732:	f04f 0901 	mov.w	r9, #1
 800e736:	4623      	mov	r3, r4
 800e738:	469a      	mov	sl, r3
 800e73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e73e:	b10a      	cbz	r2, 800e744 <_svfiprintf_r+0x60>
 800e740:	2a25      	cmp	r2, #37	@ 0x25
 800e742:	d1f9      	bne.n	800e738 <_svfiprintf_r+0x54>
 800e744:	ebba 0b04 	subs.w	fp, sl, r4
 800e748:	d00b      	beq.n	800e762 <_svfiprintf_r+0x7e>
 800e74a:	465b      	mov	r3, fp
 800e74c:	4622      	mov	r2, r4
 800e74e:	4629      	mov	r1, r5
 800e750:	4638      	mov	r0, r7
 800e752:	f7ff ff6b 	bl	800e62c <__ssputs_r>
 800e756:	3001      	adds	r0, #1
 800e758:	f000 80a7 	beq.w	800e8aa <_svfiprintf_r+0x1c6>
 800e75c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e75e:	445a      	add	r2, fp
 800e760:	9209      	str	r2, [sp, #36]	@ 0x24
 800e762:	f89a 3000 	ldrb.w	r3, [sl]
 800e766:	2b00      	cmp	r3, #0
 800e768:	f000 809f 	beq.w	800e8aa <_svfiprintf_r+0x1c6>
 800e76c:	2300      	movs	r3, #0
 800e76e:	f04f 32ff 	mov.w	r2, #4294967295
 800e772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e776:	f10a 0a01 	add.w	sl, sl, #1
 800e77a:	9304      	str	r3, [sp, #16]
 800e77c:	9307      	str	r3, [sp, #28]
 800e77e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e782:	931a      	str	r3, [sp, #104]	@ 0x68
 800e784:	4654      	mov	r4, sl
 800e786:	2205      	movs	r2, #5
 800e788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e78c:	484e      	ldr	r0, [pc, #312]	@ (800e8c8 <_svfiprintf_r+0x1e4>)
 800e78e:	f7f1 fd27 	bl	80001e0 <memchr>
 800e792:	9a04      	ldr	r2, [sp, #16]
 800e794:	b9d8      	cbnz	r0, 800e7ce <_svfiprintf_r+0xea>
 800e796:	06d0      	lsls	r0, r2, #27
 800e798:	bf44      	itt	mi
 800e79a:	2320      	movmi	r3, #32
 800e79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7a0:	0711      	lsls	r1, r2, #28
 800e7a2:	bf44      	itt	mi
 800e7a4:	232b      	movmi	r3, #43	@ 0x2b
 800e7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e7ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7b0:	d015      	beq.n	800e7de <_svfiprintf_r+0xfa>
 800e7b2:	9a07      	ldr	r2, [sp, #28]
 800e7b4:	4654      	mov	r4, sl
 800e7b6:	2000      	movs	r0, #0
 800e7b8:	f04f 0c0a 	mov.w	ip, #10
 800e7bc:	4621      	mov	r1, r4
 800e7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7c2:	3b30      	subs	r3, #48	@ 0x30
 800e7c4:	2b09      	cmp	r3, #9
 800e7c6:	d94b      	bls.n	800e860 <_svfiprintf_r+0x17c>
 800e7c8:	b1b0      	cbz	r0, 800e7f8 <_svfiprintf_r+0x114>
 800e7ca:	9207      	str	r2, [sp, #28]
 800e7cc:	e014      	b.n	800e7f8 <_svfiprintf_r+0x114>
 800e7ce:	eba0 0308 	sub.w	r3, r0, r8
 800e7d2:	fa09 f303 	lsl.w	r3, r9, r3
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	9304      	str	r3, [sp, #16]
 800e7da:	46a2      	mov	sl, r4
 800e7dc:	e7d2      	b.n	800e784 <_svfiprintf_r+0xa0>
 800e7de:	9b03      	ldr	r3, [sp, #12]
 800e7e0:	1d19      	adds	r1, r3, #4
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	9103      	str	r1, [sp, #12]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	bfbb      	ittet	lt
 800e7ea:	425b      	neglt	r3, r3
 800e7ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e7f0:	9307      	strge	r3, [sp, #28]
 800e7f2:	9307      	strlt	r3, [sp, #28]
 800e7f4:	bfb8      	it	lt
 800e7f6:	9204      	strlt	r2, [sp, #16]
 800e7f8:	7823      	ldrb	r3, [r4, #0]
 800e7fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7fc:	d10a      	bne.n	800e814 <_svfiprintf_r+0x130>
 800e7fe:	7863      	ldrb	r3, [r4, #1]
 800e800:	2b2a      	cmp	r3, #42	@ 0x2a
 800e802:	d132      	bne.n	800e86a <_svfiprintf_r+0x186>
 800e804:	9b03      	ldr	r3, [sp, #12]
 800e806:	1d1a      	adds	r2, r3, #4
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	9203      	str	r2, [sp, #12]
 800e80c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e810:	3402      	adds	r4, #2
 800e812:	9305      	str	r3, [sp, #20]
 800e814:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e8d8 <_svfiprintf_r+0x1f4>
 800e818:	7821      	ldrb	r1, [r4, #0]
 800e81a:	2203      	movs	r2, #3
 800e81c:	4650      	mov	r0, sl
 800e81e:	f7f1 fcdf 	bl	80001e0 <memchr>
 800e822:	b138      	cbz	r0, 800e834 <_svfiprintf_r+0x150>
 800e824:	9b04      	ldr	r3, [sp, #16]
 800e826:	eba0 000a 	sub.w	r0, r0, sl
 800e82a:	2240      	movs	r2, #64	@ 0x40
 800e82c:	4082      	lsls	r2, r0
 800e82e:	4313      	orrs	r3, r2
 800e830:	3401      	adds	r4, #1
 800e832:	9304      	str	r3, [sp, #16]
 800e834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e838:	4824      	ldr	r0, [pc, #144]	@ (800e8cc <_svfiprintf_r+0x1e8>)
 800e83a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e83e:	2206      	movs	r2, #6
 800e840:	f7f1 fcce 	bl	80001e0 <memchr>
 800e844:	2800      	cmp	r0, #0
 800e846:	d036      	beq.n	800e8b6 <_svfiprintf_r+0x1d2>
 800e848:	4b21      	ldr	r3, [pc, #132]	@ (800e8d0 <_svfiprintf_r+0x1ec>)
 800e84a:	bb1b      	cbnz	r3, 800e894 <_svfiprintf_r+0x1b0>
 800e84c:	9b03      	ldr	r3, [sp, #12]
 800e84e:	3307      	adds	r3, #7
 800e850:	f023 0307 	bic.w	r3, r3, #7
 800e854:	3308      	adds	r3, #8
 800e856:	9303      	str	r3, [sp, #12]
 800e858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e85a:	4433      	add	r3, r6
 800e85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e85e:	e76a      	b.n	800e736 <_svfiprintf_r+0x52>
 800e860:	fb0c 3202 	mla	r2, ip, r2, r3
 800e864:	460c      	mov	r4, r1
 800e866:	2001      	movs	r0, #1
 800e868:	e7a8      	b.n	800e7bc <_svfiprintf_r+0xd8>
 800e86a:	2300      	movs	r3, #0
 800e86c:	3401      	adds	r4, #1
 800e86e:	9305      	str	r3, [sp, #20]
 800e870:	4619      	mov	r1, r3
 800e872:	f04f 0c0a 	mov.w	ip, #10
 800e876:	4620      	mov	r0, r4
 800e878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e87c:	3a30      	subs	r2, #48	@ 0x30
 800e87e:	2a09      	cmp	r2, #9
 800e880:	d903      	bls.n	800e88a <_svfiprintf_r+0x1a6>
 800e882:	2b00      	cmp	r3, #0
 800e884:	d0c6      	beq.n	800e814 <_svfiprintf_r+0x130>
 800e886:	9105      	str	r1, [sp, #20]
 800e888:	e7c4      	b.n	800e814 <_svfiprintf_r+0x130>
 800e88a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e88e:	4604      	mov	r4, r0
 800e890:	2301      	movs	r3, #1
 800e892:	e7f0      	b.n	800e876 <_svfiprintf_r+0x192>
 800e894:	ab03      	add	r3, sp, #12
 800e896:	9300      	str	r3, [sp, #0]
 800e898:	462a      	mov	r2, r5
 800e89a:	4b0e      	ldr	r3, [pc, #56]	@ (800e8d4 <_svfiprintf_r+0x1f0>)
 800e89c:	a904      	add	r1, sp, #16
 800e89e:	4638      	mov	r0, r7
 800e8a0:	f3af 8000 	nop.w
 800e8a4:	1c42      	adds	r2, r0, #1
 800e8a6:	4606      	mov	r6, r0
 800e8a8:	d1d6      	bne.n	800e858 <_svfiprintf_r+0x174>
 800e8aa:	89ab      	ldrh	r3, [r5, #12]
 800e8ac:	065b      	lsls	r3, r3, #25
 800e8ae:	f53f af2d 	bmi.w	800e70c <_svfiprintf_r+0x28>
 800e8b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8b4:	e72c      	b.n	800e710 <_svfiprintf_r+0x2c>
 800e8b6:	ab03      	add	r3, sp, #12
 800e8b8:	9300      	str	r3, [sp, #0]
 800e8ba:	462a      	mov	r2, r5
 800e8bc:	4b05      	ldr	r3, [pc, #20]	@ (800e8d4 <_svfiprintf_r+0x1f0>)
 800e8be:	a904      	add	r1, sp, #16
 800e8c0:	4638      	mov	r0, r7
 800e8c2:	f000 f879 	bl	800e9b8 <_printf_i>
 800e8c6:	e7ed      	b.n	800e8a4 <_svfiprintf_r+0x1c0>
 800e8c8:	0800f9a0 	.word	0x0800f9a0
 800e8cc:	0800f9aa 	.word	0x0800f9aa
 800e8d0:	00000000 	.word	0x00000000
 800e8d4:	0800e62d 	.word	0x0800e62d
 800e8d8:	0800f9a6 	.word	0x0800f9a6

0800e8dc <_printf_common>:
 800e8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8e0:	4616      	mov	r6, r2
 800e8e2:	4698      	mov	r8, r3
 800e8e4:	688a      	ldr	r2, [r1, #8]
 800e8e6:	690b      	ldr	r3, [r1, #16]
 800e8e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e8ec:	4293      	cmp	r3, r2
 800e8ee:	bfb8      	it	lt
 800e8f0:	4613      	movlt	r3, r2
 800e8f2:	6033      	str	r3, [r6, #0]
 800e8f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e8f8:	4607      	mov	r7, r0
 800e8fa:	460c      	mov	r4, r1
 800e8fc:	b10a      	cbz	r2, 800e902 <_printf_common+0x26>
 800e8fe:	3301      	adds	r3, #1
 800e900:	6033      	str	r3, [r6, #0]
 800e902:	6823      	ldr	r3, [r4, #0]
 800e904:	0699      	lsls	r1, r3, #26
 800e906:	bf42      	ittt	mi
 800e908:	6833      	ldrmi	r3, [r6, #0]
 800e90a:	3302      	addmi	r3, #2
 800e90c:	6033      	strmi	r3, [r6, #0]
 800e90e:	6825      	ldr	r5, [r4, #0]
 800e910:	f015 0506 	ands.w	r5, r5, #6
 800e914:	d106      	bne.n	800e924 <_printf_common+0x48>
 800e916:	f104 0a19 	add.w	sl, r4, #25
 800e91a:	68e3      	ldr	r3, [r4, #12]
 800e91c:	6832      	ldr	r2, [r6, #0]
 800e91e:	1a9b      	subs	r3, r3, r2
 800e920:	42ab      	cmp	r3, r5
 800e922:	dc26      	bgt.n	800e972 <_printf_common+0x96>
 800e924:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e928:	6822      	ldr	r2, [r4, #0]
 800e92a:	3b00      	subs	r3, #0
 800e92c:	bf18      	it	ne
 800e92e:	2301      	movne	r3, #1
 800e930:	0692      	lsls	r2, r2, #26
 800e932:	d42b      	bmi.n	800e98c <_printf_common+0xb0>
 800e934:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e938:	4641      	mov	r1, r8
 800e93a:	4638      	mov	r0, r7
 800e93c:	47c8      	blx	r9
 800e93e:	3001      	adds	r0, #1
 800e940:	d01e      	beq.n	800e980 <_printf_common+0xa4>
 800e942:	6823      	ldr	r3, [r4, #0]
 800e944:	6922      	ldr	r2, [r4, #16]
 800e946:	f003 0306 	and.w	r3, r3, #6
 800e94a:	2b04      	cmp	r3, #4
 800e94c:	bf02      	ittt	eq
 800e94e:	68e5      	ldreq	r5, [r4, #12]
 800e950:	6833      	ldreq	r3, [r6, #0]
 800e952:	1aed      	subeq	r5, r5, r3
 800e954:	68a3      	ldr	r3, [r4, #8]
 800e956:	bf0c      	ite	eq
 800e958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e95c:	2500      	movne	r5, #0
 800e95e:	4293      	cmp	r3, r2
 800e960:	bfc4      	itt	gt
 800e962:	1a9b      	subgt	r3, r3, r2
 800e964:	18ed      	addgt	r5, r5, r3
 800e966:	2600      	movs	r6, #0
 800e968:	341a      	adds	r4, #26
 800e96a:	42b5      	cmp	r5, r6
 800e96c:	d11a      	bne.n	800e9a4 <_printf_common+0xc8>
 800e96e:	2000      	movs	r0, #0
 800e970:	e008      	b.n	800e984 <_printf_common+0xa8>
 800e972:	2301      	movs	r3, #1
 800e974:	4652      	mov	r2, sl
 800e976:	4641      	mov	r1, r8
 800e978:	4638      	mov	r0, r7
 800e97a:	47c8      	blx	r9
 800e97c:	3001      	adds	r0, #1
 800e97e:	d103      	bne.n	800e988 <_printf_common+0xac>
 800e980:	f04f 30ff 	mov.w	r0, #4294967295
 800e984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e988:	3501      	adds	r5, #1
 800e98a:	e7c6      	b.n	800e91a <_printf_common+0x3e>
 800e98c:	18e1      	adds	r1, r4, r3
 800e98e:	1c5a      	adds	r2, r3, #1
 800e990:	2030      	movs	r0, #48	@ 0x30
 800e992:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e996:	4422      	add	r2, r4
 800e998:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e99c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e9a0:	3302      	adds	r3, #2
 800e9a2:	e7c7      	b.n	800e934 <_printf_common+0x58>
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	4622      	mov	r2, r4
 800e9a8:	4641      	mov	r1, r8
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	47c8      	blx	r9
 800e9ae:	3001      	adds	r0, #1
 800e9b0:	d0e6      	beq.n	800e980 <_printf_common+0xa4>
 800e9b2:	3601      	adds	r6, #1
 800e9b4:	e7d9      	b.n	800e96a <_printf_common+0x8e>
	...

0800e9b8 <_printf_i>:
 800e9b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9bc:	7e0f      	ldrb	r7, [r1, #24]
 800e9be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e9c0:	2f78      	cmp	r7, #120	@ 0x78
 800e9c2:	4691      	mov	r9, r2
 800e9c4:	4680      	mov	r8, r0
 800e9c6:	460c      	mov	r4, r1
 800e9c8:	469a      	mov	sl, r3
 800e9ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e9ce:	d807      	bhi.n	800e9e0 <_printf_i+0x28>
 800e9d0:	2f62      	cmp	r7, #98	@ 0x62
 800e9d2:	d80a      	bhi.n	800e9ea <_printf_i+0x32>
 800e9d4:	2f00      	cmp	r7, #0
 800e9d6:	f000 80d2 	beq.w	800eb7e <_printf_i+0x1c6>
 800e9da:	2f58      	cmp	r7, #88	@ 0x58
 800e9dc:	f000 80b9 	beq.w	800eb52 <_printf_i+0x19a>
 800e9e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e9e8:	e03a      	b.n	800ea60 <_printf_i+0xa8>
 800e9ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e9ee:	2b15      	cmp	r3, #21
 800e9f0:	d8f6      	bhi.n	800e9e0 <_printf_i+0x28>
 800e9f2:	a101      	add	r1, pc, #4	@ (adr r1, 800e9f8 <_printf_i+0x40>)
 800e9f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9f8:	0800ea51 	.word	0x0800ea51
 800e9fc:	0800ea65 	.word	0x0800ea65
 800ea00:	0800e9e1 	.word	0x0800e9e1
 800ea04:	0800e9e1 	.word	0x0800e9e1
 800ea08:	0800e9e1 	.word	0x0800e9e1
 800ea0c:	0800e9e1 	.word	0x0800e9e1
 800ea10:	0800ea65 	.word	0x0800ea65
 800ea14:	0800e9e1 	.word	0x0800e9e1
 800ea18:	0800e9e1 	.word	0x0800e9e1
 800ea1c:	0800e9e1 	.word	0x0800e9e1
 800ea20:	0800e9e1 	.word	0x0800e9e1
 800ea24:	0800eb65 	.word	0x0800eb65
 800ea28:	0800ea8f 	.word	0x0800ea8f
 800ea2c:	0800eb1f 	.word	0x0800eb1f
 800ea30:	0800e9e1 	.word	0x0800e9e1
 800ea34:	0800e9e1 	.word	0x0800e9e1
 800ea38:	0800eb87 	.word	0x0800eb87
 800ea3c:	0800e9e1 	.word	0x0800e9e1
 800ea40:	0800ea8f 	.word	0x0800ea8f
 800ea44:	0800e9e1 	.word	0x0800e9e1
 800ea48:	0800e9e1 	.word	0x0800e9e1
 800ea4c:	0800eb27 	.word	0x0800eb27
 800ea50:	6833      	ldr	r3, [r6, #0]
 800ea52:	1d1a      	adds	r2, r3, #4
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	6032      	str	r2, [r6, #0]
 800ea58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ea60:	2301      	movs	r3, #1
 800ea62:	e09d      	b.n	800eba0 <_printf_i+0x1e8>
 800ea64:	6833      	ldr	r3, [r6, #0]
 800ea66:	6820      	ldr	r0, [r4, #0]
 800ea68:	1d19      	adds	r1, r3, #4
 800ea6a:	6031      	str	r1, [r6, #0]
 800ea6c:	0606      	lsls	r6, r0, #24
 800ea6e:	d501      	bpl.n	800ea74 <_printf_i+0xbc>
 800ea70:	681d      	ldr	r5, [r3, #0]
 800ea72:	e003      	b.n	800ea7c <_printf_i+0xc4>
 800ea74:	0645      	lsls	r5, r0, #25
 800ea76:	d5fb      	bpl.n	800ea70 <_printf_i+0xb8>
 800ea78:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea7c:	2d00      	cmp	r5, #0
 800ea7e:	da03      	bge.n	800ea88 <_printf_i+0xd0>
 800ea80:	232d      	movs	r3, #45	@ 0x2d
 800ea82:	426d      	negs	r5, r5
 800ea84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea88:	4859      	ldr	r0, [pc, #356]	@ (800ebf0 <_printf_i+0x238>)
 800ea8a:	230a      	movs	r3, #10
 800ea8c:	e011      	b.n	800eab2 <_printf_i+0xfa>
 800ea8e:	6821      	ldr	r1, [r4, #0]
 800ea90:	6833      	ldr	r3, [r6, #0]
 800ea92:	0608      	lsls	r0, r1, #24
 800ea94:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea98:	d402      	bmi.n	800eaa0 <_printf_i+0xe8>
 800ea9a:	0649      	lsls	r1, r1, #25
 800ea9c:	bf48      	it	mi
 800ea9e:	b2ad      	uxthmi	r5, r5
 800eaa0:	2f6f      	cmp	r7, #111	@ 0x6f
 800eaa2:	4853      	ldr	r0, [pc, #332]	@ (800ebf0 <_printf_i+0x238>)
 800eaa4:	6033      	str	r3, [r6, #0]
 800eaa6:	bf14      	ite	ne
 800eaa8:	230a      	movne	r3, #10
 800eaaa:	2308      	moveq	r3, #8
 800eaac:	2100      	movs	r1, #0
 800eaae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eab2:	6866      	ldr	r6, [r4, #4]
 800eab4:	60a6      	str	r6, [r4, #8]
 800eab6:	2e00      	cmp	r6, #0
 800eab8:	bfa2      	ittt	ge
 800eaba:	6821      	ldrge	r1, [r4, #0]
 800eabc:	f021 0104 	bicge.w	r1, r1, #4
 800eac0:	6021      	strge	r1, [r4, #0]
 800eac2:	b90d      	cbnz	r5, 800eac8 <_printf_i+0x110>
 800eac4:	2e00      	cmp	r6, #0
 800eac6:	d04b      	beq.n	800eb60 <_printf_i+0x1a8>
 800eac8:	4616      	mov	r6, r2
 800eaca:	fbb5 f1f3 	udiv	r1, r5, r3
 800eace:	fb03 5711 	mls	r7, r3, r1, r5
 800ead2:	5dc7      	ldrb	r7, [r0, r7]
 800ead4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ead8:	462f      	mov	r7, r5
 800eada:	42bb      	cmp	r3, r7
 800eadc:	460d      	mov	r5, r1
 800eade:	d9f4      	bls.n	800eaca <_printf_i+0x112>
 800eae0:	2b08      	cmp	r3, #8
 800eae2:	d10b      	bne.n	800eafc <_printf_i+0x144>
 800eae4:	6823      	ldr	r3, [r4, #0]
 800eae6:	07df      	lsls	r7, r3, #31
 800eae8:	d508      	bpl.n	800eafc <_printf_i+0x144>
 800eaea:	6923      	ldr	r3, [r4, #16]
 800eaec:	6861      	ldr	r1, [r4, #4]
 800eaee:	4299      	cmp	r1, r3
 800eaf0:	bfde      	ittt	le
 800eaf2:	2330      	movle	r3, #48	@ 0x30
 800eaf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eaf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eafc:	1b92      	subs	r2, r2, r6
 800eafe:	6122      	str	r2, [r4, #16]
 800eb00:	f8cd a000 	str.w	sl, [sp]
 800eb04:	464b      	mov	r3, r9
 800eb06:	aa03      	add	r2, sp, #12
 800eb08:	4621      	mov	r1, r4
 800eb0a:	4640      	mov	r0, r8
 800eb0c:	f7ff fee6 	bl	800e8dc <_printf_common>
 800eb10:	3001      	adds	r0, #1
 800eb12:	d14a      	bne.n	800ebaa <_printf_i+0x1f2>
 800eb14:	f04f 30ff 	mov.w	r0, #4294967295
 800eb18:	b004      	add	sp, #16
 800eb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb1e:	6823      	ldr	r3, [r4, #0]
 800eb20:	f043 0320 	orr.w	r3, r3, #32
 800eb24:	6023      	str	r3, [r4, #0]
 800eb26:	4833      	ldr	r0, [pc, #204]	@ (800ebf4 <_printf_i+0x23c>)
 800eb28:	2778      	movs	r7, #120	@ 0x78
 800eb2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb2e:	6823      	ldr	r3, [r4, #0]
 800eb30:	6831      	ldr	r1, [r6, #0]
 800eb32:	061f      	lsls	r7, r3, #24
 800eb34:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb38:	d402      	bmi.n	800eb40 <_printf_i+0x188>
 800eb3a:	065f      	lsls	r7, r3, #25
 800eb3c:	bf48      	it	mi
 800eb3e:	b2ad      	uxthmi	r5, r5
 800eb40:	6031      	str	r1, [r6, #0]
 800eb42:	07d9      	lsls	r1, r3, #31
 800eb44:	bf44      	itt	mi
 800eb46:	f043 0320 	orrmi.w	r3, r3, #32
 800eb4a:	6023      	strmi	r3, [r4, #0]
 800eb4c:	b11d      	cbz	r5, 800eb56 <_printf_i+0x19e>
 800eb4e:	2310      	movs	r3, #16
 800eb50:	e7ac      	b.n	800eaac <_printf_i+0xf4>
 800eb52:	4827      	ldr	r0, [pc, #156]	@ (800ebf0 <_printf_i+0x238>)
 800eb54:	e7e9      	b.n	800eb2a <_printf_i+0x172>
 800eb56:	6823      	ldr	r3, [r4, #0]
 800eb58:	f023 0320 	bic.w	r3, r3, #32
 800eb5c:	6023      	str	r3, [r4, #0]
 800eb5e:	e7f6      	b.n	800eb4e <_printf_i+0x196>
 800eb60:	4616      	mov	r6, r2
 800eb62:	e7bd      	b.n	800eae0 <_printf_i+0x128>
 800eb64:	6833      	ldr	r3, [r6, #0]
 800eb66:	6825      	ldr	r5, [r4, #0]
 800eb68:	6961      	ldr	r1, [r4, #20]
 800eb6a:	1d18      	adds	r0, r3, #4
 800eb6c:	6030      	str	r0, [r6, #0]
 800eb6e:	062e      	lsls	r6, r5, #24
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	d501      	bpl.n	800eb78 <_printf_i+0x1c0>
 800eb74:	6019      	str	r1, [r3, #0]
 800eb76:	e002      	b.n	800eb7e <_printf_i+0x1c6>
 800eb78:	0668      	lsls	r0, r5, #25
 800eb7a:	d5fb      	bpl.n	800eb74 <_printf_i+0x1bc>
 800eb7c:	8019      	strh	r1, [r3, #0]
 800eb7e:	2300      	movs	r3, #0
 800eb80:	6123      	str	r3, [r4, #16]
 800eb82:	4616      	mov	r6, r2
 800eb84:	e7bc      	b.n	800eb00 <_printf_i+0x148>
 800eb86:	6833      	ldr	r3, [r6, #0]
 800eb88:	1d1a      	adds	r2, r3, #4
 800eb8a:	6032      	str	r2, [r6, #0]
 800eb8c:	681e      	ldr	r6, [r3, #0]
 800eb8e:	6862      	ldr	r2, [r4, #4]
 800eb90:	2100      	movs	r1, #0
 800eb92:	4630      	mov	r0, r6
 800eb94:	f7f1 fb24 	bl	80001e0 <memchr>
 800eb98:	b108      	cbz	r0, 800eb9e <_printf_i+0x1e6>
 800eb9a:	1b80      	subs	r0, r0, r6
 800eb9c:	6060      	str	r0, [r4, #4]
 800eb9e:	6863      	ldr	r3, [r4, #4]
 800eba0:	6123      	str	r3, [r4, #16]
 800eba2:	2300      	movs	r3, #0
 800eba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eba8:	e7aa      	b.n	800eb00 <_printf_i+0x148>
 800ebaa:	6923      	ldr	r3, [r4, #16]
 800ebac:	4632      	mov	r2, r6
 800ebae:	4649      	mov	r1, r9
 800ebb0:	4640      	mov	r0, r8
 800ebb2:	47d0      	blx	sl
 800ebb4:	3001      	adds	r0, #1
 800ebb6:	d0ad      	beq.n	800eb14 <_printf_i+0x15c>
 800ebb8:	6823      	ldr	r3, [r4, #0]
 800ebba:	079b      	lsls	r3, r3, #30
 800ebbc:	d413      	bmi.n	800ebe6 <_printf_i+0x22e>
 800ebbe:	68e0      	ldr	r0, [r4, #12]
 800ebc0:	9b03      	ldr	r3, [sp, #12]
 800ebc2:	4298      	cmp	r0, r3
 800ebc4:	bfb8      	it	lt
 800ebc6:	4618      	movlt	r0, r3
 800ebc8:	e7a6      	b.n	800eb18 <_printf_i+0x160>
 800ebca:	2301      	movs	r3, #1
 800ebcc:	4632      	mov	r2, r6
 800ebce:	4649      	mov	r1, r9
 800ebd0:	4640      	mov	r0, r8
 800ebd2:	47d0      	blx	sl
 800ebd4:	3001      	adds	r0, #1
 800ebd6:	d09d      	beq.n	800eb14 <_printf_i+0x15c>
 800ebd8:	3501      	adds	r5, #1
 800ebda:	68e3      	ldr	r3, [r4, #12]
 800ebdc:	9903      	ldr	r1, [sp, #12]
 800ebde:	1a5b      	subs	r3, r3, r1
 800ebe0:	42ab      	cmp	r3, r5
 800ebe2:	dcf2      	bgt.n	800ebca <_printf_i+0x212>
 800ebe4:	e7eb      	b.n	800ebbe <_printf_i+0x206>
 800ebe6:	2500      	movs	r5, #0
 800ebe8:	f104 0619 	add.w	r6, r4, #25
 800ebec:	e7f5      	b.n	800ebda <_printf_i+0x222>
 800ebee:	bf00      	nop
 800ebf0:	0800f9b1 	.word	0x0800f9b1
 800ebf4:	0800f9c2 	.word	0x0800f9c2

0800ebf8 <memmove>:
 800ebf8:	4288      	cmp	r0, r1
 800ebfa:	b510      	push	{r4, lr}
 800ebfc:	eb01 0402 	add.w	r4, r1, r2
 800ec00:	d902      	bls.n	800ec08 <memmove+0x10>
 800ec02:	4284      	cmp	r4, r0
 800ec04:	4623      	mov	r3, r4
 800ec06:	d807      	bhi.n	800ec18 <memmove+0x20>
 800ec08:	1e43      	subs	r3, r0, #1
 800ec0a:	42a1      	cmp	r1, r4
 800ec0c:	d008      	beq.n	800ec20 <memmove+0x28>
 800ec0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec16:	e7f8      	b.n	800ec0a <memmove+0x12>
 800ec18:	4402      	add	r2, r0
 800ec1a:	4601      	mov	r1, r0
 800ec1c:	428a      	cmp	r2, r1
 800ec1e:	d100      	bne.n	800ec22 <memmove+0x2a>
 800ec20:	bd10      	pop	{r4, pc}
 800ec22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec2a:	e7f7      	b.n	800ec1c <memmove+0x24>

0800ec2c <_sbrk_r>:
 800ec2c:	b538      	push	{r3, r4, r5, lr}
 800ec2e:	4d06      	ldr	r5, [pc, #24]	@ (800ec48 <_sbrk_r+0x1c>)
 800ec30:	2300      	movs	r3, #0
 800ec32:	4604      	mov	r4, r0
 800ec34:	4608      	mov	r0, r1
 800ec36:	602b      	str	r3, [r5, #0]
 800ec38:	f7f3 fe86 	bl	8002948 <_sbrk>
 800ec3c:	1c43      	adds	r3, r0, #1
 800ec3e:	d102      	bne.n	800ec46 <_sbrk_r+0x1a>
 800ec40:	682b      	ldr	r3, [r5, #0]
 800ec42:	b103      	cbz	r3, 800ec46 <_sbrk_r+0x1a>
 800ec44:	6023      	str	r3, [r4, #0]
 800ec46:	bd38      	pop	{r3, r4, r5, pc}
 800ec48:	20004c48 	.word	0x20004c48

0800ec4c <_realloc_r>:
 800ec4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec50:	4680      	mov	r8, r0
 800ec52:	4615      	mov	r5, r2
 800ec54:	460c      	mov	r4, r1
 800ec56:	b921      	cbnz	r1, 800ec62 <_realloc_r+0x16>
 800ec58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec5c:	4611      	mov	r1, r2
 800ec5e:	f7ff bc59 	b.w	800e514 <_malloc_r>
 800ec62:	b92a      	cbnz	r2, 800ec70 <_realloc_r+0x24>
 800ec64:	f7ff fbea 	bl	800e43c <_free_r>
 800ec68:	2400      	movs	r4, #0
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec70:	f000 f81a 	bl	800eca8 <_malloc_usable_size_r>
 800ec74:	4285      	cmp	r5, r0
 800ec76:	4606      	mov	r6, r0
 800ec78:	d802      	bhi.n	800ec80 <_realloc_r+0x34>
 800ec7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ec7e:	d8f4      	bhi.n	800ec6a <_realloc_r+0x1e>
 800ec80:	4629      	mov	r1, r5
 800ec82:	4640      	mov	r0, r8
 800ec84:	f7ff fc46 	bl	800e514 <_malloc_r>
 800ec88:	4607      	mov	r7, r0
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	d0ec      	beq.n	800ec68 <_realloc_r+0x1c>
 800ec8e:	42b5      	cmp	r5, r6
 800ec90:	462a      	mov	r2, r5
 800ec92:	4621      	mov	r1, r4
 800ec94:	bf28      	it	cs
 800ec96:	4632      	movcs	r2, r6
 800ec98:	f7ff fbc2 	bl	800e420 <memcpy>
 800ec9c:	4621      	mov	r1, r4
 800ec9e:	4640      	mov	r0, r8
 800eca0:	f7ff fbcc 	bl	800e43c <_free_r>
 800eca4:	463c      	mov	r4, r7
 800eca6:	e7e0      	b.n	800ec6a <_realloc_r+0x1e>

0800eca8 <_malloc_usable_size_r>:
 800eca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecac:	1f18      	subs	r0, r3, #4
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	bfbc      	itt	lt
 800ecb2:	580b      	ldrlt	r3, [r1, r0]
 800ecb4:	18c0      	addlt	r0, r0, r3
 800ecb6:	4770      	bx	lr

0800ecb8 <atan2>:
 800ecb8:	f000 baf2 	b.w	800f2a0 <__ieee754_atan2>
 800ecbc:	0000      	movs	r0, r0
	...

0800ecc0 <log>:
 800ecc0:	b538      	push	{r3, r4, r5, lr}
 800ecc2:	ed2d 8b02 	vpush	{d8}
 800ecc6:	ec55 4b10 	vmov	r4, r5, d0
 800ecca:	f000 fbb1 	bl	800f430 <__ieee754_log>
 800ecce:	4622      	mov	r2, r4
 800ecd0:	462b      	mov	r3, r5
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	eeb0 8a40 	vmov.f32	s16, s0
 800ecda:	eef0 8a60 	vmov.f32	s17, s1
 800ecde:	f7f1 ff25 	bl	8000b2c <__aeabi_dcmpun>
 800ece2:	b998      	cbnz	r0, 800ed0c <log+0x4c>
 800ece4:	2200      	movs	r2, #0
 800ece6:	2300      	movs	r3, #0
 800ece8:	4620      	mov	r0, r4
 800ecea:	4629      	mov	r1, r5
 800ecec:	f7f1 ff14 	bl	8000b18 <__aeabi_dcmpgt>
 800ecf0:	b960      	cbnz	r0, 800ed0c <log+0x4c>
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	4629      	mov	r1, r5
 800ecfa:	f7f1 fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 800ecfe:	b160      	cbz	r0, 800ed1a <log+0x5a>
 800ed00:	f7ff fb62 	bl	800e3c8 <__errno>
 800ed04:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800ed30 <log+0x70>
 800ed08:	2322      	movs	r3, #34	@ 0x22
 800ed0a:	6003      	str	r3, [r0, #0]
 800ed0c:	eeb0 0a48 	vmov.f32	s0, s16
 800ed10:	eef0 0a68 	vmov.f32	s1, s17
 800ed14:	ecbd 8b02 	vpop	{d8}
 800ed18:	bd38      	pop	{r3, r4, r5, pc}
 800ed1a:	f7ff fb55 	bl	800e3c8 <__errno>
 800ed1e:	ecbd 8b02 	vpop	{d8}
 800ed22:	2321      	movs	r3, #33	@ 0x21
 800ed24:	6003      	str	r3, [r0, #0]
 800ed26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed2a:	4803      	ldr	r0, [pc, #12]	@ (800ed38 <log+0x78>)
 800ed2c:	f000 b9d4 	b.w	800f0d8 <nan>
 800ed30:	00000000 	.word	0x00000000
 800ed34:	fff00000 	.word	0xfff00000
 800ed38:	0800f9a5 	.word	0x0800f9a5

0800ed3c <sqrt>:
 800ed3c:	b538      	push	{r3, r4, r5, lr}
 800ed3e:	ed2d 8b02 	vpush	{d8}
 800ed42:	ec55 4b10 	vmov	r4, r5, d0
 800ed46:	f000 f9cf 	bl	800f0e8 <__ieee754_sqrt>
 800ed4a:	4622      	mov	r2, r4
 800ed4c:	462b      	mov	r3, r5
 800ed4e:	4620      	mov	r0, r4
 800ed50:	4629      	mov	r1, r5
 800ed52:	eeb0 8a40 	vmov.f32	s16, s0
 800ed56:	eef0 8a60 	vmov.f32	s17, s1
 800ed5a:	f7f1 fee7 	bl	8000b2c <__aeabi_dcmpun>
 800ed5e:	b990      	cbnz	r0, 800ed86 <sqrt+0x4a>
 800ed60:	2200      	movs	r2, #0
 800ed62:	2300      	movs	r3, #0
 800ed64:	4620      	mov	r0, r4
 800ed66:	4629      	mov	r1, r5
 800ed68:	f7f1 feb8 	bl	8000adc <__aeabi_dcmplt>
 800ed6c:	b158      	cbz	r0, 800ed86 <sqrt+0x4a>
 800ed6e:	f7ff fb2b 	bl	800e3c8 <__errno>
 800ed72:	2321      	movs	r3, #33	@ 0x21
 800ed74:	6003      	str	r3, [r0, #0]
 800ed76:	2200      	movs	r2, #0
 800ed78:	2300      	movs	r3, #0
 800ed7a:	4610      	mov	r0, r2
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	f7f1 fd65 	bl	800084c <__aeabi_ddiv>
 800ed82:	ec41 0b18 	vmov	d8, r0, r1
 800ed86:	eeb0 0a48 	vmov.f32	s0, s16
 800ed8a:	eef0 0a68 	vmov.f32	s1, s17
 800ed8e:	ecbd 8b02 	vpop	{d8}
 800ed92:	bd38      	pop	{r3, r4, r5, pc}
 800ed94:	0000      	movs	r0, r0
	...

0800ed98 <atan>:
 800ed98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed9c:	ec55 4b10 	vmov	r4, r5, d0
 800eda0:	4bbf      	ldr	r3, [pc, #764]	@ (800f0a0 <atan+0x308>)
 800eda2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800eda6:	429e      	cmp	r6, r3
 800eda8:	46ab      	mov	fp, r5
 800edaa:	d918      	bls.n	800edde <atan+0x46>
 800edac:	4bbd      	ldr	r3, [pc, #756]	@ (800f0a4 <atan+0x30c>)
 800edae:	429e      	cmp	r6, r3
 800edb0:	d801      	bhi.n	800edb6 <atan+0x1e>
 800edb2:	d109      	bne.n	800edc8 <atan+0x30>
 800edb4:	b144      	cbz	r4, 800edc8 <atan+0x30>
 800edb6:	4622      	mov	r2, r4
 800edb8:	462b      	mov	r3, r5
 800edba:	4620      	mov	r0, r4
 800edbc:	4629      	mov	r1, r5
 800edbe:	f7f1 fa65 	bl	800028c <__adddf3>
 800edc2:	4604      	mov	r4, r0
 800edc4:	460d      	mov	r5, r1
 800edc6:	e006      	b.n	800edd6 <atan+0x3e>
 800edc8:	f1bb 0f00 	cmp.w	fp, #0
 800edcc:	f340 812b 	ble.w	800f026 <atan+0x28e>
 800edd0:	a597      	add	r5, pc, #604	@ (adr r5, 800f030 <atan+0x298>)
 800edd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800edd6:	ec45 4b10 	vmov	d0, r4, r5
 800edda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edde:	4bb2      	ldr	r3, [pc, #712]	@ (800f0a8 <atan+0x310>)
 800ede0:	429e      	cmp	r6, r3
 800ede2:	d813      	bhi.n	800ee0c <atan+0x74>
 800ede4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ede8:	429e      	cmp	r6, r3
 800edea:	d80c      	bhi.n	800ee06 <atan+0x6e>
 800edec:	a392      	add	r3, pc, #584	@ (adr r3, 800f038 <atan+0x2a0>)
 800edee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf2:	4620      	mov	r0, r4
 800edf4:	4629      	mov	r1, r5
 800edf6:	f7f1 fa49 	bl	800028c <__adddf3>
 800edfa:	4bac      	ldr	r3, [pc, #688]	@ (800f0ac <atan+0x314>)
 800edfc:	2200      	movs	r2, #0
 800edfe:	f7f1 fe8b 	bl	8000b18 <__aeabi_dcmpgt>
 800ee02:	2800      	cmp	r0, #0
 800ee04:	d1e7      	bne.n	800edd6 <atan+0x3e>
 800ee06:	f04f 3aff 	mov.w	sl, #4294967295
 800ee0a:	e029      	b.n	800ee60 <atan+0xc8>
 800ee0c:	f000 f95c 	bl	800f0c8 <fabs>
 800ee10:	4ba7      	ldr	r3, [pc, #668]	@ (800f0b0 <atan+0x318>)
 800ee12:	429e      	cmp	r6, r3
 800ee14:	ec55 4b10 	vmov	r4, r5, d0
 800ee18:	f200 80bc 	bhi.w	800ef94 <atan+0x1fc>
 800ee1c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800ee20:	429e      	cmp	r6, r3
 800ee22:	f200 809e 	bhi.w	800ef62 <atan+0x1ca>
 800ee26:	4622      	mov	r2, r4
 800ee28:	462b      	mov	r3, r5
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	4629      	mov	r1, r5
 800ee2e:	f7f1 fa2d 	bl	800028c <__adddf3>
 800ee32:	4b9e      	ldr	r3, [pc, #632]	@ (800f0ac <atan+0x314>)
 800ee34:	2200      	movs	r2, #0
 800ee36:	f7f1 fa27 	bl	8000288 <__aeabi_dsub>
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	4606      	mov	r6, r0
 800ee3e:	460f      	mov	r7, r1
 800ee40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ee44:	4620      	mov	r0, r4
 800ee46:	4629      	mov	r1, r5
 800ee48:	f7f1 fa20 	bl	800028c <__adddf3>
 800ee4c:	4602      	mov	r2, r0
 800ee4e:	460b      	mov	r3, r1
 800ee50:	4630      	mov	r0, r6
 800ee52:	4639      	mov	r1, r7
 800ee54:	f7f1 fcfa 	bl	800084c <__aeabi_ddiv>
 800ee58:	f04f 0a00 	mov.w	sl, #0
 800ee5c:	4604      	mov	r4, r0
 800ee5e:	460d      	mov	r5, r1
 800ee60:	4622      	mov	r2, r4
 800ee62:	462b      	mov	r3, r5
 800ee64:	4620      	mov	r0, r4
 800ee66:	4629      	mov	r1, r5
 800ee68:	f7f1 fbc6 	bl	80005f8 <__aeabi_dmul>
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	460b      	mov	r3, r1
 800ee70:	4680      	mov	r8, r0
 800ee72:	4689      	mov	r9, r1
 800ee74:	f7f1 fbc0 	bl	80005f8 <__aeabi_dmul>
 800ee78:	a371      	add	r3, pc, #452	@ (adr r3, 800f040 <atan+0x2a8>)
 800ee7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee7e:	4606      	mov	r6, r0
 800ee80:	460f      	mov	r7, r1
 800ee82:	f7f1 fbb9 	bl	80005f8 <__aeabi_dmul>
 800ee86:	a370      	add	r3, pc, #448	@ (adr r3, 800f048 <atan+0x2b0>)
 800ee88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8c:	f7f1 f9fe 	bl	800028c <__adddf3>
 800ee90:	4632      	mov	r2, r6
 800ee92:	463b      	mov	r3, r7
 800ee94:	f7f1 fbb0 	bl	80005f8 <__aeabi_dmul>
 800ee98:	a36d      	add	r3, pc, #436	@ (adr r3, 800f050 <atan+0x2b8>)
 800ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9e:	f7f1 f9f5 	bl	800028c <__adddf3>
 800eea2:	4632      	mov	r2, r6
 800eea4:	463b      	mov	r3, r7
 800eea6:	f7f1 fba7 	bl	80005f8 <__aeabi_dmul>
 800eeaa:	a36b      	add	r3, pc, #428	@ (adr r3, 800f058 <atan+0x2c0>)
 800eeac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb0:	f7f1 f9ec 	bl	800028c <__adddf3>
 800eeb4:	4632      	mov	r2, r6
 800eeb6:	463b      	mov	r3, r7
 800eeb8:	f7f1 fb9e 	bl	80005f8 <__aeabi_dmul>
 800eebc:	a368      	add	r3, pc, #416	@ (adr r3, 800f060 <atan+0x2c8>)
 800eebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec2:	f7f1 f9e3 	bl	800028c <__adddf3>
 800eec6:	4632      	mov	r2, r6
 800eec8:	463b      	mov	r3, r7
 800eeca:	f7f1 fb95 	bl	80005f8 <__aeabi_dmul>
 800eece:	a366      	add	r3, pc, #408	@ (adr r3, 800f068 <atan+0x2d0>)
 800eed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed4:	f7f1 f9da 	bl	800028c <__adddf3>
 800eed8:	4642      	mov	r2, r8
 800eeda:	464b      	mov	r3, r9
 800eedc:	f7f1 fb8c 	bl	80005f8 <__aeabi_dmul>
 800eee0:	a363      	add	r3, pc, #396	@ (adr r3, 800f070 <atan+0x2d8>)
 800eee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee6:	4680      	mov	r8, r0
 800eee8:	4689      	mov	r9, r1
 800eeea:	4630      	mov	r0, r6
 800eeec:	4639      	mov	r1, r7
 800eeee:	f7f1 fb83 	bl	80005f8 <__aeabi_dmul>
 800eef2:	a361      	add	r3, pc, #388	@ (adr r3, 800f078 <atan+0x2e0>)
 800eef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef8:	f7f1 f9c6 	bl	8000288 <__aeabi_dsub>
 800eefc:	4632      	mov	r2, r6
 800eefe:	463b      	mov	r3, r7
 800ef00:	f7f1 fb7a 	bl	80005f8 <__aeabi_dmul>
 800ef04:	a35e      	add	r3, pc, #376	@ (adr r3, 800f080 <atan+0x2e8>)
 800ef06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0a:	f7f1 f9bd 	bl	8000288 <__aeabi_dsub>
 800ef0e:	4632      	mov	r2, r6
 800ef10:	463b      	mov	r3, r7
 800ef12:	f7f1 fb71 	bl	80005f8 <__aeabi_dmul>
 800ef16:	a35c      	add	r3, pc, #368	@ (adr r3, 800f088 <atan+0x2f0>)
 800ef18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1c:	f7f1 f9b4 	bl	8000288 <__aeabi_dsub>
 800ef20:	4632      	mov	r2, r6
 800ef22:	463b      	mov	r3, r7
 800ef24:	f7f1 fb68 	bl	80005f8 <__aeabi_dmul>
 800ef28:	a359      	add	r3, pc, #356	@ (adr r3, 800f090 <atan+0x2f8>)
 800ef2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2e:	f7f1 f9ab 	bl	8000288 <__aeabi_dsub>
 800ef32:	4632      	mov	r2, r6
 800ef34:	463b      	mov	r3, r7
 800ef36:	f7f1 fb5f 	bl	80005f8 <__aeabi_dmul>
 800ef3a:	4602      	mov	r2, r0
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	4640      	mov	r0, r8
 800ef40:	4649      	mov	r1, r9
 800ef42:	f7f1 f9a3 	bl	800028c <__adddf3>
 800ef46:	4622      	mov	r2, r4
 800ef48:	462b      	mov	r3, r5
 800ef4a:	f7f1 fb55 	bl	80005f8 <__aeabi_dmul>
 800ef4e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ef52:	4602      	mov	r2, r0
 800ef54:	460b      	mov	r3, r1
 800ef56:	d148      	bne.n	800efea <atan+0x252>
 800ef58:	4620      	mov	r0, r4
 800ef5a:	4629      	mov	r1, r5
 800ef5c:	f7f1 f994 	bl	8000288 <__aeabi_dsub>
 800ef60:	e72f      	b.n	800edc2 <atan+0x2a>
 800ef62:	4b52      	ldr	r3, [pc, #328]	@ (800f0ac <atan+0x314>)
 800ef64:	2200      	movs	r2, #0
 800ef66:	4620      	mov	r0, r4
 800ef68:	4629      	mov	r1, r5
 800ef6a:	f7f1 f98d 	bl	8000288 <__aeabi_dsub>
 800ef6e:	4b4f      	ldr	r3, [pc, #316]	@ (800f0ac <atan+0x314>)
 800ef70:	4606      	mov	r6, r0
 800ef72:	460f      	mov	r7, r1
 800ef74:	2200      	movs	r2, #0
 800ef76:	4620      	mov	r0, r4
 800ef78:	4629      	mov	r1, r5
 800ef7a:	f7f1 f987 	bl	800028c <__adddf3>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	460b      	mov	r3, r1
 800ef82:	4630      	mov	r0, r6
 800ef84:	4639      	mov	r1, r7
 800ef86:	f7f1 fc61 	bl	800084c <__aeabi_ddiv>
 800ef8a:	f04f 0a01 	mov.w	sl, #1
 800ef8e:	4604      	mov	r4, r0
 800ef90:	460d      	mov	r5, r1
 800ef92:	e765      	b.n	800ee60 <atan+0xc8>
 800ef94:	4b47      	ldr	r3, [pc, #284]	@ (800f0b4 <atan+0x31c>)
 800ef96:	429e      	cmp	r6, r3
 800ef98:	d21c      	bcs.n	800efd4 <atan+0x23c>
 800ef9a:	4b47      	ldr	r3, [pc, #284]	@ (800f0b8 <atan+0x320>)
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	4620      	mov	r0, r4
 800efa0:	4629      	mov	r1, r5
 800efa2:	f7f1 f971 	bl	8000288 <__aeabi_dsub>
 800efa6:	4b44      	ldr	r3, [pc, #272]	@ (800f0b8 <atan+0x320>)
 800efa8:	4606      	mov	r6, r0
 800efaa:	460f      	mov	r7, r1
 800efac:	2200      	movs	r2, #0
 800efae:	4620      	mov	r0, r4
 800efb0:	4629      	mov	r1, r5
 800efb2:	f7f1 fb21 	bl	80005f8 <__aeabi_dmul>
 800efb6:	4b3d      	ldr	r3, [pc, #244]	@ (800f0ac <atan+0x314>)
 800efb8:	2200      	movs	r2, #0
 800efba:	f7f1 f967 	bl	800028c <__adddf3>
 800efbe:	4602      	mov	r2, r0
 800efc0:	460b      	mov	r3, r1
 800efc2:	4630      	mov	r0, r6
 800efc4:	4639      	mov	r1, r7
 800efc6:	f7f1 fc41 	bl	800084c <__aeabi_ddiv>
 800efca:	f04f 0a02 	mov.w	sl, #2
 800efce:	4604      	mov	r4, r0
 800efd0:	460d      	mov	r5, r1
 800efd2:	e745      	b.n	800ee60 <atan+0xc8>
 800efd4:	4622      	mov	r2, r4
 800efd6:	462b      	mov	r3, r5
 800efd8:	4938      	ldr	r1, [pc, #224]	@ (800f0bc <atan+0x324>)
 800efda:	2000      	movs	r0, #0
 800efdc:	f7f1 fc36 	bl	800084c <__aeabi_ddiv>
 800efe0:	f04f 0a03 	mov.w	sl, #3
 800efe4:	4604      	mov	r4, r0
 800efe6:	460d      	mov	r5, r1
 800efe8:	e73a      	b.n	800ee60 <atan+0xc8>
 800efea:	4b35      	ldr	r3, [pc, #212]	@ (800f0c0 <atan+0x328>)
 800efec:	4e35      	ldr	r6, [pc, #212]	@ (800f0c4 <atan+0x32c>)
 800efee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff6:	f7f1 f947 	bl	8000288 <__aeabi_dsub>
 800effa:	4622      	mov	r2, r4
 800effc:	462b      	mov	r3, r5
 800effe:	f7f1 f943 	bl	8000288 <__aeabi_dsub>
 800f002:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f006:	4602      	mov	r2, r0
 800f008:	460b      	mov	r3, r1
 800f00a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f00e:	f7f1 f93b 	bl	8000288 <__aeabi_dsub>
 800f012:	f1bb 0f00 	cmp.w	fp, #0
 800f016:	4604      	mov	r4, r0
 800f018:	460d      	mov	r5, r1
 800f01a:	f6bf aedc 	bge.w	800edd6 <atan+0x3e>
 800f01e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f022:	461d      	mov	r5, r3
 800f024:	e6d7      	b.n	800edd6 <atan+0x3e>
 800f026:	a51c      	add	r5, pc, #112	@ (adr r5, 800f098 <atan+0x300>)
 800f028:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f02c:	e6d3      	b.n	800edd6 <atan+0x3e>
 800f02e:	bf00      	nop
 800f030:	54442d18 	.word	0x54442d18
 800f034:	3ff921fb 	.word	0x3ff921fb
 800f038:	8800759c 	.word	0x8800759c
 800f03c:	7e37e43c 	.word	0x7e37e43c
 800f040:	e322da11 	.word	0xe322da11
 800f044:	3f90ad3a 	.word	0x3f90ad3a
 800f048:	24760deb 	.word	0x24760deb
 800f04c:	3fa97b4b 	.word	0x3fa97b4b
 800f050:	a0d03d51 	.word	0xa0d03d51
 800f054:	3fb10d66 	.word	0x3fb10d66
 800f058:	c54c206e 	.word	0xc54c206e
 800f05c:	3fb745cd 	.word	0x3fb745cd
 800f060:	920083ff 	.word	0x920083ff
 800f064:	3fc24924 	.word	0x3fc24924
 800f068:	5555550d 	.word	0x5555550d
 800f06c:	3fd55555 	.word	0x3fd55555
 800f070:	2c6a6c2f 	.word	0x2c6a6c2f
 800f074:	bfa2b444 	.word	0xbfa2b444
 800f078:	52defd9a 	.word	0x52defd9a
 800f07c:	3fadde2d 	.word	0x3fadde2d
 800f080:	af749a6d 	.word	0xaf749a6d
 800f084:	3fb3b0f2 	.word	0x3fb3b0f2
 800f088:	fe231671 	.word	0xfe231671
 800f08c:	3fbc71c6 	.word	0x3fbc71c6
 800f090:	9998ebc4 	.word	0x9998ebc4
 800f094:	3fc99999 	.word	0x3fc99999
 800f098:	54442d18 	.word	0x54442d18
 800f09c:	bff921fb 	.word	0xbff921fb
 800f0a0:	440fffff 	.word	0x440fffff
 800f0a4:	7ff00000 	.word	0x7ff00000
 800f0a8:	3fdbffff 	.word	0x3fdbffff
 800f0ac:	3ff00000 	.word	0x3ff00000
 800f0b0:	3ff2ffff 	.word	0x3ff2ffff
 800f0b4:	40038000 	.word	0x40038000
 800f0b8:	3ff80000 	.word	0x3ff80000
 800f0bc:	bff00000 	.word	0xbff00000
 800f0c0:	0800f9d8 	.word	0x0800f9d8
 800f0c4:	0800f9f8 	.word	0x0800f9f8

0800f0c8 <fabs>:
 800f0c8:	ec51 0b10 	vmov	r0, r1, d0
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f0d2:	ec43 2b10 	vmov	d0, r2, r3
 800f0d6:	4770      	bx	lr

0800f0d8 <nan>:
 800f0d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f0e0 <nan+0x8>
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	00000000 	.word	0x00000000
 800f0e4:	7ff80000 	.word	0x7ff80000

0800f0e8 <__ieee754_sqrt>:
 800f0e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ec:	4a68      	ldr	r2, [pc, #416]	@ (800f290 <__ieee754_sqrt+0x1a8>)
 800f0ee:	ec55 4b10 	vmov	r4, r5, d0
 800f0f2:	43aa      	bics	r2, r5
 800f0f4:	462b      	mov	r3, r5
 800f0f6:	4621      	mov	r1, r4
 800f0f8:	d110      	bne.n	800f11c <__ieee754_sqrt+0x34>
 800f0fa:	4622      	mov	r2, r4
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	4629      	mov	r1, r5
 800f100:	f7f1 fa7a 	bl	80005f8 <__aeabi_dmul>
 800f104:	4602      	mov	r2, r0
 800f106:	460b      	mov	r3, r1
 800f108:	4620      	mov	r0, r4
 800f10a:	4629      	mov	r1, r5
 800f10c:	f7f1 f8be 	bl	800028c <__adddf3>
 800f110:	4604      	mov	r4, r0
 800f112:	460d      	mov	r5, r1
 800f114:	ec45 4b10 	vmov	d0, r4, r5
 800f118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f11c:	2d00      	cmp	r5, #0
 800f11e:	dc0e      	bgt.n	800f13e <__ieee754_sqrt+0x56>
 800f120:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f124:	4322      	orrs	r2, r4
 800f126:	d0f5      	beq.n	800f114 <__ieee754_sqrt+0x2c>
 800f128:	b19d      	cbz	r5, 800f152 <__ieee754_sqrt+0x6a>
 800f12a:	4622      	mov	r2, r4
 800f12c:	4620      	mov	r0, r4
 800f12e:	4629      	mov	r1, r5
 800f130:	f7f1 f8aa 	bl	8000288 <__aeabi_dsub>
 800f134:	4602      	mov	r2, r0
 800f136:	460b      	mov	r3, r1
 800f138:	f7f1 fb88 	bl	800084c <__aeabi_ddiv>
 800f13c:	e7e8      	b.n	800f110 <__ieee754_sqrt+0x28>
 800f13e:	152a      	asrs	r2, r5, #20
 800f140:	d115      	bne.n	800f16e <__ieee754_sqrt+0x86>
 800f142:	2000      	movs	r0, #0
 800f144:	e009      	b.n	800f15a <__ieee754_sqrt+0x72>
 800f146:	0acb      	lsrs	r3, r1, #11
 800f148:	3a15      	subs	r2, #21
 800f14a:	0549      	lsls	r1, r1, #21
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d0fa      	beq.n	800f146 <__ieee754_sqrt+0x5e>
 800f150:	e7f7      	b.n	800f142 <__ieee754_sqrt+0x5a>
 800f152:	462a      	mov	r2, r5
 800f154:	e7fa      	b.n	800f14c <__ieee754_sqrt+0x64>
 800f156:	005b      	lsls	r3, r3, #1
 800f158:	3001      	adds	r0, #1
 800f15a:	02dc      	lsls	r4, r3, #11
 800f15c:	d5fb      	bpl.n	800f156 <__ieee754_sqrt+0x6e>
 800f15e:	1e44      	subs	r4, r0, #1
 800f160:	1b12      	subs	r2, r2, r4
 800f162:	f1c0 0420 	rsb	r4, r0, #32
 800f166:	fa21 f404 	lsr.w	r4, r1, r4
 800f16a:	4323      	orrs	r3, r4
 800f16c:	4081      	lsls	r1, r0
 800f16e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f172:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f176:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f17a:	07d2      	lsls	r2, r2, #31
 800f17c:	bf5c      	itt	pl
 800f17e:	005b      	lslpl	r3, r3, #1
 800f180:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f184:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f188:	bf58      	it	pl
 800f18a:	0049      	lslpl	r1, r1, #1
 800f18c:	2600      	movs	r6, #0
 800f18e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f192:	106d      	asrs	r5, r5, #1
 800f194:	0049      	lsls	r1, r1, #1
 800f196:	2016      	movs	r0, #22
 800f198:	4632      	mov	r2, r6
 800f19a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f19e:	1917      	adds	r7, r2, r4
 800f1a0:	429f      	cmp	r7, r3
 800f1a2:	bfde      	ittt	le
 800f1a4:	193a      	addle	r2, r7, r4
 800f1a6:	1bdb      	suble	r3, r3, r7
 800f1a8:	1936      	addle	r6, r6, r4
 800f1aa:	0fcf      	lsrs	r7, r1, #31
 800f1ac:	3801      	subs	r0, #1
 800f1ae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f1b2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f1b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f1ba:	d1f0      	bne.n	800f19e <__ieee754_sqrt+0xb6>
 800f1bc:	4604      	mov	r4, r0
 800f1be:	2720      	movs	r7, #32
 800f1c0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	eb00 0e0c 	add.w	lr, r0, ip
 800f1ca:	db02      	blt.n	800f1d2 <__ieee754_sqrt+0xea>
 800f1cc:	d113      	bne.n	800f1f6 <__ieee754_sqrt+0x10e>
 800f1ce:	458e      	cmp	lr, r1
 800f1d0:	d811      	bhi.n	800f1f6 <__ieee754_sqrt+0x10e>
 800f1d2:	f1be 0f00 	cmp.w	lr, #0
 800f1d6:	eb0e 000c 	add.w	r0, lr, ip
 800f1da:	da42      	bge.n	800f262 <__ieee754_sqrt+0x17a>
 800f1dc:	2800      	cmp	r0, #0
 800f1de:	db40      	blt.n	800f262 <__ieee754_sqrt+0x17a>
 800f1e0:	f102 0801 	add.w	r8, r2, #1
 800f1e4:	1a9b      	subs	r3, r3, r2
 800f1e6:	458e      	cmp	lr, r1
 800f1e8:	bf88      	it	hi
 800f1ea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f1ee:	eba1 010e 	sub.w	r1, r1, lr
 800f1f2:	4464      	add	r4, ip
 800f1f4:	4642      	mov	r2, r8
 800f1f6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f1fa:	3f01      	subs	r7, #1
 800f1fc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f200:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f204:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f208:	d1dc      	bne.n	800f1c4 <__ieee754_sqrt+0xdc>
 800f20a:	4319      	orrs	r1, r3
 800f20c:	d01b      	beq.n	800f246 <__ieee754_sqrt+0x15e>
 800f20e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f294 <__ieee754_sqrt+0x1ac>
 800f212:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f298 <__ieee754_sqrt+0x1b0>
 800f216:	e9da 0100 	ldrd	r0, r1, [sl]
 800f21a:	e9db 2300 	ldrd	r2, r3, [fp]
 800f21e:	f7f1 f833 	bl	8000288 <__aeabi_dsub>
 800f222:	e9da 8900 	ldrd	r8, r9, [sl]
 800f226:	4602      	mov	r2, r0
 800f228:	460b      	mov	r3, r1
 800f22a:	4640      	mov	r0, r8
 800f22c:	4649      	mov	r1, r9
 800f22e:	f7f1 fc5f 	bl	8000af0 <__aeabi_dcmple>
 800f232:	b140      	cbz	r0, 800f246 <__ieee754_sqrt+0x15e>
 800f234:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f238:	e9da 0100 	ldrd	r0, r1, [sl]
 800f23c:	e9db 2300 	ldrd	r2, r3, [fp]
 800f240:	d111      	bne.n	800f266 <__ieee754_sqrt+0x17e>
 800f242:	3601      	adds	r6, #1
 800f244:	463c      	mov	r4, r7
 800f246:	1072      	asrs	r2, r6, #1
 800f248:	0863      	lsrs	r3, r4, #1
 800f24a:	07f1      	lsls	r1, r6, #31
 800f24c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f250:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f254:	bf48      	it	mi
 800f256:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f25a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f25e:	4618      	mov	r0, r3
 800f260:	e756      	b.n	800f110 <__ieee754_sqrt+0x28>
 800f262:	4690      	mov	r8, r2
 800f264:	e7be      	b.n	800f1e4 <__ieee754_sqrt+0xfc>
 800f266:	f7f1 f811 	bl	800028c <__adddf3>
 800f26a:	e9da 8900 	ldrd	r8, r9, [sl]
 800f26e:	4602      	mov	r2, r0
 800f270:	460b      	mov	r3, r1
 800f272:	4640      	mov	r0, r8
 800f274:	4649      	mov	r1, r9
 800f276:	f7f1 fc31 	bl	8000adc <__aeabi_dcmplt>
 800f27a:	b120      	cbz	r0, 800f286 <__ieee754_sqrt+0x19e>
 800f27c:	1ca0      	adds	r0, r4, #2
 800f27e:	bf08      	it	eq
 800f280:	3601      	addeq	r6, #1
 800f282:	3402      	adds	r4, #2
 800f284:	e7df      	b.n	800f246 <__ieee754_sqrt+0x15e>
 800f286:	1c63      	adds	r3, r4, #1
 800f288:	f023 0401 	bic.w	r4, r3, #1
 800f28c:	e7db      	b.n	800f246 <__ieee754_sqrt+0x15e>
 800f28e:	bf00      	nop
 800f290:	7ff00000 	.word	0x7ff00000
 800f294:	20000118 	.word	0x20000118
 800f298:	20000110 	.word	0x20000110
 800f29c:	00000000 	.word	0x00000000

0800f2a0 <__ieee754_atan2>:
 800f2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2a4:	ec57 6b11 	vmov	r6, r7, d1
 800f2a8:	4273      	negs	r3, r6
 800f2aa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800f428 <__ieee754_atan2+0x188>
 800f2ae:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800f2b2:	4333      	orrs	r3, r6
 800f2b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f2b8:	4543      	cmp	r3, r8
 800f2ba:	ec51 0b10 	vmov	r0, r1, d0
 800f2be:	4635      	mov	r5, r6
 800f2c0:	d809      	bhi.n	800f2d6 <__ieee754_atan2+0x36>
 800f2c2:	4244      	negs	r4, r0
 800f2c4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f2c8:	4304      	orrs	r4, r0
 800f2ca:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f2ce:	4544      	cmp	r4, r8
 800f2d0:	468e      	mov	lr, r1
 800f2d2:	4681      	mov	r9, r0
 800f2d4:	d907      	bls.n	800f2e6 <__ieee754_atan2+0x46>
 800f2d6:	4632      	mov	r2, r6
 800f2d8:	463b      	mov	r3, r7
 800f2da:	f7f0 ffd7 	bl	800028c <__adddf3>
 800f2de:	ec41 0b10 	vmov	d0, r0, r1
 800f2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2e6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800f2ea:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800f2ee:	4334      	orrs	r4, r6
 800f2f0:	d103      	bne.n	800f2fa <__ieee754_atan2+0x5a>
 800f2f2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2f6:	f7ff bd4f 	b.w	800ed98 <atan>
 800f2fa:	17bc      	asrs	r4, r7, #30
 800f2fc:	f004 0402 	and.w	r4, r4, #2
 800f300:	ea53 0909 	orrs.w	r9, r3, r9
 800f304:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f308:	d107      	bne.n	800f31a <__ieee754_atan2+0x7a>
 800f30a:	2c02      	cmp	r4, #2
 800f30c:	d05f      	beq.n	800f3ce <__ieee754_atan2+0x12e>
 800f30e:	2c03      	cmp	r4, #3
 800f310:	d1e5      	bne.n	800f2de <__ieee754_atan2+0x3e>
 800f312:	a141      	add	r1, pc, #260	@ (adr r1, 800f418 <__ieee754_atan2+0x178>)
 800f314:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f318:	e7e1      	b.n	800f2de <__ieee754_atan2+0x3e>
 800f31a:	4315      	orrs	r5, r2
 800f31c:	d106      	bne.n	800f32c <__ieee754_atan2+0x8c>
 800f31e:	f1be 0f00 	cmp.w	lr, #0
 800f322:	da5f      	bge.n	800f3e4 <__ieee754_atan2+0x144>
 800f324:	a13e      	add	r1, pc, #248	@ (adr r1, 800f420 <__ieee754_atan2+0x180>)
 800f326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f32a:	e7d8      	b.n	800f2de <__ieee754_atan2+0x3e>
 800f32c:	4542      	cmp	r2, r8
 800f32e:	d10f      	bne.n	800f350 <__ieee754_atan2+0xb0>
 800f330:	4293      	cmp	r3, r2
 800f332:	f104 34ff 	add.w	r4, r4, #4294967295
 800f336:	d107      	bne.n	800f348 <__ieee754_atan2+0xa8>
 800f338:	2c02      	cmp	r4, #2
 800f33a:	d84c      	bhi.n	800f3d6 <__ieee754_atan2+0x136>
 800f33c:	4b34      	ldr	r3, [pc, #208]	@ (800f410 <__ieee754_atan2+0x170>)
 800f33e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f342:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f346:	e7ca      	b.n	800f2de <__ieee754_atan2+0x3e>
 800f348:	2c02      	cmp	r4, #2
 800f34a:	d848      	bhi.n	800f3de <__ieee754_atan2+0x13e>
 800f34c:	4b31      	ldr	r3, [pc, #196]	@ (800f414 <__ieee754_atan2+0x174>)
 800f34e:	e7f6      	b.n	800f33e <__ieee754_atan2+0x9e>
 800f350:	4543      	cmp	r3, r8
 800f352:	d0e4      	beq.n	800f31e <__ieee754_atan2+0x7e>
 800f354:	1a9b      	subs	r3, r3, r2
 800f356:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800f35a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f35e:	da1e      	bge.n	800f39e <__ieee754_atan2+0xfe>
 800f360:	2f00      	cmp	r7, #0
 800f362:	da01      	bge.n	800f368 <__ieee754_atan2+0xc8>
 800f364:	323c      	adds	r2, #60	@ 0x3c
 800f366:	db1e      	blt.n	800f3a6 <__ieee754_atan2+0x106>
 800f368:	4632      	mov	r2, r6
 800f36a:	463b      	mov	r3, r7
 800f36c:	f7f1 fa6e 	bl	800084c <__aeabi_ddiv>
 800f370:	ec41 0b10 	vmov	d0, r0, r1
 800f374:	f7ff fea8 	bl	800f0c8 <fabs>
 800f378:	f7ff fd0e 	bl	800ed98 <atan>
 800f37c:	ec51 0b10 	vmov	r0, r1, d0
 800f380:	2c01      	cmp	r4, #1
 800f382:	d013      	beq.n	800f3ac <__ieee754_atan2+0x10c>
 800f384:	2c02      	cmp	r4, #2
 800f386:	d015      	beq.n	800f3b4 <__ieee754_atan2+0x114>
 800f388:	2c00      	cmp	r4, #0
 800f38a:	d0a8      	beq.n	800f2de <__ieee754_atan2+0x3e>
 800f38c:	a318      	add	r3, pc, #96	@ (adr r3, 800f3f0 <__ieee754_atan2+0x150>)
 800f38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f392:	f7f0 ff79 	bl	8000288 <__aeabi_dsub>
 800f396:	a318      	add	r3, pc, #96	@ (adr r3, 800f3f8 <__ieee754_atan2+0x158>)
 800f398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f39c:	e014      	b.n	800f3c8 <__ieee754_atan2+0x128>
 800f39e:	a118      	add	r1, pc, #96	@ (adr r1, 800f400 <__ieee754_atan2+0x160>)
 800f3a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3a4:	e7ec      	b.n	800f380 <__ieee754_atan2+0xe0>
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	2100      	movs	r1, #0
 800f3aa:	e7e9      	b.n	800f380 <__ieee754_atan2+0xe0>
 800f3ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	e794      	b.n	800f2de <__ieee754_atan2+0x3e>
 800f3b4:	a30e      	add	r3, pc, #56	@ (adr r3, 800f3f0 <__ieee754_atan2+0x150>)
 800f3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ba:	f7f0 ff65 	bl	8000288 <__aeabi_dsub>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	a10d      	add	r1, pc, #52	@ (adr r1, 800f3f8 <__ieee754_atan2+0x158>)
 800f3c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3c8:	f7f0 ff5e 	bl	8000288 <__aeabi_dsub>
 800f3cc:	e787      	b.n	800f2de <__ieee754_atan2+0x3e>
 800f3ce:	a10a      	add	r1, pc, #40	@ (adr r1, 800f3f8 <__ieee754_atan2+0x158>)
 800f3d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3d4:	e783      	b.n	800f2de <__ieee754_atan2+0x3e>
 800f3d6:	a10c      	add	r1, pc, #48	@ (adr r1, 800f408 <__ieee754_atan2+0x168>)
 800f3d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3dc:	e77f      	b.n	800f2de <__ieee754_atan2+0x3e>
 800f3de:	2000      	movs	r0, #0
 800f3e0:	2100      	movs	r1, #0
 800f3e2:	e77c      	b.n	800f2de <__ieee754_atan2+0x3e>
 800f3e4:	a106      	add	r1, pc, #24	@ (adr r1, 800f400 <__ieee754_atan2+0x160>)
 800f3e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3ea:	e778      	b.n	800f2de <__ieee754_atan2+0x3e>
 800f3ec:	f3af 8000 	nop.w
 800f3f0:	33145c07 	.word	0x33145c07
 800f3f4:	3ca1a626 	.word	0x3ca1a626
 800f3f8:	54442d18 	.word	0x54442d18
 800f3fc:	400921fb 	.word	0x400921fb
 800f400:	54442d18 	.word	0x54442d18
 800f404:	3ff921fb 	.word	0x3ff921fb
 800f408:	54442d18 	.word	0x54442d18
 800f40c:	3fe921fb 	.word	0x3fe921fb
 800f410:	0800fa30 	.word	0x0800fa30
 800f414:	0800fa18 	.word	0x0800fa18
 800f418:	54442d18 	.word	0x54442d18
 800f41c:	c00921fb 	.word	0xc00921fb
 800f420:	54442d18 	.word	0x54442d18
 800f424:	bff921fb 	.word	0xbff921fb
 800f428:	7ff00000 	.word	0x7ff00000
 800f42c:	00000000 	.word	0x00000000

0800f430 <__ieee754_log>:
 800f430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f434:	ec51 0b10 	vmov	r0, r1, d0
 800f438:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800f43c:	b087      	sub	sp, #28
 800f43e:	460d      	mov	r5, r1
 800f440:	da26      	bge.n	800f490 <__ieee754_log+0x60>
 800f442:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f446:	4303      	orrs	r3, r0
 800f448:	4602      	mov	r2, r0
 800f44a:	d10a      	bne.n	800f462 <__ieee754_log+0x32>
 800f44c:	49ce      	ldr	r1, [pc, #824]	@ (800f788 <__ieee754_log+0x358>)
 800f44e:	2200      	movs	r2, #0
 800f450:	2300      	movs	r3, #0
 800f452:	2000      	movs	r0, #0
 800f454:	f7f1 f9fa 	bl	800084c <__aeabi_ddiv>
 800f458:	ec41 0b10 	vmov	d0, r0, r1
 800f45c:	b007      	add	sp, #28
 800f45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f462:	2900      	cmp	r1, #0
 800f464:	da05      	bge.n	800f472 <__ieee754_log+0x42>
 800f466:	460b      	mov	r3, r1
 800f468:	f7f0 ff0e 	bl	8000288 <__aeabi_dsub>
 800f46c:	2200      	movs	r2, #0
 800f46e:	2300      	movs	r3, #0
 800f470:	e7f0      	b.n	800f454 <__ieee754_log+0x24>
 800f472:	4bc6      	ldr	r3, [pc, #792]	@ (800f78c <__ieee754_log+0x35c>)
 800f474:	2200      	movs	r2, #0
 800f476:	f7f1 f8bf 	bl	80005f8 <__aeabi_dmul>
 800f47a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800f47e:	460d      	mov	r5, r1
 800f480:	4ac3      	ldr	r2, [pc, #780]	@ (800f790 <__ieee754_log+0x360>)
 800f482:	4295      	cmp	r5, r2
 800f484:	dd06      	ble.n	800f494 <__ieee754_log+0x64>
 800f486:	4602      	mov	r2, r0
 800f488:	460b      	mov	r3, r1
 800f48a:	f7f0 feff 	bl	800028c <__adddf3>
 800f48e:	e7e3      	b.n	800f458 <__ieee754_log+0x28>
 800f490:	2300      	movs	r3, #0
 800f492:	e7f5      	b.n	800f480 <__ieee754_log+0x50>
 800f494:	152c      	asrs	r4, r5, #20
 800f496:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800f49a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f49e:	441c      	add	r4, r3
 800f4a0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800f4a4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800f4a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f4ac:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800f4b0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800f4b4:	ea42 0105 	orr.w	r1, r2, r5
 800f4b8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800f4bc:	2200      	movs	r2, #0
 800f4be:	4bb5      	ldr	r3, [pc, #724]	@ (800f794 <__ieee754_log+0x364>)
 800f4c0:	f7f0 fee2 	bl	8000288 <__aeabi_dsub>
 800f4c4:	1cab      	adds	r3, r5, #2
 800f4c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f4ca:	2b02      	cmp	r3, #2
 800f4cc:	4682      	mov	sl, r0
 800f4ce:	468b      	mov	fp, r1
 800f4d0:	f04f 0200 	mov.w	r2, #0
 800f4d4:	dc53      	bgt.n	800f57e <__ieee754_log+0x14e>
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	f7f1 faf6 	bl	8000ac8 <__aeabi_dcmpeq>
 800f4dc:	b1d0      	cbz	r0, 800f514 <__ieee754_log+0xe4>
 800f4de:	2c00      	cmp	r4, #0
 800f4e0:	f000 8120 	beq.w	800f724 <__ieee754_log+0x2f4>
 800f4e4:	4620      	mov	r0, r4
 800f4e6:	f7f1 f81d 	bl	8000524 <__aeabi_i2d>
 800f4ea:	a391      	add	r3, pc, #580	@ (adr r3, 800f730 <__ieee754_log+0x300>)
 800f4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f0:	4606      	mov	r6, r0
 800f4f2:	460f      	mov	r7, r1
 800f4f4:	f7f1 f880 	bl	80005f8 <__aeabi_dmul>
 800f4f8:	a38f      	add	r3, pc, #572	@ (adr r3, 800f738 <__ieee754_log+0x308>)
 800f4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4fe:	4604      	mov	r4, r0
 800f500:	460d      	mov	r5, r1
 800f502:	4630      	mov	r0, r6
 800f504:	4639      	mov	r1, r7
 800f506:	f7f1 f877 	bl	80005f8 <__aeabi_dmul>
 800f50a:	4602      	mov	r2, r0
 800f50c:	460b      	mov	r3, r1
 800f50e:	4620      	mov	r0, r4
 800f510:	4629      	mov	r1, r5
 800f512:	e7ba      	b.n	800f48a <__ieee754_log+0x5a>
 800f514:	a38a      	add	r3, pc, #552	@ (adr r3, 800f740 <__ieee754_log+0x310>)
 800f516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51a:	4650      	mov	r0, sl
 800f51c:	4659      	mov	r1, fp
 800f51e:	f7f1 f86b 	bl	80005f8 <__aeabi_dmul>
 800f522:	4602      	mov	r2, r0
 800f524:	460b      	mov	r3, r1
 800f526:	2000      	movs	r0, #0
 800f528:	499b      	ldr	r1, [pc, #620]	@ (800f798 <__ieee754_log+0x368>)
 800f52a:	f7f0 fead 	bl	8000288 <__aeabi_dsub>
 800f52e:	4652      	mov	r2, sl
 800f530:	4606      	mov	r6, r0
 800f532:	460f      	mov	r7, r1
 800f534:	465b      	mov	r3, fp
 800f536:	4650      	mov	r0, sl
 800f538:	4659      	mov	r1, fp
 800f53a:	f7f1 f85d 	bl	80005f8 <__aeabi_dmul>
 800f53e:	4602      	mov	r2, r0
 800f540:	460b      	mov	r3, r1
 800f542:	4630      	mov	r0, r6
 800f544:	4639      	mov	r1, r7
 800f546:	f7f1 f857 	bl	80005f8 <__aeabi_dmul>
 800f54a:	4606      	mov	r6, r0
 800f54c:	460f      	mov	r7, r1
 800f54e:	b914      	cbnz	r4, 800f556 <__ieee754_log+0x126>
 800f550:	4632      	mov	r2, r6
 800f552:	463b      	mov	r3, r7
 800f554:	e0a0      	b.n	800f698 <__ieee754_log+0x268>
 800f556:	4620      	mov	r0, r4
 800f558:	f7f0 ffe4 	bl	8000524 <__aeabi_i2d>
 800f55c:	a374      	add	r3, pc, #464	@ (adr r3, 800f730 <__ieee754_log+0x300>)
 800f55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f562:	4680      	mov	r8, r0
 800f564:	4689      	mov	r9, r1
 800f566:	f7f1 f847 	bl	80005f8 <__aeabi_dmul>
 800f56a:	a373      	add	r3, pc, #460	@ (adr r3, 800f738 <__ieee754_log+0x308>)
 800f56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f570:	4604      	mov	r4, r0
 800f572:	460d      	mov	r5, r1
 800f574:	4640      	mov	r0, r8
 800f576:	4649      	mov	r1, r9
 800f578:	f7f1 f83e 	bl	80005f8 <__aeabi_dmul>
 800f57c:	e0a5      	b.n	800f6ca <__ieee754_log+0x29a>
 800f57e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f582:	f7f0 fe83 	bl	800028c <__adddf3>
 800f586:	4602      	mov	r2, r0
 800f588:	460b      	mov	r3, r1
 800f58a:	4650      	mov	r0, sl
 800f58c:	4659      	mov	r1, fp
 800f58e:	f7f1 f95d 	bl	800084c <__aeabi_ddiv>
 800f592:	e9cd 0100 	strd	r0, r1, [sp]
 800f596:	4620      	mov	r0, r4
 800f598:	f7f0 ffc4 	bl	8000524 <__aeabi_i2d>
 800f59c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5a4:	4610      	mov	r0, r2
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	f7f1 f826 	bl	80005f8 <__aeabi_dmul>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	460b      	mov	r3, r1
 800f5b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f5b4:	f7f1 f820 	bl	80005f8 <__aeabi_dmul>
 800f5b8:	a363      	add	r3, pc, #396	@ (adr r3, 800f748 <__ieee754_log+0x318>)
 800f5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5be:	4680      	mov	r8, r0
 800f5c0:	4689      	mov	r9, r1
 800f5c2:	f7f1 f819 	bl	80005f8 <__aeabi_dmul>
 800f5c6:	a362      	add	r3, pc, #392	@ (adr r3, 800f750 <__ieee754_log+0x320>)
 800f5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5cc:	f7f0 fe5e 	bl	800028c <__adddf3>
 800f5d0:	4642      	mov	r2, r8
 800f5d2:	464b      	mov	r3, r9
 800f5d4:	f7f1 f810 	bl	80005f8 <__aeabi_dmul>
 800f5d8:	a35f      	add	r3, pc, #380	@ (adr r3, 800f758 <__ieee754_log+0x328>)
 800f5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5de:	f7f0 fe55 	bl	800028c <__adddf3>
 800f5e2:	4642      	mov	r2, r8
 800f5e4:	464b      	mov	r3, r9
 800f5e6:	f7f1 f807 	bl	80005f8 <__aeabi_dmul>
 800f5ea:	a35d      	add	r3, pc, #372	@ (adr r3, 800f760 <__ieee754_log+0x330>)
 800f5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f0:	f7f0 fe4c 	bl	800028c <__adddf3>
 800f5f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5f8:	f7f0 fffe 	bl	80005f8 <__aeabi_dmul>
 800f5fc:	a35a      	add	r3, pc, #360	@ (adr r3, 800f768 <__ieee754_log+0x338>)
 800f5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f602:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f606:	4640      	mov	r0, r8
 800f608:	4649      	mov	r1, r9
 800f60a:	f7f0 fff5 	bl	80005f8 <__aeabi_dmul>
 800f60e:	a358      	add	r3, pc, #352	@ (adr r3, 800f770 <__ieee754_log+0x340>)
 800f610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f614:	f7f0 fe3a 	bl	800028c <__adddf3>
 800f618:	4642      	mov	r2, r8
 800f61a:	464b      	mov	r3, r9
 800f61c:	f7f0 ffec 	bl	80005f8 <__aeabi_dmul>
 800f620:	a355      	add	r3, pc, #340	@ (adr r3, 800f778 <__ieee754_log+0x348>)
 800f622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f626:	f7f0 fe31 	bl	800028c <__adddf3>
 800f62a:	4642      	mov	r2, r8
 800f62c:	464b      	mov	r3, r9
 800f62e:	f7f0 ffe3 	bl	80005f8 <__aeabi_dmul>
 800f632:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800f636:	4602      	mov	r2, r0
 800f638:	460b      	mov	r3, r1
 800f63a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800f63e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f642:	f7f0 fe23 	bl	800028c <__adddf3>
 800f646:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800f64a:	3551      	adds	r5, #81	@ 0x51
 800f64c:	4335      	orrs	r5, r6
 800f64e:	2d00      	cmp	r5, #0
 800f650:	4680      	mov	r8, r0
 800f652:	4689      	mov	r9, r1
 800f654:	dd48      	ble.n	800f6e8 <__ieee754_log+0x2b8>
 800f656:	4b50      	ldr	r3, [pc, #320]	@ (800f798 <__ieee754_log+0x368>)
 800f658:	2200      	movs	r2, #0
 800f65a:	4650      	mov	r0, sl
 800f65c:	4659      	mov	r1, fp
 800f65e:	f7f0 ffcb 	bl	80005f8 <__aeabi_dmul>
 800f662:	4652      	mov	r2, sl
 800f664:	465b      	mov	r3, fp
 800f666:	f7f0 ffc7 	bl	80005f8 <__aeabi_dmul>
 800f66a:	4602      	mov	r2, r0
 800f66c:	460b      	mov	r3, r1
 800f66e:	4606      	mov	r6, r0
 800f670:	460f      	mov	r7, r1
 800f672:	4640      	mov	r0, r8
 800f674:	4649      	mov	r1, r9
 800f676:	f7f0 fe09 	bl	800028c <__adddf3>
 800f67a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f67e:	f7f0 ffbb 	bl	80005f8 <__aeabi_dmul>
 800f682:	4680      	mov	r8, r0
 800f684:	4689      	mov	r9, r1
 800f686:	b964      	cbnz	r4, 800f6a2 <__ieee754_log+0x272>
 800f688:	4602      	mov	r2, r0
 800f68a:	460b      	mov	r3, r1
 800f68c:	4630      	mov	r0, r6
 800f68e:	4639      	mov	r1, r7
 800f690:	f7f0 fdfa 	bl	8000288 <__aeabi_dsub>
 800f694:	4602      	mov	r2, r0
 800f696:	460b      	mov	r3, r1
 800f698:	4650      	mov	r0, sl
 800f69a:	4659      	mov	r1, fp
 800f69c:	f7f0 fdf4 	bl	8000288 <__aeabi_dsub>
 800f6a0:	e6da      	b.n	800f458 <__ieee754_log+0x28>
 800f6a2:	a323      	add	r3, pc, #140	@ (adr r3, 800f730 <__ieee754_log+0x300>)
 800f6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6ac:	f7f0 ffa4 	bl	80005f8 <__aeabi_dmul>
 800f6b0:	a321      	add	r3, pc, #132	@ (adr r3, 800f738 <__ieee754_log+0x308>)
 800f6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	460d      	mov	r5, r1
 800f6ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6be:	f7f0 ff9b 	bl	80005f8 <__aeabi_dmul>
 800f6c2:	4642      	mov	r2, r8
 800f6c4:	464b      	mov	r3, r9
 800f6c6:	f7f0 fde1 	bl	800028c <__adddf3>
 800f6ca:	4602      	mov	r2, r0
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	4630      	mov	r0, r6
 800f6d0:	4639      	mov	r1, r7
 800f6d2:	f7f0 fdd9 	bl	8000288 <__aeabi_dsub>
 800f6d6:	4652      	mov	r2, sl
 800f6d8:	465b      	mov	r3, fp
 800f6da:	f7f0 fdd5 	bl	8000288 <__aeabi_dsub>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	4629      	mov	r1, r5
 800f6e6:	e7d9      	b.n	800f69c <__ieee754_log+0x26c>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	460b      	mov	r3, r1
 800f6ec:	4650      	mov	r0, sl
 800f6ee:	4659      	mov	r1, fp
 800f6f0:	f7f0 fdca 	bl	8000288 <__aeabi_dsub>
 800f6f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6f8:	f7f0 ff7e 	bl	80005f8 <__aeabi_dmul>
 800f6fc:	4606      	mov	r6, r0
 800f6fe:	460f      	mov	r7, r1
 800f700:	2c00      	cmp	r4, #0
 800f702:	f43f af25 	beq.w	800f550 <__ieee754_log+0x120>
 800f706:	a30a      	add	r3, pc, #40	@ (adr r3, 800f730 <__ieee754_log+0x300>)
 800f708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f710:	f7f0 ff72 	bl	80005f8 <__aeabi_dmul>
 800f714:	a308      	add	r3, pc, #32	@ (adr r3, 800f738 <__ieee754_log+0x308>)
 800f716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71a:	4604      	mov	r4, r0
 800f71c:	460d      	mov	r5, r1
 800f71e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f722:	e729      	b.n	800f578 <__ieee754_log+0x148>
 800f724:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800f780 <__ieee754_log+0x350>
 800f728:	e698      	b.n	800f45c <__ieee754_log+0x2c>
 800f72a:	bf00      	nop
 800f72c:	f3af 8000 	nop.w
 800f730:	fee00000 	.word	0xfee00000
 800f734:	3fe62e42 	.word	0x3fe62e42
 800f738:	35793c76 	.word	0x35793c76
 800f73c:	3dea39ef 	.word	0x3dea39ef
 800f740:	55555555 	.word	0x55555555
 800f744:	3fd55555 	.word	0x3fd55555
 800f748:	df3e5244 	.word	0xdf3e5244
 800f74c:	3fc2f112 	.word	0x3fc2f112
 800f750:	96cb03de 	.word	0x96cb03de
 800f754:	3fc74664 	.word	0x3fc74664
 800f758:	94229359 	.word	0x94229359
 800f75c:	3fd24924 	.word	0x3fd24924
 800f760:	55555593 	.word	0x55555593
 800f764:	3fe55555 	.word	0x3fe55555
 800f768:	d078c69f 	.word	0xd078c69f
 800f76c:	3fc39a09 	.word	0x3fc39a09
 800f770:	1d8e78af 	.word	0x1d8e78af
 800f774:	3fcc71c5 	.word	0x3fcc71c5
 800f778:	9997fa04 	.word	0x9997fa04
 800f77c:	3fd99999 	.word	0x3fd99999
	...
 800f788:	c3500000 	.word	0xc3500000
 800f78c:	43500000 	.word	0x43500000
 800f790:	7fefffff 	.word	0x7fefffff
 800f794:	3ff00000 	.word	0x3ff00000
 800f798:	3fe00000 	.word	0x3fe00000

0800f79c <_init>:
 800f79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f79e:	bf00      	nop
 800f7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7a2:	bc08      	pop	{r3}
 800f7a4:	469e      	mov	lr, r3
 800f7a6:	4770      	bx	lr

0800f7a8 <_fini>:
 800f7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7aa:	bf00      	nop
 800f7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ae:	bc08      	pop	{r3}
 800f7b0:	469e      	mov	lr, r3
 800f7b2:	4770      	bx	lr
