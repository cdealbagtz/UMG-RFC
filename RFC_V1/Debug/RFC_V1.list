
RFC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800774c  0800774c  0000874c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007868  08007868  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007868  08007868  00008868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007870  08007870  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007870  08007870  00008870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007874  08007874  00008874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007878  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044d0  20000060  080078d8  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004530  080078d8  00009530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019815  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f1f  00000000  00000000  000228a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  000267c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001310  00000000  00000000  00028040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b94c  00000000  00000000  00029350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fefc  00000000  00000000  00044c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a75bb  00000000  00000000  00064b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c153  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069c0  00000000  00000000  0010c198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00112b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007734 	.word	0x08007734

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007734 	.word	0x08007734

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_ldivmod>:
 8000b58:	b97b      	cbnz	r3, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5a:	b972      	cbnz	r2, 8000b7a <__aeabi_ldivmod+0x22>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bfbe      	ittt	lt
 8000b60:	2000      	movlt	r0, #0
 8000b62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b66:	e006      	blt.n	8000b76 <__aeabi_ldivmod+0x1e>
 8000b68:	bf08      	it	eq
 8000b6a:	2800      	cmpeq	r0, #0
 8000b6c:	bf1c      	itt	ne
 8000b6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b72:	f04f 30ff 	movne.w	r0, #4294967295
 8000b76:	f000 b9b5 	b.w	8000ee4 <__aeabi_idiv0>
 8000b7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b82:	2900      	cmp	r1, #0
 8000b84:	db09      	blt.n	8000b9a <__aeabi_ldivmod+0x42>
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db1a      	blt.n	8000bc0 <__aeabi_ldivmod+0x68>
 8000b8a:	f000 f84d 	bl	8000c28 <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4770      	bx	lr
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db1b      	blt.n	8000bdc <__aeabi_ldivmod+0x84>
 8000ba4:	f000 f840 	bl	8000c28 <__udivmoddi4>
 8000ba8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	4252      	negs	r2, r2
 8000bba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bbe:	4770      	bx	lr
 8000bc0:	4252      	negs	r2, r2
 8000bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bc6:	f000 f82f 	bl	8000c28 <__udivmoddi4>
 8000bca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd2:	b004      	add	sp, #16
 8000bd4:	4240      	negs	r0, r0
 8000bd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bda:	4770      	bx	lr
 8000bdc:	4252      	negs	r2, r2
 8000bde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be2:	f000 f821 	bl	8000c28 <__udivmoddi4>
 8000be6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bee:	b004      	add	sp, #16
 8000bf0:	4252      	negs	r2, r2
 8000bf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2104      	movs	r1, #4
 8000efc:	480e      	ldr	r0, [pc, #56]	@ (8000f38 <BMP280_write+0x50>)
 8000efe:	f002 fd83 	bl	8003a08 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000f0c:	1df9      	adds	r1, r7, #7
 8000f0e:	2364      	movs	r3, #100	@ 0x64
 8000f10:	2201      	movs	r2, #1
 8000f12:	480a      	ldr	r0, [pc, #40]	@ (8000f3c <BMP280_write+0x54>)
 8000f14:	f003 fbe9 	bl	80046ea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000f18:	1db9      	adds	r1, r7, #6
 8000f1a:	2364      	movs	r3, #100	@ 0x64
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4807      	ldr	r0, [pc, #28]	@ (8000f3c <BMP280_write+0x54>)
 8000f20:	f003 fbe3 	bl	80046ea <HAL_SPI_Transmit>

	BMP280_unselect();
 8000f24:	2201      	movs	r2, #1
 8000f26:	2104      	movs	r1, #4
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <BMP280_write+0x50>)
 8000f2a:	f002 fd6d 	bl	8003a08 <HAL_GPIO_WritePin>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	200004b8 	.word	0x200004b8

08000f40 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000f54:	2200      	movs	r2, #0
 8000f56:	2104      	movs	r1, #4
 8000f58:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <BMP280_read+0x50>)
 8000f5a:	f002 fd55 	bl	8003a08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000f5e:	f107 010f 	add.w	r1, r7, #15
 8000f62:	2364      	movs	r3, #100	@ 0x64
 8000f64:	2201      	movs	r2, #1
 8000f66:	480b      	ldr	r0, [pc, #44]	@ (8000f94 <BMP280_read+0x54>)
 8000f68:	f003 fbbf 	bl	80046ea <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8000f6c:	f107 010f 	add.w	r1, r7, #15
 8000f70:	2364      	movs	r3, #100	@ 0x64
 8000f72:	2201      	movs	r2, #1
 8000f74:	4807      	ldr	r0, [pc, #28]	@ (8000f94 <BMP280_read+0x54>)
 8000f76:	f003 fcfc 	bl	8004972 <HAL_SPI_Receive>
	BMP280_unselect();
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	4804      	ldr	r0, [pc, #16]	@ (8000f90 <BMP280_read+0x50>)
 8000f80:	f002 fd42 	bl	8003a08 <HAL_GPIO_WritePin>

	return Buffer;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020400 	.word	0x40020400
 8000f94:	200004b8 	.word	0x200004b8

08000f98 <BMP280_config>:

void BMP280_config(void){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8000f9c:	2157      	movs	r1, #87	@ 0x57
 8000f9e:	20f4      	movs	r0, #244	@ 0xf4
 8000fa0:	f7ff ffa2 	bl	8000ee8 <BMP280_write>
	BMP280_write(config, 0x10);
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	20f5      	movs	r0, #245	@ 0xf5
 8000fa8:	f7ff ff9e 	bl	8000ee8 <BMP280_write>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8000fb6:	2388      	movs	r3, #136	@ 0x88
 8000fb8:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
	BMP280_select();
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4843      	ldr	r0, [pc, #268]	@ (80010e0 <BMP280_calibrationData+0x130>)
 8000fd4:	f002 fd18 	bl	8003a08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000fd8:	f107 011f 	add.w	r1, r7, #31
 8000fdc:	2364      	movs	r3, #100	@ 0x64
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4840      	ldr	r0, [pc, #256]	@ (80010e4 <BMP280_calibrationData+0x134>)
 8000fe2:	f003 fb82 	bl	80046ea <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8000fe6:	1d39      	adds	r1, r7, #4
 8000fe8:	2364      	movs	r3, #100	@ 0x64
 8000fea:	2218      	movs	r2, #24
 8000fec:	483d      	ldr	r0, [pc, #244]	@ (80010e4 <BMP280_calibrationData+0x134>)
 8000fee:	f003 fcc0 	bl	8004972 <HAL_SPI_Receive>
	BMP280_unselect();
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	483a      	ldr	r0, [pc, #232]	@ (80010e0 <BMP280_calibrationData+0x130>)
 8000ff8:	f002 fd06 	bl	8003a08 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8000ffc:	797b      	ldrb	r3, [r7, #5]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b21a      	sxth	r2, r3
 8001002:	793b      	ldrb	r3, [r7, #4]
 8001004:	b21b      	sxth	r3, r3
 8001006:	4313      	orrs	r3, r2
 8001008:	b21b      	sxth	r3, r3
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b36      	ldr	r3, [pc, #216]	@ (80010e8 <BMP280_calibrationData+0x138>)
 800100e:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	b21a      	sxth	r2, r3
 8001016:	79bb      	ldrb	r3, [r7, #6]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b21a      	sxth	r2, r3
 800101e:	4b33      	ldr	r3, [pc, #204]	@ (80010ec <BMP280_calibrationData+0x13c>)
 8001020:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 8001022:	7a7b      	ldrb	r3, [r7, #9]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21a      	sxth	r2, r3
 8001028:	7a3b      	ldrb	r3, [r7, #8]
 800102a:	b21b      	sxth	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	b21a      	sxth	r2, r3
 8001030:	4b2f      	ldr	r3, [pc, #188]	@ (80010f0 <BMP280_calibrationData+0x140>)
 8001032:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8001034:	7afb      	ldrb	r3, [r7, #11]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	7abb      	ldrb	r3, [r7, #10]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21b      	sxth	r3, r3
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <BMP280_calibrationData+0x144>)
 8001046:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	7b3b      	ldrb	r3, [r7, #12]
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21a      	sxth	r2, r3
 8001056:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <BMP280_calibrationData+0x148>)
 8001058:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21a      	sxth	r2, r3
 8001068:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <BMP280_calibrationData+0x14c>)
 800106a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 800106c:	7c7b      	ldrb	r3, [r7, #17]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	b21a      	sxth	r2, r3
 8001072:	7c3b      	ldrb	r3, [r7, #16]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21a      	sxth	r2, r3
 800107a:	4b21      	ldr	r3, [pc, #132]	@ (8001100 <BMP280_calibrationData+0x150>)
 800107c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 800107e:	7cfb      	ldrb	r3, [r7, #19]
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	b21a      	sxth	r2, r3
 8001084:	7cbb      	ldrb	r3, [r7, #18]
 8001086:	b21b      	sxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <BMP280_calibrationData+0x154>)
 800108e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 8001090:	7d7b      	ldrb	r3, [r7, #21]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	b21a      	sxth	r2, r3
 8001096:	7d3b      	ldrb	r3, [r7, #20]
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <BMP280_calibrationData+0x158>)
 80010a0:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	7dbb      	ldrb	r3, [r7, #22]
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	4b16      	ldr	r3, [pc, #88]	@ (800110c <BMP280_calibrationData+0x15c>)
 80010b2:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 80010b4:	7e7b      	ldrb	r3, [r7, #25]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	7e3b      	ldrb	r3, [r7, #24]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <BMP280_calibrationData+0x160>)
 80010c4:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 80010c6:	7efb      	ldrb	r3, [r7, #27]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	7ebb      	ldrb	r3, [r7, #26]
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <BMP280_calibrationData+0x164>)
 80010d6:	801a      	strh	r2, [r3, #0]
}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40020400 	.word	0x40020400
 80010e4:	200004b8 	.word	0x200004b8
 80010e8:	2000008c 	.word	0x2000008c
 80010ec:	20000090 	.word	0x20000090
 80010f0:	20000092 	.word	0x20000092
 80010f4:	2000008e 	.word	0x2000008e
 80010f8:	20000094 	.word	0x20000094
 80010fc:	20000096 	.word	0x20000096
 8001100:	20000098 	.word	0x20000098
 8001104:	2000009a 	.word	0x2000009a
 8001108:	2000009c 	.word	0x2000009c
 800110c:	2000009e 	.word	0x2000009e
 8001110:	200000a0 	.word	0x200000a0
 8001114:	200000a2 	.word	0x200000a2

08001118 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 800111e:	23f7      	movs	r3, #247	@ 0xf7
 8001120:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	2300      	movs	r3, #0
 8001128:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 800112a:	2200      	movs	r2, #0
 800112c:	2104      	movs	r1, #4
 800112e:	4817      	ldr	r0, [pc, #92]	@ (800118c <BMP280_readRawValues+0x74>)
 8001130:	f002 fc6a 	bl	8003a08 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8001134:	1df9      	adds	r1, r7, #7
 8001136:	2364      	movs	r3, #100	@ 0x64
 8001138:	2201      	movs	r2, #1
 800113a:	4815      	ldr	r0, [pc, #84]	@ (8001190 <BMP280_readRawValues+0x78>)
 800113c:	f003 fad5 	bl	80046ea <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 8001140:	4639      	mov	r1, r7
 8001142:	2364      	movs	r3, #100	@ 0x64
 8001144:	2206      	movs	r2, #6
 8001146:	4812      	ldr	r0, [pc, #72]	@ (8001190 <BMP280_readRawValues+0x78>)
 8001148:	f003 fc13 	bl	8004972 <HAL_SPI_Receive>
	BMP280_unselect();
 800114c:	2201      	movs	r2, #1
 800114e:	2104      	movs	r1, #4
 8001150:	480e      	ldr	r0, [pc, #56]	@ (800118c <BMP280_readRawValues+0x74>)
 8001152:	f002 fc59 	bl	8003a08 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 8001156:	783b      	ldrb	r3, [r7, #0]
 8001158:	031a      	lsls	r2, r3, #12
 800115a:	787b      	ldrb	r3, [r7, #1]
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	4313      	orrs	r3, r2
 8001160:	78ba      	ldrb	r2, [r7, #2]
 8001162:	0912      	lsrs	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	4313      	orrs	r3, r2
 8001168:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <BMP280_readRawValues+0x7c>)
 800116a:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	031a      	lsls	r2, r3, #12
 8001170:	793b      	ldrb	r3, [r7, #4]
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	4313      	orrs	r3, r2
 8001176:	797a      	ldrb	r2, [r7, #5]
 8001178:	0912      	lsrs	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	4313      	orrs	r3, r2
 800117e:	4a06      	ldr	r2, [pc, #24]	@ (8001198 <BMP280_readRawValues+0x80>)
 8001180:	6013      	str	r3, [r2, #0]
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40020400 	.word	0x40020400
 8001190:	200004b8 	.word	0x200004b8
 8001194:	200000a8 	.word	0x200000a8
 8001198:	200000a4 	.word	0x200000a4

0800119c <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <BMP280_measureT+0x74>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	10da      	asrs	r2, r3, #3
 80011aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <BMP280_measureT+0x78>)
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	4a19      	ldr	r2, [pc, #100]	@ (8001218 <BMP280_measureT+0x7c>)
 80011b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011b8:	fb02 f303 	mul.w	r3, r2, r3
 80011bc:	12db      	asrs	r3, r3, #11
 80011be:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	111b      	asrs	r3, r3, #4
 80011c4:	4a13      	ldr	r2, [pc, #76]	@ (8001214 <BMP280_measureT+0x78>)
 80011c6:	8812      	ldrh	r2, [r2, #0]
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	1112      	asrs	r2, r2, #4
 80011ce:	4911      	ldr	r1, [pc, #68]	@ (8001214 <BMP280_measureT+0x78>)
 80011d0:	8809      	ldrh	r1, [r1, #0]
 80011d2:	1a52      	subs	r2, r2, r1
 80011d4:	fb02 f303 	mul.w	r3, r2, r3
 80011d8:	131b      	asrs	r3, r3, #12
 80011da:	4a10      	ldr	r2, [pc, #64]	@ (800121c <BMP280_measureT+0x80>)
 80011dc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011e0:	fb02 f303 	mul.w	r3, r2, r3
 80011e4:	139b      	asrs	r3, r3, #14
 80011e6:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4413      	add	r3, r2
 80011ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001220 <BMP280_measureT+0x84>)
 80011f0:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <BMP280_measureT+0x84>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	3380      	adds	r3, #128	@ 0x80
 80011fe:	121b      	asrs	r3, r3, #8
 8001200:	60fb      	str	r3, [r7, #12]
	return T;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	371c      	adds	r7, #28
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	200000a4 	.word	0x200000a4
 8001214:	2000008c 	.word	0x2000008c
 8001218:	20000090 	.word	0x20000090
 800121c:	20000092 	.word	0x20000092
 8001220:	200000ac 	.word	0x200000ac

08001224 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8001224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001228:	b0ca      	sub	sp, #296	@ 0x128
 800122a:	af00      	add	r7, sp, #0
 800122c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001230:	4baf      	ldr	r3, [pc, #700]	@ (80014f0 <BMP280_measureP+0x2cc>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	17da      	asrs	r2, r3, #31
 8001236:	461c      	mov	r4, r3
 8001238:	4615      	mov	r5, r2
 800123a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800123e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001242:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001246:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800124a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800124e:	fb03 f102 	mul.w	r1, r3, r2
 8001252:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001256:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800125a:	fb02 f303 	mul.w	r3, r2, r3
 800125e:	18ca      	adds	r2, r1, r3
 8001260:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001264:	fba3 8903 	umull	r8, r9, r3, r3
 8001268:	eb02 0309 	add.w	r3, r2, r9
 800126c:	4699      	mov	r9, r3
 800126e:	4ba1      	ldr	r3, [pc, #644]	@ (80014f4 <BMP280_measureP+0x2d0>)
 8001270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001274:	b21b      	sxth	r3, r3
 8001276:	17da      	asrs	r2, r3, #31
 8001278:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800127c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001280:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001284:	4603      	mov	r3, r0
 8001286:	fb03 f209 	mul.w	r2, r3, r9
 800128a:	460b      	mov	r3, r1
 800128c:	fb08 f303 	mul.w	r3, r8, r3
 8001290:	4413      	add	r3, r2
 8001292:	4602      	mov	r2, r0
 8001294:	fba8 1202 	umull	r1, r2, r8, r2
 8001298:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800129c:	460a      	mov	r2, r1
 800129e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80012a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80012a6:	4413      	add	r3, r2
 80012a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80012ac:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80012b0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80012b4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80012b8:	4b8f      	ldr	r3, [pc, #572]	@ (80014f8 <BMP280_measureP+0x2d4>)
 80012ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012be:	b21b      	sxth	r3, r3
 80012c0:	17da      	asrs	r2, r3, #31
 80012c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80012c6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80012ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012ce:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80012d2:	462a      	mov	r2, r5
 80012d4:	fb02 f203 	mul.w	r2, r2, r3
 80012d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80012dc:	4621      	mov	r1, r4
 80012de:	fb01 f303 	mul.w	r3, r1, r3
 80012e2:	441a      	add	r2, r3
 80012e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012e8:	4621      	mov	r1, r4
 80012ea:	fba3 1301 	umull	r1, r3, r3, r1
 80012ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80012f2:	460b      	mov	r3, r1
 80012f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80012f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80012fc:	18d3      	adds	r3, r2, r3
 80012fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001302:	f04f 0000 	mov.w	r0, #0
 8001306:	f04f 0100 	mov.w	r1, #0
 800130a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800130e:	462b      	mov	r3, r5
 8001310:	0459      	lsls	r1, r3, #17
 8001312:	4623      	mov	r3, r4
 8001314:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001318:	4623      	mov	r3, r4
 800131a:	0458      	lsls	r0, r3, #17
 800131c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001320:	1814      	adds	r4, r2, r0
 8001322:	643c      	str	r4, [r7, #64]	@ 0x40
 8001324:	414b      	adcs	r3, r1
 8001326:	647b      	str	r3, [r7, #68]	@ 0x44
 8001328:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800132c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001330:	4b72      	ldr	r3, [pc, #456]	@ (80014fc <BMP280_measureP+0x2d8>)
 8001332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001336:	b21b      	sxth	r3, r3
 8001338:	17da      	asrs	r2, r3, #31
 800133a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800133e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001342:	f04f 0000 	mov.w	r0, #0
 8001346:	f04f 0100 	mov.w	r1, #0
 800134a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800134e:	00d9      	lsls	r1, r3, #3
 8001350:	2000      	movs	r0, #0
 8001352:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001356:	1814      	adds	r4, r2, r0
 8001358:	63bc      	str	r4, [r7, #56]	@ 0x38
 800135a:	414b      	adcs	r3, r1
 800135c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800135e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001362:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001366:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800136a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800136e:	fb03 f102 	mul.w	r1, r3, r2
 8001372:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001376:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800137a:	fb02 f303 	mul.w	r3, r2, r3
 800137e:	18ca      	adds	r2, r1, r3
 8001380:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001384:	fba3 1303 	umull	r1, r3, r3, r3
 8001388:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800138c:	460b      	mov	r3, r1
 800138e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001396:	18d3      	adds	r3, r2, r3
 8001398:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800139c:	4b58      	ldr	r3, [pc, #352]	@ (8001500 <BMP280_measureP+0x2dc>)
 800139e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	17da      	asrs	r2, r3, #31
 80013a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80013aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80013ae:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80013b2:	462b      	mov	r3, r5
 80013b4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80013b8:	4642      	mov	r2, r8
 80013ba:	fb02 f203 	mul.w	r2, r2, r3
 80013be:	464b      	mov	r3, r9
 80013c0:	4621      	mov	r1, r4
 80013c2:	fb01 f303 	mul.w	r3, r1, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	4622      	mov	r2, r4
 80013ca:	4641      	mov	r1, r8
 80013cc:	fba2 1201 	umull	r1, r2, r2, r1
 80013d0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80013d4:	460a      	mov	r2, r1
 80013d6:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80013da:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80013de:	4413      	add	r3, r2
 80013e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80013e4:	f04f 0000 	mov.w	r0, #0
 80013e8:	f04f 0100 	mov.w	r1, #0
 80013ec:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80013f0:	4623      	mov	r3, r4
 80013f2:	0a18      	lsrs	r0, r3, #8
 80013f4:	462b      	mov	r3, r5
 80013f6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80013fa:	462b      	mov	r3, r5
 80013fc:	1219      	asrs	r1, r3, #8
 80013fe:	4b41      	ldr	r3, [pc, #260]	@ (8001504 <BMP280_measureP+0x2e0>)
 8001400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001404:	b21b      	sxth	r3, r3
 8001406:	17da      	asrs	r2, r3, #31
 8001408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800140c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001410:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001414:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001418:	464a      	mov	r2, r9
 800141a:	fb02 f203 	mul.w	r2, r2, r3
 800141e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001422:	4644      	mov	r4, r8
 8001424:	fb04 f303 	mul.w	r3, r4, r3
 8001428:	441a      	add	r2, r3
 800142a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800142e:	4644      	mov	r4, r8
 8001430:	fba3 4304 	umull	r4, r3, r3, r4
 8001434:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001438:	4623      	mov	r3, r4
 800143a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800143e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001442:	18d3      	adds	r3, r2, r3
 8001444:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001454:	464c      	mov	r4, r9
 8001456:	0323      	lsls	r3, r4, #12
 8001458:	4644      	mov	r4, r8
 800145a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800145e:	4644      	mov	r4, r8
 8001460:	0322      	lsls	r2, r4, #12
 8001462:	1884      	adds	r4, r0, r2
 8001464:	633c      	str	r4, [r7, #48]	@ 0x30
 8001466:	eb41 0303 	adc.w	r3, r1, r3
 800146a:	637b      	str	r3, [r7, #52]	@ 0x34
 800146c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001470:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001474:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001478:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800147c:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001480:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001484:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <BMP280_measureP+0x2e4>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	b29b      	uxth	r3, r3
 800148a:	2200      	movs	r2, #0
 800148c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001490:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001494:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001498:	462b      	mov	r3, r5
 800149a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800149e:	4642      	mov	r2, r8
 80014a0:	fb02 f203 	mul.w	r2, r2, r3
 80014a4:	464b      	mov	r3, r9
 80014a6:	4621      	mov	r1, r4
 80014a8:	fb01 f303 	mul.w	r3, r1, r3
 80014ac:	4413      	add	r3, r2
 80014ae:	4622      	mov	r2, r4
 80014b0:	4641      	mov	r1, r8
 80014b2:	fba2 1201 	umull	r1, r2, r2, r1
 80014b6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80014ba:	460a      	mov	r2, r1
 80014bc:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80014c0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80014c4:	4413      	add	r3, r2
 80014c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80014d6:	4629      	mov	r1, r5
 80014d8:	104a      	asrs	r2, r1, #1
 80014da:	4629      	mov	r1, r5
 80014dc:	17cb      	asrs	r3, r1, #31
 80014de:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 80014e2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014e6:	4313      	orrs	r3, r2
 80014e8:	d110      	bne.n	800150c <BMP280_measureP+0x2e8>
	{
	return 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e154      	b.n	8001798 <BMP280_measureP+0x574>
 80014ee:	bf00      	nop
 80014f0:	200000ac 	.word	0x200000ac
 80014f4:	2000009c 	.word	0x2000009c
 80014f8:	2000009a 	.word	0x2000009a
 80014fc:	20000098 	.word	0x20000098
 8001500:	20000096 	.word	0x20000096
 8001504:	20000094 	.word	0x20000094
 8001508:	2000008e 	.word	0x2000008e
	}
	p = 1048576-adc_P;
 800150c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001510:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001514:	17da      	asrs	r2, r3, #31
 8001516:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001518:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800151a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800151e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001522:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001526:	105b      	asrs	r3, r3, #1
 8001528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800152c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001530:	07db      	lsls	r3, r3, #31
 8001532:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001536:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800153a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800153e:	4621      	mov	r1, r4
 8001540:	1a89      	subs	r1, r1, r2
 8001542:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001544:	4629      	mov	r1, r5
 8001546:	eb61 0303 	sbc.w	r3, r1, r3
 800154a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800154c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001550:	4622      	mov	r2, r4
 8001552:	462b      	mov	r3, r5
 8001554:	1891      	adds	r1, r2, r2
 8001556:	6239      	str	r1, [r7, #32]
 8001558:	415b      	adcs	r3, r3
 800155a:	627b      	str	r3, [r7, #36]	@ 0x24
 800155c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001560:	4621      	mov	r1, r4
 8001562:	1851      	adds	r1, r2, r1
 8001564:	61b9      	str	r1, [r7, #24]
 8001566:	4629      	mov	r1, r5
 8001568:	414b      	adcs	r3, r1
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001578:	4649      	mov	r1, r9
 800157a:	018b      	lsls	r3, r1, #6
 800157c:	4641      	mov	r1, r8
 800157e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001582:	4641      	mov	r1, r8
 8001584:	018a      	lsls	r2, r1, #6
 8001586:	4641      	mov	r1, r8
 8001588:	1889      	adds	r1, r1, r2
 800158a:	6139      	str	r1, [r7, #16]
 800158c:	4649      	mov	r1, r9
 800158e:	eb43 0101 	adc.w	r1, r3, r1
 8001592:	6179      	str	r1, [r7, #20]
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015a0:	4649      	mov	r1, r9
 80015a2:	008b      	lsls	r3, r1, #2
 80015a4:	4641      	mov	r1, r8
 80015a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015aa:	4641      	mov	r1, r8
 80015ac:	008a      	lsls	r2, r1, #2
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	4622      	mov	r2, r4
 80015b6:	189b      	adds	r3, r3, r2
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	460b      	mov	r3, r1
 80015bc:	462a      	mov	r2, r5
 80015be:	eb42 0303 	adc.w	r3, r2, r3
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015d0:	4649      	mov	r1, r9
 80015d2:	008b      	lsls	r3, r1, #2
 80015d4:	4641      	mov	r1, r8
 80015d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015da:	4641      	mov	r1, r8
 80015dc:	008a      	lsls	r2, r1, #2
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	4603      	mov	r3, r0
 80015e4:	4622      	mov	r2, r4
 80015e6:	189b      	adds	r3, r3, r2
 80015e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80015ea:	462b      	mov	r3, r5
 80015ec:	460a      	mov	r2, r1
 80015ee:	eb42 0303 	adc.w	r3, r2, r3
 80015f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80015f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80015f8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80015fc:	f7ff faac 	bl	8000b58 <__aeabi_ldivmod>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001608:	4b66      	ldr	r3, [pc, #408]	@ (80017a4 <BMP280_measureP+0x580>)
 800160a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160e:	b21b      	sxth	r3, r3
 8001610:	17da      	asrs	r2, r3, #31
 8001612:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001614:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001616:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800161a:	f04f 0000 	mov.w	r0, #0
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	0b50      	lsrs	r0, r2, #13
 8001624:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001628:	1359      	asrs	r1, r3, #13
 800162a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800162e:	462b      	mov	r3, r5
 8001630:	fb00 f203 	mul.w	r2, r0, r3
 8001634:	4623      	mov	r3, r4
 8001636:	fb03 f301 	mul.w	r3, r3, r1
 800163a:	4413      	add	r3, r2
 800163c:	4622      	mov	r2, r4
 800163e:	fba2 1200 	umull	r1, r2, r2, r0
 8001642:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001646:	460a      	mov	r2, r1
 8001648:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800164c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001650:	4413      	add	r3, r2
 8001652:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001656:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800165a:	f04f 0000 	mov.w	r0, #0
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	0b50      	lsrs	r0, r2, #13
 8001664:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001668:	1359      	asrs	r1, r3, #13
 800166a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800166e:	462b      	mov	r3, r5
 8001670:	fb00 f203 	mul.w	r2, r0, r3
 8001674:	4623      	mov	r3, r4
 8001676:	fb03 f301 	mul.w	r3, r3, r1
 800167a:	4413      	add	r3, r2
 800167c:	4622      	mov	r2, r4
 800167e:	fba2 1200 	umull	r1, r2, r2, r0
 8001682:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001686:	460a      	mov	r2, r1
 8001688:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800168c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001690:	4413      	add	r3, r2
 8001692:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80016a2:	4621      	mov	r1, r4
 80016a4:	0e4a      	lsrs	r2, r1, #25
 80016a6:	4629      	mov	r1, r5
 80016a8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016ac:	4629      	mov	r1, r5
 80016ae:	164b      	asrs	r3, r1, #25
 80016b0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80016b4:	4b3c      	ldr	r3, [pc, #240]	@ (80017a8 <BMP280_measureP+0x584>)
 80016b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ba:	b21b      	sxth	r3, r3
 80016bc:	17da      	asrs	r2, r3, #31
 80016be:	663b      	str	r3, [r7, #96]	@ 0x60
 80016c0:	667a      	str	r2, [r7, #100]	@ 0x64
 80016c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016c6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016ca:	462a      	mov	r2, r5
 80016cc:	fb02 f203 	mul.w	r2, r2, r3
 80016d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016d4:	4621      	mov	r1, r4
 80016d6:	fb01 f303 	mul.w	r3, r1, r3
 80016da:	4413      	add	r3, r2
 80016dc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80016e0:	4621      	mov	r1, r4
 80016e2:	fba2 1201 	umull	r1, r2, r2, r1
 80016e6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80016ea:	460a      	mov	r2, r1
 80016ec:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80016f0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80016f4:	4413      	add	r3, r2
 80016f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001706:	4621      	mov	r1, r4
 8001708:	0cca      	lsrs	r2, r1, #19
 800170a:	4629      	mov	r1, r5
 800170c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001710:	4629      	mov	r1, r5
 8001712:	14cb      	asrs	r3, r1, #19
 8001714:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001718:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800171c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001720:	1884      	adds	r4, r0, r2
 8001722:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001724:	eb41 0303 	adc.w	r3, r1, r3
 8001728:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800172a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800172e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001732:	4621      	mov	r1, r4
 8001734:	1889      	adds	r1, r1, r2
 8001736:	6539      	str	r1, [r7, #80]	@ 0x50
 8001738:	4629      	mov	r1, r5
 800173a:	eb43 0101 	adc.w	r1, r3, r1
 800173e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001740:	f04f 0000 	mov.w	r0, #0
 8001744:	f04f 0100 	mov.w	r1, #0
 8001748:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800174c:	4623      	mov	r3, r4
 800174e:	0a18      	lsrs	r0, r3, #8
 8001750:	462b      	mov	r3, r5
 8001752:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001756:	462b      	mov	r3, r5
 8001758:	1219      	asrs	r1, r3, #8
 800175a:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <BMP280_measureP+0x588>)
 800175c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001760:	b21b      	sxth	r3, r3
 8001762:	17da      	asrs	r2, r3, #31
 8001764:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001766:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001774:	464c      	mov	r4, r9
 8001776:	0123      	lsls	r3, r4, #4
 8001778:	4644      	mov	r4, r8
 800177a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800177e:	4644      	mov	r4, r8
 8001780:	0122      	lsls	r2, r4, #4
 8001782:	1884      	adds	r4, r0, r2
 8001784:	603c      	str	r4, [r7, #0]
 8001786:	eb41 0303 	adc.w	r3, r1, r3
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001790:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001794:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001798:	4618      	mov	r0, r3
 800179a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800179e:	46bd      	mov	sp, r7
 80017a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017a4:	200000a2 	.word	0x200000a2
 80017a8:	200000a0 	.word	0x200000a0
 80017ac:	2000009e 	.word	0x2000009e

080017b0 <BMP280_measureH>:

float BMP280_measureH(uint32_t Pres, int32_t Temp){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <BMP280_measureH+0x16>
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e05b      	b.n	800187e <BMP280_measureH+0xce>
	var1 = -log(((double)Pres)/101325);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7fe fe4c 	bl	8000464 <__aeabi_ui2d>
 80017cc:	a335      	add	r3, pc, #212	@ (adr r3, 80018a4 <BMP280_measureH+0xf4>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7fe ffeb 	bl	80007ac <__aeabi_ddiv>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	ec43 2b17 	vmov	d7, r2, r3
 80017de:	eeb0 0a47 	vmov.f32	s0, s14
 80017e2:	eef0 0a67 	vmov.f32	s1, s15
 80017e6:	f005 fda7 	bl	8007338 <log>
 80017ea:	ec53 2b10 	vmov	r2, r3, d0
 80017ee:	4611      	mov	r1, r2
 80017f0:	61b9      	str	r1, [r7, #24]
 80017f2:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80017f6:	61fb      	str	r3, [r7, #28]

	if(var1 == 0) return 0;
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001804:	f7ff f910 	bl	8000a28 <__aeabi_dcmpeq>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <BMP280_measureH+0x64>
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	e034      	b.n	800187e <BMP280_measureH+0xce>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8001814:	6838      	ldr	r0, [r7, #0]
 8001816:	f7fe fe35 	bl	8000484 <__aeabi_i2d>
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	4b20      	ldr	r3, [pc, #128]	@ (80018a0 <BMP280_measureH+0xf0>)
 8001820:	f7fe ffc4 	bl	80007ac <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	a318      	add	r3, pc, #96	@ (adr r3, 8001890 <BMP280_measureH+0xe0>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe fcdb 	bl	80001ec <__adddf3>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	a117      	add	r1, pc, #92	@ (adr r1, 8001898 <BMP280_measureH+0xe8>)
 800183c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001840:	f7fe ffb4 	bl	80007ac <__aeabi_ddiv>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	e9c7 2304 	strd	r2, r3, [r7, #16]
	h = (float)(var1/var2);
 800184c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001850:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001854:	f7fe ffaa 	bl	80007ac <__aeabi_ddiv>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f92a 	bl	8000ab8 <__aeabi_d2f>
 8001864:	4603      	mov	r3, r0
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe1e 	bl	80004a8 <__aeabi_f2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return h;
 8001874:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001878:	f7ff f91e 	bl	8000ab8 <__aeabi_d2f>
 800187c:	4603      	mov	r3, r0
}
 800187e:	ee07 3a90 	vmov	s15, r3
 8001882:	eeb0 0a67 	vmov.f32	s0, s15
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	f3af 8000 	nop.w
 8001890:	66666666 	.word	0x66666666
 8001894:	40711266 	.word	0x40711266
 8001898:	ca402a92 	.word	0xca402a92
 800189c:	3fa17e3e 	.word	0x3fa17e3e
 80018a0:	40590000 	.word	0x40590000
 80018a4:	00000000 	.word	0x00000000
 80018a8:	40f8bcd0 	.word	0x40f8bcd0

080018ac <BMP280_init>:

void BMP280_init(void){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	BMP280_unselect();
 80018b0:	2201      	movs	r2, #1
 80018b2:	2104      	movs	r1, #4
 80018b4:	4807      	ldr	r0, [pc, #28]	@ (80018d4 <BMP280_init+0x28>)
 80018b6:	f002 f8a7 	bl	8003a08 <HAL_GPIO_WritePin>
	BMP280_config();
 80018ba:	f7ff fb6d 	bl	8000f98 <BMP280_config>
	BMP280_data.ID = BMP280_read(0x89);
 80018be:	2089      	movs	r0, #137	@ 0x89
 80018c0:	f7ff fb3e 	bl	8000f40 <BMP280_read>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <BMP280_init+0x2c>)
 80018ca:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 80018cc:	f7ff fb70 	bl	8000fb0 <BMP280_calibrationData>
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40020400 	.word	0x40020400
 80018d8:	2000007c 	.word	0x2000007c

080018dc <BMP280_calculate>:

void BMP280_calculate(void){
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	BMP280_readRawValues();
 80018e0:	f7ff fc1a 	bl	8001118 <BMP280_readRawValues>
	BMP280_data.Temp 				= BMP280_measureT(T_raw);
 80018e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <BMP280_calculate+0x48>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fc57 	bl	800119c <BMP280_measureT>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <BMP280_calculate+0x4c>)
 80018f2:	6053      	str	r3, [r2, #4]
	BMP280_data.Pressure    		= BMP280_measureP(P_raw)/256;
 80018f4:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <BMP280_calculate+0x50>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fc93 	bl	8001224 <BMP280_measureP>
 80018fe:	4603      	mov	r3, r0
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	4a09      	ldr	r2, [pc, #36]	@ (8001928 <BMP280_calculate+0x4c>)
 8001904:	6093      	str	r3, [r2, #8]
	BMP280_data.Barometric_Altitude = BMP280_measureH(BMP280_data.Pressure, BMP280_data.Temp);
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <BMP280_calculate+0x4c>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	4a07      	ldr	r2, [pc, #28]	@ (8001928 <BMP280_calculate+0x4c>)
 800190c:	6852      	ldr	r2, [r2, #4]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff4d 	bl	80017b0 <BMP280_measureH>
 8001916:	eef0 7a40 	vmov.f32	s15, s0
 800191a:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <BMP280_calculate+0x4c>)
 800191c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200000a4 	.word	0x200000a4
 8001928:	2000007c 	.word	0x2000007c
 800192c:	200000a8 	.word	0x200000a8

08001930 <init_task_1ms>:

#include "RTOS/RTOS.h"

//////////////////////////////INICIALIZACIÓN DE FUNCIONES///////////////////////////////////////

void init_task_1ms(void){
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <init_task_5ms>:

void init_task_5ms(void){
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0
	BMP280_init();
 8001942:	f7ff ffb3 	bl	80018ac <BMP280_init>
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}

0800194a <init_task_10ms>:

void init_task_10ms(void){
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <init_task_50ms>:

void init_task_50ms(void){
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <init_task_100ms>:

void init_task_100ms(void){
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <init_task_500ms>:

void init_task_500ms(void){
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <task_1ms>:

//////////////////////////////FUNCIONES PERIODICAS///////////////////////////////////////

void task_1ms(void){
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <task_5ms>:

void task_5ms(void){
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	BMP280_calculate();
 8001994:	f7ff ffa2 	bl	80018dc <BMP280_calculate>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <task_10ms>:

void task_10ms(void){
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <task_50ms>:

void task_50ms(void){
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <task_100ms>:

void task_100ms(void){
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <task_500ms>:

void task_500ms(void){
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019da:	463b      	mov	r3, r7
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019e6:	4b21      	ldr	r3, [pc, #132]	@ (8001a6c <MX_ADC1_Init+0x98>)
 80019e8:	4a21      	ldr	r2, [pc, #132]	@ (8001a70 <MX_ADC1_Init+0x9c>)
 80019ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019ec:	4b1f      	ldr	r3, [pc, #124]	@ (8001a6c <MX_ADC1_Init+0x98>)
 80019ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <MX_ADC1_Init+0x98>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019fa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a6c <MX_ADC1_Init+0x98>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a00:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a06:	4b19      	ldr	r3, [pc, #100]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a16:	4a17      	ldr	r2, [pc, #92]	@ (8001a74 <MX_ADC1_Init+0xa0>)
 8001a18:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a26:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a34:	480d      	ldr	r0, [pc, #52]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a36:	f001 f803 	bl	8002a40 <HAL_ADC_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a40:	f000 fc34 	bl	80022ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a44:	2301      	movs	r3, #1
 8001a46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a50:	463b      	mov	r3, r7
 8001a52:	4619      	mov	r1, r3
 8001a54:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <MX_ADC1_Init+0x98>)
 8001a56:	f001 f837 	bl	8002ac8 <HAL_ADC_ConfigChannel>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a60:	f000 fc24 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200000b0 	.word	0x200000b0
 8001a70:	40012000 	.word	0x40012000
 8001a74:	0f000001 	.word	0x0f000001

08001a78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	@ 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a17      	ldr	r2, [pc, #92]	@ (8001af4 <HAL_ADC_MspInit+0x7c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d127      	bne.n	8001aea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <HAL_ADC_MspInit+0x80>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	4a15      	ldr	r2, [pc, #84]	@ (8001af8 <HAL_ADC_MspInit+0x80>)
 8001aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aaa:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <HAL_ADC_MspInit+0x80>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <HAL_ADC_MspInit+0x80>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a0e      	ldr	r2, [pc, #56]	@ (8001af8 <HAL_ADC_MspInit+0x80>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <HAL_ADC_MspInit+0x80>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_VBat_Pin;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VBat_GPIO_Port, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	@ (8001afc <HAL_ADC_MspInit+0x84>)
 8001ae6:	f001 fe0b 	bl	8003700 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	@ 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40012000 	.word	0x40012000
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020000 	.word	0x40020000

08001b00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <MX_DMA_Init+0x3c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b3c <MX_DMA_Init+0x3c>)
 8001b10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <MX_DMA_Init+0x3c>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2105      	movs	r1, #5
 8001b26:	200e      	movs	r0, #14
 8001b28:	f001 fab4 	bl	8003094 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001b2c:	200e      	movs	r0, #14
 8001b2e:	f001 facd 	bl	80030cc <HAL_NVIC_EnableIRQ>

}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800

08001b40 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4a07      	ldr	r2, [pc, #28]	@ (8001b6c <vApplicationGetIdleTaskMemory+0x2c>)
 8001b50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	4a06      	ldr	r2, [pc, #24]	@ (8001b70 <vApplicationGetIdleTaskMemory+0x30>)
 8001b56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2280      	movs	r2, #128	@ 0x80
 8001b5c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000110 	.word	0x20000110
 8001b70:	20000164 	.word	0x20000164

08001b74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001b74:	b5b0      	push	{r4, r5, r7, lr}
 8001b76:	b0aa      	sub	sp, #168	@ 0xa8
 8001b78:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_5ms */
  osThreadDef(Task_5ms, Task5ms, osPriorityNormal, 0, 128);
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c64 <MX_FREERTOS_Init+0xf0>)
 8001b7c:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8001b80:	461d      	mov	r5, r3
 8001b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_5msHandle = osThreadCreate(osThread(Task_5ms), NULL);
 8001b8e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f004 f95a 	bl	8005e4e <osThreadCreate>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4a32      	ldr	r2, [pc, #200]	@ (8001c68 <MX_FREERTOS_Init+0xf4>)
 8001b9e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, Task10ms, osPriorityNormal, 0, 128);
 8001ba0:	4b32      	ldr	r3, [pc, #200]	@ (8001c6c <MX_FREERTOS_Init+0xf8>)
 8001ba2:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001ba6:	461d      	mov	r5, r3
 8001ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bb0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 8001bb4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f004 f947 	bl	8005e4e <osThreadCreate>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8001c70 <MX_FREERTOS_Init+0xfc>)
 8001bc4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_50ms */
  osThreadDef(Task_50ms, Task50ms, osPriorityNormal, 0, 128);
 8001bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c74 <MX_FREERTOS_Init+0x100>)
 8001bc8:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001bcc:	461d      	mov	r5, r3
 8001bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_50msHandle = osThreadCreate(osThread(Task_50ms), NULL);
 8001bda:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f004 f934 	bl	8005e4e <osThreadCreate>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4a23      	ldr	r2, [pc, #140]	@ (8001c78 <MX_FREERTOS_Init+0x104>)
 8001bea:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, Task100ms, osPriorityNormal, 0, 128);
 8001bec:	4b23      	ldr	r3, [pc, #140]	@ (8001c7c <MX_FREERTOS_Init+0x108>)
 8001bee:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001bf2:	461d      	mov	r5, r3
 8001bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bf8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 8001c00:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 f921 	bl	8005e4e <osThreadCreate>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001c80 <MX_FREERTOS_Init+0x10c>)
 8001c10:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_500ms */
  osThreadDef(Task_500ms, Task500ms, osPriorityNormal, 0, 128);
 8001c12:	4b1c      	ldr	r3, [pc, #112]	@ (8001c84 <MX_FREERTOS_Init+0x110>)
 8001c14:	f107 041c 	add.w	r4, r7, #28
 8001c18:	461d      	mov	r5, r3
 8001c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_500msHandle = osThreadCreate(osThread(Task_500ms), NULL);
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f004 f90e 	bl	8005e4e <osThreadCreate>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <MX_FREERTOS_Init+0x114>)
 8001c36:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, Task1ms, osPriorityNormal, 0, 128);
 8001c38:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <MX_FREERTOS_Init+0x118>)
 8001c3a:	463c      	mov	r4, r7
 8001c3c:	461d      	mov	r5, r3
 8001c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 f8fd 	bl	8005e4e <osThreadCreate>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4a0e      	ldr	r2, [pc, #56]	@ (8001c90 <MX_FREERTOS_Init+0x11c>)
 8001c58:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001c5a:	bf00      	nop
 8001c5c:	37a8      	adds	r7, #168	@ 0xa8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bdb0      	pop	{r4, r5, r7, pc}
 8001c62:	bf00      	nop
 8001c64:	08007758 	.word	0x08007758
 8001c68:	200000f8 	.word	0x200000f8
 8001c6c:	08007780 	.word	0x08007780
 8001c70:	200000fc 	.word	0x200000fc
 8001c74:	080077a8 	.word	0x080077a8
 8001c78:	20000100 	.word	0x20000100
 8001c7c:	080077d0 	.word	0x080077d0
 8001c80:	20000104 	.word	0x20000104
 8001c84:	080077f8 	.word	0x080077f8
 8001c88:	20000108 	.word	0x20000108
 8001c8c:	08007820 	.word	0x08007820
 8001c90:	2000010c 	.word	0x2000010c

08001c94 <Task5ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task5ms */
void Task5ms(void const * argument)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task5ms */
	init_task_5ms();
 8001c9c:	f7ff fe4f 	bl	800193e <init_task_5ms>
  /* Infinite loop */
  for(;;)
  {
	task_5ms();
 8001ca0:	f7ff fe76 	bl	8001990 <task_5ms>
    osDelay(5);
 8001ca4:	2005      	movs	r0, #5
 8001ca6:	f004 f91e 	bl	8005ee6 <osDelay>
	task_5ms();
 8001caa:	bf00      	nop
 8001cac:	e7f8      	b.n	8001ca0 <Task5ms+0xc>

08001cae <Task10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task10ms */
void Task10ms(void const * argument)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task10ms */
	init_task_10ms();
 8001cb6:	f7ff fe48 	bl	800194a <init_task_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 8001cba:	f7ff fe6f 	bl	800199c <task_10ms>
    osDelay(10);
 8001cbe:	200a      	movs	r0, #10
 8001cc0:	f004 f911 	bl	8005ee6 <osDelay>
	task_10ms();
 8001cc4:	bf00      	nop
 8001cc6:	e7f8      	b.n	8001cba <Task10ms+0xc>

08001cc8 <Task50ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task50ms */
void Task50ms(void const * argument)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task50ms */
	init_task_50ms();
 8001cd0:	f7ff fe42 	bl	8001958 <init_task_50ms>
  /* Infinite loop */
  for(;;)
  {
	task_50ms();
 8001cd4:	f7ff fe69 	bl	80019aa <task_50ms>
    osDelay(50);
 8001cd8:	2032      	movs	r0, #50	@ 0x32
 8001cda:	f004 f904 	bl	8005ee6 <osDelay>
	task_50ms();
 8001cde:	bf00      	nop
 8001ce0:	e7f8      	b.n	8001cd4 <Task50ms+0xc>

08001ce2 <Task100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task100ms */
void Task100ms(void const * argument)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task100ms */
	init_task_100ms();
 8001cea:	f7ff fe3c 	bl	8001966 <init_task_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 8001cee:	f7ff fe63 	bl	80019b8 <task_100ms>
    osDelay(100);
 8001cf2:	2064      	movs	r0, #100	@ 0x64
 8001cf4:	f004 f8f7 	bl	8005ee6 <osDelay>
	task_100ms();
 8001cf8:	bf00      	nop
 8001cfa:	e7f8      	b.n	8001cee <Task100ms+0xc>

08001cfc <Task500ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task500ms */
void Task500ms(void const * argument)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task500ms */
	init_task_500ms();
 8001d04:	f7ff fe36 	bl	8001974 <init_task_500ms>
  /* Infinite loop */
  for(;;)
  {
	task_500ms();
 8001d08:	f7ff fe5d 	bl	80019c6 <task_500ms>
    osDelay(500);
 8001d0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d10:	f004 f8e9 	bl	8005ee6 <osDelay>
	task_500ms();
 8001d14:	bf00      	nop
 8001d16:	e7f7      	b.n	8001d08 <Task500ms+0xc>

08001d18 <Task1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1ms */
void Task1ms(void const * argument)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1ms */
	init_task_1ms();
 8001d20:	f7ff fe06 	bl	8001930 <init_task_1ms>
  /* Infinite loop */
  for(;;)
  {
	task_1ms();
 8001d24:	f7ff fe2d 	bl	8001982 <task_1ms>
    osDelay(1);
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f004 f8dc 	bl	8005ee6 <osDelay>
	task_1ms();
 8001d2e:	bf00      	nop
 8001d30:	e7f8      	b.n	8001d24 <Task1ms+0xc>
	...

08001d34 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	@ 0x28
 8001d38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
 8001d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b4f      	ldr	r3, [pc, #316]	@ (8001e8c <MX_GPIO_Init+0x158>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a4e      	ldr	r2, [pc, #312]	@ (8001e8c <MX_GPIO_Init+0x158>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e8c <MX_GPIO_Init+0x158>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b48      	ldr	r3, [pc, #288]	@ (8001e8c <MX_GPIO_Init+0x158>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a47      	ldr	r2, [pc, #284]	@ (8001e8c <MX_GPIO_Init+0x158>)
 8001d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b45      	ldr	r3, [pc, #276]	@ (8001e8c <MX_GPIO_Init+0x158>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	4b41      	ldr	r3, [pc, #260]	@ (8001e8c <MX_GPIO_Init+0x158>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a40      	ldr	r2, [pc, #256]	@ (8001e8c <MX_GPIO_Init+0x158>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b3e      	ldr	r3, [pc, #248]	@ (8001e8c <MX_GPIO_Init+0x158>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	4b3a      	ldr	r3, [pc, #232]	@ (8001e8c <MX_GPIO_Init+0x158>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	4a39      	ldr	r2, [pc, #228]	@ (8001e8c <MX_GPIO_Init+0x158>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dae:	4b37      	ldr	r3, [pc, #220]	@ (8001e8c <MX_GPIO_Init+0x158>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dc0:	4833      	ldr	r0, [pc, #204]	@ (8001e90 <MX_GPIO_Init+0x15c>)
 8001dc2:	f001 fe21 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|BMP_CS_Pin, GPIO_PIN_RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2105      	movs	r1, #5
 8001dca:	4832      	ldr	r0, [pc, #200]	@ (8001e94 <MX_GPIO_Init+0x160>)
 8001dcc:	f001 fe1c 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, uLed_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8001dd6:	4830      	ldr	r0, [pc, #192]	@ (8001e98 <MX_GPIO_Init+0x164>)
 8001dd8:	f001 fe16 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CS_Pin;
 8001ddc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de2:	2301      	movs	r3, #1
 8001de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CS_GPIO_Port, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	4826      	ldr	r0, [pc, #152]	@ (8001e90 <MX_GPIO_Init+0x15c>)
 8001df6:	f001 fc83 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001dfa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e00:	2303      	movs	r3, #3
 8001e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4820      	ldr	r0, [pc, #128]	@ (8001e90 <MX_GPIO_Init+0x15c>)
 8001e10:	f001 fc76 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_12;
 8001e14:	f241 0311 	movw	r3, #4113	@ 0x1011
 8001e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	481b      	ldr	r0, [pc, #108]	@ (8001e98 <MX_GPIO_Init+0x164>)
 8001e2a:	f001 fc69 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|BMP_CS_Pin;
 8001e2e:	2305      	movs	r3, #5
 8001e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	4813      	ldr	r0, [pc, #76]	@ (8001e94 <MX_GPIO_Init+0x160>)
 8001e46:	f001 fc5b 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 8001e4a:	f240 2302 	movw	r3, #514	@ 0x202
 8001e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e50:	2303      	movs	r3, #3
 8001e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	480d      	ldr	r0, [pc, #52]	@ (8001e94 <MX_GPIO_Init+0x160>)
 8001e60:	f001 fc4e 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = uLed_Pin|NRF_CE_Pin;
 8001e64:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8001e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4806      	ldr	r0, [pc, #24]	@ (8001e98 <MX_GPIO_Init+0x164>)
 8001e7e:	f001 fc3f 	bl	8003700 <HAL_GPIO_Init>

}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	@ 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020800 	.word	0x40020800
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40020000 	.word	0x40020000

08001e9c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ea0:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001ea2:	4a13      	ldr	r2, [pc, #76]	@ (8001ef0 <MX_I2C1_Init+0x54>)
 8001ea4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001ea8:	4a12      	ldr	r2, [pc, #72]	@ (8001ef4 <MX_I2C1_Init+0x58>)
 8001eaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001eba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ebe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ecc:	4b07      	ldr	r3, [pc, #28]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ed8:	4804      	ldr	r0, [pc, #16]	@ (8001eec <MX_I2C1_Init+0x50>)
 8001eda:	f001 fdaf 	bl	8003a3c <HAL_I2C_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ee4:	f000 f9e2 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000364 	.word	0x20000364
 8001ef0:	40005400 	.word	0x40005400
 8001ef4:	000186a0 	.word	0x000186a0

08001ef8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001efc:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <MX_I2C2_Init+0x50>)
 8001efe:	4a13      	ldr	r2, [pc, #76]	@ (8001f4c <MX_I2C2_Init+0x54>)
 8001f00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001f02:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <MX_I2C2_Init+0x50>)
 8001f04:	4a12      	ldr	r2, [pc, #72]	@ (8001f50 <MX_I2C2_Init+0x58>)
 8001f06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <MX_I2C2_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f48 <MX_I2C2_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <MX_I2C2_Init+0x50>)
 8001f16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <MX_I2C2_Init+0x50>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001f22:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <MX_I2C2_Init+0x50>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f28:	4b07      	ldr	r3, [pc, #28]	@ (8001f48 <MX_I2C2_Init+0x50>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f2e:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <MX_I2C2_Init+0x50>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f34:	4804      	ldr	r0, [pc, #16]	@ (8001f48 <MX_I2C2_Init+0x50>)
 8001f36:	f001 fd81 	bl	8003a3c <HAL_I2C_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001f40:	f000 f9b4 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200003b8 	.word	0x200003b8
 8001f4c:	40005800 	.word	0x40005800
 8001f50:	000186a0 	.word	0x000186a0

08001f54 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f58:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <MX_I2C3_Init+0x50>)
 8001f5a:	4a13      	ldr	r2, [pc, #76]	@ (8001fa8 <MX_I2C3_Init+0x54>)
 8001f5c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001f5e:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <MX_I2C3_Init+0x50>)
 8001f60:	4a12      	ldr	r2, [pc, #72]	@ (8001fac <MX_I2C3_Init+0x58>)
 8001f62:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa4 <MX_I2C3_Init+0x50>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <MX_I2C3_Init+0x50>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <MX_I2C3_Init+0x50>)
 8001f72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f76:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f78:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <MX_I2C3_Init+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001f7e:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <MX_I2C3_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f84:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <MX_I2C3_Init+0x50>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <MX_I2C3_Init+0x50>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f90:	4804      	ldr	r0, [pc, #16]	@ (8001fa4 <MX_I2C3_Init+0x50>)
 8001f92:	f001 fd53 	bl	8003a3c <HAL_I2C_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001f9c:	f000 f986 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	2000040c 	.word	0x2000040c
 8001fa8:	40005c00 	.word	0x40005c00
 8001fac:	000186a0 	.word	0x000186a0

08001fb0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08e      	sub	sp, #56	@ 0x38
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a63      	ldr	r2, [pc, #396]	@ (800215c <HAL_I2C_MspInit+0x1ac>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d12c      	bne.n	800202c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]
 8001fd6:	4b62      	ldr	r3, [pc, #392]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	4a61      	ldr	r2, [pc, #388]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	623b      	str	r3, [r7, #32]
 8001fec:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU1_SCL_Pin|IMU1_SDA_Pin;
 8001fee:	23c0      	movs	r3, #192	@ 0xc0
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff2:	2312      	movs	r3, #18
 8001ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ffe:	2304      	movs	r3, #4
 8002000:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002006:	4619      	mov	r1, r3
 8002008:	4856      	ldr	r0, [pc, #344]	@ (8002164 <HAL_I2C_MspInit+0x1b4>)
 800200a:	f001 fb79 	bl	8003700 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
 8002012:	4b53      	ldr	r3, [pc, #332]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	4a52      	ldr	r2, [pc, #328]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 8002018:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800201c:	6413      	str	r3, [r2, #64]	@ 0x40
 800201e:	4b50      	ldr	r3, [pc, #320]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800202a:	e093      	b.n	8002154 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a4d      	ldr	r2, [pc, #308]	@ (8002168 <HAL_I2C_MspInit+0x1b8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d13d      	bne.n	80020b2 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	4b49      	ldr	r3, [pc, #292]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	4a48      	ldr	r2, [pc, #288]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	6313      	str	r3, [r2, #48]	@ 0x30
 8002046:	4b46      	ldr	r3, [pc, #280]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IMU2_SCL_Pin;
 8002052:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002058:	2312      	movs	r3, #18
 800205a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002064:	2304      	movs	r3, #4
 8002066:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(IMU2_SCL_GPIO_Port, &GPIO_InitStruct);
 8002068:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800206c:	4619      	mov	r1, r3
 800206e:	483d      	ldr	r0, [pc, #244]	@ (8002164 <HAL_I2C_MspInit+0x1b4>)
 8002070:	f001 fb46 	bl	8003700 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IMU2_SDA_Pin;
 8002074:	2308      	movs	r3, #8
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002078:	2312      	movs	r3, #18
 800207a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002084:	2309      	movs	r3, #9
 8002086:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(IMU2_SDA_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800208c:	4619      	mov	r1, r3
 800208e:	4835      	ldr	r0, [pc, #212]	@ (8002164 <HAL_I2C_MspInit+0x1b4>)
 8002090:	f001 fb36 	bl	8003700 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	4b31      	ldr	r3, [pc, #196]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	4a30      	ldr	r2, [pc, #192]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 800209e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	697b      	ldr	r3, [r7, #20]
}
 80020b0:	e050      	b.n	8002154 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C3)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2d      	ldr	r2, [pc, #180]	@ (800216c <HAL_I2C_MspInit+0x1bc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d14b      	bne.n	8002154 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	2300      	movs	r3, #0
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	4b27      	ldr	r3, [pc, #156]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c4:	4a26      	ldr	r2, [pc, #152]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80020cc:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	4b20      	ldr	r3, [pc, #128]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 80020e2:	f043 0302 	orr.w	r3, r3, #2
 80020e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 80020ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAG_SCL_Pin;
 80020f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020fa:	2312      	movs	r3, #18
 80020fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002106:	2304      	movs	r3, #4
 8002108:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SCL_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800210e:	4619      	mov	r1, r3
 8002110:	4817      	ldr	r0, [pc, #92]	@ (8002170 <HAL_I2C_MspInit+0x1c0>)
 8002112:	f001 faf5 	bl	8003700 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAG_SDA_Pin;
 8002116:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800211c:	2312      	movs	r3, #18
 800211e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002128:	2309      	movs	r3, #9
 800212a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SDA_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002130:	4619      	mov	r1, r3
 8002132:	480c      	ldr	r0, [pc, #48]	@ (8002164 <HAL_I2C_MspInit+0x1b4>)
 8002134:	f001 fae4 	bl	8003700 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	4b08      	ldr	r3, [pc, #32]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002140:	4a07      	ldr	r2, [pc, #28]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 8002142:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002146:	6413      	str	r3, [r2, #64]	@ 0x40
 8002148:	4b05      	ldr	r3, [pc, #20]	@ (8002160 <HAL_I2C_MspInit+0x1b0>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]
}
 8002154:	bf00      	nop
 8002156:	3738      	adds	r7, #56	@ 0x38
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40005400 	.word	0x40005400
 8002160:	40023800 	.word	0x40023800
 8002164:	40020400 	.word	0x40020400
 8002168:	40005800 	.word	0x40005800
 800216c:	40005c00 	.word	0x40005c00
 8002170:	40020000 	.word	0x40020000

08002174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002178:	f000 fc20 	bl	80029bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800217c:	f000 f81c 	bl	80021b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002180:	f7ff fdd8 	bl	8001d34 <MX_GPIO_Init>
  MX_DMA_Init();
 8002184:	f7ff fcbc 	bl	8001b00 <MX_DMA_Init>
  MX_ADC1_Init();
 8002188:	f7ff fc24 	bl	80019d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800218c:	f7ff fe86 	bl	8001e9c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002190:	f7ff feb2 	bl	8001ef8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8002194:	f7ff fede 	bl	8001f54 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002198:	f000 f88e 	bl	80022b8 <MX_SPI1_Init>
  MX_SPI2_Init();
 800219c:	f000 f8c2 	bl	8002324 <MX_SPI2_Init>
  MX_SPI3_Init();
 80021a0:	f000 f8f6 	bl	8002390 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80021a4:	f000 fb10 	bl	80027c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80021a8:	f000 fb38 	bl	800281c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80021ac:	f7ff fce2 	bl	8001b74 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80021b0:	f003 fe46 	bl	8005e40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <main+0x40>

080021b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b094      	sub	sp, #80	@ 0x50
 80021bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021be:	f107 0320 	add.w	r3, r7, #32
 80021c2:	2230      	movs	r2, #48	@ 0x30
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f005 f884 	bl	80072d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021cc:	f107 030c 	add.w	r3, r7, #12
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	4b27      	ldr	r3, [pc, #156]	@ (8002280 <SystemClock_Config+0xc8>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e4:	4a26      	ldr	r2, [pc, #152]	@ (8002280 <SystemClock_Config+0xc8>)
 80021e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ec:	4b24      	ldr	r3, [pc, #144]	@ (8002280 <SystemClock_Config+0xc8>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f8:	2300      	movs	r3, #0
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	4b21      	ldr	r3, [pc, #132]	@ (8002284 <SystemClock_Config+0xcc>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a20      	ldr	r2, [pc, #128]	@ (8002284 <SystemClock_Config+0xcc>)
 8002202:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b1e      	ldr	r3, [pc, #120]	@ (8002284 <SystemClock_Config+0xcc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002214:	2301      	movs	r3, #1
 8002216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002218:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800221e:	2302      	movs	r3, #2
 8002220:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002222:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002226:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002228:	230c      	movs	r3, #12
 800222a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800222c:	2360      	movs	r3, #96	@ 0x60
 800222e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002230:	2302      	movs	r3, #2
 8002232:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002234:	2304      	movs	r3, #4
 8002236:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002238:	f107 0320 	add.w	r3, r7, #32
 800223c:	4618      	mov	r0, r3
 800223e:	f001 fd41 	bl	8003cc4 <HAL_RCC_OscConfig>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002248:	f000 f830 	bl	80022ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800224c:	230f      	movs	r3, #15
 800224e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002250:	2302      	movs	r3, #2
 8002252:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002258:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800225c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	2103      	movs	r1, #3
 8002268:	4618      	mov	r0, r3
 800226a:	f001 ffa3 	bl	80041b4 <HAL_RCC_ClockConfig>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002274:	f000 f81a 	bl	80022ac <Error_Handler>
  }
}
 8002278:	bf00      	nop
 800227a:	3750      	adds	r7, #80	@ 0x50
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40023800 	.word	0x40023800
 8002284:	40007000 	.word	0x40007000

08002288 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800229a:	f000 fbb1 	bl	8002a00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40014800 	.word	0x40014800

080022ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022b0:	b672      	cpsid	i
}
 80022b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <Error_Handler+0x8>

080022b8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80022bc:	4b17      	ldr	r3, [pc, #92]	@ (800231c <MX_SPI1_Init+0x64>)
 80022be:	4a18      	ldr	r2, [pc, #96]	@ (8002320 <MX_SPI1_Init+0x68>)
 80022c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022c2:	4b16      	ldr	r3, [pc, #88]	@ (800231c <MX_SPI1_Init+0x64>)
 80022c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022ca:	4b14      	ldr	r3, [pc, #80]	@ (800231c <MX_SPI1_Init+0x64>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022d0:	4b12      	ldr	r3, [pc, #72]	@ (800231c <MX_SPI1_Init+0x64>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022d6:	4b11      	ldr	r3, [pc, #68]	@ (800231c <MX_SPI1_Init+0x64>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	@ (800231c <MX_SPI1_Init+0x64>)
 80022de:	2200      	movs	r2, #0
 80022e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <MX_SPI1_Init+0x64>)
 80022e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022ea:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <MX_SPI1_Init+0x64>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022f0:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <MX_SPI1_Init+0x64>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022f6:	4b09      	ldr	r3, [pc, #36]	@ (800231c <MX_SPI1_Init+0x64>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022fc:	4b07      	ldr	r3, [pc, #28]	@ (800231c <MX_SPI1_Init+0x64>)
 80022fe:	2200      	movs	r2, #0
 8002300:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <MX_SPI1_Init+0x64>)
 8002304:	220a      	movs	r2, #10
 8002306:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002308:	4804      	ldr	r0, [pc, #16]	@ (800231c <MX_SPI1_Init+0x64>)
 800230a:	f002 f965 	bl	80045d8 <HAL_SPI_Init>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002314:	f7ff ffca 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000460 	.word	0x20000460
 8002320:	40013000 	.word	0x40013000

08002324 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002328:	4b17      	ldr	r3, [pc, #92]	@ (8002388 <MX_SPI2_Init+0x64>)
 800232a:	4a18      	ldr	r2, [pc, #96]	@ (800238c <MX_SPI2_Init+0x68>)
 800232c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800232e:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <MX_SPI2_Init+0x64>)
 8002330:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002334:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002336:	4b14      	ldr	r3, [pc, #80]	@ (8002388 <MX_SPI2_Init+0x64>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800233c:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <MX_SPI2_Init+0x64>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002342:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <MX_SPI2_Init+0x64>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002348:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <MX_SPI2_Init+0x64>)
 800234a:	2200      	movs	r2, #0
 800234c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800234e:	4b0e      	ldr	r3, [pc, #56]	@ (8002388 <MX_SPI2_Init+0x64>)
 8002350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002354:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002356:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <MX_SPI2_Init+0x64>)
 8002358:	2218      	movs	r2, #24
 800235a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800235c:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <MX_SPI2_Init+0x64>)
 800235e:	2200      	movs	r2, #0
 8002360:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002362:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <MX_SPI2_Init+0x64>)
 8002364:	2200      	movs	r2, #0
 8002366:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002368:	4b07      	ldr	r3, [pc, #28]	@ (8002388 <MX_SPI2_Init+0x64>)
 800236a:	2200      	movs	r2, #0
 800236c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <MX_SPI2_Init+0x64>)
 8002370:	220a      	movs	r2, #10
 8002372:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002374:	4804      	ldr	r0, [pc, #16]	@ (8002388 <MX_SPI2_Init+0x64>)
 8002376:	f002 f92f 	bl	80045d8 <HAL_SPI_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002380:	f7ff ff94 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200004b8 	.word	0x200004b8
 800238c:	40003800 	.word	0x40003800

08002390 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002394:	4b17      	ldr	r3, [pc, #92]	@ (80023f4 <MX_SPI3_Init+0x64>)
 8002396:	4a18      	ldr	r2, [pc, #96]	@ (80023f8 <MX_SPI3_Init+0x68>)
 8002398:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800239a:	4b16      	ldr	r3, [pc, #88]	@ (80023f4 <MX_SPI3_Init+0x64>)
 800239c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80023a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023a2:	4b14      	ldr	r3, [pc, #80]	@ (80023f4 <MX_SPI3_Init+0x64>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80023a8:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <MX_SPI3_Init+0x64>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ae:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <MX_SPI3_Init+0x64>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023b4:	4b0f      	ldr	r3, [pc, #60]	@ (80023f4 <MX_SPI3_Init+0x64>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023ba:	4b0e      	ldr	r3, [pc, #56]	@ (80023f4 <MX_SPI3_Init+0x64>)
 80023bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023c0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023c2:	4b0c      	ldr	r3, [pc, #48]	@ (80023f4 <MX_SPI3_Init+0x64>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023c8:	4b0a      	ldr	r3, [pc, #40]	@ (80023f4 <MX_SPI3_Init+0x64>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023ce:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <MX_SPI3_Init+0x64>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d4:	4b07      	ldr	r3, [pc, #28]	@ (80023f4 <MX_SPI3_Init+0x64>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80023da:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <MX_SPI3_Init+0x64>)
 80023dc:	220a      	movs	r2, #10
 80023de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80023e0:	4804      	ldr	r0, [pc, #16]	@ (80023f4 <MX_SPI3_Init+0x64>)
 80023e2:	f002 f8f9 	bl	80045d8 <HAL_SPI_Init>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80023ec:	f7ff ff5e 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20000510 	.word	0x20000510
 80023f8:	40003c00 	.word	0x40003c00

080023fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08e      	sub	sp, #56	@ 0x38
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a6e      	ldr	r2, [pc, #440]	@ (80025d4 <HAL_SPI_MspInit+0x1d8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d12c      	bne.n	8002478 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
 8002422:	4b6d      	ldr	r3, [pc, #436]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	4a6c      	ldr	r2, [pc, #432]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 8002428:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800242c:	6453      	str	r3, [r2, #68]	@ 0x44
 800242e:	4b6a      	ldr	r3, [pc, #424]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002436:	623b      	str	r3, [r7, #32]
 8002438:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	4b66      	ldr	r3, [pc, #408]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	4a65      	ldr	r2, [pc, #404]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6313      	str	r3, [r2, #48]	@ 0x30
 800244a:	4b63      	ldr	r3, [pc, #396]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002456:	23e0      	movs	r3, #224	@ 0xe0
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002462:	2303      	movs	r3, #3
 8002464:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002466:	2305      	movs	r3, #5
 8002468:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800246e:	4619      	mov	r1, r3
 8002470:	485a      	ldr	r0, [pc, #360]	@ (80025dc <HAL_SPI_MspInit+0x1e0>)
 8002472:	f001 f945 	bl	8003700 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002476:	e0a9      	b.n	80025cc <HAL_SPI_MspInit+0x1d0>
  else if(spiHandle->Instance==SPI2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a58      	ldr	r2, [pc, #352]	@ (80025e0 <HAL_SPI_MspInit+0x1e4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d162      	bne.n	8002548 <HAL_SPI_MspInit+0x14c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	4b54      	ldr	r3, [pc, #336]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	4a53      	ldr	r2, [pc, #332]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 800248c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002490:	6413      	str	r3, [r2, #64]	@ 0x40
 8002492:	4b51      	ldr	r3, [pc, #324]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	4b4d      	ldr	r3, [pc, #308]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	4a4c      	ldr	r2, [pc, #304]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ae:	4b4a      	ldr	r3, [pc, #296]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 80024ba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024cc:	2305      	movs	r3, #5
 80024ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024d4:	4619      	mov	r1, r3
 80024d6:	4843      	ldr	r0, [pc, #268]	@ (80025e4 <HAL_SPI_MspInit+0x1e8>)
 80024d8:	f001 f912 	bl	8003700 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80024dc:	4b42      	ldr	r3, [pc, #264]	@ (80025e8 <HAL_SPI_MspInit+0x1ec>)
 80024de:	4a43      	ldr	r2, [pc, #268]	@ (80025ec <HAL_SPI_MspInit+0x1f0>)
 80024e0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80024e2:	4b41      	ldr	r3, [pc, #260]	@ (80025e8 <HAL_SPI_MspInit+0x1ec>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024e8:	4b3f      	ldr	r3, [pc, #252]	@ (80025e8 <HAL_SPI_MspInit+0x1ec>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ee:	4b3e      	ldr	r3, [pc, #248]	@ (80025e8 <HAL_SPI_MspInit+0x1ec>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024f4:	4b3c      	ldr	r3, [pc, #240]	@ (80025e8 <HAL_SPI_MspInit+0x1ec>)
 80024f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024fa:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024fc:	4b3a      	ldr	r3, [pc, #232]	@ (80025e8 <HAL_SPI_MspInit+0x1ec>)
 80024fe:	2200      	movs	r2, #0
 8002500:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002502:	4b39      	ldr	r3, [pc, #228]	@ (80025e8 <HAL_SPI_MspInit+0x1ec>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002508:	4b37      	ldr	r3, [pc, #220]	@ (80025e8 <HAL_SPI_MspInit+0x1ec>)
 800250a:	2200      	movs	r2, #0
 800250c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800250e:	4b36      	ldr	r3, [pc, #216]	@ (80025e8 <HAL_SPI_MspInit+0x1ec>)
 8002510:	2200      	movs	r2, #0
 8002512:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002514:	4b34      	ldr	r3, [pc, #208]	@ (80025e8 <HAL_SPI_MspInit+0x1ec>)
 8002516:	2200      	movs	r2, #0
 8002518:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800251a:	4833      	ldr	r0, [pc, #204]	@ (80025e8 <HAL_SPI_MspInit+0x1ec>)
 800251c:	f000 fde4 	bl	80030e8 <HAL_DMA_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8002526:	f7ff fec1 	bl	80022ac <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a2e      	ldr	r2, [pc, #184]	@ (80025e8 <HAL_SPI_MspInit+0x1ec>)
 800252e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002530:	4a2d      	ldr	r2, [pc, #180]	@ (80025e8 <HAL_SPI_MspInit+0x1ec>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2105      	movs	r1, #5
 800253a:	2024      	movs	r0, #36	@ 0x24
 800253c:	f000 fdaa 	bl	8003094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002540:	2024      	movs	r0, #36	@ 0x24
 8002542:	f000 fdc3 	bl	80030cc <HAL_NVIC_EnableIRQ>
}
 8002546:	e041      	b.n	80025cc <HAL_SPI_MspInit+0x1d0>
  else if(spiHandle->Instance==SPI3)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a28      	ldr	r2, [pc, #160]	@ (80025f0 <HAL_SPI_MspInit+0x1f4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d13c      	bne.n	80025cc <HAL_SPI_MspInit+0x1d0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	4a1f      	ldr	r2, [pc, #124]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 800255c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002560:	6413      	str	r3, [r2, #64]	@ 0x40
 8002562:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a18      	ldr	r2, [pc, #96]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <HAL_SPI_MspInit+0x1dc>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NRF_SCK_Pin;
 800258a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800258e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002598:	2303      	movs	r3, #3
 800259a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800259c:	2307      	movs	r3, #7
 800259e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 80025a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025a4:	4619      	mov	r1, r3
 80025a6:	480f      	ldr	r0, [pc, #60]	@ (80025e4 <HAL_SPI_MspInit+0x1e8>)
 80025a8:	f001 f8aa 	bl	8003700 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NRF_MISO_Pin|NRF_MOSI_Pin;
 80025ac:	2330      	movs	r3, #48	@ 0x30
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025bc:	2306      	movs	r3, #6
 80025be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025c4:	4619      	mov	r1, r3
 80025c6:	4807      	ldr	r0, [pc, #28]	@ (80025e4 <HAL_SPI_MspInit+0x1e8>)
 80025c8:	f001 f89a 	bl	8003700 <HAL_GPIO_Init>
}
 80025cc:	bf00      	nop
 80025ce:	3738      	adds	r7, #56	@ 0x38
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40013000 	.word	0x40013000
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020000 	.word	0x40020000
 80025e0:	40003800 	.word	0x40003800
 80025e4:	40020400 	.word	0x40020400
 80025e8:	20000568 	.word	0x20000568
 80025ec:	40026058 	.word	0x40026058
 80025f0:	40003c00 	.word	0x40003c00

080025f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	4b12      	ldr	r3, [pc, #72]	@ (8002648 <HAL_MspInit+0x54>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	4a11      	ldr	r2, [pc, #68]	@ (8002648 <HAL_MspInit+0x54>)
 8002604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002608:	6453      	str	r3, [r2, #68]	@ 0x44
 800260a:	4b0f      	ldr	r3, [pc, #60]	@ (8002648 <HAL_MspInit+0x54>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <HAL_MspInit+0x54>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	4a0a      	ldr	r2, [pc, #40]	@ (8002648 <HAL_MspInit+0x54>)
 8002620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002624:	6413      	str	r3, [r2, #64]	@ 0x40
 8002626:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <HAL_MspInit+0x54>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	210f      	movs	r1, #15
 8002636:	f06f 0001 	mvn.w	r0, #1
 800263a:	f000 fd2b 	bl	8003094 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800

0800264c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	@ 0x30
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	4b2e      	ldr	r3, [pc, #184]	@ (800271c <HAL_InitTick+0xd0>)
 8002662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002664:	4a2d      	ldr	r2, [pc, #180]	@ (800271c <HAL_InitTick+0xd0>)
 8002666:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800266a:	6453      	str	r3, [r2, #68]	@ 0x44
 800266c:	4b2b      	ldr	r3, [pc, #172]	@ (800271c <HAL_InitTick+0xd0>)
 800266e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002670:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002678:	f107 020c 	add.w	r2, r7, #12
 800267c:	f107 0310 	add.w	r3, r7, #16
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f001 ff76 	bl	8004574 <HAL_RCC_GetClockConfig>
  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002688:	f001 ff60 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 800268c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800268e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002690:	4a23      	ldr	r2, [pc, #140]	@ (8002720 <HAL_InitTick+0xd4>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	0c9b      	lsrs	r3, r3, #18
 8002698:	3b01      	subs	r3, #1
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 800269c:	4b21      	ldr	r3, [pc, #132]	@ (8002724 <HAL_InitTick+0xd8>)
 800269e:	4a22      	ldr	r2, [pc, #136]	@ (8002728 <HAL_InitTick+0xdc>)
 80026a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 80026a2:	4b20      	ldr	r3, [pc, #128]	@ (8002724 <HAL_InitTick+0xd8>)
 80026a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026a8:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80026aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002724 <HAL_InitTick+0xd8>)
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80026b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002724 <HAL_InitTick+0xd8>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <HAL_InitTick+0xd8>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026bc:	4b19      	ldr	r3, [pc, #100]	@ (8002724 <HAL_InitTick+0xd8>)
 80026be:	2200      	movs	r2, #0
 80026c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 80026c2:	4818      	ldr	r0, [pc, #96]	@ (8002724 <HAL_InitTick+0xd8>)
 80026c4:	f002 fe6c 	bl	80053a0 <HAL_TIM_Base_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80026ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d11b      	bne.n	800270e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80026d6:	4813      	ldr	r0, [pc, #76]	@ (8002724 <HAL_InitTick+0xd8>)
 80026d8:	f002 febc 	bl	8005454 <HAL_TIM_Base_Start_IT>
 80026dc:	4603      	mov	r3, r0
 80026de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80026e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d111      	bne.n	800270e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80026ea:	201a      	movs	r0, #26
 80026ec:	f000 fcee 	bl	80030cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	d808      	bhi.n	8002708 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80026f6:	2200      	movs	r2, #0
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	201a      	movs	r0, #26
 80026fc:	f000 fcca 	bl	8003094 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002700:	4a0a      	ldr	r2, [pc, #40]	@ (800272c <HAL_InitTick+0xe0>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e002      	b.n	800270e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800270e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002712:	4618      	mov	r0, r3
 8002714:	3730      	adds	r7, #48	@ 0x30
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	431bde83 	.word	0x431bde83
 8002724:	200005c8 	.word	0x200005c8
 8002728:	40014800 	.word	0x40014800
 800272c:	20000004 	.word	0x20000004

08002730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002734:	bf00      	nop
 8002736:	e7fd      	b.n	8002734 <NMI_Handler+0x4>

08002738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800273c:	bf00      	nop
 800273e:	e7fd      	b.n	800273c <HardFault_Handler+0x4>

08002740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <MemManage_Handler+0x4>

08002748 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800274c:	bf00      	nop
 800274e:	e7fd      	b.n	800274c <BusFault_Handler+0x4>

08002750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <UsageFault_Handler+0x4>

08002758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800276c:	4802      	ldr	r0, [pc, #8]	@ (8002778 <DMA1_Stream3_IRQHandler+0x10>)
 800276e:	f000 fd8b 	bl	8003288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000568 	.word	0x20000568

0800277c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002780:	4802      	ldr	r0, [pc, #8]	@ (800278c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002782:	f002 fec9 	bl	8005518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	200005c8 	.word	0x200005c8

08002790 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <SPI2_IRQHandler+0x10>)
 8002796:	f002 fbaf 	bl	8004ef8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	200004b8 	.word	0x200004b8

080027a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <SystemInit+0x20>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ae:	4a05      	ldr	r2, [pc, #20]	@ (80027c4 <SystemInit+0x20>)
 80027b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027cc:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <MX_USART1_UART_Init+0x4c>)
 80027ce:	4a12      	ldr	r2, [pc, #72]	@ (8002818 <MX_USART1_UART_Init+0x50>)
 80027d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <MX_USART1_UART_Init+0x4c>)
 80027d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027da:	4b0e      	ldr	r3, [pc, #56]	@ (8002814 <MX_USART1_UART_Init+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <MX_USART1_UART_Init+0x4c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <MX_USART1_UART_Init+0x4c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027ec:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <MX_USART1_UART_Init+0x4c>)
 80027ee:	220c      	movs	r2, #12
 80027f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f2:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <MX_USART1_UART_Init+0x4c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f8:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <MX_USART1_UART_Init+0x4c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027fe:	4805      	ldr	r0, [pc, #20]	@ (8002814 <MX_USART1_UART_Init+0x4c>)
 8002800:	f003 f842 	bl	8005888 <HAL_UART_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800280a:	f7ff fd4f 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000610 	.word	0x20000610
 8002818:	40011000 	.word	0x40011000

0800281c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002820:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <MX_USART2_UART_Init+0x4c>)
 8002822:	4a12      	ldr	r2, [pc, #72]	@ (800286c <MX_USART2_UART_Init+0x50>)
 8002824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002826:	4b10      	ldr	r3, [pc, #64]	@ (8002868 <MX_USART2_UART_Init+0x4c>)
 8002828:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800282c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800282e:	4b0e      	ldr	r3, [pc, #56]	@ (8002868 <MX_USART2_UART_Init+0x4c>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002834:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <MX_USART2_UART_Init+0x4c>)
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800283a:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <MX_USART2_UART_Init+0x4c>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002840:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <MX_USART2_UART_Init+0x4c>)
 8002842:	220c      	movs	r2, #12
 8002844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002846:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <MX_USART2_UART_Init+0x4c>)
 8002848:	2200      	movs	r2, #0
 800284a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800284c:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <MX_USART2_UART_Init+0x4c>)
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002852:	4805      	ldr	r0, [pc, #20]	@ (8002868 <MX_USART2_UART_Init+0x4c>)
 8002854:	f003 f818 	bl	8005888 <HAL_UART_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800285e:	f7ff fd25 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000658 	.word	0x20000658
 800286c:	40004400 	.word	0x40004400

08002870 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08c      	sub	sp, #48	@ 0x30
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a32      	ldr	r2, [pc, #200]	@ (8002958 <HAL_UART_MspInit+0xe8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d12d      	bne.n	80028ee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	4b31      	ldr	r3, [pc, #196]	@ (800295c <HAL_UART_MspInit+0xec>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	4a30      	ldr	r2, [pc, #192]	@ (800295c <HAL_UART_MspInit+0xec>)
 800289c:	f043 0310 	orr.w	r3, r3, #16
 80028a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028a2:	4b2e      	ldr	r3, [pc, #184]	@ (800295c <HAL_UART_MspInit+0xec>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	4b2a      	ldr	r3, [pc, #168]	@ (800295c <HAL_UART_MspInit+0xec>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	4a29      	ldr	r2, [pc, #164]	@ (800295c <HAL_UART_MspInit+0xec>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028be:	4b27      	ldr	r3, [pc, #156]	@ (800295c <HAL_UART_MspInit+0xec>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 80028ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80028ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d8:	2303      	movs	r3, #3
 80028da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028dc:	2307      	movs	r3, #7
 80028de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e0:	f107 031c 	add.w	r3, r7, #28
 80028e4:	4619      	mov	r1, r3
 80028e6:	481e      	ldr	r0, [pc, #120]	@ (8002960 <HAL_UART_MspInit+0xf0>)
 80028e8:	f000 ff0a 	bl	8003700 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028ec:	e030      	b.n	8002950 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002964 <HAL_UART_MspInit+0xf4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d12b      	bne.n	8002950 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	4b17      	ldr	r3, [pc, #92]	@ (800295c <HAL_UART_MspInit+0xec>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	4a16      	ldr	r2, [pc, #88]	@ (800295c <HAL_UART_MspInit+0xec>)
 8002902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002906:	6413      	str	r3, [r2, #64]	@ 0x40
 8002908:	4b14      	ldr	r3, [pc, #80]	@ (800295c <HAL_UART_MspInit+0xec>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	4b10      	ldr	r3, [pc, #64]	@ (800295c <HAL_UART_MspInit+0xec>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291c:	4a0f      	ldr	r2, [pc, #60]	@ (800295c <HAL_UART_MspInit+0xec>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6313      	str	r3, [r2, #48]	@ 0x30
 8002924:	4b0d      	ldr	r3, [pc, #52]	@ (800295c <HAL_UART_MspInit+0xec>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002930:	230c      	movs	r3, #12
 8002932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002934:	2302      	movs	r3, #2
 8002936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293c:	2303      	movs	r3, #3
 800293e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002940:	2307      	movs	r3, #7
 8002942:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002944:	f107 031c 	add.w	r3, r7, #28
 8002948:	4619      	mov	r1, r3
 800294a:	4805      	ldr	r0, [pc, #20]	@ (8002960 <HAL_UART_MspInit+0xf0>)
 800294c:	f000 fed8 	bl	8003700 <HAL_GPIO_Init>
}
 8002950:	bf00      	nop
 8002952:	3730      	adds	r7, #48	@ 0x30
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40011000 	.word	0x40011000
 800295c:	40023800 	.word	0x40023800
 8002960:	40020000 	.word	0x40020000
 8002964:	40004400 	.word	0x40004400

08002968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800296c:	f7ff ff1a 	bl	80027a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002970:	480c      	ldr	r0, [pc, #48]	@ (80029a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002972:	490d      	ldr	r1, [pc, #52]	@ (80029a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002974:	4a0d      	ldr	r2, [pc, #52]	@ (80029ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002978:	e002      	b.n	8002980 <LoopCopyDataInit>

0800297a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800297c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297e:	3304      	adds	r3, #4

08002980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002984:	d3f9      	bcc.n	800297a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002986:	4a0a      	ldr	r2, [pc, #40]	@ (80029b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002988:	4c0a      	ldr	r4, [pc, #40]	@ (80029b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800298c:	e001      	b.n	8002992 <LoopFillZerobss>

0800298e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002990:	3204      	adds	r2, #4

08002992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002994:	d3fb      	bcc.n	800298e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002996:	f004 fcab 	bl	80072f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800299a:	f7ff fbeb 	bl	8002174 <main>
  bx  lr    
 800299e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80029ac:	08007878 	.word	0x08007878
  ldr r2, =_sbss
 80029b0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80029b4:	20004530 	.word	0x20004530

080029b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029b8:	e7fe      	b.n	80029b8 <ADC_IRQHandler>
	...

080029bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c0:	4b0e      	ldr	r3, [pc, #56]	@ (80029fc <HAL_Init+0x40>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0d      	ldr	r2, [pc, #52]	@ (80029fc <HAL_Init+0x40>)
 80029c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029cc:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <HAL_Init+0x40>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0a      	ldr	r2, [pc, #40]	@ (80029fc <HAL_Init+0x40>)
 80029d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d8:	4b08      	ldr	r3, [pc, #32]	@ (80029fc <HAL_Init+0x40>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a07      	ldr	r2, [pc, #28]	@ (80029fc <HAL_Init+0x40>)
 80029de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e4:	2003      	movs	r0, #3
 80029e6:	f000 fb4a 	bl	800307e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ea:	200f      	movs	r0, #15
 80029ec:	f7ff fe2e 	bl	800264c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f0:	f7ff fe00 	bl	80025f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023c00 	.word	0x40023c00

08002a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a04:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_IncTick+0x20>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <HAL_IncTick+0x24>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4413      	add	r3, r2
 8002a10:	4a04      	ldr	r2, [pc, #16]	@ (8002a24 <HAL_IncTick+0x24>)
 8002a12:	6013      	str	r3, [r2, #0]
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20000008 	.word	0x20000008
 8002a24:	200006a0 	.word	0x200006a0

08002a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	@ (8002a3c <HAL_GetTick+0x14>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	200006a0 	.word	0x200006a0

08002a40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e033      	b.n	8002abe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff f80a 	bl	8001a78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	f003 0310 	and.w	r3, r3, #16
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d118      	bne.n	8002ab0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a86:	f023 0302 	bic.w	r3, r3, #2
 8002a8a:	f043 0202 	orr.w	r2, r3, #2
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f94a 	bl	8002d2c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	641a      	str	r2, [r3, #64]	@ 0x40
 8002aae:	e001      	b.n	8002ab4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x1c>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e113      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x244>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b09      	cmp	r3, #9
 8002af2:	d925      	bls.n	8002b40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68d9      	ldr	r1, [r3, #12]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	3b1e      	subs	r3, #30
 8002b0a:	2207      	movs	r2, #7
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43da      	mvns	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	400a      	ands	r2, r1
 8002b18:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68d9      	ldr	r1, [r3, #12]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4403      	add	r3, r0
 8002b32:	3b1e      	subs	r3, #30
 8002b34:	409a      	lsls	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	e022      	b.n	8002b86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6919      	ldr	r1, [r3, #16]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4613      	mov	r3, r2
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4413      	add	r3, r2
 8002b54:	2207      	movs	r2, #7
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	400a      	ands	r2, r1
 8002b62:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6919      	ldr	r1, [r3, #16]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	4618      	mov	r0, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4403      	add	r3, r0
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d824      	bhi.n	8002bd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3b05      	subs	r3, #5
 8002ba0:	221f      	movs	r2, #31
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	400a      	ands	r2, r1
 8002bae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3b05      	subs	r3, #5
 8002bca:	fa00 f203 	lsl.w	r2, r0, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bd6:	e04c      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b0c      	cmp	r3, #12
 8002bde:	d824      	bhi.n	8002c2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	3b23      	subs	r3, #35	@ 0x23
 8002bf2:	221f      	movs	r2, #31
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43da      	mvns	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	400a      	ands	r2, r1
 8002c00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4618      	mov	r0, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	3b23      	subs	r3, #35	@ 0x23
 8002c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c28:	e023      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	3b41      	subs	r3, #65	@ 0x41
 8002c3c:	221f      	movs	r2, #31
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	400a      	ands	r2, r1
 8002c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	4618      	mov	r0, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	3b41      	subs	r3, #65	@ 0x41
 8002c66:	fa00 f203 	lsl.w	r2, r0, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c72:	4b29      	ldr	r3, [pc, #164]	@ (8002d18 <HAL_ADC_ConfigChannel+0x250>)
 8002c74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a28      	ldr	r2, [pc, #160]	@ (8002d1c <HAL_ADC_ConfigChannel+0x254>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d10f      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x1d8>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b12      	cmp	r3, #18
 8002c86:	d10b      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d1c <HAL_ADC_ConfigChannel+0x254>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d12b      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x23a>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1c      	ldr	r2, [pc, #112]	@ (8002d20 <HAL_ADC_ConfigChannel+0x258>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <HAL_ADC_ConfigChannel+0x1f4>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b11      	cmp	r3, #17
 8002cba:	d122      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a11      	ldr	r2, [pc, #68]	@ (8002d20 <HAL_ADC_ConfigChannel+0x258>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d111      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cde:	4b11      	ldr	r3, [pc, #68]	@ (8002d24 <HAL_ADC_ConfigChannel+0x25c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a11      	ldr	r2, [pc, #68]	@ (8002d28 <HAL_ADC_ConfigChannel+0x260>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	0c9a      	lsrs	r2, r3, #18
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002cf4:	e002      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f9      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	40012300 	.word	0x40012300
 8002d1c:	40012000 	.word	0x40012000
 8002d20:	10000012 	.word	0x10000012
 8002d24:	20000000 	.word	0x20000000
 8002d28:	431bde83 	.word	0x431bde83

08002d2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d34:	4b79      	ldr	r3, [pc, #484]	@ (8002f1c <ADC_Init+0x1f0>)
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6859      	ldr	r1, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	021a      	lsls	r2, r3, #8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002da6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6899      	ldr	r1, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbe:	4a58      	ldr	r2, [pc, #352]	@ (8002f20 <ADC_Init+0x1f4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d022      	beq.n	8002e0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002dd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6899      	ldr	r1, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002df4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	e00f      	b.n	8002e2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e28:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0202 	bic.w	r2, r2, #2
 8002e38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6899      	ldr	r1, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7e1b      	ldrb	r3, [r3, #24]
 8002e44:	005a      	lsls	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01b      	beq.n	8002e90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e66:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	3b01      	subs	r3, #1
 8002e84:	035a      	lsls	r2, r3, #13
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	e007      	b.n	8002ea0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e9e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002eae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	051a      	lsls	r2, r3, #20
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6899      	ldr	r1, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ee2:	025a      	lsls	r2, r3, #9
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6899      	ldr	r1, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	029a      	lsls	r2, r3, #10
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]
}
 8002f10:	bf00      	nop
 8002f12:	3714      	adds	r7, #20
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	40012300 	.word	0x40012300
 8002f20:	0f000001 	.word	0x0f000001

08002f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f34:	4b0c      	ldr	r3, [pc, #48]	@ (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f40:	4013      	ands	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f56:	4a04      	ldr	r2, [pc, #16]	@ (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	60d3      	str	r3, [r2, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f70:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <__NVIC_GetPriorityGrouping+0x18>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	f003 0307 	and.w	r3, r3, #7
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	db0b      	blt.n	8002fb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	f003 021f 	and.w	r2, r3, #31
 8002fa0:	4907      	ldr	r1, [pc, #28]	@ (8002fc0 <__NVIC_EnableIRQ+0x38>)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	2001      	movs	r0, #1
 8002faa:	fa00 f202 	lsl.w	r2, r0, r2
 8002fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	e000e100 	.word	0xe000e100

08002fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	db0a      	blt.n	8002fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	490c      	ldr	r1, [pc, #48]	@ (8003010 <__NVIC_SetPriority+0x4c>)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	0112      	lsls	r2, r2, #4
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fec:	e00a      	b.n	8003004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4908      	ldr	r1, [pc, #32]	@ (8003014 <__NVIC_SetPriority+0x50>)
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	3b04      	subs	r3, #4
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	440b      	add	r3, r1
 8003002:	761a      	strb	r2, [r3, #24]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000e100 	.word	0xe000e100
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	@ 0x24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f1c3 0307 	rsb	r3, r3, #7
 8003032:	2b04      	cmp	r3, #4
 8003034:	bf28      	it	cs
 8003036:	2304      	movcs	r3, #4
 8003038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3304      	adds	r3, #4
 800303e:	2b06      	cmp	r3, #6
 8003040:	d902      	bls.n	8003048 <NVIC_EncodePriority+0x30>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3b03      	subs	r3, #3
 8003046:	e000      	b.n	800304a <NVIC_EncodePriority+0x32>
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	f04f 32ff 	mov.w	r2, #4294967295
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	401a      	ands	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003060:	f04f 31ff 	mov.w	r1, #4294967295
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	43d9      	mvns	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	4313      	orrs	r3, r2
         );
}
 8003072:	4618      	mov	r0, r3
 8003074:	3724      	adds	r7, #36	@ 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff ff4c 	bl	8002f24 <__NVIC_SetPriorityGrouping>
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a6:	f7ff ff61 	bl	8002f6c <__NVIC_GetPriorityGrouping>
 80030aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	6978      	ldr	r0, [r7, #20]
 80030b2:	f7ff ffb1 	bl	8003018 <NVIC_EncodePriority>
 80030b6:	4602      	mov	r2, r0
 80030b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff ff80 	bl	8002fc4 <__NVIC_SetPriority>
}
 80030c4:	bf00      	nop
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ff54 	bl	8002f88 <__NVIC_EnableIRQ>
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030f4:	f7ff fc98 	bl	8002a28 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e099      	b.n	8003238 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003124:	e00f      	b.n	8003146 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003126:	f7ff fc7f 	bl	8002a28 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b05      	cmp	r3, #5
 8003132:	d908      	bls.n	8003146 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2203      	movs	r2, #3
 800313e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e078      	b.n	8003238 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e8      	bne.n	8003126 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4b38      	ldr	r3, [pc, #224]	@ (8003240 <HAL_DMA_Init+0x158>)
 8003160:	4013      	ands	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003172:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800318a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	2b04      	cmp	r3, #4
 800319e:	d107      	bne.n	80031b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a8:	4313      	orrs	r3, r2
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0307 	bic.w	r3, r3, #7
 80031c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d117      	bne.n	800320a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00e      	beq.n	800320a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fa0b 	bl	8003608 <DMA_CheckFifoParam>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2240      	movs	r2, #64	@ 0x40
 80031fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003206:	2301      	movs	r3, #1
 8003208:	e016      	b.n	8003238 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f9c2 	bl	800359c <DMA_CalcBaseAndBitshift>
 8003218:	4603      	mov	r3, r0
 800321a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	223f      	movs	r2, #63	@ 0x3f
 8003222:	409a      	lsls	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	f010803f 	.word	0xf010803f

08003244 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d004      	beq.n	8003262 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2280      	movs	r2, #128	@ 0x80
 800325c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e00c      	b.n	800327c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2205      	movs	r2, #5
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003294:	4b8e      	ldr	r3, [pc, #568]	@ (80034d0 <HAL_DMA_IRQHandler+0x248>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a8e      	ldr	r2, [pc, #568]	@ (80034d4 <HAL_DMA_IRQHandler+0x24c>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	0a9b      	lsrs	r3, r3, #10
 80032a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b2:	2208      	movs	r2, #8
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01a      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d013      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0204 	bic.w	r2, r2, #4
 80032da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e0:	2208      	movs	r2, #8
 80032e2:	409a      	lsls	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f8:	2201      	movs	r2, #1
 80032fa:	409a      	lsls	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d012      	beq.n	800332a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003316:	2201      	movs	r2, #1
 8003318:	409a      	lsls	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003322:	f043 0202 	orr.w	r2, r3, #2
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332e:	2204      	movs	r2, #4
 8003330:	409a      	lsls	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4013      	ands	r3, r2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d012      	beq.n	8003360 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334c:	2204      	movs	r2, #4
 800334e:	409a      	lsls	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003358:	f043 0204 	orr.w	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003364:	2210      	movs	r2, #16
 8003366:	409a      	lsls	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d043      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d03c      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003382:	2210      	movs	r2, #16
 8003384:	409a      	lsls	r2, r3
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d018      	beq.n	80033ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d108      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d024      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	4798      	blx	r3
 80033b6:	e01f      	b.n	80033f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01b      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
 80033c8:	e016      	b.n	80033f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d107      	bne.n	80033e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0208 	bic.w	r2, r2, #8
 80033e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fc:	2220      	movs	r2, #32
 80033fe:	409a      	lsls	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 808f 	beq.w	8003528 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8087 	beq.w	8003528 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341e:	2220      	movs	r2, #32
 8003420:	409a      	lsls	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b05      	cmp	r3, #5
 8003430:	d136      	bne.n	80034a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0216 	bic.w	r2, r2, #22
 8003440:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695a      	ldr	r2, [r3, #20]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003450:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <HAL_DMA_IRQHandler+0x1da>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0208 	bic.w	r2, r2, #8
 8003470:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003476:	223f      	movs	r2, #63	@ 0x3f
 8003478:	409a      	lsls	r2, r3
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003492:	2b00      	cmp	r3, #0
 8003494:	d07e      	beq.n	8003594 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
        }
        return;
 800349e:	e079      	b.n	8003594 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d01d      	beq.n	80034ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10d      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d031      	beq.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4798      	blx	r3
 80034cc:	e02c      	b.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
 80034ce:	bf00      	nop
 80034d0:	20000000 	.word	0x20000000
 80034d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d023      	beq.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
 80034e8:	e01e      	b.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10f      	bne.n	8003518 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0210 	bic.w	r2, r2, #16
 8003506:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352c:	2b00      	cmp	r3, #0
 800352e:	d032      	beq.n	8003596 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d022      	beq.n	8003582 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2205      	movs	r2, #5
 8003540:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0201 	bic.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	3301      	adds	r3, #1
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	429a      	cmp	r2, r3
 800355e:	d307      	bcc.n	8003570 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f2      	bne.n	8003554 <HAL_DMA_IRQHandler+0x2cc>
 800356e:	e000      	b.n	8003572 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003570:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
 8003592:	e000      	b.n	8003596 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003594:	bf00      	nop
    }
  }
}
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	3b10      	subs	r3, #16
 80035ac:	4a14      	ldr	r2, [pc, #80]	@ (8003600 <DMA_CalcBaseAndBitshift+0x64>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035b6:	4a13      	ldr	r2, [pc, #76]	@ (8003604 <DMA_CalcBaseAndBitshift+0x68>)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d909      	bls.n	80035de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035d2:	f023 0303 	bic.w	r3, r3, #3
 80035d6:	1d1a      	adds	r2, r3, #4
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	659a      	str	r2, [r3, #88]	@ 0x58
 80035dc:	e007      	b.n	80035ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035e6:	f023 0303 	bic.w	r3, r3, #3
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	aaaaaaab 	.word	0xaaaaaaab
 8003604:	0800785c 	.word	0x0800785c

08003608 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003618:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11f      	bne.n	8003662 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b03      	cmp	r3, #3
 8003626:	d856      	bhi.n	80036d6 <DMA_CheckFifoParam+0xce>
 8003628:	a201      	add	r2, pc, #4	@ (adr r2, 8003630 <DMA_CheckFifoParam+0x28>)
 800362a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362e:	bf00      	nop
 8003630:	08003641 	.word	0x08003641
 8003634:	08003653 	.word	0x08003653
 8003638:	08003641 	.word	0x08003641
 800363c:	080036d7 	.word	0x080036d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d046      	beq.n	80036da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003650:	e043      	b.n	80036da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003656:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800365a:	d140      	bne.n	80036de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003660:	e03d      	b.n	80036de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800366a:	d121      	bne.n	80036b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b03      	cmp	r3, #3
 8003670:	d837      	bhi.n	80036e2 <DMA_CheckFifoParam+0xda>
 8003672:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <DMA_CheckFifoParam+0x70>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	08003689 	.word	0x08003689
 800367c:	0800368f 	.word	0x0800368f
 8003680:	08003689 	.word	0x08003689
 8003684:	080036a1 	.word	0x080036a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
      break;
 800368c:	e030      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003692:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d025      	beq.n	80036e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800369e:	e022      	b.n	80036e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036a8:	d11f      	bne.n	80036ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036ae:	e01c      	b.n	80036ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d903      	bls.n	80036be <DMA_CheckFifoParam+0xb6>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d003      	beq.n	80036c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036bc:	e018      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
      break;
 80036c2:	e015      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00e      	beq.n	80036ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
      break;
 80036d4:	e00b      	b.n	80036ee <DMA_CheckFifoParam+0xe6>
      break;
 80036d6:	bf00      	nop
 80036d8:	e00a      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      break;
 80036da:	bf00      	nop
 80036dc:	e008      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      break;
 80036de:	bf00      	nop
 80036e0:	e006      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      break;
 80036e2:	bf00      	nop
 80036e4:	e004      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      break;
 80036e6:	bf00      	nop
 80036e8:	e002      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ee:	bf00      	nop
    }
  } 
  
  return status; 
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop

08003700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003700:	b480      	push	{r7}
 8003702:	b089      	sub	sp, #36	@ 0x24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	e159      	b.n	80039d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800371c:	2201      	movs	r2, #1
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	429a      	cmp	r2, r3
 8003736:	f040 8148 	bne.w	80039ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d005      	beq.n	8003752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800374e:	2b02      	cmp	r3, #2
 8003750:	d130      	bne.n	80037b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	2203      	movs	r2, #3
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003788:	2201      	movs	r2, #1
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 0201 	and.w	r2, r3, #1
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d017      	beq.n	80037f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	2203      	movs	r2, #3
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d123      	bne.n	8003844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	08da      	lsrs	r2, r3, #3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3208      	adds	r2, #8
 8003804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	220f      	movs	r2, #15
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	08da      	lsrs	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3208      	adds	r2, #8
 800383e:	69b9      	ldr	r1, [r7, #24]
 8003840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	2203      	movs	r2, #3
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0203 	and.w	r2, r3, #3
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80a2 	beq.w	80039ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	4b57      	ldr	r3, [pc, #348]	@ (80039e8 <HAL_GPIO_Init+0x2e8>)
 800388c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388e:	4a56      	ldr	r2, [pc, #344]	@ (80039e8 <HAL_GPIO_Init+0x2e8>)
 8003890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003894:	6453      	str	r3, [r2, #68]	@ 0x44
 8003896:	4b54      	ldr	r3, [pc, #336]	@ (80039e8 <HAL_GPIO_Init+0x2e8>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038a2:	4a52      	ldr	r2, [pc, #328]	@ (80039ec <HAL_GPIO_Init+0x2ec>)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	089b      	lsrs	r3, r3, #2
 80038a8:	3302      	adds	r3, #2
 80038aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	220f      	movs	r2, #15
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a49      	ldr	r2, [pc, #292]	@ (80039f0 <HAL_GPIO_Init+0x2f0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d019      	beq.n	8003902 <HAL_GPIO_Init+0x202>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a48      	ldr	r2, [pc, #288]	@ (80039f4 <HAL_GPIO_Init+0x2f4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_GPIO_Init+0x1fe>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a47      	ldr	r2, [pc, #284]	@ (80039f8 <HAL_GPIO_Init+0x2f8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00d      	beq.n	80038fa <HAL_GPIO_Init+0x1fa>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a46      	ldr	r2, [pc, #280]	@ (80039fc <HAL_GPIO_Init+0x2fc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <HAL_GPIO_Init+0x1f6>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a45      	ldr	r2, [pc, #276]	@ (8003a00 <HAL_GPIO_Init+0x300>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <HAL_GPIO_Init+0x1f2>
 80038ee:	2304      	movs	r3, #4
 80038f0:	e008      	b.n	8003904 <HAL_GPIO_Init+0x204>
 80038f2:	2307      	movs	r3, #7
 80038f4:	e006      	b.n	8003904 <HAL_GPIO_Init+0x204>
 80038f6:	2303      	movs	r3, #3
 80038f8:	e004      	b.n	8003904 <HAL_GPIO_Init+0x204>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e002      	b.n	8003904 <HAL_GPIO_Init+0x204>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_GPIO_Init+0x204>
 8003902:	2300      	movs	r3, #0
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	f002 0203 	and.w	r2, r2, #3
 800390a:	0092      	lsls	r2, r2, #2
 800390c:	4093      	lsls	r3, r2
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003914:	4935      	ldr	r1, [pc, #212]	@ (80039ec <HAL_GPIO_Init+0x2ec>)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	089b      	lsrs	r3, r3, #2
 800391a:	3302      	adds	r3, #2
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003922:	4b38      	ldr	r3, [pc, #224]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003946:	4a2f      	ldr	r2, [pc, #188]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800394c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003970:	4a24      	ldr	r2, [pc, #144]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003976:	4b23      	ldr	r3, [pc, #140]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800399a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039a0:	4b18      	ldr	r3, [pc, #96]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3301      	adds	r3, #1
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b0f      	cmp	r3, #15
 80039d4:	f67f aea2 	bls.w	800371c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	3724      	adds	r7, #36	@ 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40013800 	.word	0x40013800
 80039f0:	40020000 	.word	0x40020000
 80039f4:	40020400 	.word	0x40020400
 80039f8:	40020800 	.word	0x40020800
 80039fc:	40020c00 	.word	0x40020c00
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40013c00 	.word	0x40013c00

08003a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	807b      	strh	r3, [r7, #2]
 8003a14:	4613      	mov	r3, r2
 8003a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a18:	787b      	ldrb	r3, [r7, #1]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a1e:	887a      	ldrh	r2, [r7, #2]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a24:	e003      	b.n	8003a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a26:	887b      	ldrh	r3, [r7, #2]
 8003a28:	041a      	lsls	r2, r3, #16
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	619a      	str	r2, [r3, #24]
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e12b      	b.n	8003ca6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fe faa4 	bl	8001fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2224      	movs	r2, #36	@ 0x24
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0201 	bic.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003aa0:	f000 fd40 	bl	8004524 <HAL_RCC_GetPCLK1Freq>
 8003aa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4a81      	ldr	r2, [pc, #516]	@ (8003cb0 <HAL_I2C_Init+0x274>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d807      	bhi.n	8003ac0 <HAL_I2C_Init+0x84>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4a80      	ldr	r2, [pc, #512]	@ (8003cb4 <HAL_I2C_Init+0x278>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	bf94      	ite	ls
 8003ab8:	2301      	movls	r3, #1
 8003aba:	2300      	movhi	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	e006      	b.n	8003ace <HAL_I2C_Init+0x92>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4a7d      	ldr	r2, [pc, #500]	@ (8003cb8 <HAL_I2C_Init+0x27c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	bf94      	ite	ls
 8003ac8:	2301      	movls	r3, #1
 8003aca:	2300      	movhi	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e0e7      	b.n	8003ca6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a78      	ldr	r2, [pc, #480]	@ (8003cbc <HAL_I2C_Init+0x280>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	0c9b      	lsrs	r3, r3, #18
 8003ae0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4a6a      	ldr	r2, [pc, #424]	@ (8003cb0 <HAL_I2C_Init+0x274>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d802      	bhi.n	8003b10 <HAL_I2C_Init+0xd4>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	e009      	b.n	8003b24 <HAL_I2C_Init+0xe8>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	4a69      	ldr	r2, [pc, #420]	@ (8003cc0 <HAL_I2C_Init+0x284>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	099b      	lsrs	r3, r3, #6
 8003b22:	3301      	adds	r3, #1
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	495c      	ldr	r1, [pc, #368]	@ (8003cb0 <HAL_I2C_Init+0x274>)
 8003b40:	428b      	cmp	r3, r1
 8003b42:	d819      	bhi.n	8003b78 <HAL_I2C_Init+0x13c>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	1e59      	subs	r1, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b52:	1c59      	adds	r1, r3, #1
 8003b54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b58:	400b      	ands	r3, r1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <HAL_I2C_Init+0x138>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1e59      	subs	r1, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b72:	e051      	b.n	8003c18 <HAL_I2C_Init+0x1dc>
 8003b74:	2304      	movs	r3, #4
 8003b76:	e04f      	b.n	8003c18 <HAL_I2C_Init+0x1dc>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d111      	bne.n	8003ba4 <HAL_I2C_Init+0x168>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1e58      	subs	r0, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	440b      	add	r3, r1
 8003b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b92:	3301      	adds	r3, #1
 8003b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf0c      	ite	eq
 8003b9c:	2301      	moveq	r3, #1
 8003b9e:	2300      	movne	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e012      	b.n	8003bca <HAL_I2C_Init+0x18e>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1e58      	subs	r0, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	0099      	lsls	r1, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_I2C_Init+0x196>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e022      	b.n	8003c18 <HAL_I2C_Init+0x1dc>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10e      	bne.n	8003bf8 <HAL_I2C_Init+0x1bc>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1e58      	subs	r0, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6859      	ldr	r1, [r3, #4]
 8003be2:	460b      	mov	r3, r1
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	440b      	add	r3, r1
 8003be8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bec:	3301      	adds	r3, #1
 8003bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bf6:	e00f      	b.n	8003c18 <HAL_I2C_Init+0x1dc>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1e58      	subs	r0, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	0099      	lsls	r1, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	6809      	ldr	r1, [r1, #0]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69da      	ldr	r2, [r3, #28]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6911      	ldr	r1, [r2, #16]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68d2      	ldr	r2, [r2, #12]
 8003c52:	4311      	orrs	r1, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	000186a0 	.word	0x000186a0
 8003cb4:	001e847f 	.word	0x001e847f
 8003cb8:	003d08ff 	.word	0x003d08ff
 8003cbc:	431bde83 	.word	0x431bde83
 8003cc0:	10624dd3 	.word	0x10624dd3

08003cc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e267      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d075      	beq.n	8003dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ce2:	4b88      	ldr	r3, [pc, #544]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d00c      	beq.n	8003d08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cee:	4b85      	ldr	r3, [pc, #532]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d112      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cfa:	4b82      	ldr	r3, [pc, #520]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d06:	d10b      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d08:	4b7e      	ldr	r3, [pc, #504]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d05b      	beq.n	8003dcc <HAL_RCC_OscConfig+0x108>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d157      	bne.n	8003dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e242      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d28:	d106      	bne.n	8003d38 <HAL_RCC_OscConfig+0x74>
 8003d2a:	4b76      	ldr	r3, [pc, #472]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a75      	ldr	r2, [pc, #468]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e01d      	b.n	8003d74 <HAL_RCC_OscConfig+0xb0>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x98>
 8003d42:	4b70      	ldr	r3, [pc, #448]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a6f      	ldr	r2, [pc, #444]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a6c      	ldr	r2, [pc, #432]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCC_OscConfig+0xb0>
 8003d5c:	4b69      	ldr	r3, [pc, #420]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a68      	ldr	r2, [pc, #416]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	4b66      	ldr	r3, [pc, #408]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a65      	ldr	r2, [pc, #404]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d013      	beq.n	8003da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7fe fe54 	bl	8002a28 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d84:	f7fe fe50 	bl	8002a28 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	@ 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e207      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d96:	4b5b      	ldr	r3, [pc, #364]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0xc0>
 8003da2:	e014      	b.n	8003dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fe fe40 	bl	8002a28 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dac:	f7fe fe3c 	bl	8002a28 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	@ 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e1f3      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dbe:	4b51      	ldr	r3, [pc, #324]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0xe8>
 8003dca:	e000      	b.n	8003dce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d063      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003dda:	4b4a      	ldr	r3, [pc, #296]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de6:	4b47      	ldr	r3, [pc, #284]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d11c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003df2:	4b44      	ldr	r3, [pc, #272]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d116      	bne.n	8003e2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfe:	4b41      	ldr	r3, [pc, #260]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_RCC_OscConfig+0x152>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e1c7      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e16:	4b3b      	ldr	r3, [pc, #236]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4937      	ldr	r1, [pc, #220]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2a:	e03a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d020      	beq.n	8003e76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e34:	4b34      	ldr	r3, [pc, #208]	@ (8003f08 <HAL_RCC_OscConfig+0x244>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7fe fdf5 	bl	8002a28 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e42:	f7fe fdf1 	bl	8002a28 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e1a8      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e54:	4b2b      	ldr	r3, [pc, #172]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e60:	4b28      	ldr	r3, [pc, #160]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4925      	ldr	r1, [pc, #148]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	600b      	str	r3, [r1, #0]
 8003e74:	e015      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e76:	4b24      	ldr	r3, [pc, #144]	@ (8003f08 <HAL_RCC_OscConfig+0x244>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fe fdd4 	bl	8002a28 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e84:	f7fe fdd0 	bl	8002a28 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e187      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e96:	4b1b      	ldr	r3, [pc, #108]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d036      	beq.n	8003f1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d016      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb6:	4b15      	ldr	r3, [pc, #84]	@ (8003f0c <HAL_RCC_OscConfig+0x248>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebc:	f7fe fdb4 	bl	8002a28 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec4:	f7fe fdb0 	bl	8002a28 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e167      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x200>
 8003ee2:	e01b      	b.n	8003f1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee4:	4b09      	ldr	r3, [pc, #36]	@ (8003f0c <HAL_RCC_OscConfig+0x248>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eea:	f7fe fd9d 	bl	8002a28 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef0:	e00e      	b.n	8003f10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef2:	f7fe fd99 	bl	8002a28 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d907      	bls.n	8003f10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e150      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
 8003f04:	40023800 	.word	0x40023800
 8003f08:	42470000 	.word	0x42470000
 8003f0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f10:	4b88      	ldr	r3, [pc, #544]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ea      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8097 	beq.w	8004058 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f2e:	4b81      	ldr	r3, [pc, #516]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10f      	bne.n	8003f5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	4b7d      	ldr	r3, [pc, #500]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	4a7c      	ldr	r2, [pc, #496]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f4a:	4b7a      	ldr	r3, [pc, #488]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f56:	2301      	movs	r3, #1
 8003f58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5a:	4b77      	ldr	r3, [pc, #476]	@ (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d118      	bne.n	8003f98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f66:	4b74      	ldr	r3, [pc, #464]	@ (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a73      	ldr	r2, [pc, #460]	@ (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f72:	f7fe fd59 	bl	8002a28 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7a:	f7fe fd55 	bl	8002a28 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e10c      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d106      	bne.n	8003fae <HAL_RCC_OscConfig+0x2ea>
 8003fa0:	4b64      	ldr	r3, [pc, #400]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa4:	4a63      	ldr	r2, [pc, #396]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fac:	e01c      	b.n	8003fe8 <HAL_RCC_OscConfig+0x324>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b05      	cmp	r3, #5
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x30c>
 8003fb6:	4b5f      	ldr	r3, [pc, #380]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fba:	4a5e      	ldr	r2, [pc, #376]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fbc:	f043 0304 	orr.w	r3, r3, #4
 8003fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc2:	4b5c      	ldr	r3, [pc, #368]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc6:	4a5b      	ldr	r2, [pc, #364]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fce:	e00b      	b.n	8003fe8 <HAL_RCC_OscConfig+0x324>
 8003fd0:	4b58      	ldr	r3, [pc, #352]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd4:	4a57      	ldr	r2, [pc, #348]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fdc:	4b55      	ldr	r3, [pc, #340]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe0:	4a54      	ldr	r2, [pc, #336]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	f023 0304 	bic.w	r3, r3, #4
 8003fe6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d015      	beq.n	800401c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7fe fd1a 	bl	8002a28 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f7fe fd16 	bl	8002a28 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e0cb      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400e:	4b49      	ldr	r3, [pc, #292]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0ee      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x334>
 800401a:	e014      	b.n	8004046 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401c:	f7fe fd04 	bl	8002a28 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004022:	e00a      	b.n	800403a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004024:	f7fe fd00 	bl	8002a28 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e0b5      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403a:	4b3e      	ldr	r3, [pc, #248]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1ee      	bne.n	8004024 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004046:	7dfb      	ldrb	r3, [r7, #23]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d105      	bne.n	8004058 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800404c:	4b39      	ldr	r3, [pc, #228]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	4a38      	ldr	r2, [pc, #224]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8004052:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004056:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 80a1 	beq.w	80041a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004062:	4b34      	ldr	r3, [pc, #208]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b08      	cmp	r3, #8
 800406c:	d05c      	beq.n	8004128 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d141      	bne.n	80040fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004076:	4b31      	ldr	r3, [pc, #196]	@ (800413c <HAL_RCC_OscConfig+0x478>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fe fcd4 	bl	8002a28 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fe fcd0 	bl	8002a28 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e087      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004096:	4b27      	ldr	r3, [pc, #156]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	019b      	lsls	r3, r3, #6
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	3b01      	subs	r3, #1
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	061b      	lsls	r3, r3, #24
 80040c6:	491b      	ldr	r1, [pc, #108]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040cc:	4b1b      	ldr	r3, [pc, #108]	@ (800413c <HAL_RCC_OscConfig+0x478>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d2:	f7fe fca9 	bl	8002a28 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040da:	f7fe fca5 	bl	8002a28 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e05c      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ec:	4b11      	ldr	r3, [pc, #68]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x416>
 80040f8:	e054      	b.n	80041a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fa:	4b10      	ldr	r3, [pc, #64]	@ (800413c <HAL_RCC_OscConfig+0x478>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004100:	f7fe fc92 	bl	8002a28 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004108:	f7fe fc8e 	bl	8002a28 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e045      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411a:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <HAL_RCC_OscConfig+0x470>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x444>
 8004126:	e03d      	b.n	80041a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d107      	bne.n	8004140 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e038      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
 8004134:	40023800 	.word	0x40023800
 8004138:	40007000 	.word	0x40007000
 800413c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004140:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <HAL_RCC_OscConfig+0x4ec>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d028      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d121      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d11a      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004170:	4013      	ands	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004176:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004178:	4293      	cmp	r3, r2
 800417a:	d111      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	3b01      	subs	r3, #1
 800418a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800

080041b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0cc      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041c8:	4b68      	ldr	r3, [pc, #416]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d90c      	bls.n	80041f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b65      	ldr	r3, [pc, #404]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041de:	4b63      	ldr	r3, [pc, #396]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0b8      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d020      	beq.n	800423e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004208:	4b59      	ldr	r3, [pc, #356]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4a58      	ldr	r2, [pc, #352]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004212:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004220:	4b53      	ldr	r3, [pc, #332]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a52      	ldr	r2, [pc, #328]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800422a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422c:	4b50      	ldr	r3, [pc, #320]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	494d      	ldr	r1, [pc, #308]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d044      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	4b47      	ldr	r3, [pc, #284]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d119      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e07f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d003      	beq.n	8004272 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800426e:	2b03      	cmp	r3, #3
 8004270:	d107      	bne.n	8004282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004272:	4b3f      	ldr	r3, [pc, #252]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e06f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004282:	4b3b      	ldr	r3, [pc, #236]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e067      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004292:	4b37      	ldr	r3, [pc, #220]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f023 0203 	bic.w	r2, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4934      	ldr	r1, [pc, #208]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a4:	f7fe fbc0 	bl	8002a28 <HAL_GetTick>
 80042a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ac:	f7fe fbbc 	bl	8002a28 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e04f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 020c 	and.w	r2, r3, #12
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d1eb      	bne.n	80042ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042d4:	4b25      	ldr	r3, [pc, #148]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d20c      	bcs.n	80042fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b22      	ldr	r3, [pc, #136]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b20      	ldr	r3, [pc, #128]	@ (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e032      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004308:	4b19      	ldr	r3, [pc, #100]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4916      	ldr	r1, [pc, #88]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004326:	4b12      	ldr	r3, [pc, #72]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	490e      	ldr	r1, [pc, #56]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800433a:	f000 f821 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 800433e:	4602      	mov	r2, r0
 8004340:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	490a      	ldr	r1, [pc, #40]	@ (8004374 <HAL_RCC_ClockConfig+0x1c0>)
 800434c:	5ccb      	ldrb	r3, [r1, r3]
 800434e:	fa22 f303 	lsr.w	r3, r2, r3
 8004352:	4a09      	ldr	r2, [pc, #36]	@ (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 8004354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004356:	4b09      	ldr	r3, [pc, #36]	@ (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7fe f976 	bl	800264c <HAL_InitTick>

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40023c00 	.word	0x40023c00
 8004370:	40023800 	.word	0x40023800
 8004374:	08007844 	.word	0x08007844
 8004378:	20000000 	.word	0x20000000
 800437c:	20000004 	.word	0x20000004

08004380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004384:	b090      	sub	sp, #64	@ 0x40
 8004386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004398:	4b59      	ldr	r3, [pc, #356]	@ (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d00d      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x40>
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	f200 80a1 	bhi.w	80044ec <HAL_RCC_GetSysClockFreq+0x16c>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x34>
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d003      	beq.n	80043ba <HAL_RCC_GetSysClockFreq+0x3a>
 80043b2:	e09b      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043b4:	4b53      	ldr	r3, [pc, #332]	@ (8004504 <HAL_RCC_GetSysClockFreq+0x184>)
 80043b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043b8:	e09b      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ba:	4b53      	ldr	r3, [pc, #332]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x188>)
 80043bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043be:	e098      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d028      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	099b      	lsrs	r3, r3, #6
 80043dc:	2200      	movs	r2, #0
 80043de:	623b      	str	r3, [r7, #32]
 80043e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043e8:	2100      	movs	r1, #0
 80043ea:	4b47      	ldr	r3, [pc, #284]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x188>)
 80043ec:	fb03 f201 	mul.w	r2, r3, r1
 80043f0:	2300      	movs	r3, #0
 80043f2:	fb00 f303 	mul.w	r3, r0, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	4a43      	ldr	r2, [pc, #268]	@ (8004508 <HAL_RCC_GetSysClockFreq+0x188>)
 80043fa:	fba0 1202 	umull	r1, r2, r0, r2
 80043fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004400:	460a      	mov	r2, r1
 8004402:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004406:	4413      	add	r3, r2
 8004408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800440a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800440c:	2200      	movs	r2, #0
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	61fa      	str	r2, [r7, #28]
 8004412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004416:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800441a:	f7fc fbed 	bl	8000bf8 <__aeabi_uldivmod>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4613      	mov	r3, r2
 8004424:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004426:	e053      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004428:	4b35      	ldr	r3, [pc, #212]	@ (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	099b      	lsrs	r3, r3, #6
 800442e:	2200      	movs	r2, #0
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	617a      	str	r2, [r7, #20]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800443a:	f04f 0b00 	mov.w	fp, #0
 800443e:	4652      	mov	r2, sl
 8004440:	465b      	mov	r3, fp
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f04f 0100 	mov.w	r1, #0
 800444a:	0159      	lsls	r1, r3, #5
 800444c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004450:	0150      	lsls	r0, r2, #5
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	ebb2 080a 	subs.w	r8, r2, sl
 800445a:	eb63 090b 	sbc.w	r9, r3, fp
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800446a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800446e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004472:	ebb2 0408 	subs.w	r4, r2, r8
 8004476:	eb63 0509 	sbc.w	r5, r3, r9
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	00eb      	lsls	r3, r5, #3
 8004484:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004488:	00e2      	lsls	r2, r4, #3
 800448a:	4614      	mov	r4, r2
 800448c:	461d      	mov	r5, r3
 800448e:	eb14 030a 	adds.w	r3, r4, sl
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	eb45 030b 	adc.w	r3, r5, fp
 8004498:	607b      	str	r3, [r7, #4]
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044a6:	4629      	mov	r1, r5
 80044a8:	028b      	lsls	r3, r1, #10
 80044aa:	4621      	mov	r1, r4
 80044ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044b0:	4621      	mov	r1, r4
 80044b2:	028a      	lsls	r2, r1, #10
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ba:	2200      	movs	r2, #0
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	60fa      	str	r2, [r7, #12]
 80044c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044c4:	f7fc fb98 	bl	8000bf8 <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4613      	mov	r3, r2
 80044ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80044d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	3301      	adds	r3, #1
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80044e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044ea:	e002      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044ec:	4b05      	ldr	r3, [pc, #20]	@ (8004504 <HAL_RCC_GetSysClockFreq+0x184>)
 80044ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3740      	adds	r7, #64	@ 0x40
 80044f8:	46bd      	mov	sp, r7
 80044fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800
 8004504:	00f42400 	.word	0x00f42400
 8004508:	017d7840 	.word	0x017d7840

0800450c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004510:	4b03      	ldr	r3, [pc, #12]	@ (8004520 <HAL_RCC_GetHCLKFreq+0x14>)
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20000000 	.word	0x20000000

08004524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004528:	f7ff fff0 	bl	800450c <HAL_RCC_GetHCLKFreq>
 800452c:	4602      	mov	r2, r0
 800452e:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	0a9b      	lsrs	r3, r3, #10
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	4903      	ldr	r1, [pc, #12]	@ (8004548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800453a:	5ccb      	ldrb	r3, [r1, r3]
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40023800 	.word	0x40023800
 8004548:	08007854 	.word	0x08007854

0800454c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004550:	f7ff ffdc 	bl	800450c <HAL_RCC_GetHCLKFreq>
 8004554:	4602      	mov	r2, r0
 8004556:	4b05      	ldr	r3, [pc, #20]	@ (800456c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	0b5b      	lsrs	r3, r3, #13
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	4903      	ldr	r1, [pc, #12]	@ (8004570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004562:	5ccb      	ldrb	r3, [r1, r3]
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004568:	4618      	mov	r0, r3
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40023800 	.word	0x40023800
 8004570:	08007854 	.word	0x08007854

08004574 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	220f      	movs	r2, #15
 8004582:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004584:	4b12      	ldr	r3, [pc, #72]	@ (80045d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0203 	and.w	r2, r3, #3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004590:	4b0f      	ldr	r3, [pc, #60]	@ (80045d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800459c:	4b0c      	ldr	r3, [pc, #48]	@ (80045d0 <HAL_RCC_GetClockConfig+0x5c>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045a8:	4b09      	ldr	r3, [pc, #36]	@ (80045d0 <HAL_RCC_GetClockConfig+0x5c>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	08db      	lsrs	r3, r3, #3
 80045ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045b6:	4b07      	ldr	r3, [pc, #28]	@ (80045d4 <HAL_RCC_GetClockConfig+0x60>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0207 	and.w	r2, r3, #7
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	601a      	str	r2, [r3, #0]
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40023800 	.word	0x40023800
 80045d4:	40023c00 	.word	0x40023c00

080045d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e07b      	b.n	80046e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d108      	bne.n	8004604 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045fa:	d009      	beq.n	8004610 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	61da      	str	r2, [r3, #28]
 8004602:	e005      	b.n	8004610 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fd fee6 	bl	80023fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004646:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	431a      	orrs	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004694:	ea42 0103 	orr.w	r1, r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	0c1b      	lsrs	r3, r3, #16
 80046ae:	f003 0104 	and.w	r1, r3, #4
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	f003 0210 	and.w	r2, r3, #16
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b088      	sub	sp, #32
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	603b      	str	r3, [r7, #0]
 80046f6:	4613      	mov	r3, r2
 80046f8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046fa:	f7fe f995 	bl	8002a28 <HAL_GetTick>
 80046fe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	d001      	beq.n	8004714 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004710:	2302      	movs	r3, #2
 8004712:	e12a      	b.n	800496a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_SPI_Transmit+0x36>
 800471a:	88fb      	ldrh	r3, [r7, #6]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e122      	b.n	800496a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_SPI_Transmit+0x48>
 800472e:	2302      	movs	r3, #2
 8004730:	e11b      	b.n	800496a <HAL_SPI_Transmit+0x280>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2203      	movs	r2, #3
 800473e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	88fa      	ldrh	r2, [r7, #6]
 8004752:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004780:	d10f      	bne.n	80047a2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004790:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ac:	2b40      	cmp	r3, #64	@ 0x40
 80047ae:	d007      	beq.n	80047c0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047c8:	d152      	bne.n	8004870 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <HAL_SPI_Transmit+0xee>
 80047d2:	8b7b      	ldrh	r3, [r7, #26]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d145      	bne.n	8004864 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047dc:	881a      	ldrh	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e8:	1c9a      	adds	r2, r3, #2
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047fc:	e032      	b.n	8004864 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b02      	cmp	r3, #2
 800480a:	d112      	bne.n	8004832 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004810:	881a      	ldrh	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481c:	1c9a      	adds	r2, r3, #2
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004830:	e018      	b.n	8004864 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004832:	f7fe f8f9 	bl	8002a28 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d803      	bhi.n	800484a <HAL_SPI_Transmit+0x160>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	d102      	bne.n	8004850 <HAL_SPI_Transmit+0x166>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d109      	bne.n	8004864 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e082      	b.n	800496a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1c7      	bne.n	80047fe <HAL_SPI_Transmit+0x114>
 800486e:	e053      	b.n	8004918 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <HAL_SPI_Transmit+0x194>
 8004878:	8b7b      	ldrh	r3, [r7, #26]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d147      	bne.n	800490e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	7812      	ldrb	r2, [r2, #0]
 800488a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048a4:	e033      	b.n	800490e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d113      	bne.n	80048dc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	7812      	ldrb	r2, [r2, #0]
 80048c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80048da:	e018      	b.n	800490e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048dc:	f7fe f8a4 	bl	8002a28 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d803      	bhi.n	80048f4 <HAL_SPI_Transmit+0x20a>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f2:	d102      	bne.n	80048fa <HAL_SPI_Transmit+0x210>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d109      	bne.n	800490e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e02d      	b.n	800496a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1c6      	bne.n	80048a6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	6839      	ldr	r1, [r7, #0]
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fceb 	bl	80052f8 <SPI_EndRxTxTransaction>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2220      	movs	r2, #32
 800492c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10a      	bne.n	800494c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004968:	2300      	movs	r3, #0
  }
}
 800496a:	4618      	mov	r0, r3
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b088      	sub	sp, #32
 8004976:	af02      	add	r7, sp, #8
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b01      	cmp	r3, #1
 800498c:	d001      	beq.n	8004992 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800498e:	2302      	movs	r3, #2
 8004990:	e104      	b.n	8004b9c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800499a:	d112      	bne.n	80049c2 <HAL_SPI_Receive+0x50>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10e      	bne.n	80049c2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2204      	movs	r2, #4
 80049a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049ac:	88fa      	ldrh	r2, [r7, #6]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	4613      	mov	r3, r2
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f8f3 	bl	8004ba4 <HAL_SPI_TransmitReceive>
 80049be:	4603      	mov	r3, r0
 80049c0:	e0ec      	b.n	8004b9c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049c2:	f7fe f831 	bl	8002a28 <HAL_GetTick>
 80049c6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_SPI_Receive+0x62>
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0e1      	b.n	8004b9c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d101      	bne.n	80049e6 <HAL_SPI_Receive+0x74>
 80049e2:	2302      	movs	r3, #2
 80049e4:	e0da      	b.n	8004b9c <HAL_SPI_Receive+0x22a>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2204      	movs	r2, #4
 80049f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	88fa      	ldrh	r2, [r7, #6]
 8004a06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	88fa      	ldrh	r2, [r7, #6]
 8004a0c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a34:	d10f      	bne.n	8004a56 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a60:	2b40      	cmp	r3, #64	@ 0x40
 8004a62:	d007      	beq.n	8004a74 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d170      	bne.n	8004b5e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a7c:	e035      	b.n	8004aea <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d115      	bne.n	8004ab8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f103 020c 	add.w	r2, r3, #12
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a98:	7812      	ldrb	r2, [r2, #0]
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ab6:	e018      	b.n	8004aea <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ab8:	f7fd ffb6 	bl	8002a28 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d803      	bhi.n	8004ad0 <HAL_SPI_Receive+0x15e>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ace:	d102      	bne.n	8004ad6 <HAL_SPI_Receive+0x164>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e058      	b.n	8004b9c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1c4      	bne.n	8004a7e <HAL_SPI_Receive+0x10c>
 8004af4:	e038      	b.n	8004b68 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d113      	bne.n	8004b2c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0e:	b292      	uxth	r2, r2
 8004b10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b16:	1c9a      	adds	r2, r3, #2
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b2a:	e018      	b.n	8004b5e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b2c:	f7fd ff7c 	bl	8002a28 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d803      	bhi.n	8004b44 <HAL_SPI_Receive+0x1d2>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b42:	d102      	bne.n	8004b4a <HAL_SPI_Receive+0x1d8>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e01e      	b.n	8004b9c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1c6      	bne.n	8004af6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	6839      	ldr	r1, [r7, #0]
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 fb5d 	bl	800522c <SPI_EndRxTransaction>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
  }
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	@ 0x28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
 8004bb0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bb6:	f7fd ff37 	bl	8002a28 <HAL_GetTick>
 8004bba:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bc2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004bca:	887b      	ldrh	r3, [r7, #2]
 8004bcc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bce:	7ffb      	ldrb	r3, [r7, #31]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d00c      	beq.n	8004bee <HAL_SPI_TransmitReceive+0x4a>
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bda:	d106      	bne.n	8004bea <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <HAL_SPI_TransmitReceive+0x46>
 8004be4:	7ffb      	ldrb	r3, [r7, #31]
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d001      	beq.n	8004bee <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004bea:	2302      	movs	r3, #2
 8004bec:	e17f      	b.n	8004eee <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_SPI_TransmitReceive+0x5c>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_SPI_TransmitReceive+0x5c>
 8004bfa:	887b      	ldrh	r3, [r7, #2]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e174      	b.n	8004eee <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_SPI_TransmitReceive+0x6e>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e16d      	b.n	8004eee <HAL_SPI_TransmitReceive+0x34a>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d003      	beq.n	8004c2e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2205      	movs	r2, #5
 8004c2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	887a      	ldrh	r2, [r7, #2]
 8004c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	887a      	ldrh	r2, [r7, #2]
 8004c44:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	887a      	ldrh	r2, [r7, #2]
 8004c50:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	887a      	ldrh	r2, [r7, #2]
 8004c56:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c6e:	2b40      	cmp	r3, #64	@ 0x40
 8004c70:	d007      	beq.n	8004c82 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c8a:	d17e      	bne.n	8004d8a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_SPI_TransmitReceive+0xf6>
 8004c94:	8afb      	ldrh	r3, [r7, #22]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d16c      	bne.n	8004d74 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9e:	881a      	ldrh	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004caa:	1c9a      	adds	r2, r3, #2
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cbe:	e059      	b.n	8004d74 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d11b      	bne.n	8004d06 <HAL_SPI_TransmitReceive+0x162>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d016      	beq.n	8004d06 <HAL_SPI_TransmitReceive+0x162>
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d113      	bne.n	8004d06 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce2:	881a      	ldrh	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cee:	1c9a      	adds	r2, r3, #2
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d119      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x1a4>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d014      	beq.n	8004d48 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d28:	b292      	uxth	r2, r2
 8004d2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d30:	1c9a      	adds	r2, r3, #2
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d44:	2301      	movs	r3, #1
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d48:	f7fd fe6e 	bl	8002a28 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d80d      	bhi.n	8004d74 <HAL_SPI_TransmitReceive+0x1d0>
 8004d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5e:	d009      	beq.n	8004d74 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e0bc      	b.n	8004eee <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1a0      	bne.n	8004cc0 <HAL_SPI_TransmitReceive+0x11c>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d19b      	bne.n	8004cc0 <HAL_SPI_TransmitReceive+0x11c>
 8004d88:	e082      	b.n	8004e90 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_SPI_TransmitReceive+0x1f4>
 8004d92:	8afb      	ldrh	r3, [r7, #22]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d171      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	330c      	adds	r3, #12
 8004da2:	7812      	ldrb	r2, [r2, #0]
 8004da4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dbe:	e05d      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d11c      	bne.n	8004e08 <HAL_SPI_TransmitReceive+0x264>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d017      	beq.n	8004e08 <HAL_SPI_TransmitReceive+0x264>
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d114      	bne.n	8004e08 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	330c      	adds	r3, #12
 8004de8:	7812      	ldrb	r2, [r2, #0]
 8004dea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d119      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x2a6>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d014      	beq.n	8004e4a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e46:	2301      	movs	r3, #1
 8004e48:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e4a:	f7fd fded 	bl	8002a28 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d803      	bhi.n	8004e62 <HAL_SPI_TransmitReceive+0x2be>
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e60:	d102      	bne.n	8004e68 <HAL_SPI_TransmitReceive+0x2c4>
 8004e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d109      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e038      	b.n	8004eee <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d19c      	bne.n	8004dc0 <HAL_SPI_TransmitReceive+0x21c>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d197      	bne.n	8004dc0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e90:	6a3a      	ldr	r2, [r7, #32]
 8004e92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 fa2f 	bl	80052f8 <SPI_EndRxTxTransaction>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d008      	beq.n	8004eb2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e01d      	b.n	8004eee <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10a      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e000      	b.n	8004eee <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004eec:	2300      	movs	r3, #0
  }
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3728      	adds	r7, #40	@ 0x28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10e      	bne.n	8004f38 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	4798      	blx	r3
    return;
 8004f36:	e0ce      	b.n	80050d6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d009      	beq.n	8004f56 <HAL_SPI_IRQHandler+0x5e>
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d004      	beq.n	8004f56 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	4798      	blx	r3
    return;
 8004f54:	e0bf      	b.n	80050d6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <HAL_SPI_IRQHandler+0x7e>
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d105      	bne.n	8004f76 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80b0 	beq.w	80050d6 <HAL_SPI_IRQHandler+0x1de>
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80aa 	beq.w	80050d6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d023      	beq.n	8004fd4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	d011      	beq.n	8004fbc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9c:	f043 0204 	orr.w	r2, r3, #4
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	e00b      	b.n	8004fd4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	613b      	str	r3, [r7, #16]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	693b      	ldr	r3, [r7, #16]
        return;
 8004fd2:	e080      	b.n	80050d6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d014      	beq.n	8005008 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe2:	f043 0201 	orr.w	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	60fb      	str	r3, [r7, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00c      	beq.n	800502c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005016:	f043 0208 	orr.w	r2, r3, #8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800501e:	2300      	movs	r3, #0
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005030:	2b00      	cmp	r3, #0
 8005032:	d04f      	beq.n	80050d4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005042:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d104      	bne.n	8005060 <HAL_SPI_IRQHandler+0x168>
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d034      	beq.n	80050ca <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0203 	bic.w	r2, r2, #3
 800506e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d011      	beq.n	800509c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800507c:	4a17      	ldr	r2, [pc, #92]	@ (80050dc <HAL_SPI_IRQHandler+0x1e4>)
 800507e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005084:	4618      	mov	r0, r3
 8005086:	f7fe f8dd 	bl	8003244 <HAL_DMA_Abort_IT>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005094:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d016      	beq.n	80050d2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a8:	4a0c      	ldr	r2, [pc, #48]	@ (80050dc <HAL_SPI_IRQHandler+0x1e4>)
 80050aa:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fe f8c7 	bl	8003244 <HAL_DMA_Abort_IT>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80050c8:	e003      	b.n	80050d2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f808 	bl	80050e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80050d0:	e000      	b.n	80050d4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80050d2:	bf00      	nop
    return;
 80050d4:	bf00      	nop
  }
}
 80050d6:	3720      	adds	r7, #32
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	080050f5 	.word	0x080050f5

080050e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005100:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff ffe6 	bl	80050e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005114:	bf00      	nop
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800512c:	f7fd fc7c 	bl	8002a28 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	4413      	add	r3, r2
 800513a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800513c:	f7fd fc74 	bl	8002a28 <HAL_GetTick>
 8005140:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005142:	4b39      	ldr	r3, [pc, #228]	@ (8005228 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	015b      	lsls	r3, r3, #5
 8005148:	0d1b      	lsrs	r3, r3, #20
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	fb02 f303 	mul.w	r3, r2, r3
 8005150:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005152:	e054      	b.n	80051fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515a:	d050      	beq.n	80051fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800515c:	f7fd fc64 	bl	8002a28 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	429a      	cmp	r2, r3
 800516a:	d902      	bls.n	8005172 <SPI_WaitFlagStateUntilTimeout+0x56>
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d13d      	bne.n	80051ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005180:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800518a:	d111      	bne.n	80051b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005194:	d004      	beq.n	80051a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800519e:	d107      	bne.n	80051b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051b8:	d10f      	bne.n	80051da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e017      	b.n	800521e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4013      	ands	r3, r2
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	429a      	cmp	r2, r3
 800520c:	bf0c      	ite	eq
 800520e:	2301      	moveq	r3, #1
 8005210:	2300      	movne	r3, #0
 8005212:	b2db      	uxtb	r3, r3
 8005214:	461a      	mov	r2, r3
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	429a      	cmp	r2, r3
 800521a:	d19b      	bne.n	8005154 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	20000000 	.word	0x20000000

0800522c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005240:	d111      	bne.n	8005266 <SPI_EndRxTransaction+0x3a>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800524a:	d004      	beq.n	8005256 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005254:	d107      	bne.n	8005266 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005264:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800526e:	d12a      	bne.n	80052c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005278:	d012      	beq.n	80052a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2200      	movs	r2, #0
 8005282:	2180      	movs	r1, #128	@ 0x80
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7ff ff49 	bl	800511c <SPI_WaitFlagStateUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d02d      	beq.n	80052ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005294:	f043 0220 	orr.w	r2, r3, #32
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e026      	b.n	80052ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2200      	movs	r2, #0
 80052a8:	2101      	movs	r1, #1
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f7ff ff36 	bl	800511c <SPI_WaitFlagStateUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d01a      	beq.n	80052ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ba:	f043 0220 	orr.w	r2, r3, #32
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e013      	b.n	80052ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2200      	movs	r2, #0
 80052ce:	2101      	movs	r1, #1
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f7ff ff23 	bl	800511c <SPI_WaitFlagStateUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d007      	beq.n	80052ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e0:	f043 0220 	orr.w	r2, r3, #32
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e000      	b.n	80052ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2201      	movs	r2, #1
 800530c:	2102      	movs	r1, #2
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff ff04 	bl	800511c <SPI_WaitFlagStateUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d007      	beq.n	800532a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800531e:	f043 0220 	orr.w	r2, r3, #32
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e032      	b.n	8005390 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800532a:	4b1b      	ldr	r3, [pc, #108]	@ (8005398 <SPI_EndRxTxTransaction+0xa0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1b      	ldr	r2, [pc, #108]	@ (800539c <SPI_EndRxTxTransaction+0xa4>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	0d5b      	lsrs	r3, r3, #21
 8005336:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800533a:	fb02 f303 	mul.w	r3, r2, r3
 800533e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005348:	d112      	bne.n	8005370 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2200      	movs	r2, #0
 8005352:	2180      	movs	r1, #128	@ 0x80
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f7ff fee1 	bl	800511c <SPI_WaitFlagStateUntilTimeout>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d016      	beq.n	800538e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005364:	f043 0220 	orr.w	r2, r3, #32
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e00f      	b.n	8005390 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	3b01      	subs	r3, #1
 800537a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005386:	2b80      	cmp	r3, #128	@ 0x80
 8005388:	d0f2      	beq.n	8005370 <SPI_EndRxTxTransaction+0x78>
 800538a:	e000      	b.n	800538e <SPI_EndRxTxTransaction+0x96>
        break;
 800538c:	bf00      	nop
  }

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20000000 	.word	0x20000000
 800539c:	165e9f81 	.word	0x165e9f81

080053a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e041      	b.n	8005436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f839 	bl	800543e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3304      	adds	r3, #4
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f000 f9b2 	bl	8005748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b01      	cmp	r3, #1
 8005466:	d001      	beq.n	800546c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e044      	b.n	80054f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1e      	ldr	r2, [pc, #120]	@ (8005504 <HAL_TIM_Base_Start_IT+0xb0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d018      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x6c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005496:	d013      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x6c>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1a      	ldr	r2, [pc, #104]	@ (8005508 <HAL_TIM_Base_Start_IT+0xb4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00e      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x6c>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a19      	ldr	r2, [pc, #100]	@ (800550c <HAL_TIM_Base_Start_IT+0xb8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d009      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x6c>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a17      	ldr	r2, [pc, #92]	@ (8005510 <HAL_TIM_Base_Start_IT+0xbc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d004      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0x6c>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a16      	ldr	r2, [pc, #88]	@ (8005514 <HAL_TIM_Base_Start_IT+0xc0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d111      	bne.n	80054e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b06      	cmp	r3, #6
 80054d0:	d010      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0201 	orr.w	r2, r2, #1
 80054e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e2:	e007      	b.n	80054f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40010000 	.word	0x40010000
 8005508:	40000400 	.word	0x40000400
 800550c:	40000800 	.word	0x40000800
 8005510:	40000c00 	.word	0x40000c00
 8005514:	40014000 	.word	0x40014000

08005518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d020      	beq.n	800557c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01b      	beq.n	800557c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0202 	mvn.w	r2, #2
 800554c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f8d2 	bl	800570c <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f8c4 	bl	80056f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f8d5 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b00      	cmp	r3, #0
 8005584:	d020      	beq.n	80055c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01b      	beq.n	80055c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0204 	mvn.w	r2, #4
 8005598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2202      	movs	r2, #2
 800559e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f8ac 	bl	800570c <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f89e 	bl	80056f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f8af 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 0308 	and.w	r3, r3, #8
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d020      	beq.n	8005614 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01b      	beq.n	8005614 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0208 	mvn.w	r2, #8
 80055e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2204      	movs	r2, #4
 80055ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f886 	bl	800570c <HAL_TIM_IC_CaptureCallback>
 8005600:	e005      	b.n	800560e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f878 	bl	80056f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f889 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f003 0310 	and.w	r3, r3, #16
 800561a:	2b00      	cmp	r3, #0
 800561c:	d020      	beq.n	8005660 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	2b00      	cmp	r3, #0
 8005626:	d01b      	beq.n	8005660 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0210 	mvn.w	r2, #16
 8005630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2208      	movs	r2, #8
 8005636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f860 	bl	800570c <HAL_TIM_IC_CaptureCallback>
 800564c:	e005      	b.n	800565a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f852 	bl	80056f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f863 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00c      	beq.n	8005684 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d007      	beq.n	8005684 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0201 	mvn.w	r2, #1
 800567c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fc fe02 	bl	8002288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00c      	beq.n	80056a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80056a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f8e6 	bl	8005874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00c      	beq.n	80056cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d007      	beq.n	80056cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f834 	bl	8005734 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00c      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d007      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0220 	mvn.w	r2, #32
 80056e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f8b8 	bl	8005860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a3a      	ldr	r2, [pc, #232]	@ (8005844 <TIM_Base_SetConfig+0xfc>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00f      	beq.n	8005780 <TIM_Base_SetConfig+0x38>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005766:	d00b      	beq.n	8005780 <TIM_Base_SetConfig+0x38>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a37      	ldr	r2, [pc, #220]	@ (8005848 <TIM_Base_SetConfig+0x100>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d007      	beq.n	8005780 <TIM_Base_SetConfig+0x38>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a36      	ldr	r2, [pc, #216]	@ (800584c <TIM_Base_SetConfig+0x104>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d003      	beq.n	8005780 <TIM_Base_SetConfig+0x38>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a35      	ldr	r2, [pc, #212]	@ (8005850 <TIM_Base_SetConfig+0x108>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d108      	bne.n	8005792 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a2b      	ldr	r2, [pc, #172]	@ (8005844 <TIM_Base_SetConfig+0xfc>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d01b      	beq.n	80057d2 <TIM_Base_SetConfig+0x8a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057a0:	d017      	beq.n	80057d2 <TIM_Base_SetConfig+0x8a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a28      	ldr	r2, [pc, #160]	@ (8005848 <TIM_Base_SetConfig+0x100>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <TIM_Base_SetConfig+0x8a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a27      	ldr	r2, [pc, #156]	@ (800584c <TIM_Base_SetConfig+0x104>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00f      	beq.n	80057d2 <TIM_Base_SetConfig+0x8a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a26      	ldr	r2, [pc, #152]	@ (8005850 <TIM_Base_SetConfig+0x108>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d00b      	beq.n	80057d2 <TIM_Base_SetConfig+0x8a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a25      	ldr	r2, [pc, #148]	@ (8005854 <TIM_Base_SetConfig+0x10c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d007      	beq.n	80057d2 <TIM_Base_SetConfig+0x8a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a24      	ldr	r2, [pc, #144]	@ (8005858 <TIM_Base_SetConfig+0x110>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_Base_SetConfig+0x8a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a23      	ldr	r2, [pc, #140]	@ (800585c <TIM_Base_SetConfig+0x114>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d108      	bne.n	80057e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a0e      	ldr	r2, [pc, #56]	@ (8005844 <TIM_Base_SetConfig+0xfc>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d103      	bne.n	8005818 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b01      	cmp	r3, #1
 8005828:	d105      	bne.n	8005836 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f023 0201 	bic.w	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	611a      	str	r2, [r3, #16]
  }
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40010000 	.word	0x40010000
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800
 8005850:	40000c00 	.word	0x40000c00
 8005854:	40014000 	.word	0x40014000
 8005858:	40014400 	.word	0x40014400
 800585c:	40014800 	.word	0x40014800

08005860 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e042      	b.n	8005920 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fc ffde 	bl	8002870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2224      	movs	r2, #36	@ 0x24
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f82b 	bl	8005928 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695a      	ldr	r2, [r3, #20]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800592c:	b0c0      	sub	sp, #256	@ 0x100
 800592e:	af00      	add	r7, sp, #0
 8005930:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005944:	68d9      	ldr	r1, [r3, #12]
 8005946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	ea40 0301 	orr.w	r3, r0, r1
 8005950:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	431a      	orrs	r2, r3
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	431a      	orrs	r2, r3
 8005968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	4313      	orrs	r3, r2
 8005970:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005980:	f021 010c 	bic.w	r1, r1, #12
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800598e:	430b      	orrs	r3, r1
 8005990:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800599e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a2:	6999      	ldr	r1, [r3, #24]
 80059a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	ea40 0301 	orr.w	r3, r0, r1
 80059ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	4b8f      	ldr	r3, [pc, #572]	@ (8005bf4 <UART_SetConfig+0x2cc>)
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d005      	beq.n	80059c8 <UART_SetConfig+0xa0>
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	4b8d      	ldr	r3, [pc, #564]	@ (8005bf8 <UART_SetConfig+0x2d0>)
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d104      	bne.n	80059d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059c8:	f7fe fdc0 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 80059cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80059d0:	e003      	b.n	80059da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059d2:	f7fe fda7 	bl	8004524 <HAL_RCC_GetPCLK1Freq>
 80059d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059e4:	f040 810c 	bne.w	8005c00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ec:	2200      	movs	r2, #0
 80059ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80059f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80059f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80059fa:	4622      	mov	r2, r4
 80059fc:	462b      	mov	r3, r5
 80059fe:	1891      	adds	r1, r2, r2
 8005a00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a02:	415b      	adcs	r3, r3
 8005a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	eb12 0801 	adds.w	r8, r2, r1
 8005a10:	4629      	mov	r1, r5
 8005a12:	eb43 0901 	adc.w	r9, r3, r1
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	f04f 0300 	mov.w	r3, #0
 8005a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a2a:	4690      	mov	r8, r2
 8005a2c:	4699      	mov	r9, r3
 8005a2e:	4623      	mov	r3, r4
 8005a30:	eb18 0303 	adds.w	r3, r8, r3
 8005a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a38:	462b      	mov	r3, r5
 8005a3a:	eb49 0303 	adc.w	r3, r9, r3
 8005a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a56:	460b      	mov	r3, r1
 8005a58:	18db      	adds	r3, r3, r3
 8005a5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	eb42 0303 	adc.w	r3, r2, r3
 8005a62:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a6c:	f7fb f8c4 	bl	8000bf8 <__aeabi_uldivmod>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4b61      	ldr	r3, [pc, #388]	@ (8005bfc <UART_SetConfig+0x2d4>)
 8005a76:	fba3 2302 	umull	r2, r3, r3, r2
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	011c      	lsls	r4, r3, #4
 8005a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a90:	4642      	mov	r2, r8
 8005a92:	464b      	mov	r3, r9
 8005a94:	1891      	adds	r1, r2, r2
 8005a96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a98:	415b      	adcs	r3, r3
 8005a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	eb12 0a01 	adds.w	sl, r2, r1
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	eb43 0b01 	adc.w	fp, r3, r1
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ab8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005abc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ac0:	4692      	mov	sl, r2
 8005ac2:	469b      	mov	fp, r3
 8005ac4:	4643      	mov	r3, r8
 8005ac6:	eb1a 0303 	adds.w	r3, sl, r3
 8005aca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ace:	464b      	mov	r3, r9
 8005ad0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ae4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005ae8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005aec:	460b      	mov	r3, r1
 8005aee:	18db      	adds	r3, r3, r3
 8005af0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005af2:	4613      	mov	r3, r2
 8005af4:	eb42 0303 	adc.w	r3, r2, r3
 8005af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005afa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005afe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b02:	f7fb f879 	bl	8000bf8 <__aeabi_uldivmod>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8005bfc <UART_SetConfig+0x2d4>)
 8005b0e:	fba3 2301 	umull	r2, r3, r3, r1
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	2264      	movs	r2, #100	@ 0x64
 8005b16:	fb02 f303 	mul.w	r3, r2, r3
 8005b1a:	1acb      	subs	r3, r1, r3
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b22:	4b36      	ldr	r3, [pc, #216]	@ (8005bfc <UART_SetConfig+0x2d4>)
 8005b24:	fba3 2302 	umull	r2, r3, r3, r2
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	005b      	lsls	r3, r3, #1
 8005b2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b30:	441c      	add	r4, r3
 8005b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b44:	4642      	mov	r2, r8
 8005b46:	464b      	mov	r3, r9
 8005b48:	1891      	adds	r1, r2, r2
 8005b4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b4c:	415b      	adcs	r3, r3
 8005b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b54:	4641      	mov	r1, r8
 8005b56:	1851      	adds	r1, r2, r1
 8005b58:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	414b      	adcs	r3, r1
 8005b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	f04f 0300 	mov.w	r3, #0
 8005b68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b6c:	4659      	mov	r1, fp
 8005b6e:	00cb      	lsls	r3, r1, #3
 8005b70:	4651      	mov	r1, sl
 8005b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b76:	4651      	mov	r1, sl
 8005b78:	00ca      	lsls	r2, r1, #3
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4603      	mov	r3, r0
 8005b80:	4642      	mov	r2, r8
 8005b82:	189b      	adds	r3, r3, r2
 8005b84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b88:	464b      	mov	r3, r9
 8005b8a:	460a      	mov	r2, r1
 8005b8c:	eb42 0303 	adc.w	r3, r2, r3
 8005b90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ba0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ba4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ba8:	460b      	mov	r3, r1
 8005baa:	18db      	adds	r3, r3, r3
 8005bac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bae:	4613      	mov	r3, r2
 8005bb0:	eb42 0303 	adc.w	r3, r2, r3
 8005bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005bba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005bbe:	f7fb f81b 	bl	8000bf8 <__aeabi_uldivmod>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bfc <UART_SetConfig+0x2d4>)
 8005bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	2164      	movs	r1, #100	@ 0x64
 8005bd0:	fb01 f303 	mul.w	r3, r1, r3
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	3332      	adds	r3, #50	@ 0x32
 8005bda:	4a08      	ldr	r2, [pc, #32]	@ (8005bfc <UART_SetConfig+0x2d4>)
 8005bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	f003 0207 	and.w	r2, r3, #7
 8005be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4422      	add	r2, r4
 8005bee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bf0:	e106      	b.n	8005e00 <UART_SetConfig+0x4d8>
 8005bf2:	bf00      	nop
 8005bf4:	40011000 	.word	0x40011000
 8005bf8:	40011400 	.word	0x40011400
 8005bfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c04:	2200      	movs	r2, #0
 8005c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c12:	4642      	mov	r2, r8
 8005c14:	464b      	mov	r3, r9
 8005c16:	1891      	adds	r1, r2, r2
 8005c18:	6239      	str	r1, [r7, #32]
 8005c1a:	415b      	adcs	r3, r3
 8005c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c22:	4641      	mov	r1, r8
 8005c24:	1854      	adds	r4, r2, r1
 8005c26:	4649      	mov	r1, r9
 8005c28:	eb43 0501 	adc.w	r5, r3, r1
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	00eb      	lsls	r3, r5, #3
 8005c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c3a:	00e2      	lsls	r2, r4, #3
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	461d      	mov	r5, r3
 8005c40:	4643      	mov	r3, r8
 8005c42:	18e3      	adds	r3, r4, r3
 8005c44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c48:	464b      	mov	r3, r9
 8005c4a:	eb45 0303 	adc.w	r3, r5, r3
 8005c4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c6e:	4629      	mov	r1, r5
 8005c70:	008b      	lsls	r3, r1, #2
 8005c72:	4621      	mov	r1, r4
 8005c74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c78:	4621      	mov	r1, r4
 8005c7a:	008a      	lsls	r2, r1, #2
 8005c7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c80:	f7fa ffba 	bl	8000bf8 <__aeabi_uldivmod>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4b60      	ldr	r3, [pc, #384]	@ (8005e0c <UART_SetConfig+0x4e4>)
 8005c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	011c      	lsls	r4, r3, #4
 8005c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ca0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	1891      	adds	r1, r2, r2
 8005caa:	61b9      	str	r1, [r7, #24]
 8005cac:	415b      	adcs	r3, r3
 8005cae:	61fb      	str	r3, [r7, #28]
 8005cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	1851      	adds	r1, r2, r1
 8005cb8:	6139      	str	r1, [r7, #16]
 8005cba:	4649      	mov	r1, r9
 8005cbc:	414b      	adcs	r3, r1
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ccc:	4659      	mov	r1, fp
 8005cce:	00cb      	lsls	r3, r1, #3
 8005cd0:	4651      	mov	r1, sl
 8005cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cd6:	4651      	mov	r1, sl
 8005cd8:	00ca      	lsls	r2, r1, #3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	189b      	adds	r3, r3, r2
 8005ce4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ce8:	464b      	mov	r3, r9
 8005cea:	460a      	mov	r2, r1
 8005cec:	eb42 0303 	adc.w	r3, r2, r3
 8005cf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	008b      	lsls	r3, r1, #2
 8005d10:	4641      	mov	r1, r8
 8005d12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d16:	4641      	mov	r1, r8
 8005d18:	008a      	lsls	r2, r1, #2
 8005d1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d1e:	f7fa ff6b 	bl	8000bf8 <__aeabi_uldivmod>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	4b38      	ldr	r3, [pc, #224]	@ (8005e0c <UART_SetConfig+0x4e4>)
 8005d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	2264      	movs	r2, #100	@ 0x64
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	1acb      	subs	r3, r1, r3
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	3332      	adds	r3, #50	@ 0x32
 8005d3c:	4a33      	ldr	r2, [pc, #204]	@ (8005e0c <UART_SetConfig+0x4e4>)
 8005d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d48:	441c      	add	r4, r3
 8005d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d4e:	2200      	movs	r2, #0
 8005d50:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d52:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d58:	4642      	mov	r2, r8
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	1891      	adds	r1, r2, r2
 8005d5e:	60b9      	str	r1, [r7, #8]
 8005d60:	415b      	adcs	r3, r3
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d68:	4641      	mov	r1, r8
 8005d6a:	1851      	adds	r1, r2, r1
 8005d6c:	6039      	str	r1, [r7, #0]
 8005d6e:	4649      	mov	r1, r9
 8005d70:	414b      	adcs	r3, r1
 8005d72:	607b      	str	r3, [r7, #4]
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d80:	4659      	mov	r1, fp
 8005d82:	00cb      	lsls	r3, r1, #3
 8005d84:	4651      	mov	r1, sl
 8005d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d8a:	4651      	mov	r1, sl
 8005d8c:	00ca      	lsls	r2, r1, #3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	4619      	mov	r1, r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	4642      	mov	r2, r8
 8005d96:	189b      	adds	r3, r3, r2
 8005d98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d9a:	464b      	mov	r3, r9
 8005d9c:	460a      	mov	r2, r1
 8005d9e:	eb42 0303 	adc.w	r3, r2, r3
 8005da2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	663b      	str	r3, [r7, #96]	@ 0x60
 8005dae:	667a      	str	r2, [r7, #100]	@ 0x64
 8005db0:	f04f 0200 	mov.w	r2, #0
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005dbc:	4649      	mov	r1, r9
 8005dbe:	008b      	lsls	r3, r1, #2
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dc6:	4641      	mov	r1, r8
 8005dc8:	008a      	lsls	r2, r1, #2
 8005dca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005dce:	f7fa ff13 	bl	8000bf8 <__aeabi_uldivmod>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e0c <UART_SetConfig+0x4e4>)
 8005dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	2164      	movs	r1, #100	@ 0x64
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	3332      	adds	r3, #50	@ 0x32
 8005dea:	4a08      	ldr	r2, [pc, #32]	@ (8005e0c <UART_SetConfig+0x4e4>)
 8005dec:	fba2 2303 	umull	r2, r3, r2, r3
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	f003 020f 	and.w	r2, r3, #15
 8005df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4422      	add	r2, r4
 8005dfe:	609a      	str	r2, [r3, #8]
}
 8005e00:	bf00      	nop
 8005e02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e06:	46bd      	mov	sp, r7
 8005e08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e0c:	51eb851f 	.word	0x51eb851f

08005e10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e22:	2b84      	cmp	r3, #132	@ 0x84
 8005e24:	d005      	beq.n	8005e32 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005e26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	3303      	adds	r3, #3
 8005e30:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005e32:	68fb      	ldr	r3, [r7, #12]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005e44:	f000 fae4 	bl	8006410 <vTaskStartScheduler>
  
  return osOK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e50:	b089      	sub	sp, #36	@ 0x24
 8005e52:	af04      	add	r7, sp, #16
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d020      	beq.n	8005ea2 <osThreadCreate+0x54>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01c      	beq.n	8005ea2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685c      	ldr	r4, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691e      	ldr	r6, [r3, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff ffc8 	bl	8005e10 <makeFreeRtosPriority>
 8005e80:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e8a:	9202      	str	r2, [sp, #8]
 8005e8c:	9301      	str	r3, [sp, #4]
 8005e8e:	9100      	str	r1, [sp, #0]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	4632      	mov	r2, r6
 8005e94:	4629      	mov	r1, r5
 8005e96:	4620      	mov	r0, r4
 8005e98:	f000 f8ed 	bl	8006076 <xTaskCreateStatic>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	e01c      	b.n	8005edc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685c      	ldr	r4, [r3, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005eae:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff ffaa 	bl	8005e10 <makeFreeRtosPriority>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	f107 030c 	add.w	r3, r7, #12
 8005ec2:	9301      	str	r3, [sp, #4]
 8005ec4:	9200      	str	r2, [sp, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	4632      	mov	r2, r6
 8005eca:	4629      	mov	r1, r5
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f000 f932 	bl	8006136 <xTaskCreate>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d001      	beq.n	8005edc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e000      	b.n	8005ede <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005edc:	68fb      	ldr	r3, [r7, #12]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ee6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <osDelay+0x16>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	e000      	b.n	8005efe <osDelay+0x18>
 8005efc:	2301      	movs	r3, #1
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fa50 	bl	80063a4 <vTaskDelay>
  
  return osOK;
 8005f04:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b083      	sub	sp, #12
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f103 0208 	add.w	r2, r3, #8
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f04f 32ff 	mov.w	r2, #4294967295
 8005f26:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f103 0208 	add.w	r2, r3, #8
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f103 0208 	add.w	r2, r3, #8
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	601a      	str	r2, [r3, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc6:	d103      	bne.n	8005fd0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	e00c      	b.n	8005fea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3308      	adds	r3, #8
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	e002      	b.n	8005fde <vListInsert+0x2e>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d2f6      	bcs.n	8005fd8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	601a      	str	r2, [r3, #0]
}
 8006016:	bf00      	nop
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6892      	ldr	r2, [r2, #8]
 8006038:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6852      	ldr	r2, [r2, #4]
 8006042:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	429a      	cmp	r2, r3
 800604c:	d103      	bne.n	8006056 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	689a      	ldr	r2, [r3, #8]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	1e5a      	subs	r2, r3, #1
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006076:	b580      	push	{r7, lr}
 8006078:	b08e      	sub	sp, #56	@ 0x38
 800607a:	af04      	add	r7, sp, #16
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	607a      	str	r2, [r7, #4]
 8006082:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10b      	bne.n	80060a2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800609c:	bf00      	nop
 800609e:	bf00      	nop
 80060a0:	e7fd      	b.n	800609e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10b      	bne.n	80060c0 <xTaskCreateStatic+0x4a>
	__asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	61fb      	str	r3, [r7, #28]
}
 80060ba:	bf00      	nop
 80060bc:	bf00      	nop
 80060be:	e7fd      	b.n	80060bc <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060c0:	2354      	movs	r3, #84	@ 0x54
 80060c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	2b54      	cmp	r3, #84	@ 0x54
 80060c8:	d00b      	beq.n	80060e2 <xTaskCreateStatic+0x6c>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	61bb      	str	r3, [r7, #24]
}
 80060dc:	bf00      	nop
 80060de:	bf00      	nop
 80060e0:	e7fd      	b.n	80060de <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01e      	beq.n	8006128 <xTaskCreateStatic+0xb2>
 80060ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01b      	beq.n	8006128 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060f8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fc:	2202      	movs	r2, #2
 80060fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006102:	2300      	movs	r3, #0
 8006104:	9303      	str	r3, [sp, #12]
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	9302      	str	r3, [sp, #8]
 800610a:	f107 0314 	add.w	r3, r7, #20
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 f850 	bl	80061c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006120:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006122:	f000 f8d5 	bl	80062d0 <prvAddNewTaskToReadyList>
 8006126:	e001      	b.n	800612c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006128:	2300      	movs	r3, #0
 800612a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800612c:	697b      	ldr	r3, [r7, #20]
	}
 800612e:	4618      	mov	r0, r3
 8006130:	3728      	adds	r7, #40	@ 0x28
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006136:	b580      	push	{r7, lr}
 8006138:	b08c      	sub	sp, #48	@ 0x30
 800613a:	af04      	add	r7, sp, #16
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	603b      	str	r3, [r7, #0]
 8006142:	4613      	mov	r3, r2
 8006144:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fed4 	bl	8006ef8 <pvPortMalloc>
 8006150:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00e      	beq.n	8006176 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006158:	2054      	movs	r0, #84	@ 0x54
 800615a:	f000 fecd 	bl	8006ef8 <pvPortMalloc>
 800615e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	631a      	str	r2, [r3, #48]	@ 0x30
 800616c:	e005      	b.n	800617a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800616e:	6978      	ldr	r0, [r7, #20]
 8006170:	f000 ff90 	bl	8007094 <vPortFree>
 8006174:	e001      	b.n	800617a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d017      	beq.n	80061b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006188:	88fa      	ldrh	r2, [r7, #6]
 800618a:	2300      	movs	r3, #0
 800618c:	9303      	str	r3, [sp, #12]
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	9302      	str	r3, [sp, #8]
 8006192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 f80e 	bl	80061c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061a4:	69f8      	ldr	r0, [r7, #28]
 80061a6:	f000 f893 	bl	80062d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061aa:	2301      	movs	r3, #1
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	e002      	b.n	80061b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061b0:	f04f 33ff 	mov.w	r3, #4294967295
 80061b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061b6:	69bb      	ldr	r3, [r7, #24]
	}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061d8:	3b01      	subs	r3, #1
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f023 0307 	bic.w	r3, r3, #7
 80061e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00b      	beq.n	800620a <prvInitialiseNewTask+0x4a>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	617b      	str	r3, [r7, #20]
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	e7fd      	b.n	8006206 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01f      	beq.n	8006250 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006210:	2300      	movs	r3, #0
 8006212:	61fb      	str	r3, [r7, #28]
 8006214:	e012      	b.n	800623c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	7819      	ldrb	r1, [r3, #0]
 800621e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	3334      	adds	r3, #52	@ 0x34
 8006226:	460a      	mov	r2, r1
 8006228:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	4413      	add	r3, r2
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d006      	beq.n	8006244 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	3301      	adds	r3, #1
 800623a:	61fb      	str	r3, [r7, #28]
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	2b0f      	cmp	r3, #15
 8006240:	d9e9      	bls.n	8006216 <prvInitialiseNewTask+0x56>
 8006242:	e000      	b.n	8006246 <prvInitialiseNewTask+0x86>
			{
				break;
 8006244:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800624e:	e003      	b.n	8006258 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625a:	2b06      	cmp	r3, #6
 800625c:	d901      	bls.n	8006262 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800625e:	2306      	movs	r3, #6
 8006260:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006264:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006266:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800626c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800626e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006270:	2200      	movs	r2, #0
 8006272:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006276:	3304      	adds	r3, #4
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff fe68 	bl	8005f4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	3318      	adds	r3, #24
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff fe63 	bl	8005f4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800628c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800628e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006290:	f1c3 0207 	rsb	r2, r3, #7
 8006294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006296:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800629c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800629e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a0:	2200      	movs	r2, #0
 80062a2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	68f9      	ldr	r1, [r7, #12]
 80062b0:	69b8      	ldr	r0, [r7, #24]
 80062b2:	f000 fc0d 	bl	8006ad0 <pxPortInitialiseStack>
 80062b6:	4602      	mov	r2, r0
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062c8:	bf00      	nop
 80062ca:	3720      	adds	r7, #32
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80062d8:	f000 fd2e 	bl	8006d38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80062dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006388 <prvAddNewTaskToReadyList+0xb8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3301      	adds	r3, #1
 80062e2:	4a29      	ldr	r2, [pc, #164]	@ (8006388 <prvAddNewTaskToReadyList+0xb8>)
 80062e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80062e6:	4b29      	ldr	r3, [pc, #164]	@ (800638c <prvAddNewTaskToReadyList+0xbc>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d109      	bne.n	8006302 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80062ee:	4a27      	ldr	r2, [pc, #156]	@ (800638c <prvAddNewTaskToReadyList+0xbc>)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80062f4:	4b24      	ldr	r3, [pc, #144]	@ (8006388 <prvAddNewTaskToReadyList+0xb8>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d110      	bne.n	800631e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80062fc:	f000 fac4 	bl	8006888 <prvInitialiseTaskLists>
 8006300:	e00d      	b.n	800631e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006302:	4b23      	ldr	r3, [pc, #140]	@ (8006390 <prvAddNewTaskToReadyList+0xc0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800630a:	4b20      	ldr	r3, [pc, #128]	@ (800638c <prvAddNewTaskToReadyList+0xbc>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006314:	429a      	cmp	r2, r3
 8006316:	d802      	bhi.n	800631e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006318:	4a1c      	ldr	r2, [pc, #112]	@ (800638c <prvAddNewTaskToReadyList+0xbc>)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800631e:	4b1d      	ldr	r3, [pc, #116]	@ (8006394 <prvAddNewTaskToReadyList+0xc4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3301      	adds	r3, #1
 8006324:	4a1b      	ldr	r2, [pc, #108]	@ (8006394 <prvAddNewTaskToReadyList+0xc4>)
 8006326:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632c:	2201      	movs	r2, #1
 800632e:	409a      	lsls	r2, r3
 8006330:	4b19      	ldr	r3, [pc, #100]	@ (8006398 <prvAddNewTaskToReadyList+0xc8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4313      	orrs	r3, r2
 8006336:	4a18      	ldr	r2, [pc, #96]	@ (8006398 <prvAddNewTaskToReadyList+0xc8>)
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4a15      	ldr	r2, [pc, #84]	@ (800639c <prvAddNewTaskToReadyList+0xcc>)
 8006348:	441a      	add	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3304      	adds	r3, #4
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f7ff fe09 	bl	8005f68 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006356:	f000 fd21 	bl	8006d9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800635a:	4b0d      	ldr	r3, [pc, #52]	@ (8006390 <prvAddNewTaskToReadyList+0xc0>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00e      	beq.n	8006380 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006362:	4b0a      	ldr	r3, [pc, #40]	@ (800638c <prvAddNewTaskToReadyList+0xbc>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636c:	429a      	cmp	r2, r3
 800636e:	d207      	bcs.n	8006380 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006370:	4b0b      	ldr	r3, [pc, #44]	@ (80063a0 <prvAddNewTaskToReadyList+0xd0>)
 8006372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006376:	601a      	str	r2, [r3, #0]
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006380:	bf00      	nop
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	200007a4 	.word	0x200007a4
 800638c:	200006a4 	.word	0x200006a4
 8006390:	200007b0 	.word	0x200007b0
 8006394:	200007c0 	.word	0x200007c0
 8006398:	200007ac 	.word	0x200007ac
 800639c:	200006a8 	.word	0x200006a8
 80063a0:	e000ed04 	.word	0xe000ed04

080063a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063ac:	2300      	movs	r3, #0
 80063ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d018      	beq.n	80063e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063b6:	4b14      	ldr	r3, [pc, #80]	@ (8006408 <vTaskDelay+0x64>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00b      	beq.n	80063d6 <vTaskDelay+0x32>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	60bb      	str	r3, [r7, #8]
}
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop
 80063d4:	e7fd      	b.n	80063d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80063d6:	f000 f87d 	bl	80064d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063da:	2100      	movs	r1, #0
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fb11 	bl	8006a04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80063e2:	f000 f885 	bl	80064f0 <xTaskResumeAll>
 80063e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d107      	bne.n	80063fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80063ee:	4b07      	ldr	r3, [pc, #28]	@ (800640c <vTaskDelay+0x68>)
 80063f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80063fe:	bf00      	nop
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	200007cc 	.word	0x200007cc
 800640c:	e000ed04 	.word	0xe000ed04

08006410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08a      	sub	sp, #40	@ 0x28
 8006414:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006416:	2300      	movs	r3, #0
 8006418:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800641a:	2300      	movs	r3, #0
 800641c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800641e:	463a      	mov	r2, r7
 8006420:	1d39      	adds	r1, r7, #4
 8006422:	f107 0308 	add.w	r3, r7, #8
 8006426:	4618      	mov	r0, r3
 8006428:	f7fb fb8a 	bl	8001b40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	9202      	str	r2, [sp, #8]
 8006434:	9301      	str	r3, [sp, #4]
 8006436:	2300      	movs	r3, #0
 8006438:	9300      	str	r3, [sp, #0]
 800643a:	2300      	movs	r3, #0
 800643c:	460a      	mov	r2, r1
 800643e:	491f      	ldr	r1, [pc, #124]	@ (80064bc <vTaskStartScheduler+0xac>)
 8006440:	481f      	ldr	r0, [pc, #124]	@ (80064c0 <vTaskStartScheduler+0xb0>)
 8006442:	f7ff fe18 	bl	8006076 <xTaskCreateStatic>
 8006446:	4603      	mov	r3, r0
 8006448:	4a1e      	ldr	r2, [pc, #120]	@ (80064c4 <vTaskStartScheduler+0xb4>)
 800644a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800644c:	4b1d      	ldr	r3, [pc, #116]	@ (80064c4 <vTaskStartScheduler+0xb4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006454:	2301      	movs	r3, #1
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	e001      	b.n	800645e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d116      	bne.n	8006492 <vTaskStartScheduler+0x82>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	613b      	str	r3, [r7, #16]
}
 8006476:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006478:	4b13      	ldr	r3, [pc, #76]	@ (80064c8 <vTaskStartScheduler+0xb8>)
 800647a:	f04f 32ff 	mov.w	r2, #4294967295
 800647e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006480:	4b12      	ldr	r3, [pc, #72]	@ (80064cc <vTaskStartScheduler+0xbc>)
 8006482:	2201      	movs	r2, #1
 8006484:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006486:	4b12      	ldr	r3, [pc, #72]	@ (80064d0 <vTaskStartScheduler+0xc0>)
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800648c:	f000 fbb0 	bl	8006bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006490:	e00f      	b.n	80064b2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006498:	d10b      	bne.n	80064b2 <vTaskStartScheduler+0xa2>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	60fb      	str	r3, [r7, #12]
}
 80064ac:	bf00      	nop
 80064ae:	bf00      	nop
 80064b0:	e7fd      	b.n	80064ae <vTaskStartScheduler+0x9e>
}
 80064b2:	bf00      	nop
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	0800783c 	.word	0x0800783c
 80064c0:	08006859 	.word	0x08006859
 80064c4:	200007c8 	.word	0x200007c8
 80064c8:	200007c4 	.word	0x200007c4
 80064cc:	200007b0 	.word	0x200007b0
 80064d0:	200007a8 	.word	0x200007a8

080064d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80064d8:	4b04      	ldr	r3, [pc, #16]	@ (80064ec <vTaskSuspendAll+0x18>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3301      	adds	r3, #1
 80064de:	4a03      	ldr	r2, [pc, #12]	@ (80064ec <vTaskSuspendAll+0x18>)
 80064e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80064e2:	bf00      	nop
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	200007cc 	.word	0x200007cc

080064f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80064f6:	2300      	movs	r3, #0
 80064f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80064fa:	2300      	movs	r3, #0
 80064fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80064fe:	4b42      	ldr	r3, [pc, #264]	@ (8006608 <xTaskResumeAll+0x118>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10b      	bne.n	800651e <xTaskResumeAll+0x2e>
	__asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	603b      	str	r3, [r7, #0]
}
 8006518:	bf00      	nop
 800651a:	bf00      	nop
 800651c:	e7fd      	b.n	800651a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800651e:	f000 fc0b 	bl	8006d38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006522:	4b39      	ldr	r3, [pc, #228]	@ (8006608 <xTaskResumeAll+0x118>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3b01      	subs	r3, #1
 8006528:	4a37      	ldr	r2, [pc, #220]	@ (8006608 <xTaskResumeAll+0x118>)
 800652a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800652c:	4b36      	ldr	r3, [pc, #216]	@ (8006608 <xTaskResumeAll+0x118>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d161      	bne.n	80065f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006534:	4b35      	ldr	r3, [pc, #212]	@ (800660c <xTaskResumeAll+0x11c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d05d      	beq.n	80065f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800653c:	e02e      	b.n	800659c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800653e:	4b34      	ldr	r3, [pc, #208]	@ (8006610 <xTaskResumeAll+0x120>)
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3318      	adds	r3, #24
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff fd69 	bl	8006022 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3304      	adds	r3, #4
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff fd64 	bl	8006022 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655e:	2201      	movs	r2, #1
 8006560:	409a      	lsls	r2, r3
 8006562:	4b2c      	ldr	r3, [pc, #176]	@ (8006614 <xTaskResumeAll+0x124>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4313      	orrs	r3, r2
 8006568:	4a2a      	ldr	r2, [pc, #168]	@ (8006614 <xTaskResumeAll+0x124>)
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4a27      	ldr	r2, [pc, #156]	@ (8006618 <xTaskResumeAll+0x128>)
 800657a:	441a      	add	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3304      	adds	r3, #4
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f7ff fcf0 	bl	8005f68 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800658c:	4b23      	ldr	r3, [pc, #140]	@ (800661c <xTaskResumeAll+0x12c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006592:	429a      	cmp	r2, r3
 8006594:	d302      	bcc.n	800659c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006596:	4b22      	ldr	r3, [pc, #136]	@ (8006620 <xTaskResumeAll+0x130>)
 8006598:	2201      	movs	r2, #1
 800659a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800659c:	4b1c      	ldr	r3, [pc, #112]	@ (8006610 <xTaskResumeAll+0x120>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1cc      	bne.n	800653e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065aa:	f000 fa0b 	bl	80069c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065ae:	4b1d      	ldr	r3, [pc, #116]	@ (8006624 <xTaskResumeAll+0x134>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d010      	beq.n	80065dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065ba:	f000 f837 	bl	800662c <xTaskIncrementTick>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80065c4:	4b16      	ldr	r3, [pc, #88]	@ (8006620 <xTaskResumeAll+0x130>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3b01      	subs	r3, #1
 80065ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1f1      	bne.n	80065ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80065d6:	4b13      	ldr	r3, [pc, #76]	@ (8006624 <xTaskResumeAll+0x134>)
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80065dc:	4b10      	ldr	r3, [pc, #64]	@ (8006620 <xTaskResumeAll+0x130>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d009      	beq.n	80065f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80065e4:	2301      	movs	r3, #1
 80065e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80065e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006628 <xTaskResumeAll+0x138>)
 80065ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065f8:	f000 fbd0 	bl	8006d9c <vPortExitCritical>

	return xAlreadyYielded;
 80065fc:	68bb      	ldr	r3, [r7, #8]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	200007cc 	.word	0x200007cc
 800660c:	200007a4 	.word	0x200007a4
 8006610:	20000764 	.word	0x20000764
 8006614:	200007ac 	.word	0x200007ac
 8006618:	200006a8 	.word	0x200006a8
 800661c:	200006a4 	.word	0x200006a4
 8006620:	200007b8 	.word	0x200007b8
 8006624:	200007b4 	.word	0x200007b4
 8006628:	e000ed04 	.word	0xe000ed04

0800662c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006636:	4b4f      	ldr	r3, [pc, #316]	@ (8006774 <xTaskIncrementTick+0x148>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f040 808f 	bne.w	800675e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006640:	4b4d      	ldr	r3, [pc, #308]	@ (8006778 <xTaskIncrementTick+0x14c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	3301      	adds	r3, #1
 8006646:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006648:	4a4b      	ldr	r2, [pc, #300]	@ (8006778 <xTaskIncrementTick+0x14c>)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d121      	bne.n	8006698 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006654:	4b49      	ldr	r3, [pc, #292]	@ (800677c <xTaskIncrementTick+0x150>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <xTaskIncrementTick+0x4a>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	603b      	str	r3, [r7, #0]
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	e7fd      	b.n	8006672 <xTaskIncrementTick+0x46>
 8006676:	4b41      	ldr	r3, [pc, #260]	@ (800677c <xTaskIncrementTick+0x150>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	4b40      	ldr	r3, [pc, #256]	@ (8006780 <xTaskIncrementTick+0x154>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a3e      	ldr	r2, [pc, #248]	@ (800677c <xTaskIncrementTick+0x150>)
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	4a3e      	ldr	r2, [pc, #248]	@ (8006780 <xTaskIncrementTick+0x154>)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	4b3e      	ldr	r3, [pc, #248]	@ (8006784 <xTaskIncrementTick+0x158>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3301      	adds	r3, #1
 8006690:	4a3c      	ldr	r2, [pc, #240]	@ (8006784 <xTaskIncrementTick+0x158>)
 8006692:	6013      	str	r3, [r2, #0]
 8006694:	f000 f996 	bl	80069c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006698:	4b3b      	ldr	r3, [pc, #236]	@ (8006788 <xTaskIncrementTick+0x15c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d348      	bcc.n	8006734 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066a2:	4b36      	ldr	r3, [pc, #216]	@ (800677c <xTaskIncrementTick+0x150>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d104      	bne.n	80066b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ac:	4b36      	ldr	r3, [pc, #216]	@ (8006788 <xTaskIncrementTick+0x15c>)
 80066ae:	f04f 32ff 	mov.w	r2, #4294967295
 80066b2:	601a      	str	r2, [r3, #0]
					break;
 80066b4:	e03e      	b.n	8006734 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b6:	4b31      	ldr	r3, [pc, #196]	@ (800677c <xTaskIncrementTick+0x150>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d203      	bcs.n	80066d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80066ce:	4a2e      	ldr	r2, [pc, #184]	@ (8006788 <xTaskIncrementTick+0x15c>)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80066d4:	e02e      	b.n	8006734 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	3304      	adds	r3, #4
 80066da:	4618      	mov	r0, r3
 80066dc:	f7ff fca1 	bl	8006022 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d004      	beq.n	80066f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	3318      	adds	r3, #24
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff fc98 	bl	8006022 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f6:	2201      	movs	r2, #1
 80066f8:	409a      	lsls	r2, r3
 80066fa:	4b24      	ldr	r3, [pc, #144]	@ (800678c <xTaskIncrementTick+0x160>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4313      	orrs	r3, r2
 8006700:	4a22      	ldr	r2, [pc, #136]	@ (800678c <xTaskIncrementTick+0x160>)
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4a1f      	ldr	r2, [pc, #124]	@ (8006790 <xTaskIncrementTick+0x164>)
 8006712:	441a      	add	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	3304      	adds	r3, #4
 8006718:	4619      	mov	r1, r3
 800671a:	4610      	mov	r0, r2
 800671c:	f7ff fc24 	bl	8005f68 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006724:	4b1b      	ldr	r3, [pc, #108]	@ (8006794 <xTaskIncrementTick+0x168>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672a:	429a      	cmp	r2, r3
 800672c:	d3b9      	bcc.n	80066a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800672e:	2301      	movs	r3, #1
 8006730:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006732:	e7b6      	b.n	80066a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006734:	4b17      	ldr	r3, [pc, #92]	@ (8006794 <xTaskIncrementTick+0x168>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800673a:	4915      	ldr	r1, [pc, #84]	@ (8006790 <xTaskIncrementTick+0x164>)
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	440b      	add	r3, r1
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d901      	bls.n	8006750 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800674c:	2301      	movs	r3, #1
 800674e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006750:	4b11      	ldr	r3, [pc, #68]	@ (8006798 <xTaskIncrementTick+0x16c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d007      	beq.n	8006768 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006758:	2301      	movs	r3, #1
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	e004      	b.n	8006768 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800675e:	4b0f      	ldr	r3, [pc, #60]	@ (800679c <xTaskIncrementTick+0x170>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3301      	adds	r3, #1
 8006764:	4a0d      	ldr	r2, [pc, #52]	@ (800679c <xTaskIncrementTick+0x170>)
 8006766:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006768:	697b      	ldr	r3, [r7, #20]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	200007cc 	.word	0x200007cc
 8006778:	200007a8 	.word	0x200007a8
 800677c:	2000075c 	.word	0x2000075c
 8006780:	20000760 	.word	0x20000760
 8006784:	200007bc 	.word	0x200007bc
 8006788:	200007c4 	.word	0x200007c4
 800678c:	200007ac 	.word	0x200007ac
 8006790:	200006a8 	.word	0x200006a8
 8006794:	200006a4 	.word	0x200006a4
 8006798:	200007b8 	.word	0x200007b8
 800679c:	200007b4 	.word	0x200007b4

080067a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067a6:	4b27      	ldr	r3, [pc, #156]	@ (8006844 <vTaskSwitchContext+0xa4>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067ae:	4b26      	ldr	r3, [pc, #152]	@ (8006848 <vTaskSwitchContext+0xa8>)
 80067b0:	2201      	movs	r2, #1
 80067b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067b4:	e040      	b.n	8006838 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80067b6:	4b24      	ldr	r3, [pc, #144]	@ (8006848 <vTaskSwitchContext+0xa8>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067bc:	4b23      	ldr	r3, [pc, #140]	@ (800684c <vTaskSwitchContext+0xac>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	fab3 f383 	clz	r3, r3
 80067c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80067ca:	7afb      	ldrb	r3, [r7, #11]
 80067cc:	f1c3 031f 	rsb	r3, r3, #31
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	491f      	ldr	r1, [pc, #124]	@ (8006850 <vTaskSwitchContext+0xb0>)
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10b      	bne.n	80067fe <vTaskSwitchContext+0x5e>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	607b      	str	r3, [r7, #4]
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <vTaskSwitchContext+0x5a>
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4613      	mov	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4a11      	ldr	r2, [pc, #68]	@ (8006850 <vTaskSwitchContext+0xb0>)
 800680a:	4413      	add	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	605a      	str	r2, [r3, #4]
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	3308      	adds	r3, #8
 8006820:	429a      	cmp	r2, r3
 8006822:	d104      	bne.n	800682e <vTaskSwitchContext+0x8e>
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	605a      	str	r2, [r3, #4]
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	4a07      	ldr	r2, [pc, #28]	@ (8006854 <vTaskSwitchContext+0xb4>)
 8006836:	6013      	str	r3, [r2, #0]
}
 8006838:	bf00      	nop
 800683a:	371c      	adds	r7, #28
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	200007cc 	.word	0x200007cc
 8006848:	200007b8 	.word	0x200007b8
 800684c:	200007ac 	.word	0x200007ac
 8006850:	200006a8 	.word	0x200006a8
 8006854:	200006a4 	.word	0x200006a4

08006858 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006860:	f000 f852 	bl	8006908 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006864:	4b06      	ldr	r3, [pc, #24]	@ (8006880 <prvIdleTask+0x28>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d9f9      	bls.n	8006860 <prvIdleTask+0x8>
			{
				taskYIELD();
 800686c:	4b05      	ldr	r3, [pc, #20]	@ (8006884 <prvIdleTask+0x2c>)
 800686e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800687c:	e7f0      	b.n	8006860 <prvIdleTask+0x8>
 800687e:	bf00      	nop
 8006880:	200006a8 	.word	0x200006a8
 8006884:	e000ed04 	.word	0xe000ed04

08006888 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800688e:	2300      	movs	r3, #0
 8006890:	607b      	str	r3, [r7, #4]
 8006892:	e00c      	b.n	80068ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4a12      	ldr	r2, [pc, #72]	@ (80068e8 <prvInitialiseTaskLists+0x60>)
 80068a0:	4413      	add	r3, r2
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7ff fb33 	bl	8005f0e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3301      	adds	r3, #1
 80068ac:	607b      	str	r3, [r7, #4]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b06      	cmp	r3, #6
 80068b2:	d9ef      	bls.n	8006894 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80068b4:	480d      	ldr	r0, [pc, #52]	@ (80068ec <prvInitialiseTaskLists+0x64>)
 80068b6:	f7ff fb2a 	bl	8005f0e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80068ba:	480d      	ldr	r0, [pc, #52]	@ (80068f0 <prvInitialiseTaskLists+0x68>)
 80068bc:	f7ff fb27 	bl	8005f0e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068c0:	480c      	ldr	r0, [pc, #48]	@ (80068f4 <prvInitialiseTaskLists+0x6c>)
 80068c2:	f7ff fb24 	bl	8005f0e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068c6:	480c      	ldr	r0, [pc, #48]	@ (80068f8 <prvInitialiseTaskLists+0x70>)
 80068c8:	f7ff fb21 	bl	8005f0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068cc:	480b      	ldr	r0, [pc, #44]	@ (80068fc <prvInitialiseTaskLists+0x74>)
 80068ce:	f7ff fb1e 	bl	8005f0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006900 <prvInitialiseTaskLists+0x78>)
 80068d4:	4a05      	ldr	r2, [pc, #20]	@ (80068ec <prvInitialiseTaskLists+0x64>)
 80068d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006904 <prvInitialiseTaskLists+0x7c>)
 80068da:	4a05      	ldr	r2, [pc, #20]	@ (80068f0 <prvInitialiseTaskLists+0x68>)
 80068dc:	601a      	str	r2, [r3, #0]
}
 80068de:	bf00      	nop
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	200006a8 	.word	0x200006a8
 80068ec:	20000734 	.word	0x20000734
 80068f0:	20000748 	.word	0x20000748
 80068f4:	20000764 	.word	0x20000764
 80068f8:	20000778 	.word	0x20000778
 80068fc:	20000790 	.word	0x20000790
 8006900:	2000075c 	.word	0x2000075c
 8006904:	20000760 	.word	0x20000760

08006908 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800690e:	e019      	b.n	8006944 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006910:	f000 fa12 	bl	8006d38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006914:	4b10      	ldr	r3, [pc, #64]	@ (8006958 <prvCheckTasksWaitingTermination+0x50>)
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3304      	adds	r3, #4
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff fb7e 	bl	8006022 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006926:	4b0d      	ldr	r3, [pc, #52]	@ (800695c <prvCheckTasksWaitingTermination+0x54>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3b01      	subs	r3, #1
 800692c:	4a0b      	ldr	r2, [pc, #44]	@ (800695c <prvCheckTasksWaitingTermination+0x54>)
 800692e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006930:	4b0b      	ldr	r3, [pc, #44]	@ (8006960 <prvCheckTasksWaitingTermination+0x58>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3b01      	subs	r3, #1
 8006936:	4a0a      	ldr	r2, [pc, #40]	@ (8006960 <prvCheckTasksWaitingTermination+0x58>)
 8006938:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800693a:	f000 fa2f 	bl	8006d9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f810 	bl	8006964 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006944:	4b06      	ldr	r3, [pc, #24]	@ (8006960 <prvCheckTasksWaitingTermination+0x58>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e1      	bne.n	8006910 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800694c:	bf00      	nop
 800694e:	bf00      	nop
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000778 	.word	0x20000778
 800695c:	200007a4 	.word	0x200007a4
 8006960:	2000078c 	.word	0x2000078c

08006964 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006972:	2b00      	cmp	r3, #0
 8006974:	d108      	bne.n	8006988 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fb8a 	bl	8007094 <vPortFree>
				vPortFree( pxTCB );
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fb87 	bl	8007094 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006986:	e019      	b.n	80069bc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800698e:	2b01      	cmp	r3, #1
 8006990:	d103      	bne.n	800699a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fb7e 	bl	8007094 <vPortFree>
	}
 8006998:	e010      	b.n	80069bc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d00b      	beq.n	80069bc <prvDeleteTCB+0x58>
	__asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	60fb      	str	r3, [r7, #12]
}
 80069b6:	bf00      	nop
 80069b8:	bf00      	nop
 80069ba:	e7fd      	b.n	80069b8 <prvDeleteTCB+0x54>
	}
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ca:	4b0c      	ldr	r3, [pc, #48]	@ (80069fc <prvResetNextTaskUnblockTime+0x38>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d104      	bne.n	80069de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006a00 <prvResetNextTaskUnblockTime+0x3c>)
 80069d6:	f04f 32ff 	mov.w	r2, #4294967295
 80069da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069dc:	e008      	b.n	80069f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069de:	4b07      	ldr	r3, [pc, #28]	@ (80069fc <prvResetNextTaskUnblockTime+0x38>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	4a04      	ldr	r2, [pc, #16]	@ (8006a00 <prvResetNextTaskUnblockTime+0x3c>)
 80069ee:	6013      	str	r3, [r2, #0]
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	2000075c 	.word	0x2000075c
 8006a00:	200007c4 	.word	0x200007c4

08006a04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a0e:	4b29      	ldr	r3, [pc, #164]	@ (8006ab4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a14:	4b28      	ldr	r3, [pc, #160]	@ (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff fb01 	bl	8006022 <uxListRemove>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10b      	bne.n	8006a3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006a26:	4b24      	ldr	r3, [pc, #144]	@ (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	43da      	mvns	r2, r3
 8006a34:	4b21      	ldr	r3, [pc, #132]	@ (8006abc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	4a20      	ldr	r2, [pc, #128]	@ (8006abc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006a3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a44:	d10a      	bne.n	8006a5c <prvAddCurrentTaskToDelayedList+0x58>
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3304      	adds	r3, #4
 8006a52:	4619      	mov	r1, r3
 8006a54:	481a      	ldr	r0, [pc, #104]	@ (8006ac0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006a56:	f7ff fa87 	bl	8005f68 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a5a:	e026      	b.n	8006aaa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4413      	add	r3, r2
 8006a62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a64:	4b14      	ldr	r3, [pc, #80]	@ (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d209      	bcs.n	8006a88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a74:	4b13      	ldr	r3, [pc, #76]	@ (8006ac4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	4b0f      	ldr	r3, [pc, #60]	@ (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4610      	mov	r0, r2
 8006a82:	f7ff fa95 	bl	8005fb0 <vListInsert>
}
 8006a86:	e010      	b.n	8006aaa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a88:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3304      	adds	r3, #4
 8006a92:	4619      	mov	r1, r3
 8006a94:	4610      	mov	r0, r2
 8006a96:	f7ff fa8b 	bl	8005fb0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006acc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d202      	bcs.n	8006aaa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006aa4:	4a09      	ldr	r2, [pc, #36]	@ (8006acc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6013      	str	r3, [r2, #0]
}
 8006aaa:	bf00      	nop
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	200007a8 	.word	0x200007a8
 8006ab8:	200006a4 	.word	0x200006a4
 8006abc:	200007ac 	.word	0x200007ac
 8006ac0:	20000790 	.word	0x20000790
 8006ac4:	20000760 	.word	0x20000760
 8006ac8:	2000075c 	.word	0x2000075c
 8006acc:	200007c4 	.word	0x200007c4

08006ad0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	3b04      	subs	r3, #4
 8006ae0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3b04      	subs	r3, #4
 8006aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f023 0201 	bic.w	r2, r3, #1
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	3b04      	subs	r3, #4
 8006afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b00:	4a0c      	ldr	r2, [pc, #48]	@ (8006b34 <pxPortInitialiseStack+0x64>)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3b14      	subs	r3, #20
 8006b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	3b04      	subs	r3, #4
 8006b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f06f 0202 	mvn.w	r2, #2
 8006b1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3b20      	subs	r3, #32
 8006b24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b26:	68fb      	ldr	r3, [r7, #12]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	08006b39 	.word	0x08006b39

08006b38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b42:	4b13      	ldr	r3, [pc, #76]	@ (8006b90 <prvTaskExitError+0x58>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4a:	d00b      	beq.n	8006b64 <prvTaskExitError+0x2c>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	60fb      	str	r3, [r7, #12]
}
 8006b5e:	bf00      	nop
 8006b60:	bf00      	nop
 8006b62:	e7fd      	b.n	8006b60 <prvTaskExitError+0x28>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	60bb      	str	r3, [r7, #8]
}
 8006b76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b78:	bf00      	nop
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0fc      	beq.n	8006b7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	2000000c 	.word	0x2000000c
	...

08006ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ba0:	4b07      	ldr	r3, [pc, #28]	@ (8006bc0 <pxCurrentTCBConst2>)
 8006ba2:	6819      	ldr	r1, [r3, #0]
 8006ba4:	6808      	ldr	r0, [r1, #0]
 8006ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006baa:	f380 8809 	msr	PSP, r0
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f04f 0000 	mov.w	r0, #0
 8006bb6:	f380 8811 	msr	BASEPRI, r0
 8006bba:	4770      	bx	lr
 8006bbc:	f3af 8000 	nop.w

08006bc0 <pxCurrentTCBConst2>:
 8006bc0:	200006a4 	.word	0x200006a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop

08006bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006bc8:	4808      	ldr	r0, [pc, #32]	@ (8006bec <prvPortStartFirstTask+0x24>)
 8006bca:	6800      	ldr	r0, [r0, #0]
 8006bcc:	6800      	ldr	r0, [r0, #0]
 8006bce:	f380 8808 	msr	MSP, r0
 8006bd2:	f04f 0000 	mov.w	r0, #0
 8006bd6:	f380 8814 	msr	CONTROL, r0
 8006bda:	b662      	cpsie	i
 8006bdc:	b661      	cpsie	f
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	df00      	svc	0
 8006be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006bea:	bf00      	nop
 8006bec:	e000ed08 	.word	0xe000ed08

08006bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006bf6:	4b47      	ldr	r3, [pc, #284]	@ (8006d14 <xPortStartScheduler+0x124>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a47      	ldr	r2, [pc, #284]	@ (8006d18 <xPortStartScheduler+0x128>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d10b      	bne.n	8006c18 <xPortStartScheduler+0x28>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	613b      	str	r3, [r7, #16]
}
 8006c12:	bf00      	nop
 8006c14:	bf00      	nop
 8006c16:	e7fd      	b.n	8006c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c18:	4b3e      	ldr	r3, [pc, #248]	@ (8006d14 <xPortStartScheduler+0x124>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a3f      	ldr	r2, [pc, #252]	@ (8006d1c <xPortStartScheduler+0x12c>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d10b      	bne.n	8006c3a <xPortStartScheduler+0x4a>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	60fb      	str	r3, [r7, #12]
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	e7fd      	b.n	8006c36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c3a:	4b39      	ldr	r3, [pc, #228]	@ (8006d20 <xPortStartScheduler+0x130>)
 8006c3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	22ff      	movs	r2, #255	@ 0xff
 8006c4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	4b31      	ldr	r3, [pc, #196]	@ (8006d24 <xPortStartScheduler+0x134>)
 8006c60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c62:	4b31      	ldr	r3, [pc, #196]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006c64:	2207      	movs	r2, #7
 8006c66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c68:	e009      	b.n	8006c7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	4a2d      	ldr	r2, [pc, #180]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006c72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c74:	78fb      	ldrb	r3, [r7, #3]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c86:	2b80      	cmp	r3, #128	@ 0x80
 8006c88:	d0ef      	beq.n	8006c6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c8a:	4b27      	ldr	r3, [pc, #156]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f1c3 0307 	rsb	r3, r3, #7
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d00b      	beq.n	8006cae <xPortStartScheduler+0xbe>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	60bb      	str	r3, [r7, #8]
}
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	e7fd      	b.n	8006caa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006cae:	4b1e      	ldr	r3, [pc, #120]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006cb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006cc0:	4a19      	ldr	r2, [pc, #100]	@ (8006d28 <xPortStartScheduler+0x138>)
 8006cc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ccc:	4b17      	ldr	r3, [pc, #92]	@ (8006d2c <xPortStartScheduler+0x13c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a16      	ldr	r2, [pc, #88]	@ (8006d2c <xPortStartScheduler+0x13c>)
 8006cd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006cd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006cd8:	4b14      	ldr	r3, [pc, #80]	@ (8006d2c <xPortStartScheduler+0x13c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a13      	ldr	r2, [pc, #76]	@ (8006d2c <xPortStartScheduler+0x13c>)
 8006cde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ce2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ce4:	f000 f8da 	bl	8006e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ce8:	4b11      	ldr	r3, [pc, #68]	@ (8006d30 <xPortStartScheduler+0x140>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006cee:	f000 f8f9 	bl	8006ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006cf2:	4b10      	ldr	r3, [pc, #64]	@ (8006d34 <xPortStartScheduler+0x144>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8006d34 <xPortStartScheduler+0x144>)
 8006cf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006cfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006cfe:	f7ff ff63 	bl	8006bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d02:	f7ff fd4d 	bl	80067a0 <vTaskSwitchContext>
	prvTaskExitError();
 8006d06:	f7ff ff17 	bl	8006b38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3718      	adds	r7, #24
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	e000ed00 	.word	0xe000ed00
 8006d18:	410fc271 	.word	0x410fc271
 8006d1c:	410fc270 	.word	0x410fc270
 8006d20:	e000e400 	.word	0xe000e400
 8006d24:	200007d0 	.word	0x200007d0
 8006d28:	200007d4 	.word	0x200007d4
 8006d2c:	e000ed20 	.word	0xe000ed20
 8006d30:	2000000c 	.word	0x2000000c
 8006d34:	e000ef34 	.word	0xe000ef34

08006d38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	607b      	str	r3, [r7, #4]
}
 8006d50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d52:	4b10      	ldr	r3, [pc, #64]	@ (8006d94 <vPortEnterCritical+0x5c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3301      	adds	r3, #1
 8006d58:	4a0e      	ldr	r2, [pc, #56]	@ (8006d94 <vPortEnterCritical+0x5c>)
 8006d5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d94 <vPortEnterCritical+0x5c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d110      	bne.n	8006d86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d64:	4b0c      	ldr	r3, [pc, #48]	@ (8006d98 <vPortEnterCritical+0x60>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00b      	beq.n	8006d86 <vPortEnterCritical+0x4e>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	603b      	str	r3, [r7, #0]
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	e7fd      	b.n	8006d82 <vPortEnterCritical+0x4a>
	}
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	2000000c 	.word	0x2000000c
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006da2:	4b12      	ldr	r3, [pc, #72]	@ (8006dec <vPortExitCritical+0x50>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10b      	bne.n	8006dc2 <vPortExitCritical+0x26>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	607b      	str	r3, [r7, #4]
}
 8006dbc:	bf00      	nop
 8006dbe:	bf00      	nop
 8006dc0:	e7fd      	b.n	8006dbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dec <vPortExitCritical+0x50>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	4a08      	ldr	r2, [pc, #32]	@ (8006dec <vPortExitCritical+0x50>)
 8006dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006dcc:	4b07      	ldr	r3, [pc, #28]	@ (8006dec <vPortExitCritical+0x50>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d105      	bne.n	8006de0 <vPortExitCritical+0x44>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006dde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr
 8006dec:	2000000c 	.word	0x2000000c

08006df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006df0:	f3ef 8009 	mrs	r0, PSP
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	4b15      	ldr	r3, [pc, #84]	@ (8006e50 <pxCurrentTCBConst>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	f01e 0f10 	tst.w	lr, #16
 8006e00:	bf08      	it	eq
 8006e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0a:	6010      	str	r0, [r2, #0]
 8006e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006e14:	f380 8811 	msr	BASEPRI, r0
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f7ff fcbe 	bl	80067a0 <vTaskSwitchContext>
 8006e24:	f04f 0000 	mov.w	r0, #0
 8006e28:	f380 8811 	msr	BASEPRI, r0
 8006e2c:	bc09      	pop	{r0, r3}
 8006e2e:	6819      	ldr	r1, [r3, #0]
 8006e30:	6808      	ldr	r0, [r1, #0]
 8006e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e36:	f01e 0f10 	tst.w	lr, #16
 8006e3a:	bf08      	it	eq
 8006e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e40:	f380 8809 	msr	PSP, r0
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	f3af 8000 	nop.w

08006e50 <pxCurrentTCBConst>:
 8006e50:	200006a4 	.word	0x200006a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop

08006e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	607b      	str	r3, [r7, #4]
}
 8006e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e72:	f7ff fbdb 	bl	800662c <xTaskIncrementTick>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e7c:	4b06      	ldr	r3, [pc, #24]	@ (8006e98 <SysTick_Handler+0x40>)
 8006e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	2300      	movs	r3, #0
 8006e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	f383 8811 	msr	BASEPRI, r3
}
 8006e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e90:	bf00      	nop
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	e000ed04 	.word	0xe000ed04

08006e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed0 <vPortSetupTimerInterrupt+0x34>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed4 <vPortSetupTimerInterrupt+0x38>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eac:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed8 <vPortSetupTimerInterrupt+0x3c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8006edc <vPortSetupTimerInterrupt+0x40>)
 8006eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb6:	099b      	lsrs	r3, r3, #6
 8006eb8:	4a09      	ldr	r2, [pc, #36]	@ (8006ee0 <vPortSetupTimerInterrupt+0x44>)
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006ebe:	4b04      	ldr	r3, [pc, #16]	@ (8006ed0 <vPortSetupTimerInterrupt+0x34>)
 8006ec0:	2207      	movs	r2, #7
 8006ec2:	601a      	str	r2, [r3, #0]
}
 8006ec4:	bf00      	nop
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	e000e010 	.word	0xe000e010
 8006ed4:	e000e018 	.word	0xe000e018
 8006ed8:	20000000 	.word	0x20000000
 8006edc:	10624dd3 	.word	0x10624dd3
 8006ee0:	e000e014 	.word	0xe000e014

08006ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006ef4 <vPortEnableVFP+0x10>
 8006ee8:	6801      	ldr	r1, [r0, #0]
 8006eea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006eee:	6001      	str	r1, [r0, #0]
 8006ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ef2:	bf00      	nop
 8006ef4:	e000ed88 	.word	0xe000ed88

08006ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	@ 0x28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f04:	f7ff fae6 	bl	80064d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f08:	4b5c      	ldr	r3, [pc, #368]	@ (800707c <pvPortMalloc+0x184>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f10:	f000 f924 	bl	800715c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f14:	4b5a      	ldr	r3, [pc, #360]	@ (8007080 <pvPortMalloc+0x188>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 8095 	bne.w	800704c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d01e      	beq.n	8006f66 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006f28:	2208      	movs	r2, #8
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d015      	beq.n	8006f66 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f023 0307 	bic.w	r3, r3, #7
 8006f40:	3308      	adds	r3, #8
 8006f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00b      	beq.n	8006f66 <pvPortMalloc+0x6e>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	617b      	str	r3, [r7, #20]
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	e7fd      	b.n	8006f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d06f      	beq.n	800704c <pvPortMalloc+0x154>
 8006f6c:	4b45      	ldr	r3, [pc, #276]	@ (8007084 <pvPortMalloc+0x18c>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d86a      	bhi.n	800704c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f76:	4b44      	ldr	r3, [pc, #272]	@ (8007088 <pvPortMalloc+0x190>)
 8006f78:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f7a:	4b43      	ldr	r3, [pc, #268]	@ (8007088 <pvPortMalloc+0x190>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f80:	e004      	b.n	8006f8c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d903      	bls.n	8006f9e <pvPortMalloc+0xa6>
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f1      	bne.n	8006f82 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f9e:	4b37      	ldr	r3, [pc, #220]	@ (800707c <pvPortMalloc+0x184>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d051      	beq.n	800704c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2208      	movs	r2, #8
 8006fae:	4413      	add	r3, r2
 8006fb0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	1ad2      	subs	r2, r2, r3
 8006fc2:	2308      	movs	r3, #8
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d920      	bls.n	800700c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4413      	add	r3, r2
 8006fd0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00b      	beq.n	8006ff4 <pvPortMalloc+0xfc>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	613b      	str	r3, [r7, #16]
}
 8006fee:	bf00      	nop
 8006ff0:	bf00      	nop
 8006ff2:	e7fd      	b.n	8006ff0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	1ad2      	subs	r2, r2, r3
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007006:	69b8      	ldr	r0, [r7, #24]
 8007008:	f000 f90a 	bl	8007220 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800700c:	4b1d      	ldr	r3, [pc, #116]	@ (8007084 <pvPortMalloc+0x18c>)
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	4a1b      	ldr	r2, [pc, #108]	@ (8007084 <pvPortMalloc+0x18c>)
 8007018:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800701a:	4b1a      	ldr	r3, [pc, #104]	@ (8007084 <pvPortMalloc+0x18c>)
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	4b1b      	ldr	r3, [pc, #108]	@ (800708c <pvPortMalloc+0x194>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	429a      	cmp	r2, r3
 8007024:	d203      	bcs.n	800702e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007026:	4b17      	ldr	r3, [pc, #92]	@ (8007084 <pvPortMalloc+0x18c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a18      	ldr	r2, [pc, #96]	@ (800708c <pvPortMalloc+0x194>)
 800702c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	4b13      	ldr	r3, [pc, #76]	@ (8007080 <pvPortMalloc+0x188>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	431a      	orrs	r2, r3
 8007038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800703c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703e:	2200      	movs	r2, #0
 8007040:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007042:	4b13      	ldr	r3, [pc, #76]	@ (8007090 <pvPortMalloc+0x198>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3301      	adds	r3, #1
 8007048:	4a11      	ldr	r2, [pc, #68]	@ (8007090 <pvPortMalloc+0x198>)
 800704a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800704c:	f7ff fa50 	bl	80064f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00b      	beq.n	8007072 <pvPortMalloc+0x17a>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	60fb      	str	r3, [r7, #12]
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	e7fd      	b.n	800706e <pvPortMalloc+0x176>
	return pvReturn;
 8007072:	69fb      	ldr	r3, [r7, #28]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3728      	adds	r7, #40	@ 0x28
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	200043e0 	.word	0x200043e0
 8007080:	200043f4 	.word	0x200043f4
 8007084:	200043e4 	.word	0x200043e4
 8007088:	200043d8 	.word	0x200043d8
 800708c:	200043e8 	.word	0x200043e8
 8007090:	200043ec 	.word	0x200043ec

08007094 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d04f      	beq.n	8007146 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070a6:	2308      	movs	r3, #8
 80070a8:	425b      	negs	r3, r3
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	4413      	add	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	4b25      	ldr	r3, [pc, #148]	@ (8007150 <vPortFree+0xbc>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4013      	ands	r3, r2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10b      	bne.n	80070da <vPortFree+0x46>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c6:	f383 8811 	msr	BASEPRI, r3
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	f3bf 8f4f 	dsb	sy
 80070d2:	60fb      	str	r3, [r7, #12]
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	e7fd      	b.n	80070d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00b      	beq.n	80070fa <vPortFree+0x66>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	60bb      	str	r3, [r7, #8]
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop
 80070f8:	e7fd      	b.n	80070f6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	4b14      	ldr	r3, [pc, #80]	@ (8007150 <vPortFree+0xbc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4013      	ands	r3, r2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d01e      	beq.n	8007146 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d11a      	bne.n	8007146 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	4b0e      	ldr	r3, [pc, #56]	@ (8007150 <vPortFree+0xbc>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	43db      	mvns	r3, r3
 800711a:	401a      	ands	r2, r3
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007120:	f7ff f9d8 	bl	80064d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	4b0a      	ldr	r3, [pc, #40]	@ (8007154 <vPortFree+0xc0>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4413      	add	r3, r2
 800712e:	4a09      	ldr	r2, [pc, #36]	@ (8007154 <vPortFree+0xc0>)
 8007130:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007132:	6938      	ldr	r0, [r7, #16]
 8007134:	f000 f874 	bl	8007220 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007138:	4b07      	ldr	r3, [pc, #28]	@ (8007158 <vPortFree+0xc4>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3301      	adds	r3, #1
 800713e:	4a06      	ldr	r2, [pc, #24]	@ (8007158 <vPortFree+0xc4>)
 8007140:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007142:	f7ff f9d5 	bl	80064f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007146:	bf00      	nop
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	200043f4 	.word	0x200043f4
 8007154:	200043e4 	.word	0x200043e4
 8007158:	200043f0 	.word	0x200043f0

0800715c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007162:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007166:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007168:	4b27      	ldr	r3, [pc, #156]	@ (8007208 <prvHeapInit+0xac>)
 800716a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f003 0307 	and.w	r3, r3, #7
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00c      	beq.n	8007190 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3307      	adds	r3, #7
 800717a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0307 	bic.w	r3, r3, #7
 8007182:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	4a1f      	ldr	r2, [pc, #124]	@ (8007208 <prvHeapInit+0xac>)
 800718c:	4413      	add	r3, r2
 800718e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007194:	4a1d      	ldr	r2, [pc, #116]	@ (800720c <prvHeapInit+0xb0>)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800719a:	4b1c      	ldr	r3, [pc, #112]	@ (800720c <prvHeapInit+0xb0>)
 800719c:	2200      	movs	r2, #0
 800719e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	4413      	add	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071a8:	2208      	movs	r2, #8
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	1a9b      	subs	r3, r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0307 	bic.w	r3, r3, #7
 80071b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4a15      	ldr	r2, [pc, #84]	@ (8007210 <prvHeapInit+0xb4>)
 80071bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80071be:	4b14      	ldr	r3, [pc, #80]	@ (8007210 <prvHeapInit+0xb4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2200      	movs	r2, #0
 80071c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071c6:	4b12      	ldr	r3, [pc, #72]	@ (8007210 <prvHeapInit+0xb4>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	1ad2      	subs	r2, r2, r3
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007210 <prvHeapInit+0xb4>)
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	4a0a      	ldr	r2, [pc, #40]	@ (8007214 <prvHeapInit+0xb8>)
 80071ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	4a09      	ldr	r2, [pc, #36]	@ (8007218 <prvHeapInit+0xbc>)
 80071f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071f4:	4b09      	ldr	r3, [pc, #36]	@ (800721c <prvHeapInit+0xc0>)
 80071f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80071fa:	601a      	str	r2, [r3, #0]
}
 80071fc:	bf00      	nop
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	200007d8 	.word	0x200007d8
 800720c:	200043d8 	.word	0x200043d8
 8007210:	200043e0 	.word	0x200043e0
 8007214:	200043e8 	.word	0x200043e8
 8007218:	200043e4 	.word	0x200043e4
 800721c:	200043f4 	.word	0x200043f4

08007220 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007228:	4b28      	ldr	r3, [pc, #160]	@ (80072cc <prvInsertBlockIntoFreeList+0xac>)
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	e002      	b.n	8007234 <prvInsertBlockIntoFreeList+0x14>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	429a      	cmp	r2, r3
 800723c:	d8f7      	bhi.n	800722e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	4413      	add	r3, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	429a      	cmp	r2, r3
 800724e:	d108      	bne.n	8007262 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	441a      	add	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	441a      	add	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	429a      	cmp	r2, r3
 8007274:	d118      	bne.n	80072a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	4b15      	ldr	r3, [pc, #84]	@ (80072d0 <prvInsertBlockIntoFreeList+0xb0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d00d      	beq.n	800729e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	441a      	add	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	601a      	str	r2, [r3, #0]
 800729c:	e008      	b.n	80072b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800729e:	4b0c      	ldr	r3, [pc, #48]	@ (80072d0 <prvInsertBlockIntoFreeList+0xb0>)
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	e003      	b.n	80072b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d002      	beq.n	80072be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072be:	bf00      	nop
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	200043d8 	.word	0x200043d8
 80072d0:	200043e0 	.word	0x200043e0

080072d4 <memset>:
 80072d4:	4402      	add	r2, r0
 80072d6:	4603      	mov	r3, r0
 80072d8:	4293      	cmp	r3, r2
 80072da:	d100      	bne.n	80072de <memset+0xa>
 80072dc:	4770      	bx	lr
 80072de:	f803 1b01 	strb.w	r1, [r3], #1
 80072e2:	e7f9      	b.n	80072d8 <memset+0x4>

080072e4 <__errno>:
 80072e4:	4b01      	ldr	r3, [pc, #4]	@ (80072ec <__errno+0x8>)
 80072e6:	6818      	ldr	r0, [r3, #0]
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000010 	.word	0x20000010

080072f0 <__libc_init_array>:
 80072f0:	b570      	push	{r4, r5, r6, lr}
 80072f2:	4d0d      	ldr	r5, [pc, #52]	@ (8007328 <__libc_init_array+0x38>)
 80072f4:	4c0d      	ldr	r4, [pc, #52]	@ (800732c <__libc_init_array+0x3c>)
 80072f6:	1b64      	subs	r4, r4, r5
 80072f8:	10a4      	asrs	r4, r4, #2
 80072fa:	2600      	movs	r6, #0
 80072fc:	42a6      	cmp	r6, r4
 80072fe:	d109      	bne.n	8007314 <__libc_init_array+0x24>
 8007300:	4d0b      	ldr	r5, [pc, #44]	@ (8007330 <__libc_init_array+0x40>)
 8007302:	4c0c      	ldr	r4, [pc, #48]	@ (8007334 <__libc_init_array+0x44>)
 8007304:	f000 fa16 	bl	8007734 <_init>
 8007308:	1b64      	subs	r4, r4, r5
 800730a:	10a4      	asrs	r4, r4, #2
 800730c:	2600      	movs	r6, #0
 800730e:	42a6      	cmp	r6, r4
 8007310:	d105      	bne.n	800731e <__libc_init_array+0x2e>
 8007312:	bd70      	pop	{r4, r5, r6, pc}
 8007314:	f855 3b04 	ldr.w	r3, [r5], #4
 8007318:	4798      	blx	r3
 800731a:	3601      	adds	r6, #1
 800731c:	e7ee      	b.n	80072fc <__libc_init_array+0xc>
 800731e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007322:	4798      	blx	r3
 8007324:	3601      	adds	r6, #1
 8007326:	e7f2      	b.n	800730e <__libc_init_array+0x1e>
 8007328:	08007870 	.word	0x08007870
 800732c:	08007870 	.word	0x08007870
 8007330:	08007870 	.word	0x08007870
 8007334:	08007874 	.word	0x08007874

08007338 <log>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	ed2d 8b02 	vpush	{d8}
 800733e:	ec55 4b10 	vmov	r4, r5, d0
 8007342:	f000 f841 	bl	80073c8 <__ieee754_log>
 8007346:	4622      	mov	r2, r4
 8007348:	462b      	mov	r3, r5
 800734a:	4620      	mov	r0, r4
 800734c:	4629      	mov	r1, r5
 800734e:	eeb0 8a40 	vmov.f32	s16, s0
 8007352:	eef0 8a60 	vmov.f32	s17, s1
 8007356:	f7f9 fb99 	bl	8000a8c <__aeabi_dcmpun>
 800735a:	b998      	cbnz	r0, 8007384 <log+0x4c>
 800735c:	2200      	movs	r2, #0
 800735e:	2300      	movs	r3, #0
 8007360:	4620      	mov	r0, r4
 8007362:	4629      	mov	r1, r5
 8007364:	f7f9 fb88 	bl	8000a78 <__aeabi_dcmpgt>
 8007368:	b960      	cbnz	r0, 8007384 <log+0x4c>
 800736a:	2200      	movs	r2, #0
 800736c:	2300      	movs	r3, #0
 800736e:	4620      	mov	r0, r4
 8007370:	4629      	mov	r1, r5
 8007372:	f7f9 fb59 	bl	8000a28 <__aeabi_dcmpeq>
 8007376:	b160      	cbz	r0, 8007392 <log+0x5a>
 8007378:	f7ff ffb4 	bl	80072e4 <__errno>
 800737c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80073a8 <log+0x70>
 8007380:	2322      	movs	r3, #34	@ 0x22
 8007382:	6003      	str	r3, [r0, #0]
 8007384:	eeb0 0a48 	vmov.f32	s0, s16
 8007388:	eef0 0a68 	vmov.f32	s1, s17
 800738c:	ecbd 8b02 	vpop	{d8}
 8007390:	bd38      	pop	{r3, r4, r5, pc}
 8007392:	f7ff ffa7 	bl	80072e4 <__errno>
 8007396:	ecbd 8b02 	vpop	{d8}
 800739a:	2321      	movs	r3, #33	@ 0x21
 800739c:	6003      	str	r3, [r0, #0]
 800739e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073a2:	4803      	ldr	r0, [pc, #12]	@ (80073b0 <log+0x78>)
 80073a4:	f000 b808 	b.w	80073b8 <nan>
 80073a8:	00000000 	.word	0x00000000
 80073ac:	fff00000 	.word	0xfff00000
 80073b0:	08007864 	.word	0x08007864
 80073b4:	00000000 	.word	0x00000000

080073b8 <nan>:
 80073b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80073c0 <nan+0x8>
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	00000000 	.word	0x00000000
 80073c4:	7ff80000 	.word	0x7ff80000

080073c8 <__ieee754_log>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	ec51 0b10 	vmov	r0, r1, d0
 80073d0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80073d4:	b087      	sub	sp, #28
 80073d6:	460d      	mov	r5, r1
 80073d8:	da26      	bge.n	8007428 <__ieee754_log+0x60>
 80073da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80073de:	4303      	orrs	r3, r0
 80073e0:	4602      	mov	r2, r0
 80073e2:	d10a      	bne.n	80073fa <__ieee754_log+0x32>
 80073e4:	49ce      	ldr	r1, [pc, #824]	@ (8007720 <__ieee754_log+0x358>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	2300      	movs	r3, #0
 80073ea:	2000      	movs	r0, #0
 80073ec:	f7f9 f9de 	bl	80007ac <__aeabi_ddiv>
 80073f0:	ec41 0b10 	vmov	d0, r0, r1
 80073f4:	b007      	add	sp, #28
 80073f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fa:	2900      	cmp	r1, #0
 80073fc:	da05      	bge.n	800740a <__ieee754_log+0x42>
 80073fe:	460b      	mov	r3, r1
 8007400:	f7f8 fef2 	bl	80001e8 <__aeabi_dsub>
 8007404:	2200      	movs	r2, #0
 8007406:	2300      	movs	r3, #0
 8007408:	e7f0      	b.n	80073ec <__ieee754_log+0x24>
 800740a:	4bc6      	ldr	r3, [pc, #792]	@ (8007724 <__ieee754_log+0x35c>)
 800740c:	2200      	movs	r2, #0
 800740e:	f7f9 f8a3 	bl	8000558 <__aeabi_dmul>
 8007412:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8007416:	460d      	mov	r5, r1
 8007418:	4ac3      	ldr	r2, [pc, #780]	@ (8007728 <__ieee754_log+0x360>)
 800741a:	4295      	cmp	r5, r2
 800741c:	dd06      	ble.n	800742c <__ieee754_log+0x64>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	f7f8 fee3 	bl	80001ec <__adddf3>
 8007426:	e7e3      	b.n	80073f0 <__ieee754_log+0x28>
 8007428:	2300      	movs	r3, #0
 800742a:	e7f5      	b.n	8007418 <__ieee754_log+0x50>
 800742c:	152c      	asrs	r4, r5, #20
 800742e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8007432:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8007436:	441c      	add	r4, r3
 8007438:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800743c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8007440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007444:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8007448:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800744c:	ea42 0105 	orr.w	r1, r2, r5
 8007450:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8007454:	2200      	movs	r2, #0
 8007456:	4bb5      	ldr	r3, [pc, #724]	@ (800772c <__ieee754_log+0x364>)
 8007458:	f7f8 fec6 	bl	80001e8 <__aeabi_dsub>
 800745c:	1cab      	adds	r3, r5, #2
 800745e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007462:	2b02      	cmp	r3, #2
 8007464:	4682      	mov	sl, r0
 8007466:	468b      	mov	fp, r1
 8007468:	f04f 0200 	mov.w	r2, #0
 800746c:	dc53      	bgt.n	8007516 <__ieee754_log+0x14e>
 800746e:	2300      	movs	r3, #0
 8007470:	f7f9 fada 	bl	8000a28 <__aeabi_dcmpeq>
 8007474:	b1d0      	cbz	r0, 80074ac <__ieee754_log+0xe4>
 8007476:	2c00      	cmp	r4, #0
 8007478:	f000 8120 	beq.w	80076bc <__ieee754_log+0x2f4>
 800747c:	4620      	mov	r0, r4
 800747e:	f7f9 f801 	bl	8000484 <__aeabi_i2d>
 8007482:	a391      	add	r3, pc, #580	@ (adr r3, 80076c8 <__ieee754_log+0x300>)
 8007484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007488:	4606      	mov	r6, r0
 800748a:	460f      	mov	r7, r1
 800748c:	f7f9 f864 	bl	8000558 <__aeabi_dmul>
 8007490:	a38f      	add	r3, pc, #572	@ (adr r3, 80076d0 <__ieee754_log+0x308>)
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	4604      	mov	r4, r0
 8007498:	460d      	mov	r5, r1
 800749a:	4630      	mov	r0, r6
 800749c:	4639      	mov	r1, r7
 800749e:	f7f9 f85b 	bl	8000558 <__aeabi_dmul>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4620      	mov	r0, r4
 80074a8:	4629      	mov	r1, r5
 80074aa:	e7ba      	b.n	8007422 <__ieee754_log+0x5a>
 80074ac:	a38a      	add	r3, pc, #552	@ (adr r3, 80076d8 <__ieee754_log+0x310>)
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	4650      	mov	r0, sl
 80074b4:	4659      	mov	r1, fp
 80074b6:	f7f9 f84f 	bl	8000558 <__aeabi_dmul>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	2000      	movs	r0, #0
 80074c0:	499b      	ldr	r1, [pc, #620]	@ (8007730 <__ieee754_log+0x368>)
 80074c2:	f7f8 fe91 	bl	80001e8 <__aeabi_dsub>
 80074c6:	4652      	mov	r2, sl
 80074c8:	4606      	mov	r6, r0
 80074ca:	460f      	mov	r7, r1
 80074cc:	465b      	mov	r3, fp
 80074ce:	4650      	mov	r0, sl
 80074d0:	4659      	mov	r1, fp
 80074d2:	f7f9 f841 	bl	8000558 <__aeabi_dmul>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4630      	mov	r0, r6
 80074dc:	4639      	mov	r1, r7
 80074de:	f7f9 f83b 	bl	8000558 <__aeabi_dmul>
 80074e2:	4606      	mov	r6, r0
 80074e4:	460f      	mov	r7, r1
 80074e6:	b914      	cbnz	r4, 80074ee <__ieee754_log+0x126>
 80074e8:	4632      	mov	r2, r6
 80074ea:	463b      	mov	r3, r7
 80074ec:	e0a0      	b.n	8007630 <__ieee754_log+0x268>
 80074ee:	4620      	mov	r0, r4
 80074f0:	f7f8 ffc8 	bl	8000484 <__aeabi_i2d>
 80074f4:	a374      	add	r3, pc, #464	@ (adr r3, 80076c8 <__ieee754_log+0x300>)
 80074f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fa:	4680      	mov	r8, r0
 80074fc:	4689      	mov	r9, r1
 80074fe:	f7f9 f82b 	bl	8000558 <__aeabi_dmul>
 8007502:	a373      	add	r3, pc, #460	@ (adr r3, 80076d0 <__ieee754_log+0x308>)
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	4604      	mov	r4, r0
 800750a:	460d      	mov	r5, r1
 800750c:	4640      	mov	r0, r8
 800750e:	4649      	mov	r1, r9
 8007510:	f7f9 f822 	bl	8000558 <__aeabi_dmul>
 8007514:	e0a5      	b.n	8007662 <__ieee754_log+0x29a>
 8007516:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800751a:	f7f8 fe67 	bl	80001ec <__adddf3>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4650      	mov	r0, sl
 8007524:	4659      	mov	r1, fp
 8007526:	f7f9 f941 	bl	80007ac <__aeabi_ddiv>
 800752a:	e9cd 0100 	strd	r0, r1, [sp]
 800752e:	4620      	mov	r0, r4
 8007530:	f7f8 ffa8 	bl	8000484 <__aeabi_i2d>
 8007534:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007538:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800753c:	4610      	mov	r0, r2
 800753e:	4619      	mov	r1, r3
 8007540:	f7f9 f80a 	bl	8000558 <__aeabi_dmul>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800754c:	f7f9 f804 	bl	8000558 <__aeabi_dmul>
 8007550:	a363      	add	r3, pc, #396	@ (adr r3, 80076e0 <__ieee754_log+0x318>)
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	4680      	mov	r8, r0
 8007558:	4689      	mov	r9, r1
 800755a:	f7f8 fffd 	bl	8000558 <__aeabi_dmul>
 800755e:	a362      	add	r3, pc, #392	@ (adr r3, 80076e8 <__ieee754_log+0x320>)
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	f7f8 fe42 	bl	80001ec <__adddf3>
 8007568:	4642      	mov	r2, r8
 800756a:	464b      	mov	r3, r9
 800756c:	f7f8 fff4 	bl	8000558 <__aeabi_dmul>
 8007570:	a35f      	add	r3, pc, #380	@ (adr r3, 80076f0 <__ieee754_log+0x328>)
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	f7f8 fe39 	bl	80001ec <__adddf3>
 800757a:	4642      	mov	r2, r8
 800757c:	464b      	mov	r3, r9
 800757e:	f7f8 ffeb 	bl	8000558 <__aeabi_dmul>
 8007582:	a35d      	add	r3, pc, #372	@ (adr r3, 80076f8 <__ieee754_log+0x330>)
 8007584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007588:	f7f8 fe30 	bl	80001ec <__adddf3>
 800758c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007590:	f7f8 ffe2 	bl	8000558 <__aeabi_dmul>
 8007594:	a35a      	add	r3, pc, #360	@ (adr r3, 8007700 <__ieee754_log+0x338>)
 8007596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800759e:	4640      	mov	r0, r8
 80075a0:	4649      	mov	r1, r9
 80075a2:	f7f8 ffd9 	bl	8000558 <__aeabi_dmul>
 80075a6:	a358      	add	r3, pc, #352	@ (adr r3, 8007708 <__ieee754_log+0x340>)
 80075a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ac:	f7f8 fe1e 	bl	80001ec <__adddf3>
 80075b0:	4642      	mov	r2, r8
 80075b2:	464b      	mov	r3, r9
 80075b4:	f7f8 ffd0 	bl	8000558 <__aeabi_dmul>
 80075b8:	a355      	add	r3, pc, #340	@ (adr r3, 8007710 <__ieee754_log+0x348>)
 80075ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075be:	f7f8 fe15 	bl	80001ec <__adddf3>
 80075c2:	4642      	mov	r2, r8
 80075c4:	464b      	mov	r3, r9
 80075c6:	f7f8 ffc7 	bl	8000558 <__aeabi_dmul>
 80075ca:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80075d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075da:	f7f8 fe07 	bl	80001ec <__adddf3>
 80075de:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80075e2:	3551      	adds	r5, #81	@ 0x51
 80075e4:	4335      	orrs	r5, r6
 80075e6:	2d00      	cmp	r5, #0
 80075e8:	4680      	mov	r8, r0
 80075ea:	4689      	mov	r9, r1
 80075ec:	dd48      	ble.n	8007680 <__ieee754_log+0x2b8>
 80075ee:	4b50      	ldr	r3, [pc, #320]	@ (8007730 <__ieee754_log+0x368>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	4650      	mov	r0, sl
 80075f4:	4659      	mov	r1, fp
 80075f6:	f7f8 ffaf 	bl	8000558 <__aeabi_dmul>
 80075fa:	4652      	mov	r2, sl
 80075fc:	465b      	mov	r3, fp
 80075fe:	f7f8 ffab 	bl	8000558 <__aeabi_dmul>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	4606      	mov	r6, r0
 8007608:	460f      	mov	r7, r1
 800760a:	4640      	mov	r0, r8
 800760c:	4649      	mov	r1, r9
 800760e:	f7f8 fded 	bl	80001ec <__adddf3>
 8007612:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007616:	f7f8 ff9f 	bl	8000558 <__aeabi_dmul>
 800761a:	4680      	mov	r8, r0
 800761c:	4689      	mov	r9, r1
 800761e:	b964      	cbnz	r4, 800763a <__ieee754_log+0x272>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4630      	mov	r0, r6
 8007626:	4639      	mov	r1, r7
 8007628:	f7f8 fdde 	bl	80001e8 <__aeabi_dsub>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4650      	mov	r0, sl
 8007632:	4659      	mov	r1, fp
 8007634:	f7f8 fdd8 	bl	80001e8 <__aeabi_dsub>
 8007638:	e6da      	b.n	80073f0 <__ieee754_log+0x28>
 800763a:	a323      	add	r3, pc, #140	@ (adr r3, 80076c8 <__ieee754_log+0x300>)
 800763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007644:	f7f8 ff88 	bl	8000558 <__aeabi_dmul>
 8007648:	a321      	add	r3, pc, #132	@ (adr r3, 80076d0 <__ieee754_log+0x308>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	4604      	mov	r4, r0
 8007650:	460d      	mov	r5, r1
 8007652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007656:	f7f8 ff7f 	bl	8000558 <__aeabi_dmul>
 800765a:	4642      	mov	r2, r8
 800765c:	464b      	mov	r3, r9
 800765e:	f7f8 fdc5 	bl	80001ec <__adddf3>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4630      	mov	r0, r6
 8007668:	4639      	mov	r1, r7
 800766a:	f7f8 fdbd 	bl	80001e8 <__aeabi_dsub>
 800766e:	4652      	mov	r2, sl
 8007670:	465b      	mov	r3, fp
 8007672:	f7f8 fdb9 	bl	80001e8 <__aeabi_dsub>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4620      	mov	r0, r4
 800767c:	4629      	mov	r1, r5
 800767e:	e7d9      	b.n	8007634 <__ieee754_log+0x26c>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4650      	mov	r0, sl
 8007686:	4659      	mov	r1, fp
 8007688:	f7f8 fdae 	bl	80001e8 <__aeabi_dsub>
 800768c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007690:	f7f8 ff62 	bl	8000558 <__aeabi_dmul>
 8007694:	4606      	mov	r6, r0
 8007696:	460f      	mov	r7, r1
 8007698:	2c00      	cmp	r4, #0
 800769a:	f43f af25 	beq.w	80074e8 <__ieee754_log+0x120>
 800769e:	a30a      	add	r3, pc, #40	@ (adr r3, 80076c8 <__ieee754_log+0x300>)
 80076a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076a8:	f7f8 ff56 	bl	8000558 <__aeabi_dmul>
 80076ac:	a308      	add	r3, pc, #32	@ (adr r3, 80076d0 <__ieee754_log+0x308>)
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	4604      	mov	r4, r0
 80076b4:	460d      	mov	r5, r1
 80076b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ba:	e729      	b.n	8007510 <__ieee754_log+0x148>
 80076bc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8007718 <__ieee754_log+0x350>
 80076c0:	e698      	b.n	80073f4 <__ieee754_log+0x2c>
 80076c2:	bf00      	nop
 80076c4:	f3af 8000 	nop.w
 80076c8:	fee00000 	.word	0xfee00000
 80076cc:	3fe62e42 	.word	0x3fe62e42
 80076d0:	35793c76 	.word	0x35793c76
 80076d4:	3dea39ef 	.word	0x3dea39ef
 80076d8:	55555555 	.word	0x55555555
 80076dc:	3fd55555 	.word	0x3fd55555
 80076e0:	df3e5244 	.word	0xdf3e5244
 80076e4:	3fc2f112 	.word	0x3fc2f112
 80076e8:	96cb03de 	.word	0x96cb03de
 80076ec:	3fc74664 	.word	0x3fc74664
 80076f0:	94229359 	.word	0x94229359
 80076f4:	3fd24924 	.word	0x3fd24924
 80076f8:	55555593 	.word	0x55555593
 80076fc:	3fe55555 	.word	0x3fe55555
 8007700:	d078c69f 	.word	0xd078c69f
 8007704:	3fc39a09 	.word	0x3fc39a09
 8007708:	1d8e78af 	.word	0x1d8e78af
 800770c:	3fcc71c5 	.word	0x3fcc71c5
 8007710:	9997fa04 	.word	0x9997fa04
 8007714:	3fd99999 	.word	0x3fd99999
	...
 8007720:	c3500000 	.word	0xc3500000
 8007724:	43500000 	.word	0x43500000
 8007728:	7fefffff 	.word	0x7fefffff
 800772c:	3ff00000 	.word	0x3ff00000
 8007730:	3fe00000 	.word	0x3fe00000

08007734 <_init>:
 8007734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007736:	bf00      	nop
 8007738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773a:	bc08      	pop	{r3}
 800773c:	469e      	mov	lr, r3
 800773e:	4770      	bx	lr

08007740 <_fini>:
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	bf00      	nop
 8007744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007746:	bc08      	pop	{r3}
 8007748:	469e      	mov	lr, r3
 800774a:	4770      	bx	lr
