
RFC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000935c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080094fc  080094fc  0000a4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009618  08009618  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  08009618  08009618  0000a618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009620  08009620  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009620  08009620  0000a620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009624  08009624  0000a624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08009628  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004620  20000068  08009690  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004688  08009690  0000b688  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b262  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047cc  00000000  00000000  000262fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  0002aac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000146e  00000000  00000000  0002c518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c78a  00000000  00000000  0002d986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023125  00000000  00000000  0004a110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7d1f  00000000  00000000  0006d235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114f54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070d8  00000000  00000000  00114f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0011c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080094e4 	.word	0x080094e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080094e4 	.word	0x080094e4

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_ldivmod>:
 8000b98:	b97b      	cbnz	r3, 8000bba <__aeabi_ldivmod+0x22>
 8000b9a:	b972      	cbnz	r2, 8000bba <__aeabi_ldivmod+0x22>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bfbe      	ittt	lt
 8000ba0:	2000      	movlt	r0, #0
 8000ba2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ba6:	e006      	blt.n	8000bb6 <__aeabi_ldivmod+0x1e>
 8000ba8:	bf08      	it	eq
 8000baa:	2800      	cmpeq	r0, #0
 8000bac:	bf1c      	itt	ne
 8000bae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb6:	f000 b9b5 	b.w	8000f24 <__aeabi_idiv0>
 8000bba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc2:	2900      	cmp	r1, #0
 8000bc4:	db09      	blt.n	8000bda <__aeabi_ldivmod+0x42>
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db1a      	blt.n	8000c00 <__aeabi_ldivmod+0x68>
 8000bca:	f000 f84d 	bl	8000c68 <__udivmoddi4>
 8000bce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd6:	b004      	add	sp, #16
 8000bd8:	4770      	bx	lr
 8000bda:	4240      	negs	r0, r0
 8000bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db1b      	blt.n	8000c1c <__aeabi_ldivmod+0x84>
 8000be4:	f000 f840 	bl	8000c68 <__udivmoddi4>
 8000be8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	4252      	negs	r2, r2
 8000bfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bfe:	4770      	bx	lr
 8000c00:	4252      	negs	r2, r2
 8000c02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c06:	f000 f82f 	bl	8000c68 <__udivmoddi4>
 8000c0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c12:	b004      	add	sp, #16
 8000c14:	4240      	negs	r0, r0
 8000c16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1a:	4770      	bx	lr
 8000c1c:	4252      	negs	r2, r2
 8000c1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c22:	f000 f821 	bl	8000c68 <__udivmoddi4>
 8000c26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2e:	b004      	add	sp, #16
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96a 	b.w	8000f24 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	4613      	mov	r3, r2
 8000f36:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <BMP280_write+0x50>)
 8000f3e:	f003 fd5f 	bl	8004a00 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000f4c:	1df9      	adds	r1, r7, #7
 8000f4e:	2364      	movs	r3, #100	@ 0x64
 8000f50:	2201      	movs	r2, #1
 8000f52:	480a      	ldr	r0, [pc, #40]	@ (8000f7c <BMP280_write+0x54>)
 8000f54:	f005 faa5 	bl	80064a2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000f58:	1db9      	adds	r1, r7, #6
 8000f5a:	2364      	movs	r3, #100	@ 0x64
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <BMP280_write+0x54>)
 8000f60:	f005 fa9f 	bl	80064a2 <HAL_SPI_Transmit>

	BMP280_unselect();
 8000f64:	2201      	movs	r2, #1
 8000f66:	2104      	movs	r1, #4
 8000f68:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <BMP280_write+0x50>)
 8000f6a:	f003 fd49 	bl	8004a00 <HAL_GPIO_WritePin>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	200005f0 	.word	0x200005f0

08000f80 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000f94:	2200      	movs	r2, #0
 8000f96:	2104      	movs	r1, #4
 8000f98:	480f      	ldr	r0, [pc, #60]	@ (8000fd8 <BMP280_read+0x58>)
 8000f9a:	f003 fd31 	bl	8004a00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000f9e:	f107 010f 	add.w	r1, r7, #15
 8000fa2:	2364      	movs	r3, #100	@ 0x64
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	480d      	ldr	r0, [pc, #52]	@ (8000fdc <BMP280_read+0x5c>)
 8000fa8:	f005 fa7b 	bl	80064a2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8000fac:	f107 010f 	add.w	r1, r7, #15
 8000fb0:	2364      	movs	r3, #100	@ 0x64
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4809      	ldr	r0, [pc, #36]	@ (8000fdc <BMP280_read+0x5c>)
 8000fb6:	f005 fbb8 	bl	800672a <HAL_SPI_Receive>
	BMP280_unselect();
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4806      	ldr	r0, [pc, #24]	@ (8000fd8 <BMP280_read+0x58>)
 8000fc0:	f003 fd1e 	bl	8004a00 <HAL_GPIO_WritePin>

	BMP280.Temp = 2500;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <BMP280_read+0x60>)
 8000fc6:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000fca:	605a      	str	r2, [r3, #4]

	return Buffer;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	200005f0 	.word	0x200005f0
 8000fe0:	20000084 	.word	0x20000084

08000fe4 <BMP280_config>:

void BMP280_config(void){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8000fe8:	2157      	movs	r1, #87	@ 0x57
 8000fea:	20f4      	movs	r0, #244	@ 0xf4
 8000fec:	f7ff ff9c 	bl	8000f28 <BMP280_write>
	BMP280_write(config, 0x10);
 8000ff0:	2110      	movs	r1, #16
 8000ff2:	20f5      	movs	r0, #245	@ 0xf5
 8000ff4:	f7ff ff98 	bl	8000f28 <BMP280_write>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8001002:	2388      	movs	r3, #136	@ 0x88
 8001004:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800101a:	2200      	movs	r2, #0
 800101c:	2104      	movs	r1, #4
 800101e:	4843      	ldr	r0, [pc, #268]	@ (800112c <BMP280_calibrationData+0x130>)
 8001020:	f003 fcee 	bl	8004a00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8001024:	f107 011f 	add.w	r1, r7, #31
 8001028:	2364      	movs	r3, #100	@ 0x64
 800102a:	2201      	movs	r2, #1
 800102c:	4840      	ldr	r0, [pc, #256]	@ (8001130 <BMP280_calibrationData+0x134>)
 800102e:	f005 fa38 	bl	80064a2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8001032:	1d39      	adds	r1, r7, #4
 8001034:	2364      	movs	r3, #100	@ 0x64
 8001036:	2218      	movs	r2, #24
 8001038:	483d      	ldr	r0, [pc, #244]	@ (8001130 <BMP280_calibrationData+0x134>)
 800103a:	f005 fb76 	bl	800672a <HAL_SPI_Receive>
	BMP280_unselect();
 800103e:	2201      	movs	r2, #1
 8001040:	2104      	movs	r1, #4
 8001042:	483a      	ldr	r0, [pc, #232]	@ (800112c <BMP280_calibrationData+0x130>)
 8001044:	f003 fcdc 	bl	8004a00 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8001048:	797b      	ldrb	r3, [r7, #5]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	793b      	ldrb	r3, [r7, #4]
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21b      	sxth	r3, r3
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b36      	ldr	r3, [pc, #216]	@ (8001134 <BMP280_calibrationData+0x138>)
 800105a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21a      	sxth	r2, r3
 800106a:	4b33      	ldr	r3, [pc, #204]	@ (8001138 <BMP280_calibrationData+0x13c>)
 800106c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 800106e:	7a7b      	ldrb	r3, [r7, #9]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	7a3b      	ldrb	r3, [r7, #8]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21a      	sxth	r2, r3
 800107c:	4b2f      	ldr	r3, [pc, #188]	@ (800113c <BMP280_calibrationData+0x140>)
 800107e:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8001080:	7afb      	ldrb	r3, [r7, #11]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	b21a      	sxth	r2, r3
 8001086:	7abb      	ldrb	r3, [r7, #10]
 8001088:	b21b      	sxth	r3, r3
 800108a:	4313      	orrs	r3, r2
 800108c:	b21b      	sxth	r3, r3
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b2b      	ldr	r3, [pc, #172]	@ (8001140 <BMP280_calibrationData+0x144>)
 8001092:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8001094:	7b7b      	ldrb	r3, [r7, #13]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b21a      	sxth	r2, r3
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <BMP280_calibrationData+0x148>)
 80010a4:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	4b24      	ldr	r3, [pc, #144]	@ (8001148 <BMP280_calibrationData+0x14c>)
 80010b6:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 80010b8:	7c7b      	ldrb	r3, [r7, #17]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	7c3b      	ldrb	r3, [r7, #16]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	4b21      	ldr	r3, [pc, #132]	@ (800114c <BMP280_calibrationData+0x150>)
 80010c8:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 80010ca:	7cfb      	ldrb	r3, [r7, #19]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	7cbb      	ldrb	r3, [r7, #18]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <BMP280_calibrationData+0x154>)
 80010da:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 80010dc:	7d7b      	ldrb	r3, [r7, #21]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	7d3b      	ldrb	r3, [r7, #20]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <BMP280_calibrationData+0x158>)
 80010ec:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	7dbb      	ldrb	r3, [r7, #22]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <BMP280_calibrationData+0x15c>)
 80010fe:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8001100:	7e7b      	ldrb	r3, [r7, #25]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b21a      	sxth	r2, r3
 8001106:	7e3b      	ldrb	r3, [r7, #24]
 8001108:	b21b      	sxth	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	b21a      	sxth	r2, r3
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <BMP280_calibrationData+0x160>)
 8001110:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 8001112:	7efb      	ldrb	r3, [r7, #27]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21a      	sxth	r2, r3
 8001118:	7ebb      	ldrb	r3, [r7, #26]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21a      	sxth	r2, r3
 8001120:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <BMP280_calibrationData+0x164>)
 8001122:	801a      	strh	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40020400 	.word	0x40020400
 8001130:	200005f0 	.word	0x200005f0
 8001134:	20000098 	.word	0x20000098
 8001138:	2000009c 	.word	0x2000009c
 800113c:	2000009e 	.word	0x2000009e
 8001140:	2000009a 	.word	0x2000009a
 8001144:	200000a0 	.word	0x200000a0
 8001148:	200000a2 	.word	0x200000a2
 800114c:	200000a4 	.word	0x200000a4
 8001150:	200000a6 	.word	0x200000a6
 8001154:	200000a8 	.word	0x200000a8
 8001158:	200000aa 	.word	0x200000aa
 800115c:	200000ac 	.word	0x200000ac
 8001160:	200000ae 	.word	0x200000ae

08001164 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 800116a:	23f7      	movs	r3, #247	@ 0xf7
 800116c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	2300      	movs	r3, #0
 8001174:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8001176:	2200      	movs	r2, #0
 8001178:	2104      	movs	r1, #4
 800117a:	4817      	ldr	r0, [pc, #92]	@ (80011d8 <BMP280_readRawValues+0x74>)
 800117c:	f003 fc40 	bl	8004a00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8001180:	1df9      	adds	r1, r7, #7
 8001182:	2364      	movs	r3, #100	@ 0x64
 8001184:	2201      	movs	r2, #1
 8001186:	4815      	ldr	r0, [pc, #84]	@ (80011dc <BMP280_readRawValues+0x78>)
 8001188:	f005 f98b 	bl	80064a2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 800118c:	4639      	mov	r1, r7
 800118e:	2364      	movs	r3, #100	@ 0x64
 8001190:	2206      	movs	r2, #6
 8001192:	4812      	ldr	r0, [pc, #72]	@ (80011dc <BMP280_readRawValues+0x78>)
 8001194:	f005 fac9 	bl	800672a <HAL_SPI_Receive>
	BMP280_unselect();
 8001198:	2201      	movs	r2, #1
 800119a:	2104      	movs	r1, #4
 800119c:	480e      	ldr	r0, [pc, #56]	@ (80011d8 <BMP280_readRawValues+0x74>)
 800119e:	f003 fc2f 	bl	8004a00 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80011a2:	783b      	ldrb	r3, [r7, #0]
 80011a4:	031a      	lsls	r2, r3, #12
 80011a6:	787b      	ldrb	r3, [r7, #1]
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4313      	orrs	r3, r2
 80011ac:	78ba      	ldrb	r2, [r7, #2]
 80011ae:	0912      	lsrs	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	4313      	orrs	r3, r2
 80011b4:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <BMP280_readRawValues+0x7c>)
 80011b6:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	031a      	lsls	r2, r3, #12
 80011bc:	793b      	ldrb	r3, [r7, #4]
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	4313      	orrs	r3, r2
 80011c2:	797a      	ldrb	r2, [r7, #5]
 80011c4:	0912      	lsrs	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	4313      	orrs	r3, r2
 80011ca:	4a06      	ldr	r2, [pc, #24]	@ (80011e4 <BMP280_readRawValues+0x80>)
 80011cc:	6013      	str	r3, [r2, #0]
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40020400 	.word	0x40020400
 80011dc:	200005f0 	.word	0x200005f0
 80011e0:	200000b4 	.word	0x200000b4
 80011e4:	200000b0 	.word	0x200000b0

080011e8 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <BMP280_measureT+0x74>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	10da      	asrs	r2, r3, #3
 80011f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <BMP280_measureT+0x78>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	4a19      	ldr	r2, [pc, #100]	@ (8001264 <BMP280_measureT+0x7c>)
 8001200:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	12db      	asrs	r3, r3, #11
 800120a:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	111b      	asrs	r3, r3, #4
 8001210:	4a13      	ldr	r2, [pc, #76]	@ (8001260 <BMP280_measureT+0x78>)
 8001212:	8812      	ldrh	r2, [r2, #0]
 8001214:	1a9b      	subs	r3, r3, r2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	1112      	asrs	r2, r2, #4
 800121a:	4911      	ldr	r1, [pc, #68]	@ (8001260 <BMP280_measureT+0x78>)
 800121c:	8809      	ldrh	r1, [r1, #0]
 800121e:	1a52      	subs	r2, r2, r1
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	131b      	asrs	r3, r3, #12
 8001226:	4a10      	ldr	r2, [pc, #64]	@ (8001268 <BMP280_measureT+0x80>)
 8001228:	f9b2 2000 	ldrsh.w	r2, [r2]
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	139b      	asrs	r3, r3, #14
 8001232:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4413      	add	r3, r2
 800123a:	4a0c      	ldr	r2, [pc, #48]	@ (800126c <BMP280_measureT+0x84>)
 800123c:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800123e:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <BMP280_measureT+0x84>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	3380      	adds	r3, #128	@ 0x80
 800124a:	121b      	asrs	r3, r3, #8
 800124c:	60fb      	str	r3, [r7, #12]
	return T;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	200000b0 	.word	0x200000b0
 8001260:	20000098 	.word	0x20000098
 8001264:	2000009c 	.word	0x2000009c
 8001268:	2000009e 	.word	0x2000009e
 800126c:	200000b8 	.word	0x200000b8

08001270 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8001270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001274:	b0ca      	sub	sp, #296	@ 0x128
 8001276:	af00      	add	r7, sp, #0
 8001278:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800127c:	4baf      	ldr	r3, [pc, #700]	@ (800153c <BMP280_measureP+0x2cc>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	17da      	asrs	r2, r3, #31
 8001282:	461c      	mov	r4, r3
 8001284:	4615      	mov	r5, r2
 8001286:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800128a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800128e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001292:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001296:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800129a:	fb03 f102 	mul.w	r1, r3, r2
 800129e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80012a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012a6:	fb02 f303 	mul.w	r3, r2, r3
 80012aa:	18ca      	adds	r2, r1, r3
 80012ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012b0:	fba3 8903 	umull	r8, r9, r3, r3
 80012b4:	eb02 0309 	add.w	r3, r2, r9
 80012b8:	4699      	mov	r9, r3
 80012ba:	4ba1      	ldr	r3, [pc, #644]	@ (8001540 <BMP280_measureP+0x2d0>)
 80012bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	17da      	asrs	r2, r3, #31
 80012c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80012c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80012cc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80012d0:	4603      	mov	r3, r0
 80012d2:	fb03 f209 	mul.w	r2, r3, r9
 80012d6:	460b      	mov	r3, r1
 80012d8:	fb08 f303 	mul.w	r3, r8, r3
 80012dc:	4413      	add	r3, r2
 80012de:	4602      	mov	r2, r0
 80012e0:	fba8 1202 	umull	r1, r2, r8, r2
 80012e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80012e8:	460a      	mov	r2, r1
 80012ea:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80012ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80012f2:	4413      	add	r3, r2
 80012f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80012f8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80012fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8001300:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001304:	4b8f      	ldr	r3, [pc, #572]	@ (8001544 <BMP280_measureP+0x2d4>)
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	b21b      	sxth	r3, r3
 800130c:	17da      	asrs	r2, r3, #31
 800130e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001312:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001316:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800131a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800131e:	462a      	mov	r2, r5
 8001320:	fb02 f203 	mul.w	r2, r2, r3
 8001324:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001328:	4621      	mov	r1, r4
 800132a:	fb01 f303 	mul.w	r3, r1, r3
 800132e:	441a      	add	r2, r3
 8001330:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001334:	4621      	mov	r1, r4
 8001336:	fba3 1301 	umull	r1, r3, r3, r1
 800133a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800133e:	460b      	mov	r3, r1
 8001340:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001348:	18d3      	adds	r3, r2, r3
 800134a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800134e:	f04f 0000 	mov.w	r0, #0
 8001352:	f04f 0100 	mov.w	r1, #0
 8001356:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800135a:	462b      	mov	r3, r5
 800135c:	0459      	lsls	r1, r3, #17
 800135e:	4623      	mov	r3, r4
 8001360:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001364:	4623      	mov	r3, r4
 8001366:	0458      	lsls	r0, r3, #17
 8001368:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800136c:	1814      	adds	r4, r2, r0
 800136e:	643c      	str	r4, [r7, #64]	@ 0x40
 8001370:	414b      	adcs	r3, r1
 8001372:	647b      	str	r3, [r7, #68]	@ 0x44
 8001374:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001378:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800137c:	4b72      	ldr	r3, [pc, #456]	@ (8001548 <BMP280_measureP+0x2d8>)
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	b21b      	sxth	r3, r3
 8001384:	17da      	asrs	r2, r3, #31
 8001386:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800138a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800138e:	f04f 0000 	mov.w	r0, #0
 8001392:	f04f 0100 	mov.w	r1, #0
 8001396:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800139a:	00d9      	lsls	r1, r3, #3
 800139c:	2000      	movs	r0, #0
 800139e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80013a2:	1814      	adds	r4, r2, r0
 80013a4:	63bc      	str	r4, [r7, #56]	@ 0x38
 80013a6:	414b      	adcs	r3, r1
 80013a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013aa:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80013ae:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80013b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013ba:	fb03 f102 	mul.w	r1, r3, r2
 80013be:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	18ca      	adds	r2, r1, r3
 80013cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013d0:	fba3 1303 	umull	r1, r3, r3, r3
 80013d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013d8:	460b      	mov	r3, r1
 80013da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80013de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80013e2:	18d3      	adds	r3, r2, r3
 80013e4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013e8:	4b58      	ldr	r3, [pc, #352]	@ (800154c <BMP280_measureP+0x2dc>)
 80013ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	17da      	asrs	r2, r3, #31
 80013f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80013f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80013fa:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80013fe:	462b      	mov	r3, r5
 8001400:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001404:	4642      	mov	r2, r8
 8001406:	fb02 f203 	mul.w	r2, r2, r3
 800140a:	464b      	mov	r3, r9
 800140c:	4621      	mov	r1, r4
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	4413      	add	r3, r2
 8001414:	4622      	mov	r2, r4
 8001416:	4641      	mov	r1, r8
 8001418:	fba2 1201 	umull	r1, r2, r2, r1
 800141c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001420:	460a      	mov	r2, r1
 8001422:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001426:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800142a:	4413      	add	r3, r2
 800142c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001430:	f04f 0000 	mov.w	r0, #0
 8001434:	f04f 0100 	mov.w	r1, #0
 8001438:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800143c:	4623      	mov	r3, r4
 800143e:	0a18      	lsrs	r0, r3, #8
 8001440:	462b      	mov	r3, r5
 8001442:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001446:	462b      	mov	r3, r5
 8001448:	1219      	asrs	r1, r3, #8
 800144a:	4b41      	ldr	r3, [pc, #260]	@ (8001550 <BMP280_measureP+0x2e0>)
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	b21b      	sxth	r3, r3
 8001452:	17da      	asrs	r2, r3, #31
 8001454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001458:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800145c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001460:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001464:	464a      	mov	r2, r9
 8001466:	fb02 f203 	mul.w	r2, r2, r3
 800146a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800146e:	4644      	mov	r4, r8
 8001470:	fb04 f303 	mul.w	r3, r4, r3
 8001474:	441a      	add	r2, r3
 8001476:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800147a:	4644      	mov	r4, r8
 800147c:	fba3 4304 	umull	r4, r3, r3, r4
 8001480:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001484:	4623      	mov	r3, r4
 8001486:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800148a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800148e:	18d3      	adds	r3, r2, r3
 8001490:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80014a0:	464c      	mov	r4, r9
 80014a2:	0323      	lsls	r3, r4, #12
 80014a4:	4644      	mov	r4, r8
 80014a6:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80014aa:	4644      	mov	r4, r8
 80014ac:	0322      	lsls	r2, r4, #12
 80014ae:	1884      	adds	r4, r0, r2
 80014b0:	633c      	str	r4, [r7, #48]	@ 0x30
 80014b2:	eb41 0303 	adc.w	r3, r1, r3
 80014b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80014b8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80014bc:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80014c0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014c4:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80014c8:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80014cc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80014d0:	4b20      	ldr	r3, [pc, #128]	@ (8001554 <BMP280_measureP+0x2e4>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	2200      	movs	r2, #0
 80014d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014e0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014e4:	462b      	mov	r3, r5
 80014e6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80014ea:	4642      	mov	r2, r8
 80014ec:	fb02 f203 	mul.w	r2, r2, r3
 80014f0:	464b      	mov	r3, r9
 80014f2:	4621      	mov	r1, r4
 80014f4:	fb01 f303 	mul.w	r3, r1, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	4622      	mov	r2, r4
 80014fc:	4641      	mov	r1, r8
 80014fe:	fba2 1201 	umull	r1, r2, r2, r1
 8001502:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001506:	460a      	mov	r2, r1
 8001508:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800150c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001510:	4413      	add	r3, r2
 8001512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001522:	4629      	mov	r1, r5
 8001524:	104a      	asrs	r2, r1, #1
 8001526:	4629      	mov	r1, r5
 8001528:	17cb      	asrs	r3, r1, #31
 800152a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 800152e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001532:	4313      	orrs	r3, r2
 8001534:	d110      	bne.n	8001558 <BMP280_measureP+0x2e8>
	{
	return 0;
 8001536:	2300      	movs	r3, #0
 8001538:	e154      	b.n	80017e4 <BMP280_measureP+0x574>
 800153a:	bf00      	nop
 800153c:	200000b8 	.word	0x200000b8
 8001540:	200000a8 	.word	0x200000a8
 8001544:	200000a6 	.word	0x200000a6
 8001548:	200000a4 	.word	0x200000a4
 800154c:	200000a2 	.word	0x200000a2
 8001550:	200000a0 	.word	0x200000a0
 8001554:	2000009a 	.word	0x2000009a
	}
	p = 1048576-adc_P;
 8001558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800155c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001560:	17da      	asrs	r2, r3, #31
 8001562:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001564:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001566:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800156a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800156e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001572:	105b      	asrs	r3, r3, #1
 8001574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001578:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800157c:	07db      	lsls	r3, r3, #31
 800157e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001582:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001586:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800158a:	4621      	mov	r1, r4
 800158c:	1a89      	subs	r1, r1, r2
 800158e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001590:	4629      	mov	r1, r5
 8001592:	eb61 0303 	sbc.w	r3, r1, r3
 8001596:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001598:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800159c:	4622      	mov	r2, r4
 800159e:	462b      	mov	r3, r5
 80015a0:	1891      	adds	r1, r2, r2
 80015a2:	6239      	str	r1, [r7, #32]
 80015a4:	415b      	adcs	r3, r3
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015ac:	4621      	mov	r1, r4
 80015ae:	1851      	adds	r1, r2, r1
 80015b0:	61b9      	str	r1, [r7, #24]
 80015b2:	4629      	mov	r1, r5
 80015b4:	414b      	adcs	r3, r1
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015c4:	4649      	mov	r1, r9
 80015c6:	018b      	lsls	r3, r1, #6
 80015c8:	4641      	mov	r1, r8
 80015ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ce:	4641      	mov	r1, r8
 80015d0:	018a      	lsls	r2, r1, #6
 80015d2:	4641      	mov	r1, r8
 80015d4:	1889      	adds	r1, r1, r2
 80015d6:	6139      	str	r1, [r7, #16]
 80015d8:	4649      	mov	r1, r9
 80015da:	eb43 0101 	adc.w	r1, r3, r1
 80015de:	6179      	str	r1, [r7, #20]
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015ec:	4649      	mov	r1, r9
 80015ee:	008b      	lsls	r3, r1, #2
 80015f0:	4641      	mov	r1, r8
 80015f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015f6:	4641      	mov	r1, r8
 80015f8:	008a      	lsls	r2, r1, #2
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	4603      	mov	r3, r0
 8001600:	4622      	mov	r2, r4
 8001602:	189b      	adds	r3, r3, r2
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	460b      	mov	r3, r1
 8001608:	462a      	mov	r2, r5
 800160a:	eb42 0303 	adc.w	r3, r2, r3
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800161c:	4649      	mov	r1, r9
 800161e:	008b      	lsls	r3, r1, #2
 8001620:	4641      	mov	r1, r8
 8001622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001626:	4641      	mov	r1, r8
 8001628:	008a      	lsls	r2, r1, #2
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	4603      	mov	r3, r0
 8001630:	4622      	mov	r2, r4
 8001632:	189b      	adds	r3, r3, r2
 8001634:	673b      	str	r3, [r7, #112]	@ 0x70
 8001636:	462b      	mov	r3, r5
 8001638:	460a      	mov	r2, r1
 800163a:	eb42 0303 	adc.w	r3, r2, r3
 800163e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001640:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001644:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001648:	f7ff faa6 	bl	8000b98 <__aeabi_ldivmod>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001654:	4b66      	ldr	r3, [pc, #408]	@ (80017f0 <BMP280_measureP+0x580>)
 8001656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165a:	b21b      	sxth	r3, r3
 800165c:	17da      	asrs	r2, r3, #31
 800165e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001660:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001662:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001666:	f04f 0000 	mov.w	r0, #0
 800166a:	f04f 0100 	mov.w	r1, #0
 800166e:	0b50      	lsrs	r0, r2, #13
 8001670:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001674:	1359      	asrs	r1, r3, #13
 8001676:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800167a:	462b      	mov	r3, r5
 800167c:	fb00 f203 	mul.w	r2, r0, r3
 8001680:	4623      	mov	r3, r4
 8001682:	fb03 f301 	mul.w	r3, r3, r1
 8001686:	4413      	add	r3, r2
 8001688:	4622      	mov	r2, r4
 800168a:	fba2 1200 	umull	r1, r2, r2, r0
 800168e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001692:	460a      	mov	r2, r1
 8001694:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001698:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800169c:	4413      	add	r3, r2
 800169e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80016a2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80016a6:	f04f 0000 	mov.w	r0, #0
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	0b50      	lsrs	r0, r2, #13
 80016b0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80016b4:	1359      	asrs	r1, r3, #13
 80016b6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80016ba:	462b      	mov	r3, r5
 80016bc:	fb00 f203 	mul.w	r2, r0, r3
 80016c0:	4623      	mov	r3, r4
 80016c2:	fb03 f301 	mul.w	r3, r3, r1
 80016c6:	4413      	add	r3, r2
 80016c8:	4622      	mov	r2, r4
 80016ca:	fba2 1200 	umull	r1, r2, r2, r0
 80016ce:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80016d2:	460a      	mov	r2, r1
 80016d4:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80016d8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80016dc:	4413      	add	r3, r2
 80016de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80016ee:	4621      	mov	r1, r4
 80016f0:	0e4a      	lsrs	r2, r1, #25
 80016f2:	4629      	mov	r1, r5
 80016f4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016f8:	4629      	mov	r1, r5
 80016fa:	164b      	asrs	r3, r1, #25
 80016fc:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001700:	4b3c      	ldr	r3, [pc, #240]	@ (80017f4 <BMP280_measureP+0x584>)
 8001702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001706:	b21b      	sxth	r3, r3
 8001708:	17da      	asrs	r2, r3, #31
 800170a:	663b      	str	r3, [r7, #96]	@ 0x60
 800170c:	667a      	str	r2, [r7, #100]	@ 0x64
 800170e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001712:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001716:	462a      	mov	r2, r5
 8001718:	fb02 f203 	mul.w	r2, r2, r3
 800171c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001720:	4621      	mov	r1, r4
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800172c:	4621      	mov	r1, r4
 800172e:	fba2 1201 	umull	r1, r2, r2, r1
 8001732:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001736:	460a      	mov	r2, r1
 8001738:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800173c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001740:	4413      	add	r3, r2
 8001742:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001752:	4621      	mov	r1, r4
 8001754:	0cca      	lsrs	r2, r1, #19
 8001756:	4629      	mov	r1, r5
 8001758:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800175c:	4629      	mov	r1, r5
 800175e:	14cb      	asrs	r3, r1, #19
 8001760:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001764:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001768:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800176c:	1884      	adds	r4, r0, r2
 800176e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001770:	eb41 0303 	adc.w	r3, r1, r3
 8001774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001776:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800177a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800177e:	4621      	mov	r1, r4
 8001780:	1889      	adds	r1, r1, r2
 8001782:	6539      	str	r1, [r7, #80]	@ 0x50
 8001784:	4629      	mov	r1, r5
 8001786:	eb43 0101 	adc.w	r1, r3, r1
 800178a:	6579      	str	r1, [r7, #84]	@ 0x54
 800178c:	f04f 0000 	mov.w	r0, #0
 8001790:	f04f 0100 	mov.w	r1, #0
 8001794:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001798:	4623      	mov	r3, r4
 800179a:	0a18      	lsrs	r0, r3, #8
 800179c:	462b      	mov	r3, r5
 800179e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80017a2:	462b      	mov	r3, r5
 80017a4:	1219      	asrs	r1, r3, #8
 80017a6:	4b14      	ldr	r3, [pc, #80]	@ (80017f8 <BMP280_measureP+0x588>)
 80017a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	17da      	asrs	r2, r3, #31
 80017b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017b2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80017c0:	464c      	mov	r4, r9
 80017c2:	0123      	lsls	r3, r4, #4
 80017c4:	4644      	mov	r4, r8
 80017c6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017ca:	4644      	mov	r4, r8
 80017cc:	0122      	lsls	r2, r4, #4
 80017ce:	1884      	adds	r4, r0, r2
 80017d0:	603c      	str	r4, [r7, #0]
 80017d2:	eb41 0303 	adc.w	r3, r1, r3
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017dc:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80017e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80017ea:	46bd      	mov	sp, r7
 80017ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017f0:	200000ae 	.word	0x200000ae
 80017f4:	200000ac 	.word	0x200000ac
 80017f8:	200000aa 	.word	0x200000aa
 80017fc:	00000000 	.word	0x00000000

08001800 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <BMP280_measureH+0x14>
 8001810:	2300      	movs	r3, #0
 8001812:	e051      	b.n	80018b8 <BMP280_measureH+0xb8>
	var1 = -log(((double)Pres)/101325);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7fe fe25 	bl	8000464 <__aeabi_ui2d>
 800181a:	a32e      	add	r3, pc, #184	@ (adr r3, 80018d4 <BMP280_measureH+0xd4>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7fe ffc4 	bl	80007ac <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	ec43 2b17 	vmov	d7, r2, r3
 800182c:	eeb0 0a47 	vmov.f32	s0, s14
 8001830:	eef0 0a67 	vmov.f32	s1, s15
 8001834:	f007 fc58 	bl	80090e8 <log>
 8001838:	ec53 2b10 	vmov	r2, r3, d0
 800183c:	4611      	mov	r1, r2
 800183e:	61b9      	str	r1, [r7, #24]
 8001840:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001844:	61fb      	str	r3, [r7, #28]

	if(var1 == 0) return 0;
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001852:	f7ff f8e9 	bl	8000a28 <__aeabi_dcmpeq>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <BMP280_measureH+0x60>
 800185c:	2300      	movs	r3, #0
 800185e:	e02b      	b.n	80018b8 <BMP280_measureH+0xb8>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8001860:	6838      	ldr	r0, [r7, #0]
 8001862:	f7fe fe0f 	bl	8000484 <__aeabi_i2d>
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <BMP280_measureH+0xd0>)
 800186c:	f7fe ff9e 	bl	80007ac <__aeabi_ddiv>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	a311      	add	r3, pc, #68	@ (adr r3, 80018c0 <BMP280_measureH+0xc0>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe fcb5 	bl	80001ec <__adddf3>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	a110      	add	r1, pc, #64	@ (adr r1, 80018c8 <BMP280_measureH+0xc8>)
 8001888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800188c:	f7fe ff8e 	bl	80007ac <__aeabi_ddiv>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	e9c7 2304 	strd	r2, r3, [r7, #16]
	h = var1/var2;
 8001898:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800189c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018a0:	f7fe ff84 	bl	80007ac <__aeabi_ddiv>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (uint16_t)h;
 80018ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018b0:	f7ff f902 	bl	8000ab8 <__aeabi_d2uiz>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b29b      	uxth	r3, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3720      	adds	r7, #32
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	66666666 	.word	0x66666666
 80018c4:	40711266 	.word	0x40711266
 80018c8:	ca402a92 	.word	0xca402a92
 80018cc:	3fa17e3e 	.word	0x3fa17e3e
 80018d0:	40590000 	.word	0x40590000
 80018d4:	00000000 	.word	0x00000000
 80018d8:	40f8bcd0 	.word	0x40f8bcd0

080018dc <BMP280_init>:

void BMP280_init(void){
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	BMP280_unselect();
 80018e0:	2201      	movs	r2, #1
 80018e2:	2104      	movs	r1, #4
 80018e4:	480c      	ldr	r0, [pc, #48]	@ (8001918 <BMP280_init+0x3c>)
 80018e6:	f003 f88b 	bl	8004a00 <HAL_GPIO_WritePin>
	BMP280_config();
 80018ea:	f7ff fb7b 	bl	8000fe4 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 80018ee:	2089      	movs	r0, #137	@ 0x89
 80018f0:	f7ff fb46 	bl	8000f80 <BMP280_read>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <BMP280_init+0x40>)
 80018fa:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 80018fc:	f7ff fb7e 	bl	8000ffc <BMP280_calibrationData>
	BMP280_readRawValues();
 8001900:	f7ff fc30 	bl	8001164 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <BMP280_init+0x44>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fc6d 	bl	80011e8 <BMP280_measureT>
 800190e:	4603      	mov	r3, r0
 8001910:	4a02      	ldr	r2, [pc, #8]	@ (800191c <BMP280_init+0x40>)
 8001912:	6093      	str	r3, [r2, #8]
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40020400 	.word	0x40020400
 800191c:	20000084 	.word	0x20000084
 8001920:	200000b0 	.word	0x200000b0

08001924 <BMP280_calculate>:

void BMP280_calculate(void){
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
	BMP280_readRawValues();
 8001928:	f7ff fc1c 	bl	8001164 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 800192c:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <BMP280_calculate+0x48>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fc59 	bl	80011e8 <BMP280_measureT>
 8001936:	4603      	mov	r3, r0
 8001938:	4a0d      	ldr	r2, [pc, #52]	@ (8001970 <BMP280_calculate+0x4c>)
 800193a:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 800193c:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <BMP280_calculate+0x50>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fc95 	bl	8001270 <BMP280_measureP>
 8001946:	4603      	mov	r3, r0
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	4a09      	ldr	r2, [pc, #36]	@ (8001970 <BMP280_calculate+0x4c>)
 800194c:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 800194e:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <BMP280_calculate+0x4c>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	4a07      	ldr	r2, [pc, #28]	@ (8001970 <BMP280_calculate+0x4c>)
 8001954:	6892      	ldr	r2, [r2, #8]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff51 	bl	8001800 <BMP280_measureH>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	4b03      	ldr	r3, [pc, #12]	@ (8001970 <BMP280_calculate+0x4c>)
 8001964:	821a      	strh	r2, [r3, #16]
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200000b0 	.word	0x200000b0
 8001970:	20000084 	.word	0x20000084
 8001974:	200000b4 	.word	0x200000b4

08001978 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a2e      	ldr	r2, [pc, #184]	@ (8001a40 <GetSector+0xc8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d806      	bhi.n	800199a <GetSector+0x22>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001992:	d302      	bcc.n	800199a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e04b      	b.n	8001a32 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a29      	ldr	r2, [pc, #164]	@ (8001a44 <GetSector+0xcc>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d806      	bhi.n	80019b0 <GetSector+0x38>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a28      	ldr	r2, [pc, #160]	@ (8001a48 <GetSector+0xd0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d302      	bcc.n	80019b0 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80019aa:	2301      	movs	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	e040      	b.n	8001a32 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a26      	ldr	r2, [pc, #152]	@ (8001a4c <GetSector+0xd4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d806      	bhi.n	80019c6 <GetSector+0x4e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a25      	ldr	r2, [pc, #148]	@ (8001a50 <GetSector+0xd8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d302      	bcc.n	80019c6 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80019c0:	2302      	movs	r3, #2
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	e035      	b.n	8001a32 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a22      	ldr	r2, [pc, #136]	@ (8001a54 <GetSector+0xdc>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d206      	bcs.n	80019dc <GetSector+0x64>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a21      	ldr	r2, [pc, #132]	@ (8001a58 <GetSector+0xe0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d302      	bcc.n	80019dc <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 80019d6:	2303      	movs	r3, #3
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e02a      	b.n	8001a32 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a1f      	ldr	r2, [pc, #124]	@ (8001a5c <GetSector+0xe4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d206      	bcs.n	80019f2 <GetSector+0x7a>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a54 <GetSector+0xdc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d902      	bls.n	80019f2 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80019ec:	2304      	movs	r3, #4
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e01f      	b.n	8001a32 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a60 <GetSector+0xe8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d206      	bcs.n	8001a08 <GetSector+0x90>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a17      	ldr	r2, [pc, #92]	@ (8001a5c <GetSector+0xe4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d902      	bls.n	8001a08 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001a02:	2305      	movs	r3, #5
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e014      	b.n	8001a32 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a16      	ldr	r2, [pc, #88]	@ (8001a64 <GetSector+0xec>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d206      	bcs.n	8001a1e <GetSector+0xa6>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a13      	ldr	r2, [pc, #76]	@ (8001a60 <GetSector+0xe8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d902      	bls.n	8001a1e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001a18:	2306      	movs	r3, #6
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e009      	b.n	8001a32 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a11      	ldr	r2, [pc, #68]	@ (8001a68 <GetSector+0xf0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d205      	bcs.n	8001a32 <GetSector+0xba>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a0e      	ldr	r2, [pc, #56]	@ (8001a64 <GetSector+0xec>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 8001a2e:	2307      	movs	r3, #7
 8001a30:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	08003ffe 	.word	0x08003ffe
 8001a44:	08007ffe 	.word	0x08007ffe
 8001a48:	08004000 	.word	0x08004000
 8001a4c:	0800bffe 	.word	0x0800bffe
 8001a50:	08008000 	.word	0x08008000
 8001a54:	0800ffff 	.word	0x0800ffff
 8001a58:	0800c000 	.word	0x0800c000
 8001a5c:	0801ffff 	.word	0x0801ffff
 8001a60:	0803ffff 	.word	0x0803ffff
 8001a64:	0805ffff 	.word	0x0805ffff
 8001a68:	0807ffff 	.word	0x0807ffff

08001a6c <Flash_Write_Data>:


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 8001a6c:	b5b0      	push	{r4, r5, r7, lr}
 8001a6e:	b08a      	sub	sp, #40	@ 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	4613      	mov	r3, r2
 8001a78:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8001a7e:	f002 fb9b 	bl	80041b8 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f7ff ff78 	bl	8001978 <GetSector>
 8001a88:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001a96:	69f8      	ldr	r0, [r7, #28]
 8001a98:	f7ff ff6e 	bl	8001978 <GetSector>
 8001a9c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b18 <Flash_Write_Data+0xac>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <Flash_Write_Data+0xac>)
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8001aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8001b18 <Flash_Write_Data+0xac>)
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a17      	ldr	r2, [pc, #92]	@ (8001b18 <Flash_Write_Data+0xac>)
 8001aba:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4815      	ldr	r0, [pc, #84]	@ (8001b18 <Flash_Write_Data+0xac>)
 8001ac4:	f002 fcf6 	bl	80044b4 <HAL_FLASHEx_Erase>

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
 8001ac8:	e01b      	b.n	8001b02 <Flash_Write_Data+0x96>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	461c      	mov	r4, r3
 8001ad8:	4615      	mov	r5, r2
 8001ada:	4622      	mov	r2, r4
 8001adc:	462b      	mov	r3, r5
 8001ade:	68f9      	ldr	r1, [r7, #12]
 8001ae0:	2002      	movs	r0, #2
 8001ae2:	f002 fb15 	bl	8004110 <HAL_FLASH_Program>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d106      	bne.n	8001afa <Flash_Write_Data+0x8e>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3304      	adds	r3, #4
 8001af0:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	3301      	adds	r3, #1
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af8:	e003      	b.n	8001b02 <Flash_Write_Data+0x96>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001afa:	f002 fb8f 	bl	800421c <HAL_FLASH_GetError>
 8001afe:	4603      	mov	r3, r0
 8001b00:	e006      	b.n	8001b10 <Flash_Write_Data+0xa4>
	   while (sofar<numberofwords)
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dbdf      	blt.n	8001aca <Flash_Write_Data+0x5e>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001b0a:	f002 fb77 	bl	80041fc <HAL_FLASH_Lock>

	   return 0;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3728      	adds	r7, #40	@ 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bdb0      	pop	{r4, r5, r7, pc}
 8001b18:	200000bc 	.word	0x200000bc

08001b1c <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	4613      	mov	r3, r2
 8001b28:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3304      	adds	r3, #4
 8001b36:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	1e5a      	subs	r2, r3, #1
 8001b42:	80fa      	strh	r2, [r7, #6]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d000      	beq.n	8001b4a <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001b48:	e7ef      	b.n	8001b2a <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8001b4a:	bf00      	nop
	}
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <MPU6050_calibration>:

#include "Libraries/MPU6050.h"

MPU6050_t MPU6050;

void MPU6050_calibration(void){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1);
 8001b5e:	2301      	movs	r3, #1
 8001b60:	9302      	str	r3, [sp, #8]
 8001b62:	2306      	movs	r3, #6
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	463b      	mov	r3, r7
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	223b      	movs	r2, #59	@ 0x3b
 8001b6e:	21d0      	movs	r1, #208	@ 0xd0
 8001b70:	485d      	ldr	r0, [pc, #372]	@ (8001ce8 <MPU6050_calibration+0x190>)
 8001b72:	f003 f99d 	bl	8004eb0 <HAL_I2C_Mem_Read>

	MPU6050.S1.Offset.Ax = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001b76:	783b      	ldrb	r3, [r7, #0]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	b21a      	sxth	r2, r3
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4313      	orrs	r3, r2
 8001b82:	b21a      	sxth	r2, r3
 8001b84:	4b59      	ldr	r3, [pc, #356]	@ (8001cec <MPU6050_calibration+0x194>)
 8001b86:	839a      	strh	r2, [r3, #28]
	MPU6050.S1.Offset.Ay = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001b88:	78bb      	ldrb	r3, [r7, #2]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	4b55      	ldr	r3, [pc, #340]	@ (8001cec <MPU6050_calibration+0x194>)
 8001b98:	83da      	strh	r2, [r3, #30]
	MPU6050.S1.Offset.Az = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]) - 2048;
 8001b9a:	793b      	ldrb	r3, [r7, #4]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	797b      	ldrb	r3, [r7, #5]
 8001ba2:	b21b      	sxth	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	b21a      	sxth	r2, r3
 8001bb2:	4b4e      	ldr	r3, [pc, #312]	@ (8001cec <MPU6050_calibration+0x194>)
 8001bb4:	841a      	strh	r2, [r3, #32]

	memset(Rec_Data,0,6);
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	2206      	movs	r2, #6
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f007 fa61 	bl	8009084 <memset>

	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1);
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	9302      	str	r3, [sp, #8]
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	463b      	mov	r3, r7
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	223b      	movs	r2, #59	@ 0x3b
 8001bd2:	21d0      	movs	r1, #208	@ 0xd0
 8001bd4:	4846      	ldr	r0, [pc, #280]	@ (8001cf0 <MPU6050_calibration+0x198>)
 8001bd6:	f003 f96b 	bl	8004eb0 <HAL_I2C_Mem_Read>

	MPU6050.S2.Offset.Ax = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001bda:	783b      	ldrb	r3, [r7, #0]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	787b      	ldrb	r3, [r7, #1]
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	4b40      	ldr	r3, [pc, #256]	@ (8001cec <MPU6050_calibration+0x194>)
 8001bea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	MPU6050.S2.Offset.Ay = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001bee:	78bb      	ldrb	r3, [r7, #2]
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	b21b      	sxth	r3, r3
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cec <MPU6050_calibration+0x194>)
 8001bfe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	MPU6050.S2.Offset.Az = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]) - 2048;
 8001c02:	793b      	ldrb	r3, [r7, #4]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	797b      	ldrb	r3, [r7, #5]
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	b21a      	sxth	r2, r3
 8001c1a:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <MPU6050_calibration+0x194>)
 8001c1c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

	memset(Rec_Data,0,6);
 8001c20:	463b      	mov	r3, r7
 8001c22:	2206      	movs	r2, #6
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f007 fa2c 	bl	8009084 <memset>

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1000);
 8001c2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c30:	9302      	str	r3, [sp, #8]
 8001c32:	2306      	movs	r3, #6
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	463b      	mov	r3, r7
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	2243      	movs	r2, #67	@ 0x43
 8001c3e:	21d0      	movs	r1, #208	@ 0xd0
 8001c40:	4829      	ldr	r0, [pc, #164]	@ (8001ce8 <MPU6050_calibration+0x190>)
 8001c42:	f003 f935 	bl	8004eb0 <HAL_I2C_Mem_Read>

	MPU6050.S1.Offset.Gx = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001c46:	783b      	ldrb	r3, [r7, #0]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	b21a      	sxth	r2, r3
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	b21a      	sxth	r2, r3
 8001c54:	4b25      	ldr	r3, [pc, #148]	@ (8001cec <MPU6050_calibration+0x194>)
 8001c56:	845a      	strh	r2, [r3, #34]	@ 0x22
	MPU6050.S1.Offset.Gy = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001c58:	78bb      	ldrb	r3, [r7, #2]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b21a      	sxth	r2, r3
 8001c66:	4b21      	ldr	r3, [pc, #132]	@ (8001cec <MPU6050_calibration+0x194>)
 8001c68:	849a      	strh	r2, [r3, #36]	@ 0x24
	MPU6050.S1.Offset.Gz = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001c6a:	793b      	ldrb	r3, [r7, #4]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	797b      	ldrb	r3, [r7, #5]
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	4313      	orrs	r3, r2
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <MPU6050_calibration+0x194>)
 8001c7a:	84da      	strh	r2, [r3, #38]	@ 0x26

	memset(Rec_Data,0,6);
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	2206      	movs	r2, #6
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f007 f9fe 	bl	8009084 <memset>

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1000);
 8001c88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c8c:	9302      	str	r3, [sp, #8]
 8001c8e:	2306      	movs	r3, #6
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	463b      	mov	r3, r7
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	2301      	movs	r3, #1
 8001c98:	2243      	movs	r2, #67	@ 0x43
 8001c9a:	21d0      	movs	r1, #208	@ 0xd0
 8001c9c:	4814      	ldr	r0, [pc, #80]	@ (8001cf0 <MPU6050_calibration+0x198>)
 8001c9e:	f003 f907 	bl	8004eb0 <HAL_I2C_Mem_Read>

	MPU6050.S2.Offset.Gx = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001ca2:	783b      	ldrb	r3, [r7, #0]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	787b      	ldrb	r3, [r7, #1]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	4313      	orrs	r3, r2
 8001cae:	b21a      	sxth	r2, r3
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <MPU6050_calibration+0x194>)
 8001cb2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	MPU6050.S2.Offset.Gy = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001cb6:	78bb      	ldrb	r3, [r7, #2]
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <MPU6050_calibration+0x194>)
 8001cc6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	MPU6050.S2.Offset.Gz = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001cca:	793b      	ldrb	r3, [r7, #4]
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	797b      	ldrb	r3, [r7, #5]
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	b21a      	sxth	r2, r3
 8001cd8:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <MPU6050_calibration+0x194>)
 8001cda:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e


}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000049c 	.word	0x2000049c
 8001cec:	200000d0 	.word	0x200000d0
 8001cf0:	200004f0 	.word	0x200004f0

08001cf4 <MPU6050_init>:

void MPU6050_init(void){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af04      	add	r7, sp, #16
	uint8_t cont = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	71bb      	strb	r3, [r7, #6]

	HAL_Delay(100);
 8001d02:	2064      	movs	r0, #100	@ 0x64
 8001d04:	f001 fb80 	bl	8003408 <HAL_Delay>
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, WHOAMI, 1, &MPU6050.S1.ID, 1,1);
 8001d08:	2301      	movs	r3, #1
 8001d0a:	9302      	str	r3, [sp, #8]
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	4b71      	ldr	r3, [pc, #452]	@ (8001ed8 <MPU6050_init+0x1e4>)
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	2301      	movs	r3, #1
 8001d16:	2275      	movs	r2, #117	@ 0x75
 8001d18:	21d0      	movs	r1, #208	@ 0xd0
 8001d1a:	4870      	ldr	r0, [pc, #448]	@ (8001edc <MPU6050_init+0x1e8>)
 8001d1c:	f003 f8c8 	bl	8004eb0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, WHOAMI, 1, &MPU6050.S2.ID, 1,1);
 8001d20:	2301      	movs	r3, #1
 8001d22:	9302      	str	r3, [sp, #8]
 8001d24:	2301      	movs	r3, #1
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	4b6d      	ldr	r3, [pc, #436]	@ (8001ee0 <MPU6050_init+0x1ec>)
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	2275      	movs	r2, #117	@ 0x75
 8001d30:	21d0      	movs	r1, #208	@ 0xd0
 8001d32:	486c      	ldr	r0, [pc, #432]	@ (8001ee4 <MPU6050_init+0x1f0>)
 8001d34:	f003 f8bc 	bl	8004eb0 <HAL_I2C_Mem_Read>

	while((MPU6050.S1.ID != 104)&&(cont < 2)){
 8001d38:	e023      	b.n	8001d82 <MPU6050_init+0x8e>
		Data = 0x40;
 8001d3a:	2340      	movs	r3, #64	@ 0x40
 8001d3c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 8001d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d42:	9302      	str	r3, [sp, #8]
 8001d44:	2301      	movs	r3, #1
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	1dbb      	adds	r3, r7, #6
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	226b      	movs	r2, #107	@ 0x6b
 8001d50:	21d0      	movs	r1, #208	@ 0xd0
 8001d52:	4862      	ldr	r0, [pc, #392]	@ (8001edc <MPU6050_init+0x1e8>)
 8001d54:	f002 ffb2 	bl	8004cbc <HAL_I2C_Mem_Write>
		MX_I2C1_Init();
 8001d58:	f000 fd84 	bl	8002864 <MX_I2C1_Init>
		HAL_Delay(100);
 8001d5c:	2064      	movs	r0, #100	@ 0x64
 8001d5e:	f001 fb53 	bl	8003408 <HAL_Delay>
		HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, WHOAMI, 1, &MPU6050.S2.ID, 1, 1000);
 8001d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ee0 <MPU6050_init+0x1ec>)
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	2301      	movs	r3, #1
 8001d72:	2275      	movs	r2, #117	@ 0x75
 8001d74:	21d0      	movs	r1, #208	@ 0xd0
 8001d76:	4859      	ldr	r0, [pc, #356]	@ (8001edc <MPU6050_init+0x1e8>)
 8001d78:	f003 f89a 	bl	8004eb0 <HAL_I2C_Mem_Read>
		cont += 1;
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	71fb      	strb	r3, [r7, #7]
	while((MPU6050.S1.ID != 104)&&(cont < 2)){
 8001d82:	4b55      	ldr	r3, [pc, #340]	@ (8001ed8 <MPU6050_init+0x1e4>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b68      	cmp	r3, #104	@ 0x68
 8001d88:	d002      	beq.n	8001d90 <MPU6050_init+0x9c>
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d9d4      	bls.n	8001d3a <MPU6050_init+0x46>
	}
	cont = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	71fb      	strb	r3, [r7, #7]
	while((MPU6050.S2.ID != 104)&&(cont < 2)){
 8001d94:	e023      	b.n	8001dde <MPU6050_init+0xea>
		Data = 0x40;
 8001d96:	2340      	movs	r3, #64	@ 0x40
 8001d98:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 8001d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9e:	9302      	str	r3, [sp, #8]
 8001da0:	2301      	movs	r3, #1
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	1dbb      	adds	r3, r7, #6
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2301      	movs	r3, #1
 8001daa:	226b      	movs	r2, #107	@ 0x6b
 8001dac:	21d0      	movs	r1, #208	@ 0xd0
 8001dae:	484d      	ldr	r0, [pc, #308]	@ (8001ee4 <MPU6050_init+0x1f0>)
 8001db0:	f002 ff84 	bl	8004cbc <HAL_I2C_Mem_Write>
		MX_I2C2_Init();
 8001db4:	f000 fd84 	bl	80028c0 <MX_I2C2_Init>
		HAL_Delay(100);
 8001db8:	2064      	movs	r0, #100	@ 0x64
 8001dba:	f001 fb25 	bl	8003408 <HAL_Delay>
		HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, WHOAMI, 1, &MPU6050.S2.ID, 1, 1000);
 8001dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc2:	9302      	str	r3, [sp, #8]
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	4b45      	ldr	r3, [pc, #276]	@ (8001ee0 <MPU6050_init+0x1ec>)
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	2301      	movs	r3, #1
 8001dce:	2275      	movs	r2, #117	@ 0x75
 8001dd0:	21d0      	movs	r1, #208	@ 0xd0
 8001dd2:	4844      	ldr	r0, [pc, #272]	@ (8001ee4 <MPU6050_init+0x1f0>)
 8001dd4:	f003 f86c 	bl	8004eb0 <HAL_I2C_Mem_Read>
		cont += 1;
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	71fb      	strb	r3, [r7, #7]
	while((MPU6050.S2.ID != 104)&&(cont < 2)){
 8001dde:	4b3e      	ldr	r3, [pc, #248]	@ (8001ed8 <MPU6050_init+0x1e4>)
 8001de0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001de4:	2b68      	cmp	r3, #104	@ 0x68
 8001de6:	d002      	beq.n	8001dee <MPU6050_init+0xfa>
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d9d3      	bls.n	8001d96 <MPU6050_init+0xa2>
	}
	Data = 0x00;
 8001dee:	2300      	movs	r3, #0
 8001df0:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 8001df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001df6:	9302      	str	r3, [sp, #8]
 8001df8:	2301      	movs	r3, #1
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	1dbb      	adds	r3, r7, #6
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	2301      	movs	r3, #1
 8001e02:	226b      	movs	r2, #107	@ 0x6b
 8001e04:	21d0      	movs	r1, #208	@ 0xd0
 8001e06:	4835      	ldr	r0, [pc, #212]	@ (8001edc <MPU6050_init+0x1e8>)
 8001e08:	f002 ff58 	bl	8004cbc <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 8001e0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e10:	9302      	str	r3, [sp, #8]
 8001e12:	2301      	movs	r3, #1
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	1dbb      	adds	r3, r7, #6
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	226b      	movs	r2, #107	@ 0x6b
 8001e1e:	21d0      	movs	r1, #208	@ 0xd0
 8001e20:	4830      	ldr	r0, [pc, #192]	@ (8001ee4 <MPU6050_init+0x1f0>)
 8001e22:	f002 ff4b 	bl	8004cbc <HAL_I2C_Mem_Write>

	Data = 0x07;
 8001e26:	2307      	movs	r3, #7
 8001e28:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, 1000);
 8001e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	2301      	movs	r3, #1
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	1dbb      	adds	r3, r7, #6
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2301      	movs	r3, #1
 8001e3a:	2219      	movs	r2, #25
 8001e3c:	21d0      	movs	r1, #208	@ 0xd0
 8001e3e:	4827      	ldr	r0, [pc, #156]	@ (8001edc <MPU6050_init+0x1e8>)
 8001e40:	f002 ff3c 	bl	8004cbc <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, 1000);
 8001e44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e48:	9302      	str	r3, [sp, #8]
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	1dbb      	adds	r3, r7, #6
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2301      	movs	r3, #1
 8001e54:	2219      	movs	r2, #25
 8001e56:	21d0      	movs	r1, #208	@ 0xd0
 8001e58:	4822      	ldr	r0, [pc, #136]	@ (8001ee4 <MPU6050_init+0x1f0>)
 8001e5a:	f002 ff2f 	bl	8004cbc <HAL_I2C_Mem_Write>

	Data = 0x18;
 8001e5e:	2318      	movs	r3, #24
 8001e60:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, 1000);
 8001e62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e66:	9302      	str	r3, [sp, #8]
 8001e68:	2301      	movs	r3, #1
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	1dbb      	adds	r3, r7, #6
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2301      	movs	r3, #1
 8001e72:	221b      	movs	r2, #27
 8001e74:	21d0      	movs	r1, #208	@ 0xd0
 8001e76:	4819      	ldr	r0, [pc, #100]	@ (8001edc <MPU6050_init+0x1e8>)
 8001e78:	f002 ff20 	bl	8004cbc <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, 1000);
 8001e7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e80:	9302      	str	r3, [sp, #8]
 8001e82:	2301      	movs	r3, #1
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	1dbb      	adds	r3, r7, #6
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	221b      	movs	r2, #27
 8001e8e:	21d0      	movs	r1, #208	@ 0xd0
 8001e90:	4814      	ldr	r0, [pc, #80]	@ (8001ee4 <MPU6050_init+0x1f0>)
 8001e92:	f002 ff13 	bl	8004cbc <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1, 1000);
 8001e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e9a:	9302      	str	r3, [sp, #8]
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	9301      	str	r3, [sp, #4]
 8001ea0:	1dbb      	adds	r3, r7, #6
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	221c      	movs	r2, #28
 8001ea8:	21d0      	movs	r1, #208	@ 0xd0
 8001eaa:	480c      	ldr	r0, [pc, #48]	@ (8001edc <MPU6050_init+0x1e8>)
 8001eac:	f002 ff06 	bl	8004cbc <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1, 1000);
 8001eb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb4:	9302      	str	r3, [sp, #8]
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	1dbb      	adds	r3, r7, #6
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	221c      	movs	r2, #28
 8001ec2:	21d0      	movs	r1, #208	@ 0xd0
 8001ec4:	4807      	ldr	r0, [pc, #28]	@ (8001ee4 <MPU6050_init+0x1f0>)
 8001ec6:	f002 fef9 	bl	8004cbc <HAL_I2C_Mem_Write>

	MPU6050_calibration();
 8001eca:	f7ff fe45 	bl	8001b58 <MPU6050_calibration>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200000d0 	.word	0x200000d0
 8001edc:	2000049c 	.word	0x2000049c
 8001ee0:	200000f8 	.word	0x200000f8
 8001ee4:	200004f0 	.word	0x200004f0

08001ee8 <MPU6050_accel>:

void MPU6050_accel(void){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af04      	add	r7, sp, #16
	 uint8_t Rec_Data[6];
	 int16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW;

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1);
 8001eee:	2301      	movs	r3, #1
 8001ef0:	9302      	str	r3, [sp, #8]
 8001ef2:	2306      	movs	r3, #6
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2301      	movs	r3, #1
 8001efc:	223b      	movs	r2, #59	@ 0x3b
 8001efe:	21d0      	movs	r1, #208	@ 0xd0
 8001f00:	4860      	ldr	r0, [pc, #384]	@ (8002084 <MPU6050_accel+0x19c>)
 8001f02:	f002 ffd5 	bl	8004eb0 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]) - MPU6050.S1.Offset.Ax;
 8001f06:	793b      	ldrb	r3, [r7, #4]
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	b21a      	sxth	r2, r3
 8001f0c:	797b      	ldrb	r3, [r7, #5]
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	4b5c      	ldr	r3, [pc, #368]	@ (8002088 <MPU6050_accel+0x1a0>)
 8001f18:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	81fb      	strh	r3, [r7, #14]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]) - MPU6050.S1.Offset.Ay;
 8001f24:	79bb      	ldrb	r3, [r7, #6]
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	b21a      	sxth	r2, r3
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	4b54      	ldr	r3, [pc, #336]	@ (8002088 <MPU6050_accel+0x1a0>)
 8001f36:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	81bb      	strh	r3, [r7, #12]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]) - MPU6050.S1.Offset.Az;
 8001f42:	7a3b      	ldrb	r3, [r7, #8]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	7a7b      	ldrb	r3, [r7, #9]
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	4b4d      	ldr	r3, [pc, #308]	@ (8002088 <MPU6050_accel+0x1a0>)
 8001f54:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	817b      	strh	r3, [r7, #10]

	MPU6050.S1.Ax = (float)Accel_X_RAW/2048.0 ;
 8001f60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f64:	ee07 3a90 	vmov	s15, r3
 8001f68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6c:	eddf 6a47 	vldr	s13, [pc, #284]	@ 800208c <MPU6050_accel+0x1a4>
 8001f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f74:	4b44      	ldr	r3, [pc, #272]	@ (8002088 <MPU6050_accel+0x1a0>)
 8001f76:	edc3 7a01 	vstr	s15, [r3, #4]
	MPU6050.S1.Ay = (float)Accel_Y_RAW/2048.0 ;
 8001f7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f86:	eddf 6a41 	vldr	s13, [pc, #260]	@ 800208c <MPU6050_accel+0x1a4>
 8001f8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8002088 <MPU6050_accel+0x1a0>)
 8001f90:	edc3 7a02 	vstr	s15, [r3, #8]
	MPU6050.S1.Az = (float)Accel_Z_RAW/2048.0 ;
 8001f94:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa0:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800208c <MPU6050_accel+0x1a4>
 8001fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa8:	4b37      	ldr	r3, [pc, #220]	@ (8002088 <MPU6050_accel+0x1a0>)
 8001faa:	edc3 7a03 	vstr	s15, [r3, #12]

	memset(Rec_Data,0,6);
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	2206      	movs	r2, #6
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f007 f865 	bl	8009084 <memset>

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1);
 8001fba:	2301      	movs	r3, #1
 8001fbc:	9302      	str	r3, [sp, #8]
 8001fbe:	2306      	movs	r3, #6
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	223b      	movs	r2, #59	@ 0x3b
 8001fca:	21d0      	movs	r1, #208	@ 0xd0
 8001fcc:	4830      	ldr	r0, [pc, #192]	@ (8002090 <MPU6050_accel+0x1a8>)
 8001fce:	f002 ff6f 	bl	8004eb0 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]) - MPU6050.S2.Offset.Ax;
 8001fd2:	793b      	ldrb	r3, [r7, #4]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	b21a      	sxth	r2, r3
 8001fd8:	797b      	ldrb	r3, [r7, #5]
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b21b      	sxth	r3, r3
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	4b29      	ldr	r3, [pc, #164]	@ (8002088 <MPU6050_accel+0x1a0>)
 8001fe4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	81fb      	strh	r3, [r7, #14]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]) - MPU6050.S2.Offset.Ay;
 8001ff0:	79bb      	ldrb	r3, [r7, #6]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	4b21      	ldr	r3, [pc, #132]	@ (8002088 <MPU6050_accel+0x1a0>)
 8002002:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
 8002006:	b29b      	uxth	r3, r3
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	b29b      	uxth	r3, r3
 800200c:	81bb      	strh	r3, [r7, #12]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]) - MPU6050.S2.Offset.Az;
 800200e:	7a3b      	ldrb	r3, [r7, #8]
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	b21a      	sxth	r2, r3
 8002014:	7a7b      	ldrb	r3, [r7, #9]
 8002016:	b21b      	sxth	r3, r3
 8002018:	4313      	orrs	r3, r2
 800201a:	b21b      	sxth	r3, r3
 800201c:	b29a      	uxth	r2, r3
 800201e:	4b1a      	ldr	r3, [pc, #104]	@ (8002088 <MPU6050_accel+0x1a0>)
 8002020:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8002024:	b29b      	uxth	r3, r3
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	b29b      	uxth	r3, r3
 800202a:	817b      	strh	r3, [r7, #10]

	MPU6050.S2.Ax = (float)Accel_X_RAW/2048.0;
 800202c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002038:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800208c <MPU6050_accel+0x1a4>
 800203c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <MPU6050_accel+0x1a0>)
 8002042:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	MPU6050.S2.Ay = (float)Accel_Y_RAW/2048.0;
 8002046:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002052:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800208c <MPU6050_accel+0x1a4>
 8002056:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800205a:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <MPU6050_accel+0x1a0>)
 800205c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	MPU6050.S2.Az = (float)Accel_Z_RAW/2048.0;
 8002060:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002064:	ee07 3a90 	vmov	s15, r3
 8002068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800208c <MPU6050_accel+0x1a4>
 8002070:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002074:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <MPU6050_accel+0x1a0>)
 8002076:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	2000049c 	.word	0x2000049c
 8002088:	200000d0 	.word	0x200000d0
 800208c:	45000000 	.word	0x45000000
 8002090:	200004f0 	.word	0x200004f0
 8002094:	00000000 	.word	0x00000000

08002098 <MPU6050_gyro>:

void MPU6050_gyro(void){
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	int16_t Gyro_X_RAW, Gyro_Y_RAW, Gyro_Z_RAW;

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1);
 800209e:	2301      	movs	r3, #1
 80020a0:	9302      	str	r3, [sp, #8]
 80020a2:	2306      	movs	r3, #6
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2301      	movs	r3, #1
 80020ac:	2243      	movs	r2, #67	@ 0x43
 80020ae:	21d0      	movs	r1, #208	@ 0xd0
 80020b0:	4883      	ldr	r0, [pc, #524]	@ (80022c0 <MPU6050_gyro+0x228>)
 80020b2:	f002 fefd 	bl	8004eb0 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]) - MPU6050.S1.Offset.Gx;
 80020b6:	793b      	ldrb	r3, [r7, #4]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	b21a      	sxth	r2, r3
 80020bc:	797b      	ldrb	r3, [r7, #5]
 80020be:	b21b      	sxth	r3, r3
 80020c0:	4313      	orrs	r3, r2
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	4b7f      	ldr	r3, [pc, #508]	@ (80022c4 <MPU6050_gyro+0x22c>)
 80020c8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	81fb      	strh	r3, [r7, #14]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]) - MPU6050.S1.Offset.Gy;
 80020d4:	79bb      	ldrb	r3, [r7, #6]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	b21a      	sxth	r2, r3
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	b21b      	sxth	r3, r3
 80020de:	4313      	orrs	r3, r2
 80020e0:	b21b      	sxth	r3, r3
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b77      	ldr	r3, [pc, #476]	@ (80022c4 <MPU6050_gyro+0x22c>)
 80020e6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	81bb      	strh	r3, [r7, #12]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]) - MPU6050.S1.Offset.Gz;
 80020f2:	7a3b      	ldrb	r3, [r7, #8]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	b21a      	sxth	r2, r3
 80020f8:	7a7b      	ldrb	r3, [r7, #9]
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b21b      	sxth	r3, r3
 8002100:	b29a      	uxth	r2, r3
 8002102:	4b70      	ldr	r3, [pc, #448]	@ (80022c4 <MPU6050_gyro+0x22c>)
 8002104:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8002108:	b29b      	uxth	r3, r3
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	b29b      	uxth	r3, r3
 800210e:	817b      	strh	r3, [r7, #10]

	MPU6050.S1.Gx = (float)Gyro_X_RAW/16.4;
 8002110:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211c:	ee17 0a90 	vmov	r0, s15
 8002120:	f7fe f9c2 	bl	80004a8 <__aeabi_f2d>
 8002124:	a364      	add	r3, pc, #400	@ (adr r3, 80022b8 <MPU6050_gyro+0x220>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	f7fe fb3f 	bl	80007ac <__aeabi_ddiv>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4610      	mov	r0, r2
 8002134:	4619      	mov	r1, r3
 8002136:	f7fe fcdf 	bl	8000af8 <__aeabi_d2f>
 800213a:	4603      	mov	r3, r0
 800213c:	4a61      	ldr	r2, [pc, #388]	@ (80022c4 <MPU6050_gyro+0x22c>)
 800213e:	6113      	str	r3, [r2, #16]
	MPU6050.S1.Gy = (float)Gyro_Y_RAW/16.4;
 8002140:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214c:	ee17 0a90 	vmov	r0, s15
 8002150:	f7fe f9aa 	bl	80004a8 <__aeabi_f2d>
 8002154:	a358      	add	r3, pc, #352	@ (adr r3, 80022b8 <MPU6050_gyro+0x220>)
 8002156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215a:	f7fe fb27 	bl	80007ac <__aeabi_ddiv>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	f7fe fcc7 	bl	8000af8 <__aeabi_d2f>
 800216a:	4603      	mov	r3, r0
 800216c:	4a55      	ldr	r2, [pc, #340]	@ (80022c4 <MPU6050_gyro+0x22c>)
 800216e:	6153      	str	r3, [r2, #20]
	MPU6050.S1.Gz = (float)Gyro_Z_RAW/16.4;
 8002170:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002174:	ee07 3a90 	vmov	s15, r3
 8002178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800217c:	ee17 0a90 	vmov	r0, s15
 8002180:	f7fe f992 	bl	80004a8 <__aeabi_f2d>
 8002184:	a34c      	add	r3, pc, #304	@ (adr r3, 80022b8 <MPU6050_gyro+0x220>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe fb0f 	bl	80007ac <__aeabi_ddiv>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f7fe fcaf 	bl	8000af8 <__aeabi_d2f>
 800219a:	4603      	mov	r3, r0
 800219c:	4a49      	ldr	r2, [pc, #292]	@ (80022c4 <MPU6050_gyro+0x22c>)
 800219e:	6193      	str	r3, [r2, #24]

	memset(Rec_Data,0,6);
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	2206      	movs	r2, #6
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f006 ff6c 	bl	8009084 <memset>

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1);
 80021ac:	2301      	movs	r3, #1
 80021ae:	9302      	str	r3, [sp, #8]
 80021b0:	2306      	movs	r3, #6
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	2301      	movs	r3, #1
 80021ba:	2243      	movs	r2, #67	@ 0x43
 80021bc:	21d0      	movs	r1, #208	@ 0xd0
 80021be:	4842      	ldr	r0, [pc, #264]	@ (80022c8 <MPU6050_gyro+0x230>)
 80021c0:	f002 fe76 	bl	8004eb0 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]) - MPU6050.S2.Offset.Gx;
 80021c4:	793b      	ldrb	r3, [r7, #4]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	b21a      	sxth	r2, r3
 80021ca:	797b      	ldrb	r3, [r7, #5]
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b21b      	sxth	r3, r3
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	4b3b      	ldr	r3, [pc, #236]	@ (80022c4 <MPU6050_gyro+0x22c>)
 80021d6:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	@ 0x4a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	b29b      	uxth	r3, r3
 80021e0:	81fb      	strh	r3, [r7, #14]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]) - MPU6050.S2.Offset.Gy;
 80021e2:	79bb      	ldrb	r3, [r7, #6]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	b21a      	sxth	r2, r3
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	b21b      	sxth	r3, r3
 80021ec:	4313      	orrs	r3, r2
 80021ee:	b21b      	sxth	r3, r3
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	4b34      	ldr	r3, [pc, #208]	@ (80022c4 <MPU6050_gyro+0x22c>)
 80021f4:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	@ 0x4c
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	81bb      	strh	r3, [r7, #12]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]) - MPU6050.S2.Offset.Gz;
 8002200:	7a3b      	ldrb	r3, [r7, #8]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	b21a      	sxth	r2, r3
 8002206:	7a7b      	ldrb	r3, [r7, #9]
 8002208:	b21b      	sxth	r3, r3
 800220a:	4313      	orrs	r3, r2
 800220c:	b21b      	sxth	r3, r3
 800220e:	b29a      	uxth	r2, r3
 8002210:	4b2c      	ldr	r3, [pc, #176]	@ (80022c4 <MPU6050_gyro+0x22c>)
 8002212:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	@ 0x4e
 8002216:	b29b      	uxth	r3, r3
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	b29b      	uxth	r3, r3
 800221c:	817b      	strh	r3, [r7, #10]

	MPU6050.S2.Gx = (float)Gyro_X_RAW/16.4;
 800221e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222a:	ee17 0a90 	vmov	r0, s15
 800222e:	f7fe f93b 	bl	80004a8 <__aeabi_f2d>
 8002232:	a321      	add	r3, pc, #132	@ (adr r3, 80022b8 <MPU6050_gyro+0x220>)
 8002234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002238:	f7fe fab8 	bl	80007ac <__aeabi_ddiv>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	f7fe fc58 	bl	8000af8 <__aeabi_d2f>
 8002248:	4603      	mov	r3, r0
 800224a:	4a1e      	ldr	r2, [pc, #120]	@ (80022c4 <MPU6050_gyro+0x22c>)
 800224c:	6393      	str	r3, [r2, #56]	@ 0x38
	MPU6050.S2.Gy = (float)Gyro_Y_RAW/16.4;
 800224e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225a:	ee17 0a90 	vmov	r0, s15
 800225e:	f7fe f923 	bl	80004a8 <__aeabi_f2d>
 8002262:	a315      	add	r3, pc, #84	@ (adr r3, 80022b8 <MPU6050_gyro+0x220>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe faa0 	bl	80007ac <__aeabi_ddiv>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fc40 	bl	8000af8 <__aeabi_d2f>
 8002278:	4603      	mov	r3, r0
 800227a:	4a12      	ldr	r2, [pc, #72]	@ (80022c4 <MPU6050_gyro+0x22c>)
 800227c:	63d3      	str	r3, [r2, #60]	@ 0x3c
	MPU6050.S2.Gz = (float)Gyro_Z_RAW/16.4;
 800227e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800228a:	ee17 0a90 	vmov	r0, s15
 800228e:	f7fe f90b 	bl	80004a8 <__aeabi_f2d>
 8002292:	a309      	add	r3, pc, #36	@ (adr r3, 80022b8 <MPU6050_gyro+0x220>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fe fa88 	bl	80007ac <__aeabi_ddiv>
 800229c:	4602      	mov	r2, r0
 800229e:	460b      	mov	r3, r1
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7fe fc28 	bl	8000af8 <__aeabi_d2f>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4a06      	ldr	r2, [pc, #24]	@ (80022c4 <MPU6050_gyro+0x22c>)
 80022ac:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80022ae:	bf00      	nop
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	66666666 	.word	0x66666666
 80022bc:	40306666 	.word	0x40306666
 80022c0:	2000049c 	.word	0x2000049c
 80022c4:	200000d0 	.word	0x200000d0
 80022c8:	200004f0 	.word	0x200004f0

080022cc <MPU6050_getData>:

void MPU6050_getData(void){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	MPU6050_accel();
 80022d0:	f7ff fe0a 	bl	8001ee8 <MPU6050_accel>
	MPU6050_gyro();
 80022d4:	f7ff fee0 	bl	8002098 <MPU6050_gyro>
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}

080022dc <init_task_1ms>:
		0x55667788
};
uint32_t flash_data_read[50];
//////////////////////////////INICIALIZACIÓN DE FUNCIONES///////////////////////////////////////

void init_task_1ms(void){
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
	MPU6050_init();
 80022e0:	f7ff fd08 	bl	8001cf4 <MPU6050_init>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <init_task_5ms>:

void init_task_5ms(void){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
	BMP280_init();
 80022ec:	f7ff faf6 	bl	80018dc <BMP280_init>
	Flash_Write_Data(0x08020000,flash_data,2);
 80022f0:	2202      	movs	r2, #2
 80022f2:	4905      	ldr	r1, [pc, #20]	@ (8002308 <init_task_5ms+0x20>)
 80022f4:	4805      	ldr	r0, [pc, #20]	@ (800230c <init_task_5ms+0x24>)
 80022f6:	f7ff fbb9 	bl	8001a6c <Flash_Write_Data>
	Flash_Read_Data(0x08020000,flash_data_read,50);
 80022fa:	2232      	movs	r2, #50	@ 0x32
 80022fc:	4904      	ldr	r1, [pc, #16]	@ (8002310 <init_task_5ms+0x28>)
 80022fe:	4803      	ldr	r0, [pc, #12]	@ (800230c <init_task_5ms+0x24>)
 8002300:	f7ff fc0c 	bl	8001b1c <Flash_Read_Data>
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000000 	.word	0x20000000
 800230c:	08020000 	.word	0x08020000
 8002310:	20000120 	.word	0x20000120

08002314 <init_task_10ms>:

void init_task_10ms(void){
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0

}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <init_task_50ms>:

void init_task_50ms(void){
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0

}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <init_task_100ms>:

void init_task_100ms(void){
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0

}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <init_task_500ms>:

void init_task_500ms(void){
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0

}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <task_1ms>:

//////////////////////////////FUNCIONES PERIODICAS///////////////////////////////////////

void task_1ms(void){
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	MPU6050_getData();
 8002350:	f7ff ffbc 	bl	80022cc <MPU6050_getData>
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}

08002358 <task_5ms>:

void task_5ms(void){
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
	BMP280_calculate();
 800235c:	f7ff fae2 	bl	8001924 <BMP280_calculate>
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}

08002364 <task_10ms>:

void task_10ms(void){
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0

}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <task_50ms>:

void task_50ms(void){
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0

}
 8002376:	bf00      	nop
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <task_100ms>:

void task_100ms(void){
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <task_500ms>:

void task_500ms(void){
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023a2:	463b      	mov	r3, r7
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80023ae:	4b21      	ldr	r3, [pc, #132]	@ (8002434 <MX_ADC1_Init+0x98>)
 80023b0:	4a21      	ldr	r2, [pc, #132]	@ (8002438 <MX_ADC1_Init+0x9c>)
 80023b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80023b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002434 <MX_ADC1_Init+0x98>)
 80023b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002434 <MX_ADC1_Init+0x98>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80023c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002434 <MX_ADC1_Init+0x98>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80023c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <MX_ADC1_Init+0x98>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023ce:	4b19      	ldr	r3, [pc, #100]	@ (8002434 <MX_ADC1_Init+0x98>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023d6:	4b17      	ldr	r3, [pc, #92]	@ (8002434 <MX_ADC1_Init+0x98>)
 80023d8:	2200      	movs	r2, #0
 80023da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023dc:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <MX_ADC1_Init+0x98>)
 80023de:	4a17      	ldr	r2, [pc, #92]	@ (800243c <MX_ADC1_Init+0xa0>)
 80023e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023e2:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <MX_ADC1_Init+0x98>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80023e8:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <MX_ADC1_Init+0x98>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80023ee:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <MX_ADC1_Init+0x98>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <MX_ADC1_Init+0x98>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023fc:	480d      	ldr	r0, [pc, #52]	@ (8002434 <MX_ADC1_Init+0x98>)
 80023fe:	f001 f827 	bl	8003450 <HAL_ADC_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002408:	f000 fc34 	bl	8002c74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800240c:	2301      	movs	r3, #1
 800240e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002410:	2301      	movs	r3, #1
 8002412:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002414:	2300      	movs	r3, #0
 8002416:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002418:	463b      	mov	r3, r7
 800241a:	4619      	mov	r1, r3
 800241c:	4805      	ldr	r0, [pc, #20]	@ (8002434 <MX_ADC1_Init+0x98>)
 800241e:	f001 f85b 	bl	80034d8 <HAL_ADC_ConfigChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002428:	f000 fc24 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200001e8 	.word	0x200001e8
 8002438:	40012000 	.word	0x40012000
 800243c:	0f000001 	.word	0x0f000001

08002440 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	@ 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a17      	ldr	r2, [pc, #92]	@ (80024bc <HAL_ADC_MspInit+0x7c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d127      	bne.n	80024b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	4b16      	ldr	r3, [pc, #88]	@ (80024c0 <HAL_ADC_MspInit+0x80>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	4a15      	ldr	r2, [pc, #84]	@ (80024c0 <HAL_ADC_MspInit+0x80>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002470:	6453      	str	r3, [r2, #68]	@ 0x44
 8002472:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <HAL_ADC_MspInit+0x80>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b0f      	ldr	r3, [pc, #60]	@ (80024c0 <HAL_ADC_MspInit+0x80>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	4a0e      	ldr	r2, [pc, #56]	@ (80024c0 <HAL_ADC_MspInit+0x80>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6313      	str	r3, [r2, #48]	@ 0x30
 800248e:	4b0c      	ldr	r3, [pc, #48]	@ (80024c0 <HAL_ADC_MspInit+0x80>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_VBat_Pin;
 800249a:	2302      	movs	r3, #2
 800249c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800249e:	2303      	movs	r3, #3
 80024a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VBat_GPIO_Port, &GPIO_InitStruct);
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	4619      	mov	r1, r3
 80024ac:	4805      	ldr	r0, [pc, #20]	@ (80024c4 <HAL_ADC_MspInit+0x84>)
 80024ae:	f002 f923 	bl	80046f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80024b2:	bf00      	nop
 80024b4:	3728      	adds	r7, #40	@ 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40012000 	.word	0x40012000
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020000 	.word	0x40020000

080024c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <MX_DMA_Init+0x3c>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002504 <MX_DMA_Init+0x3c>)
 80024d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024de:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <MX_DMA_Init+0x3c>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2105      	movs	r1, #5
 80024ee:	200e      	movs	r0, #14
 80024f0:	f001 fad8 	bl	8003aa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80024f4:	200e      	movs	r0, #14
 80024f6:	f001 faf1 	bl	8003adc <HAL_NVIC_EnableIRQ>

}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800

08002508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a07      	ldr	r2, [pc, #28]	@ (8002534 <vApplicationGetIdleTaskMemory+0x2c>)
 8002518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	4a06      	ldr	r2, [pc, #24]	@ (8002538 <vApplicationGetIdleTaskMemory+0x30>)
 800251e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2280      	movs	r2, #128	@ 0x80
 8002524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000248 	.word	0x20000248
 8002538:	2000029c 	.word	0x2000029c

0800253c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800253c:	b5b0      	push	{r4, r5, r7, lr}
 800253e:	b0aa      	sub	sp, #168	@ 0xa8
 8002540:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_5ms */
  osThreadDef(Task_5ms, Task5ms, osPriorityNormal, 0, 128);
 8002542:	4b3a      	ldr	r3, [pc, #232]	@ (800262c <MX_FREERTOS_Init+0xf0>)
 8002544:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 8002548:	461d      	mov	r5, r3
 800254a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800254c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800254e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_5msHandle = osThreadCreate(osThread(Task_5ms), NULL);
 8002556:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f005 fb52 	bl	8007c06 <osThreadCreate>
 8002562:	4603      	mov	r3, r0
 8002564:	4a32      	ldr	r2, [pc, #200]	@ (8002630 <MX_FREERTOS_Init+0xf4>)
 8002566:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, Task10ms, osPriorityNormal, 0, 128);
 8002568:	4b32      	ldr	r3, [pc, #200]	@ (8002634 <MX_FREERTOS_Init+0xf8>)
 800256a:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 800256e:	461d      	mov	r5, r3
 8002570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002574:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002578:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 800257c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f005 fb3f 	bl	8007c06 <osThreadCreate>
 8002588:	4603      	mov	r3, r0
 800258a:	4a2b      	ldr	r2, [pc, #172]	@ (8002638 <MX_FREERTOS_Init+0xfc>)
 800258c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_50ms */
  osThreadDef(Task_50ms, Task50ms, osPriorityNormal, 0, 128);
 800258e:	4b2b      	ldr	r3, [pc, #172]	@ (800263c <MX_FREERTOS_Init+0x100>)
 8002590:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8002594:	461d      	mov	r5, r3
 8002596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800259a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800259e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_50msHandle = osThreadCreate(osThread(Task_50ms), NULL);
 80025a2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f005 fb2c 	bl	8007c06 <osThreadCreate>
 80025ae:	4603      	mov	r3, r0
 80025b0:	4a23      	ldr	r2, [pc, #140]	@ (8002640 <MX_FREERTOS_Init+0x104>)
 80025b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, Task100ms, osPriorityNormal, 0, 128);
 80025b4:	4b23      	ldr	r3, [pc, #140]	@ (8002644 <MX_FREERTOS_Init+0x108>)
 80025b6:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80025ba:	461d      	mov	r5, r3
 80025bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 80025c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f005 fb19 	bl	8007c06 <osThreadCreate>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002648 <MX_FREERTOS_Init+0x10c>)
 80025d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_500ms */
  osThreadDef(Task_500ms, Task500ms, osPriorityNormal, 0, 128);
 80025da:	4b1c      	ldr	r3, [pc, #112]	@ (800264c <MX_FREERTOS_Init+0x110>)
 80025dc:	f107 041c 	add.w	r4, r7, #28
 80025e0:	461d      	mov	r5, r3
 80025e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_500msHandle = osThreadCreate(osThread(Task_500ms), NULL);
 80025ee:	f107 031c 	add.w	r3, r7, #28
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f005 fb06 	bl	8007c06 <osThreadCreate>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4a14      	ldr	r2, [pc, #80]	@ (8002650 <MX_FREERTOS_Init+0x114>)
 80025fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, Task1ms, osPriorityNormal, 0, 128);
 8002600:	4b14      	ldr	r3, [pc, #80]	@ (8002654 <MX_FREERTOS_Init+0x118>)
 8002602:	463c      	mov	r4, r7
 8002604:	461d      	mov	r5, r3
 8002606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800260a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800260e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 8002612:	463b      	mov	r3, r7
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f005 faf5 	bl	8007c06 <osThreadCreate>
 800261c:	4603      	mov	r3, r0
 800261e:	4a0e      	ldr	r2, [pc, #56]	@ (8002658 <MX_FREERTOS_Init+0x11c>)
 8002620:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002622:	bf00      	nop
 8002624:	37a8      	adds	r7, #168	@ 0xa8
 8002626:	46bd      	mov	sp, r7
 8002628:	bdb0      	pop	{r4, r5, r7, pc}
 800262a:	bf00      	nop
 800262c:	08009508 	.word	0x08009508
 8002630:	20000230 	.word	0x20000230
 8002634:	08009530 	.word	0x08009530
 8002638:	20000234 	.word	0x20000234
 800263c:	08009558 	.word	0x08009558
 8002640:	20000238 	.word	0x20000238
 8002644:	08009580 	.word	0x08009580
 8002648:	2000023c 	.word	0x2000023c
 800264c:	080095a8 	.word	0x080095a8
 8002650:	20000240 	.word	0x20000240
 8002654:	080095d0 	.word	0x080095d0
 8002658:	20000244 	.word	0x20000244

0800265c <Task5ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task5ms */
void Task5ms(void const * argument)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task5ms */
	init_task_5ms();
 8002664:	f7ff fe40 	bl	80022e8 <init_task_5ms>
  /* Infinite loop */
  for(;;)
  {
	task_5ms();
 8002668:	f7ff fe76 	bl	8002358 <task_5ms>
    osDelay(5);
 800266c:	2005      	movs	r0, #5
 800266e:	f005 fb16 	bl	8007c9e <osDelay>
	task_5ms();
 8002672:	bf00      	nop
 8002674:	e7f8      	b.n	8002668 <Task5ms+0xc>

08002676 <Task10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task10ms */
void Task10ms(void const * argument)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task10ms */
	init_task_10ms();
 800267e:	f7ff fe49 	bl	8002314 <init_task_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 8002682:	f7ff fe6f 	bl	8002364 <task_10ms>
    osDelay(10);
 8002686:	200a      	movs	r0, #10
 8002688:	f005 fb09 	bl	8007c9e <osDelay>
	task_10ms();
 800268c:	bf00      	nop
 800268e:	e7f8      	b.n	8002682 <Task10ms+0xc>

08002690 <Task50ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task50ms */
void Task50ms(void const * argument)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task50ms */
	init_task_50ms();
 8002698:	f7ff fe43 	bl	8002322 <init_task_50ms>
  /* Infinite loop */
  for(;;)
  {
	task_50ms();
 800269c:	f7ff fe69 	bl	8002372 <task_50ms>
    osDelay(50);
 80026a0:	2032      	movs	r0, #50	@ 0x32
 80026a2:	f005 fafc 	bl	8007c9e <osDelay>
	task_50ms();
 80026a6:	bf00      	nop
 80026a8:	e7f8      	b.n	800269c <Task50ms+0xc>

080026aa <Task100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task100ms */
void Task100ms(void const * argument)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task100ms */
	init_task_100ms();
 80026b2:	f7ff fe3d 	bl	8002330 <init_task_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 80026b6:	f7ff fe63 	bl	8002380 <task_100ms>
    osDelay(100);
 80026ba:	2064      	movs	r0, #100	@ 0x64
 80026bc:	f005 faef 	bl	8007c9e <osDelay>
	task_100ms();
 80026c0:	bf00      	nop
 80026c2:	e7f8      	b.n	80026b6 <Task100ms+0xc>

080026c4 <Task500ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task500ms */
void Task500ms(void const * argument)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task500ms */
	init_task_500ms();
 80026cc:	f7ff fe37 	bl	800233e <init_task_500ms>
  /* Infinite loop */
  for(;;)
  {
	task_500ms();
 80026d0:	f7ff fe5d 	bl	800238e <task_500ms>
    osDelay(500);
 80026d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026d8:	f005 fae1 	bl	8007c9e <osDelay>
	task_500ms();
 80026dc:	bf00      	nop
 80026de:	e7f7      	b.n	80026d0 <Task500ms+0xc>

080026e0 <Task1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1ms */
void Task1ms(void const * argument)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1ms */
	init_task_1ms();
 80026e8:	f7ff fdf8 	bl	80022dc <init_task_1ms>
  /* Infinite loop */
  for(;;)
  {
	task_1ms();
 80026ec:	f7ff fe2e 	bl	800234c <task_1ms>
    osDelay(1);
 80026f0:	2001      	movs	r0, #1
 80026f2:	f005 fad4 	bl	8007c9e <osDelay>
	task_1ms();
 80026f6:	bf00      	nop
 80026f8:	e7f8      	b.n	80026ec <Task1ms+0xc>
	...

080026fc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	@ 0x28
 8002700:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	4b4f      	ldr	r3, [pc, #316]	@ (8002854 <MX_GPIO_Init+0x158>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	4a4e      	ldr	r2, [pc, #312]	@ (8002854 <MX_GPIO_Init+0x158>)
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	6313      	str	r3, [r2, #48]	@ 0x30
 8002722:	4b4c      	ldr	r3, [pc, #304]	@ (8002854 <MX_GPIO_Init+0x158>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	4b48      	ldr	r3, [pc, #288]	@ (8002854 <MX_GPIO_Init+0x158>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	4a47      	ldr	r2, [pc, #284]	@ (8002854 <MX_GPIO_Init+0x158>)
 8002738:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800273c:	6313      	str	r3, [r2, #48]	@ 0x30
 800273e:	4b45      	ldr	r3, [pc, #276]	@ (8002854 <MX_GPIO_Init+0x158>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	4b41      	ldr	r3, [pc, #260]	@ (8002854 <MX_GPIO_Init+0x158>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	4a40      	ldr	r2, [pc, #256]	@ (8002854 <MX_GPIO_Init+0x158>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6313      	str	r3, [r2, #48]	@ 0x30
 800275a:	4b3e      	ldr	r3, [pc, #248]	@ (8002854 <MX_GPIO_Init+0x158>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	4b3a      	ldr	r3, [pc, #232]	@ (8002854 <MX_GPIO_Init+0x158>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	4a39      	ldr	r2, [pc, #228]	@ (8002854 <MX_GPIO_Init+0x158>)
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	6313      	str	r3, [r2, #48]	@ 0x30
 8002776:	4b37      	ldr	r3, [pc, #220]	@ (8002854 <MX_GPIO_Init+0x158>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 8002782:	2200      	movs	r2, #0
 8002784:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002788:	4833      	ldr	r0, [pc, #204]	@ (8002858 <MX_GPIO_Init+0x15c>)
 800278a:	f002 f939 	bl	8004a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|BMP_CS_Pin, GPIO_PIN_RESET);
 800278e:	2200      	movs	r2, #0
 8002790:	2105      	movs	r1, #5
 8002792:	4832      	ldr	r0, [pc, #200]	@ (800285c <MX_GPIO_Init+0x160>)
 8002794:	f002 f934 	bl	8004a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, uLed_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8002798:	2200      	movs	r2, #0
 800279a:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 800279e:	4830      	ldr	r0, [pc, #192]	@ (8002860 <MX_GPIO_Init+0x164>)
 80027a0:	f002 f92e 	bl	8004a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CS_Pin;
 80027a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027aa:	2301      	movs	r3, #1
 80027ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CS_GPIO_Port, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	4826      	ldr	r0, [pc, #152]	@ (8002858 <MX_GPIO_Init+0x15c>)
 80027be:	f001 ff9b 	bl	80046f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80027c2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80027c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027c8:	2303      	movs	r3, #3
 80027ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	4619      	mov	r1, r3
 80027d6:	4820      	ldr	r0, [pc, #128]	@ (8002858 <MX_GPIO_Init+0x15c>)
 80027d8:	f001 ff8e 	bl	80046f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_12;
 80027dc:	f241 0311 	movw	r3, #4113	@ 0x1011
 80027e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027e2:	2303      	movs	r3, #3
 80027e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	f107 0314 	add.w	r3, r7, #20
 80027ee:	4619      	mov	r1, r3
 80027f0:	481b      	ldr	r0, [pc, #108]	@ (8002860 <MX_GPIO_Init+0x164>)
 80027f2:	f001 ff81 	bl	80046f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|BMP_CS_Pin;
 80027f6:	2305      	movs	r3, #5
 80027f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fa:	2301      	movs	r3, #1
 80027fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002806:	f107 0314 	add.w	r3, r7, #20
 800280a:	4619      	mov	r1, r3
 800280c:	4813      	ldr	r0, [pc, #76]	@ (800285c <MX_GPIO_Init+0x160>)
 800280e:	f001 ff73 	bl	80046f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 8002812:	f240 2302 	movw	r3, #514	@ 0x202
 8002816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002818:	2303      	movs	r3, #3
 800281a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4619      	mov	r1, r3
 8002826:	480d      	ldr	r0, [pc, #52]	@ (800285c <MX_GPIO_Init+0x160>)
 8002828:	f001 ff66 	bl	80046f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = uLed_Pin|NRF_CE_Pin;
 800282c:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8002830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2300      	movs	r3, #0
 800283c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4619      	mov	r1, r3
 8002844:	4806      	ldr	r0, [pc, #24]	@ (8002860 <MX_GPIO_Init+0x164>)
 8002846:	f001 ff57 	bl	80046f8 <HAL_GPIO_Init>

}
 800284a:	bf00      	nop
 800284c:	3728      	adds	r7, #40	@ 0x28
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800
 8002858:	40020800 	.word	0x40020800
 800285c:	40020400 	.word	0x40020400
 8002860:	40020000 	.word	0x40020000

08002864 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002868:	4b12      	ldr	r3, [pc, #72]	@ (80028b4 <MX_I2C1_Init+0x50>)
 800286a:	4a13      	ldr	r2, [pc, #76]	@ (80028b8 <MX_I2C1_Init+0x54>)
 800286c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800286e:	4b11      	ldr	r3, [pc, #68]	@ (80028b4 <MX_I2C1_Init+0x50>)
 8002870:	4a12      	ldr	r2, [pc, #72]	@ (80028bc <MX_I2C1_Init+0x58>)
 8002872:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002874:	4b0f      	ldr	r3, [pc, #60]	@ (80028b4 <MX_I2C1_Init+0x50>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800287a:	4b0e      	ldr	r3, [pc, #56]	@ (80028b4 <MX_I2C1_Init+0x50>)
 800287c:	2200      	movs	r2, #0
 800287e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002880:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <MX_I2C1_Init+0x50>)
 8002882:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002886:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002888:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <MX_I2C1_Init+0x50>)
 800288a:	2200      	movs	r2, #0
 800288c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800288e:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <MX_I2C1_Init+0x50>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002894:	4b07      	ldr	r3, [pc, #28]	@ (80028b4 <MX_I2C1_Init+0x50>)
 8002896:	2200      	movs	r2, #0
 8002898:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800289a:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <MX_I2C1_Init+0x50>)
 800289c:	2200      	movs	r2, #0
 800289e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028a0:	4804      	ldr	r0, [pc, #16]	@ (80028b4 <MX_I2C1_Init+0x50>)
 80028a2:	f002 f8c7 	bl	8004a34 <HAL_I2C_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028ac:	f000 f9e2 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	2000049c 	.word	0x2000049c
 80028b8:	40005400 	.word	0x40005400
 80028bc:	000186a0 	.word	0x000186a0

080028c0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80028c4:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <MX_I2C2_Init+0x50>)
 80028c6:	4a13      	ldr	r2, [pc, #76]	@ (8002914 <MX_I2C2_Init+0x54>)
 80028c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80028ca:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <MX_I2C2_Init+0x50>)
 80028cc:	4a12      	ldr	r2, [pc, #72]	@ (8002918 <MX_I2C2_Init+0x58>)
 80028ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002910 <MX_I2C2_Init+0x50>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80028d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <MX_I2C2_Init+0x50>)
 80028d8:	2200      	movs	r2, #0
 80028da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002910 <MX_I2C2_Init+0x50>)
 80028de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002910 <MX_I2C2_Init+0x50>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80028ea:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <MX_I2C2_Init+0x50>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028f0:	4b07      	ldr	r3, [pc, #28]	@ (8002910 <MX_I2C2_Init+0x50>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028f6:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <MX_I2C2_Init+0x50>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80028fc:	4804      	ldr	r0, [pc, #16]	@ (8002910 <MX_I2C2_Init+0x50>)
 80028fe:	f002 f899 	bl	8004a34 <HAL_I2C_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002908:	f000 f9b4 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}
 8002910:	200004f0 	.word	0x200004f0
 8002914:	40005800 	.word	0x40005800
 8002918:	000186a0 	.word	0x000186a0

0800291c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002920:	4b12      	ldr	r3, [pc, #72]	@ (800296c <MX_I2C3_Init+0x50>)
 8002922:	4a13      	ldr	r2, [pc, #76]	@ (8002970 <MX_I2C3_Init+0x54>)
 8002924:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002926:	4b11      	ldr	r3, [pc, #68]	@ (800296c <MX_I2C3_Init+0x50>)
 8002928:	4a12      	ldr	r2, [pc, #72]	@ (8002974 <MX_I2C3_Init+0x58>)
 800292a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800292c:	4b0f      	ldr	r3, [pc, #60]	@ (800296c <MX_I2C3_Init+0x50>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002932:	4b0e      	ldr	r3, [pc, #56]	@ (800296c <MX_I2C3_Init+0x50>)
 8002934:	2200      	movs	r2, #0
 8002936:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002938:	4b0c      	ldr	r3, [pc, #48]	@ (800296c <MX_I2C3_Init+0x50>)
 800293a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800293e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002940:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <MX_I2C3_Init+0x50>)
 8002942:	2200      	movs	r2, #0
 8002944:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002946:	4b09      	ldr	r3, [pc, #36]	@ (800296c <MX_I2C3_Init+0x50>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800294c:	4b07      	ldr	r3, [pc, #28]	@ (800296c <MX_I2C3_Init+0x50>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002952:	4b06      	ldr	r3, [pc, #24]	@ (800296c <MX_I2C3_Init+0x50>)
 8002954:	2200      	movs	r2, #0
 8002956:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002958:	4804      	ldr	r0, [pc, #16]	@ (800296c <MX_I2C3_Init+0x50>)
 800295a:	f002 f86b 	bl	8004a34 <HAL_I2C_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002964:	f000 f986 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000544 	.word	0x20000544
 8002970:	40005c00 	.word	0x40005c00
 8002974:	000186a0 	.word	0x000186a0

08002978 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08e      	sub	sp, #56	@ 0x38
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a63      	ldr	r2, [pc, #396]	@ (8002b24 <HAL_I2C_MspInit+0x1ac>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d12c      	bne.n	80029f4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	4b62      	ldr	r3, [pc, #392]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	4a61      	ldr	r2, [pc, #388]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	623b      	str	r3, [r7, #32]
 80029b4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029b6:	23c0      	movs	r3, #192	@ 0xc0
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ba:	2312      	movs	r3, #18
 80029bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c2:	2303      	movs	r3, #3
 80029c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029c6:	2304      	movs	r3, #4
 80029c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029ce:	4619      	mov	r1, r3
 80029d0:	4856      	ldr	r0, [pc, #344]	@ (8002b2c <HAL_I2C_MspInit+0x1b4>)
 80029d2:	f001 fe91 	bl	80046f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	4b53      	ldr	r3, [pc, #332]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	4a52      	ldr	r2, [pc, #328]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 80029e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029e6:	4b50      	ldr	r3, [pc, #320]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80029f2:	e093      	b.n	8002b1c <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002b30 <HAL_I2C_MspInit+0x1b8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d13d      	bne.n	8002a7a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	4b49      	ldr	r3, [pc, #292]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	4a48      	ldr	r2, [pc, #288]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 8002a08:	f043 0302 	orr.w	r3, r3, #2
 8002a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0e:	4b46      	ldr	r3, [pc, #280]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a20:	2312      	movs	r3, #18
 8002a22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a34:	4619      	mov	r1, r3
 8002a36:	483d      	ldr	r0, [pc, #244]	@ (8002b2c <HAL_I2C_MspInit+0x1b4>)
 8002a38:	f001 fe5e 	bl	80046f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a40:	2312      	movs	r3, #18
 8002a42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002a4c:	2309      	movs	r3, #9
 8002a4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a54:	4619      	mov	r1, r3
 8002a56:	4835      	ldr	r0, [pc, #212]	@ (8002b2c <HAL_I2C_MspInit+0x1b4>)
 8002a58:	f001 fe4e 	bl	80046f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	4b31      	ldr	r3, [pc, #196]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	4a30      	ldr	r2, [pc, #192]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 8002a66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	697b      	ldr	r3, [r7, #20]
}
 8002a78:	e050      	b.n	8002b1c <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C3)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8002b34 <HAL_I2C_MspInit+0x1bc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d14b      	bne.n	8002b1c <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a84:	2300      	movs	r3, #0
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8c:	4a26      	ldr	r2, [pc, #152]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a94:	4b24      	ldr	r3, [pc, #144]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	4b20      	ldr	r3, [pc, #128]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 8002aaa:	f043 0302 	orr.w	r3, r3, #2
 8002aae:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAG_SCL_Pin;
 8002abc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ac2:	2312      	movs	r3, #18
 8002ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ace:	2304      	movs	r3, #4
 8002ad0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SCL_GPIO_Port, &GPIO_InitStruct);
 8002ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4817      	ldr	r0, [pc, #92]	@ (8002b38 <HAL_I2C_MspInit+0x1c0>)
 8002ada:	f001 fe0d 	bl	80046f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAG_SDA_Pin;
 8002ade:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ae4:	2312      	movs	r3, #18
 8002ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aec:	2303      	movs	r3, #3
 8002aee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002af0:	2309      	movs	r3, #9
 8002af2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SDA_GPIO_Port, &GPIO_InitStruct);
 8002af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002af8:	4619      	mov	r1, r3
 8002afa:	480c      	ldr	r0, [pc, #48]	@ (8002b2c <HAL_I2C_MspInit+0x1b4>)
 8002afc:	f001 fdfc 	bl	80046f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	4a07      	ldr	r2, [pc, #28]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 8002b0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <HAL_I2C_MspInit+0x1b0>)
 8002b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	3738      	adds	r7, #56	@ 0x38
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40005400 	.word	0x40005400
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40020400 	.word	0x40020400
 8002b30:	40005800 	.word	0x40005800
 8002b34:	40005c00 	.word	0x40005c00
 8002b38:	40020000 	.word	0x40020000

08002b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b40:	f000 fc20 	bl	8003384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b44:	f000 f81c 	bl	8002b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b48:	f7ff fdd8 	bl	80026fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002b4c:	f7ff fcbc 	bl	80024c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8002b50:	f7ff fc24 	bl	800239c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002b54:	f7ff fe86 	bl	8002864 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002b58:	f7ff feb2 	bl	80028c0 <MX_I2C2_Init>
  MX_I2C3_Init();
 8002b5c:	f7ff fede 	bl	800291c <MX_I2C3_Init>
  MX_SPI1_Init();
 8002b60:	f000 f88e 	bl	8002c80 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002b64:	f000 f8c2 	bl	8002cec <MX_SPI2_Init>
  MX_SPI3_Init();
 8002b68:	f000 f8f6 	bl	8002d58 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8002b6c:	f000 fb10 	bl	8003190 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002b70:	f000 fb38 	bl	80031e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002b74:	f7ff fce2 	bl	800253c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002b78:	f005 f83e 	bl	8007bf8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <main+0x40>

08002b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b094      	sub	sp, #80	@ 0x50
 8002b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b86:	f107 0320 	add.w	r3, r7, #32
 8002b8a:	2230      	movs	r2, #48	@ 0x30
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f006 fa78 	bl	8009084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b94:	f107 030c 	add.w	r3, r7, #12
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	4b27      	ldr	r3, [pc, #156]	@ (8002c48 <SystemClock_Config+0xc8>)
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	4a26      	ldr	r2, [pc, #152]	@ (8002c48 <SystemClock_Config+0xc8>)
 8002bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bb4:	4b24      	ldr	r3, [pc, #144]	@ (8002c48 <SystemClock_Config+0xc8>)
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	607b      	str	r3, [r7, #4]
 8002bc4:	4b21      	ldr	r3, [pc, #132]	@ (8002c4c <SystemClock_Config+0xcc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a20      	ldr	r2, [pc, #128]	@ (8002c4c <SystemClock_Config+0xcc>)
 8002bca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c4c <SystemClock_Config+0xcc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002bd8:	607b      	str	r3, [r7, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002be0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002be6:	2302      	movs	r3, #2
 8002be8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002bf0:	230c      	movs	r3, #12
 8002bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002bf4:	2360      	movs	r3, #96	@ 0x60
 8002bf6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002bfc:	2304      	movs	r3, #4
 8002bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c00:	f107 0320 	add.w	r3, r7, #32
 8002c04:	4618      	mov	r0, r3
 8002c06:	f002 ff39 	bl	8005a7c <HAL_RCC_OscConfig>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c10:	f000 f830 	bl	8002c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c14:	230f      	movs	r3, #15
 8002c16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002c2a:	f107 030c 	add.w	r3, r7, #12
 8002c2e:	2103      	movs	r1, #3
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 f99b 	bl	8005f6c <HAL_RCC_ClockConfig>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002c3c:	f000 f81a 	bl	8002c74 <Error_Handler>
  }
}
 8002c40:	bf00      	nop
 8002c42:	3750      	adds	r7, #80	@ 0x50
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40007000 	.word	0x40007000

08002c50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c62:	f000 fbb1 	bl	80033c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40014800 	.word	0x40014800

08002c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c78:	b672      	cpsid	i
}
 8002c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <Error_Handler+0x8>

08002c80 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c84:	4b17      	ldr	r3, [pc, #92]	@ (8002ce4 <MX_SPI1_Init+0x64>)
 8002c86:	4a18      	ldr	r2, [pc, #96]	@ (8002ce8 <MX_SPI1_Init+0x68>)
 8002c88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c8a:	4b16      	ldr	r3, [pc, #88]	@ (8002ce4 <MX_SPI1_Init+0x64>)
 8002c8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c92:	4b14      	ldr	r3, [pc, #80]	@ (8002ce4 <MX_SPI1_Init+0x64>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c98:	4b12      	ldr	r3, [pc, #72]	@ (8002ce4 <MX_SPI1_Init+0x64>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <MX_SPI1_Init+0x64>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce4 <MX_SPI1_Init+0x64>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002caa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce4 <MX_SPI1_Init+0x64>)
 8002cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce4 <MX_SPI1_Init+0x64>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce4 <MX_SPI1_Init+0x64>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cbe:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <MX_SPI1_Init+0x64>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc4:	4b07      	ldr	r3, [pc, #28]	@ (8002ce4 <MX_SPI1_Init+0x64>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <MX_SPI1_Init+0x64>)
 8002ccc:	220a      	movs	r2, #10
 8002cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cd0:	4804      	ldr	r0, [pc, #16]	@ (8002ce4 <MX_SPI1_Init+0x64>)
 8002cd2:	f003 fb5d 	bl	8006390 <HAL_SPI_Init>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002cdc:	f7ff ffca 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ce0:	bf00      	nop
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000598 	.word	0x20000598
 8002ce8:	40013000 	.word	0x40013000

08002cec <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002cf0:	4b17      	ldr	r3, [pc, #92]	@ (8002d50 <MX_SPI2_Init+0x64>)
 8002cf2:	4a18      	ldr	r2, [pc, #96]	@ (8002d54 <MX_SPI2_Init+0x68>)
 8002cf4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002cf6:	4b16      	ldr	r3, [pc, #88]	@ (8002d50 <MX_SPI2_Init+0x64>)
 8002cf8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cfc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002cfe:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <MX_SPI2_Init+0x64>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d04:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <MX_SPI2_Init+0x64>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d0a:	4b11      	ldr	r3, [pc, #68]	@ (8002d50 <MX_SPI2_Init+0x64>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d10:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <MX_SPI2_Init+0x64>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d16:	4b0e      	ldr	r3, [pc, #56]	@ (8002d50 <MX_SPI2_Init+0x64>)
 8002d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <MX_SPI2_Init+0x64>)
 8002d20:	2218      	movs	r2, #24
 8002d22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d24:	4b0a      	ldr	r3, [pc, #40]	@ (8002d50 <MX_SPI2_Init+0x64>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d2a:	4b09      	ldr	r3, [pc, #36]	@ (8002d50 <MX_SPI2_Init+0x64>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d30:	4b07      	ldr	r3, [pc, #28]	@ (8002d50 <MX_SPI2_Init+0x64>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002d36:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <MX_SPI2_Init+0x64>)
 8002d38:	220a      	movs	r2, #10
 8002d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d3c:	4804      	ldr	r0, [pc, #16]	@ (8002d50 <MX_SPI2_Init+0x64>)
 8002d3e:	f003 fb27 	bl	8006390 <HAL_SPI_Init>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002d48:	f7ff ff94 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d4c:	bf00      	nop
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	200005f0 	.word	0x200005f0
 8002d54:	40003800 	.word	0x40003800

08002d58 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002d5c:	4b17      	ldr	r3, [pc, #92]	@ (8002dbc <MX_SPI3_Init+0x64>)
 8002d5e:	4a18      	ldr	r2, [pc, #96]	@ (8002dc0 <MX_SPI3_Init+0x68>)
 8002d60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002d62:	4b16      	ldr	r3, [pc, #88]	@ (8002dbc <MX_SPI3_Init+0x64>)
 8002d64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002d6a:	4b14      	ldr	r3, [pc, #80]	@ (8002dbc <MX_SPI3_Init+0x64>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d70:	4b12      	ldr	r3, [pc, #72]	@ (8002dbc <MX_SPI3_Init+0x64>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d76:	4b11      	ldr	r3, [pc, #68]	@ (8002dbc <MX_SPI3_Init+0x64>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dbc <MX_SPI3_Init+0x64>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002d82:	4b0e      	ldr	r3, [pc, #56]	@ (8002dbc <MX_SPI3_Init+0x64>)
 8002d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d88:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <MX_SPI3_Init+0x64>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d90:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <MX_SPI3_Init+0x64>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d96:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <MX_SPI3_Init+0x64>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d9c:	4b07      	ldr	r3, [pc, #28]	@ (8002dbc <MX_SPI3_Init+0x64>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002da2:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <MX_SPI3_Init+0x64>)
 8002da4:	220a      	movs	r2, #10
 8002da6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002da8:	4804      	ldr	r0, [pc, #16]	@ (8002dbc <MX_SPI3_Init+0x64>)
 8002daa:	f003 faf1 	bl	8006390 <HAL_SPI_Init>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002db4:	f7ff ff5e 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002db8:	bf00      	nop
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000648 	.word	0x20000648
 8002dc0:	40003c00 	.word	0x40003c00

08002dc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08e      	sub	sp, #56	@ 0x38
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a6e      	ldr	r2, [pc, #440]	@ (8002f9c <HAL_SPI_MspInit+0x1d8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d12c      	bne.n	8002e40 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	623b      	str	r3, [r7, #32]
 8002dea:	4b6d      	ldr	r3, [pc, #436]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	4a6c      	ldr	r2, [pc, #432]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002df0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002df6:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dfe:	623b      	str	r3, [r7, #32]
 8002e00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	4b66      	ldr	r3, [pc, #408]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	4a65      	ldr	r2, [pc, #404]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e12:	4b63      	ldr	r3, [pc, #396]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002e1e:	23e0      	movs	r3, #224	@ 0xe0
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e22:	2302      	movs	r3, #2
 8002e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e2e:	2305      	movs	r3, #5
 8002e30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e36:	4619      	mov	r1, r3
 8002e38:	485a      	ldr	r0, [pc, #360]	@ (8002fa4 <HAL_SPI_MspInit+0x1e0>)
 8002e3a:	f001 fc5d 	bl	80046f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002e3e:	e0a9      	b.n	8002f94 <HAL_SPI_MspInit+0x1d0>
  else if(spiHandle->Instance==SPI2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a58      	ldr	r2, [pc, #352]	@ (8002fa8 <HAL_SPI_MspInit+0x1e4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d162      	bne.n	8002f10 <HAL_SPI_MspInit+0x14c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	4b54      	ldr	r3, [pc, #336]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	4a53      	ldr	r2, [pc, #332]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002e54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e5a:	4b51      	ldr	r3, [pc, #324]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	4b4d      	ldr	r3, [pc, #308]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	4a4c      	ldr	r2, [pc, #304]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e76:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8002e82:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e90:	2303      	movs	r3, #3
 8002e92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e94:	2305      	movs	r3, #5
 8002e96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4843      	ldr	r0, [pc, #268]	@ (8002fac <HAL_SPI_MspInit+0x1e8>)
 8002ea0:	f001 fc2a 	bl	80046f8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002ea4:	4b42      	ldr	r3, [pc, #264]	@ (8002fb0 <HAL_SPI_MspInit+0x1ec>)
 8002ea6:	4a43      	ldr	r2, [pc, #268]	@ (8002fb4 <HAL_SPI_MspInit+0x1f0>)
 8002ea8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002eaa:	4b41      	ldr	r3, [pc, #260]	@ (8002fb0 <HAL_SPI_MspInit+0x1ec>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb0 <HAL_SPI_MspInit+0x1ec>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8002fb0 <HAL_SPI_MspInit+0x1ec>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb0 <HAL_SPI_MspInit+0x1ec>)
 8002ebe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ec2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb0 <HAL_SPI_MspInit+0x1ec>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eca:	4b39      	ldr	r3, [pc, #228]	@ (8002fb0 <HAL_SPI_MspInit+0x1ec>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002ed0:	4b37      	ldr	r3, [pc, #220]	@ (8002fb0 <HAL_SPI_MspInit+0x1ec>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ed6:	4b36      	ldr	r3, [pc, #216]	@ (8002fb0 <HAL_SPI_MspInit+0x1ec>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002edc:	4b34      	ldr	r3, [pc, #208]	@ (8002fb0 <HAL_SPI_MspInit+0x1ec>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002ee2:	4833      	ldr	r0, [pc, #204]	@ (8002fb0 <HAL_SPI_MspInit+0x1ec>)
 8002ee4:	f000 fe08 	bl	8003af8 <HAL_DMA_Init>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8002eee:	f7ff fec1 	bl	8002c74 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb0 <HAL_SPI_MspInit+0x1ec>)
 8002ef6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb0 <HAL_SPI_MspInit+0x1ec>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002efe:	2200      	movs	r2, #0
 8002f00:	2105      	movs	r1, #5
 8002f02:	2024      	movs	r0, #36	@ 0x24
 8002f04:	f000 fdce 	bl	8003aa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002f08:	2024      	movs	r0, #36	@ 0x24
 8002f0a:	f000 fde7 	bl	8003adc <HAL_NVIC_EnableIRQ>
}
 8002f0e:	e041      	b.n	8002f94 <HAL_SPI_MspInit+0x1d0>
  else if(spiHandle->Instance==SPI3)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a28      	ldr	r2, [pc, #160]	@ (8002fb8 <HAL_SPI_MspInit+0x1f4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d13c      	bne.n	8002f94 <HAL_SPI_MspInit+0x1d0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	4b20      	ldr	r3, [pc, #128]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	4a1f      	ldr	r2, [pc, #124]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002f24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	4a18      	ldr	r2, [pc, #96]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f46:	4b16      	ldr	r3, [pc, #88]	@ (8002fa0 <HAL_SPI_MspInit+0x1dc>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NRF_SCK_Pin;
 8002f52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f60:	2303      	movs	r3, #3
 8002f62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002f64:	2307      	movs	r3, #7
 8002f66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 8002f68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	480f      	ldr	r0, [pc, #60]	@ (8002fac <HAL_SPI_MspInit+0x1e8>)
 8002f70:	f001 fbc2 	bl	80046f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NRF_MISO_Pin|NRF_MOSI_Pin;
 8002f74:	2330      	movs	r3, #48	@ 0x30
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f80:	2303      	movs	r3, #3
 8002f82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f84:	2306      	movs	r3, #6
 8002f86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4807      	ldr	r0, [pc, #28]	@ (8002fac <HAL_SPI_MspInit+0x1e8>)
 8002f90:	f001 fbb2 	bl	80046f8 <HAL_GPIO_Init>
}
 8002f94:	bf00      	nop
 8002f96:	3738      	adds	r7, #56	@ 0x38
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40013000 	.word	0x40013000
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40020000 	.word	0x40020000
 8002fa8:	40003800 	.word	0x40003800
 8002fac:	40020400 	.word	0x40020400
 8002fb0:	200006a0 	.word	0x200006a0
 8002fb4:	40026058 	.word	0x40026058
 8002fb8:	40003c00 	.word	0x40003c00

08002fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	4b12      	ldr	r3, [pc, #72]	@ (8003010 <HAL_MspInit+0x54>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fca:	4a11      	ldr	r2, [pc, #68]	@ (8003010 <HAL_MspInit+0x54>)
 8002fcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8003010 <HAL_MspInit+0x54>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	603b      	str	r3, [r7, #0]
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <HAL_MspInit+0x54>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8003010 <HAL_MspInit+0x54>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fee:	4b08      	ldr	r3, [pc, #32]	@ (8003010 <HAL_MspInit+0x54>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	210f      	movs	r1, #15
 8002ffe:	f06f 0001 	mvn.w	r0, #1
 8003002:	f000 fd4f 	bl	8003aa4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800

08003014 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08c      	sub	sp, #48	@ 0x30
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8003024:	2300      	movs	r3, #0
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	4b2e      	ldr	r3, [pc, #184]	@ (80030e4 <HAL_InitTick+0xd0>)
 800302a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302c:	4a2d      	ldr	r2, [pc, #180]	@ (80030e4 <HAL_InitTick+0xd0>)
 800302e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003032:	6453      	str	r3, [r2, #68]	@ 0x44
 8003034:	4b2b      	ldr	r3, [pc, #172]	@ (80030e4 <HAL_InitTick+0xd0>)
 8003036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003038:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003040:	f107 020c 	add.w	r2, r7, #12
 8003044:	f107 0310 	add.w	r3, r7, #16
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f003 f96e 	bl	800632c <HAL_RCC_GetClockConfig>
  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003050:	f003 f958 	bl	8006304 <HAL_RCC_GetPCLK2Freq>
 8003054:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003058:	4a23      	ldr	r2, [pc, #140]	@ (80030e8 <HAL_InitTick+0xd4>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	0c9b      	lsrs	r3, r3, #18
 8003060:	3b01      	subs	r3, #1
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8003064:	4b21      	ldr	r3, [pc, #132]	@ (80030ec <HAL_InitTick+0xd8>)
 8003066:	4a22      	ldr	r2, [pc, #136]	@ (80030f0 <HAL_InitTick+0xdc>)
 8003068:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800306a:	4b20      	ldr	r3, [pc, #128]	@ (80030ec <HAL_InitTick+0xd8>)
 800306c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003070:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8003072:	4a1e      	ldr	r2, [pc, #120]	@ (80030ec <HAL_InitTick+0xd8>)
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003076:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8003078:	4b1c      	ldr	r3, [pc, #112]	@ (80030ec <HAL_InitTick+0xd8>)
 800307a:	2200      	movs	r2, #0
 800307c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307e:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <HAL_InitTick+0xd8>)
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003084:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <HAL_InitTick+0xd8>)
 8003086:	2200      	movs	r2, #0
 8003088:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800308a:	4818      	ldr	r0, [pc, #96]	@ (80030ec <HAL_InitTick+0xd8>)
 800308c:	f004 f864 	bl	8007158 <HAL_TIM_Base_Init>
 8003090:	4603      	mov	r3, r0
 8003092:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003096:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800309a:	2b00      	cmp	r3, #0
 800309c:	d11b      	bne.n	80030d6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 800309e:	4813      	ldr	r0, [pc, #76]	@ (80030ec <HAL_InitTick+0xd8>)
 80030a0:	f004 f8b4 	bl	800720c <HAL_TIM_Base_Start_IT>
 80030a4:	4603      	mov	r3, r0
 80030a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80030aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d111      	bne.n	80030d6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80030b2:	201a      	movs	r0, #26
 80030b4:	f000 fd12 	bl	8003adc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b0f      	cmp	r3, #15
 80030bc:	d808      	bhi.n	80030d0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80030be:	2200      	movs	r2, #0
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	201a      	movs	r0, #26
 80030c4:	f000 fcee 	bl	8003aa4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030c8:	4a0a      	ldr	r2, [pc, #40]	@ (80030f4 <HAL_InitTick+0xe0>)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e002      	b.n	80030d6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80030d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3730      	adds	r7, #48	@ 0x30
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	431bde83 	.word	0x431bde83
 80030ec:	20000700 	.word	0x20000700
 80030f0:	40014800 	.word	0x40014800
 80030f4:	2000000c 	.word	0x2000000c

080030f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030fc:	bf00      	nop
 80030fe:	e7fd      	b.n	80030fc <NMI_Handler+0x4>

08003100 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003104:	bf00      	nop
 8003106:	e7fd      	b.n	8003104 <HardFault_Handler+0x4>

08003108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800310c:	bf00      	nop
 800310e:	e7fd      	b.n	800310c <MemManage_Handler+0x4>

08003110 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003114:	bf00      	nop
 8003116:	e7fd      	b.n	8003114 <BusFault_Handler+0x4>

08003118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800311c:	bf00      	nop
 800311e:	e7fd      	b.n	800311c <UsageFault_Handler+0x4>

08003120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003134:	4802      	ldr	r0, [pc, #8]	@ (8003140 <DMA1_Stream3_IRQHandler+0x10>)
 8003136:	f000 fdaf 	bl	8003c98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200006a0 	.word	0x200006a0

08003144 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003148:	4802      	ldr	r0, [pc, #8]	@ (8003154 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800314a:	f004 f8c1 	bl	80072d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000700 	.word	0x20000700

08003158 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800315c:	4802      	ldr	r0, [pc, #8]	@ (8003168 <SPI2_IRQHandler+0x10>)
 800315e:	f003 fda7 	bl	8006cb0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	200005f0 	.word	0x200005f0

0800316c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003170:	4b06      	ldr	r3, [pc, #24]	@ (800318c <SystemInit+0x20>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003176:	4a05      	ldr	r2, [pc, #20]	@ (800318c <SystemInit+0x20>)
 8003178:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800317c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003194:	4b11      	ldr	r3, [pc, #68]	@ (80031dc <MX_USART1_UART_Init+0x4c>)
 8003196:	4a12      	ldr	r2, [pc, #72]	@ (80031e0 <MX_USART1_UART_Init+0x50>)
 8003198:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800319a:	4b10      	ldr	r3, [pc, #64]	@ (80031dc <MX_USART1_UART_Init+0x4c>)
 800319c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031a2:	4b0e      	ldr	r3, [pc, #56]	@ (80031dc <MX_USART1_UART_Init+0x4c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031a8:	4b0c      	ldr	r3, [pc, #48]	@ (80031dc <MX_USART1_UART_Init+0x4c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031ae:	4b0b      	ldr	r3, [pc, #44]	@ (80031dc <MX_USART1_UART_Init+0x4c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031b4:	4b09      	ldr	r3, [pc, #36]	@ (80031dc <MX_USART1_UART_Init+0x4c>)
 80031b6:	220c      	movs	r2, #12
 80031b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ba:	4b08      	ldr	r3, [pc, #32]	@ (80031dc <MX_USART1_UART_Init+0x4c>)
 80031bc:	2200      	movs	r2, #0
 80031be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031c0:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <MX_USART1_UART_Init+0x4c>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031c6:	4805      	ldr	r0, [pc, #20]	@ (80031dc <MX_USART1_UART_Init+0x4c>)
 80031c8:	f004 fa3a 	bl	8007640 <HAL_UART_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031d2:	f7ff fd4f 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000748 	.word	0x20000748
 80031e0:	40011000 	.word	0x40011000

080031e4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031e8:	4b11      	ldr	r3, [pc, #68]	@ (8003230 <MX_USART2_UART_Init+0x4c>)
 80031ea:	4a12      	ldr	r2, [pc, #72]	@ (8003234 <MX_USART2_UART_Init+0x50>)
 80031ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031ee:	4b10      	ldr	r3, [pc, #64]	@ (8003230 <MX_USART2_UART_Init+0x4c>)
 80031f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003230 <MX_USART2_UART_Init+0x4c>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003230 <MX_USART2_UART_Init+0x4c>)
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003202:	4b0b      	ldr	r3, [pc, #44]	@ (8003230 <MX_USART2_UART_Init+0x4c>)
 8003204:	2200      	movs	r2, #0
 8003206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003208:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <MX_USART2_UART_Init+0x4c>)
 800320a:	220c      	movs	r2, #12
 800320c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800320e:	4b08      	ldr	r3, [pc, #32]	@ (8003230 <MX_USART2_UART_Init+0x4c>)
 8003210:	2200      	movs	r2, #0
 8003212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003214:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <MX_USART2_UART_Init+0x4c>)
 8003216:	2200      	movs	r2, #0
 8003218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800321a:	4805      	ldr	r0, [pc, #20]	@ (8003230 <MX_USART2_UART_Init+0x4c>)
 800321c:	f004 fa10 	bl	8007640 <HAL_UART_Init>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003226:	f7ff fd25 	bl	8002c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000790 	.word	0x20000790
 8003234:	40004400 	.word	0x40004400

08003238 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08c      	sub	sp, #48	@ 0x30
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a32      	ldr	r2, [pc, #200]	@ (8003320 <HAL_UART_MspInit+0xe8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d12d      	bne.n	80032b6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	4b31      	ldr	r3, [pc, #196]	@ (8003324 <HAL_UART_MspInit+0xec>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	4a30      	ldr	r2, [pc, #192]	@ (8003324 <HAL_UART_MspInit+0xec>)
 8003264:	f043 0310 	orr.w	r3, r3, #16
 8003268:	6453      	str	r3, [r2, #68]	@ 0x44
 800326a:	4b2e      	ldr	r3, [pc, #184]	@ (8003324 <HAL_UART_MspInit+0xec>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	61bb      	str	r3, [r7, #24]
 8003274:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	4b2a      	ldr	r3, [pc, #168]	@ (8003324 <HAL_UART_MspInit+0xec>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	4a29      	ldr	r2, [pc, #164]	@ (8003324 <HAL_UART_MspInit+0xec>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6313      	str	r3, [r2, #48]	@ 0x30
 8003286:	4b27      	ldr	r3, [pc, #156]	@ (8003324 <HAL_UART_MspInit+0xec>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8003292:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003298:	2302      	movs	r3, #2
 800329a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a0:	2303      	movs	r3, #3
 80032a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032a4:	2307      	movs	r3, #7
 80032a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a8:	f107 031c 	add.w	r3, r7, #28
 80032ac:	4619      	mov	r1, r3
 80032ae:	481e      	ldr	r0, [pc, #120]	@ (8003328 <HAL_UART_MspInit+0xf0>)
 80032b0:	f001 fa22 	bl	80046f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80032b4:	e030      	b.n	8003318 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1c      	ldr	r2, [pc, #112]	@ (800332c <HAL_UART_MspInit+0xf4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d12b      	bne.n	8003318 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032c0:	2300      	movs	r3, #0
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	4b17      	ldr	r3, [pc, #92]	@ (8003324 <HAL_UART_MspInit+0xec>)
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	4a16      	ldr	r2, [pc, #88]	@ (8003324 <HAL_UART_MspInit+0xec>)
 80032ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80032d0:	4b14      	ldr	r3, [pc, #80]	@ (8003324 <HAL_UART_MspInit+0xec>)
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	4b10      	ldr	r3, [pc, #64]	@ (8003324 <HAL_UART_MspInit+0xec>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003324 <HAL_UART_MspInit+0xec>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <HAL_UART_MspInit+0xec>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80032f8:	230c      	movs	r3, #12
 80032fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fc:	2302      	movs	r3, #2
 80032fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003304:	2303      	movs	r3, #3
 8003306:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003308:	2307      	movs	r3, #7
 800330a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330c:	f107 031c 	add.w	r3, r7, #28
 8003310:	4619      	mov	r1, r3
 8003312:	4805      	ldr	r0, [pc, #20]	@ (8003328 <HAL_UART_MspInit+0xf0>)
 8003314:	f001 f9f0 	bl	80046f8 <HAL_GPIO_Init>
}
 8003318:	bf00      	nop
 800331a:	3730      	adds	r7, #48	@ 0x30
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40011000 	.word	0x40011000
 8003324:	40023800 	.word	0x40023800
 8003328:	40020000 	.word	0x40020000
 800332c:	40004400 	.word	0x40004400

08003330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003368 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003334:	f7ff ff1a 	bl	800316c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003338:	480c      	ldr	r0, [pc, #48]	@ (800336c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800333a:	490d      	ldr	r1, [pc, #52]	@ (8003370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800333c:	4a0d      	ldr	r2, [pc, #52]	@ (8003374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800333e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003340:	e002      	b.n	8003348 <LoopCopyDataInit>

08003342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003346:	3304      	adds	r3, #4

08003348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800334a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800334c:	d3f9      	bcc.n	8003342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800334e:	4a0a      	ldr	r2, [pc, #40]	@ (8003378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003350:	4c0a      	ldr	r4, [pc, #40]	@ (800337c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003354:	e001      	b.n	800335a <LoopFillZerobss>

08003356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003358:	3204      	adds	r2, #4

0800335a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800335a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800335c:	d3fb      	bcc.n	8003356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800335e:	f005 fe9f 	bl	80090a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003362:	f7ff fbeb 	bl	8002b3c <main>
  bx  lr    
 8003366:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800336c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003370:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003374:	08009628 	.word	0x08009628
  ldr r2, =_sbss
 8003378:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800337c:	20004688 	.word	0x20004688

08003380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003380:	e7fe      	b.n	8003380 <ADC_IRQHandler>
	...

08003384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003388:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <HAL_Init+0x40>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a0d      	ldr	r2, [pc, #52]	@ (80033c4 <HAL_Init+0x40>)
 800338e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003394:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <HAL_Init+0x40>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0a      	ldr	r2, [pc, #40]	@ (80033c4 <HAL_Init+0x40>)
 800339a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800339e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033a0:	4b08      	ldr	r3, [pc, #32]	@ (80033c4 <HAL_Init+0x40>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a07      	ldr	r2, [pc, #28]	@ (80033c4 <HAL_Init+0x40>)
 80033a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033ac:	2003      	movs	r0, #3
 80033ae:	f000 fb6e 	bl	8003a8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033b2:	200f      	movs	r0, #15
 80033b4:	f7ff fe2e 	bl	8003014 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033b8:	f7ff fe00 	bl	8002fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023c00 	.word	0x40023c00

080033c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033cc:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <HAL_IncTick+0x20>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	461a      	mov	r2, r3
 80033d2:	4b06      	ldr	r3, [pc, #24]	@ (80033ec <HAL_IncTick+0x24>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4413      	add	r3, r2
 80033d8:	4a04      	ldr	r2, [pc, #16]	@ (80033ec <HAL_IncTick+0x24>)
 80033da:	6013      	str	r3, [r2, #0]
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	20000010 	.word	0x20000010
 80033ec:	200007d8 	.word	0x200007d8

080033f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return uwTick;
 80033f4:	4b03      	ldr	r3, [pc, #12]	@ (8003404 <HAL_GetTick+0x14>)
 80033f6:	681b      	ldr	r3, [r3, #0]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	200007d8 	.word	0x200007d8

08003408 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003410:	f7ff ffee 	bl	80033f0 <HAL_GetTick>
 8003414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d005      	beq.n	800342e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003422:	4b0a      	ldr	r3, [pc, #40]	@ (800344c <HAL_Delay+0x44>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800342e:	bf00      	nop
 8003430:	f7ff ffde 	bl	80033f0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	429a      	cmp	r2, r3
 800343e:	d8f7      	bhi.n	8003430 <HAL_Delay+0x28>
  {
  }
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000010 	.word	0x20000010

08003450 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e033      	b.n	80034ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fe ffe6 	bl	8002440 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d118      	bne.n	80034c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003496:	f023 0302 	bic.w	r3, r3, #2
 800349a:	f043 0202 	orr.w	r2, r3, #2
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f94a 	bl	800373c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	f023 0303 	bic.w	r3, r3, #3
 80034b6:	f043 0201 	orr.w	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80034be:	e001      	b.n	80034c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x1c>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e113      	b.n	800371c <HAL_ADC_ConfigChannel+0x244>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b09      	cmp	r3, #9
 8003502:	d925      	bls.n	8003550 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68d9      	ldr	r1, [r3, #12]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	b29b      	uxth	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	3b1e      	subs	r3, #30
 800351a:	2207      	movs	r2, #7
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43da      	mvns	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	400a      	ands	r2, r1
 8003528:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68d9      	ldr	r1, [r3, #12]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	b29b      	uxth	r3, r3
 800353a:	4618      	mov	r0, r3
 800353c:	4603      	mov	r3, r0
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4403      	add	r3, r0
 8003542:	3b1e      	subs	r3, #30
 8003544:	409a      	lsls	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	e022      	b.n	8003596 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6919      	ldr	r1, [r3, #16]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	b29b      	uxth	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	4613      	mov	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4413      	add	r3, r2
 8003564:	2207      	movs	r2, #7
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43da      	mvns	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	400a      	ands	r2, r1
 8003572:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6919      	ldr	r1, [r3, #16]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	4618      	mov	r0, r3
 8003586:	4603      	mov	r3, r0
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4403      	add	r3, r0
 800358c:	409a      	lsls	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b06      	cmp	r3, #6
 800359c:	d824      	bhi.n	80035e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	3b05      	subs	r3, #5
 80035b0:	221f      	movs	r2, #31
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	400a      	ands	r2, r1
 80035be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	4618      	mov	r0, r3
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	3b05      	subs	r3, #5
 80035da:	fa00 f203 	lsl.w	r2, r0, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80035e6:	e04c      	b.n	8003682 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b0c      	cmp	r3, #12
 80035ee:	d824      	bhi.n	800363a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	3b23      	subs	r3, #35	@ 0x23
 8003602:	221f      	movs	r2, #31
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43da      	mvns	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	400a      	ands	r2, r1
 8003610:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	b29b      	uxth	r3, r3
 800361e:	4618      	mov	r0, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	3b23      	subs	r3, #35	@ 0x23
 800362c:	fa00 f203 	lsl.w	r2, r0, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	631a      	str	r2, [r3, #48]	@ 0x30
 8003638:	e023      	b.n	8003682 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	3b41      	subs	r3, #65	@ 0x41
 800364c:	221f      	movs	r2, #31
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43da      	mvns	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	400a      	ands	r2, r1
 800365a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	b29b      	uxth	r3, r3
 8003668:	4618      	mov	r0, r3
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	3b41      	subs	r3, #65	@ 0x41
 8003676:	fa00 f203 	lsl.w	r2, r0, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003682:	4b29      	ldr	r3, [pc, #164]	@ (8003728 <HAL_ADC_ConfigChannel+0x250>)
 8003684:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a28      	ldr	r2, [pc, #160]	@ (800372c <HAL_ADC_ConfigChannel+0x254>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d10f      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x1d8>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b12      	cmp	r3, #18
 8003696:	d10b      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1d      	ldr	r2, [pc, #116]	@ (800372c <HAL_ADC_ConfigChannel+0x254>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d12b      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x23a>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1c      	ldr	r2, [pc, #112]	@ (8003730 <HAL_ADC_ConfigChannel+0x258>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <HAL_ADC_ConfigChannel+0x1f4>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b11      	cmp	r3, #17
 80036ca:	d122      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a11      	ldr	r2, [pc, #68]	@ (8003730 <HAL_ADC_ConfigChannel+0x258>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d111      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036ee:	4b11      	ldr	r3, [pc, #68]	@ (8003734 <HAL_ADC_ConfigChannel+0x25c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a11      	ldr	r2, [pc, #68]	@ (8003738 <HAL_ADC_ConfigChannel+0x260>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	0c9a      	lsrs	r2, r3, #18
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003704:	e002      	b.n	800370c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	3b01      	subs	r3, #1
 800370a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f9      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	40012300 	.word	0x40012300
 800372c:	40012000 	.word	0x40012000
 8003730:	10000012 	.word	0x10000012
 8003734:	20000008 	.word	0x20000008
 8003738:	431bde83 	.word	0x431bde83

0800373c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003744:	4b79      	ldr	r3, [pc, #484]	@ (800392c <ADC_Init+0x1f0>)
 8003746:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	431a      	orrs	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003770:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	021a      	lsls	r2, r3, #8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003794:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6899      	ldr	r1, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	4a58      	ldr	r2, [pc, #352]	@ (8003930 <ADC_Init+0x1f4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d022      	beq.n	800381a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6899      	ldr	r1, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003804:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6899      	ldr	r1, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	e00f      	b.n	800383a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003828:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003838:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0202 	bic.w	r2, r2, #2
 8003848:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6899      	ldr	r1, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7e1b      	ldrb	r3, [r3, #24]
 8003854:	005a      	lsls	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01b      	beq.n	80038a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003876:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003886:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	3b01      	subs	r3, #1
 8003894:	035a      	lsls	r2, r3, #13
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	e007      	b.n	80038b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80038be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	051a      	lsls	r2, r3, #20
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6899      	ldr	r1, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038f2:	025a      	lsls	r2, r3, #9
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800390a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6899      	ldr	r1, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	029a      	lsls	r2, r3, #10
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40012300 	.word	0x40012300
 8003930:	0f000001 	.word	0x0f000001

08003934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003944:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <__NVIC_SetPriorityGrouping+0x44>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003950:	4013      	ands	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800395c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003966:	4a04      	ldr	r2, [pc, #16]	@ (8003978 <__NVIC_SetPriorityGrouping+0x44>)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	60d3      	str	r3, [r2, #12]
}
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003980:	4b04      	ldr	r3, [pc, #16]	@ (8003994 <__NVIC_GetPriorityGrouping+0x18>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	0a1b      	lsrs	r3, r3, #8
 8003986:	f003 0307 	and.w	r3, r3, #7
}
 800398a:	4618      	mov	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	db0b      	blt.n	80039c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	f003 021f 	and.w	r2, r3, #31
 80039b0:	4907      	ldr	r1, [pc, #28]	@ (80039d0 <__NVIC_EnableIRQ+0x38>)
 80039b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	2001      	movs	r0, #1
 80039ba:	fa00 f202 	lsl.w	r2, r0, r2
 80039be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	e000e100 	.word	0xe000e100

080039d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	6039      	str	r1, [r7, #0]
 80039de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	db0a      	blt.n	80039fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	490c      	ldr	r1, [pc, #48]	@ (8003a20 <__NVIC_SetPriority+0x4c>)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	0112      	lsls	r2, r2, #4
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	440b      	add	r3, r1
 80039f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039fc:	e00a      	b.n	8003a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	4908      	ldr	r1, [pc, #32]	@ (8003a24 <__NVIC_SetPriority+0x50>)
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	3b04      	subs	r3, #4
 8003a0c:	0112      	lsls	r2, r2, #4
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	440b      	add	r3, r1
 8003a12:	761a      	strb	r2, [r3, #24]
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	e000e100 	.word	0xe000e100
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b089      	sub	sp, #36	@ 0x24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0307 	and.w	r3, r3, #7
 8003a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f1c3 0307 	rsb	r3, r3, #7
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	bf28      	it	cs
 8003a46:	2304      	movcs	r3, #4
 8003a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d902      	bls.n	8003a58 <NVIC_EncodePriority+0x30>
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3b03      	subs	r3, #3
 8003a56:	e000      	b.n	8003a5a <NVIC_EncodePriority+0x32>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43da      	mvns	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a70:	f04f 31ff 	mov.w	r1, #4294967295
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	43d9      	mvns	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a80:	4313      	orrs	r3, r2
         );
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3724      	adds	r7, #36	@ 0x24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff ff4c 	bl	8003934 <__NVIC_SetPriorityGrouping>
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab6:	f7ff ff61 	bl	800397c <__NVIC_GetPriorityGrouping>
 8003aba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	6978      	ldr	r0, [r7, #20]
 8003ac2:	f7ff ffb1 	bl	8003a28 <NVIC_EncodePriority>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff ff80 	bl	80039d4 <__NVIC_SetPriority>
}
 8003ad4:	bf00      	nop
 8003ad6:	3718      	adds	r7, #24
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff ff54 	bl	8003998 <__NVIC_EnableIRQ>
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b04:	f7ff fc74 	bl	80033f0 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e099      	b.n	8003c48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0201 	bic.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b34:	e00f      	b.n	8003b56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b36:	f7ff fc5b 	bl	80033f0 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b05      	cmp	r3, #5
 8003b42:	d908      	bls.n	8003b56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e078      	b.n	8003c48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e8      	bne.n	8003b36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4b38      	ldr	r3, [pc, #224]	@ (8003c50 <HAL_DMA_Init+0x158>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d107      	bne.n	8003bc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f023 0307 	bic.w	r3, r3, #7
 8003bd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d117      	bne.n	8003c1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00e      	beq.n	8003c1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fa0b 	bl	8004018 <DMA_CheckFifoParam>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2240      	movs	r2, #64	@ 0x40
 8003c0c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c16:	2301      	movs	r3, #1
 8003c18:	e016      	b.n	8003c48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f9c2 	bl	8003fac <DMA_CalcBaseAndBitshift>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c30:	223f      	movs	r2, #63	@ 0x3f
 8003c32:	409a      	lsls	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	f010803f 	.word	0xf010803f

08003c54 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d004      	beq.n	8003c72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2280      	movs	r2, #128	@ 0x80
 8003c6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e00c      	b.n	8003c8c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2205      	movs	r2, #5
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ca4:	4b8e      	ldr	r3, [pc, #568]	@ (8003ee0 <HAL_DMA_IRQHandler+0x248>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a8e      	ldr	r2, [pc, #568]	@ (8003ee4 <HAL_DMA_IRQHandler+0x24c>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	0a9b      	lsrs	r3, r3, #10
 8003cb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc2:	2208      	movs	r2, #8
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d01a      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d013      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0204 	bic.w	r2, r2, #4
 8003cea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf0:	2208      	movs	r2, #8
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfc:	f043 0201 	orr.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d08:	2201      	movs	r2, #1
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d012      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d26:	2201      	movs	r2, #1
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d32:	f043 0202 	orr.w	r2, r3, #2
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3e:	2204      	movs	r2, #4
 8003d40:	409a      	lsls	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d012      	beq.n	8003d70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00b      	beq.n	8003d70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d68:	f043 0204 	orr.w	r2, r3, #4
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d74:	2210      	movs	r2, #16
 8003d76:	409a      	lsls	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d043      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d03c      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d92:	2210      	movs	r2, #16
 8003d94:	409a      	lsls	r2, r3
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d018      	beq.n	8003dda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d108      	bne.n	8003dc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d024      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
 8003dc6:	e01f      	b.n	8003e08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01b      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	4798      	blx	r3
 8003dd8:	e016      	b.n	8003e08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d107      	bne.n	8003df8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0208 	bic.w	r2, r2, #8
 8003df6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 808f 	beq.w	8003f38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8087 	beq.w	8003f38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2e:	2220      	movs	r2, #32
 8003e30:	409a      	lsls	r2, r3
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b05      	cmp	r3, #5
 8003e40:	d136      	bne.n	8003eb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0216 	bic.w	r2, r2, #22
 8003e50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <HAL_DMA_IRQHandler+0x1da>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d007      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0208 	bic.w	r2, r2, #8
 8003e80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e86:	223f      	movs	r2, #63	@ 0x3f
 8003e88:	409a      	lsls	r2, r3
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d07e      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	4798      	blx	r3
        }
        return;
 8003eae:	e079      	b.n	8003fa4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01d      	beq.n	8003efa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10d      	bne.n	8003ee8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d031      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
 8003edc:	e02c      	b.n	8003f38 <HAL_DMA_IRQHandler+0x2a0>
 8003ede:	bf00      	nop
 8003ee0:	20000008 	.word	0x20000008
 8003ee4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d023      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	4798      	blx	r3
 8003ef8:	e01e      	b.n	8003f38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10f      	bne.n	8003f28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0210 	bic.w	r2, r2, #16
 8003f16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d032      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d022      	beq.n	8003f92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2205      	movs	r2, #5
 8003f50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0201 	bic.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	3301      	adds	r3, #1
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d307      	bcc.n	8003f80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f2      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x2cc>
 8003f7e:	e000      	b.n	8003f82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	4798      	blx	r3
 8003fa2:	e000      	b.n	8003fa6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fa4:	bf00      	nop
    }
  }
}
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	3b10      	subs	r3, #16
 8003fbc:	4a14      	ldr	r2, [pc, #80]	@ (8004010 <DMA_CalcBaseAndBitshift+0x64>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	091b      	lsrs	r3, r3, #4
 8003fc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fc6:	4a13      	ldr	r2, [pc, #76]	@ (8004014 <DMA_CalcBaseAndBitshift+0x68>)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d909      	bls.n	8003fee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	1d1a      	adds	r2, r3, #4
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fec:	e007      	b.n	8003ffe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004002:	4618      	mov	r0, r3
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	aaaaaaab 	.word	0xaaaaaaab
 8004014:	0800960c 	.word	0x0800960c

08004018 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004028:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d11f      	bne.n	8004072 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d856      	bhi.n	80040e6 <DMA_CheckFifoParam+0xce>
 8004038:	a201      	add	r2, pc, #4	@ (adr r2, 8004040 <DMA_CheckFifoParam+0x28>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004051 	.word	0x08004051
 8004044:	08004063 	.word	0x08004063
 8004048:	08004051 	.word	0x08004051
 800404c:	080040e7 	.word	0x080040e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d046      	beq.n	80040ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004060:	e043      	b.n	80040ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004066:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800406a:	d140      	bne.n	80040ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004070:	e03d      	b.n	80040ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800407a:	d121      	bne.n	80040c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b03      	cmp	r3, #3
 8004080:	d837      	bhi.n	80040f2 <DMA_CheckFifoParam+0xda>
 8004082:	a201      	add	r2, pc, #4	@ (adr r2, 8004088 <DMA_CheckFifoParam+0x70>)
 8004084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004088:	08004099 	.word	0x08004099
 800408c:	0800409f 	.word	0x0800409f
 8004090:	08004099 	.word	0x08004099
 8004094:	080040b1 	.word	0x080040b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
      break;
 800409c:	e030      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d025      	beq.n	80040f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ae:	e022      	b.n	80040f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040b8:	d11f      	bne.n	80040fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040be:	e01c      	b.n	80040fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d903      	bls.n	80040ce <DMA_CheckFifoParam+0xb6>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d003      	beq.n	80040d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040cc:	e018      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
      break;
 80040d2:	e015      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00e      	beq.n	80040fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      break;
 80040e4:	e00b      	b.n	80040fe <DMA_CheckFifoParam+0xe6>
      break;
 80040e6:	bf00      	nop
 80040e8:	e00a      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040ea:	bf00      	nop
 80040ec:	e008      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040ee:	bf00      	nop
 80040f0:	e006      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040f2:	bf00      	nop
 80040f4:	e004      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040f6:	bf00      	nop
 80040f8:	e002      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;   
 80040fa:	bf00      	nop
 80040fc:	e000      	b.n	8004100 <DMA_CheckFifoParam+0xe8>
      break;
 80040fe:	bf00      	nop
    }
  } 
  
  return status; 
 8004100:	7bfb      	ldrb	r3, [r7, #15]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop

08004110 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004122:	4b23      	ldr	r3, [pc, #140]	@ (80041b0 <HAL_FLASH_Program+0xa0>)
 8004124:	7e1b      	ldrb	r3, [r3, #24]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_FLASH_Program+0x1e>
 800412a:	2302      	movs	r3, #2
 800412c:	e03b      	b.n	80041a6 <HAL_FLASH_Program+0x96>
 800412e:	4b20      	ldr	r3, [pc, #128]	@ (80041b0 <HAL_FLASH_Program+0xa0>)
 8004130:	2201      	movs	r2, #1
 8004132:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004134:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004138:	f000 f87c 	bl	8004234 <FLASH_WaitForLastOperation>
 800413c:	4603      	mov	r3, r0
 800413e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d12b      	bne.n	800419e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d105      	bne.n	8004158 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800414c:	783b      	ldrb	r3, [r7, #0]
 800414e:	4619      	mov	r1, r3
 8004150:	68b8      	ldr	r0, [r7, #8]
 8004152:	f000 f927 	bl	80043a4 <FLASH_Program_Byte>
 8004156:	e016      	b.n	8004186 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800415e:	883b      	ldrh	r3, [r7, #0]
 8004160:	4619      	mov	r1, r3
 8004162:	68b8      	ldr	r0, [r7, #8]
 8004164:	f000 f8fa 	bl	800435c <FLASH_Program_HalfWord>
 8004168:	e00d      	b.n	8004186 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d105      	bne.n	800417c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	4619      	mov	r1, r3
 8004174:	68b8      	ldr	r0, [r7, #8]
 8004176:	f000 f8cf 	bl	8004318 <FLASH_Program_Word>
 800417a:	e004      	b.n	8004186 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800417c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004180:	68b8      	ldr	r0, [r7, #8]
 8004182:	f000 f897 	bl	80042b4 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004186:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800418a:	f000 f853 	bl	8004234 <FLASH_WaitForLastOperation>
 800418e:	4603      	mov	r3, r0
 8004190:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8004192:	4b08      	ldr	r3, [pc, #32]	@ (80041b4 <HAL_FLASH_Program+0xa4>)
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	4a07      	ldr	r2, [pc, #28]	@ (80041b4 <HAL_FLASH_Program+0xa4>)
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800419e:	4b04      	ldr	r3, [pc, #16]	@ (80041b0 <HAL_FLASH_Program+0xa0>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	761a      	strb	r2, [r3, #24]

  return status;
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	200007dc 	.word	0x200007dc
 80041b4:	40023c00 	.word	0x40023c00

080041b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80041c2:	4b0b      	ldr	r3, [pc, #44]	@ (80041f0 <HAL_FLASH_Unlock+0x38>)
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	da0b      	bge.n	80041e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80041ca:	4b09      	ldr	r3, [pc, #36]	@ (80041f0 <HAL_FLASH_Unlock+0x38>)
 80041cc:	4a09      	ldr	r2, [pc, #36]	@ (80041f4 <HAL_FLASH_Unlock+0x3c>)
 80041ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80041d0:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <HAL_FLASH_Unlock+0x38>)
 80041d2:	4a09      	ldr	r2, [pc, #36]	@ (80041f8 <HAL_FLASH_Unlock+0x40>)
 80041d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80041d6:	4b06      	ldr	r3, [pc, #24]	@ (80041f0 <HAL_FLASH_Unlock+0x38>)
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	da01      	bge.n	80041e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80041e2:	79fb      	ldrb	r3, [r7, #7]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	40023c00 	.word	0x40023c00
 80041f4:	45670123 	.word	0x45670123
 80041f8:	cdef89ab 	.word	0xcdef89ab

080041fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004200:	4b05      	ldr	r3, [pc, #20]	@ (8004218 <HAL_FLASH_Lock+0x1c>)
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	4a04      	ldr	r2, [pc, #16]	@ (8004218 <HAL_FLASH_Lock+0x1c>)
 8004206:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800420a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	40023c00 	.word	0x40023c00

0800421c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag
  */
uint32_t HAL_FLASH_GetError(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8004220:	4b03      	ldr	r3, [pc, #12]	@ (8004230 <HAL_FLASH_GetError+0x14>)
 8004222:	69db      	ldr	r3, [r3, #28]
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	200007dc 	.word	0x200007dc

08004234 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004240:	4b1a      	ldr	r3, [pc, #104]	@ (80042ac <FLASH_WaitForLastOperation+0x78>)
 8004242:	2200      	movs	r2, #0
 8004244:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004246:	f7ff f8d3 	bl	80033f0 <HAL_GetTick>
 800424a:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800424c:	e010      	b.n	8004270 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004254:	d00c      	beq.n	8004270 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d007      	beq.n	800426c <FLASH_WaitForLastOperation+0x38>
 800425c:	f7ff f8c8 	bl	80033f0 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	429a      	cmp	r2, r3
 800426a:	d201      	bcs.n	8004270 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e019      	b.n	80042a4 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004270:	4b0f      	ldr	r3, [pc, #60]	@ (80042b0 <FLASH_WaitForLastOperation+0x7c>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e8      	bne.n	800424e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800427c:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <FLASH_WaitForLastOperation+0x7c>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004288:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <FLASH_WaitForLastOperation+0x7c>)
 800428a:	2201      	movs	r2, #1
 800428c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800428e:	4b08      	ldr	r3, [pc, #32]	@ (80042b0 <FLASH_WaitForLastOperation+0x7c>)
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800429a:	f000 f8a5 	bl	80043e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0

}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	200007dc 	.word	0x200007dc
 80042b0:	40023c00 	.word	0x40023c00

080042b4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80042c0:	4b14      	ldr	r3, [pc, #80]	@ (8004314 <FLASH_Program_DoubleWord+0x60>)
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	4a13      	ldr	r2, [pc, #76]	@ (8004314 <FLASH_Program_DoubleWord+0x60>)
 80042c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80042cc:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <FLASH_Program_DoubleWord+0x60>)
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	4a10      	ldr	r2, [pc, #64]	@ (8004314 <FLASH_Program_DoubleWord+0x60>)
 80042d2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80042d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80042d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004314 <FLASH_Program_DoubleWord+0x60>)
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004314 <FLASH_Program_DoubleWord+0x60>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80042ea:	f3bf 8f6f 	isb	sy
}
 80042ee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80042f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	000a      	movs	r2, r1
 80042fe:	2300      	movs	r3, #0
 8004300:	68f9      	ldr	r1, [r7, #12]
 8004302:	3104      	adds	r1, #4
 8004304:	4613      	mov	r3, r2
 8004306:	600b      	str	r3, [r1, #0]
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40023c00 	.word	0x40023c00

08004318 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004322:	4b0d      	ldr	r3, [pc, #52]	@ (8004358 <FLASH_Program_Word+0x40>)
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	4a0c      	ldr	r2, [pc, #48]	@ (8004358 <FLASH_Program_Word+0x40>)
 8004328:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800432c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800432e:	4b0a      	ldr	r3, [pc, #40]	@ (8004358 <FLASH_Program_Word+0x40>)
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	4a09      	ldr	r2, [pc, #36]	@ (8004358 <FLASH_Program_Word+0x40>)
 8004334:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004338:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800433a:	4b07      	ldr	r3, [pc, #28]	@ (8004358 <FLASH_Program_Word+0x40>)
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	4a06      	ldr	r2, [pc, #24]	@ (8004358 <FLASH_Program_Word+0x40>)
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	601a      	str	r2, [r3, #0]
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40023c00 	.word	0x40023c00

0800435c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004368:	4b0d      	ldr	r3, [pc, #52]	@ (80043a0 <FLASH_Program_HalfWord+0x44>)
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	4a0c      	ldr	r2, [pc, #48]	@ (80043a0 <FLASH_Program_HalfWord+0x44>)
 800436e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004372:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004374:	4b0a      	ldr	r3, [pc, #40]	@ (80043a0 <FLASH_Program_HalfWord+0x44>)
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	4a09      	ldr	r2, [pc, #36]	@ (80043a0 <FLASH_Program_HalfWord+0x44>)
 800437a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800437e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004380:	4b07      	ldr	r3, [pc, #28]	@ (80043a0 <FLASH_Program_HalfWord+0x44>)
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	4a06      	ldr	r2, [pc, #24]	@ (80043a0 <FLASH_Program_HalfWord+0x44>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	887a      	ldrh	r2, [r7, #2]
 8004390:	801a      	strh	r2, [r3, #0]
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40023c00 	.word	0x40023c00

080043a4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80043b0:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <FLASH_Program_Byte+0x40>)
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	4a0b      	ldr	r2, [pc, #44]	@ (80043e4 <FLASH_Program_Byte+0x40>)
 80043b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80043bc:	4b09      	ldr	r3, [pc, #36]	@ (80043e4 <FLASH_Program_Byte+0x40>)
 80043be:	4a09      	ldr	r2, [pc, #36]	@ (80043e4 <FLASH_Program_Byte+0x40>)
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80043c4:	4b07      	ldr	r3, [pc, #28]	@ (80043e4 <FLASH_Program_Byte+0x40>)
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	4a06      	ldr	r2, [pc, #24]	@ (80043e4 <FLASH_Program_Byte+0x40>)
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	701a      	strb	r2, [r3, #0]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40023c00 	.word	0x40023c00

080043e8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80043ec:	4b2f      	ldr	r3, [pc, #188]	@ (80044ac <FLASH_SetErrorCode+0xc4>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0310 	and.w	r3, r3, #16
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80043f8:	4b2d      	ldr	r3, [pc, #180]	@ (80044b0 <FLASH_SetErrorCode+0xc8>)
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	f043 0310 	orr.w	r3, r3, #16
 8004400:	4a2b      	ldr	r2, [pc, #172]	@ (80044b0 <FLASH_SetErrorCode+0xc8>)
 8004402:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004404:	4b29      	ldr	r3, [pc, #164]	@ (80044ac <FLASH_SetErrorCode+0xc4>)
 8004406:	2210      	movs	r2, #16
 8004408:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800440a:	4b28      	ldr	r3, [pc, #160]	@ (80044ac <FLASH_SetErrorCode+0xc4>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004416:	4b26      	ldr	r3, [pc, #152]	@ (80044b0 <FLASH_SetErrorCode+0xc8>)
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f043 0308 	orr.w	r3, r3, #8
 800441e:	4a24      	ldr	r2, [pc, #144]	@ (80044b0 <FLASH_SetErrorCode+0xc8>)
 8004420:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004422:	4b22      	ldr	r3, [pc, #136]	@ (80044ac <FLASH_SetErrorCode+0xc4>)
 8004424:	2220      	movs	r2, #32
 8004426:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004428:	4b20      	ldr	r3, [pc, #128]	@ (80044ac <FLASH_SetErrorCode+0xc4>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004434:	4b1e      	ldr	r3, [pc, #120]	@ (80044b0 <FLASH_SetErrorCode+0xc8>)
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f043 0304 	orr.w	r3, r3, #4
 800443c:	4a1c      	ldr	r2, [pc, #112]	@ (80044b0 <FLASH_SetErrorCode+0xc8>)
 800443e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004440:	4b1a      	ldr	r3, [pc, #104]	@ (80044ac <FLASH_SetErrorCode+0xc4>)
 8004442:	2240      	movs	r2, #64	@ 0x40
 8004444:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004446:	4b19      	ldr	r3, [pc, #100]	@ (80044ac <FLASH_SetErrorCode+0xc4>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800444e:	2b00      	cmp	r3, #0
 8004450:	d008      	beq.n	8004464 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004452:	4b17      	ldr	r3, [pc, #92]	@ (80044b0 <FLASH_SetErrorCode+0xc8>)
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f043 0302 	orr.w	r3, r3, #2
 800445a:	4a15      	ldr	r2, [pc, #84]	@ (80044b0 <FLASH_SetErrorCode+0xc8>)
 800445c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800445e:	4b13      	ldr	r3, [pc, #76]	@ (80044ac <FLASH_SetErrorCode+0xc4>)
 8004460:	2280      	movs	r2, #128	@ 0x80
 8004462:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004464:	4b11      	ldr	r3, [pc, #68]	@ (80044ac <FLASH_SetErrorCode+0xc4>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d009      	beq.n	8004484 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004470:	4b0f      	ldr	r3, [pc, #60]	@ (80044b0 <FLASH_SetErrorCode+0xc8>)
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	4a0d      	ldr	r2, [pc, #52]	@ (80044b0 <FLASH_SetErrorCode+0xc8>)
 800447a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800447c:	4b0b      	ldr	r3, [pc, #44]	@ (80044ac <FLASH_SetErrorCode+0xc4>)
 800447e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004482:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004484:	4b09      	ldr	r3, [pc, #36]	@ (80044ac <FLASH_SetErrorCode+0xc4>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004490:	4b07      	ldr	r3, [pc, #28]	@ (80044b0 <FLASH_SetErrorCode+0xc8>)
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f043 0320 	orr.w	r3, r3, #32
 8004498:	4a05      	ldr	r2, [pc, #20]	@ (80044b0 <FLASH_SetErrorCode+0xc8>)
 800449a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800449c:	4b03      	ldr	r3, [pc, #12]	@ (80044ac <FLASH_SetErrorCode+0xc4>)
 800449e:	2202      	movs	r2, #2
 80044a0:	60da      	str	r2, [r3, #12]
  }
}
 80044a2:	bf00      	nop
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	40023c00 	.word	0x40023c00
 80044b0:	200007dc 	.word	0x200007dc

080044b4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80044c6:	4b31      	ldr	r3, [pc, #196]	@ (800458c <HAL_FLASHEx_Erase+0xd8>)
 80044c8:	7e1b      	ldrb	r3, [r3, #24]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_FLASHEx_Erase+0x1e>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e058      	b.n	8004584 <HAL_FLASHEx_Erase+0xd0>
 80044d2:	4b2e      	ldr	r3, [pc, #184]	@ (800458c <HAL_FLASHEx_Erase+0xd8>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80044d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80044dc:	f7ff feaa 	bl	8004234 <FLASH_WaitForLastOperation>
 80044e0:	4603      	mov	r3, r0
 80044e2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d148      	bne.n	800457c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f04f 32ff 	mov.w	r2, #4294967295
 80044f0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d115      	bne.n	8004526 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	4619      	mov	r1, r3
 8004506:	4610      	mov	r0, r2
 8004508:	f000 f844 	bl	8004594 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800450c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004510:	f7ff fe90 	bl	8004234 <FLASH_WaitForLastOperation>
 8004514:	4603      	mov	r3, r0
 8004516:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004518:	4b1d      	ldr	r3, [pc, #116]	@ (8004590 <HAL_FLASHEx_Erase+0xdc>)
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	4a1c      	ldr	r2, [pc, #112]	@ (8004590 <HAL_FLASHEx_Erase+0xdc>)
 800451e:	f023 0304 	bic.w	r3, r3, #4
 8004522:	6113      	str	r3, [r2, #16]
 8004524:	e028      	b.n	8004578 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	e01c      	b.n	8004568 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	4619      	mov	r1, r3
 8004536:	68b8      	ldr	r0, [r7, #8]
 8004538:	f000 f850 	bl	80045dc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800453c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004540:	f7ff fe78 	bl	8004234 <FLASH_WaitForLastOperation>
 8004544:	4603      	mov	r3, r0
 8004546:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004548:	4b11      	ldr	r3, [pc, #68]	@ (8004590 <HAL_FLASHEx_Erase+0xdc>)
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	4a10      	ldr	r2, [pc, #64]	@ (8004590 <HAL_FLASHEx_Erase+0xdc>)
 800454e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8004552:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	601a      	str	r2, [r3, #0]
          break;
 8004560:	e00a      	b.n	8004578 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	3301      	adds	r3, #1
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	4413      	add	r3, r2
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	429a      	cmp	r2, r3
 8004576:	d3da      	bcc.n	800452e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004578:	f000 f878 	bl	800466c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800457c:	4b03      	ldr	r3, [pc, #12]	@ (800458c <HAL_FLASHEx_Erase+0xd8>)
 800457e:	2200      	movs	r2, #0
 8004580:	761a      	strb	r2, [r3, #24]

  return status;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	200007dc 	.word	0x200007dc
 8004590:	40023c00 	.word	0x40023c00

08004594 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	6039      	str	r1, [r7, #0]
 800459e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80045a0:	4b0d      	ldr	r3, [pc, #52]	@ (80045d8 <FLASH_MassErase+0x44>)
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	4a0c      	ldr	r2, [pc, #48]	@ (80045d8 <FLASH_MassErase+0x44>)
 80045a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80045ac:	4b0a      	ldr	r3, [pc, #40]	@ (80045d8 <FLASH_MassErase+0x44>)
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	4a09      	ldr	r2, [pc, #36]	@ (80045d8 <FLASH_MassErase+0x44>)
 80045b2:	f043 0304 	orr.w	r3, r3, #4
 80045b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80045b8:	4b07      	ldr	r3, [pc, #28]	@ (80045d8 <FLASH_MassErase+0x44>)
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	021b      	lsls	r3, r3, #8
 80045c0:	4313      	orrs	r3, r2
 80045c2:	4a05      	ldr	r2, [pc, #20]	@ (80045d8 <FLASH_MassErase+0x44>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c8:	6113      	str	r3, [r2, #16]
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40023c00 	.word	0x40023c00

080045dc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d102      	bne.n	80045f8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	e010      	b.n	800461a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80045f8:	78fb      	ldrb	r3, [r7, #3]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d103      	bne.n	8004606 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80045fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	e009      	b.n	800461a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004606:	78fb      	ldrb	r3, [r7, #3]
 8004608:	2b02      	cmp	r3, #2
 800460a:	d103      	bne.n	8004614 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800460c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	e002      	b.n	800461a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004614:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004618:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800461a:	4b13      	ldr	r3, [pc, #76]	@ (8004668 <FLASH_Erase_Sector+0x8c>)
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	4a12      	ldr	r2, [pc, #72]	@ (8004668 <FLASH_Erase_Sector+0x8c>)
 8004620:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004624:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004626:	4b10      	ldr	r3, [pc, #64]	@ (8004668 <FLASH_Erase_Sector+0x8c>)
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	490f      	ldr	r1, [pc, #60]	@ (8004668 <FLASH_Erase_Sector+0x8c>)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004632:	4b0d      	ldr	r3, [pc, #52]	@ (8004668 <FLASH_Erase_Sector+0x8c>)
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	4a0c      	ldr	r2, [pc, #48]	@ (8004668 <FLASH_Erase_Sector+0x8c>)
 8004638:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800463c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800463e:	4b0a      	ldr	r3, [pc, #40]	@ (8004668 <FLASH_Erase_Sector+0x8c>)
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4313      	orrs	r3, r2
 8004648:	4a07      	ldr	r2, [pc, #28]	@ (8004668 <FLASH_Erase_Sector+0x8c>)
 800464a:	f043 0302 	orr.w	r3, r3, #2
 800464e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004650:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <FLASH_Erase_Sector+0x8c>)
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	4a04      	ldr	r2, [pc, #16]	@ (8004668 <FLASH_Erase_Sector+0x8c>)
 8004656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800465a:	6113      	str	r3, [r2, #16]
}
 800465c:	bf00      	nop
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	40023c00 	.word	0x40023c00

0800466c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004670:	4b20      	ldr	r3, [pc, #128]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004678:	2b00      	cmp	r3, #0
 800467a:	d017      	beq.n	80046ac <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800467c:	4b1d      	ldr	r3, [pc, #116]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a1c      	ldr	r2, [pc, #112]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 8004682:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004686:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004688:	4b1a      	ldr	r3, [pc, #104]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a19      	ldr	r2, [pc, #100]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 800468e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4b17      	ldr	r3, [pc, #92]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a16      	ldr	r2, [pc, #88]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 800469a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800469e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046a0:	4b14      	ldr	r3, [pc, #80]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a13      	ldr	r2, [pc, #76]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 80046a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046aa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80046ac:	4b11      	ldr	r3, [pc, #68]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d017      	beq.n	80046e8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80046b8:	4b0e      	ldr	r3, [pc, #56]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a0d      	ldr	r2, [pc, #52]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 80046be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046c2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80046c4:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a0a      	ldr	r2, [pc, #40]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 80046ca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b08      	ldr	r3, [pc, #32]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a07      	ldr	r2, [pc, #28]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 80046d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046da:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80046dc:	4b05      	ldr	r3, [pc, #20]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a04      	ldr	r2, [pc, #16]	@ (80046f4 <FLASH_FlushCaches+0x88>)
 80046e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046e6:	6013      	str	r3, [r2, #0]
  }
}
 80046e8:	bf00      	nop
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40023c00 	.word	0x40023c00

080046f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	@ 0x24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
 8004712:	e159      	b.n	80049c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004714:	2201      	movs	r2, #1
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	429a      	cmp	r2, r3
 800472e:	f040 8148 	bne.w	80049c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b01      	cmp	r3, #1
 800473c:	d005      	beq.n	800474a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004746:	2b02      	cmp	r3, #2
 8004748:	d130      	bne.n	80047ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	2203      	movs	r2, #3
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43db      	mvns	r3, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4013      	ands	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004780:	2201      	movs	r2, #1
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 0201 	and.w	r2, r3, #1
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 0303 	and.w	r3, r3, #3
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d017      	beq.n	80047e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	2203      	movs	r2, #3
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	4013      	ands	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d123      	bne.n	800483c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	08da      	lsrs	r2, r3, #3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3208      	adds	r2, #8
 80047fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004800:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	220f      	movs	r2, #15
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4013      	ands	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	08da      	lsrs	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3208      	adds	r2, #8
 8004836:	69b9      	ldr	r1, [r7, #24]
 8004838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	2203      	movs	r2, #3
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 0203 	and.w	r2, r3, #3
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80a2 	beq.w	80049c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	4b57      	ldr	r3, [pc, #348]	@ (80049e0 <HAL_GPIO_Init+0x2e8>)
 8004884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004886:	4a56      	ldr	r2, [pc, #344]	@ (80049e0 <HAL_GPIO_Init+0x2e8>)
 8004888:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800488c:	6453      	str	r3, [r2, #68]	@ 0x44
 800488e:	4b54      	ldr	r3, [pc, #336]	@ (80049e0 <HAL_GPIO_Init+0x2e8>)
 8004890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004892:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800489a:	4a52      	ldr	r2, [pc, #328]	@ (80049e4 <HAL_GPIO_Init+0x2ec>)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	089b      	lsrs	r3, r3, #2
 80048a0:	3302      	adds	r3, #2
 80048a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	220f      	movs	r2, #15
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a49      	ldr	r2, [pc, #292]	@ (80049e8 <HAL_GPIO_Init+0x2f0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d019      	beq.n	80048fa <HAL_GPIO_Init+0x202>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a48      	ldr	r2, [pc, #288]	@ (80049ec <HAL_GPIO_Init+0x2f4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <HAL_GPIO_Init+0x1fe>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a47      	ldr	r2, [pc, #284]	@ (80049f0 <HAL_GPIO_Init+0x2f8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00d      	beq.n	80048f2 <HAL_GPIO_Init+0x1fa>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a46      	ldr	r2, [pc, #280]	@ (80049f4 <HAL_GPIO_Init+0x2fc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d007      	beq.n	80048ee <HAL_GPIO_Init+0x1f6>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a45      	ldr	r2, [pc, #276]	@ (80049f8 <HAL_GPIO_Init+0x300>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d101      	bne.n	80048ea <HAL_GPIO_Init+0x1f2>
 80048e6:	2304      	movs	r3, #4
 80048e8:	e008      	b.n	80048fc <HAL_GPIO_Init+0x204>
 80048ea:	2307      	movs	r3, #7
 80048ec:	e006      	b.n	80048fc <HAL_GPIO_Init+0x204>
 80048ee:	2303      	movs	r3, #3
 80048f0:	e004      	b.n	80048fc <HAL_GPIO_Init+0x204>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e002      	b.n	80048fc <HAL_GPIO_Init+0x204>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <HAL_GPIO_Init+0x204>
 80048fa:	2300      	movs	r3, #0
 80048fc:	69fa      	ldr	r2, [r7, #28]
 80048fe:	f002 0203 	and.w	r2, r2, #3
 8004902:	0092      	lsls	r2, r2, #2
 8004904:	4093      	lsls	r3, r2
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4313      	orrs	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800490c:	4935      	ldr	r1, [pc, #212]	@ (80049e4 <HAL_GPIO_Init+0x2ec>)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	089b      	lsrs	r3, r3, #2
 8004912:	3302      	adds	r3, #2
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800491a:	4b38      	ldr	r3, [pc, #224]	@ (80049fc <HAL_GPIO_Init+0x304>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	43db      	mvns	r3, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4013      	ands	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800493e:	4a2f      	ldr	r2, [pc, #188]	@ (80049fc <HAL_GPIO_Init+0x304>)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004944:	4b2d      	ldr	r3, [pc, #180]	@ (80049fc <HAL_GPIO_Init+0x304>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004968:	4a24      	ldr	r2, [pc, #144]	@ (80049fc <HAL_GPIO_Init+0x304>)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800496e:	4b23      	ldr	r3, [pc, #140]	@ (80049fc <HAL_GPIO_Init+0x304>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	43db      	mvns	r3, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4013      	ands	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004992:	4a1a      	ldr	r2, [pc, #104]	@ (80049fc <HAL_GPIO_Init+0x304>)
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004998:	4b18      	ldr	r3, [pc, #96]	@ (80049fc <HAL_GPIO_Init+0x304>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	43db      	mvns	r3, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4013      	ands	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049bc:	4a0f      	ldr	r2, [pc, #60]	@ (80049fc <HAL_GPIO_Init+0x304>)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	3301      	adds	r3, #1
 80049c6:	61fb      	str	r3, [r7, #28]
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2b0f      	cmp	r3, #15
 80049cc:	f67f aea2 	bls.w	8004714 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049d0:	bf00      	nop
 80049d2:	bf00      	nop
 80049d4:	3724      	adds	r7, #36	@ 0x24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40023800 	.word	0x40023800
 80049e4:	40013800 	.word	0x40013800
 80049e8:	40020000 	.word	0x40020000
 80049ec:	40020400 	.word	0x40020400
 80049f0:	40020800 	.word	0x40020800
 80049f4:	40020c00 	.word	0x40020c00
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40013c00 	.word	0x40013c00

08004a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	807b      	strh	r3, [r7, #2]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a10:	787b      	ldrb	r3, [r7, #1]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a16:	887a      	ldrh	r2, [r7, #2]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a1c:	e003      	b.n	8004a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a1e:	887b      	ldrh	r3, [r7, #2]
 8004a20:	041a      	lsls	r2, r3, #16
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	619a      	str	r2, [r3, #24]
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e12b      	b.n	8004c9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fd ff8c 	bl	8002978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2224      	movs	r2, #36	@ 0x24
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a98:	f001 fc20 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 8004a9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	4a81      	ldr	r2, [pc, #516]	@ (8004ca8 <HAL_I2C_Init+0x274>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d807      	bhi.n	8004ab8 <HAL_I2C_Init+0x84>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4a80      	ldr	r2, [pc, #512]	@ (8004cac <HAL_I2C_Init+0x278>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	bf94      	ite	ls
 8004ab0:	2301      	movls	r3, #1
 8004ab2:	2300      	movhi	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	e006      	b.n	8004ac6 <HAL_I2C_Init+0x92>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4a7d      	ldr	r2, [pc, #500]	@ (8004cb0 <HAL_I2C_Init+0x27c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	bf94      	ite	ls
 8004ac0:	2301      	movls	r3, #1
 8004ac2:	2300      	movhi	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e0e7      	b.n	8004c9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4a78      	ldr	r2, [pc, #480]	@ (8004cb4 <HAL_I2C_Init+0x280>)
 8004ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad6:	0c9b      	lsrs	r3, r3, #18
 8004ad8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	4a6a      	ldr	r2, [pc, #424]	@ (8004ca8 <HAL_I2C_Init+0x274>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d802      	bhi.n	8004b08 <HAL_I2C_Init+0xd4>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	3301      	adds	r3, #1
 8004b06:	e009      	b.n	8004b1c <HAL_I2C_Init+0xe8>
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	4a69      	ldr	r2, [pc, #420]	@ (8004cb8 <HAL_I2C_Init+0x284>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	099b      	lsrs	r3, r3, #6
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	430b      	orrs	r3, r1
 8004b22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	495c      	ldr	r1, [pc, #368]	@ (8004ca8 <HAL_I2C_Init+0x274>)
 8004b38:	428b      	cmp	r3, r1
 8004b3a:	d819      	bhi.n	8004b70 <HAL_I2C_Init+0x13c>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	1e59      	subs	r1, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b4a:	1c59      	adds	r1, r3, #1
 8004b4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b50:	400b      	ands	r3, r1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_I2C_Init+0x138>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1e59      	subs	r1, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b64:	3301      	adds	r3, #1
 8004b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b6a:	e051      	b.n	8004c10 <HAL_I2C_Init+0x1dc>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	e04f      	b.n	8004c10 <HAL_I2C_Init+0x1dc>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d111      	bne.n	8004b9c <HAL_I2C_Init+0x168>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	1e58      	subs	r0, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6859      	ldr	r1, [r3, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	440b      	add	r3, r1
 8004b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	e012      	b.n	8004bc2 <HAL_I2C_Init+0x18e>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	1e58      	subs	r0, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	0099      	lsls	r1, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf0c      	ite	eq
 8004bbc:	2301      	moveq	r3, #1
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_I2C_Init+0x196>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e022      	b.n	8004c10 <HAL_I2C_Init+0x1dc>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10e      	bne.n	8004bf0 <HAL_I2C_Init+0x1bc>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1e58      	subs	r0, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6859      	ldr	r1, [r3, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	440b      	add	r3, r1
 8004be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be4:	3301      	adds	r3, #1
 8004be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bee:	e00f      	b.n	8004c10 <HAL_I2C_Init+0x1dc>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	1e58      	subs	r0, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6859      	ldr	r1, [r3, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	0099      	lsls	r1, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c06:	3301      	adds	r3, #1
 8004c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	6809      	ldr	r1, [r1, #0]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69da      	ldr	r2, [r3, #28]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6911      	ldr	r1, [r2, #16]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	68d2      	ldr	r2, [r2, #12]
 8004c4a:	4311      	orrs	r1, r2
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	430b      	orrs	r3, r1
 8004c52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695a      	ldr	r2, [r3, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	000186a0 	.word	0x000186a0
 8004cac:	001e847f 	.word	0x001e847f
 8004cb0:	003d08ff 	.word	0x003d08ff
 8004cb4:	431bde83 	.word	0x431bde83
 8004cb8:	10624dd3 	.word	0x10624dd3

08004cbc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	4608      	mov	r0, r1
 8004cc6:	4611      	mov	r1, r2
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4603      	mov	r3, r0
 8004ccc:	817b      	strh	r3, [r7, #10]
 8004cce:	460b      	mov	r3, r1
 8004cd0:	813b      	strh	r3, [r7, #8]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cd6:	f7fe fb8b 	bl	80033f0 <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	f040 80d9 	bne.w	8004e9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	2319      	movs	r3, #25
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	496d      	ldr	r1, [pc, #436]	@ (8004ea8 <HAL_I2C_Mem_Write+0x1ec>)
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fc8b 	bl	8005610 <I2C_WaitOnFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d00:	2302      	movs	r3, #2
 8004d02:	e0cc      	b.n	8004e9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d101      	bne.n	8004d12 <HAL_I2C_Mem_Write+0x56>
 8004d0e:	2302      	movs	r3, #2
 8004d10:	e0c5      	b.n	8004e9e <HAL_I2C_Mem_Write+0x1e2>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d007      	beq.n	8004d38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2221      	movs	r2, #33	@ 0x21
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2240      	movs	r2, #64	@ 0x40
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a3a      	ldr	r2, [r7, #32]
 8004d62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4a4d      	ldr	r2, [pc, #308]	@ (8004eac <HAL_I2C_Mem_Write+0x1f0>)
 8004d78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d7a:	88f8      	ldrh	r0, [r7, #6]
 8004d7c:	893a      	ldrh	r2, [r7, #8]
 8004d7e:	8979      	ldrh	r1, [r7, #10]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	4603      	mov	r3, r0
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fac2 	bl	8005314 <I2C_RequestMemoryWrite>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d052      	beq.n	8004e3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e081      	b.n	8004e9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fd50 	bl	8005844 <I2C_WaitOnTXEFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00d      	beq.n	8004dc6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d107      	bne.n	8004dc2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e06b      	b.n	8004e9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dca:	781a      	ldrb	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d11b      	bne.n	8004e3c <HAL_I2C_Mem_Write+0x180>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d017      	beq.n	8004e3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	781a      	ldrb	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	3b01      	subs	r3, #1
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1aa      	bne.n	8004d9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 fd43 	bl	80058d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00d      	beq.n	8004e70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d107      	bne.n	8004e6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e016      	b.n	8004e9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e000      	b.n	8004e9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e9c:	2302      	movs	r3, #2
  }
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	00100002 	.word	0x00100002
 8004eac:	ffff0000 	.word	0xffff0000

08004eb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08c      	sub	sp, #48	@ 0x30
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	4608      	mov	r0, r1
 8004eba:	4611      	mov	r1, r2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	817b      	strh	r3, [r7, #10]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	813b      	strh	r3, [r7, #8]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eca:	f7fe fa91 	bl	80033f0 <HAL_GetTick>
 8004ece:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	f040 8214 	bne.w	8005306 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	2319      	movs	r3, #25
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	497b      	ldr	r1, [pc, #492]	@ (80050d4 <HAL_I2C_Mem_Read+0x224>)
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fb91 	bl	8005610 <I2C_WaitOnFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e207      	b.n	8005308 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_I2C_Mem_Read+0x56>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e200      	b.n	8005308 <HAL_I2C_Mem_Read+0x458>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d007      	beq.n	8004f2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2222      	movs	r2, #34	@ 0x22
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2240      	movs	r2, #64	@ 0x40
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4a5b      	ldr	r2, [pc, #364]	@ (80050d8 <HAL_I2C_Mem_Read+0x228>)
 8004f6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f6e:	88f8      	ldrh	r0, [r7, #6]
 8004f70:	893a      	ldrh	r2, [r7, #8]
 8004f72:	8979      	ldrh	r1, [r7, #10]
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	9301      	str	r3, [sp, #4]
 8004f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 fa5e 	bl	8005440 <I2C_RequestMemoryRead>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e1bc      	b.n	8005308 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d113      	bne.n	8004fbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f96:	2300      	movs	r3, #0
 8004f98:	623b      	str	r3, [r7, #32]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	623b      	str	r3, [r7, #32]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	623b      	str	r3, [r7, #32]
 8004faa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	e190      	b.n	80052e0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d11b      	bne.n	8004ffe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	61fb      	str	r3, [r7, #28]
 8004fea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	e170      	b.n	80052e0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005002:	2b02      	cmp	r3, #2
 8005004:	d11b      	bne.n	800503e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005014:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005024:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005026:	2300      	movs	r3, #0
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	e150      	b.n	80052e0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005054:	e144      	b.n	80052e0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800505a:	2b03      	cmp	r3, #3
 800505c:	f200 80f1 	bhi.w	8005242 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005064:	2b01      	cmp	r3, #1
 8005066:	d123      	bne.n	80050b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fc79 	bl	8005964 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e145      	b.n	8005308 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	691a      	ldr	r2, [r3, #16]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050ae:	e117      	b.n	80052e0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d14e      	bne.n	8005156 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050be:	2200      	movs	r2, #0
 80050c0:	4906      	ldr	r1, [pc, #24]	@ (80050dc <HAL_I2C_Mem_Read+0x22c>)
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 faa4 	bl	8005610 <I2C_WaitOnFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d008      	beq.n	80050e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e11a      	b.n	8005308 <HAL_I2C_Mem_Read+0x458>
 80050d2:	bf00      	nop
 80050d4:	00100002 	.word	0x00100002
 80050d8:	ffff0000 	.word	0xffff0000
 80050dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800514a:	b29b      	uxth	r3, r3
 800514c:	3b01      	subs	r3, #1
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005154:	e0c4      	b.n	80052e0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515c:	2200      	movs	r2, #0
 800515e:	496c      	ldr	r1, [pc, #432]	@ (8005310 <HAL_I2C_Mem_Read+0x460>)
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fa55 	bl	8005610 <I2C_WaitOnFlagUntilTimeout>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0cb      	b.n	8005308 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800517e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691a      	ldr	r2, [r3, #16]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b8:	2200      	movs	r2, #0
 80051ba:	4955      	ldr	r1, [pc, #340]	@ (8005310 <HAL_I2C_Mem_Read+0x460>)
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fa27 	bl	8005610 <I2C_WaitOnFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e09d      	b.n	8005308 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005240:	e04e      	b.n	80052e0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005244:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 fb8c 	bl	8005964 <I2C_WaitOnRXNEFlagUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e058      	b.n	8005308 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b04      	cmp	r3, #4
 8005294:	d124      	bne.n	80052e0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800529a:	2b03      	cmp	r3, #3
 800529c:	d107      	bne.n	80052ae <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f47f aeb6 	bne.w	8005056 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	e000      	b.n	8005308 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005306:	2302      	movs	r3, #2
  }
}
 8005308:	4618      	mov	r0, r3
 800530a:	3728      	adds	r7, #40	@ 0x28
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	00010004 	.word	0x00010004

08005314 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af02      	add	r7, sp, #8
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	4608      	mov	r0, r1
 800531e:	4611      	mov	r1, r2
 8005320:	461a      	mov	r2, r3
 8005322:	4603      	mov	r3, r0
 8005324:	817b      	strh	r3, [r7, #10]
 8005326:	460b      	mov	r3, r1
 8005328:	813b      	strh	r3, [r7, #8]
 800532a:	4613      	mov	r3, r2
 800532c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800533c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	2200      	movs	r2, #0
 8005346:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f960 	bl	8005610 <I2C_WaitOnFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00d      	beq.n	8005372 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005360:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005364:	d103      	bne.n	800536e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800536c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e05f      	b.n	8005432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005372:	897b      	ldrh	r3, [r7, #10]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005380:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005384:	6a3a      	ldr	r2, [r7, #32]
 8005386:	492d      	ldr	r1, [pc, #180]	@ (800543c <I2C_RequestMemoryWrite+0x128>)
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f9bb 	bl	8005704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e04c      	b.n	8005432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b0:	6a39      	ldr	r1, [r7, #32]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 fa46 	bl	8005844 <I2C_WaitOnTXEFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00d      	beq.n	80053da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d107      	bne.n	80053d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e02b      	b.n	8005432 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053da:	88fb      	ldrh	r3, [r7, #6]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d105      	bne.n	80053ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053e0:	893b      	ldrh	r3, [r7, #8]
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	611a      	str	r2, [r3, #16]
 80053ea:	e021      	b.n	8005430 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053ec:	893b      	ldrh	r3, [r7, #8]
 80053ee:	0a1b      	lsrs	r3, r3, #8
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053fc:	6a39      	ldr	r1, [r7, #32]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 fa20 	bl	8005844 <I2C_WaitOnTXEFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00d      	beq.n	8005426 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	2b04      	cmp	r3, #4
 8005410:	d107      	bne.n	8005422 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005420:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e005      	b.n	8005432 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005426:	893b      	ldrh	r3, [r7, #8]
 8005428:	b2da      	uxtb	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	00010002 	.word	0x00010002

08005440 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	4608      	mov	r0, r1
 800544a:	4611      	mov	r1, r2
 800544c:	461a      	mov	r2, r3
 800544e:	4603      	mov	r3, r0
 8005450:	817b      	strh	r3, [r7, #10]
 8005452:	460b      	mov	r3, r1
 8005454:	813b      	strh	r3, [r7, #8]
 8005456:	4613      	mov	r3, r2
 8005458:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005468:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005478:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	2200      	movs	r2, #0
 8005482:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f8c2 	bl	8005610 <I2C_WaitOnFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00d      	beq.n	80054ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800549c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054a0:	d103      	bne.n	80054aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e0aa      	b.n	8005604 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054ae:	897b      	ldrh	r3, [r7, #10]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	461a      	mov	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c0:	6a3a      	ldr	r2, [r7, #32]
 80054c2:	4952      	ldr	r1, [pc, #328]	@ (800560c <I2C_RequestMemoryRead+0x1cc>)
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f91d 	bl	8005704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e097      	b.n	8005604 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ec:	6a39      	ldr	r1, [r7, #32]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f9a8 	bl	8005844 <I2C_WaitOnTXEFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00d      	beq.n	8005516 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d107      	bne.n	8005512 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005510:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e076      	b.n	8005604 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d105      	bne.n	8005528 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800551c:	893b      	ldrh	r3, [r7, #8]
 800551e:	b2da      	uxtb	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	611a      	str	r2, [r3, #16]
 8005526:	e021      	b.n	800556c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005528:	893b      	ldrh	r3, [r7, #8]
 800552a:	0a1b      	lsrs	r3, r3, #8
 800552c:	b29b      	uxth	r3, r3
 800552e:	b2da      	uxtb	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005538:	6a39      	ldr	r1, [r7, #32]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 f982 	bl	8005844 <I2C_WaitOnTXEFlagUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00d      	beq.n	8005562 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	2b04      	cmp	r3, #4
 800554c:	d107      	bne.n	800555e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800555c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e050      	b.n	8005604 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005562:	893b      	ldrh	r3, [r7, #8]
 8005564:	b2da      	uxtb	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800556c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556e:	6a39      	ldr	r1, [r7, #32]
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f967 	bl	8005844 <I2C_WaitOnTXEFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00d      	beq.n	8005598 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005580:	2b04      	cmp	r3, #4
 8005582:	d107      	bne.n	8005594 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005592:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e035      	b.n	8005604 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f82b 	bl	8005610 <I2C_WaitOnFlagUntilTimeout>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00d      	beq.n	80055dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ce:	d103      	bne.n	80055d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e013      	b.n	8005604 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055dc:	897b      	ldrh	r3, [r7, #10]
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	6a3a      	ldr	r2, [r7, #32]
 80055f0:	4906      	ldr	r1, [pc, #24]	@ (800560c <I2C_RequestMemoryRead+0x1cc>)
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 f886 	bl	8005704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	00010002 	.word	0x00010002

08005610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4613      	mov	r3, r2
 800561e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005620:	e048      	b.n	80056b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d044      	beq.n	80056b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562a:	f7fd fee1 	bl	80033f0 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d302      	bcc.n	8005640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d139      	bne.n	80056b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	0c1b      	lsrs	r3, r3, #16
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b01      	cmp	r3, #1
 8005648:	d10d      	bne.n	8005666 <I2C_WaitOnFlagUntilTimeout+0x56>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	43da      	mvns	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	4013      	ands	r3, r2
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	bf0c      	ite	eq
 800565c:	2301      	moveq	r3, #1
 800565e:	2300      	movne	r3, #0
 8005660:	b2db      	uxtb	r3, r3
 8005662:	461a      	mov	r2, r3
 8005664:	e00c      	b.n	8005680 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	43da      	mvns	r2, r3
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	4013      	ands	r3, r2
 8005672:	b29b      	uxth	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	429a      	cmp	r2, r3
 8005684:	d116      	bne.n	80056b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a0:	f043 0220 	orr.w	r2, r3, #32
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e023      	b.n	80056fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	0c1b      	lsrs	r3, r3, #16
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d10d      	bne.n	80056da <I2C_WaitOnFlagUntilTimeout+0xca>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	43da      	mvns	r2, r3
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	4013      	ands	r3, r2
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	bf0c      	ite	eq
 80056d0:	2301      	moveq	r3, #1
 80056d2:	2300      	movne	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	e00c      	b.n	80056f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	43da      	mvns	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4013      	ands	r3, r2
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bf0c      	ite	eq
 80056ec:	2301      	moveq	r3, #1
 80056ee:	2300      	movne	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d093      	beq.n	8005622 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005712:	e071      	b.n	80057f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800571e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005722:	d123      	bne.n	800576c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005732:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800573c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005758:	f043 0204 	orr.w	r2, r3, #4
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e067      	b.n	800583c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005772:	d041      	beq.n	80057f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005774:	f7fd fe3c 	bl	80033f0 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	429a      	cmp	r2, r3
 8005782:	d302      	bcc.n	800578a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d136      	bne.n	80057f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	0c1b      	lsrs	r3, r3, #16
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b01      	cmp	r3, #1
 8005792:	d10c      	bne.n	80057ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	43da      	mvns	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4013      	ands	r3, r2
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	bf14      	ite	ne
 80057a6:	2301      	movne	r3, #1
 80057a8:	2300      	moveq	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	e00b      	b.n	80057c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	43da      	mvns	r2, r3
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	4013      	ands	r3, r2
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	bf14      	ite	ne
 80057c0:	2301      	movne	r3, #1
 80057c2:	2300      	moveq	r3, #0
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d016      	beq.n	80057f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e4:	f043 0220 	orr.w	r2, r3, #32
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e021      	b.n	800583c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	0c1b      	lsrs	r3, r3, #16
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d10c      	bne.n	800581c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	43da      	mvns	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4013      	ands	r3, r2
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	bf14      	ite	ne
 8005814:	2301      	movne	r3, #1
 8005816:	2300      	moveq	r3, #0
 8005818:	b2db      	uxtb	r3, r3
 800581a:	e00b      	b.n	8005834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	43da      	mvns	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4013      	ands	r3, r2
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	bf14      	ite	ne
 800582e:	2301      	movne	r3, #1
 8005830:	2300      	moveq	r3, #0
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	f47f af6d 	bne.w	8005714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005850:	e034      	b.n	80058bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 f8e3 	bl	8005a1e <I2C_IsAcknowledgeFailed>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e034      	b.n	80058cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005868:	d028      	beq.n	80058bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586a:	f7fd fdc1 	bl	80033f0 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	429a      	cmp	r2, r3
 8005878:	d302      	bcc.n	8005880 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d11d      	bne.n	80058bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800588a:	2b80      	cmp	r3, #128	@ 0x80
 800588c:	d016      	beq.n	80058bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a8:	f043 0220 	orr.w	r2, r3, #32
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e007      	b.n	80058cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c6:	2b80      	cmp	r3, #128	@ 0x80
 80058c8:	d1c3      	bne.n	8005852 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058e0:	e034      	b.n	800594c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f89b 	bl	8005a1e <I2C_IsAcknowledgeFailed>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e034      	b.n	800595c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f8:	d028      	beq.n	800594c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058fa:	f7fd fd79 	bl	80033f0 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	429a      	cmp	r2, r3
 8005908:	d302      	bcc.n	8005910 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d11d      	bne.n	800594c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b04      	cmp	r3, #4
 800591c:	d016      	beq.n	800594c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005938:	f043 0220 	orr.w	r2, r3, #32
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e007      	b.n	800595c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b04      	cmp	r3, #4
 8005958:	d1c3      	bne.n	80058e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005970:	e049      	b.n	8005a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f003 0310 	and.w	r3, r3, #16
 800597c:	2b10      	cmp	r3, #16
 800597e:	d119      	bne.n	80059b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f06f 0210 	mvn.w	r2, #16
 8005988:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e030      	b.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b4:	f7fd fd1c 	bl	80033f0 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d302      	bcc.n	80059ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d11d      	bne.n	8005a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d4:	2b40      	cmp	r3, #64	@ 0x40
 80059d6:	d016      	beq.n	8005a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f2:	f043 0220 	orr.w	r2, r3, #32
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e007      	b.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a10:	2b40      	cmp	r3, #64	@ 0x40
 8005a12:	d1ae      	bne.n	8005972 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a34:	d11b      	bne.n	8005a6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	f043 0204 	orr.w	r2, r3, #4
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e000      	b.n	8005a70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e267      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d075      	beq.n	8005b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a9a:	4b88      	ldr	r3, [pc, #544]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d00c      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005aa6:	4b85      	ldr	r3, [pc, #532]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d112      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ab2:	4b82      	ldr	r3, [pc, #520]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005abe:	d10b      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac0:	4b7e      	ldr	r3, [pc, #504]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d05b      	beq.n	8005b84 <HAL_RCC_OscConfig+0x108>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d157      	bne.n	8005b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e242      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ae0:	d106      	bne.n	8005af0 <HAL_RCC_OscConfig+0x74>
 8005ae2:	4b76      	ldr	r3, [pc, #472]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a75      	ldr	r2, [pc, #468]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	e01d      	b.n	8005b2c <HAL_RCC_OscConfig+0xb0>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005af8:	d10c      	bne.n	8005b14 <HAL_RCC_OscConfig+0x98>
 8005afa:	4b70      	ldr	r3, [pc, #448]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a6f      	ldr	r2, [pc, #444]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	4b6d      	ldr	r3, [pc, #436]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a6c      	ldr	r2, [pc, #432]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e00b      	b.n	8005b2c <HAL_RCC_OscConfig+0xb0>
 8005b14:	4b69      	ldr	r3, [pc, #420]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a68      	ldr	r2, [pc, #416]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	4b66      	ldr	r3, [pc, #408]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a65      	ldr	r2, [pc, #404]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d013      	beq.n	8005b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b34:	f7fd fc5c 	bl	80033f0 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b3c:	f7fd fc58 	bl	80033f0 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b64      	cmp	r3, #100	@ 0x64
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e207      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d0f0      	beq.n	8005b3c <HAL_RCC_OscConfig+0xc0>
 8005b5a:	e014      	b.n	8005b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5c:	f7fd fc48 	bl	80033f0 <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b64:	f7fd fc44 	bl	80033f0 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b64      	cmp	r3, #100	@ 0x64
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e1f3      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b76:	4b51      	ldr	r3, [pc, #324]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f0      	bne.n	8005b64 <HAL_RCC_OscConfig+0xe8>
 8005b82:	e000      	b.n	8005b86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d063      	beq.n	8005c5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b92:	4b4a      	ldr	r3, [pc, #296]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00b      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b9e:	4b47      	ldr	r3, [pc, #284]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d11c      	bne.n	8005be4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005baa:	4b44      	ldr	r3, [pc, #272]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d116      	bne.n	8005be4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bb6:	4b41      	ldr	r3, [pc, #260]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d005      	beq.n	8005bce <HAL_RCC_OscConfig+0x152>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d001      	beq.n	8005bce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e1c7      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bce:	4b3b      	ldr	r3, [pc, #236]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	4937      	ldr	r1, [pc, #220]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005be2:	e03a      	b.n	8005c5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d020      	beq.n	8005c2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bec:	4b34      	ldr	r3, [pc, #208]	@ (8005cc0 <HAL_RCC_OscConfig+0x244>)
 8005bee:	2201      	movs	r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf2:	f7fd fbfd 	bl	80033f0 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bfa:	f7fd fbf9 	bl	80033f0 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e1a8      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0f0      	beq.n	8005bfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c18:	4b28      	ldr	r3, [pc, #160]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	4925      	ldr	r1, [pc, #148]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	600b      	str	r3, [r1, #0]
 8005c2c:	e015      	b.n	8005c5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c2e:	4b24      	ldr	r3, [pc, #144]	@ (8005cc0 <HAL_RCC_OscConfig+0x244>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c34:	f7fd fbdc 	bl	80033f0 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c3c:	f7fd fbd8 	bl	80033f0 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e187      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1f0      	bne.n	8005c3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0308 	and.w	r3, r3, #8
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d036      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d016      	beq.n	8005c9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c6e:	4b15      	ldr	r3, [pc, #84]	@ (8005cc4 <HAL_RCC_OscConfig+0x248>)
 8005c70:	2201      	movs	r2, #1
 8005c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c74:	f7fd fbbc 	bl	80033f0 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c7c:	f7fd fbb8 	bl	80033f0 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e167      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005cbc <HAL_RCC_OscConfig+0x240>)
 8005c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCC_OscConfig+0x200>
 8005c9a:	e01b      	b.n	8005cd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c9c:	4b09      	ldr	r3, [pc, #36]	@ (8005cc4 <HAL_RCC_OscConfig+0x248>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ca2:	f7fd fba5 	bl	80033f0 <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ca8:	e00e      	b.n	8005cc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005caa:	f7fd fba1 	bl	80033f0 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d907      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e150      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	42470000 	.word	0x42470000
 8005cc4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cc8:	4b88      	ldr	r3, [pc, #544]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1ea      	bne.n	8005caa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8097 	beq.w	8005e10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ce6:	4b81      	ldr	r3, [pc, #516]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10f      	bne.n	8005d12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60bb      	str	r3, [r7, #8]
 8005cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfa:	4a7c      	ldr	r2, [pc, #496]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d02:	4b7a      	ldr	r3, [pc, #488]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d0a:	60bb      	str	r3, [r7, #8]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d12:	4b77      	ldr	r3, [pc, #476]	@ (8005ef0 <HAL_RCC_OscConfig+0x474>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d118      	bne.n	8005d50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d1e:	4b74      	ldr	r3, [pc, #464]	@ (8005ef0 <HAL_RCC_OscConfig+0x474>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a73      	ldr	r2, [pc, #460]	@ (8005ef0 <HAL_RCC_OscConfig+0x474>)
 8005d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d2a:	f7fd fb61 	bl	80033f0 <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d32:	f7fd fb5d 	bl	80033f0 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e10c      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d44:	4b6a      	ldr	r3, [pc, #424]	@ (8005ef0 <HAL_RCC_OscConfig+0x474>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0f0      	beq.n	8005d32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d106      	bne.n	8005d66 <HAL_RCC_OscConfig+0x2ea>
 8005d58:	4b64      	ldr	r3, [pc, #400]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5c:	4a63      	ldr	r2, [pc, #396]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d64:	e01c      	b.n	8005da0 <HAL_RCC_OscConfig+0x324>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	2b05      	cmp	r3, #5
 8005d6c:	d10c      	bne.n	8005d88 <HAL_RCC_OscConfig+0x30c>
 8005d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d72:	4a5e      	ldr	r2, [pc, #376]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d74:	f043 0304 	orr.w	r3, r3, #4
 8005d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d7e:	4a5b      	ldr	r2, [pc, #364]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d80:	f043 0301 	orr.w	r3, r3, #1
 8005d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d86:	e00b      	b.n	8005da0 <HAL_RCC_OscConfig+0x324>
 8005d88:	4b58      	ldr	r3, [pc, #352]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d8c:	4a57      	ldr	r2, [pc, #348]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d8e:	f023 0301 	bic.w	r3, r3, #1
 8005d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d94:	4b55      	ldr	r3, [pc, #340]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d98:	4a54      	ldr	r2, [pc, #336]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005d9a:	f023 0304 	bic.w	r3, r3, #4
 8005d9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d015      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da8:	f7fd fb22 	bl	80033f0 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dae:	e00a      	b.n	8005dc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db0:	f7fd fb1e 	bl	80033f0 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e0cb      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc6:	4b49      	ldr	r3, [pc, #292]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0ee      	beq.n	8005db0 <HAL_RCC_OscConfig+0x334>
 8005dd2:	e014      	b.n	8005dfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dd4:	f7fd fb0c 	bl	80033f0 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dda:	e00a      	b.n	8005df2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ddc:	f7fd fb08 	bl	80033f0 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e0b5      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005df2:	4b3e      	ldr	r3, [pc, #248]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1ee      	bne.n	8005ddc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d105      	bne.n	8005e10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e04:	4b39      	ldr	r3, [pc, #228]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e08:	4a38      	ldr	r2, [pc, #224]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005e0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 80a1 	beq.w	8005f5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e1a:	4b34      	ldr	r3, [pc, #208]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 030c 	and.w	r3, r3, #12
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d05c      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d141      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e2e:	4b31      	ldr	r3, [pc, #196]	@ (8005ef4 <HAL_RCC_OscConfig+0x478>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e34:	f7fd fadc 	bl	80033f0 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e3c:	f7fd fad8 	bl	80033f0 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e087      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e4e:	4b27      	ldr	r3, [pc, #156]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f0      	bne.n	8005e3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69da      	ldr	r2, [r3, #28]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e68:	019b      	lsls	r3, r3, #6
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e70:	085b      	lsrs	r3, r3, #1
 8005e72:	3b01      	subs	r3, #1
 8005e74:	041b      	lsls	r3, r3, #16
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7c:	061b      	lsls	r3, r3, #24
 8005e7e:	491b      	ldr	r1, [pc, #108]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e84:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef4 <HAL_RCC_OscConfig+0x478>)
 8005e86:	2201      	movs	r2, #1
 8005e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8a:	f7fd fab1 	bl	80033f0 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e92:	f7fd faad 	bl	80033f0 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e05c      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ea4:	4b11      	ldr	r3, [pc, #68]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f0      	beq.n	8005e92 <HAL_RCC_OscConfig+0x416>
 8005eb0:	e054      	b.n	8005f5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb2:	4b10      	ldr	r3, [pc, #64]	@ (8005ef4 <HAL_RCC_OscConfig+0x478>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb8:	f7fd fa9a 	bl	80033f0 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec0:	f7fd fa96 	bl	80033f0 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e045      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ed2:	4b06      	ldr	r3, [pc, #24]	@ (8005eec <HAL_RCC_OscConfig+0x470>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x444>
 8005ede:	e03d      	b.n	8005f5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d107      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e038      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	40007000 	.word	0x40007000
 8005ef4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8005f68 <HAL_RCC_OscConfig+0x4ec>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d028      	beq.n	8005f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d121      	bne.n	8005f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d11a      	bne.n	8005f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005f28:	4013      	ands	r3, r2
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d111      	bne.n	8005f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3e:	085b      	lsrs	r3, r3, #1
 8005f40:	3b01      	subs	r3, #1
 8005f42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d107      	bne.n	8005f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d001      	beq.n	8005f5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	40023800 	.word	0x40023800

08005f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0cc      	b.n	800611a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f80:	4b68      	ldr	r3, [pc, #416]	@ (8006124 <HAL_RCC_ClockConfig+0x1b8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d90c      	bls.n	8005fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8e:	4b65      	ldr	r3, [pc, #404]	@ (8006124 <HAL_RCC_ClockConfig+0x1b8>)
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f96:	4b63      	ldr	r3, [pc, #396]	@ (8006124 <HAL_RCC_ClockConfig+0x1b8>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0307 	and.w	r3, r3, #7
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d001      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0b8      	b.n	800611a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d020      	beq.n	8005ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fc0:	4b59      	ldr	r3, [pc, #356]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	4a58      	ldr	r2, [pc, #352]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005fca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0308 	and.w	r3, r3, #8
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fd8:	4b53      	ldr	r3, [pc, #332]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	4a52      	ldr	r2, [pc, #328]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 8005fde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fe4:	4b50      	ldr	r3, [pc, #320]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	494d      	ldr	r1, [pc, #308]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d044      	beq.n	800608c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d107      	bne.n	800601a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800600a:	4b47      	ldr	r3, [pc, #284]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d119      	bne.n	800604a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e07f      	b.n	800611a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2b02      	cmp	r3, #2
 8006020:	d003      	beq.n	800602a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006026:	2b03      	cmp	r3, #3
 8006028:	d107      	bne.n	800603a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800602a:	4b3f      	ldr	r3, [pc, #252]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d109      	bne.n	800604a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e06f      	b.n	800611a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800603a:	4b3b      	ldr	r3, [pc, #236]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e067      	b.n	800611a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800604a:	4b37      	ldr	r3, [pc, #220]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f023 0203 	bic.w	r2, r3, #3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4934      	ldr	r1, [pc, #208]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 8006058:	4313      	orrs	r3, r2
 800605a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800605c:	f7fd f9c8 	bl	80033f0 <HAL_GetTick>
 8006060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006062:	e00a      	b.n	800607a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006064:	f7fd f9c4 	bl	80033f0 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006072:	4293      	cmp	r3, r2
 8006074:	d901      	bls.n	800607a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e04f      	b.n	800611a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800607a:	4b2b      	ldr	r3, [pc, #172]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 020c 	and.w	r2, r3, #12
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	429a      	cmp	r2, r3
 800608a:	d1eb      	bne.n	8006064 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800608c:	4b25      	ldr	r3, [pc, #148]	@ (8006124 <HAL_RCC_ClockConfig+0x1b8>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d20c      	bcs.n	80060b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800609a:	4b22      	ldr	r3, [pc, #136]	@ (8006124 <HAL_RCC_ClockConfig+0x1b8>)
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a2:	4b20      	ldr	r3, [pc, #128]	@ (8006124 <HAL_RCC_ClockConfig+0x1b8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	683a      	ldr	r2, [r7, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d001      	beq.n	80060b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e032      	b.n	800611a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060c0:	4b19      	ldr	r3, [pc, #100]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	4916      	ldr	r1, [pc, #88]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060de:	4b12      	ldr	r3, [pc, #72]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	490e      	ldr	r1, [pc, #56]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060f2:	f000 f821 	bl	8006138 <HAL_RCC_GetSysClockFreq>
 80060f6:	4602      	mov	r2, r0
 80060f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006128 <HAL_RCC_ClockConfig+0x1bc>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	091b      	lsrs	r3, r3, #4
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	490a      	ldr	r1, [pc, #40]	@ (800612c <HAL_RCC_ClockConfig+0x1c0>)
 8006104:	5ccb      	ldrb	r3, [r1, r3]
 8006106:	fa22 f303 	lsr.w	r3, r2, r3
 800610a:	4a09      	ldr	r2, [pc, #36]	@ (8006130 <HAL_RCC_ClockConfig+0x1c4>)
 800610c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800610e:	4b09      	ldr	r3, [pc, #36]	@ (8006134 <HAL_RCC_ClockConfig+0x1c8>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4618      	mov	r0, r3
 8006114:	f7fc ff7e 	bl	8003014 <HAL_InitTick>

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40023c00 	.word	0x40023c00
 8006128:	40023800 	.word	0x40023800
 800612c:	080095f4 	.word	0x080095f4
 8006130:	20000008 	.word	0x20000008
 8006134:	2000000c 	.word	0x2000000c

08006138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800613c:	b090      	sub	sp, #64	@ 0x40
 800613e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006148:	2300      	movs	r3, #0
 800614a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006150:	4b59      	ldr	r3, [pc, #356]	@ (80062b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f003 030c 	and.w	r3, r3, #12
 8006158:	2b08      	cmp	r3, #8
 800615a:	d00d      	beq.n	8006178 <HAL_RCC_GetSysClockFreq+0x40>
 800615c:	2b08      	cmp	r3, #8
 800615e:	f200 80a1 	bhi.w	80062a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <HAL_RCC_GetSysClockFreq+0x34>
 8006166:	2b04      	cmp	r3, #4
 8006168:	d003      	beq.n	8006172 <HAL_RCC_GetSysClockFreq+0x3a>
 800616a:	e09b      	b.n	80062a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800616c:	4b53      	ldr	r3, [pc, #332]	@ (80062bc <HAL_RCC_GetSysClockFreq+0x184>)
 800616e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006170:	e09b      	b.n	80062aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006172:	4b53      	ldr	r3, [pc, #332]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006174:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006176:	e098      	b.n	80062aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006178:	4b4f      	ldr	r3, [pc, #316]	@ (80062b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006180:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006182:	4b4d      	ldr	r3, [pc, #308]	@ (80062b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d028      	beq.n	80061e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800618e:	4b4a      	ldr	r3, [pc, #296]	@ (80062b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	099b      	lsrs	r3, r3, #6
 8006194:	2200      	movs	r2, #0
 8006196:	623b      	str	r3, [r7, #32]
 8006198:	627a      	str	r2, [r7, #36]	@ 0x24
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80061a0:	2100      	movs	r1, #0
 80061a2:	4b47      	ldr	r3, [pc, #284]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80061a4:	fb03 f201 	mul.w	r2, r3, r1
 80061a8:	2300      	movs	r3, #0
 80061aa:	fb00 f303 	mul.w	r3, r0, r3
 80061ae:	4413      	add	r3, r2
 80061b0:	4a43      	ldr	r2, [pc, #268]	@ (80062c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80061b2:	fba0 1202 	umull	r1, r2, r0, r2
 80061b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061b8:	460a      	mov	r2, r1
 80061ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80061bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061be:	4413      	add	r3, r2
 80061c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c4:	2200      	movs	r2, #0
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	61fa      	str	r2, [r7, #28]
 80061ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80061d2:	f7fa fd31 	bl	8000c38 <__aeabi_uldivmod>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4613      	mov	r3, r2
 80061dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061de:	e053      	b.n	8006288 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061e0:	4b35      	ldr	r3, [pc, #212]	@ (80062b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	099b      	lsrs	r3, r3, #6
 80061e6:	2200      	movs	r2, #0
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	617a      	str	r2, [r7, #20]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80061f2:	f04f 0b00 	mov.w	fp, #0
 80061f6:	4652      	mov	r2, sl
 80061f8:	465b      	mov	r3, fp
 80061fa:	f04f 0000 	mov.w	r0, #0
 80061fe:	f04f 0100 	mov.w	r1, #0
 8006202:	0159      	lsls	r1, r3, #5
 8006204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006208:	0150      	lsls	r0, r2, #5
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	ebb2 080a 	subs.w	r8, r2, sl
 8006212:	eb63 090b 	sbc.w	r9, r3, fp
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006222:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006226:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800622a:	ebb2 0408 	subs.w	r4, r2, r8
 800622e:	eb63 0509 	sbc.w	r5, r3, r9
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	00eb      	lsls	r3, r5, #3
 800623c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006240:	00e2      	lsls	r2, r4, #3
 8006242:	4614      	mov	r4, r2
 8006244:	461d      	mov	r5, r3
 8006246:	eb14 030a 	adds.w	r3, r4, sl
 800624a:	603b      	str	r3, [r7, #0]
 800624c:	eb45 030b 	adc.w	r3, r5, fp
 8006250:	607b      	str	r3, [r7, #4]
 8006252:	f04f 0200 	mov.w	r2, #0
 8006256:	f04f 0300 	mov.w	r3, #0
 800625a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800625e:	4629      	mov	r1, r5
 8006260:	028b      	lsls	r3, r1, #10
 8006262:	4621      	mov	r1, r4
 8006264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006268:	4621      	mov	r1, r4
 800626a:	028a      	lsls	r2, r1, #10
 800626c:	4610      	mov	r0, r2
 800626e:	4619      	mov	r1, r3
 8006270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006272:	2200      	movs	r2, #0
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	60fa      	str	r2, [r7, #12]
 8006278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800627c:	f7fa fcdc 	bl	8000c38 <__aeabi_uldivmod>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4613      	mov	r3, r2
 8006286:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006288:	4b0b      	ldr	r3, [pc, #44]	@ (80062b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	0c1b      	lsrs	r3, r3, #16
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	3301      	adds	r3, #1
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006298:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062a2:	e002      	b.n	80062aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062a4:	4b05      	ldr	r3, [pc, #20]	@ (80062bc <HAL_RCC_GetSysClockFreq+0x184>)
 80062a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3740      	adds	r7, #64	@ 0x40
 80062b0:	46bd      	mov	sp, r7
 80062b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062b6:	bf00      	nop
 80062b8:	40023800 	.word	0x40023800
 80062bc:	00f42400 	.word	0x00f42400
 80062c0:	017d7840 	.word	0x017d7840

080062c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062c8:	4b03      	ldr	r3, [pc, #12]	@ (80062d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80062ca:	681b      	ldr	r3, [r3, #0]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	20000008 	.word	0x20000008

080062dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062e0:	f7ff fff0 	bl	80062c4 <HAL_RCC_GetHCLKFreq>
 80062e4:	4602      	mov	r2, r0
 80062e6:	4b05      	ldr	r3, [pc, #20]	@ (80062fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	0a9b      	lsrs	r3, r3, #10
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	4903      	ldr	r1, [pc, #12]	@ (8006300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062f2:	5ccb      	ldrb	r3, [r1, r3]
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40023800 	.word	0x40023800
 8006300:	08009604 	.word	0x08009604

08006304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006308:	f7ff ffdc 	bl	80062c4 <HAL_RCC_GetHCLKFreq>
 800630c:	4602      	mov	r2, r0
 800630e:	4b05      	ldr	r3, [pc, #20]	@ (8006324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	0b5b      	lsrs	r3, r3, #13
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	4903      	ldr	r1, [pc, #12]	@ (8006328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800631a:	5ccb      	ldrb	r3, [r1, r3]
 800631c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006320:	4618      	mov	r0, r3
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40023800 	.word	0x40023800
 8006328:	08009604 	.word	0x08009604

0800632c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	220f      	movs	r2, #15
 800633a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800633c:	4b12      	ldr	r3, [pc, #72]	@ (8006388 <HAL_RCC_GetClockConfig+0x5c>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 0203 	and.w	r2, r3, #3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006348:	4b0f      	ldr	r3, [pc, #60]	@ (8006388 <HAL_RCC_GetClockConfig+0x5c>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006354:	4b0c      	ldr	r3, [pc, #48]	@ (8006388 <HAL_RCC_GetClockConfig+0x5c>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006360:	4b09      	ldr	r3, [pc, #36]	@ (8006388 <HAL_RCC_GetClockConfig+0x5c>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	08db      	lsrs	r3, r3, #3
 8006366:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800636e:	4b07      	ldr	r3, [pc, #28]	@ (800638c <HAL_RCC_GetClockConfig+0x60>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0207 	and.w	r2, r3, #7
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	601a      	str	r2, [r3, #0]
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40023800 	.word	0x40023800
 800638c:	40023c00 	.word	0x40023c00

08006390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e07b      	b.n	800649a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d108      	bne.n	80063bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063b2:	d009      	beq.n	80063c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	61da      	str	r2, [r3, #28]
 80063ba:	e005      	b.n	80063c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fc fcee 	bl	8002dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	431a      	orrs	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006438:	431a      	orrs	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800644c:	ea42 0103 	orr.w	r1, r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006454:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	0c1b      	lsrs	r3, r3, #16
 8006466:	f003 0104 	and.w	r1, r3, #4
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646e:	f003 0210 	and.w	r2, r3, #16
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69da      	ldr	r2, [r3, #28]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006488:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b088      	sub	sp, #32
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	603b      	str	r3, [r7, #0]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064b2:	f7fc ff9d 	bl	80033f0 <HAL_GetTick>
 80064b6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d001      	beq.n	80064cc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80064c8:	2302      	movs	r3, #2
 80064ca:	e12a      	b.n	8006722 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <HAL_SPI_Transmit+0x36>
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e122      	b.n	8006722 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d101      	bne.n	80064ea <HAL_SPI_Transmit+0x48>
 80064e6:	2302      	movs	r3, #2
 80064e8:	e11b      	b.n	8006722 <HAL_SPI_Transmit+0x280>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2203      	movs	r2, #3
 80064f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	88fa      	ldrh	r2, [r7, #6]
 800650a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	88fa      	ldrh	r2, [r7, #6]
 8006510:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006538:	d10f      	bne.n	800655a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006548:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006558:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006564:	2b40      	cmp	r3, #64	@ 0x40
 8006566:	d007      	beq.n	8006578 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006580:	d152      	bne.n	8006628 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <HAL_SPI_Transmit+0xee>
 800658a:	8b7b      	ldrh	r3, [r7, #26]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d145      	bne.n	800661c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006594:	881a      	ldrh	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a0:	1c9a      	adds	r2, r3, #2
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065b4:	e032      	b.n	800661c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f003 0302 	and.w	r3, r3, #2
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d112      	bne.n	80065ea <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c8:	881a      	ldrh	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d4:	1c9a      	adds	r2, r3, #2
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065de:	b29b      	uxth	r3, r3
 80065e0:	3b01      	subs	r3, #1
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80065e8:	e018      	b.n	800661c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065ea:	f7fc ff01 	bl	80033f0 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d803      	bhi.n	8006602 <HAL_SPI_Transmit+0x160>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d102      	bne.n	8006608 <HAL_SPI_Transmit+0x166>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d109      	bne.n	800661c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e082      	b.n	8006722 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1c7      	bne.n	80065b6 <HAL_SPI_Transmit+0x114>
 8006626:	e053      	b.n	80066d0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <HAL_SPI_Transmit+0x194>
 8006630:	8b7b      	ldrh	r3, [r7, #26]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d147      	bne.n	80066c6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	330c      	adds	r3, #12
 8006640:	7812      	ldrb	r2, [r2, #0]
 8006642:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800665c:	e033      	b.n	80066c6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b02      	cmp	r3, #2
 800666a:	d113      	bne.n	8006694 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	330c      	adds	r3, #12
 8006676:	7812      	ldrb	r2, [r2, #0]
 8006678:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006692:	e018      	b.n	80066c6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006694:	f7fc feac 	bl	80033f0 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d803      	bhi.n	80066ac <HAL_SPI_Transmit+0x20a>
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066aa:	d102      	bne.n	80066b2 <HAL_SPI_Transmit+0x210>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e02d      	b.n	8006722 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d1c6      	bne.n	800665e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 fceb 	bl	80070b0 <SPI_EndRxTxTransaction>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2220      	movs	r2, #32
 80066e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10a      	bne.n	8006704 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066ee:	2300      	movs	r3, #0
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006720:	2300      	movs	r3, #0
  }
}
 8006722:	4618      	mov	r0, r3
 8006724:	3720      	adds	r7, #32
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b088      	sub	sp, #32
 800672e:	af02      	add	r7, sp, #8
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	603b      	str	r3, [r7, #0]
 8006736:	4613      	mov	r3, r2
 8006738:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b01      	cmp	r3, #1
 8006744:	d001      	beq.n	800674a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006746:	2302      	movs	r3, #2
 8006748:	e104      	b.n	8006954 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006752:	d112      	bne.n	800677a <HAL_SPI_Receive+0x50>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10e      	bne.n	800677a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2204      	movs	r2, #4
 8006760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006764:	88fa      	ldrh	r2, [r7, #6]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	4613      	mov	r3, r2
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 f8f3 	bl	800695c <HAL_SPI_TransmitReceive>
 8006776:	4603      	mov	r3, r0
 8006778:	e0ec      	b.n	8006954 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800677a:	f7fc fe39 	bl	80033f0 <HAL_GetTick>
 800677e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <HAL_SPI_Receive+0x62>
 8006786:	88fb      	ldrh	r3, [r7, #6]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e0e1      	b.n	8006954 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <HAL_SPI_Receive+0x74>
 800679a:	2302      	movs	r3, #2
 800679c:	e0da      	b.n	8006954 <HAL_SPI_Receive+0x22a>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2204      	movs	r2, #4
 80067aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	88fa      	ldrh	r2, [r7, #6]
 80067be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	88fa      	ldrh	r2, [r7, #6]
 80067c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ec:	d10f      	bne.n	800680e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800680c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006818:	2b40      	cmp	r3, #64	@ 0x40
 800681a:	d007      	beq.n	800682c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800682a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d170      	bne.n	8006916 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006834:	e035      	b.n	80068a2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	2b01      	cmp	r3, #1
 8006842:	d115      	bne.n	8006870 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f103 020c 	add.w	r2, r3, #12
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006850:	7812      	ldrb	r2, [r2, #0]
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800686e:	e018      	b.n	80068a2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006870:	f7fc fdbe 	bl	80033f0 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d803      	bhi.n	8006888 <HAL_SPI_Receive+0x15e>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006886:	d102      	bne.n	800688e <HAL_SPI_Receive+0x164>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d109      	bne.n	80068a2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e058      	b.n	8006954 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1c4      	bne.n	8006836 <HAL_SPI_Receive+0x10c>
 80068ac:	e038      	b.n	8006920 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d113      	bne.n	80068e4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68da      	ldr	r2, [r3, #12]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c6:	b292      	uxth	r2, r2
 80068c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ce:	1c9a      	adds	r2, r3, #2
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80068e2:	e018      	b.n	8006916 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068e4:	f7fc fd84 	bl	80033f0 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d803      	bhi.n	80068fc <HAL_SPI_Receive+0x1d2>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fa:	d102      	bne.n	8006902 <HAL_SPI_Receive+0x1d8>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e01e      	b.n	8006954 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800691a:	b29b      	uxth	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1c6      	bne.n	80068ae <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 fb5d 	bl	8006fe4 <SPI_EndRxTransaction>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006952:	2300      	movs	r3, #0
  }
}
 8006954:	4618      	mov	r0, r3
 8006956:	3718      	adds	r7, #24
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b08a      	sub	sp, #40	@ 0x28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800696a:	2301      	movs	r3, #1
 800696c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800696e:	f7fc fd3f 	bl	80033f0 <HAL_GetTick>
 8006972:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800697a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006982:	887b      	ldrh	r3, [r7, #2]
 8006984:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006986:	7ffb      	ldrb	r3, [r7, #31]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d00c      	beq.n	80069a6 <HAL_SPI_TransmitReceive+0x4a>
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006992:	d106      	bne.n	80069a2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d102      	bne.n	80069a2 <HAL_SPI_TransmitReceive+0x46>
 800699c:	7ffb      	ldrb	r3, [r7, #31]
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d001      	beq.n	80069a6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80069a2:	2302      	movs	r3, #2
 80069a4:	e17f      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <HAL_SPI_TransmitReceive+0x5c>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <HAL_SPI_TransmitReceive+0x5c>
 80069b2:	887b      	ldrh	r3, [r7, #2]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e174      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_SPI_TransmitReceive+0x6e>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e16d      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x34a>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b04      	cmp	r3, #4
 80069dc:	d003      	beq.n	80069e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2205      	movs	r2, #5
 80069e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	887a      	ldrh	r2, [r7, #2]
 80069f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	887a      	ldrh	r2, [r7, #2]
 80069fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	887a      	ldrh	r2, [r7, #2]
 8006a08:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	887a      	ldrh	r2, [r7, #2]
 8006a0e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a26:	2b40      	cmp	r3, #64	@ 0x40
 8006a28:	d007      	beq.n	8006a3a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a42:	d17e      	bne.n	8006b42 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <HAL_SPI_TransmitReceive+0xf6>
 8006a4c:	8afb      	ldrh	r3, [r7, #22]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d16c      	bne.n	8006b2c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a56:	881a      	ldrh	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a62:	1c9a      	adds	r2, r3, #2
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a76:	e059      	b.n	8006b2c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d11b      	bne.n	8006abe <HAL_SPI_TransmitReceive+0x162>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d016      	beq.n	8006abe <HAL_SPI_TransmitReceive+0x162>
 8006a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d113      	bne.n	8006abe <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9a:	881a      	ldrh	r2, [r3, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa6:	1c9a      	adds	r2, r3, #2
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d119      	bne.n	8006b00 <HAL_SPI_TransmitReceive+0x1a4>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d014      	beq.n	8006b00 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae0:	b292      	uxth	r2, r2
 8006ae2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae8:	1c9a      	adds	r2, r3, #2
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006afc:	2301      	movs	r3, #1
 8006afe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b00:	f7fc fc76 	bl	80033f0 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d80d      	bhi.n	8006b2c <HAL_SPI_TransmitReceive+0x1d0>
 8006b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d009      	beq.n	8006b2c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e0bc      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1a0      	bne.n	8006a78 <HAL_SPI_TransmitReceive+0x11c>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d19b      	bne.n	8006a78 <HAL_SPI_TransmitReceive+0x11c>
 8006b40:	e082      	b.n	8006c48 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <HAL_SPI_TransmitReceive+0x1f4>
 8006b4a:	8afb      	ldrh	r3, [r7, #22]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d171      	bne.n	8006c34 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	330c      	adds	r3, #12
 8006b5a:	7812      	ldrb	r2, [r2, #0]
 8006b5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b76:	e05d      	b.n	8006c34 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d11c      	bne.n	8006bc0 <HAL_SPI_TransmitReceive+0x264>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d017      	beq.n	8006bc0 <HAL_SPI_TransmitReceive+0x264>
 8006b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d114      	bne.n	8006bc0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	330c      	adds	r3, #12
 8006ba0:	7812      	ldrb	r2, [r2, #0]
 8006ba2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d119      	bne.n	8006c02 <HAL_SPI_TransmitReceive+0x2a6>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d014      	beq.n	8006c02 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68da      	ldr	r2, [r3, #12]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be2:	b2d2      	uxtb	r2, r2
 8006be4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c02:	f7fc fbf5 	bl	80033f0 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d803      	bhi.n	8006c1a <HAL_SPI_TransmitReceive+0x2be>
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c18:	d102      	bne.n	8006c20 <HAL_SPI_TransmitReceive+0x2c4>
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d109      	bne.n	8006c34 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e038      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d19c      	bne.n	8006b78 <HAL_SPI_TransmitReceive+0x21c>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d197      	bne.n	8006b78 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c48:	6a3a      	ldr	r2, [r7, #32]
 8006c4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fa2f 	bl	80070b0 <SPI_EndRxTxTransaction>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d008      	beq.n	8006c6a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e01d      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c72:	2300      	movs	r3, #0
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	613b      	str	r3, [r7, #16]
 8006c86:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e000      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
  }
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3728      	adds	r7, #40	@ 0x28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10e      	bne.n	8006cf0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d009      	beq.n	8006cf0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d004      	beq.n	8006cf0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
    return;
 8006cee:	e0ce      	b.n	8006e8e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <HAL_SPI_IRQHandler+0x5e>
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d004      	beq.n	8006d0e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	4798      	blx	r3
    return;
 8006d0c:	e0bf      	b.n	8006e8e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	f003 0320 	and.w	r3, r3, #32
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <HAL_SPI_IRQHandler+0x7e>
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d105      	bne.n	8006d2e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 80b0 	beq.w	8006e8e <HAL_SPI_IRQHandler+0x1de>
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	f003 0320 	and.w	r3, r3, #32
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 80aa 	beq.w	8006e8e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d023      	beq.n	8006d8c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d011      	beq.n	8006d74 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d54:	f043 0204 	orr.w	r2, r3, #4
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	e00b      	b.n	8006d8c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d74:	2300      	movs	r3, #0
 8006d76:	613b      	str	r3, [r7, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	613b      	str	r3, [r7, #16]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	613b      	str	r3, [r7, #16]
 8006d88:	693b      	ldr	r3, [r7, #16]
        return;
 8006d8a:	e080      	b.n	8006e8e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d014      	beq.n	8006dc0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d9a:	f043 0201 	orr.w	r2, r3, #1
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006da2:	2300      	movs	r3, #0
 8006da4:	60fb      	str	r3, [r7, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00c      	beq.n	8006de4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dce:	f043 0208 	orr.w	r2, r3, #8
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60bb      	str	r3, [r7, #8]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	60bb      	str	r3, [r7, #8]
 8006de2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d04f      	beq.n	8006e8c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006dfa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d104      	bne.n	8006e18 <HAL_SPI_IRQHandler+0x168>
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d034      	beq.n	8006e82 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0203 	bic.w	r2, r2, #3
 8006e26:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d011      	beq.n	8006e54 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e34:	4a17      	ldr	r2, [pc, #92]	@ (8006e94 <HAL_SPI_IRQHandler+0x1e4>)
 8006e36:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fc ff09 	bl	8003c54 <HAL_DMA_Abort_IT>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d016      	beq.n	8006e8a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e60:	4a0c      	ldr	r2, [pc, #48]	@ (8006e94 <HAL_SPI_IRQHandler+0x1e4>)
 8006e62:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fc fef3 	bl	8003c54 <HAL_DMA_Abort_IT>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006e80:	e003      	b.n	8006e8a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f808 	bl	8006e98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e88:	e000      	b.n	8006e8c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006e8a:	bf00      	nop
    return;
 8006e8c:	bf00      	nop
  }
}
 8006e8e:	3720      	adds	r7, #32
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	08006ead 	.word	0x08006ead

08006e98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f7ff ffe6 	bl	8006e98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b088      	sub	sp, #32
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ee4:	f7fc fa84 	bl	80033f0 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eec:	1a9b      	subs	r3, r3, r2
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ef4:	f7fc fa7c 	bl	80033f0 <HAL_GetTick>
 8006ef8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006efa:	4b39      	ldr	r3, [pc, #228]	@ (8006fe0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	015b      	lsls	r3, r3, #5
 8006f00:	0d1b      	lsrs	r3, r3, #20
 8006f02:	69fa      	ldr	r2, [r7, #28]
 8006f04:	fb02 f303 	mul.w	r3, r2, r3
 8006f08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f0a:	e054      	b.n	8006fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f12:	d050      	beq.n	8006fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f14:	f7fc fa6c 	bl	80033f0 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	69fa      	ldr	r2, [r7, #28]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d902      	bls.n	8006f2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d13d      	bne.n	8006fa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f42:	d111      	bne.n	8006f68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f4c:	d004      	beq.n	8006f58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f56:	d107      	bne.n	8006f68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f70:	d10f      	bne.n	8006f92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e017      	b.n	8006fd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	bf0c      	ite	eq
 8006fc6:	2301      	moveq	r3, #1
 8006fc8:	2300      	movne	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	79fb      	ldrb	r3, [r7, #7]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d19b      	bne.n	8006f0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3720      	adds	r7, #32
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	20000008 	.word	0x20000008

08006fe4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ff8:	d111      	bne.n	800701e <SPI_EndRxTransaction+0x3a>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007002:	d004      	beq.n	800700e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800700c:	d107      	bne.n	800701e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800701c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007026:	d12a      	bne.n	800707e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007030:	d012      	beq.n	8007058 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2200      	movs	r2, #0
 800703a:	2180      	movs	r1, #128	@ 0x80
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f7ff ff49 	bl	8006ed4 <SPI_WaitFlagStateUntilTimeout>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d02d      	beq.n	80070a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800704c:	f043 0220 	orr.w	r2, r3, #32
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e026      	b.n	80070a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2200      	movs	r2, #0
 8007060:	2101      	movs	r1, #1
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f7ff ff36 	bl	8006ed4 <SPI_WaitFlagStateUntilTimeout>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d01a      	beq.n	80070a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007072:	f043 0220 	orr.w	r2, r3, #32
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e013      	b.n	80070a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	2200      	movs	r2, #0
 8007086:	2101      	movs	r1, #1
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f7ff ff23 	bl	8006ed4 <SPI_WaitFlagStateUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d007      	beq.n	80070a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007098:	f043 0220 	orr.w	r2, r3, #32
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e000      	b.n	80070a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
	...

080070b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b088      	sub	sp, #32
 80070b4:	af02      	add	r7, sp, #8
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2201      	movs	r2, #1
 80070c4:	2102      	movs	r1, #2
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff ff04 	bl	8006ed4 <SPI_WaitFlagStateUntilTimeout>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d007      	beq.n	80070e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070d6:	f043 0220 	orr.w	r2, r3, #32
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e032      	b.n	8007148 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007150 <SPI_EndRxTxTransaction+0xa0>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1b      	ldr	r2, [pc, #108]	@ (8007154 <SPI_EndRxTxTransaction+0xa4>)
 80070e8:	fba2 2303 	umull	r2, r3, r2, r3
 80070ec:	0d5b      	lsrs	r3, r3, #21
 80070ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80070f2:	fb02 f303 	mul.w	r3, r2, r3
 80070f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007100:	d112      	bne.n	8007128 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2200      	movs	r2, #0
 800710a:	2180      	movs	r1, #128	@ 0x80
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff fee1 	bl	8006ed4 <SPI_WaitFlagStateUntilTimeout>
 8007112:	4603      	mov	r3, r0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d016      	beq.n	8007146 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800711c:	f043 0220 	orr.w	r2, r3, #32
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e00f      	b.n	8007148 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	3b01      	subs	r3, #1
 8007132:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800713e:	2b80      	cmp	r3, #128	@ 0x80
 8007140:	d0f2      	beq.n	8007128 <SPI_EndRxTxTransaction+0x78>
 8007142:	e000      	b.n	8007146 <SPI_EndRxTxTransaction+0x96>
        break;
 8007144:	bf00      	nop
  }

  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20000008 	.word	0x20000008
 8007154:	165e9f81 	.word	0x165e9f81

08007158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e041      	b.n	80071ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f839 	bl	80071f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3304      	adds	r3, #4
 8007194:	4619      	mov	r1, r3
 8007196:	4610      	mov	r0, r2
 8007198:	f000 f9b2 	bl	8007500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
	...

0800720c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b01      	cmp	r3, #1
 800721e:	d001      	beq.n	8007224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e044      	b.n	80072ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f042 0201 	orr.w	r2, r2, #1
 800723a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a1e      	ldr	r2, [pc, #120]	@ (80072bc <HAL_TIM_Base_Start_IT+0xb0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d018      	beq.n	8007278 <HAL_TIM_Base_Start_IT+0x6c>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800724e:	d013      	beq.n	8007278 <HAL_TIM_Base_Start_IT+0x6c>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a1a      	ldr	r2, [pc, #104]	@ (80072c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00e      	beq.n	8007278 <HAL_TIM_Base_Start_IT+0x6c>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a19      	ldr	r2, [pc, #100]	@ (80072c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d009      	beq.n	8007278 <HAL_TIM_Base_Start_IT+0x6c>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a17      	ldr	r2, [pc, #92]	@ (80072c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <HAL_TIM_Base_Start_IT+0x6c>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a16      	ldr	r2, [pc, #88]	@ (80072cc <HAL_TIM_Base_Start_IT+0xc0>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d111      	bne.n	800729c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f003 0307 	and.w	r3, r3, #7
 8007282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b06      	cmp	r3, #6
 8007288:	d010      	beq.n	80072ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f042 0201 	orr.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800729a:	e007      	b.n	80072ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0201 	orr.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	40010000 	.word	0x40010000
 80072c0:	40000400 	.word	0x40000400
 80072c4:	40000800 	.word	0x40000800
 80072c8:	40000c00 	.word	0x40000c00
 80072cc:	40014000 	.word	0x40014000

080072d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d020      	beq.n	8007334 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d01b      	beq.n	8007334 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0202 	mvn.w	r2, #2
 8007304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f8d2 	bl	80074c4 <HAL_TIM_IC_CaptureCallback>
 8007320:	e005      	b.n	800732e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f8c4 	bl	80074b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f8d5 	bl	80074d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f003 0304 	and.w	r3, r3, #4
 800733a:	2b00      	cmp	r3, #0
 800733c:	d020      	beq.n	8007380 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	d01b      	beq.n	8007380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f06f 0204 	mvn.w	r2, #4
 8007350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f8ac 	bl	80074c4 <HAL_TIM_IC_CaptureCallback>
 800736c:	e005      	b.n	800737a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f89e 	bl	80074b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f8af 	bl	80074d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d020      	beq.n	80073cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f003 0308 	and.w	r3, r3, #8
 8007390:	2b00      	cmp	r3, #0
 8007392:	d01b      	beq.n	80073cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f06f 0208 	mvn.w	r2, #8
 800739c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2204      	movs	r2, #4
 80073a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	f003 0303 	and.w	r3, r3, #3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f886 	bl	80074c4 <HAL_TIM_IC_CaptureCallback>
 80073b8:	e005      	b.n	80073c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f878 	bl	80074b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f889 	bl	80074d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f003 0310 	and.w	r3, r3, #16
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d020      	beq.n	8007418 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01b      	beq.n	8007418 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f06f 0210 	mvn.w	r2, #16
 80073e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2208      	movs	r2, #8
 80073ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f860 	bl	80074c4 <HAL_TIM_IC_CaptureCallback>
 8007404:	e005      	b.n	8007412 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f852 	bl	80074b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f863 	bl	80074d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00c      	beq.n	800743c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d007      	beq.n	800743c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f06f 0201 	mvn.w	r2, #1
 8007434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7fb fc0a 	bl	8002c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00c      	beq.n	8007460 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800744c:	2b00      	cmp	r3, #0
 800744e:	d007      	beq.n	8007460 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 f8e6 	bl	800762c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00c      	beq.n	8007484 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d007      	beq.n	8007484 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800747c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f834 	bl	80074ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00c      	beq.n	80074a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f003 0320 	and.w	r3, r3, #32
 8007494:	2b00      	cmp	r3, #0
 8007496:	d007      	beq.n	80074a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f06f 0220 	mvn.w	r2, #32
 80074a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f8b8 	bl	8007618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074a8:	bf00      	nop
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a3a      	ldr	r2, [pc, #232]	@ (80075fc <TIM_Base_SetConfig+0xfc>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00f      	beq.n	8007538 <TIM_Base_SetConfig+0x38>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800751e:	d00b      	beq.n	8007538 <TIM_Base_SetConfig+0x38>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a37      	ldr	r2, [pc, #220]	@ (8007600 <TIM_Base_SetConfig+0x100>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d007      	beq.n	8007538 <TIM_Base_SetConfig+0x38>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a36      	ldr	r2, [pc, #216]	@ (8007604 <TIM_Base_SetConfig+0x104>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d003      	beq.n	8007538 <TIM_Base_SetConfig+0x38>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a35      	ldr	r2, [pc, #212]	@ (8007608 <TIM_Base_SetConfig+0x108>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d108      	bne.n	800754a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800753e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a2b      	ldr	r2, [pc, #172]	@ (80075fc <TIM_Base_SetConfig+0xfc>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d01b      	beq.n	800758a <TIM_Base_SetConfig+0x8a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007558:	d017      	beq.n	800758a <TIM_Base_SetConfig+0x8a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a28      	ldr	r2, [pc, #160]	@ (8007600 <TIM_Base_SetConfig+0x100>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d013      	beq.n	800758a <TIM_Base_SetConfig+0x8a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a27      	ldr	r2, [pc, #156]	@ (8007604 <TIM_Base_SetConfig+0x104>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00f      	beq.n	800758a <TIM_Base_SetConfig+0x8a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a26      	ldr	r2, [pc, #152]	@ (8007608 <TIM_Base_SetConfig+0x108>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00b      	beq.n	800758a <TIM_Base_SetConfig+0x8a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a25      	ldr	r2, [pc, #148]	@ (800760c <TIM_Base_SetConfig+0x10c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d007      	beq.n	800758a <TIM_Base_SetConfig+0x8a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a24      	ldr	r2, [pc, #144]	@ (8007610 <TIM_Base_SetConfig+0x110>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d003      	beq.n	800758a <TIM_Base_SetConfig+0x8a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a23      	ldr	r2, [pc, #140]	@ (8007614 <TIM_Base_SetConfig+0x114>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d108      	bne.n	800759c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4313      	orrs	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a0e      	ldr	r2, [pc, #56]	@ (80075fc <TIM_Base_SetConfig+0xfc>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d103      	bne.n	80075d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d105      	bne.n	80075ee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	f023 0201 	bic.w	r2, r3, #1
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	611a      	str	r2, [r3, #16]
  }
}
 80075ee:	bf00      	nop
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	40010000 	.word	0x40010000
 8007600:	40000400 	.word	0x40000400
 8007604:	40000800 	.word	0x40000800
 8007608:	40000c00 	.word	0x40000c00
 800760c:	40014000 	.word	0x40014000
 8007610:	40014400 	.word	0x40014400
 8007614:	40014800 	.word	0x40014800

08007618 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e042      	b.n	80076d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d106      	bne.n	800766c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fb fde6 	bl	8003238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2224      	movs	r2, #36	@ 0x24
 8007670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f82b 	bl	80076e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	691a      	ldr	r2, [r3, #16]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	695a      	ldr	r2, [r3, #20]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3708      	adds	r7, #8
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076e4:	b0c0      	sub	sp, #256	@ 0x100
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80076f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fc:	68d9      	ldr	r1, [r3, #12]
 80076fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	ea40 0301 	orr.w	r3, r0, r1
 8007708:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800770a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	431a      	orrs	r2, r3
 8007718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	431a      	orrs	r2, r3
 8007720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	4313      	orrs	r3, r2
 8007728:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007738:	f021 010c 	bic.w	r1, r1, #12
 800773c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007746:	430b      	orrs	r3, r1
 8007748:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800774a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775a:	6999      	ldr	r1, [r3, #24]
 800775c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	ea40 0301 	orr.w	r3, r0, r1
 8007766:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	4b8f      	ldr	r3, [pc, #572]	@ (80079ac <UART_SetConfig+0x2cc>)
 8007770:	429a      	cmp	r2, r3
 8007772:	d005      	beq.n	8007780 <UART_SetConfig+0xa0>
 8007774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	4b8d      	ldr	r3, [pc, #564]	@ (80079b0 <UART_SetConfig+0x2d0>)
 800777c:	429a      	cmp	r2, r3
 800777e:	d104      	bne.n	800778a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007780:	f7fe fdc0 	bl	8006304 <HAL_RCC_GetPCLK2Freq>
 8007784:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007788:	e003      	b.n	8007792 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800778a:	f7fe fda7 	bl	80062dc <HAL_RCC_GetPCLK1Freq>
 800778e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007796:	69db      	ldr	r3, [r3, #28]
 8007798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800779c:	f040 810c 	bne.w	80079b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077a4:	2200      	movs	r2, #0
 80077a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80077ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80077b2:	4622      	mov	r2, r4
 80077b4:	462b      	mov	r3, r5
 80077b6:	1891      	adds	r1, r2, r2
 80077b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80077ba:	415b      	adcs	r3, r3
 80077bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80077c2:	4621      	mov	r1, r4
 80077c4:	eb12 0801 	adds.w	r8, r2, r1
 80077c8:	4629      	mov	r1, r5
 80077ca:	eb43 0901 	adc.w	r9, r3, r1
 80077ce:	f04f 0200 	mov.w	r2, #0
 80077d2:	f04f 0300 	mov.w	r3, #0
 80077d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077e2:	4690      	mov	r8, r2
 80077e4:	4699      	mov	r9, r3
 80077e6:	4623      	mov	r3, r4
 80077e8:	eb18 0303 	adds.w	r3, r8, r3
 80077ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077f0:	462b      	mov	r3, r5
 80077f2:	eb49 0303 	adc.w	r3, r9, r3
 80077f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007806:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800780a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800780e:	460b      	mov	r3, r1
 8007810:	18db      	adds	r3, r3, r3
 8007812:	653b      	str	r3, [r7, #80]	@ 0x50
 8007814:	4613      	mov	r3, r2
 8007816:	eb42 0303 	adc.w	r3, r2, r3
 800781a:	657b      	str	r3, [r7, #84]	@ 0x54
 800781c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007820:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007824:	f7f9 fa08 	bl	8000c38 <__aeabi_uldivmod>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4b61      	ldr	r3, [pc, #388]	@ (80079b4 <UART_SetConfig+0x2d4>)
 800782e:	fba3 2302 	umull	r2, r3, r3, r2
 8007832:	095b      	lsrs	r3, r3, #5
 8007834:	011c      	lsls	r4, r3, #4
 8007836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800783a:	2200      	movs	r2, #0
 800783c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007840:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007844:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007848:	4642      	mov	r2, r8
 800784a:	464b      	mov	r3, r9
 800784c:	1891      	adds	r1, r2, r2
 800784e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007850:	415b      	adcs	r3, r3
 8007852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007854:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007858:	4641      	mov	r1, r8
 800785a:	eb12 0a01 	adds.w	sl, r2, r1
 800785e:	4649      	mov	r1, r9
 8007860:	eb43 0b01 	adc.w	fp, r3, r1
 8007864:	f04f 0200 	mov.w	r2, #0
 8007868:	f04f 0300 	mov.w	r3, #0
 800786c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007870:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007874:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007878:	4692      	mov	sl, r2
 800787a:	469b      	mov	fp, r3
 800787c:	4643      	mov	r3, r8
 800787e:	eb1a 0303 	adds.w	r3, sl, r3
 8007882:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007886:	464b      	mov	r3, r9
 8007888:	eb4b 0303 	adc.w	r3, fp, r3
 800788c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800789c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80078a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078a4:	460b      	mov	r3, r1
 80078a6:	18db      	adds	r3, r3, r3
 80078a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80078aa:	4613      	mov	r3, r2
 80078ac:	eb42 0303 	adc.w	r3, r2, r3
 80078b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80078b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80078b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80078ba:	f7f9 f9bd 	bl	8000c38 <__aeabi_uldivmod>
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	4611      	mov	r1, r2
 80078c4:	4b3b      	ldr	r3, [pc, #236]	@ (80079b4 <UART_SetConfig+0x2d4>)
 80078c6:	fba3 2301 	umull	r2, r3, r3, r1
 80078ca:	095b      	lsrs	r3, r3, #5
 80078cc:	2264      	movs	r2, #100	@ 0x64
 80078ce:	fb02 f303 	mul.w	r3, r2, r3
 80078d2:	1acb      	subs	r3, r1, r3
 80078d4:	00db      	lsls	r3, r3, #3
 80078d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80078da:	4b36      	ldr	r3, [pc, #216]	@ (80079b4 <UART_SetConfig+0x2d4>)
 80078dc:	fba3 2302 	umull	r2, r3, r3, r2
 80078e0:	095b      	lsrs	r3, r3, #5
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80078e8:	441c      	add	r4, r3
 80078ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078ee:	2200      	movs	r2, #0
 80078f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80078f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80078fc:	4642      	mov	r2, r8
 80078fe:	464b      	mov	r3, r9
 8007900:	1891      	adds	r1, r2, r2
 8007902:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007904:	415b      	adcs	r3, r3
 8007906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007908:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800790c:	4641      	mov	r1, r8
 800790e:	1851      	adds	r1, r2, r1
 8007910:	6339      	str	r1, [r7, #48]	@ 0x30
 8007912:	4649      	mov	r1, r9
 8007914:	414b      	adcs	r3, r1
 8007916:	637b      	str	r3, [r7, #52]	@ 0x34
 8007918:	f04f 0200 	mov.w	r2, #0
 800791c:	f04f 0300 	mov.w	r3, #0
 8007920:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007924:	4659      	mov	r1, fp
 8007926:	00cb      	lsls	r3, r1, #3
 8007928:	4651      	mov	r1, sl
 800792a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800792e:	4651      	mov	r1, sl
 8007930:	00ca      	lsls	r2, r1, #3
 8007932:	4610      	mov	r0, r2
 8007934:	4619      	mov	r1, r3
 8007936:	4603      	mov	r3, r0
 8007938:	4642      	mov	r2, r8
 800793a:	189b      	adds	r3, r3, r2
 800793c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007940:	464b      	mov	r3, r9
 8007942:	460a      	mov	r2, r1
 8007944:	eb42 0303 	adc.w	r3, r2, r3
 8007948:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800794c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007958:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800795c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007960:	460b      	mov	r3, r1
 8007962:	18db      	adds	r3, r3, r3
 8007964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007966:	4613      	mov	r3, r2
 8007968:	eb42 0303 	adc.w	r3, r2, r3
 800796c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800796e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007972:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007976:	f7f9 f95f 	bl	8000c38 <__aeabi_uldivmod>
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	4b0d      	ldr	r3, [pc, #52]	@ (80079b4 <UART_SetConfig+0x2d4>)
 8007980:	fba3 1302 	umull	r1, r3, r3, r2
 8007984:	095b      	lsrs	r3, r3, #5
 8007986:	2164      	movs	r1, #100	@ 0x64
 8007988:	fb01 f303 	mul.w	r3, r1, r3
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	3332      	adds	r3, #50	@ 0x32
 8007992:	4a08      	ldr	r2, [pc, #32]	@ (80079b4 <UART_SetConfig+0x2d4>)
 8007994:	fba2 2303 	umull	r2, r3, r2, r3
 8007998:	095b      	lsrs	r3, r3, #5
 800799a:	f003 0207 	and.w	r2, r3, #7
 800799e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4422      	add	r2, r4
 80079a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079a8:	e106      	b.n	8007bb8 <UART_SetConfig+0x4d8>
 80079aa:	bf00      	nop
 80079ac:	40011000 	.word	0x40011000
 80079b0:	40011400 	.word	0x40011400
 80079b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079bc:	2200      	movs	r2, #0
 80079be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80079c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80079ca:	4642      	mov	r2, r8
 80079cc:	464b      	mov	r3, r9
 80079ce:	1891      	adds	r1, r2, r2
 80079d0:	6239      	str	r1, [r7, #32]
 80079d2:	415b      	adcs	r3, r3
 80079d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80079d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079da:	4641      	mov	r1, r8
 80079dc:	1854      	adds	r4, r2, r1
 80079de:	4649      	mov	r1, r9
 80079e0:	eb43 0501 	adc.w	r5, r3, r1
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	f04f 0300 	mov.w	r3, #0
 80079ec:	00eb      	lsls	r3, r5, #3
 80079ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079f2:	00e2      	lsls	r2, r4, #3
 80079f4:	4614      	mov	r4, r2
 80079f6:	461d      	mov	r5, r3
 80079f8:	4643      	mov	r3, r8
 80079fa:	18e3      	adds	r3, r4, r3
 80079fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a00:	464b      	mov	r3, r9
 8007a02:	eb45 0303 	adc.w	r3, r5, r3
 8007a06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a1a:	f04f 0200 	mov.w	r2, #0
 8007a1e:	f04f 0300 	mov.w	r3, #0
 8007a22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a26:	4629      	mov	r1, r5
 8007a28:	008b      	lsls	r3, r1, #2
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a30:	4621      	mov	r1, r4
 8007a32:	008a      	lsls	r2, r1, #2
 8007a34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a38:	f7f9 f8fe 	bl	8000c38 <__aeabi_uldivmod>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	460b      	mov	r3, r1
 8007a40:	4b60      	ldr	r3, [pc, #384]	@ (8007bc4 <UART_SetConfig+0x4e4>)
 8007a42:	fba3 2302 	umull	r2, r3, r3, r2
 8007a46:	095b      	lsrs	r3, r3, #5
 8007a48:	011c      	lsls	r4, r3, #4
 8007a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a5c:	4642      	mov	r2, r8
 8007a5e:	464b      	mov	r3, r9
 8007a60:	1891      	adds	r1, r2, r2
 8007a62:	61b9      	str	r1, [r7, #24]
 8007a64:	415b      	adcs	r3, r3
 8007a66:	61fb      	str	r3, [r7, #28]
 8007a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a6c:	4641      	mov	r1, r8
 8007a6e:	1851      	adds	r1, r2, r1
 8007a70:	6139      	str	r1, [r7, #16]
 8007a72:	4649      	mov	r1, r9
 8007a74:	414b      	adcs	r3, r1
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	f04f 0300 	mov.w	r3, #0
 8007a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a84:	4659      	mov	r1, fp
 8007a86:	00cb      	lsls	r3, r1, #3
 8007a88:	4651      	mov	r1, sl
 8007a8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a8e:	4651      	mov	r1, sl
 8007a90:	00ca      	lsls	r2, r1, #3
 8007a92:	4610      	mov	r0, r2
 8007a94:	4619      	mov	r1, r3
 8007a96:	4603      	mov	r3, r0
 8007a98:	4642      	mov	r2, r8
 8007a9a:	189b      	adds	r3, r3, r2
 8007a9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007aa0:	464b      	mov	r3, r9
 8007aa2:	460a      	mov	r2, r1
 8007aa4:	eb42 0303 	adc.w	r3, r2, r3
 8007aa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ab6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007ab8:	f04f 0200 	mov.w	r2, #0
 8007abc:	f04f 0300 	mov.w	r3, #0
 8007ac0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ac4:	4649      	mov	r1, r9
 8007ac6:	008b      	lsls	r3, r1, #2
 8007ac8:	4641      	mov	r1, r8
 8007aca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ace:	4641      	mov	r1, r8
 8007ad0:	008a      	lsls	r2, r1, #2
 8007ad2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ad6:	f7f9 f8af 	bl	8000c38 <__aeabi_uldivmod>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4611      	mov	r1, r2
 8007ae0:	4b38      	ldr	r3, [pc, #224]	@ (8007bc4 <UART_SetConfig+0x4e4>)
 8007ae2:	fba3 2301 	umull	r2, r3, r3, r1
 8007ae6:	095b      	lsrs	r3, r3, #5
 8007ae8:	2264      	movs	r2, #100	@ 0x64
 8007aea:	fb02 f303 	mul.w	r3, r2, r3
 8007aee:	1acb      	subs	r3, r1, r3
 8007af0:	011b      	lsls	r3, r3, #4
 8007af2:	3332      	adds	r3, #50	@ 0x32
 8007af4:	4a33      	ldr	r2, [pc, #204]	@ (8007bc4 <UART_SetConfig+0x4e4>)
 8007af6:	fba2 2303 	umull	r2, r3, r2, r3
 8007afa:	095b      	lsrs	r3, r3, #5
 8007afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b00:	441c      	add	r4, r3
 8007b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b06:	2200      	movs	r2, #0
 8007b08:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b10:	4642      	mov	r2, r8
 8007b12:	464b      	mov	r3, r9
 8007b14:	1891      	adds	r1, r2, r2
 8007b16:	60b9      	str	r1, [r7, #8]
 8007b18:	415b      	adcs	r3, r3
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b20:	4641      	mov	r1, r8
 8007b22:	1851      	adds	r1, r2, r1
 8007b24:	6039      	str	r1, [r7, #0]
 8007b26:	4649      	mov	r1, r9
 8007b28:	414b      	adcs	r3, r1
 8007b2a:	607b      	str	r3, [r7, #4]
 8007b2c:	f04f 0200 	mov.w	r2, #0
 8007b30:	f04f 0300 	mov.w	r3, #0
 8007b34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b38:	4659      	mov	r1, fp
 8007b3a:	00cb      	lsls	r3, r1, #3
 8007b3c:	4651      	mov	r1, sl
 8007b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b42:	4651      	mov	r1, sl
 8007b44:	00ca      	lsls	r2, r1, #3
 8007b46:	4610      	mov	r0, r2
 8007b48:	4619      	mov	r1, r3
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	4642      	mov	r2, r8
 8007b4e:	189b      	adds	r3, r3, r2
 8007b50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b52:	464b      	mov	r3, r9
 8007b54:	460a      	mov	r2, r1
 8007b56:	eb42 0303 	adc.w	r3, r2, r3
 8007b5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b66:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	f04f 0300 	mov.w	r3, #0
 8007b70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b74:	4649      	mov	r1, r9
 8007b76:	008b      	lsls	r3, r1, #2
 8007b78:	4641      	mov	r1, r8
 8007b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b7e:	4641      	mov	r1, r8
 8007b80:	008a      	lsls	r2, r1, #2
 8007b82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b86:	f7f9 f857 	bl	8000c38 <__aeabi_uldivmod>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc4 <UART_SetConfig+0x4e4>)
 8007b90:	fba3 1302 	umull	r1, r3, r3, r2
 8007b94:	095b      	lsrs	r3, r3, #5
 8007b96:	2164      	movs	r1, #100	@ 0x64
 8007b98:	fb01 f303 	mul.w	r3, r1, r3
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	3332      	adds	r3, #50	@ 0x32
 8007ba2:	4a08      	ldr	r2, [pc, #32]	@ (8007bc4 <UART_SetConfig+0x4e4>)
 8007ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba8:	095b      	lsrs	r3, r3, #5
 8007baa:	f003 020f 	and.w	r2, r3, #15
 8007bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4422      	add	r2, r4
 8007bb6:	609a      	str	r2, [r3, #8]
}
 8007bb8:	bf00      	nop
 8007bba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bc4:	51eb851f 	.word	0x51eb851f

08007bc8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bda:	2b84      	cmp	r3, #132	@ 0x84
 8007bdc:	d005      	beq.n	8007bea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007bde:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	4413      	add	r3, r2
 8007be6:	3303      	adds	r3, #3
 8007be8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007bea:	68fb      	ldr	r3, [r7, #12]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007bfc:	f000 fae4 	bl	80081c8 <vTaskStartScheduler>
  
  return osOK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007c06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c08:	b089      	sub	sp, #36	@ 0x24
 8007c0a:	af04      	add	r7, sp, #16
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d020      	beq.n	8007c5a <osThreadCreate+0x54>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d01c      	beq.n	8007c5a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685c      	ldr	r4, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691e      	ldr	r6, [r3, #16]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff ffc8 	bl	8007bc8 <makeFreeRtosPriority>
 8007c38:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c42:	9202      	str	r2, [sp, #8]
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	9100      	str	r1, [sp, #0]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	4632      	mov	r2, r6
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f000 f8ed 	bl	8007e2e <xTaskCreateStatic>
 8007c54:	4603      	mov	r3, r0
 8007c56:	60fb      	str	r3, [r7, #12]
 8007c58:	e01c      	b.n	8007c94 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685c      	ldr	r4, [r3, #4]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c66:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7ff ffaa 	bl	8007bc8 <makeFreeRtosPriority>
 8007c74:	4602      	mov	r2, r0
 8007c76:	f107 030c 	add.w	r3, r7, #12
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	9200      	str	r2, [sp, #0]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	4632      	mov	r2, r6
 8007c82:	4629      	mov	r1, r5
 8007c84:	4620      	mov	r0, r4
 8007c86:	f000 f932 	bl	8007eee <xTaskCreate>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d001      	beq.n	8007c94 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007c90:	2300      	movs	r3, #0
 8007c92:	e000      	b.n	8007c96 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007c94:	68fb      	ldr	r3, [r7, #12]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c9e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <osDelay+0x16>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	e000      	b.n	8007cb6 <osDelay+0x18>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 fa50 	bl	800815c <vTaskDelay>
  
  return osOK;
 8007cbc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f103 0208 	add.w	r2, r3, #8
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f04f 32ff 	mov.w	r2, #4294967295
 8007cde:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f103 0208 	add.w	r2, r3, #8
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f103 0208 	add.w	r2, r3, #8
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	689a      	ldr	r2, [r3, #8]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	601a      	str	r2, [r3, #0]
}
 8007d5c:	bf00      	nop
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7e:	d103      	bne.n	8007d88 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	e00c      	b.n	8007da2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	60fb      	str	r3, [r7, #12]
 8007d8e:	e002      	b.n	8007d96 <vListInsert+0x2e>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d2f6      	bcs.n	8007d90 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	601a      	str	r2, [r3, #0]
}
 8007dce:	bf00      	nop
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b085      	sub	sp, #20
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	6892      	ldr	r2, [r2, #8]
 8007df0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	6852      	ldr	r2, [r2, #4]
 8007dfa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d103      	bne.n	8007e0e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	1e5a      	subs	r2, r3, #1
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b08e      	sub	sp, #56	@ 0x38
 8007e32:	af04      	add	r7, sp, #16
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	607a      	str	r2, [r7, #4]
 8007e3a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10b      	bne.n	8007e5a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	e7fd      	b.n	8007e56 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10b      	bne.n	8007e78 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	61fb      	str	r3, [r7, #28]
}
 8007e72:	bf00      	nop
 8007e74:	bf00      	nop
 8007e76:	e7fd      	b.n	8007e74 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e78:	2354      	movs	r3, #84	@ 0x54
 8007e7a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	2b54      	cmp	r3, #84	@ 0x54
 8007e80:	d00b      	beq.n	8007e9a <xTaskCreateStatic+0x6c>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	61bb      	str	r3, [r7, #24]
}
 8007e94:	bf00      	nop
 8007e96:	bf00      	nop
 8007e98:	e7fd      	b.n	8007e96 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d01e      	beq.n	8007ee0 <xTaskCreateStatic+0xb2>
 8007ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d01b      	beq.n	8007ee0 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eaa:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007eb0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007eba:	2300      	movs	r3, #0
 8007ebc:	9303      	str	r3, [sp, #12]
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	9302      	str	r3, [sp, #8]
 8007ec2:	f107 0314 	add.w	r3, r7, #20
 8007ec6:	9301      	str	r3, [sp, #4]
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	68b9      	ldr	r1, [r7, #8]
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 f850 	bl	8007f78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ed8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007eda:	f000 f8d5 	bl	8008088 <prvAddNewTaskToReadyList>
 8007ede:	e001      	b.n	8007ee4 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ee4:	697b      	ldr	r3, [r7, #20]
	}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3728      	adds	r7, #40	@ 0x28
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b08c      	sub	sp, #48	@ 0x30
 8007ef2:	af04      	add	r7, sp, #16
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	603b      	str	r3, [r7, #0]
 8007efa:	4613      	mov	r3, r2
 8007efc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007efe:	88fb      	ldrh	r3, [r7, #6]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 fed0 	bl	8008ca8 <pvPortMalloc>
 8007f08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00e      	beq.n	8007f2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f10:	2054      	movs	r0, #84	@ 0x54
 8007f12:	f000 fec9 	bl	8008ca8 <pvPortMalloc>
 8007f16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f24:	e005      	b.n	8007f32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f26:	6978      	ldr	r0, [r7, #20]
 8007f28:	f000 ff8c 	bl	8008e44 <vPortFree>
 8007f2c:	e001      	b.n	8007f32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d017      	beq.n	8007f68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f40:	88fa      	ldrh	r2, [r7, #6]
 8007f42:	2300      	movs	r3, #0
 8007f44:	9303      	str	r3, [sp, #12]
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	9302      	str	r3, [sp, #8]
 8007f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	68b9      	ldr	r1, [r7, #8]
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 f80e 	bl	8007f78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f5c:	69f8      	ldr	r0, [r7, #28]
 8007f5e:	f000 f893 	bl	8008088 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f62:	2301      	movs	r3, #1
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	e002      	b.n	8007f6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f68:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f6e:	69bb      	ldr	r3, [r7, #24]
	}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3720      	adds	r7, #32
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007f90:	3b01      	subs	r3, #1
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	f023 0307 	bic.w	r3, r3, #7
 8007f9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00b      	beq.n	8007fc2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	617b      	str	r3, [r7, #20]
}
 8007fbc:	bf00      	nop
 8007fbe:	bf00      	nop
 8007fc0:	e7fd      	b.n	8007fbe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d01f      	beq.n	8008008 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fc8:	2300      	movs	r3, #0
 8007fca:	61fb      	str	r3, [r7, #28]
 8007fcc:	e012      	b.n	8007ff4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	7819      	ldrb	r1, [r3, #0]
 8007fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	4413      	add	r3, r2
 8007fdc:	3334      	adds	r3, #52	@ 0x34
 8007fde:	460a      	mov	r2, r1
 8007fe0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d006      	beq.n	8007ffc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	61fb      	str	r3, [r7, #28]
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	2b0f      	cmp	r3, #15
 8007ff8:	d9e9      	bls.n	8007fce <prvInitialiseNewTask+0x56>
 8007ffa:	e000      	b.n	8007ffe <prvInitialiseNewTask+0x86>
			{
				break;
 8007ffc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008006:	e003      	b.n	8008010 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800a:	2200      	movs	r2, #0
 800800c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008012:	2b06      	cmp	r3, #6
 8008014:	d901      	bls.n	800801a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008016:	2306      	movs	r3, #6
 8008018:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800801a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800801e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008022:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008024:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008028:	2200      	movs	r2, #0
 800802a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800802c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802e:	3304      	adds	r3, #4
 8008030:	4618      	mov	r0, r3
 8008032:	f7ff fe68 	bl	8007d06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008038:	3318      	adds	r3, #24
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff fe63 	bl	8007d06 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008044:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008048:	f1c3 0207 	rsb	r2, r3, #7
 800804c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008054:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008058:	2200      	movs	r2, #0
 800805a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	2200      	movs	r2, #0
 8008060:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	68f9      	ldr	r1, [r7, #12]
 8008068:	69b8      	ldr	r0, [r7, #24]
 800806a:	f000 fc0d 	bl	8008888 <pxPortInitialiseStack>
 800806e:	4602      	mov	r2, r0
 8008070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008072:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800807a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800807e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008080:	bf00      	nop
 8008082:	3720      	adds	r7, #32
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008090:	f000 fd2a 	bl	8008ae8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008094:	4b2a      	ldr	r3, [pc, #168]	@ (8008140 <prvAddNewTaskToReadyList+0xb8>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3301      	adds	r3, #1
 800809a:	4a29      	ldr	r2, [pc, #164]	@ (8008140 <prvAddNewTaskToReadyList+0xb8>)
 800809c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800809e:	4b29      	ldr	r3, [pc, #164]	@ (8008144 <prvAddNewTaskToReadyList+0xbc>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80080a6:	4a27      	ldr	r2, [pc, #156]	@ (8008144 <prvAddNewTaskToReadyList+0xbc>)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80080ac:	4b24      	ldr	r3, [pc, #144]	@ (8008140 <prvAddNewTaskToReadyList+0xb8>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d110      	bne.n	80080d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80080b4:	f000 fac4 	bl	8008640 <prvInitialiseTaskLists>
 80080b8:	e00d      	b.n	80080d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080ba:	4b23      	ldr	r3, [pc, #140]	@ (8008148 <prvAddNewTaskToReadyList+0xc0>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d109      	bne.n	80080d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080c2:	4b20      	ldr	r3, [pc, #128]	@ (8008144 <prvAddNewTaskToReadyList+0xbc>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d802      	bhi.n	80080d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080d0:	4a1c      	ldr	r2, [pc, #112]	@ (8008144 <prvAddNewTaskToReadyList+0xbc>)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080d6:	4b1d      	ldr	r3, [pc, #116]	@ (800814c <prvAddNewTaskToReadyList+0xc4>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	3301      	adds	r3, #1
 80080dc:	4a1b      	ldr	r2, [pc, #108]	@ (800814c <prvAddNewTaskToReadyList+0xc4>)
 80080de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e4:	2201      	movs	r2, #1
 80080e6:	409a      	lsls	r2, r3
 80080e8:	4b19      	ldr	r3, [pc, #100]	@ (8008150 <prvAddNewTaskToReadyList+0xc8>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	4a18      	ldr	r2, [pc, #96]	@ (8008150 <prvAddNewTaskToReadyList+0xc8>)
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f6:	4613      	mov	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	4a15      	ldr	r2, [pc, #84]	@ (8008154 <prvAddNewTaskToReadyList+0xcc>)
 8008100:	441a      	add	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	3304      	adds	r3, #4
 8008106:	4619      	mov	r1, r3
 8008108:	4610      	mov	r0, r2
 800810a:	f7ff fe09 	bl	8007d20 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800810e:	f000 fd1d 	bl	8008b4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008112:	4b0d      	ldr	r3, [pc, #52]	@ (8008148 <prvAddNewTaskToReadyList+0xc0>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00e      	beq.n	8008138 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800811a:	4b0a      	ldr	r3, [pc, #40]	@ (8008144 <prvAddNewTaskToReadyList+0xbc>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008124:	429a      	cmp	r2, r3
 8008126:	d207      	bcs.n	8008138 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008128:	4b0b      	ldr	r3, [pc, #44]	@ (8008158 <prvAddNewTaskToReadyList+0xd0>)
 800812a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008138:	bf00      	nop
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	200008fc 	.word	0x200008fc
 8008144:	200007fc 	.word	0x200007fc
 8008148:	20000908 	.word	0x20000908
 800814c:	20000918 	.word	0x20000918
 8008150:	20000904 	.word	0x20000904
 8008154:	20000800 	.word	0x20000800
 8008158:	e000ed04 	.word	0xe000ed04

0800815c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008164:	2300      	movs	r3, #0
 8008166:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d018      	beq.n	80081a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800816e:	4b14      	ldr	r3, [pc, #80]	@ (80081c0 <vTaskDelay+0x64>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00b      	beq.n	800818e <vTaskDelay+0x32>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	60bb      	str	r3, [r7, #8]
}
 8008188:	bf00      	nop
 800818a:	bf00      	nop
 800818c:	e7fd      	b.n	800818a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800818e:	f000 f87d 	bl	800828c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008192:	2100      	movs	r1, #0
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fb11 	bl	80087bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800819a:	f000 f885 	bl	80082a8 <xTaskResumeAll>
 800819e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d107      	bne.n	80081b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80081a6:	4b07      	ldr	r3, [pc, #28]	@ (80081c4 <vTaskDelay+0x68>)
 80081a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000924 	.word	0x20000924
 80081c4:	e000ed04 	.word	0xe000ed04

080081c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08a      	sub	sp, #40	@ 0x28
 80081cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081ce:	2300      	movs	r3, #0
 80081d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081d6:	463a      	mov	r2, r7
 80081d8:	1d39      	adds	r1, r7, #4
 80081da:	f107 0308 	add.w	r3, r7, #8
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fa f992 	bl	8002508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	9202      	str	r2, [sp, #8]
 80081ec:	9301      	str	r3, [sp, #4]
 80081ee:	2300      	movs	r3, #0
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	2300      	movs	r3, #0
 80081f4:	460a      	mov	r2, r1
 80081f6:	491f      	ldr	r1, [pc, #124]	@ (8008274 <vTaskStartScheduler+0xac>)
 80081f8:	481f      	ldr	r0, [pc, #124]	@ (8008278 <vTaskStartScheduler+0xb0>)
 80081fa:	f7ff fe18 	bl	8007e2e <xTaskCreateStatic>
 80081fe:	4603      	mov	r3, r0
 8008200:	4a1e      	ldr	r2, [pc, #120]	@ (800827c <vTaskStartScheduler+0xb4>)
 8008202:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008204:	4b1d      	ldr	r3, [pc, #116]	@ (800827c <vTaskStartScheduler+0xb4>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800820c:	2301      	movs	r3, #1
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	e001      	b.n	8008216 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008212:	2300      	movs	r3, #0
 8008214:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d116      	bne.n	800824a <vTaskStartScheduler+0x82>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	613b      	str	r3, [r7, #16]
}
 800822e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008230:	4b13      	ldr	r3, [pc, #76]	@ (8008280 <vTaskStartScheduler+0xb8>)
 8008232:	f04f 32ff 	mov.w	r2, #4294967295
 8008236:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008238:	4b12      	ldr	r3, [pc, #72]	@ (8008284 <vTaskStartScheduler+0xbc>)
 800823a:	2201      	movs	r2, #1
 800823c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800823e:	4b12      	ldr	r3, [pc, #72]	@ (8008288 <vTaskStartScheduler+0xc0>)
 8008240:	2200      	movs	r2, #0
 8008242:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008244:	f000 fbac 	bl	80089a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008248:	e00f      	b.n	800826a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008250:	d10b      	bne.n	800826a <vTaskStartScheduler+0xa2>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	60fb      	str	r3, [r7, #12]
}
 8008264:	bf00      	nop
 8008266:	bf00      	nop
 8008268:	e7fd      	b.n	8008266 <vTaskStartScheduler+0x9e>
}
 800826a:	bf00      	nop
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	080095ec 	.word	0x080095ec
 8008278:	08008611 	.word	0x08008611
 800827c:	20000920 	.word	0x20000920
 8008280:	2000091c 	.word	0x2000091c
 8008284:	20000908 	.word	0x20000908
 8008288:	20000900 	.word	0x20000900

0800828c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008290:	4b04      	ldr	r3, [pc, #16]	@ (80082a4 <vTaskSuspendAll+0x18>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3301      	adds	r3, #1
 8008296:	4a03      	ldr	r2, [pc, #12]	@ (80082a4 <vTaskSuspendAll+0x18>)
 8008298:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800829a:	bf00      	nop
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	20000924 	.word	0x20000924

080082a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082b6:	4b42      	ldr	r3, [pc, #264]	@ (80083c0 <xTaskResumeAll+0x118>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10b      	bne.n	80082d6 <xTaskResumeAll+0x2e>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	603b      	str	r3, [r7, #0]
}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	e7fd      	b.n	80082d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082d6:	f000 fc07 	bl	8008ae8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082da:	4b39      	ldr	r3, [pc, #228]	@ (80083c0 <xTaskResumeAll+0x118>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3b01      	subs	r3, #1
 80082e0:	4a37      	ldr	r2, [pc, #220]	@ (80083c0 <xTaskResumeAll+0x118>)
 80082e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082e4:	4b36      	ldr	r3, [pc, #216]	@ (80083c0 <xTaskResumeAll+0x118>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d161      	bne.n	80083b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082ec:	4b35      	ldr	r3, [pc, #212]	@ (80083c4 <xTaskResumeAll+0x11c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d05d      	beq.n	80083b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082f4:	e02e      	b.n	8008354 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f6:	4b34      	ldr	r3, [pc, #208]	@ (80083c8 <xTaskResumeAll+0x120>)
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3318      	adds	r3, #24
 8008302:	4618      	mov	r0, r3
 8008304:	f7ff fd69 	bl	8007dda <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3304      	adds	r3, #4
 800830c:	4618      	mov	r0, r3
 800830e:	f7ff fd64 	bl	8007dda <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008316:	2201      	movs	r2, #1
 8008318:	409a      	lsls	r2, r3
 800831a:	4b2c      	ldr	r3, [pc, #176]	@ (80083cc <xTaskResumeAll+0x124>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4313      	orrs	r3, r2
 8008320:	4a2a      	ldr	r2, [pc, #168]	@ (80083cc <xTaskResumeAll+0x124>)
 8008322:	6013      	str	r3, [r2, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008328:	4613      	mov	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4a27      	ldr	r2, [pc, #156]	@ (80083d0 <xTaskResumeAll+0x128>)
 8008332:	441a      	add	r2, r3
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	3304      	adds	r3, #4
 8008338:	4619      	mov	r1, r3
 800833a:	4610      	mov	r0, r2
 800833c:	f7ff fcf0 	bl	8007d20 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008344:	4b23      	ldr	r3, [pc, #140]	@ (80083d4 <xTaskResumeAll+0x12c>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834a:	429a      	cmp	r2, r3
 800834c:	d302      	bcc.n	8008354 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800834e:	4b22      	ldr	r3, [pc, #136]	@ (80083d8 <xTaskResumeAll+0x130>)
 8008350:	2201      	movs	r2, #1
 8008352:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008354:	4b1c      	ldr	r3, [pc, #112]	@ (80083c8 <xTaskResumeAll+0x120>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1cc      	bne.n	80082f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008362:	f000 fa0b 	bl	800877c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008366:	4b1d      	ldr	r3, [pc, #116]	@ (80083dc <xTaskResumeAll+0x134>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d010      	beq.n	8008394 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008372:	f000 f837 	bl	80083e4 <xTaskIncrementTick>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800837c:	4b16      	ldr	r3, [pc, #88]	@ (80083d8 <xTaskResumeAll+0x130>)
 800837e:	2201      	movs	r2, #1
 8008380:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	3b01      	subs	r3, #1
 8008386:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1f1      	bne.n	8008372 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800838e:	4b13      	ldr	r3, [pc, #76]	@ (80083dc <xTaskResumeAll+0x134>)
 8008390:	2200      	movs	r2, #0
 8008392:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008394:	4b10      	ldr	r3, [pc, #64]	@ (80083d8 <xTaskResumeAll+0x130>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d009      	beq.n	80083b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800839c:	2301      	movs	r3, #1
 800839e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80083a0:	4b0f      	ldr	r3, [pc, #60]	@ (80083e0 <xTaskResumeAll+0x138>)
 80083a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083b0:	f000 fbcc 	bl	8008b4c <vPortExitCritical>

	return xAlreadyYielded;
 80083b4:	68bb      	ldr	r3, [r7, #8]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	20000924 	.word	0x20000924
 80083c4:	200008fc 	.word	0x200008fc
 80083c8:	200008bc 	.word	0x200008bc
 80083cc:	20000904 	.word	0x20000904
 80083d0:	20000800 	.word	0x20000800
 80083d4:	200007fc 	.word	0x200007fc
 80083d8:	20000910 	.word	0x20000910
 80083dc:	2000090c 	.word	0x2000090c
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083ea:	2300      	movs	r3, #0
 80083ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ee:	4b4f      	ldr	r3, [pc, #316]	@ (800852c <xTaskIncrementTick+0x148>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f040 808f 	bne.w	8008516 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083f8:	4b4d      	ldr	r3, [pc, #308]	@ (8008530 <xTaskIncrementTick+0x14c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3301      	adds	r3, #1
 80083fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008400:	4a4b      	ldr	r2, [pc, #300]	@ (8008530 <xTaskIncrementTick+0x14c>)
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d121      	bne.n	8008450 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800840c:	4b49      	ldr	r3, [pc, #292]	@ (8008534 <xTaskIncrementTick+0x150>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00b      	beq.n	800842e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841a:	f383 8811 	msr	BASEPRI, r3
 800841e:	f3bf 8f6f 	isb	sy
 8008422:	f3bf 8f4f 	dsb	sy
 8008426:	603b      	str	r3, [r7, #0]
}
 8008428:	bf00      	nop
 800842a:	bf00      	nop
 800842c:	e7fd      	b.n	800842a <xTaskIncrementTick+0x46>
 800842e:	4b41      	ldr	r3, [pc, #260]	@ (8008534 <xTaskIncrementTick+0x150>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	4b40      	ldr	r3, [pc, #256]	@ (8008538 <xTaskIncrementTick+0x154>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a3e      	ldr	r2, [pc, #248]	@ (8008534 <xTaskIncrementTick+0x150>)
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	4a3e      	ldr	r2, [pc, #248]	@ (8008538 <xTaskIncrementTick+0x154>)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	4b3e      	ldr	r3, [pc, #248]	@ (800853c <xTaskIncrementTick+0x158>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3301      	adds	r3, #1
 8008448:	4a3c      	ldr	r2, [pc, #240]	@ (800853c <xTaskIncrementTick+0x158>)
 800844a:	6013      	str	r3, [r2, #0]
 800844c:	f000 f996 	bl	800877c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008450:	4b3b      	ldr	r3, [pc, #236]	@ (8008540 <xTaskIncrementTick+0x15c>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	429a      	cmp	r2, r3
 8008458:	d348      	bcc.n	80084ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800845a:	4b36      	ldr	r3, [pc, #216]	@ (8008534 <xTaskIncrementTick+0x150>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d104      	bne.n	800846e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008464:	4b36      	ldr	r3, [pc, #216]	@ (8008540 <xTaskIncrementTick+0x15c>)
 8008466:	f04f 32ff 	mov.w	r2, #4294967295
 800846a:	601a      	str	r2, [r3, #0]
					break;
 800846c:	e03e      	b.n	80084ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800846e:	4b31      	ldr	r3, [pc, #196]	@ (8008534 <xTaskIncrementTick+0x150>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	429a      	cmp	r2, r3
 8008484:	d203      	bcs.n	800848e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008486:	4a2e      	ldr	r2, [pc, #184]	@ (8008540 <xTaskIncrementTick+0x15c>)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800848c:	e02e      	b.n	80084ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	3304      	adds	r3, #4
 8008492:	4618      	mov	r0, r3
 8008494:	f7ff fca1 	bl	8007dda <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800849c:	2b00      	cmp	r3, #0
 800849e:	d004      	beq.n	80084aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	3318      	adds	r3, #24
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7ff fc98 	bl	8007dda <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ae:	2201      	movs	r2, #1
 80084b0:	409a      	lsls	r2, r3
 80084b2:	4b24      	ldr	r3, [pc, #144]	@ (8008544 <xTaskIncrementTick+0x160>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	4a22      	ldr	r2, [pc, #136]	@ (8008544 <xTaskIncrementTick+0x160>)
 80084ba:	6013      	str	r3, [r2, #0]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084c0:	4613      	mov	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4a1f      	ldr	r2, [pc, #124]	@ (8008548 <xTaskIncrementTick+0x164>)
 80084ca:	441a      	add	r2, r3
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	3304      	adds	r3, #4
 80084d0:	4619      	mov	r1, r3
 80084d2:	4610      	mov	r0, r2
 80084d4:	f7ff fc24 	bl	8007d20 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084dc:	4b1b      	ldr	r3, [pc, #108]	@ (800854c <xTaskIncrementTick+0x168>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d3b9      	bcc.n	800845a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80084e6:	2301      	movs	r3, #1
 80084e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084ea:	e7b6      	b.n	800845a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084ec:	4b17      	ldr	r3, [pc, #92]	@ (800854c <xTaskIncrementTick+0x168>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f2:	4915      	ldr	r1, [pc, #84]	@ (8008548 <xTaskIncrementTick+0x164>)
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	440b      	add	r3, r1
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d901      	bls.n	8008508 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008504:	2301      	movs	r3, #1
 8008506:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008508:	4b11      	ldr	r3, [pc, #68]	@ (8008550 <xTaskIncrementTick+0x16c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d007      	beq.n	8008520 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008510:	2301      	movs	r3, #1
 8008512:	617b      	str	r3, [r7, #20]
 8008514:	e004      	b.n	8008520 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008516:	4b0f      	ldr	r3, [pc, #60]	@ (8008554 <xTaskIncrementTick+0x170>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3301      	adds	r3, #1
 800851c:	4a0d      	ldr	r2, [pc, #52]	@ (8008554 <xTaskIncrementTick+0x170>)
 800851e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008520:	697b      	ldr	r3, [r7, #20]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3718      	adds	r7, #24
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000924 	.word	0x20000924
 8008530:	20000900 	.word	0x20000900
 8008534:	200008b4 	.word	0x200008b4
 8008538:	200008b8 	.word	0x200008b8
 800853c:	20000914 	.word	0x20000914
 8008540:	2000091c 	.word	0x2000091c
 8008544:	20000904 	.word	0x20000904
 8008548:	20000800 	.word	0x20000800
 800854c:	200007fc 	.word	0x200007fc
 8008550:	20000910 	.word	0x20000910
 8008554:	2000090c 	.word	0x2000090c

08008558 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800855e:	4b27      	ldr	r3, [pc, #156]	@ (80085fc <vTaskSwitchContext+0xa4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008566:	4b26      	ldr	r3, [pc, #152]	@ (8008600 <vTaskSwitchContext+0xa8>)
 8008568:	2201      	movs	r2, #1
 800856a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800856c:	e040      	b.n	80085f0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800856e:	4b24      	ldr	r3, [pc, #144]	@ (8008600 <vTaskSwitchContext+0xa8>)
 8008570:	2200      	movs	r2, #0
 8008572:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008574:	4b23      	ldr	r3, [pc, #140]	@ (8008604 <vTaskSwitchContext+0xac>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	fab3 f383 	clz	r3, r3
 8008580:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008582:	7afb      	ldrb	r3, [r7, #11]
 8008584:	f1c3 031f 	rsb	r3, r3, #31
 8008588:	617b      	str	r3, [r7, #20]
 800858a:	491f      	ldr	r1, [pc, #124]	@ (8008608 <vTaskSwitchContext+0xb0>)
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	4613      	mov	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	440b      	add	r3, r1
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10b      	bne.n	80085b6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	607b      	str	r3, [r7, #4]
}
 80085b0:	bf00      	nop
 80085b2:	bf00      	nop
 80085b4:	e7fd      	b.n	80085b2 <vTaskSwitchContext+0x5a>
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	4613      	mov	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4a11      	ldr	r2, [pc, #68]	@ (8008608 <vTaskSwitchContext+0xb0>)
 80085c2:	4413      	add	r3, r2
 80085c4:	613b      	str	r3, [r7, #16]
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	605a      	str	r2, [r3, #4]
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	3308      	adds	r3, #8
 80085d8:	429a      	cmp	r2, r3
 80085da:	d104      	bne.n	80085e6 <vTaskSwitchContext+0x8e>
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	685a      	ldr	r2, [r3, #4]
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	605a      	str	r2, [r3, #4]
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	4a07      	ldr	r2, [pc, #28]	@ (800860c <vTaskSwitchContext+0xb4>)
 80085ee:	6013      	str	r3, [r2, #0]
}
 80085f0:	bf00      	nop
 80085f2:	371c      	adds	r7, #28
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	20000924 	.word	0x20000924
 8008600:	20000910 	.word	0x20000910
 8008604:	20000904 	.word	0x20000904
 8008608:	20000800 	.word	0x20000800
 800860c:	200007fc 	.word	0x200007fc

08008610 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008618:	f000 f852 	bl	80086c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800861c:	4b06      	ldr	r3, [pc, #24]	@ (8008638 <prvIdleTask+0x28>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d9f9      	bls.n	8008618 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008624:	4b05      	ldr	r3, [pc, #20]	@ (800863c <prvIdleTask+0x2c>)
 8008626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800862a:	601a      	str	r2, [r3, #0]
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008634:	e7f0      	b.n	8008618 <prvIdleTask+0x8>
 8008636:	bf00      	nop
 8008638:	20000800 	.word	0x20000800
 800863c:	e000ed04 	.word	0xe000ed04

08008640 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008646:	2300      	movs	r3, #0
 8008648:	607b      	str	r3, [r7, #4]
 800864a:	e00c      	b.n	8008666 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	4613      	mov	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4a12      	ldr	r2, [pc, #72]	@ (80086a0 <prvInitialiseTaskLists+0x60>)
 8008658:	4413      	add	r3, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f7ff fb33 	bl	8007cc6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	3301      	adds	r3, #1
 8008664:	607b      	str	r3, [r7, #4]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b06      	cmp	r3, #6
 800866a:	d9ef      	bls.n	800864c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800866c:	480d      	ldr	r0, [pc, #52]	@ (80086a4 <prvInitialiseTaskLists+0x64>)
 800866e:	f7ff fb2a 	bl	8007cc6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008672:	480d      	ldr	r0, [pc, #52]	@ (80086a8 <prvInitialiseTaskLists+0x68>)
 8008674:	f7ff fb27 	bl	8007cc6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008678:	480c      	ldr	r0, [pc, #48]	@ (80086ac <prvInitialiseTaskLists+0x6c>)
 800867a:	f7ff fb24 	bl	8007cc6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800867e:	480c      	ldr	r0, [pc, #48]	@ (80086b0 <prvInitialiseTaskLists+0x70>)
 8008680:	f7ff fb21 	bl	8007cc6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008684:	480b      	ldr	r0, [pc, #44]	@ (80086b4 <prvInitialiseTaskLists+0x74>)
 8008686:	f7ff fb1e 	bl	8007cc6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800868a:	4b0b      	ldr	r3, [pc, #44]	@ (80086b8 <prvInitialiseTaskLists+0x78>)
 800868c:	4a05      	ldr	r2, [pc, #20]	@ (80086a4 <prvInitialiseTaskLists+0x64>)
 800868e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008690:	4b0a      	ldr	r3, [pc, #40]	@ (80086bc <prvInitialiseTaskLists+0x7c>)
 8008692:	4a05      	ldr	r2, [pc, #20]	@ (80086a8 <prvInitialiseTaskLists+0x68>)
 8008694:	601a      	str	r2, [r3, #0]
}
 8008696:	bf00      	nop
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20000800 	.word	0x20000800
 80086a4:	2000088c 	.word	0x2000088c
 80086a8:	200008a0 	.word	0x200008a0
 80086ac:	200008bc 	.word	0x200008bc
 80086b0:	200008d0 	.word	0x200008d0
 80086b4:	200008e8 	.word	0x200008e8
 80086b8:	200008b4 	.word	0x200008b4
 80086bc:	200008b8 	.word	0x200008b8

080086c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086c6:	e019      	b.n	80086fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086c8:	f000 fa0e 	bl	8008ae8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086cc:	4b10      	ldr	r3, [pc, #64]	@ (8008710 <prvCheckTasksWaitingTermination+0x50>)
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff fb7e 	bl	8007dda <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086de:	4b0d      	ldr	r3, [pc, #52]	@ (8008714 <prvCheckTasksWaitingTermination+0x54>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	4a0b      	ldr	r2, [pc, #44]	@ (8008714 <prvCheckTasksWaitingTermination+0x54>)
 80086e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008718 <prvCheckTasksWaitingTermination+0x58>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	4a0a      	ldr	r2, [pc, #40]	@ (8008718 <prvCheckTasksWaitingTermination+0x58>)
 80086f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086f2:	f000 fa2b 	bl	8008b4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f810 	bl	800871c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086fc:	4b06      	ldr	r3, [pc, #24]	@ (8008718 <prvCheckTasksWaitingTermination+0x58>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e1      	bne.n	80086c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	200008d0 	.word	0x200008d0
 8008714:	200008fc 	.word	0x200008fc
 8008718:	200008e4 	.word	0x200008e4

0800871c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800872a:	2b00      	cmp	r3, #0
 800872c:	d108      	bne.n	8008740 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008732:	4618      	mov	r0, r3
 8008734:	f000 fb86 	bl	8008e44 <vPortFree>
				vPortFree( pxTCB );
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fb83 	bl	8008e44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800873e:	e019      	b.n	8008774 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008746:	2b01      	cmp	r3, #1
 8008748:	d103      	bne.n	8008752 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fb7a 	bl	8008e44 <vPortFree>
	}
 8008750:	e010      	b.n	8008774 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008758:	2b02      	cmp	r3, #2
 800875a:	d00b      	beq.n	8008774 <prvDeleteTCB+0x58>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	60fb      	str	r3, [r7, #12]
}
 800876e:	bf00      	nop
 8008770:	bf00      	nop
 8008772:	e7fd      	b.n	8008770 <prvDeleteTCB+0x54>
	}
 8008774:	bf00      	nop
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008782:	4b0c      	ldr	r3, [pc, #48]	@ (80087b4 <prvResetNextTaskUnblockTime+0x38>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d104      	bne.n	8008796 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800878c:	4b0a      	ldr	r3, [pc, #40]	@ (80087b8 <prvResetNextTaskUnblockTime+0x3c>)
 800878e:	f04f 32ff 	mov.w	r2, #4294967295
 8008792:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008794:	e008      	b.n	80087a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008796:	4b07      	ldr	r3, [pc, #28]	@ (80087b4 <prvResetNextTaskUnblockTime+0x38>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4a04      	ldr	r2, [pc, #16]	@ (80087b8 <prvResetNextTaskUnblockTime+0x3c>)
 80087a6:	6013      	str	r3, [r2, #0]
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	200008b4 	.word	0x200008b4
 80087b8:	2000091c 	.word	0x2000091c

080087bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087c6:	4b29      	ldr	r3, [pc, #164]	@ (800886c <prvAddCurrentTaskToDelayedList+0xb0>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087cc:	4b28      	ldr	r3, [pc, #160]	@ (8008870 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3304      	adds	r3, #4
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff fb01 	bl	8007dda <uxListRemove>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10b      	bne.n	80087f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80087de:	4b24      	ldr	r3, [pc, #144]	@ (8008870 <prvAddCurrentTaskToDelayedList+0xb4>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e4:	2201      	movs	r2, #1
 80087e6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ea:	43da      	mvns	r2, r3
 80087ec:	4b21      	ldr	r3, [pc, #132]	@ (8008874 <prvAddCurrentTaskToDelayedList+0xb8>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4013      	ands	r3, r2
 80087f2:	4a20      	ldr	r2, [pc, #128]	@ (8008874 <prvAddCurrentTaskToDelayedList+0xb8>)
 80087f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fc:	d10a      	bne.n	8008814 <prvAddCurrentTaskToDelayedList+0x58>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d007      	beq.n	8008814 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008804:	4b1a      	ldr	r3, [pc, #104]	@ (8008870 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3304      	adds	r3, #4
 800880a:	4619      	mov	r1, r3
 800880c:	481a      	ldr	r0, [pc, #104]	@ (8008878 <prvAddCurrentTaskToDelayedList+0xbc>)
 800880e:	f7ff fa87 	bl	8007d20 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008812:	e026      	b.n	8008862 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4413      	add	r3, r2
 800881a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800881c:	4b14      	ldr	r3, [pc, #80]	@ (8008870 <prvAddCurrentTaskToDelayedList+0xb4>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	429a      	cmp	r2, r3
 800882a:	d209      	bcs.n	8008840 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800882c:	4b13      	ldr	r3, [pc, #76]	@ (800887c <prvAddCurrentTaskToDelayedList+0xc0>)
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	4b0f      	ldr	r3, [pc, #60]	@ (8008870 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3304      	adds	r3, #4
 8008836:	4619      	mov	r1, r3
 8008838:	4610      	mov	r0, r2
 800883a:	f7ff fa95 	bl	8007d68 <vListInsert>
}
 800883e:	e010      	b.n	8008862 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008840:	4b0f      	ldr	r3, [pc, #60]	@ (8008880 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	4b0a      	ldr	r3, [pc, #40]	@ (8008870 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3304      	adds	r3, #4
 800884a:	4619      	mov	r1, r3
 800884c:	4610      	mov	r0, r2
 800884e:	f7ff fa8b 	bl	8007d68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008852:	4b0c      	ldr	r3, [pc, #48]	@ (8008884 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	429a      	cmp	r2, r3
 800885a:	d202      	bcs.n	8008862 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800885c:	4a09      	ldr	r2, [pc, #36]	@ (8008884 <prvAddCurrentTaskToDelayedList+0xc8>)
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	6013      	str	r3, [r2, #0]
}
 8008862:	bf00      	nop
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	20000900 	.word	0x20000900
 8008870:	200007fc 	.word	0x200007fc
 8008874:	20000904 	.word	0x20000904
 8008878:	200008e8 	.word	0x200008e8
 800887c:	200008b8 	.word	0x200008b8
 8008880:	200008b4 	.word	0x200008b4
 8008884:	2000091c 	.word	0x2000091c

08008888 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3b04      	subs	r3, #4
 8008898:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80088a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	3b04      	subs	r3, #4
 80088a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f023 0201 	bic.w	r2, r3, #1
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	3b04      	subs	r3, #4
 80088b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088b8:	4a0c      	ldr	r2, [pc, #48]	@ (80088ec <pxPortInitialiseStack+0x64>)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	3b14      	subs	r3, #20
 80088c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3b04      	subs	r3, #4
 80088ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f06f 0202 	mvn.w	r2, #2
 80088d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	3b20      	subs	r3, #32
 80088dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088de:	68fb      	ldr	r3, [r7, #12]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	080088f1 	.word	0x080088f1

080088f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088f6:	2300      	movs	r3, #0
 80088f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088fa:	4b13      	ldr	r3, [pc, #76]	@ (8008948 <prvTaskExitError+0x58>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008902:	d00b      	beq.n	800891c <prvTaskExitError+0x2c>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	60fb      	str	r3, [r7, #12]
}
 8008916:	bf00      	nop
 8008918:	bf00      	nop
 800891a:	e7fd      	b.n	8008918 <prvTaskExitError+0x28>
	__asm volatile
 800891c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008920:	f383 8811 	msr	BASEPRI, r3
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	60bb      	str	r3, [r7, #8]
}
 800892e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008930:	bf00      	nop
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d0fc      	beq.n	8008932 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008938:	bf00      	nop
 800893a:	bf00      	nop
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	20000014 	.word	0x20000014
 800894c:	00000000 	.word	0x00000000

08008950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008950:	4b07      	ldr	r3, [pc, #28]	@ (8008970 <pxCurrentTCBConst2>)
 8008952:	6819      	ldr	r1, [r3, #0]
 8008954:	6808      	ldr	r0, [r1, #0]
 8008956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895a:	f380 8809 	msr	PSP, r0
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f04f 0000 	mov.w	r0, #0
 8008966:	f380 8811 	msr	BASEPRI, r0
 800896a:	4770      	bx	lr
 800896c:	f3af 8000 	nop.w

08008970 <pxCurrentTCBConst2>:
 8008970:	200007fc 	.word	0x200007fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop

08008978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008978:	4808      	ldr	r0, [pc, #32]	@ (800899c <prvPortStartFirstTask+0x24>)
 800897a:	6800      	ldr	r0, [r0, #0]
 800897c:	6800      	ldr	r0, [r0, #0]
 800897e:	f380 8808 	msr	MSP, r0
 8008982:	f04f 0000 	mov.w	r0, #0
 8008986:	f380 8814 	msr	CONTROL, r0
 800898a:	b662      	cpsie	i
 800898c:	b661      	cpsie	f
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	df00      	svc	0
 8008998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800899a:	bf00      	nop
 800899c:	e000ed08 	.word	0xe000ed08

080089a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80089a6:	4b47      	ldr	r3, [pc, #284]	@ (8008ac4 <xPortStartScheduler+0x124>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a47      	ldr	r2, [pc, #284]	@ (8008ac8 <xPortStartScheduler+0x128>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d10b      	bne.n	80089c8 <xPortStartScheduler+0x28>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	613b      	str	r3, [r7, #16]
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	e7fd      	b.n	80089c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089c8:	4b3e      	ldr	r3, [pc, #248]	@ (8008ac4 <xPortStartScheduler+0x124>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a3f      	ldr	r2, [pc, #252]	@ (8008acc <xPortStartScheduler+0x12c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d10b      	bne.n	80089ea <xPortStartScheduler+0x4a>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	60fb      	str	r3, [r7, #12]
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
 80089e8:	e7fd      	b.n	80089e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089ea:	4b39      	ldr	r3, [pc, #228]	@ (8008ad0 <xPortStartScheduler+0x130>)
 80089ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	22ff      	movs	r2, #255	@ 0xff
 80089fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a04:	78fb      	ldrb	r3, [r7, #3]
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	4b31      	ldr	r3, [pc, #196]	@ (8008ad4 <xPortStartScheduler+0x134>)
 8008a10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a12:	4b31      	ldr	r3, [pc, #196]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a14:	2207      	movs	r2, #7
 8008a16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a18:	e009      	b.n	8008a2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	4a2d      	ldr	r2, [pc, #180]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a24:	78fb      	ldrb	r3, [r7, #3]
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	005b      	lsls	r3, r3, #1
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a2e:	78fb      	ldrb	r3, [r7, #3]
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a36:	2b80      	cmp	r3, #128	@ 0x80
 8008a38:	d0ef      	beq.n	8008a1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a3a:	4b27      	ldr	r3, [pc, #156]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f1c3 0307 	rsb	r3, r3, #7
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d00b      	beq.n	8008a5e <xPortStartScheduler+0xbe>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	60bb      	str	r3, [r7, #8]
}
 8008a58:	bf00      	nop
 8008a5a:	bf00      	nop
 8008a5c:	e7fd      	b.n	8008a5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	021b      	lsls	r3, r3, #8
 8008a64:	4a1c      	ldr	r2, [pc, #112]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a68:	4b1b      	ldr	r3, [pc, #108]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a70:	4a19      	ldr	r2, [pc, #100]	@ (8008ad8 <xPortStartScheduler+0x138>)
 8008a72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a7c:	4b17      	ldr	r3, [pc, #92]	@ (8008adc <xPortStartScheduler+0x13c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a16      	ldr	r2, [pc, #88]	@ (8008adc <xPortStartScheduler+0x13c>)
 8008a82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a88:	4b14      	ldr	r3, [pc, #80]	@ (8008adc <xPortStartScheduler+0x13c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a13      	ldr	r2, [pc, #76]	@ (8008adc <xPortStartScheduler+0x13c>)
 8008a8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008a92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a94:	f000 f8da 	bl	8008c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a98:	4b11      	ldr	r3, [pc, #68]	@ (8008ae0 <xPortStartScheduler+0x140>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a9e:	f000 f8f9 	bl	8008c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008aa2:	4b10      	ldr	r3, [pc, #64]	@ (8008ae4 <xPortStartScheduler+0x144>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8008ae4 <xPortStartScheduler+0x144>)
 8008aa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008aac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008aae:	f7ff ff63 	bl	8008978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ab2:	f7ff fd51 	bl	8008558 <vTaskSwitchContext>
	prvTaskExitError();
 8008ab6:	f7ff ff1b 	bl	80088f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3718      	adds	r7, #24
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	e000ed00 	.word	0xe000ed00
 8008ac8:	410fc271 	.word	0x410fc271
 8008acc:	410fc270 	.word	0x410fc270
 8008ad0:	e000e400 	.word	0xe000e400
 8008ad4:	20000928 	.word	0x20000928
 8008ad8:	2000092c 	.word	0x2000092c
 8008adc:	e000ed20 	.word	0xe000ed20
 8008ae0:	20000014 	.word	0x20000014
 8008ae4:	e000ef34 	.word	0xe000ef34

08008ae8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	607b      	str	r3, [r7, #4]
}
 8008b00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b02:	4b10      	ldr	r3, [pc, #64]	@ (8008b44 <vPortEnterCritical+0x5c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3301      	adds	r3, #1
 8008b08:	4a0e      	ldr	r2, [pc, #56]	@ (8008b44 <vPortEnterCritical+0x5c>)
 8008b0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008b44 <vPortEnterCritical+0x5c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d110      	bne.n	8008b36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b14:	4b0c      	ldr	r3, [pc, #48]	@ (8008b48 <vPortEnterCritical+0x60>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00b      	beq.n	8008b36 <vPortEnterCritical+0x4e>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	603b      	str	r3, [r7, #0]
}
 8008b30:	bf00      	nop
 8008b32:	bf00      	nop
 8008b34:	e7fd      	b.n	8008b32 <vPortEnterCritical+0x4a>
	}
}
 8008b36:	bf00      	nop
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	20000014 	.word	0x20000014
 8008b48:	e000ed04 	.word	0xe000ed04

08008b4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b52:	4b12      	ldr	r3, [pc, #72]	@ (8008b9c <vPortExitCritical+0x50>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10b      	bne.n	8008b72 <vPortExitCritical+0x26>
	__asm volatile
 8008b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5e:	f383 8811 	msr	BASEPRI, r3
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	f3bf 8f4f 	dsb	sy
 8008b6a:	607b      	str	r3, [r7, #4]
}
 8008b6c:	bf00      	nop
 8008b6e:	bf00      	nop
 8008b70:	e7fd      	b.n	8008b6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b72:	4b0a      	ldr	r3, [pc, #40]	@ (8008b9c <vPortExitCritical+0x50>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3b01      	subs	r3, #1
 8008b78:	4a08      	ldr	r2, [pc, #32]	@ (8008b9c <vPortExitCritical+0x50>)
 8008b7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b7c:	4b07      	ldr	r3, [pc, #28]	@ (8008b9c <vPortExitCritical+0x50>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d105      	bne.n	8008b90 <vPortExitCritical+0x44>
 8008b84:	2300      	movs	r3, #0
 8008b86:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	20000014 	.word	0x20000014

08008ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ba0:	f3ef 8009 	mrs	r0, PSP
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	4b15      	ldr	r3, [pc, #84]	@ (8008c00 <pxCurrentTCBConst>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	f01e 0f10 	tst.w	lr, #16
 8008bb0:	bf08      	it	eq
 8008bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bba:	6010      	str	r0, [r2, #0]
 8008bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008bc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008bc4:	f380 8811 	msr	BASEPRI, r0
 8008bc8:	f3bf 8f4f 	dsb	sy
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f7ff fcc2 	bl	8008558 <vTaskSwitchContext>
 8008bd4:	f04f 0000 	mov.w	r0, #0
 8008bd8:	f380 8811 	msr	BASEPRI, r0
 8008bdc:	bc09      	pop	{r0, r3}
 8008bde:	6819      	ldr	r1, [r3, #0]
 8008be0:	6808      	ldr	r0, [r1, #0]
 8008be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be6:	f01e 0f10 	tst.w	lr, #16
 8008bea:	bf08      	it	eq
 8008bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008bf0:	f380 8809 	msr	PSP, r0
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	f3af 8000 	nop.w

08008c00 <pxCurrentTCBConst>:
 8008c00:	200007fc 	.word	0x200007fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c04:	bf00      	nop
 8008c06:	bf00      	nop

08008c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	607b      	str	r3, [r7, #4]
}
 8008c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c22:	f7ff fbdf 	bl	80083e4 <xTaskIncrementTick>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c2c:	4b06      	ldr	r3, [pc, #24]	@ (8008c48 <SysTick_Handler+0x40>)
 8008c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	2300      	movs	r3, #0
 8008c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	f383 8811 	msr	BASEPRI, r3
}
 8008c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	e000ed04 	.word	0xe000ed04

08008c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c50:	4b0b      	ldr	r3, [pc, #44]	@ (8008c80 <vPortSetupTimerInterrupt+0x34>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c56:	4b0b      	ldr	r3, [pc, #44]	@ (8008c84 <vPortSetupTimerInterrupt+0x38>)
 8008c58:	2200      	movs	r2, #0
 8008c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c88 <vPortSetupTimerInterrupt+0x3c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a0a      	ldr	r2, [pc, #40]	@ (8008c8c <vPortSetupTimerInterrupt+0x40>)
 8008c62:	fba2 2303 	umull	r2, r3, r2, r3
 8008c66:	099b      	lsrs	r3, r3, #6
 8008c68:	4a09      	ldr	r2, [pc, #36]	@ (8008c90 <vPortSetupTimerInterrupt+0x44>)
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c6e:	4b04      	ldr	r3, [pc, #16]	@ (8008c80 <vPortSetupTimerInterrupt+0x34>)
 8008c70:	2207      	movs	r2, #7
 8008c72:	601a      	str	r2, [r3, #0]
}
 8008c74:	bf00      	nop
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	e000e010 	.word	0xe000e010
 8008c84:	e000e018 	.word	0xe000e018
 8008c88:	20000008 	.word	0x20000008
 8008c8c:	10624dd3 	.word	0x10624dd3
 8008c90:	e000e014 	.word	0xe000e014

08008c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008ca4 <vPortEnableVFP+0x10>
 8008c98:	6801      	ldr	r1, [r0, #0]
 8008c9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c9e:	6001      	str	r1, [r0, #0]
 8008ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ca2:	bf00      	nop
 8008ca4:	e000ed88 	.word	0xe000ed88

08008ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08a      	sub	sp, #40	@ 0x28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008cb4:	f7ff faea 	bl	800828c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008cb8:	4b5c      	ldr	r3, [pc, #368]	@ (8008e2c <pvPortMalloc+0x184>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d101      	bne.n	8008cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008cc0:	f000 f924 	bl	8008f0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cc4:	4b5a      	ldr	r3, [pc, #360]	@ (8008e30 <pvPortMalloc+0x188>)
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f040 8095 	bne.w	8008dfc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d01e      	beq.n	8008d16 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008cd8:	2208      	movs	r2, #8
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4413      	add	r3, r2
 8008cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f003 0307 	and.w	r3, r3, #7
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d015      	beq.n	8008d16 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f023 0307 	bic.w	r3, r3, #7
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00b      	beq.n	8008d16 <pvPortMalloc+0x6e>
	__asm volatile
 8008cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	617b      	str	r3, [r7, #20]
}
 8008d10:	bf00      	nop
 8008d12:	bf00      	nop
 8008d14:	e7fd      	b.n	8008d12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d06f      	beq.n	8008dfc <pvPortMalloc+0x154>
 8008d1c:	4b45      	ldr	r3, [pc, #276]	@ (8008e34 <pvPortMalloc+0x18c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d86a      	bhi.n	8008dfc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d26:	4b44      	ldr	r3, [pc, #272]	@ (8008e38 <pvPortMalloc+0x190>)
 8008d28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d2a:	4b43      	ldr	r3, [pc, #268]	@ (8008e38 <pvPortMalloc+0x190>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d30:	e004      	b.n	8008d3c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d903      	bls.n	8008d4e <pvPortMalloc+0xa6>
 8008d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1f1      	bne.n	8008d32 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d4e:	4b37      	ldr	r3, [pc, #220]	@ (8008e2c <pvPortMalloc+0x184>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d051      	beq.n	8008dfc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d58:	6a3b      	ldr	r3, [r7, #32]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2208      	movs	r2, #8
 8008d5e:	4413      	add	r3, r2
 8008d60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	1ad2      	subs	r2, r2, r3
 8008d72:	2308      	movs	r3, #8
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d920      	bls.n	8008dbc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4413      	add	r3, r2
 8008d80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	f003 0307 	and.w	r3, r3, #7
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00b      	beq.n	8008da4 <pvPortMalloc+0xfc>
	__asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	613b      	str	r3, [r7, #16]
}
 8008d9e:	bf00      	nop
 8008da0:	bf00      	nop
 8008da2:	e7fd      	b.n	8008da0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	1ad2      	subs	r2, r2, r3
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008db6:	69b8      	ldr	r0, [r7, #24]
 8008db8:	f000 f90a 	bl	8008fd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8008e34 <pvPortMalloc+0x18c>)
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8008e34 <pvPortMalloc+0x18c>)
 8008dc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008dca:	4b1a      	ldr	r3, [pc, #104]	@ (8008e34 <pvPortMalloc+0x18c>)
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	4b1b      	ldr	r3, [pc, #108]	@ (8008e3c <pvPortMalloc+0x194>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d203      	bcs.n	8008dde <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008dd6:	4b17      	ldr	r3, [pc, #92]	@ (8008e34 <pvPortMalloc+0x18c>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a18      	ldr	r2, [pc, #96]	@ (8008e3c <pvPortMalloc+0x194>)
 8008ddc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de0:	685a      	ldr	r2, [r3, #4]
 8008de2:	4b13      	ldr	r3, [pc, #76]	@ (8008e30 <pvPortMalloc+0x188>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	431a      	orrs	r2, r3
 8008de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dee:	2200      	movs	r2, #0
 8008df0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008df2:	4b13      	ldr	r3, [pc, #76]	@ (8008e40 <pvPortMalloc+0x198>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3301      	adds	r3, #1
 8008df8:	4a11      	ldr	r2, [pc, #68]	@ (8008e40 <pvPortMalloc+0x198>)
 8008dfa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008dfc:	f7ff fa54 	bl	80082a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	f003 0307 	and.w	r3, r3, #7
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00b      	beq.n	8008e22 <pvPortMalloc+0x17a>
	__asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e0e:	f383 8811 	msr	BASEPRI, r3
 8008e12:	f3bf 8f6f 	isb	sy
 8008e16:	f3bf 8f4f 	dsb	sy
 8008e1a:	60fb      	str	r3, [r7, #12]
}
 8008e1c:	bf00      	nop
 8008e1e:	bf00      	nop
 8008e20:	e7fd      	b.n	8008e1e <pvPortMalloc+0x176>
	return pvReturn;
 8008e22:	69fb      	ldr	r3, [r7, #28]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3728      	adds	r7, #40	@ 0x28
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20004538 	.word	0x20004538
 8008e30:	2000454c 	.word	0x2000454c
 8008e34:	2000453c 	.word	0x2000453c
 8008e38:	20004530 	.word	0x20004530
 8008e3c:	20004540 	.word	0x20004540
 8008e40:	20004544 	.word	0x20004544

08008e44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d04f      	beq.n	8008ef6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e56:	2308      	movs	r3, #8
 8008e58:	425b      	negs	r3, r3
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	4b25      	ldr	r3, [pc, #148]	@ (8008f00 <vPortFree+0xbc>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10b      	bne.n	8008e8a <vPortFree+0x46>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	60fb      	str	r3, [r7, #12]
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop
 8008e88:	e7fd      	b.n	8008e86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00b      	beq.n	8008eaa <vPortFree+0x66>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	60bb      	str	r3, [r7, #8]
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop
 8008ea8:	e7fd      	b.n	8008ea6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	4b14      	ldr	r3, [pc, #80]	@ (8008f00 <vPortFree+0xbc>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d01e      	beq.n	8008ef6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d11a      	bne.n	8008ef6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8008f00 <vPortFree+0xbc>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	43db      	mvns	r3, r3
 8008eca:	401a      	ands	r2, r3
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ed0:	f7ff f9dc 	bl	800828c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8008f04 <vPortFree+0xc0>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4413      	add	r3, r2
 8008ede:	4a09      	ldr	r2, [pc, #36]	@ (8008f04 <vPortFree+0xc0>)
 8008ee0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ee2:	6938      	ldr	r0, [r7, #16]
 8008ee4:	f000 f874 	bl	8008fd0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ee8:	4b07      	ldr	r3, [pc, #28]	@ (8008f08 <vPortFree+0xc4>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3301      	adds	r3, #1
 8008eee:	4a06      	ldr	r2, [pc, #24]	@ (8008f08 <vPortFree+0xc4>)
 8008ef0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ef2:	f7ff f9d9 	bl	80082a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ef6:	bf00      	nop
 8008ef8:	3718      	adds	r7, #24
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	2000454c 	.word	0x2000454c
 8008f04:	2000453c 	.word	0x2000453c
 8008f08:	20004548 	.word	0x20004548

08008f0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f12:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008f16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f18:	4b27      	ldr	r3, [pc, #156]	@ (8008fb8 <prvHeapInit+0xac>)
 8008f1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f003 0307 	and.w	r3, r3, #7
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00c      	beq.n	8008f40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3307      	adds	r3, #7
 8008f2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f023 0307 	bic.w	r3, r3, #7
 8008f32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8008fb8 <prvHeapInit+0xac>)
 8008f3c:	4413      	add	r3, r2
 8008f3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f44:	4a1d      	ldr	r2, [pc, #116]	@ (8008fbc <prvHeapInit+0xb0>)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8008fbc <prvHeapInit+0xb0>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	4413      	add	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f58:	2208      	movs	r2, #8
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	1a9b      	subs	r3, r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f023 0307 	bic.w	r3, r3, #7
 8008f66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	4a15      	ldr	r2, [pc, #84]	@ (8008fc0 <prvHeapInit+0xb4>)
 8008f6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f6e:	4b14      	ldr	r3, [pc, #80]	@ (8008fc0 <prvHeapInit+0xb4>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2200      	movs	r2, #0
 8008f74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f76:	4b12      	ldr	r3, [pc, #72]	@ (8008fc0 <prvHeapInit+0xb4>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	1ad2      	subs	r2, r2, r3
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8008fc0 <prvHeapInit+0xb4>)
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	4a0a      	ldr	r2, [pc, #40]	@ (8008fc4 <prvHeapInit+0xb8>)
 8008f9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	4a09      	ldr	r2, [pc, #36]	@ (8008fc8 <prvHeapInit+0xbc>)
 8008fa2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fa4:	4b09      	ldr	r3, [pc, #36]	@ (8008fcc <prvHeapInit+0xc0>)
 8008fa6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008faa:	601a      	str	r2, [r3, #0]
}
 8008fac:	bf00      	nop
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	20000930 	.word	0x20000930
 8008fbc:	20004530 	.word	0x20004530
 8008fc0:	20004538 	.word	0x20004538
 8008fc4:	20004540 	.word	0x20004540
 8008fc8:	2000453c 	.word	0x2000453c
 8008fcc:	2000454c 	.word	0x2000454c

08008fd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fd8:	4b28      	ldr	r3, [pc, #160]	@ (800907c <prvInsertBlockIntoFreeList+0xac>)
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	e002      	b.n	8008fe4 <prvInsertBlockIntoFreeList+0x14>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d8f7      	bhi.n	8008fde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d108      	bne.n	8009012 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	441a      	add	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	441a      	add	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	429a      	cmp	r2, r3
 8009024:	d118      	bne.n	8009058 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	4b15      	ldr	r3, [pc, #84]	@ (8009080 <prvInsertBlockIntoFreeList+0xb0>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	429a      	cmp	r2, r3
 8009030:	d00d      	beq.n	800904e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	441a      	add	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	e008      	b.n	8009060 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800904e:	4b0c      	ldr	r3, [pc, #48]	@ (8009080 <prvInsertBlockIntoFreeList+0xb0>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	e003      	b.n	8009060 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	429a      	cmp	r2, r3
 8009066:	d002      	beq.n	800906e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800906e:	bf00      	nop
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	20004530 	.word	0x20004530
 8009080:	20004538 	.word	0x20004538

08009084 <memset>:
 8009084:	4402      	add	r2, r0
 8009086:	4603      	mov	r3, r0
 8009088:	4293      	cmp	r3, r2
 800908a:	d100      	bne.n	800908e <memset+0xa>
 800908c:	4770      	bx	lr
 800908e:	f803 1b01 	strb.w	r1, [r3], #1
 8009092:	e7f9      	b.n	8009088 <memset+0x4>

08009094 <__errno>:
 8009094:	4b01      	ldr	r3, [pc, #4]	@ (800909c <__errno+0x8>)
 8009096:	6818      	ldr	r0, [r3, #0]
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	20000018 	.word	0x20000018

080090a0 <__libc_init_array>:
 80090a0:	b570      	push	{r4, r5, r6, lr}
 80090a2:	4d0d      	ldr	r5, [pc, #52]	@ (80090d8 <__libc_init_array+0x38>)
 80090a4:	4c0d      	ldr	r4, [pc, #52]	@ (80090dc <__libc_init_array+0x3c>)
 80090a6:	1b64      	subs	r4, r4, r5
 80090a8:	10a4      	asrs	r4, r4, #2
 80090aa:	2600      	movs	r6, #0
 80090ac:	42a6      	cmp	r6, r4
 80090ae:	d109      	bne.n	80090c4 <__libc_init_array+0x24>
 80090b0:	4d0b      	ldr	r5, [pc, #44]	@ (80090e0 <__libc_init_array+0x40>)
 80090b2:	4c0c      	ldr	r4, [pc, #48]	@ (80090e4 <__libc_init_array+0x44>)
 80090b4:	f000 fa16 	bl	80094e4 <_init>
 80090b8:	1b64      	subs	r4, r4, r5
 80090ba:	10a4      	asrs	r4, r4, #2
 80090bc:	2600      	movs	r6, #0
 80090be:	42a6      	cmp	r6, r4
 80090c0:	d105      	bne.n	80090ce <__libc_init_array+0x2e>
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
 80090c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c8:	4798      	blx	r3
 80090ca:	3601      	adds	r6, #1
 80090cc:	e7ee      	b.n	80090ac <__libc_init_array+0xc>
 80090ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80090d2:	4798      	blx	r3
 80090d4:	3601      	adds	r6, #1
 80090d6:	e7f2      	b.n	80090be <__libc_init_array+0x1e>
 80090d8:	08009620 	.word	0x08009620
 80090dc:	08009620 	.word	0x08009620
 80090e0:	08009620 	.word	0x08009620
 80090e4:	08009624 	.word	0x08009624

080090e8 <log>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	ed2d 8b02 	vpush	{d8}
 80090ee:	ec55 4b10 	vmov	r4, r5, d0
 80090f2:	f000 f841 	bl	8009178 <__ieee754_log>
 80090f6:	4622      	mov	r2, r4
 80090f8:	462b      	mov	r3, r5
 80090fa:	4620      	mov	r0, r4
 80090fc:	4629      	mov	r1, r5
 80090fe:	eeb0 8a40 	vmov.f32	s16, s0
 8009102:	eef0 8a60 	vmov.f32	s17, s1
 8009106:	f7f7 fcc1 	bl	8000a8c <__aeabi_dcmpun>
 800910a:	b998      	cbnz	r0, 8009134 <log+0x4c>
 800910c:	2200      	movs	r2, #0
 800910e:	2300      	movs	r3, #0
 8009110:	4620      	mov	r0, r4
 8009112:	4629      	mov	r1, r5
 8009114:	f7f7 fcb0 	bl	8000a78 <__aeabi_dcmpgt>
 8009118:	b960      	cbnz	r0, 8009134 <log+0x4c>
 800911a:	2200      	movs	r2, #0
 800911c:	2300      	movs	r3, #0
 800911e:	4620      	mov	r0, r4
 8009120:	4629      	mov	r1, r5
 8009122:	f7f7 fc81 	bl	8000a28 <__aeabi_dcmpeq>
 8009126:	b160      	cbz	r0, 8009142 <log+0x5a>
 8009128:	f7ff ffb4 	bl	8009094 <__errno>
 800912c:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8009158 <log+0x70>
 8009130:	2322      	movs	r3, #34	@ 0x22
 8009132:	6003      	str	r3, [r0, #0]
 8009134:	eeb0 0a48 	vmov.f32	s0, s16
 8009138:	eef0 0a68 	vmov.f32	s1, s17
 800913c:	ecbd 8b02 	vpop	{d8}
 8009140:	bd38      	pop	{r3, r4, r5, pc}
 8009142:	f7ff ffa7 	bl	8009094 <__errno>
 8009146:	ecbd 8b02 	vpop	{d8}
 800914a:	2321      	movs	r3, #33	@ 0x21
 800914c:	6003      	str	r3, [r0, #0]
 800914e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009152:	4803      	ldr	r0, [pc, #12]	@ (8009160 <log+0x78>)
 8009154:	f000 b808 	b.w	8009168 <nan>
 8009158:	00000000 	.word	0x00000000
 800915c:	fff00000 	.word	0xfff00000
 8009160:	08009614 	.word	0x08009614
 8009164:	00000000 	.word	0x00000000

08009168 <nan>:
 8009168:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009170 <nan+0x8>
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	00000000 	.word	0x00000000
 8009174:	7ff80000 	.word	0x7ff80000

08009178 <__ieee754_log>:
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	ec51 0b10 	vmov	r0, r1, d0
 8009180:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8009184:	b087      	sub	sp, #28
 8009186:	460d      	mov	r5, r1
 8009188:	da26      	bge.n	80091d8 <__ieee754_log+0x60>
 800918a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800918e:	4303      	orrs	r3, r0
 8009190:	4602      	mov	r2, r0
 8009192:	d10a      	bne.n	80091aa <__ieee754_log+0x32>
 8009194:	49ce      	ldr	r1, [pc, #824]	@ (80094d0 <__ieee754_log+0x358>)
 8009196:	2200      	movs	r2, #0
 8009198:	2300      	movs	r3, #0
 800919a:	2000      	movs	r0, #0
 800919c:	f7f7 fb06 	bl	80007ac <__aeabi_ddiv>
 80091a0:	ec41 0b10 	vmov	d0, r0, r1
 80091a4:	b007      	add	sp, #28
 80091a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091aa:	2900      	cmp	r1, #0
 80091ac:	da05      	bge.n	80091ba <__ieee754_log+0x42>
 80091ae:	460b      	mov	r3, r1
 80091b0:	f7f7 f81a 	bl	80001e8 <__aeabi_dsub>
 80091b4:	2200      	movs	r2, #0
 80091b6:	2300      	movs	r3, #0
 80091b8:	e7f0      	b.n	800919c <__ieee754_log+0x24>
 80091ba:	4bc6      	ldr	r3, [pc, #792]	@ (80094d4 <__ieee754_log+0x35c>)
 80091bc:	2200      	movs	r2, #0
 80091be:	f7f7 f9cb 	bl	8000558 <__aeabi_dmul>
 80091c2:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 80091c6:	460d      	mov	r5, r1
 80091c8:	4ac3      	ldr	r2, [pc, #780]	@ (80094d8 <__ieee754_log+0x360>)
 80091ca:	4295      	cmp	r5, r2
 80091cc:	dd06      	ble.n	80091dc <__ieee754_log+0x64>
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	f7f7 f80b 	bl	80001ec <__adddf3>
 80091d6:	e7e3      	b.n	80091a0 <__ieee754_log+0x28>
 80091d8:	2300      	movs	r3, #0
 80091da:	e7f5      	b.n	80091c8 <__ieee754_log+0x50>
 80091dc:	152c      	asrs	r4, r5, #20
 80091de:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80091e2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80091e6:	441c      	add	r4, r3
 80091e8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 80091ec:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 80091f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091f4:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 80091f8:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 80091fc:	ea42 0105 	orr.w	r1, r2, r5
 8009200:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009204:	2200      	movs	r2, #0
 8009206:	4bb5      	ldr	r3, [pc, #724]	@ (80094dc <__ieee754_log+0x364>)
 8009208:	f7f6 ffee 	bl	80001e8 <__aeabi_dsub>
 800920c:	1cab      	adds	r3, r5, #2
 800920e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009212:	2b02      	cmp	r3, #2
 8009214:	4682      	mov	sl, r0
 8009216:	468b      	mov	fp, r1
 8009218:	f04f 0200 	mov.w	r2, #0
 800921c:	dc53      	bgt.n	80092c6 <__ieee754_log+0x14e>
 800921e:	2300      	movs	r3, #0
 8009220:	f7f7 fc02 	bl	8000a28 <__aeabi_dcmpeq>
 8009224:	b1d0      	cbz	r0, 800925c <__ieee754_log+0xe4>
 8009226:	2c00      	cmp	r4, #0
 8009228:	f000 8120 	beq.w	800946c <__ieee754_log+0x2f4>
 800922c:	4620      	mov	r0, r4
 800922e:	f7f7 f929 	bl	8000484 <__aeabi_i2d>
 8009232:	a391      	add	r3, pc, #580	@ (adr r3, 8009478 <__ieee754_log+0x300>)
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	4606      	mov	r6, r0
 800923a:	460f      	mov	r7, r1
 800923c:	f7f7 f98c 	bl	8000558 <__aeabi_dmul>
 8009240:	a38f      	add	r3, pc, #572	@ (adr r3, 8009480 <__ieee754_log+0x308>)
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	4604      	mov	r4, r0
 8009248:	460d      	mov	r5, r1
 800924a:	4630      	mov	r0, r6
 800924c:	4639      	mov	r1, r7
 800924e:	f7f7 f983 	bl	8000558 <__aeabi_dmul>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4620      	mov	r0, r4
 8009258:	4629      	mov	r1, r5
 800925a:	e7ba      	b.n	80091d2 <__ieee754_log+0x5a>
 800925c:	a38a      	add	r3, pc, #552	@ (adr r3, 8009488 <__ieee754_log+0x310>)
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	4650      	mov	r0, sl
 8009264:	4659      	mov	r1, fp
 8009266:	f7f7 f977 	bl	8000558 <__aeabi_dmul>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	2000      	movs	r0, #0
 8009270:	499b      	ldr	r1, [pc, #620]	@ (80094e0 <__ieee754_log+0x368>)
 8009272:	f7f6 ffb9 	bl	80001e8 <__aeabi_dsub>
 8009276:	4652      	mov	r2, sl
 8009278:	4606      	mov	r6, r0
 800927a:	460f      	mov	r7, r1
 800927c:	465b      	mov	r3, fp
 800927e:	4650      	mov	r0, sl
 8009280:	4659      	mov	r1, fp
 8009282:	f7f7 f969 	bl	8000558 <__aeabi_dmul>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	4630      	mov	r0, r6
 800928c:	4639      	mov	r1, r7
 800928e:	f7f7 f963 	bl	8000558 <__aeabi_dmul>
 8009292:	4606      	mov	r6, r0
 8009294:	460f      	mov	r7, r1
 8009296:	b914      	cbnz	r4, 800929e <__ieee754_log+0x126>
 8009298:	4632      	mov	r2, r6
 800929a:	463b      	mov	r3, r7
 800929c:	e0a0      	b.n	80093e0 <__ieee754_log+0x268>
 800929e:	4620      	mov	r0, r4
 80092a0:	f7f7 f8f0 	bl	8000484 <__aeabi_i2d>
 80092a4:	a374      	add	r3, pc, #464	@ (adr r3, 8009478 <__ieee754_log+0x300>)
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	4680      	mov	r8, r0
 80092ac:	4689      	mov	r9, r1
 80092ae:	f7f7 f953 	bl	8000558 <__aeabi_dmul>
 80092b2:	a373      	add	r3, pc, #460	@ (adr r3, 8009480 <__ieee754_log+0x308>)
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	4604      	mov	r4, r0
 80092ba:	460d      	mov	r5, r1
 80092bc:	4640      	mov	r0, r8
 80092be:	4649      	mov	r1, r9
 80092c0:	f7f7 f94a 	bl	8000558 <__aeabi_dmul>
 80092c4:	e0a5      	b.n	8009412 <__ieee754_log+0x29a>
 80092c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80092ca:	f7f6 ff8f 	bl	80001ec <__adddf3>
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	4650      	mov	r0, sl
 80092d4:	4659      	mov	r1, fp
 80092d6:	f7f7 fa69 	bl	80007ac <__aeabi_ddiv>
 80092da:	e9cd 0100 	strd	r0, r1, [sp]
 80092de:	4620      	mov	r0, r4
 80092e0:	f7f7 f8d0 	bl	8000484 <__aeabi_i2d>
 80092e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092ec:	4610      	mov	r0, r2
 80092ee:	4619      	mov	r1, r3
 80092f0:	f7f7 f932 	bl	8000558 <__aeabi_dmul>
 80092f4:	4602      	mov	r2, r0
 80092f6:	460b      	mov	r3, r1
 80092f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80092fc:	f7f7 f92c 	bl	8000558 <__aeabi_dmul>
 8009300:	a363      	add	r3, pc, #396	@ (adr r3, 8009490 <__ieee754_log+0x318>)
 8009302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009306:	4680      	mov	r8, r0
 8009308:	4689      	mov	r9, r1
 800930a:	f7f7 f925 	bl	8000558 <__aeabi_dmul>
 800930e:	a362      	add	r3, pc, #392	@ (adr r3, 8009498 <__ieee754_log+0x320>)
 8009310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009314:	f7f6 ff6a 	bl	80001ec <__adddf3>
 8009318:	4642      	mov	r2, r8
 800931a:	464b      	mov	r3, r9
 800931c:	f7f7 f91c 	bl	8000558 <__aeabi_dmul>
 8009320:	a35f      	add	r3, pc, #380	@ (adr r3, 80094a0 <__ieee754_log+0x328>)
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	f7f6 ff61 	bl	80001ec <__adddf3>
 800932a:	4642      	mov	r2, r8
 800932c:	464b      	mov	r3, r9
 800932e:	f7f7 f913 	bl	8000558 <__aeabi_dmul>
 8009332:	a35d      	add	r3, pc, #372	@ (adr r3, 80094a8 <__ieee754_log+0x330>)
 8009334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009338:	f7f6 ff58 	bl	80001ec <__adddf3>
 800933c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009340:	f7f7 f90a 	bl	8000558 <__aeabi_dmul>
 8009344:	a35a      	add	r3, pc, #360	@ (adr r3, 80094b0 <__ieee754_log+0x338>)
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800934e:	4640      	mov	r0, r8
 8009350:	4649      	mov	r1, r9
 8009352:	f7f7 f901 	bl	8000558 <__aeabi_dmul>
 8009356:	a358      	add	r3, pc, #352	@ (adr r3, 80094b8 <__ieee754_log+0x340>)
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	f7f6 ff46 	bl	80001ec <__adddf3>
 8009360:	4642      	mov	r2, r8
 8009362:	464b      	mov	r3, r9
 8009364:	f7f7 f8f8 	bl	8000558 <__aeabi_dmul>
 8009368:	a355      	add	r3, pc, #340	@ (adr r3, 80094c0 <__ieee754_log+0x348>)
 800936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936e:	f7f6 ff3d 	bl	80001ec <__adddf3>
 8009372:	4642      	mov	r2, r8
 8009374:	464b      	mov	r3, r9
 8009376:	f7f7 f8ef 	bl	8000558 <__aeabi_dmul>
 800937a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8009386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800938a:	f7f6 ff2f 	bl	80001ec <__adddf3>
 800938e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8009392:	3551      	adds	r5, #81	@ 0x51
 8009394:	4335      	orrs	r5, r6
 8009396:	2d00      	cmp	r5, #0
 8009398:	4680      	mov	r8, r0
 800939a:	4689      	mov	r9, r1
 800939c:	dd48      	ble.n	8009430 <__ieee754_log+0x2b8>
 800939e:	4b50      	ldr	r3, [pc, #320]	@ (80094e0 <__ieee754_log+0x368>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	4650      	mov	r0, sl
 80093a4:	4659      	mov	r1, fp
 80093a6:	f7f7 f8d7 	bl	8000558 <__aeabi_dmul>
 80093aa:	4652      	mov	r2, sl
 80093ac:	465b      	mov	r3, fp
 80093ae:	f7f7 f8d3 	bl	8000558 <__aeabi_dmul>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4606      	mov	r6, r0
 80093b8:	460f      	mov	r7, r1
 80093ba:	4640      	mov	r0, r8
 80093bc:	4649      	mov	r1, r9
 80093be:	f7f6 ff15 	bl	80001ec <__adddf3>
 80093c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093c6:	f7f7 f8c7 	bl	8000558 <__aeabi_dmul>
 80093ca:	4680      	mov	r8, r0
 80093cc:	4689      	mov	r9, r1
 80093ce:	b964      	cbnz	r4, 80093ea <__ieee754_log+0x272>
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4630      	mov	r0, r6
 80093d6:	4639      	mov	r1, r7
 80093d8:	f7f6 ff06 	bl	80001e8 <__aeabi_dsub>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4650      	mov	r0, sl
 80093e2:	4659      	mov	r1, fp
 80093e4:	f7f6 ff00 	bl	80001e8 <__aeabi_dsub>
 80093e8:	e6da      	b.n	80091a0 <__ieee754_log+0x28>
 80093ea:	a323      	add	r3, pc, #140	@ (adr r3, 8009478 <__ieee754_log+0x300>)
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093f4:	f7f7 f8b0 	bl	8000558 <__aeabi_dmul>
 80093f8:	a321      	add	r3, pc, #132	@ (adr r3, 8009480 <__ieee754_log+0x308>)
 80093fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fe:	4604      	mov	r4, r0
 8009400:	460d      	mov	r5, r1
 8009402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009406:	f7f7 f8a7 	bl	8000558 <__aeabi_dmul>
 800940a:	4642      	mov	r2, r8
 800940c:	464b      	mov	r3, r9
 800940e:	f7f6 feed 	bl	80001ec <__adddf3>
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	4630      	mov	r0, r6
 8009418:	4639      	mov	r1, r7
 800941a:	f7f6 fee5 	bl	80001e8 <__aeabi_dsub>
 800941e:	4652      	mov	r2, sl
 8009420:	465b      	mov	r3, fp
 8009422:	f7f6 fee1 	bl	80001e8 <__aeabi_dsub>
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	4620      	mov	r0, r4
 800942c:	4629      	mov	r1, r5
 800942e:	e7d9      	b.n	80093e4 <__ieee754_log+0x26c>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	4650      	mov	r0, sl
 8009436:	4659      	mov	r1, fp
 8009438:	f7f6 fed6 	bl	80001e8 <__aeabi_dsub>
 800943c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009440:	f7f7 f88a 	bl	8000558 <__aeabi_dmul>
 8009444:	4606      	mov	r6, r0
 8009446:	460f      	mov	r7, r1
 8009448:	2c00      	cmp	r4, #0
 800944a:	f43f af25 	beq.w	8009298 <__ieee754_log+0x120>
 800944e:	a30a      	add	r3, pc, #40	@ (adr r3, 8009478 <__ieee754_log+0x300>)
 8009450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009458:	f7f7 f87e 	bl	8000558 <__aeabi_dmul>
 800945c:	a308      	add	r3, pc, #32	@ (adr r3, 8009480 <__ieee754_log+0x308>)
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	4604      	mov	r4, r0
 8009464:	460d      	mov	r5, r1
 8009466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800946a:	e729      	b.n	80092c0 <__ieee754_log+0x148>
 800946c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80094c8 <__ieee754_log+0x350>
 8009470:	e698      	b.n	80091a4 <__ieee754_log+0x2c>
 8009472:	bf00      	nop
 8009474:	f3af 8000 	nop.w
 8009478:	fee00000 	.word	0xfee00000
 800947c:	3fe62e42 	.word	0x3fe62e42
 8009480:	35793c76 	.word	0x35793c76
 8009484:	3dea39ef 	.word	0x3dea39ef
 8009488:	55555555 	.word	0x55555555
 800948c:	3fd55555 	.word	0x3fd55555
 8009490:	df3e5244 	.word	0xdf3e5244
 8009494:	3fc2f112 	.word	0x3fc2f112
 8009498:	96cb03de 	.word	0x96cb03de
 800949c:	3fc74664 	.word	0x3fc74664
 80094a0:	94229359 	.word	0x94229359
 80094a4:	3fd24924 	.word	0x3fd24924
 80094a8:	55555593 	.word	0x55555593
 80094ac:	3fe55555 	.word	0x3fe55555
 80094b0:	d078c69f 	.word	0xd078c69f
 80094b4:	3fc39a09 	.word	0x3fc39a09
 80094b8:	1d8e78af 	.word	0x1d8e78af
 80094bc:	3fcc71c5 	.word	0x3fcc71c5
 80094c0:	9997fa04 	.word	0x9997fa04
 80094c4:	3fd99999 	.word	0x3fd99999
	...
 80094d0:	c3500000 	.word	0xc3500000
 80094d4:	43500000 	.word	0x43500000
 80094d8:	7fefffff 	.word	0x7fefffff
 80094dc:	3ff00000 	.word	0x3ff00000
 80094e0:	3fe00000 	.word	0x3fe00000

080094e4 <_init>:
 80094e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e6:	bf00      	nop
 80094e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ea:	bc08      	pop	{r3}
 80094ec:	469e      	mov	lr, r3
 80094ee:	4770      	bx	lr

080094f0 <_fini>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	bf00      	nop
 80094f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f6:	bc08      	pop	{r3}
 80094f8:	469e      	mov	lr, r3
 80094fa:	4770      	bx	lr
