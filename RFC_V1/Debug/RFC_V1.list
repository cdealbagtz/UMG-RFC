
RFC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800969c  0800969c  0000a69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097b8  080097b8  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  080097b8  080097b8  0000a7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097c0  080097c0  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097c0  080097c0  0000a7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097c4  080097c4  0000a7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080097c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004570  20000060  08009828  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045d0  08009828  0000b5d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b669  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004962  00000000  00000000  000266f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  0002b060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014a7  00000000  00000000  0002cb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cf81  00000000  00000000  0002dfaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000248a3  00000000  00000000  0004af30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7fab  00000000  00000000  0006f7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011777e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007190  00000000  00000000  001177c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0011e954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009684 	.word	0x08009684

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08009684 	.word	0x08009684

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_ldivmod>:
 8000b98:	b97b      	cbnz	r3, 8000bba <__aeabi_ldivmod+0x22>
 8000b9a:	b972      	cbnz	r2, 8000bba <__aeabi_ldivmod+0x22>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bfbe      	ittt	lt
 8000ba0:	2000      	movlt	r0, #0
 8000ba2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ba6:	e006      	blt.n	8000bb6 <__aeabi_ldivmod+0x1e>
 8000ba8:	bf08      	it	eq
 8000baa:	2800      	cmpeq	r0, #0
 8000bac:	bf1c      	itt	ne
 8000bae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb6:	f000 b9b5 	b.w	8000f24 <__aeabi_idiv0>
 8000bba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc2:	2900      	cmp	r1, #0
 8000bc4:	db09      	blt.n	8000bda <__aeabi_ldivmod+0x42>
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db1a      	blt.n	8000c00 <__aeabi_ldivmod+0x68>
 8000bca:	f000 f84d 	bl	8000c68 <__udivmoddi4>
 8000bce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd6:	b004      	add	sp, #16
 8000bd8:	4770      	bx	lr
 8000bda:	4240      	negs	r0, r0
 8000bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db1b      	blt.n	8000c1c <__aeabi_ldivmod+0x84>
 8000be4:	f000 f840 	bl	8000c68 <__udivmoddi4>
 8000be8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf0:	b004      	add	sp, #16
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	4252      	negs	r2, r2
 8000bfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bfe:	4770      	bx	lr
 8000c00:	4252      	negs	r2, r2
 8000c02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c06:	f000 f82f 	bl	8000c68 <__udivmoddi4>
 8000c0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c12:	b004      	add	sp, #16
 8000c14:	4240      	negs	r0, r0
 8000c16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c1a:	4770      	bx	lr
 8000c1c:	4252      	negs	r2, r2
 8000c1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c22:	f000 f821 	bl	8000c68 <__udivmoddi4>
 8000c26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2e:	b004      	add	sp, #16
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b96a 	b.w	8000f24 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9d08      	ldr	r5, [sp, #32]
 8000c6e:	460c      	mov	r4, r1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d14e      	bne.n	8000d12 <__udivmoddi4+0xaa>
 8000c74:	4694      	mov	ip, r2
 8000c76:	458c      	cmp	ip, r1
 8000c78:	4686      	mov	lr, r0
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	d962      	bls.n	8000d46 <__udivmoddi4+0xde>
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0320 	rsb	r3, r2, #32
 8000c86:	4091      	lsls	r1, r2
 8000c88:	fa20 f303 	lsr.w	r3, r0, r3
 8000c8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c90:	4319      	orrs	r1, r3
 8000c92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9a:	fa1f f68c 	uxth.w	r6, ip
 8000c9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb07 1114 	mls	r1, r7, r4, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb04 f106 	mul.w	r1, r4, r6
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x64>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cbe:	f080 8112 	bcs.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	f240 810f 	bls.w	8000ee6 <__udivmoddi4+0x27e>
 8000cc8:	3c02      	subs	r4, #2
 8000cca:	4463      	add	r3, ip
 8000ccc:	1a59      	subs	r1, r3, r1
 8000cce:	fa1f f38e 	uxth.w	r3, lr
 8000cd2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb00 f606 	mul.w	r6, r0, r6
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x94>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cee:	f080 80fc 	bcs.w	8000eea <__udivmoddi4+0x282>
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	f240 80f9 	bls.w	8000eea <__udivmoddi4+0x282>
 8000cf8:	4463      	add	r3, ip
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d02:	2100      	movs	r1, #0
 8000d04:	b11d      	cbz	r5, 8000d0e <__udivmoddi4+0xa6>
 8000d06:	40d3      	lsrs	r3, r2
 8000d08:	2200      	movs	r2, #0
 8000d0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d905      	bls.n	8000d22 <__udivmoddi4+0xba>
 8000d16:	b10d      	cbz	r5, 8000d1c <__udivmoddi4+0xb4>
 8000d18:	e9c5 0100 	strd	r0, r1, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e7f5      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d22:	fab3 f183 	clz	r1, r3
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d146      	bne.n	8000db8 <__udivmoddi4+0x150>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d302      	bcc.n	8000d34 <__udivmoddi4+0xcc>
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	f0c0 80f0 	bcc.w	8000f14 <__udivmoddi4+0x2ac>
 8000d34:	1a86      	subs	r6, r0, r2
 8000d36:	eb64 0303 	sbc.w	r3, r4, r3
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	2d00      	cmp	r5, #0
 8000d3e:	d0e6      	beq.n	8000d0e <__udivmoddi4+0xa6>
 8000d40:	e9c5 6300 	strd	r6, r3, [r5]
 8000d44:	e7e3      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	f040 8090 	bne.w	8000e6c <__udivmoddi4+0x204>
 8000d4c:	eba1 040c 	sub.w	r4, r1, ip
 8000d50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb08 4416 	mls	r4, r8, r6, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb07 f006 	mul.w	r0, r7, r6
 8000d6e:	4298      	cmp	r0, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x11c>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x11a>
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	f200 80cd 	bhi.w	8000f1c <__udivmoddi4+0x2b4>
 8000d82:	4626      	mov	r6, r4
 8000d84:	1a1c      	subs	r4, r3, r0
 8000d86:	fa1f f38e 	uxth.w	r3, lr
 8000d8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d96:	fb00 f707 	mul.w	r7, r0, r7
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x148>
 8000d9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000da2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x146>
 8000da8:	429f      	cmp	r7, r3
 8000daa:	f200 80b0 	bhi.w	8000f0e <__udivmoddi4+0x2a6>
 8000dae:	4620      	mov	r0, r4
 8000db0:	1bdb      	subs	r3, r3, r7
 8000db2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db6:	e7a5      	b.n	8000d04 <__udivmoddi4+0x9c>
 8000db8:	f1c1 0620 	rsb	r6, r1, #32
 8000dbc:	408b      	lsls	r3, r1
 8000dbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dcc:	ea43 030c 	orr.w	r3, r3, ip
 8000dd0:	40f4      	lsrs	r4, r6
 8000dd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dd6:	0c38      	lsrs	r0, r7, #16
 8000dd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ddc:	fbb4 fef0 	udiv	lr, r4, r0
 8000de0:	fa1f fc87 	uxth.w	ip, r7
 8000de4:	fb00 441e 	mls	r4, r0, lr, r4
 8000de8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dec:	fb0e f90c 	mul.w	r9, lr, ip
 8000df0:	45a1      	cmp	r9, r4
 8000df2:	fa02 f201 	lsl.w	r2, r2, r1
 8000df6:	d90a      	bls.n	8000e0e <__udivmoddi4+0x1a6>
 8000df8:	193c      	adds	r4, r7, r4
 8000dfa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dfe:	f080 8084 	bcs.w	8000f0a <__udivmoddi4+0x2a2>
 8000e02:	45a1      	cmp	r9, r4
 8000e04:	f240 8081 	bls.w	8000f0a <__udivmoddi4+0x2a2>
 8000e08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	eba4 0409 	sub.w	r4, r4, r9
 8000e12:	fa1f f983 	uxth.w	r9, r3
 8000e16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e26:	45a4      	cmp	ip, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x1d2>
 8000e2a:	193c      	adds	r4, r7, r4
 8000e2c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e30:	d267      	bcs.n	8000f02 <__udivmoddi4+0x29a>
 8000e32:	45a4      	cmp	ip, r4
 8000e34:	d965      	bls.n	8000f02 <__udivmoddi4+0x29a>
 8000e36:	3b02      	subs	r3, #2
 8000e38:	443c      	add	r4, r7
 8000e3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e42:	eba4 040c 	sub.w	r4, r4, ip
 8000e46:	429c      	cmp	r4, r3
 8000e48:	46ce      	mov	lr, r9
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	d351      	bcc.n	8000ef2 <__udivmoddi4+0x28a>
 8000e4e:	d04e      	beq.n	8000eee <__udivmoddi4+0x286>
 8000e50:	b155      	cbz	r5, 8000e68 <__udivmoddi4+0x200>
 8000e52:	ebb8 030e 	subs.w	r3, r8, lr
 8000e56:	eb64 040c 	sbc.w	r4, r4, ip
 8000e5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431e      	orrs	r6, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	e9c5 6400 	strd	r6, r4, [r5]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e750      	b.n	8000d0e <__udivmoddi4+0xa6>
 8000e6c:	f1c2 0320 	rsb	r3, r2, #32
 8000e70:	fa20 f103 	lsr.w	r1, r0, r3
 8000e74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e78:	fa24 f303 	lsr.w	r3, r4, r3
 8000e7c:	4094      	lsls	r4, r2
 8000e7e:	430c      	orrs	r4, r1
 8000e80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e88:	fa1f f78c 	uxth.w	r7, ip
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3110 	mls	r1, r8, r0, r3
 8000e94:	0c23      	lsrs	r3, r4, #16
 8000e96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e9a:	fb00 f107 	mul.w	r1, r0, r7
 8000e9e:	4299      	cmp	r1, r3
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x24c>
 8000ea2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eaa:	d22c      	bcs.n	8000f06 <__udivmoddi4+0x29e>
 8000eac:	4299      	cmp	r1, r3
 8000eae:	d92a      	bls.n	8000f06 <__udivmoddi4+0x29e>
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	4463      	add	r3, ip
 8000eb4:	1a5b      	subs	r3, r3, r1
 8000eb6:	b2a4      	uxth	r4, r4
 8000eb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ebc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ec4:	fb01 f307 	mul.w	r3, r1, r7
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <__udivmoddi4+0x276>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ed4:	d213      	bcs.n	8000efe <__udivmoddi4+0x296>
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	d911      	bls.n	8000efe <__udivmoddi4+0x296>
 8000eda:	3902      	subs	r1, #2
 8000edc:	4464      	add	r4, ip
 8000ede:	1ae4      	subs	r4, r4, r3
 8000ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ee4:	e739      	b.n	8000d5a <__udivmoddi4+0xf2>
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	e6f0      	b.n	8000ccc <__udivmoddi4+0x64>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e706      	b.n	8000cfc <__udivmoddi4+0x94>
 8000eee:	45c8      	cmp	r8, r9
 8000ef0:	d2ae      	bcs.n	8000e50 <__udivmoddi4+0x1e8>
 8000ef2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ef6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000efa:	3801      	subs	r0, #1
 8000efc:	e7a8      	b.n	8000e50 <__udivmoddi4+0x1e8>
 8000efe:	4631      	mov	r1, r6
 8000f00:	e7ed      	b.n	8000ede <__udivmoddi4+0x276>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e799      	b.n	8000e3a <__udivmoddi4+0x1d2>
 8000f06:	4630      	mov	r0, r6
 8000f08:	e7d4      	b.n	8000eb4 <__udivmoddi4+0x24c>
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	e77f      	b.n	8000e0e <__udivmoddi4+0x1a6>
 8000f0e:	4463      	add	r3, ip
 8000f10:	3802      	subs	r0, #2
 8000f12:	e74d      	b.n	8000db0 <__udivmoddi4+0x148>
 8000f14:	4606      	mov	r6, r0
 8000f16:	4623      	mov	r3, r4
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e70f      	b.n	8000d3c <__udivmoddi4+0xd4>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	e730      	b.n	8000d84 <__udivmoddi4+0x11c>
 8000f22:	bf00      	nop

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <BMP280_write>:
uint16_t dig_T1, dig_P1;
int16_t  dig_T2, dig_T3, dig_P2,dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

int32_t T_raw, P_raw, t_fine;

void BMP280_write(uint8_t Address, uint8_t Data){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	4613      	mov	r3, r2
 8000f36:	71bb      	strb	r3, [r7, #6]
	BMP280_select();
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <BMP280_write+0x50>)
 8000f3e:	f003 fe31 	bl	8004ba4 <HAL_GPIO_WritePin>
	Address &= 0x7F;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8000f4c:	1df9      	adds	r1, r7, #7
 8000f4e:	2364      	movs	r3, #100	@ 0x64
 8000f50:	2201      	movs	r2, #1
 8000f52:	480a      	ldr	r0, [pc, #40]	@ (8000f7c <BMP280_write+0x54>)
 8000f54:	f005 fb77 	bl	8006646 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_BMP280, &Data, 1, 100);
 8000f58:	1db9      	adds	r1, r7, #6
 8000f5a:	2364      	movs	r3, #100	@ 0x64
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <BMP280_write+0x54>)
 8000f60:	f005 fb71 	bl	8006646 <HAL_SPI_Transmit>

	BMP280_unselect();
 8000f64:	2201      	movs	r2, #1
 8000f66:	2104      	movs	r1, #4
 8000f68:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <BMP280_write+0x50>)
 8000f6a:	f003 fe1b 	bl	8004ba4 <HAL_GPIO_WritePin>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	20000538 	.word	0x20000538

08000f80 <BMP280_read>:

uint8_t BMP280_read(uint8_t Address){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer = (Address|0x80);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	73fb      	strb	r3, [r7, #15]
	BMP280_select();
 8000f94:	2200      	movs	r2, #0
 8000f96:	2104      	movs	r1, #4
 8000f98:	480f      	ldr	r0, [pc, #60]	@ (8000fd8 <BMP280_read+0x58>)
 8000f9a:	f003 fe03 	bl	8004ba4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Buffer, 1, 100);
 8000f9e:	f107 010f 	add.w	r1, r7, #15
 8000fa2:	2364      	movs	r3, #100	@ 0x64
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	480d      	ldr	r0, [pc, #52]	@ (8000fdc <BMP280_read+0x5c>)
 8000fa8:	f005 fb4d 	bl	8006646 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, &Buffer, 1, 100);
 8000fac:	f107 010f 	add.w	r1, r7, #15
 8000fb0:	2364      	movs	r3, #100	@ 0x64
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4809      	ldr	r0, [pc, #36]	@ (8000fdc <BMP280_read+0x5c>)
 8000fb6:	f005 fc8a 	bl	80068ce <HAL_SPI_Receive>
	BMP280_unselect();
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4806      	ldr	r0, [pc, #24]	@ (8000fd8 <BMP280_read+0x58>)
 8000fc0:	f003 fdf0 	bl	8004ba4 <HAL_GPIO_WritePin>

	BMP280.Temp = 2500;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <BMP280_read+0x60>)
 8000fc6:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000fca:	605a      	str	r2, [r3, #4]

	return Buffer;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	20000538 	.word	0x20000538
 8000fe0:	2000007c 	.word	0x2000007c

08000fe4 <BMP280_config>:

void BMP280_config(void){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	BMP280_write(ctrl_meas, 0x57);
 8000fe8:	2157      	movs	r1, #87	@ 0x57
 8000fea:	20f4      	movs	r0, #244	@ 0xf4
 8000fec:	f7ff ff9c 	bl	8000f28 <BMP280_write>
	BMP280_write(config, 0x10);
 8000ff0:	2110      	movs	r1, #16
 8000ff2:	20f5      	movs	r0, #245	@ 0xf5
 8000ff4:	f7ff ff98 	bl	8000f28 <BMP280_write>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <BMP280_calibrationData>:

void BMP280_reset(void){
	BMP280_write(reset, 0xB6);
}

void BMP280_calibrationData(void){
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
	uint8_t Address = 0x88;
 8001002:	2388      	movs	r3, #136	@ 0x88
 8001004:	77fb      	strb	r3, [r7, #31]
	uint8_t Buffer[24] = {0};
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
	BMP280_select();
 800101a:	2200      	movs	r2, #0
 800101c:	2104      	movs	r1, #4
 800101e:	4843      	ldr	r0, [pc, #268]	@ (800112c <BMP280_calibrationData+0x130>)
 8001020:	f003 fdc0 	bl	8004ba4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8001024:	f107 011f 	add.w	r1, r7, #31
 8001028:	2364      	movs	r3, #100	@ 0x64
 800102a:	2201      	movs	r2, #1
 800102c:	4840      	ldr	r0, [pc, #256]	@ (8001130 <BMP280_calibrationData+0x134>)
 800102e:	f005 fb0a 	bl	8006646 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 24, 100);
 8001032:	1d39      	adds	r1, r7, #4
 8001034:	2364      	movs	r3, #100	@ 0x64
 8001036:	2218      	movs	r2, #24
 8001038:	483d      	ldr	r0, [pc, #244]	@ (8001130 <BMP280_calibrationData+0x134>)
 800103a:	f005 fc48 	bl	80068ce <HAL_SPI_Receive>
	BMP280_unselect();
 800103e:	2201      	movs	r2, #1
 8001040:	2104      	movs	r1, #4
 8001042:	483a      	ldr	r0, [pc, #232]	@ (800112c <BMP280_calibrationData+0x130>)
 8001044:	f003 fdae 	bl	8004ba4 <HAL_GPIO_WritePin>

	dig_T1 = (Buffer[1]<<8)|Buffer[0];
 8001048:	797b      	ldrb	r3, [r7, #5]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	793b      	ldrb	r3, [r7, #4]
 8001050:	b21b      	sxth	r3, r3
 8001052:	4313      	orrs	r3, r2
 8001054:	b21b      	sxth	r3, r3
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b36      	ldr	r3, [pc, #216]	@ (8001134 <BMP280_calibrationData+0x138>)
 800105a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (Buffer[3]<<8)|Buffer[2];
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	b21a      	sxth	r2, r3
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	b21b      	sxth	r3, r3
 8001066:	4313      	orrs	r3, r2
 8001068:	b21a      	sxth	r2, r3
 800106a:	4b33      	ldr	r3, [pc, #204]	@ (8001138 <BMP280_calibrationData+0x13c>)
 800106c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (Buffer[5]<<8)|Buffer[4];
 800106e:	7a7b      	ldrb	r3, [r7, #9]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	7a3b      	ldrb	r3, [r7, #8]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21a      	sxth	r2, r3
 800107c:	4b2f      	ldr	r3, [pc, #188]	@ (800113c <BMP280_calibrationData+0x140>)
 800107e:	801a      	strh	r2, [r3, #0]

	dig_P1 = (Buffer[7]<<8)|Buffer[6];
 8001080:	7afb      	ldrb	r3, [r7, #11]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	b21a      	sxth	r2, r3
 8001086:	7abb      	ldrb	r3, [r7, #10]
 8001088:	b21b      	sxth	r3, r3
 800108a:	4313      	orrs	r3, r2
 800108c:	b21b      	sxth	r3, r3
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b2b      	ldr	r3, [pc, #172]	@ (8001140 <BMP280_calibrationData+0x144>)
 8001092:	801a      	strh	r2, [r3, #0]
	dig_P2 = (Buffer[9]<<8)|Buffer[8];
 8001094:	7b7b      	ldrb	r3, [r7, #13]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b21a      	sxth	r2, r3
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	4b28      	ldr	r3, [pc, #160]	@ (8001144 <BMP280_calibrationData+0x148>)
 80010a4:	801a      	strh	r2, [r3, #0]
	dig_P3 = (Buffer[11]<<8)|Buffer[10];
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	4313      	orrs	r3, r2
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	4b24      	ldr	r3, [pc, #144]	@ (8001148 <BMP280_calibrationData+0x14c>)
 80010b6:	801a      	strh	r2, [r3, #0]
	dig_P4 = (Buffer[13]<<8)|Buffer[12];
 80010b8:	7c7b      	ldrb	r3, [r7, #17]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	7c3b      	ldrb	r3, [r7, #16]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	4b21      	ldr	r3, [pc, #132]	@ (800114c <BMP280_calibrationData+0x150>)
 80010c8:	801a      	strh	r2, [r3, #0]
	dig_P5 = (Buffer[15]<<8)|Buffer[14];
 80010ca:	7cfb      	ldrb	r3, [r7, #19]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	7cbb      	ldrb	r3, [r7, #18]
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <BMP280_calibrationData+0x154>)
 80010da:	801a      	strh	r2, [r3, #0]
	dig_P6 = (Buffer[17]<<8)|Buffer[16];
 80010dc:	7d7b      	ldrb	r3, [r7, #21]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	7d3b      	ldrb	r3, [r7, #20]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <BMP280_calibrationData+0x158>)
 80010ec:	801a      	strh	r2, [r3, #0]
	dig_P7 = (Buffer[19]<<8)|Buffer[18];
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	7dbb      	ldrb	r3, [r7, #22]
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <BMP280_calibrationData+0x15c>)
 80010fe:	801a      	strh	r2, [r3, #0]
	dig_P8 = (Buffer[21]<<8)|Buffer[20];
 8001100:	7e7b      	ldrb	r3, [r7, #25]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b21a      	sxth	r2, r3
 8001106:	7e3b      	ldrb	r3, [r7, #24]
 8001108:	b21b      	sxth	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	b21a      	sxth	r2, r3
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <BMP280_calibrationData+0x160>)
 8001110:	801a      	strh	r2, [r3, #0]
	dig_P9 = (Buffer[23]<<8)|Buffer[22];
 8001112:	7efb      	ldrb	r3, [r7, #27]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21a      	sxth	r2, r3
 8001118:	7ebb      	ldrb	r3, [r7, #26]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21a      	sxth	r2, r3
 8001120:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <BMP280_calibrationData+0x164>)
 8001122:	801a      	strh	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40020400 	.word	0x40020400
 8001130:	20000538 	.word	0x20000538
 8001134:	20000090 	.word	0x20000090
 8001138:	20000094 	.word	0x20000094
 800113c:	20000096 	.word	0x20000096
 8001140:	20000092 	.word	0x20000092
 8001144:	20000098 	.word	0x20000098
 8001148:	2000009a 	.word	0x2000009a
 800114c:	2000009c 	.word	0x2000009c
 8001150:	2000009e 	.word	0x2000009e
 8001154:	200000a0 	.word	0x200000a0
 8001158:	200000a2 	.word	0x200000a2
 800115c:	200000a4 	.word	0x200000a4
 8001160:	200000a6 	.word	0x200000a6

08001164 <BMP280_readRawValues>:

void BMP280_readRawValues(void){
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
	uint8_t Address = press_msb;
 800116a:	23f7      	movs	r3, #247	@ 0xf7
 800116c:	71fb      	strb	r3, [r7, #7]
	uint8_t Buffer[6] = {0};
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	2300      	movs	r3, #0
 8001174:	80bb      	strh	r3, [r7, #4]
	BMP280_select();
 8001176:	2200      	movs	r2, #0
 8001178:	2104      	movs	r1, #4
 800117a:	4817      	ldr	r0, [pc, #92]	@ (80011d8 <BMP280_readRawValues+0x74>)
 800117c:	f003 fd12 	bl	8004ba4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(SPI_BMP280, &Address, 1, 100);
 8001180:	1df9      	adds	r1, r7, #7
 8001182:	2364      	movs	r3, #100	@ 0x64
 8001184:	2201      	movs	r2, #1
 8001186:	4815      	ldr	r0, [pc, #84]	@ (80011dc <BMP280_readRawValues+0x78>)
 8001188:	f005 fa5d 	bl	8006646 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_BMP280, Buffer, 6, 100);
 800118c:	4639      	mov	r1, r7
 800118e:	2364      	movs	r3, #100	@ 0x64
 8001190:	2206      	movs	r2, #6
 8001192:	4812      	ldr	r0, [pc, #72]	@ (80011dc <BMP280_readRawValues+0x78>)
 8001194:	f005 fb9b 	bl	80068ce <HAL_SPI_Receive>
	BMP280_unselect();
 8001198:	2201      	movs	r2, #1
 800119a:	2104      	movs	r1, #4
 800119c:	480e      	ldr	r0, [pc, #56]	@ (80011d8 <BMP280_readRawValues+0x74>)
 800119e:	f003 fd01 	bl	8004ba4 <HAL_GPIO_WritePin>

	P_raw = (Buffer[0]<<12)|(Buffer[1]<<4)|(Buffer[2]>>4);
 80011a2:	783b      	ldrb	r3, [r7, #0]
 80011a4:	031a      	lsls	r2, r3, #12
 80011a6:	787b      	ldrb	r3, [r7, #1]
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4313      	orrs	r3, r2
 80011ac:	78ba      	ldrb	r2, [r7, #2]
 80011ae:	0912      	lsrs	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	4313      	orrs	r3, r2
 80011b4:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <BMP280_readRawValues+0x7c>)
 80011b6:	6013      	str	r3, [r2, #0]
	T_raw = (Buffer[3]<<12)|(Buffer[4]<<4)|(Buffer[5]>>4);
 80011b8:	78fb      	ldrb	r3, [r7, #3]
 80011ba:	031a      	lsls	r2, r3, #12
 80011bc:	793b      	ldrb	r3, [r7, #4]
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	4313      	orrs	r3, r2
 80011c2:	797a      	ldrb	r2, [r7, #5]
 80011c4:	0912      	lsrs	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	4313      	orrs	r3, r2
 80011ca:	4a06      	ldr	r2, [pc, #24]	@ (80011e4 <BMP280_readRawValues+0x80>)
 80011cc:	6013      	str	r3, [r2, #0]
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40020400 	.word	0x40020400
 80011dc:	20000538 	.word	0x20000538
 80011e0:	200000ac 	.word	0x200000ac
 80011e4:	200000a8 	.word	0x200000a8

080011e8 <BMP280_measureT>:

int32_t BMP280_measureT(int32_t adc_T){
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 =  ((((T_raw>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <BMP280_measureT+0x74>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	10da      	asrs	r2, r3, #3
 80011f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <BMP280_measureT+0x78>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	4a19      	ldr	r2, [pc, #100]	@ (8001264 <BMP280_measureT+0x7c>)
 8001200:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	12db      	asrs	r3, r3, #11
 800120a:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1))) >> 12) * ((int32_t)dig_T3)) >> 14;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	111b      	asrs	r3, r3, #4
 8001210:	4a13      	ldr	r2, [pc, #76]	@ (8001260 <BMP280_measureT+0x78>)
 8001212:	8812      	ldrh	r2, [r2, #0]
 8001214:	1a9b      	subs	r3, r3, r2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	1112      	asrs	r2, r2, #4
 800121a:	4911      	ldr	r1, [pc, #68]	@ (8001260 <BMP280_measureT+0x78>)
 800121c:	8809      	ldrh	r1, [r1, #0]
 800121e:	1a52      	subs	r2, r2, r1
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	131b      	asrs	r3, r3, #12
 8001226:	4a10      	ldr	r2, [pc, #64]	@ (8001268 <BMP280_measureT+0x80>)
 8001228:	f9b2 2000 	ldrsh.w	r2, [r2]
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	139b      	asrs	r3, r3, #14
 8001232:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001234:	697a      	ldr	r2, [r7, #20]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4413      	add	r3, r2
 800123a:	4a0c      	ldr	r2, [pc, #48]	@ (800126c <BMP280_measureT+0x84>)
 800123c:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800123e:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <BMP280_measureT+0x84>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	3380      	adds	r3, #128	@ 0x80
 800124a:	121b      	asrs	r3, r3, #8
 800124c:	60fb      	str	r3, [r7, #12]
	return T;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	371c      	adds	r7, #28
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	200000a8 	.word	0x200000a8
 8001260:	20000090 	.word	0x20000090
 8001264:	20000094 	.word	0x20000094
 8001268:	20000096 	.word	0x20000096
 800126c:	200000b0 	.word	0x200000b0

08001270 <BMP280_measureP>:

uint32_t BMP280_measureP(int32_t adc_P){
 8001270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001274:	b0ca      	sub	sp, #296	@ 0x128
 8001276:	af00      	add	r7, sp, #0
 8001278:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800127c:	4baf      	ldr	r3, [pc, #700]	@ (800153c <BMP280_measureP+0x2cc>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	17da      	asrs	r2, r3, #31
 8001282:	461c      	mov	r4, r3
 8001284:	4615      	mov	r5, r2
 8001286:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800128a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800128e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001292:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001296:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800129a:	fb03 f102 	mul.w	r1, r3, r2
 800129e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80012a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012a6:	fb02 f303 	mul.w	r3, r2, r3
 80012aa:	18ca      	adds	r2, r1, r3
 80012ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012b0:	fba3 8903 	umull	r8, r9, r3, r3
 80012b4:	eb02 0309 	add.w	r3, r2, r9
 80012b8:	4699      	mov	r9, r3
 80012ba:	4ba1      	ldr	r3, [pc, #644]	@ (8001540 <BMP280_measureP+0x2d0>)
 80012bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	17da      	asrs	r2, r3, #31
 80012c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80012c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80012cc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80012d0:	4603      	mov	r3, r0
 80012d2:	fb03 f209 	mul.w	r2, r3, r9
 80012d6:	460b      	mov	r3, r1
 80012d8:	fb08 f303 	mul.w	r3, r8, r3
 80012dc:	4413      	add	r3, r2
 80012de:	4602      	mov	r2, r0
 80012e0:	fba8 1202 	umull	r1, r2, r8, r2
 80012e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80012e8:	460a      	mov	r2, r1
 80012ea:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80012ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80012f2:	4413      	add	r3, r2
 80012f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80012f8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80012fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8001300:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001304:	4b8f      	ldr	r3, [pc, #572]	@ (8001544 <BMP280_measureP+0x2d4>)
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	b21b      	sxth	r3, r3
 800130c:	17da      	asrs	r2, r3, #31
 800130e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001312:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001316:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800131a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800131e:	462a      	mov	r2, r5
 8001320:	fb02 f203 	mul.w	r2, r2, r3
 8001324:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001328:	4621      	mov	r1, r4
 800132a:	fb01 f303 	mul.w	r3, r1, r3
 800132e:	441a      	add	r2, r3
 8001330:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001334:	4621      	mov	r1, r4
 8001336:	fba3 1301 	umull	r1, r3, r3, r1
 800133a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800133e:	460b      	mov	r3, r1
 8001340:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001348:	18d3      	adds	r3, r2, r3
 800134a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800134e:	f04f 0000 	mov.w	r0, #0
 8001352:	f04f 0100 	mov.w	r1, #0
 8001356:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800135a:	462b      	mov	r3, r5
 800135c:	0459      	lsls	r1, r3, #17
 800135e:	4623      	mov	r3, r4
 8001360:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001364:	4623      	mov	r3, r4
 8001366:	0458      	lsls	r0, r3, #17
 8001368:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800136c:	1814      	adds	r4, r2, r0
 800136e:	643c      	str	r4, [r7, #64]	@ 0x40
 8001370:	414b      	adcs	r3, r1
 8001372:	647b      	str	r3, [r7, #68]	@ 0x44
 8001374:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001378:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 800137c:	4b72      	ldr	r3, [pc, #456]	@ (8001548 <BMP280_measureP+0x2d8>)
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	b21b      	sxth	r3, r3
 8001384:	17da      	asrs	r2, r3, #31
 8001386:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800138a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800138e:	f04f 0000 	mov.w	r0, #0
 8001392:	f04f 0100 	mov.w	r1, #0
 8001396:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800139a:	00d9      	lsls	r1, r3, #3
 800139c:	2000      	movs	r0, #0
 800139e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80013a2:	1814      	adds	r4, r2, r0
 80013a4:	63bc      	str	r4, [r7, #56]	@ 0x38
 80013a6:	414b      	adcs	r3, r1
 80013a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013aa:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80013ae:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80013b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013ba:	fb03 f102 	mul.w	r1, r3, r2
 80013be:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
 80013ca:	18ca      	adds	r2, r1, r3
 80013cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013d0:	fba3 1303 	umull	r1, r3, r3, r3
 80013d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013d8:	460b      	mov	r3, r1
 80013da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80013de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80013e2:	18d3      	adds	r3, r2, r3
 80013e4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013e8:	4b58      	ldr	r3, [pc, #352]	@ (800154c <BMP280_measureP+0x2dc>)
 80013ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	17da      	asrs	r2, r3, #31
 80013f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80013f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80013fa:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80013fe:	462b      	mov	r3, r5
 8001400:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001404:	4642      	mov	r2, r8
 8001406:	fb02 f203 	mul.w	r2, r2, r3
 800140a:	464b      	mov	r3, r9
 800140c:	4621      	mov	r1, r4
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	4413      	add	r3, r2
 8001414:	4622      	mov	r2, r4
 8001416:	4641      	mov	r1, r8
 8001418:	fba2 1201 	umull	r1, r2, r2, r1
 800141c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001420:	460a      	mov	r2, r1
 8001422:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001426:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800142a:	4413      	add	r3, r2
 800142c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001430:	f04f 0000 	mov.w	r0, #0
 8001434:	f04f 0100 	mov.w	r1, #0
 8001438:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800143c:	4623      	mov	r3, r4
 800143e:	0a18      	lsrs	r0, r3, #8
 8001440:	462b      	mov	r3, r5
 8001442:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001446:	462b      	mov	r3, r5
 8001448:	1219      	asrs	r1, r3, #8
 800144a:	4b41      	ldr	r3, [pc, #260]	@ (8001550 <BMP280_measureP+0x2e0>)
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	b21b      	sxth	r3, r3
 8001452:	17da      	asrs	r2, r3, #31
 8001454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001458:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800145c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001460:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001464:	464a      	mov	r2, r9
 8001466:	fb02 f203 	mul.w	r2, r2, r3
 800146a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800146e:	4644      	mov	r4, r8
 8001470:	fb04 f303 	mul.w	r3, r4, r3
 8001474:	441a      	add	r2, r3
 8001476:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800147a:	4644      	mov	r4, r8
 800147c:	fba3 4304 	umull	r4, r3, r3, r4
 8001480:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001484:	4623      	mov	r3, r4
 8001486:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800148a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800148e:	18d3      	adds	r3, r2, r3
 8001490:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80014a0:	464c      	mov	r4, r9
 80014a2:	0323      	lsls	r3, r4, #12
 80014a4:	4644      	mov	r4, r8
 80014a6:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80014aa:	4644      	mov	r4, r8
 80014ac:	0322      	lsls	r2, r4, #12
 80014ae:	1884      	adds	r4, r0, r2
 80014b0:	633c      	str	r4, [r7, #48]	@ 0x30
 80014b2:	eb41 0303 	adc.w	r3, r1, r3
 80014b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80014b8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80014bc:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80014c0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014c4:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80014c8:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80014cc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80014d0:	4b20      	ldr	r3, [pc, #128]	@ (8001554 <BMP280_measureP+0x2e4>)
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	2200      	movs	r2, #0
 80014d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014e0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014e4:	462b      	mov	r3, r5
 80014e6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80014ea:	4642      	mov	r2, r8
 80014ec:	fb02 f203 	mul.w	r2, r2, r3
 80014f0:	464b      	mov	r3, r9
 80014f2:	4621      	mov	r1, r4
 80014f4:	fb01 f303 	mul.w	r3, r1, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	4622      	mov	r2, r4
 80014fc:	4641      	mov	r1, r8
 80014fe:	fba2 1201 	umull	r1, r2, r2, r1
 8001502:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001506:	460a      	mov	r2, r1
 8001508:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800150c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001510:	4413      	add	r3, r2
 8001512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	f04f 0300 	mov.w	r3, #0
 800151e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001522:	4629      	mov	r1, r5
 8001524:	104a      	asrs	r2, r1, #1
 8001526:	4629      	mov	r1, r5
 8001528:	17cb      	asrs	r3, r1, #31
 800152a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 800152e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001532:	4313      	orrs	r3, r2
 8001534:	d110      	bne.n	8001558 <BMP280_measureP+0x2e8>
	{
	return 0;
 8001536:	2300      	movs	r3, #0
 8001538:	e154      	b.n	80017e4 <BMP280_measureP+0x574>
 800153a:	bf00      	nop
 800153c:	200000b0 	.word	0x200000b0
 8001540:	200000a0 	.word	0x200000a0
 8001544:	2000009e 	.word	0x2000009e
 8001548:	2000009c 	.word	0x2000009c
 800154c:	2000009a 	.word	0x2000009a
 8001550:	20000098 	.word	0x20000098
 8001554:	20000092 	.word	0x20000092
	}
	p = 1048576-adc_P;
 8001558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800155c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001560:	17da      	asrs	r2, r3, #31
 8001562:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001564:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001566:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800156a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800156e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001572:	105b      	asrs	r3, r3, #1
 8001574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001578:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800157c:	07db      	lsls	r3, r3, #31
 800157e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001582:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001586:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800158a:	4621      	mov	r1, r4
 800158c:	1a89      	subs	r1, r1, r2
 800158e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001590:	4629      	mov	r1, r5
 8001592:	eb61 0303 	sbc.w	r3, r1, r3
 8001596:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001598:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800159c:	4622      	mov	r2, r4
 800159e:	462b      	mov	r3, r5
 80015a0:	1891      	adds	r1, r2, r2
 80015a2:	6239      	str	r1, [r7, #32]
 80015a4:	415b      	adcs	r3, r3
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015ac:	4621      	mov	r1, r4
 80015ae:	1851      	adds	r1, r2, r1
 80015b0:	61b9      	str	r1, [r7, #24]
 80015b2:	4629      	mov	r1, r5
 80015b4:	414b      	adcs	r3, r1
 80015b6:	61fb      	str	r3, [r7, #28]
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80015c4:	4649      	mov	r1, r9
 80015c6:	018b      	lsls	r3, r1, #6
 80015c8:	4641      	mov	r1, r8
 80015ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015ce:	4641      	mov	r1, r8
 80015d0:	018a      	lsls	r2, r1, #6
 80015d2:	4641      	mov	r1, r8
 80015d4:	1889      	adds	r1, r1, r2
 80015d6:	6139      	str	r1, [r7, #16]
 80015d8:	4649      	mov	r1, r9
 80015da:	eb43 0101 	adc.w	r1, r3, r1
 80015de:	6179      	str	r1, [r7, #20]
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015ec:	4649      	mov	r1, r9
 80015ee:	008b      	lsls	r3, r1, #2
 80015f0:	4641      	mov	r1, r8
 80015f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015f6:	4641      	mov	r1, r8
 80015f8:	008a      	lsls	r2, r1, #2
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	4603      	mov	r3, r0
 8001600:	4622      	mov	r2, r4
 8001602:	189b      	adds	r3, r3, r2
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	460b      	mov	r3, r1
 8001608:	462a      	mov	r2, r5
 800160a:	eb42 0303 	adc.w	r3, r2, r3
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800161c:	4649      	mov	r1, r9
 800161e:	008b      	lsls	r3, r1, #2
 8001620:	4641      	mov	r1, r8
 8001622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001626:	4641      	mov	r1, r8
 8001628:	008a      	lsls	r2, r1, #2
 800162a:	4610      	mov	r0, r2
 800162c:	4619      	mov	r1, r3
 800162e:	4603      	mov	r3, r0
 8001630:	4622      	mov	r2, r4
 8001632:	189b      	adds	r3, r3, r2
 8001634:	673b      	str	r3, [r7, #112]	@ 0x70
 8001636:	462b      	mov	r3, r5
 8001638:	460a      	mov	r2, r1
 800163a:	eb42 0303 	adc.w	r3, r2, r3
 800163e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001640:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001644:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001648:	f7ff faa6 	bl	8000b98 <__aeabi_ldivmod>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001654:	4b66      	ldr	r3, [pc, #408]	@ (80017f0 <BMP280_measureP+0x580>)
 8001656:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165a:	b21b      	sxth	r3, r3
 800165c:	17da      	asrs	r2, r3, #31
 800165e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001660:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001662:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001666:	f04f 0000 	mov.w	r0, #0
 800166a:	f04f 0100 	mov.w	r1, #0
 800166e:	0b50      	lsrs	r0, r2, #13
 8001670:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001674:	1359      	asrs	r1, r3, #13
 8001676:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800167a:	462b      	mov	r3, r5
 800167c:	fb00 f203 	mul.w	r2, r0, r3
 8001680:	4623      	mov	r3, r4
 8001682:	fb03 f301 	mul.w	r3, r3, r1
 8001686:	4413      	add	r3, r2
 8001688:	4622      	mov	r2, r4
 800168a:	fba2 1200 	umull	r1, r2, r2, r0
 800168e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001692:	460a      	mov	r2, r1
 8001694:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001698:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800169c:	4413      	add	r3, r2
 800169e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80016a2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80016a6:	f04f 0000 	mov.w	r0, #0
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	0b50      	lsrs	r0, r2, #13
 80016b0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80016b4:	1359      	asrs	r1, r3, #13
 80016b6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80016ba:	462b      	mov	r3, r5
 80016bc:	fb00 f203 	mul.w	r2, r0, r3
 80016c0:	4623      	mov	r3, r4
 80016c2:	fb03 f301 	mul.w	r3, r3, r1
 80016c6:	4413      	add	r3, r2
 80016c8:	4622      	mov	r2, r4
 80016ca:	fba2 1200 	umull	r1, r2, r2, r0
 80016ce:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80016d2:	460a      	mov	r2, r1
 80016d4:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80016d8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80016dc:	4413      	add	r3, r2
 80016de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80016ee:	4621      	mov	r1, r4
 80016f0:	0e4a      	lsrs	r2, r1, #25
 80016f2:	4629      	mov	r1, r5
 80016f4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016f8:	4629      	mov	r1, r5
 80016fa:	164b      	asrs	r3, r1, #25
 80016fc:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001700:	4b3c      	ldr	r3, [pc, #240]	@ (80017f4 <BMP280_measureP+0x584>)
 8001702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001706:	b21b      	sxth	r3, r3
 8001708:	17da      	asrs	r2, r3, #31
 800170a:	663b      	str	r3, [r7, #96]	@ 0x60
 800170c:	667a      	str	r2, [r7, #100]	@ 0x64
 800170e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001712:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001716:	462a      	mov	r2, r5
 8001718:	fb02 f203 	mul.w	r2, r2, r3
 800171c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001720:	4621      	mov	r1, r4
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800172c:	4621      	mov	r1, r4
 800172e:	fba2 1201 	umull	r1, r2, r2, r1
 8001732:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001736:	460a      	mov	r2, r1
 8001738:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 800173c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001740:	4413      	add	r3, r2
 8001742:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001752:	4621      	mov	r1, r4
 8001754:	0cca      	lsrs	r2, r1, #19
 8001756:	4629      	mov	r1, r5
 8001758:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800175c:	4629      	mov	r1, r5
 800175e:	14cb      	asrs	r3, r1, #19
 8001760:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001764:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001768:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800176c:	1884      	adds	r4, r0, r2
 800176e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001770:	eb41 0303 	adc.w	r3, r1, r3
 8001774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001776:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800177a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800177e:	4621      	mov	r1, r4
 8001780:	1889      	adds	r1, r1, r2
 8001782:	6539      	str	r1, [r7, #80]	@ 0x50
 8001784:	4629      	mov	r1, r5
 8001786:	eb43 0101 	adc.w	r1, r3, r1
 800178a:	6579      	str	r1, [r7, #84]	@ 0x54
 800178c:	f04f 0000 	mov.w	r0, #0
 8001790:	f04f 0100 	mov.w	r1, #0
 8001794:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001798:	4623      	mov	r3, r4
 800179a:	0a18      	lsrs	r0, r3, #8
 800179c:	462b      	mov	r3, r5
 800179e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80017a2:	462b      	mov	r3, r5
 80017a4:	1219      	asrs	r1, r3, #8
 80017a6:	4b14      	ldr	r3, [pc, #80]	@ (80017f8 <BMP280_measureP+0x588>)
 80017a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ac:	b21b      	sxth	r3, r3
 80017ae:	17da      	asrs	r2, r3, #31
 80017b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017b2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80017c0:	464c      	mov	r4, r9
 80017c2:	0123      	lsls	r3, r4, #4
 80017c4:	4644      	mov	r4, r8
 80017c6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80017ca:	4644      	mov	r4, r8
 80017cc:	0122      	lsls	r2, r4, #4
 80017ce:	1884      	adds	r4, r0, r2
 80017d0:	603c      	str	r4, [r7, #0]
 80017d2:	eb41 0303 	adc.w	r3, r1, r3
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017dc:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80017e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80017ea:	46bd      	mov	sp, r7
 80017ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017f0:	200000a6 	.word	0x200000a6
 80017f4:	200000a4 	.word	0x200000a4
 80017f8:	200000a2 	.word	0x200000a2
 80017fc:	00000000 	.word	0x00000000

08001800 <BMP280_measureH>:

uint16_t BMP280_measureH(uint32_t Pres, int32_t Temp){
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	double var1, var2, h;

	if(Pres == 0) return 0;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <BMP280_measureH+0x14>
 8001810:	2300      	movs	r3, #0
 8001812:	e051      	b.n	80018b8 <BMP280_measureH+0xb8>
	var1 = -log(((double)Pres)/101325);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7fe fe25 	bl	8000464 <__aeabi_ui2d>
 800181a:	a32e      	add	r3, pc, #184	@ (adr r3, 80018d4 <BMP280_measureH+0xd4>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7fe ffc4 	bl	80007ac <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	ec43 2b17 	vmov	d7, r2, r3
 800182c:	eeb0 0a47 	vmov.f32	s0, s14
 8001830:	eef0 0a67 	vmov.f32	s1, s15
 8001834:	f007 fd28 	bl	8009288 <log>
 8001838:	ec53 2b10 	vmov	r2, r3, d0
 800183c:	4611      	mov	r1, r2
 800183e:	61b9      	str	r1, [r7, #24]
 8001840:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001844:	61fb      	str	r3, [r7, #28]

	if(var1 == 0) return 0;
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001852:	f7ff f8e9 	bl	8000a28 <__aeabi_dcmpeq>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <BMP280_measureH+0x60>
 800185c:	2300      	movs	r3, #0
 800185e:	e02b      	b.n	80018b8 <BMP280_measureH+0xb8>
	var2 = 0.0341663/((((double)Temp)/100)+273.15);
 8001860:	6838      	ldr	r0, [r7, #0]
 8001862:	f7fe fe0f 	bl	8000484 <__aeabi_i2d>
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <BMP280_measureH+0xd0>)
 800186c:	f7fe ff9e 	bl	80007ac <__aeabi_ddiv>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	a311      	add	r3, pc, #68	@ (adr r3, 80018c0 <BMP280_measureH+0xc0>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe fcb5 	bl	80001ec <__adddf3>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	a110      	add	r1, pc, #64	@ (adr r1, 80018c8 <BMP280_measureH+0xc8>)
 8001888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800188c:	f7fe ff8e 	bl	80007ac <__aeabi_ddiv>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	e9c7 2304 	strd	r2, r3, [r7, #16]
	h = var1/var2;
 8001898:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800189c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018a0:	f7fe ff84 	bl	80007ac <__aeabi_ddiv>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (uint16_t)h;
 80018ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018b0:	f7ff f902 	bl	8000ab8 <__aeabi_d2uiz>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b29b      	uxth	r3, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3720      	adds	r7, #32
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	66666666 	.word	0x66666666
 80018c4:	40711266 	.word	0x40711266
 80018c8:	ca402a92 	.word	0xca402a92
 80018cc:	3fa17e3e 	.word	0x3fa17e3e
 80018d0:	40590000 	.word	0x40590000
 80018d4:	00000000 	.word	0x00000000
 80018d8:	40f8bcd0 	.word	0x40f8bcd0

080018dc <BMP280_init>:

void BMP280_init(void){
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	BMP280_unselect();
 80018e0:	2201      	movs	r2, #1
 80018e2:	2104      	movs	r1, #4
 80018e4:	480c      	ldr	r0, [pc, #48]	@ (8001918 <BMP280_init+0x3c>)
 80018e6:	f003 f95d 	bl	8004ba4 <HAL_GPIO_WritePin>
	BMP280_config();
 80018ea:	f7ff fb7b 	bl	8000fe4 <BMP280_config>
	BMP280.ID = BMP280_read(0x89);
 80018ee:	2089      	movs	r0, #137	@ 0x89
 80018f0:	f7ff fb46 	bl	8000f80 <BMP280_read>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <BMP280_init+0x40>)
 80018fa:	701a      	strb	r2, [r3, #0]
	BMP280_calibrationData();
 80018fc:	f7ff fb7e 	bl	8000ffc <BMP280_calibrationData>
	BMP280_readRawValues();
 8001900:	f7ff fc30 	bl	8001164 <BMP280_readRawValues>
	BMP280.Temp_inicial = BMP280_measureT(T_raw);
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <BMP280_init+0x44>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fc6d 	bl	80011e8 <BMP280_measureT>
 800190e:	4603      	mov	r3, r0
 8001910:	4a02      	ldr	r2, [pc, #8]	@ (800191c <BMP280_init+0x40>)
 8001912:	6093      	str	r3, [r2, #8]
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40020400 	.word	0x40020400
 800191c:	2000007c 	.word	0x2000007c
 8001920:	200000a8 	.word	0x200000a8

08001924 <BMP280_calculate>:

void BMP280_calculate(void){
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
	BMP280_readRawValues();
 8001928:	f7ff fc1c 	bl	8001164 <BMP280_readRawValues>
	BMP280.Temp = BMP280_measureT(T_raw);
 800192c:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <BMP280_calculate+0x48>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fc59 	bl	80011e8 <BMP280_measureT>
 8001936:	4603      	mov	r3, r0
 8001938:	4a0d      	ldr	r2, [pc, #52]	@ (8001970 <BMP280_calculate+0x4c>)
 800193a:	6053      	str	r3, [r2, #4]
	BMP280.Pressure    		= BMP280_measureP(P_raw)/256;
 800193c:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <BMP280_calculate+0x50>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fc95 	bl	8001270 <BMP280_measureP>
 8001946:	4603      	mov	r3, r0
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	4a09      	ldr	r2, [pc, #36]	@ (8001970 <BMP280_calculate+0x4c>)
 800194c:	60d3      	str	r3, [r2, #12]
	BMP280.Barometric_Altitude = BMP280_measureH(BMP280.Pressure, BMP280.Temp_inicial);
 800194e:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <BMP280_calculate+0x4c>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	4a07      	ldr	r2, [pc, #28]	@ (8001970 <BMP280_calculate+0x4c>)
 8001954:	6892      	ldr	r2, [r2, #8]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff51 	bl	8001800 <BMP280_measureH>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	4b03      	ldr	r3, [pc, #12]	@ (8001970 <BMP280_calculate+0x4c>)
 8001964:	821a      	strh	r2, [r3, #16]
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200000a8 	.word	0x200000a8
 8001970:	2000007c 	.word	0x2000007c
 8001974:	200000ac 	.word	0x200000ac

08001978 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a2e      	ldr	r2, [pc, #184]	@ (8001a40 <GetSector+0xc8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d806      	bhi.n	800199a <GetSector+0x22>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001992:	d302      	bcc.n	800199a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e04b      	b.n	8001a32 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a29      	ldr	r2, [pc, #164]	@ (8001a44 <GetSector+0xcc>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d806      	bhi.n	80019b0 <GetSector+0x38>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a28      	ldr	r2, [pc, #160]	@ (8001a48 <GetSector+0xd0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d302      	bcc.n	80019b0 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80019aa:	2301      	movs	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	e040      	b.n	8001a32 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a26      	ldr	r2, [pc, #152]	@ (8001a4c <GetSector+0xd4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d806      	bhi.n	80019c6 <GetSector+0x4e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a25      	ldr	r2, [pc, #148]	@ (8001a50 <GetSector+0xd8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d302      	bcc.n	80019c6 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80019c0:	2302      	movs	r3, #2
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	e035      	b.n	8001a32 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a22      	ldr	r2, [pc, #136]	@ (8001a54 <GetSector+0xdc>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d206      	bcs.n	80019dc <GetSector+0x64>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a21      	ldr	r2, [pc, #132]	@ (8001a58 <GetSector+0xe0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d302      	bcc.n	80019dc <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 80019d6:	2303      	movs	r3, #3
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e02a      	b.n	8001a32 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a1f      	ldr	r2, [pc, #124]	@ (8001a5c <GetSector+0xe4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d206      	bcs.n	80019f2 <GetSector+0x7a>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a54 <GetSector+0xdc>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d902      	bls.n	80019f2 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80019ec:	2304      	movs	r3, #4
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e01f      	b.n	8001a32 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a60 <GetSector+0xe8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d206      	bcs.n	8001a08 <GetSector+0x90>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a17      	ldr	r2, [pc, #92]	@ (8001a5c <GetSector+0xe4>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d902      	bls.n	8001a08 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001a02:	2305      	movs	r3, #5
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e014      	b.n	8001a32 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a16      	ldr	r2, [pc, #88]	@ (8001a64 <GetSector+0xec>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d206      	bcs.n	8001a1e <GetSector+0xa6>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a13      	ldr	r2, [pc, #76]	@ (8001a60 <GetSector+0xe8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d902      	bls.n	8001a1e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001a18:	2306      	movs	r3, #6
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e009      	b.n	8001a32 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a11      	ldr	r2, [pc, #68]	@ (8001a68 <GetSector+0xf0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d205      	bcs.n	8001a32 <GetSector+0xba>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a0e      	ldr	r2, [pc, #56]	@ (8001a64 <GetSector+0xec>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 8001a2e:	2307      	movs	r3, #7
 8001a30:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	08003ffe 	.word	0x08003ffe
 8001a44:	08007ffe 	.word	0x08007ffe
 8001a48:	08004000 	.word	0x08004000
 8001a4c:	0800bffe 	.word	0x0800bffe
 8001a50:	08008000 	.word	0x08008000
 8001a54:	0800ffff 	.word	0x0800ffff
 8001a58:	0800c000 	.word	0x0800c000
 8001a5c:	0801ffff 	.word	0x0801ffff
 8001a60:	0803ffff 	.word	0x0803ffff
 8001a64:	0805ffff 	.word	0x0805ffff
 8001a68:	0807ffff 	.word	0x0807ffff

08001a6c <Flash_Write>:


uint32_t Flash_Write (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 8001a6c:	b5b0      	push	{r4, r5, r7, lr}
 8001a6e:	b08a      	sub	sp, #40	@ 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	4613      	mov	r3, r2
 8001a78:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8001a7e:	f002 fc6d 	bl	800435c <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f7ff ff78 	bl	8001978 <GetSector>
 8001a88:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001a96:	69f8      	ldr	r0, [r7, #28]
 8001a98:	f7ff ff6e 	bl	8001978 <GetSector>
 8001a9c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b18 <Flash_Write+0xac>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b18 <Flash_Write+0xac>)
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8001aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8001b18 <Flash_Write+0xac>)
 8001aac:	6a3b      	ldr	r3, [r7, #32]
 8001aae:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a17      	ldr	r2, [pc, #92]	@ (8001b18 <Flash_Write+0xac>)
 8001aba:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4815      	ldr	r0, [pc, #84]	@ (8001b18 <Flash_Write+0xac>)
 8001ac4:	f002 fdc8 	bl	8004658 <HAL_FLASHEx_Erase>

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
 8001ac8:	e01b      	b.n	8001b02 <Flash_Write+0x96>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	461c      	mov	r4, r3
 8001ad8:	4615      	mov	r5, r2
 8001ada:	4622      	mov	r2, r4
 8001adc:	462b      	mov	r3, r5
 8001ade:	68f9      	ldr	r1, [r7, #12]
 8001ae0:	2002      	movs	r0, #2
 8001ae2:	f002 fbe7 	bl	80042b4 <HAL_FLASH_Program>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d106      	bne.n	8001afa <Flash_Write+0x8e>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3304      	adds	r3, #4
 8001af0:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af4:	3301      	adds	r3, #1
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af8:	e003      	b.n	8001b02 <Flash_Write+0x96>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001afa:	f002 fc61 	bl	80043c0 <HAL_FLASH_GetError>
 8001afe:	4603      	mov	r3, r0
 8001b00:	e006      	b.n	8001b10 <Flash_Write+0xa4>
	   while (sofar<numberofwords)
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dbdf      	blt.n	8001aca <Flash_Write+0x5e>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001b0a:	f002 fc49 	bl	80043a0 <HAL_FLASH_Lock>

	   return 0;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3728      	adds	r7, #40	@ 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bdb0      	pop	{r4, r5, r7, pc}
 8001b18:	200000b4 	.word	0x200000b4

08001b1c <Flash_Read>:


void Flash_Read (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	4613      	mov	r3, r2
 8001b28:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3304      	adds	r3, #4
 8001b36:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	1e5a      	subs	r2, r3, #1
 8001b42:	80fa      	strh	r2, [r7, #6]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d000      	beq.n	8001b4a <Flash_Read+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8001b48:	e7ef      	b.n	8001b2a <Flash_Read+0xe>
		if (!(numberofwords--)) break;
 8001b4a:	bf00      	nop
	}
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <MPU6050_calibration>:

#include "Libraries/MPU6050.h"

MPU6050_t MPU6050;

void MPU6050_calibration(void){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1);
 8001b5e:	2301      	movs	r3, #1
 8001b60:	9302      	str	r3, [sp, #8]
 8001b62:	2306      	movs	r3, #6
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	463b      	mov	r3, r7
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	223b      	movs	r2, #59	@ 0x3b
 8001b6e:	21d0      	movs	r1, #208	@ 0xd0
 8001b70:	485b      	ldr	r0, [pc, #364]	@ (8001ce0 <MPU6050_calibration+0x188>)
 8001b72:	f003 fa6f 	bl	8005054 <HAL_I2C_Mem_Read>

	MEMORY.str.MPU6050_1.Ax_Offset = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001b76:	783b      	ldrb	r3, [r7, #0]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	b21a      	sxth	r2, r3
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	4313      	orrs	r3, r2
 8001b82:	b21a      	sxth	r2, r3
 8001b84:	4b57      	ldr	r3, [pc, #348]	@ (8001ce4 <MPU6050_calibration+0x18c>)
 8001b86:	801a      	strh	r2, [r3, #0]
	MEMORY.str.MPU6050_1.Ay_Offset = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001b88:	78bb      	ldrb	r3, [r7, #2]
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	4b53      	ldr	r3, [pc, #332]	@ (8001ce4 <MPU6050_calibration+0x18c>)
 8001b98:	805a      	strh	r2, [r3, #2]
	MEMORY.str.MPU6050_1.Az_Offset = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]) - 2048;
 8001b9a:	793b      	ldrb	r3, [r7, #4]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	797b      	ldrb	r3, [r7, #5]
 8001ba2:	b21b      	sxth	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	b21a      	sxth	r2, r3
 8001bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ce4 <MPU6050_calibration+0x18c>)
 8001bb4:	809a      	strh	r2, [r3, #4]

	memset(Rec_Data,0,6);
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	2206      	movs	r2, #6
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f007 fb31 	bl	8009224 <memset>

	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1);
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	9302      	str	r3, [sp, #8]
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	463b      	mov	r3, r7
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	223b      	movs	r2, #59	@ 0x3b
 8001bd2:	21d0      	movs	r1, #208	@ 0xd0
 8001bd4:	4844      	ldr	r0, [pc, #272]	@ (8001ce8 <MPU6050_calibration+0x190>)
 8001bd6:	f003 fa3d 	bl	8005054 <HAL_I2C_Mem_Read>

	MEMORY.str.MPU6050_2.Ax_Offset = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001bda:	783b      	ldrb	r3, [r7, #0]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	787b      	ldrb	r3, [r7, #1]
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	b21a      	sxth	r2, r3
 8001be8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ce4 <MPU6050_calibration+0x18c>)
 8001bea:	819a      	strh	r2, [r3, #12]
	MEMORY.str.MPU6050_2.Ay_Offset = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001bec:	78bb      	ldrb	r3, [r7, #2]
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	b21a      	sxth	r2, r3
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	b21a      	sxth	r2, r3
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce4 <MPU6050_calibration+0x18c>)
 8001bfc:	81da      	strh	r2, [r3, #14]
	MEMORY.str.MPU6050_2.Az_Offset = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]) - 2048;
 8001bfe:	793b      	ldrb	r3, [r7, #4]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	797b      	ldrb	r3, [r7, #5]
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	4b33      	ldr	r3, [pc, #204]	@ (8001ce4 <MPU6050_calibration+0x18c>)
 8001c18:	821a      	strh	r2, [r3, #16]

	memset(Rec_Data,0,6);
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	2206      	movs	r2, #6
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f007 faff 	bl	8009224 <memset>

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1000);
 8001c26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	463b      	mov	r3, r7
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2301      	movs	r3, #1
 8001c36:	2243      	movs	r2, #67	@ 0x43
 8001c38:	21d0      	movs	r1, #208	@ 0xd0
 8001c3a:	4829      	ldr	r0, [pc, #164]	@ (8001ce0 <MPU6050_calibration+0x188>)
 8001c3c:	f003 fa0a 	bl	8005054 <HAL_I2C_Mem_Read>

	MEMORY.str.MPU6050_1.Gx_Offset = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001c40:	783b      	ldrb	r3, [r7, #0]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	b21a      	sxth	r2, r3
 8001c46:	787b      	ldrb	r3, [r7, #1]
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b21a      	sxth	r2, r3
 8001c4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ce4 <MPU6050_calibration+0x18c>)
 8001c50:	80da      	strh	r2, [r3, #6]
	MEMORY.str.MPU6050_1.Gy_Offset = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001c52:	78bb      	ldrb	r3, [r7, #2]
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	4b20      	ldr	r3, [pc, #128]	@ (8001ce4 <MPU6050_calibration+0x18c>)
 8001c62:	811a      	strh	r2, [r3, #8]
	MEMORY.str.MPU6050_1.Gz_Offset = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001c64:	793b      	ldrb	r3, [r7, #4]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	b21a      	sxth	r2, r3
 8001c6a:	797b      	ldrb	r3, [r7, #5]
 8001c6c:	b21b      	sxth	r3, r3
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <MPU6050_calibration+0x18c>)
 8001c74:	815a      	strh	r2, [r3, #10]

	memset(Rec_Data,0,6);
 8001c76:	463b      	mov	r3, r7
 8001c78:	2206      	movs	r2, #6
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f007 fad1 	bl	8009224 <memset>

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1000);
 8001c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c86:	9302      	str	r3, [sp, #8]
 8001c88:	2306      	movs	r3, #6
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2301      	movs	r3, #1
 8001c92:	2243      	movs	r2, #67	@ 0x43
 8001c94:	21d0      	movs	r1, #208	@ 0xd0
 8001c96:	4814      	ldr	r0, [pc, #80]	@ (8001ce8 <MPU6050_calibration+0x190>)
 8001c98:	f003 f9dc 	bl	8005054 <HAL_I2C_Mem_Read>

	MEMORY.str.MPU6050_2.Gx_Offset = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001c9c:	783b      	ldrb	r3, [r7, #0]
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	b21a      	sxth	r2, r3
 8001ca2:	787b      	ldrb	r3, [r7, #1]
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	b21a      	sxth	r2, r3
 8001caa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <MPU6050_calibration+0x18c>)
 8001cac:	825a      	strh	r2, [r3, #18]
	MEMORY.str.MPU6050_2.Gy_Offset = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001cae:	78bb      	ldrb	r3, [r7, #2]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <MPU6050_calibration+0x18c>)
 8001cbe:	829a      	strh	r2, [r3, #20]
	MEMORY.str.MPU6050_2.Gz_Offset = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001cc0:	793b      	ldrb	r3, [r7, #4]
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	b21a      	sxth	r2, r3
 8001cc6:	797b      	ldrb	r3, [r7, #5]
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	b21a      	sxth	r2, r3
 8001cce:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <MPU6050_calibration+0x18c>)
 8001cd0:	82da      	strh	r2, [r3, #22]

	MEMORY_write();
 8001cd2:	f000 fbcf 	bl	8002474 <MEMORY_write>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200003e4 	.word	0x200003e4
 8001ce4:	20000118 	.word	0x20000118
 8001ce8:	20000438 	.word	0x20000438

08001cec <MPU6050_init>:

void MPU6050_init(void){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af04      	add	r7, sp, #16
	uint8_t cont = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, WHOAMI, 1, &MPU6050.S1.ID, 1,1);
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	9302      	str	r3, [sp, #8]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	4b69      	ldr	r3, [pc, #420]	@ (8001ea8 <MPU6050_init+0x1bc>)
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2301      	movs	r3, #1
 8001d08:	2275      	movs	r2, #117	@ 0x75
 8001d0a:	21d0      	movs	r1, #208	@ 0xd0
 8001d0c:	4867      	ldr	r0, [pc, #412]	@ (8001eac <MPU6050_init+0x1c0>)
 8001d0e:	f003 f9a1 	bl	8005054 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, WHOAMI, 1, &MPU6050.S2.ID, 1,1);
 8001d12:	2301      	movs	r3, #1
 8001d14:	9302      	str	r3, [sp, #8]
 8001d16:	2301      	movs	r3, #1
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	4b65      	ldr	r3, [pc, #404]	@ (8001eb0 <MPU6050_init+0x1c4>)
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2301      	movs	r3, #1
 8001d20:	2275      	movs	r2, #117	@ 0x75
 8001d22:	21d0      	movs	r1, #208	@ 0xd0
 8001d24:	4863      	ldr	r0, [pc, #396]	@ (8001eb4 <MPU6050_init+0x1c8>)
 8001d26:	f003 f995 	bl	8005054 <HAL_I2C_Mem_Read>

	while((MPU6050.S1.ID != 104)&&(cont < 2)){
 8001d2a:	e016      	b.n	8001d5a <MPU6050_init+0x6e>
		Data = 0x40;
 8001d2c:	2340      	movs	r3, #64	@ 0x40
 8001d2e:	71bb      	strb	r3, [r7, #6]
		//HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
		MX_I2C1_Init();
 8001d30:	f000 fe6a 	bl	8002a08 <MX_I2C1_Init>
		HAL_Delay(100);
 8001d34:	2064      	movs	r0, #100	@ 0x64
 8001d36:	f001 fc39 	bl	80035ac <HAL_Delay>
		HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, WHOAMI, 1, &MPU6050.S2.ID, 1, 1000);
 8001d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d3e:	9302      	str	r3, [sp, #8]
 8001d40:	2301      	movs	r3, #1
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	4b5a      	ldr	r3, [pc, #360]	@ (8001eb0 <MPU6050_init+0x1c4>)
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	2275      	movs	r2, #117	@ 0x75
 8001d4c:	21d0      	movs	r1, #208	@ 0xd0
 8001d4e:	4857      	ldr	r0, [pc, #348]	@ (8001eac <MPU6050_init+0x1c0>)
 8001d50:	f003 f980 	bl	8005054 <HAL_I2C_Mem_Read>
		cont += 1;
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	3301      	adds	r3, #1
 8001d58:	71fb      	strb	r3, [r7, #7]
	while((MPU6050.S1.ID != 104)&&(cont < 2)){
 8001d5a:	4b53      	ldr	r3, [pc, #332]	@ (8001ea8 <MPU6050_init+0x1bc>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b68      	cmp	r3, #104	@ 0x68
 8001d60:	d002      	beq.n	8001d68 <MPU6050_init+0x7c>
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d9e1      	bls.n	8001d2c <MPU6050_init+0x40>
	}
	cont = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	71fb      	strb	r3, [r7, #7]
	while((MPU6050.S2.ID != 104)&&(cont < 2)){
 8001d6c:	e023      	b.n	8001db6 <MPU6050_init+0xca>
		Data = 0x40;
 8001d6e:	2340      	movs	r3, #64	@ 0x40
 8001d70:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 8001d72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d76:	9302      	str	r3, [sp, #8]
 8001d78:	2301      	movs	r3, #1
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	1dbb      	adds	r3, r7, #6
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	2301      	movs	r3, #1
 8001d82:	226b      	movs	r2, #107	@ 0x6b
 8001d84:	21d0      	movs	r1, #208	@ 0xd0
 8001d86:	484b      	ldr	r0, [pc, #300]	@ (8001eb4 <MPU6050_init+0x1c8>)
 8001d88:	f003 f86a 	bl	8004e60 <HAL_I2C_Mem_Write>
		MX_I2C2_Init();
 8001d8c:	f000 fe6a 	bl	8002a64 <MX_I2C2_Init>
		HAL_Delay(100);
 8001d90:	2064      	movs	r0, #100	@ 0x64
 8001d92:	f001 fc0b 	bl	80035ac <HAL_Delay>
		HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, WHOAMI, 1, &MPU6050.S2.ID, 1, 1000);
 8001d96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9a:	9302      	str	r3, [sp, #8]
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	4b43      	ldr	r3, [pc, #268]	@ (8001eb0 <MPU6050_init+0x1c4>)
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	2301      	movs	r3, #1
 8001da6:	2275      	movs	r2, #117	@ 0x75
 8001da8:	21d0      	movs	r1, #208	@ 0xd0
 8001daa:	4842      	ldr	r0, [pc, #264]	@ (8001eb4 <MPU6050_init+0x1c8>)
 8001dac:	f003 f952 	bl	8005054 <HAL_I2C_Mem_Read>
		cont += 1;
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	3301      	adds	r3, #1
 8001db4:	71fb      	strb	r3, [r7, #7]
	while((MPU6050.S2.ID != 104)&&(cont < 2)){
 8001db6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea8 <MPU6050_init+0x1bc>)
 8001db8:	7f1b      	ldrb	r3, [r3, #28]
 8001dba:	2b68      	cmp	r3, #104	@ 0x68
 8001dbc:	d002      	beq.n	8001dc4 <MPU6050_init+0xd8>
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d9d4      	bls.n	8001d6e <MPU6050_init+0x82>
	}
	Data = 0x00;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 8001dc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dcc:	9302      	str	r3, [sp, #8]
 8001dce:	2301      	movs	r3, #1
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	1dbb      	adds	r3, r7, #6
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	226b      	movs	r2, #107	@ 0x6b
 8001dda:	21d0      	movs	r1, #208	@ 0xd0
 8001ddc:	4833      	ldr	r0, [pc, #204]	@ (8001eac <MPU6050_init+0x1c0>)
 8001dde:	f003 f83f 	bl	8004e60 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, PWR_MGMT_1, 1, &Data, 1, 1000);
 8001de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001de6:	9302      	str	r3, [sp, #8]
 8001de8:	2301      	movs	r3, #1
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	1dbb      	adds	r3, r7, #6
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	2301      	movs	r3, #1
 8001df2:	226b      	movs	r2, #107	@ 0x6b
 8001df4:	21d0      	movs	r1, #208	@ 0xd0
 8001df6:	482f      	ldr	r0, [pc, #188]	@ (8001eb4 <MPU6050_init+0x1c8>)
 8001df8:	f003 f832 	bl	8004e60 <HAL_I2C_Mem_Write>

	Data = 0x07;
 8001dfc:	2307      	movs	r3, #7
 8001dfe:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, 1000);
 8001e00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e04:	9302      	str	r3, [sp, #8]
 8001e06:	2301      	movs	r3, #1
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	1dbb      	adds	r3, r7, #6
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2301      	movs	r3, #1
 8001e10:	2219      	movs	r2, #25
 8001e12:	21d0      	movs	r1, #208	@ 0xd0
 8001e14:	4825      	ldr	r0, [pc, #148]	@ (8001eac <MPU6050_init+0x1c0>)
 8001e16:	f003 f823 	bl	8004e60 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV, 1, &Data, 1, 1000);
 8001e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e1e:	9302      	str	r3, [sp, #8]
 8001e20:	2301      	movs	r3, #1
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	1dbb      	adds	r3, r7, #6
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2301      	movs	r3, #1
 8001e2a:	2219      	movs	r2, #25
 8001e2c:	21d0      	movs	r1, #208	@ 0xd0
 8001e2e:	4821      	ldr	r0, [pc, #132]	@ (8001eb4 <MPU6050_init+0x1c8>)
 8001e30:	f003 f816 	bl	8004e60 <HAL_I2C_Mem_Write>

	Data = 0x18;
 8001e34:	2318      	movs	r3, #24
 8001e36:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, 1000);
 8001e38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	2301      	movs	r3, #1
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	1dbb      	adds	r3, r7, #6
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2301      	movs	r3, #1
 8001e48:	221b      	movs	r2, #27
 8001e4a:	21d0      	movs	r1, #208	@ 0xd0
 8001e4c:	4817      	ldr	r0, [pc, #92]	@ (8001eac <MPU6050_init+0x1c0>)
 8001e4e:	f003 f807 	bl	8004e60 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG, 1, &Data, 1, 1000);
 8001e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e56:	9302      	str	r3, [sp, #8]
 8001e58:	2301      	movs	r3, #1
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	1dbb      	adds	r3, r7, #6
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2301      	movs	r3, #1
 8001e62:	221b      	movs	r2, #27
 8001e64:	21d0      	movs	r1, #208	@ 0xd0
 8001e66:	4813      	ldr	r0, [pc, #76]	@ (8001eb4 <MPU6050_init+0x1c8>)
 8001e68:	f002 fffa 	bl	8004e60 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1, 1000);
 8001e6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e70:	9302      	str	r3, [sp, #8]
 8001e72:	2301      	movs	r3, #1
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	1dbb      	adds	r3, r7, #6
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	221c      	movs	r2, #28
 8001e7e:	21d0      	movs	r1, #208	@ 0xd0
 8001e80:	480a      	ldr	r0, [pc, #40]	@ (8001eac <MPU6050_init+0x1c0>)
 8001e82:	f002 ffed 	bl	8004e60 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG, 1, &Data, 1, 1000);
 8001e86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e8a:	9302      	str	r3, [sp, #8]
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	1dbb      	adds	r3, r7, #6
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2301      	movs	r3, #1
 8001e96:	221c      	movs	r2, #28
 8001e98:	21d0      	movs	r1, #208	@ 0xd0
 8001e9a:	4806      	ldr	r0, [pc, #24]	@ (8001eb4 <MPU6050_init+0x1c8>)
 8001e9c:	f002 ffe0 	bl	8004e60 <HAL_I2C_Mem_Write>
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200000c8 	.word	0x200000c8
 8001eac:	200003e4 	.word	0x200003e4
 8001eb0:	200000e4 	.word	0x200000e4
 8001eb4:	20000438 	.word	0x20000438

08001eb8 <MPU6050_accel>:

void MPU6050_accel(void){
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af04      	add	r7, sp, #16
	 uint8_t Rec_Data[6];
	 int16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW;

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1);
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	9302      	str	r3, [sp, #8]
 8001ec2:	2306      	movs	r3, #6
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2301      	movs	r3, #1
 8001ecc:	223b      	movs	r2, #59	@ 0x3b
 8001ece:	21d0      	movs	r1, #208	@ 0xd0
 8001ed0:	4860      	ldr	r0, [pc, #384]	@ (8002054 <MPU6050_accel+0x19c>)
 8001ed2:	f003 f8bf 	bl	8005054 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]) - MEMORY.str.MPU6050_1.Ax_Offset;
 8001ed6:	793b      	ldrb	r3, [r7, #4]
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	b21a      	sxth	r2, r3
 8001edc:	797b      	ldrb	r3, [r7, #5]
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	4b5c      	ldr	r3, [pc, #368]	@ (8002058 <MPU6050_accel+0x1a0>)
 8001ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	81fb      	strh	r3, [r7, #14]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]) - MEMORY.str.MPU6050_1.Ay_Offset;
 8001ef4:	79bb      	ldrb	r3, [r7, #6]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	b21b      	sxth	r3, r3
 8001efe:	4313      	orrs	r3, r2
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b54      	ldr	r3, [pc, #336]	@ (8002058 <MPU6050_accel+0x1a0>)
 8001f06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	81bb      	strh	r3, [r7, #12]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]) - MEMORY.str.MPU6050_1.Az_Offset;
 8001f12:	7a3b      	ldrb	r3, [r7, #8]
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	b21a      	sxth	r2, r3
 8001f18:	7a7b      	ldrb	r3, [r7, #9]
 8001f1a:	b21b      	sxth	r3, r3
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	b21b      	sxth	r3, r3
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	4b4d      	ldr	r3, [pc, #308]	@ (8002058 <MPU6050_accel+0x1a0>)
 8001f24:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	817b      	strh	r3, [r7, #10]

	MPU6050.S1.Ax = (float)Accel_X_RAW/2048.0 ;
 8001f30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f3c:	eddf 6a47 	vldr	s13, [pc, #284]	@ 800205c <MPU6050_accel+0x1a4>
 8001f40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f44:	4b46      	ldr	r3, [pc, #280]	@ (8002060 <MPU6050_accel+0x1a8>)
 8001f46:	edc3 7a01 	vstr	s15, [r3, #4]
	MPU6050.S1.Ay = (float)Accel_Y_RAW/2048.0 ;
 8001f4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f56:	eddf 6a41 	vldr	s13, [pc, #260]	@ 800205c <MPU6050_accel+0x1a4>
 8001f5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f5e:	4b40      	ldr	r3, [pc, #256]	@ (8002060 <MPU6050_accel+0x1a8>)
 8001f60:	edc3 7a02 	vstr	s15, [r3, #8]
	MPU6050.S1.Az = (float)Accel_Z_RAW/2048.0 ;
 8001f64:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f70:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800205c <MPU6050_accel+0x1a4>
 8001f74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f78:	4b39      	ldr	r3, [pc, #228]	@ (8002060 <MPU6050_accel+0x1a8>)
 8001f7a:	edc3 7a03 	vstr	s15, [r3, #12]

	memset(Rec_Data,0,6);
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	2206      	movs	r2, #6
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f007 f94d 	bl	8009224 <memset>

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1);
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	2306      	movs	r3, #6
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2301      	movs	r3, #1
 8001f98:	223b      	movs	r2, #59	@ 0x3b
 8001f9a:	21d0      	movs	r1, #208	@ 0xd0
 8001f9c:	4831      	ldr	r0, [pc, #196]	@ (8002064 <MPU6050_accel+0x1ac>)
 8001f9e:	f003 f859 	bl	8005054 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]) - MEMORY.str.MPU6050_2.Ax_Offset;
 8001fa2:	793b      	ldrb	r3, [r7, #4]
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	b21a      	sxth	r2, r3
 8001fa8:	797b      	ldrb	r3, [r7, #5]
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	4313      	orrs	r3, r2
 8001fae:	b21b      	sxth	r3, r3
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	4b29      	ldr	r3, [pc, #164]	@ (8002058 <MPU6050_accel+0x1a0>)
 8001fb4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	81fb      	strh	r3, [r7, #14]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]) - MEMORY.str.MPU6050_2.Ay_Offset;
 8001fc0:	79bb      	ldrb	r3, [r7, #6]
 8001fc2:	021b      	lsls	r3, r3, #8
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <MPU6050_accel+0x1a0>)
 8001fd2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	81bb      	strh	r3, [r7, #12]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]) - MEMORY.str.MPU6050_2.Az_Offset;
 8001fde:	7a3b      	ldrb	r3, [r7, #8]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	b21a      	sxth	r2, r3
 8001fe4:	7a7b      	ldrb	r3, [r7, #9]
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	b21b      	sxth	r3, r3
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <MPU6050_accel+0x1a0>)
 8001ff0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	817b      	strh	r3, [r7, #10]

	MPU6050.S2.Ax = (float)Accel_X_RAW/2048.0;
 8001ffc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002008:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800205c <MPU6050_accel+0x1a4>
 800200c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002010:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <MPU6050_accel+0x1a8>)
 8002012:	edc3 7a08 	vstr	s15, [r3, #32]
	MPU6050.S2.Ay = (float)Accel_Y_RAW/2048.0;
 8002016:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800201a:	ee07 3a90 	vmov	s15, r3
 800201e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002022:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800205c <MPU6050_accel+0x1a4>
 8002026:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800202a:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <MPU6050_accel+0x1a8>)
 800202c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	MPU6050.S2.Az = (float)Accel_Z_RAW/2048.0;
 8002030:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800203c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800205c <MPU6050_accel+0x1a4>
 8002040:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <MPU6050_accel+0x1a8>)
 8002046:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200003e4 	.word	0x200003e4
 8002058:	20000118 	.word	0x20000118
 800205c:	45000000 	.word	0x45000000
 8002060:	200000c8 	.word	0x200000c8
 8002064:	20000438 	.word	0x20000438

08002068 <MPU6050_gyro>:

void MPU6050_gyro(void){
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	int16_t Gyro_X_RAW, Gyro_Y_RAW, Gyro_Z_RAW;

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1);
 800206e:	2301      	movs	r3, #1
 8002070:	9302      	str	r3, [sp, #8]
 8002072:	2306      	movs	r3, #6
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2301      	movs	r3, #1
 800207c:	2243      	movs	r2, #67	@ 0x43
 800207e:	21d0      	movs	r1, #208	@ 0xd0
 8002080:	4883      	ldr	r0, [pc, #524]	@ (8002290 <MPU6050_gyro+0x228>)
 8002082:	f002 ffe7 	bl	8005054 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]) - MEMORY.str.MPU6050_1.Gx_Offset;
 8002086:	793b      	ldrb	r3, [r7, #4]
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	b21a      	sxth	r2, r3
 800208c:	797b      	ldrb	r3, [r7, #5]
 800208e:	b21b      	sxth	r3, r3
 8002090:	4313      	orrs	r3, r2
 8002092:	b21b      	sxth	r3, r3
 8002094:	b29a      	uxth	r2, r3
 8002096:	4b7f      	ldr	r3, [pc, #508]	@ (8002294 <MPU6050_gyro+0x22c>)
 8002098:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800209c:	b29b      	uxth	r3, r3
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	81fb      	strh	r3, [r7, #14]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]) - MEMORY.str.MPU6050_1.Gy_Offset;
 80020a4:	79bb      	ldrb	r3, [r7, #6]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	4b77      	ldr	r3, [pc, #476]	@ (8002294 <MPU6050_gyro+0x22c>)
 80020b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	b29b      	uxth	r3, r3
 80020c0:	81bb      	strh	r3, [r7, #12]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]) - MEMORY.str.MPU6050_1.Gz_Offset;
 80020c2:	7a3b      	ldrb	r3, [r7, #8]
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	b21a      	sxth	r2, r3
 80020c8:	7a7b      	ldrb	r3, [r7, #9]
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	4b70      	ldr	r3, [pc, #448]	@ (8002294 <MPU6050_gyro+0x22c>)
 80020d4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	b29b      	uxth	r3, r3
 80020de:	817b      	strh	r3, [r7, #10]

	MPU6050.S1.Gx = (float)Gyro_X_RAW/16.4;
 80020e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020e4:	ee07 3a90 	vmov	s15, r3
 80020e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ec:	ee17 0a90 	vmov	r0, s15
 80020f0:	f7fe f9da 	bl	80004a8 <__aeabi_f2d>
 80020f4:	a364      	add	r3, pc, #400	@ (adr r3, 8002288 <MPU6050_gyro+0x220>)
 80020f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fa:	f7fe fb57 	bl	80007ac <__aeabi_ddiv>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fcf7 	bl	8000af8 <__aeabi_d2f>
 800210a:	4603      	mov	r3, r0
 800210c:	4a62      	ldr	r2, [pc, #392]	@ (8002298 <MPU6050_gyro+0x230>)
 800210e:	6113      	str	r3, [r2, #16]
	MPU6050.S1.Gy = (float)Gyro_Y_RAW/16.4;
 8002110:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211c:	ee17 0a90 	vmov	r0, s15
 8002120:	f7fe f9c2 	bl	80004a8 <__aeabi_f2d>
 8002124:	a358      	add	r3, pc, #352	@ (adr r3, 8002288 <MPU6050_gyro+0x220>)
 8002126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212a:	f7fe fb3f 	bl	80007ac <__aeabi_ddiv>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4610      	mov	r0, r2
 8002134:	4619      	mov	r1, r3
 8002136:	f7fe fcdf 	bl	8000af8 <__aeabi_d2f>
 800213a:	4603      	mov	r3, r0
 800213c:	4a56      	ldr	r2, [pc, #344]	@ (8002298 <MPU6050_gyro+0x230>)
 800213e:	6153      	str	r3, [r2, #20]
	MPU6050.S1.Gz = (float)Gyro_Z_RAW/16.4;
 8002140:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214c:	ee17 0a90 	vmov	r0, s15
 8002150:	f7fe f9aa 	bl	80004a8 <__aeabi_f2d>
 8002154:	a34c      	add	r3, pc, #304	@ (adr r3, 8002288 <MPU6050_gyro+0x220>)
 8002156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215a:	f7fe fb27 	bl	80007ac <__aeabi_ddiv>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	f7fe fcc7 	bl	8000af8 <__aeabi_d2f>
 800216a:	4603      	mov	r3, r0
 800216c:	4a4a      	ldr	r2, [pc, #296]	@ (8002298 <MPU6050_gyro+0x230>)
 800216e:	6193      	str	r3, [r2, #24]

	memset(Rec_Data,0,6);
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	2206      	movs	r2, #6
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f007 f854 	bl	8009224 <memset>

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, 1);
 800217c:	2301      	movs	r3, #1
 800217e:	9302      	str	r3, [sp, #8]
 8002180:	2306      	movs	r3, #6
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	2301      	movs	r3, #1
 800218a:	2243      	movs	r2, #67	@ 0x43
 800218c:	21d0      	movs	r1, #208	@ 0xd0
 800218e:	4843      	ldr	r0, [pc, #268]	@ (800229c <MPU6050_gyro+0x234>)
 8002190:	f002 ff60 	bl	8005054 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]) - MEMORY.str.MPU6050_2.Gx_Offset;
 8002194:	793b      	ldrb	r3, [r7, #4]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	b21a      	sxth	r2, r3
 800219a:	797b      	ldrb	r3, [r7, #5]
 800219c:	b21b      	sxth	r3, r3
 800219e:	4313      	orrs	r3, r2
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <MPU6050_gyro+0x22c>)
 80021a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	81fb      	strh	r3, [r7, #14]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]) - MEMORY.str.MPU6050_2.Gy_Offset;
 80021b2:	79bb      	ldrb	r3, [r7, #6]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	b21b      	sxth	r3, r3
 80021bc:	4313      	orrs	r3, r2
 80021be:	b21b      	sxth	r3, r3
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	4b34      	ldr	r3, [pc, #208]	@ (8002294 <MPU6050_gyro+0x22c>)
 80021c4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	81bb      	strh	r3, [r7, #12]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]) - MEMORY.str.MPU6050_2.Gz_Offset;
 80021d0:	7a3b      	ldrb	r3, [r7, #8]
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	b21a      	sxth	r2, r3
 80021d6:	7a7b      	ldrb	r3, [r7, #9]
 80021d8:	b21b      	sxth	r3, r3
 80021da:	4313      	orrs	r3, r2
 80021dc:	b21b      	sxth	r3, r3
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002294 <MPU6050_gyro+0x22c>)
 80021e2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	817b      	strh	r3, [r7, #10]

	MPU6050.S2.Gx = (float)Gyro_X_RAW/16.4;
 80021ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021fa:	ee17 0a90 	vmov	r0, s15
 80021fe:	f7fe f953 	bl	80004a8 <__aeabi_f2d>
 8002202:	a321      	add	r3, pc, #132	@ (adr r3, 8002288 <MPU6050_gyro+0x220>)
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	f7fe fad0 	bl	80007ac <__aeabi_ddiv>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fc70 	bl	8000af8 <__aeabi_d2f>
 8002218:	4603      	mov	r3, r0
 800221a:	4a1f      	ldr	r2, [pc, #124]	@ (8002298 <MPU6050_gyro+0x230>)
 800221c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	MPU6050.S2.Gy = (float)Gyro_Y_RAW/16.4;
 800221e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222a:	ee17 0a90 	vmov	r0, s15
 800222e:	f7fe f93b 	bl	80004a8 <__aeabi_f2d>
 8002232:	a315      	add	r3, pc, #84	@ (adr r3, 8002288 <MPU6050_gyro+0x220>)
 8002234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002238:	f7fe fab8 	bl	80007ac <__aeabi_ddiv>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	f7fe fc58 	bl	8000af8 <__aeabi_d2f>
 8002248:	4603      	mov	r3, r0
 800224a:	4a13      	ldr	r2, [pc, #76]	@ (8002298 <MPU6050_gyro+0x230>)
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
	MPU6050.S2.Gz = (float)Gyro_Z_RAW/16.4;
 800224e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225a:	ee17 0a90 	vmov	r0, s15
 800225e:	f7fe f923 	bl	80004a8 <__aeabi_f2d>
 8002262:	a309      	add	r3, pc, #36	@ (adr r3, 8002288 <MPU6050_gyro+0x220>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe faa0 	bl	80007ac <__aeabi_ddiv>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fc40 	bl	8000af8 <__aeabi_d2f>
 8002278:	4603      	mov	r3, r0
 800227a:	4a07      	ldr	r2, [pc, #28]	@ (8002298 <MPU6050_gyro+0x230>)
 800227c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	66666666 	.word	0x66666666
 800228c:	40306666 	.word	0x40306666
 8002290:	200003e4 	.word	0x200003e4
 8002294:	20000118 	.word	0x20000118
 8002298:	200000c8 	.word	0x200000c8
 800229c:	20000438 	.word	0x20000438

080022a0 <MPU6050_Status>:
void MPU6050_Status(void){
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af04      	add	r7, sp, #16
	uint8_t buffer = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, WHOAMI, 1, &buffer, 1,1);
 80022aa:	2301      	movs	r3, #1
 80022ac:	9302      	str	r3, [sp, #8]
 80022ae:	2301      	movs	r3, #1
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2301      	movs	r3, #1
 80022b8:	2275      	movs	r2, #117	@ 0x75
 80022ba:	21d0      	movs	r1, #208	@ 0xd0
 80022bc:	480d      	ldr	r0, [pc, #52]	@ (80022f4 <MPU6050_Status+0x54>)
 80022be:	f002 fec9 	bl	8005054 <HAL_I2C_Mem_Read>
	MPU6050.S1.ID = buffer;
 80022c2:	79fa      	ldrb	r2, [r7, #7]
 80022c4:	4b0c      	ldr	r3, [pc, #48]	@ (80022f8 <MPU6050_Status+0x58>)
 80022c6:	701a      	strb	r2, [r3, #0]

	buffer = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, WHOAMI, 1, &buffer, 1,1);
 80022cc:	2301      	movs	r3, #1
 80022ce:	9302      	str	r3, [sp, #8]
 80022d0:	2301      	movs	r3, #1
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	1dfb      	adds	r3, r7, #7
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2301      	movs	r3, #1
 80022da:	2275      	movs	r2, #117	@ 0x75
 80022dc:	21d0      	movs	r1, #208	@ 0xd0
 80022de:	4807      	ldr	r0, [pc, #28]	@ (80022fc <MPU6050_Status+0x5c>)
 80022e0:	f002 feb8 	bl	8005054 <HAL_I2C_Mem_Read>
	MPU6050.S2.ID = buffer;
 80022e4:	79fa      	ldrb	r2, [r7, #7]
 80022e6:	4b04      	ldr	r3, [pc, #16]	@ (80022f8 <MPU6050_Status+0x58>)
 80022e8:	771a      	strb	r2, [r3, #28]
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200003e4 	.word	0x200003e4
 80022f8:	200000c8 	.word	0x200000c8
 80022fc:	20000438 	.word	0x20000438

08002300 <MPU6050_getData>:
void MPU6050_getData(void){
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	MPU6050_Status();
 8002304:	f7ff ffcc 	bl	80022a0 <MPU6050_Status>
	MPU6050_accel();
 8002308:	f7ff fdd6 	bl	8001eb8 <MPU6050_accel>
	MPU6050_gyro();
 800230c:	f7ff feac 	bl	8002068 <MPU6050_gyro>
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}

08002314 <ATTS_getAcc>:

#include "Modules/INS/attitude.h"

ATTS_data_t ATTS;

void ATTS_getAcc(void){
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
	MPU6050_getData();
 8002318:	f7ff fff2 	bl	8002300 <MPU6050_getData>
	if((MPU6050.S1.ID == 104)&&(MPU6050.S2.ID == 104)){
 800231c:	4b4c      	ldr	r3, [pc, #304]	@ (8002450 <ATTS_getAcc+0x13c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b68      	cmp	r3, #104	@ 0x68
 8002322:	d15e      	bne.n	80023e2 <ATTS_getAcc+0xce>
 8002324:	4b4a      	ldr	r3, [pc, #296]	@ (8002450 <ATTS_getAcc+0x13c>)
 8002326:	7f1b      	ldrb	r3, [r3, #28]
 8002328:	2b68      	cmp	r3, #104	@ 0x68
 800232a:	d15a      	bne.n	80023e2 <ATTS_getAcc+0xce>
		ATTS.Ax = (MPU6050.S1.Ax + MPU6050.S2.Ax)/2;
 800232c:	4b48      	ldr	r3, [pc, #288]	@ (8002450 <ATTS_getAcc+0x13c>)
 800232e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002332:	4b47      	ldr	r3, [pc, #284]	@ (8002450 <ATTS_getAcc+0x13c>)
 8002334:	edd3 7a08 	vldr	s15, [r3, #32]
 8002338:	ee37 7a27 	vadd.f32	s14, s14, s15
 800233c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002344:	4b43      	ldr	r3, [pc, #268]	@ (8002454 <ATTS_getAcc+0x140>)
 8002346:	edc3 7a00 	vstr	s15, [r3]
		ATTS.Ay = (MPU6050.S1.Ay + MPU6050.S2.Ay)/2;
 800234a:	4b41      	ldr	r3, [pc, #260]	@ (8002450 <ATTS_getAcc+0x13c>)
 800234c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002350:	4b3f      	ldr	r3, [pc, #252]	@ (8002450 <ATTS_getAcc+0x13c>)
 8002352:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800235a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800235e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002362:	4b3c      	ldr	r3, [pc, #240]	@ (8002454 <ATTS_getAcc+0x140>)
 8002364:	edc3 7a01 	vstr	s15, [r3, #4]
		ATTS.Az = (MPU6050.S1.Az + MPU6050.S2.Az)/2;
 8002368:	4b39      	ldr	r3, [pc, #228]	@ (8002450 <ATTS_getAcc+0x13c>)
 800236a:	ed93 7a03 	vldr	s14, [r3, #12]
 800236e:	4b38      	ldr	r3, [pc, #224]	@ (8002450 <ATTS_getAcc+0x13c>)
 8002370:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002374:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002378:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800237c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002380:	4b34      	ldr	r3, [pc, #208]	@ (8002454 <ATTS_getAcc+0x140>)
 8002382:	edc3 7a02 	vstr	s15, [r3, #8]

		ATTS.Gx = (MPU6050.S1.Gx + MPU6050.S2.Gx)/2;
 8002386:	4b32      	ldr	r3, [pc, #200]	@ (8002450 <ATTS_getAcc+0x13c>)
 8002388:	ed93 7a04 	vldr	s14, [r3, #16]
 800238c:	4b30      	ldr	r3, [pc, #192]	@ (8002450 <ATTS_getAcc+0x13c>)
 800238e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002396:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800239a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800239e:	4b2d      	ldr	r3, [pc, #180]	@ (8002454 <ATTS_getAcc+0x140>)
 80023a0:	edc3 7a03 	vstr	s15, [r3, #12]
		ATTS.Gy = (MPU6050.S1.Gy + MPU6050.S2.Gy)/2;
 80023a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002450 <ATTS_getAcc+0x13c>)
 80023a6:	ed93 7a05 	vldr	s14, [r3, #20]
 80023aa:	4b29      	ldr	r3, [pc, #164]	@ (8002450 <ATTS_getAcc+0x13c>)
 80023ac:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80023b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023b4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80023b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023bc:	4b25      	ldr	r3, [pc, #148]	@ (8002454 <ATTS_getAcc+0x140>)
 80023be:	edc3 7a04 	vstr	s15, [r3, #16]
		ATTS.Gz = (MPU6050.S1.Gz + MPU6050.S2.Gz)/2;
 80023c2:	4b23      	ldr	r3, [pc, #140]	@ (8002450 <ATTS_getAcc+0x13c>)
 80023c4:	ed93 7a06 	vldr	s14, [r3, #24]
 80023c8:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <ATTS_getAcc+0x13c>)
 80023ca:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80023ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80023d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023da:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <ATTS_getAcc+0x140>)
 80023dc:	edc3 7a05 	vstr	s15, [r3, #20]

		ATTS.Gx = MPU6050.S1.Gx;
		ATTS.Gy = MPU6050.S1.Gy;
		ATTS.Gz = MPU6050.S1.Gz;
	}
}
 80023e0:	e034      	b.n	800244c <ATTS_getAcc+0x138>
	else if(MPU6050.S1.ID != 104){
 80023e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002450 <ATTS_getAcc+0x13c>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b68      	cmp	r3, #104	@ 0x68
 80023e8:	d018      	beq.n	800241c <ATTS_getAcc+0x108>
		ATTS.Ax = MPU6050.S2.Ax;
 80023ea:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <ATTS_getAcc+0x13c>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a19      	ldr	r2, [pc, #100]	@ (8002454 <ATTS_getAcc+0x140>)
 80023f0:	6013      	str	r3, [r2, #0]
		ATTS.Ay = MPU6050.S2.Ay;
 80023f2:	4b17      	ldr	r3, [pc, #92]	@ (8002450 <ATTS_getAcc+0x13c>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	4a17      	ldr	r2, [pc, #92]	@ (8002454 <ATTS_getAcc+0x140>)
 80023f8:	6053      	str	r3, [r2, #4]
		ATTS.Az = MPU6050.S2.Az;
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <ATTS_getAcc+0x13c>)
 80023fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fe:	4a15      	ldr	r2, [pc, #84]	@ (8002454 <ATTS_getAcc+0x140>)
 8002400:	6093      	str	r3, [r2, #8]
		ATTS.Gx = MPU6050.S2.Gx;
 8002402:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <ATTS_getAcc+0x13c>)
 8002404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002406:	4a13      	ldr	r2, [pc, #76]	@ (8002454 <ATTS_getAcc+0x140>)
 8002408:	60d3      	str	r3, [r2, #12]
		ATTS.Gy = MPU6050.S2.Gy;
 800240a:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <ATTS_getAcc+0x13c>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	4a11      	ldr	r2, [pc, #68]	@ (8002454 <ATTS_getAcc+0x140>)
 8002410:	6113      	str	r3, [r2, #16]
		ATTS.Gz = MPU6050.S2.Gz;
 8002412:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <ATTS_getAcc+0x13c>)
 8002414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002416:	4a0f      	ldr	r2, [pc, #60]	@ (8002454 <ATTS_getAcc+0x140>)
 8002418:	6153      	str	r3, [r2, #20]
}
 800241a:	e017      	b.n	800244c <ATTS_getAcc+0x138>
		ATTS.Ax = MPU6050.S1.Ax;
 800241c:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <ATTS_getAcc+0x13c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	4a0c      	ldr	r2, [pc, #48]	@ (8002454 <ATTS_getAcc+0x140>)
 8002422:	6013      	str	r3, [r2, #0]
		ATTS.Ay = MPU6050.S1.Ay;
 8002424:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <ATTS_getAcc+0x13c>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <ATTS_getAcc+0x140>)
 800242a:	6053      	str	r3, [r2, #4]
		ATTS.Az = MPU6050.S1.Az;
 800242c:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <ATTS_getAcc+0x13c>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a08      	ldr	r2, [pc, #32]	@ (8002454 <ATTS_getAcc+0x140>)
 8002432:	6093      	str	r3, [r2, #8]
		ATTS.Gx = MPU6050.S1.Gx;
 8002434:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <ATTS_getAcc+0x13c>)
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	4a06      	ldr	r2, [pc, #24]	@ (8002454 <ATTS_getAcc+0x140>)
 800243a:	60d3      	str	r3, [r2, #12]
		ATTS.Gy = MPU6050.S1.Gy;
 800243c:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <ATTS_getAcc+0x13c>)
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	4a04      	ldr	r2, [pc, #16]	@ (8002454 <ATTS_getAcc+0x140>)
 8002442:	6113      	str	r3, [r2, #16]
		ATTS.Gz = MPU6050.S1.Gz;
 8002444:	4b02      	ldr	r3, [pc, #8]	@ (8002450 <ATTS_getAcc+0x13c>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a02      	ldr	r2, [pc, #8]	@ (8002454 <ATTS_getAcc+0x140>)
 800244a:	6153      	str	r3, [r2, #20]
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200000c8 	.word	0x200000c8
 8002454:	20000100 	.word	0x20000100

08002458 <MEMORY_init>:

#include "Modules/Status/memory.h"

MEMORY_u MEMORY;

void MEMORY_init(void){
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	Flash_Read(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 800245c:	2206      	movs	r2, #6
 800245e:	4903      	ldr	r1, [pc, #12]	@ (800246c <MEMORY_init+0x14>)
 8002460:	4803      	ldr	r0, [pc, #12]	@ (8002470 <MEMORY_init+0x18>)
 8002462:	f7ff fb5b 	bl	8001b1c <Flash_Read>
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000118 	.word	0x20000118
 8002470:	08020000 	.word	0x08020000

08002474 <MEMORY_write>:


void MEMORY_write(void){
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	Flash_Write(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 8002478:	2206      	movs	r2, #6
 800247a:	4905      	ldr	r1, [pc, #20]	@ (8002490 <MEMORY_write+0x1c>)
 800247c:	4805      	ldr	r0, [pc, #20]	@ (8002494 <MEMORY_write+0x20>)
 800247e:	f7ff faf5 	bl	8001a6c <Flash_Write>
	Flash_Read(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 8002482:	2206      	movs	r2, #6
 8002484:	4902      	ldr	r1, [pc, #8]	@ (8002490 <MEMORY_write+0x1c>)
 8002486:	4803      	ldr	r0, [pc, #12]	@ (8002494 <MEMORY_write+0x20>)
 8002488:	f7ff fb48 	bl	8001b1c <Flash_Read>
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000118 	.word	0x20000118
 8002494:	08020000 	.word	0x08020000

08002498 <init_task_1ms>:

#include "RTOS/RTOS.h"

//////////////////////////////INICIALIZACIÓN DE FUNCIONES///////////////////////////////////////

void init_task_1ms(void){
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
	MPU6050_init();
 800249c:	f7ff fc26 	bl	8001cec <MPU6050_init>
	MEMORY_init();
 80024a0:	f7ff ffda 	bl	8002458 <MEMORY_init>
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <init_task_5ms>:

void init_task_5ms(void){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	BMP280_init();
 80024ac:	f7ff fa16 	bl	80018dc <BMP280_init>
	MPU6050_calibration();		//TODO Quitar función cuando se tenga calibración por comandos
 80024b0:	f7ff fb52 	bl	8001b58 <MPU6050_calibration>
}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <init_task_10ms>:

void init_task_10ms(void){
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0

}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <init_task_50ms>:

void init_task_50ms(void){
 80024c6:	b480      	push	{r7}
 80024c8:	af00      	add	r7, sp, #0

}
 80024ca:	bf00      	nop
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <init_task_100ms>:

void init_task_100ms(void){
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0

}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <init_task_500ms>:

void init_task_500ms(void){
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <task_1ms>:

//////////////////////////////FUNCIONES PERIODICAS///////////////////////////////////////

void task_1ms(void){
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	ATTS_getAcc();
 80024f4:	f7ff ff0e 	bl	8002314 <ATTS_getAcc>
}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}

080024fc <task_5ms>:

void task_5ms(void){
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	BMP280_calculate();
 8002500:	f7ff fa10 	bl	8001924 <BMP280_calculate>
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}

08002508 <task_10ms>:

void task_10ms(void){
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <task_50ms>:

void task_50ms(void){
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <task_100ms>:

void task_100ms(void){
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0

}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <task_500ms>:

void task_500ms(void){
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002546:	463b      	mov	r3, r7
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002552:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <MX_ADC1_Init+0x98>)
 8002554:	4a21      	ldr	r2, [pc, #132]	@ (80025dc <MX_ADC1_Init+0x9c>)
 8002556:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002558:	4b1f      	ldr	r3, [pc, #124]	@ (80025d8 <MX_ADC1_Init+0x98>)
 800255a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800255e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002560:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <MX_ADC1_Init+0x98>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002566:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <MX_ADC1_Init+0x98>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800256c:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <MX_ADC1_Init+0x98>)
 800256e:	2200      	movs	r2, #0
 8002570:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002572:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <MX_ADC1_Init+0x98>)
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800257a:	4b17      	ldr	r3, [pc, #92]	@ (80025d8 <MX_ADC1_Init+0x98>)
 800257c:	2200      	movs	r2, #0
 800257e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002580:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <MX_ADC1_Init+0x98>)
 8002582:	4a17      	ldr	r2, [pc, #92]	@ (80025e0 <MX_ADC1_Init+0xa0>)
 8002584:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002586:	4b14      	ldr	r3, [pc, #80]	@ (80025d8 <MX_ADC1_Init+0x98>)
 8002588:	2200      	movs	r2, #0
 800258a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800258c:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <MX_ADC1_Init+0x98>)
 800258e:	2201      	movs	r2, #1
 8002590:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002592:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <MX_ADC1_Init+0x98>)
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800259a:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <MX_ADC1_Init+0x98>)
 800259c:	2201      	movs	r2, #1
 800259e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025a0:	480d      	ldr	r0, [pc, #52]	@ (80025d8 <MX_ADC1_Init+0x98>)
 80025a2:	f001 f827 	bl	80035f4 <HAL_ADC_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80025ac:	f000 fc34 	bl	8002e18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80025b0:	2301      	movs	r3, #1
 80025b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80025b4:	2301      	movs	r3, #1
 80025b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025bc:	463b      	mov	r3, r7
 80025be:	4619      	mov	r1, r3
 80025c0:	4805      	ldr	r0, [pc, #20]	@ (80025d8 <MX_ADC1_Init+0x98>)
 80025c2:	f001 f85b 	bl	800367c <HAL_ADC_ConfigChannel>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80025cc:	f000 fc24 	bl	8002e18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000130 	.word	0x20000130
 80025dc:	40012000 	.word	0x40012000
 80025e0:	0f000001 	.word	0x0f000001

080025e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	@ 0x28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a17      	ldr	r2, [pc, #92]	@ (8002660 <HAL_ADC_MspInit+0x7c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d127      	bne.n	8002656 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	4b16      	ldr	r3, [pc, #88]	@ (8002664 <HAL_ADC_MspInit+0x80>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260e:	4a15      	ldr	r2, [pc, #84]	@ (8002664 <HAL_ADC_MspInit+0x80>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002614:	6453      	str	r3, [r2, #68]	@ 0x44
 8002616:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <HAL_ADC_MspInit+0x80>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	4b0f      	ldr	r3, [pc, #60]	@ (8002664 <HAL_ADC_MspInit+0x80>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	4a0e      	ldr	r2, [pc, #56]	@ (8002664 <HAL_ADC_MspInit+0x80>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6313      	str	r3, [r2, #48]	@ 0x30
 8002632:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <HAL_ADC_MspInit+0x80>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_VBat_Pin;
 800263e:	2302      	movs	r3, #2
 8002640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002642:	2303      	movs	r3, #3
 8002644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VBat_GPIO_Port, &GPIO_InitStruct);
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	4619      	mov	r1, r3
 8002650:	4805      	ldr	r0, [pc, #20]	@ (8002668 <HAL_ADC_MspInit+0x84>)
 8002652:	f002 f923 	bl	800489c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002656:	bf00      	nop
 8002658:	3728      	adds	r7, #40	@ 0x28
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40012000 	.word	0x40012000
 8002664:	40023800 	.word	0x40023800
 8002668:	40020000 	.word	0x40020000

0800266c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <MX_DMA_Init+0x3c>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	4a0b      	ldr	r2, [pc, #44]	@ (80026a8 <MX_DMA_Init+0x3c>)
 800267c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002680:	6313      	str	r3, [r2, #48]	@ 0x30
 8002682:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <MX_DMA_Init+0x3c>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800268a:	607b      	str	r3, [r7, #4]
 800268c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2105      	movs	r1, #5
 8002692:	200e      	movs	r0, #14
 8002694:	f001 fad8 	bl	8003c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002698:	200e      	movs	r0, #14
 800269a:	f001 faf1 	bl	8003c80 <HAL_NVIC_EnableIRQ>

}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800

080026ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4a07      	ldr	r2, [pc, #28]	@ (80026d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80026bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4a06      	ldr	r2, [pc, #24]	@ (80026dc <vApplicationGetIdleTaskMemory+0x30>)
 80026c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2280      	movs	r2, #128	@ 0x80
 80026c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000190 	.word	0x20000190
 80026dc:	200001e4 	.word	0x200001e4

080026e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80026e0:	b5b0      	push	{r4, r5, r7, lr}
 80026e2:	b0aa      	sub	sp, #168	@ 0xa8
 80026e4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_5ms */
  osThreadDef(Task_5ms, Task5ms, osPriorityNormal, 0, 128);
 80026e6:	4b3a      	ldr	r3, [pc, #232]	@ (80027d0 <MX_FREERTOS_Init+0xf0>)
 80026e8:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 80026ec:	461d      	mov	r5, r3
 80026ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_5msHandle = osThreadCreate(osThread(Task_5ms), NULL);
 80026fa:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f005 fb52 	bl	8007daa <osThreadCreate>
 8002706:	4603      	mov	r3, r0
 8002708:	4a32      	ldr	r2, [pc, #200]	@ (80027d4 <MX_FREERTOS_Init+0xf4>)
 800270a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_10ms */
  osThreadDef(Task_10ms, Task10ms, osPriorityNormal, 0, 128);
 800270c:	4b32      	ldr	r3, [pc, #200]	@ (80027d8 <MX_FREERTOS_Init+0xf8>)
 800270e:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8002712:	461d      	mov	r5, r3
 8002714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002718:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800271c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_10msHandle = osThreadCreate(osThread(Task_10ms), NULL);
 8002720:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f005 fb3f 	bl	8007daa <osThreadCreate>
 800272c:	4603      	mov	r3, r0
 800272e:	4a2b      	ldr	r2, [pc, #172]	@ (80027dc <MX_FREERTOS_Init+0xfc>)
 8002730:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_50ms */
  osThreadDef(Task_50ms, Task50ms, osPriorityNormal, 0, 128);
 8002732:	4b2b      	ldr	r3, [pc, #172]	@ (80027e0 <MX_FREERTOS_Init+0x100>)
 8002734:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8002738:	461d      	mov	r5, r3
 800273a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800273c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800273e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002742:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_50msHandle = osThreadCreate(osThread(Task_50ms), NULL);
 8002746:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f005 fb2c 	bl	8007daa <osThreadCreate>
 8002752:	4603      	mov	r3, r0
 8002754:	4a23      	ldr	r2, [pc, #140]	@ (80027e4 <MX_FREERTOS_Init+0x104>)
 8002756:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_100ms */
  osThreadDef(Task_100ms, Task100ms, osPriorityNormal, 0, 128);
 8002758:	4b23      	ldr	r3, [pc, #140]	@ (80027e8 <MX_FREERTOS_Init+0x108>)
 800275a:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800275e:	461d      	mov	r5, r3
 8002760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002764:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002768:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_100msHandle = osThreadCreate(osThread(Task_100ms), NULL);
 800276c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f005 fb19 	bl	8007daa <osThreadCreate>
 8002778:	4603      	mov	r3, r0
 800277a:	4a1c      	ldr	r2, [pc, #112]	@ (80027ec <MX_FREERTOS_Init+0x10c>)
 800277c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_500ms */
  osThreadDef(Task_500ms, Task500ms, osPriorityNormal, 0, 128);
 800277e:	4b1c      	ldr	r3, [pc, #112]	@ (80027f0 <MX_FREERTOS_Init+0x110>)
 8002780:	f107 041c 	add.w	r4, r7, #28
 8002784:	461d      	mov	r5, r3
 8002786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800278a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800278e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_500msHandle = osThreadCreate(osThread(Task_500ms), NULL);
 8002792:	f107 031c 	add.w	r3, r7, #28
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f005 fb06 	bl	8007daa <osThreadCreate>
 800279e:	4603      	mov	r3, r0
 80027a0:	4a14      	ldr	r2, [pc, #80]	@ (80027f4 <MX_FREERTOS_Init+0x114>)
 80027a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_1ms */
  osThreadDef(Task_1ms, Task1ms, osPriorityNormal, 0, 128);
 80027a4:	4b14      	ldr	r3, [pc, #80]	@ (80027f8 <MX_FREERTOS_Init+0x118>)
 80027a6:	463c      	mov	r4, r7
 80027a8:	461d      	mov	r5, r3
 80027aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1msHandle = osThreadCreate(osThread(Task_1ms), NULL);
 80027b6:	463b      	mov	r3, r7
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f005 faf5 	bl	8007daa <osThreadCreate>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4a0e      	ldr	r2, [pc, #56]	@ (80027fc <MX_FREERTOS_Init+0x11c>)
 80027c4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80027c6:	bf00      	nop
 80027c8:	37a8      	adds	r7, #168	@ 0xa8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bdb0      	pop	{r4, r5, r7, pc}
 80027ce:	bf00      	nop
 80027d0:	080096a8 	.word	0x080096a8
 80027d4:	20000178 	.word	0x20000178
 80027d8:	080096d0 	.word	0x080096d0
 80027dc:	2000017c 	.word	0x2000017c
 80027e0:	080096f8 	.word	0x080096f8
 80027e4:	20000180 	.word	0x20000180
 80027e8:	08009720 	.word	0x08009720
 80027ec:	20000184 	.word	0x20000184
 80027f0:	08009748 	.word	0x08009748
 80027f4:	20000188 	.word	0x20000188
 80027f8:	08009770 	.word	0x08009770
 80027fc:	2000018c 	.word	0x2000018c

08002800 <Task5ms>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task5ms */
void Task5ms(void const * argument)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task5ms */
	init_task_5ms();
 8002808:	f7ff fe4e 	bl	80024a8 <init_task_5ms>
  /* Infinite loop */
  for(;;)
  {
	task_5ms();
 800280c:	f7ff fe76 	bl	80024fc <task_5ms>
    osDelay(5);
 8002810:	2005      	movs	r0, #5
 8002812:	f005 fb16 	bl	8007e42 <osDelay>
	task_5ms();
 8002816:	bf00      	nop
 8002818:	e7f8      	b.n	800280c <Task5ms+0xc>

0800281a <Task10ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task10ms */
void Task10ms(void const * argument)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task10ms */
	init_task_10ms();
 8002822:	f7ff fe49 	bl	80024b8 <init_task_10ms>
  /* Infinite loop */
  for(;;)
  {
	task_10ms();
 8002826:	f7ff fe6f 	bl	8002508 <task_10ms>
    osDelay(10);
 800282a:	200a      	movs	r0, #10
 800282c:	f005 fb09 	bl	8007e42 <osDelay>
	task_10ms();
 8002830:	bf00      	nop
 8002832:	e7f8      	b.n	8002826 <Task10ms+0xc>

08002834 <Task50ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task50ms */
void Task50ms(void const * argument)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task50ms */
	init_task_50ms();
 800283c:	f7ff fe43 	bl	80024c6 <init_task_50ms>
  /* Infinite loop */
  for(;;)
  {
	task_50ms();
 8002840:	f7ff fe69 	bl	8002516 <task_50ms>
    osDelay(50);
 8002844:	2032      	movs	r0, #50	@ 0x32
 8002846:	f005 fafc 	bl	8007e42 <osDelay>
	task_50ms();
 800284a:	bf00      	nop
 800284c:	e7f8      	b.n	8002840 <Task50ms+0xc>

0800284e <Task100ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task100ms */
void Task100ms(void const * argument)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task100ms */
	init_task_100ms();
 8002856:	f7ff fe3d 	bl	80024d4 <init_task_100ms>
  /* Infinite loop */
  for(;;)
  {
	task_100ms();
 800285a:	f7ff fe63 	bl	8002524 <task_100ms>
    osDelay(100);
 800285e:	2064      	movs	r0, #100	@ 0x64
 8002860:	f005 faef 	bl	8007e42 <osDelay>
	task_100ms();
 8002864:	bf00      	nop
 8002866:	e7f8      	b.n	800285a <Task100ms+0xc>

08002868 <Task500ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task500ms */
void Task500ms(void const * argument)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task500ms */
	init_task_500ms();
 8002870:	f7ff fe37 	bl	80024e2 <init_task_500ms>
  /* Infinite loop */
  for(;;)
  {
	task_500ms();
 8002874:	f7ff fe5d 	bl	8002532 <task_500ms>
    osDelay(500);
 8002878:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800287c:	f005 fae1 	bl	8007e42 <osDelay>
	task_500ms();
 8002880:	bf00      	nop
 8002882:	e7f7      	b.n	8002874 <Task500ms+0xc>

08002884 <Task1ms>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1ms */
void Task1ms(void const * argument)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1ms */
	init_task_1ms();
 800288c:	f7ff fe04 	bl	8002498 <init_task_1ms>
  /* Infinite loop */
  for(;;)
  {
	task_1ms();
 8002890:	f7ff fe2e 	bl	80024f0 <task_1ms>
    osDelay(1);
 8002894:	2001      	movs	r0, #1
 8002896:	f005 fad4 	bl	8007e42 <osDelay>
	task_1ms();
 800289a:	bf00      	nop
 800289c:	e7f8      	b.n	8002890 <Task1ms+0xc>
	...

080028a0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	@ 0x28
 80028a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
 80028b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	4b4f      	ldr	r3, [pc, #316]	@ (80029f8 <MX_GPIO_Init+0x158>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	4a4e      	ldr	r2, [pc, #312]	@ (80029f8 <MX_GPIO_Init+0x158>)
 80028c0:	f043 0304 	orr.w	r3, r3, #4
 80028c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c6:	4b4c      	ldr	r3, [pc, #304]	@ (80029f8 <MX_GPIO_Init+0x158>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	4b48      	ldr	r3, [pc, #288]	@ (80029f8 <MX_GPIO_Init+0x158>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	4a47      	ldr	r2, [pc, #284]	@ (80029f8 <MX_GPIO_Init+0x158>)
 80028dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e2:	4b45      	ldr	r3, [pc, #276]	@ (80029f8 <MX_GPIO_Init+0x158>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	4b41      	ldr	r3, [pc, #260]	@ (80029f8 <MX_GPIO_Init+0x158>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4a40      	ldr	r2, [pc, #256]	@ (80029f8 <MX_GPIO_Init+0x158>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fe:	4b3e      	ldr	r3, [pc, #248]	@ (80029f8 <MX_GPIO_Init+0x158>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	4b3a      	ldr	r3, [pc, #232]	@ (80029f8 <MX_GPIO_Init+0x158>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	4a39      	ldr	r2, [pc, #228]	@ (80029f8 <MX_GPIO_Init+0x158>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	6313      	str	r3, [r2, #48]	@ 0x30
 800291a:	4b37      	ldr	r3, [pc, #220]	@ (80029f8 <MX_GPIO_Init+0x158>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 8002926:	2200      	movs	r2, #0
 8002928:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800292c:	4833      	ldr	r0, [pc, #204]	@ (80029fc <MX_GPIO_Init+0x15c>)
 800292e:	f002 f939 	bl	8004ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|BMP_CS_Pin, GPIO_PIN_RESET);
 8002932:	2200      	movs	r2, #0
 8002934:	2105      	movs	r1, #5
 8002936:	4832      	ldr	r0, [pc, #200]	@ (8002a00 <MX_GPIO_Init+0x160>)
 8002938:	f002 f934 	bl	8004ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, uLed_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 800293c:	2200      	movs	r2, #0
 800293e:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8002942:	4830      	ldr	r0, [pc, #192]	@ (8002a04 <MX_GPIO_Init+0x164>)
 8002944:	f002 f92e 	bl	8004ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CS_Pin;
 8002948:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800294c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800294e:	2301      	movs	r3, #1
 8002950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CS_GPIO_Port, &GPIO_InitStruct);
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4619      	mov	r1, r3
 8002960:	4826      	ldr	r0, [pc, #152]	@ (80029fc <MX_GPIO_Init+0x15c>)
 8002962:	f001 ff9b 	bl	800489c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002966:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800296a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800296c:	2303      	movs	r3, #3
 800296e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4619      	mov	r1, r3
 800297a:	4820      	ldr	r0, [pc, #128]	@ (80029fc <MX_GPIO_Init+0x15c>)
 800297c:	f001 ff8e 	bl	800489c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_12;
 8002980:	f241 0311 	movw	r3, #4113	@ 0x1011
 8002984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002986:	2303      	movs	r3, #3
 8002988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4619      	mov	r1, r3
 8002994:	481b      	ldr	r0, [pc, #108]	@ (8002a04 <MX_GPIO_Init+0x164>)
 8002996:	f001 ff81 	bl	800489c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|BMP_CS_Pin;
 800299a:	2305      	movs	r3, #5
 800299c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800299e:	2301      	movs	r3, #1
 80029a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	4813      	ldr	r0, [pc, #76]	@ (8002a00 <MX_GPIO_Init+0x160>)
 80029b2:	f001 ff73 	bl	800489c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 80029b6:	f240 2302 	movw	r3, #514	@ 0x202
 80029ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029bc:	2303      	movs	r3, #3
 80029be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	4619      	mov	r1, r3
 80029ca:	480d      	ldr	r0, [pc, #52]	@ (8002a00 <MX_GPIO_Init+0x160>)
 80029cc:	f001 ff66 	bl	800489c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = uLed_Pin|NRF_CE_Pin;
 80029d0:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 80029d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d6:	2301      	movs	r3, #1
 80029d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029de:	2300      	movs	r3, #0
 80029e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	4619      	mov	r1, r3
 80029e8:	4806      	ldr	r0, [pc, #24]	@ (8002a04 <MX_GPIO_Init+0x164>)
 80029ea:	f001 ff57 	bl	800489c <HAL_GPIO_Init>

}
 80029ee:	bf00      	nop
 80029f0:	3728      	adds	r7, #40	@ 0x28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40020800 	.word	0x40020800
 8002a00:	40020400 	.word	0x40020400
 8002a04:	40020000 	.word	0x40020000

08002a08 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a0c:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <MX_I2C1_Init+0x50>)
 8002a0e:	4a13      	ldr	r2, [pc, #76]	@ (8002a5c <MX_I2C1_Init+0x54>)
 8002a10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002a12:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <MX_I2C1_Init+0x50>)
 8002a14:	4a12      	ldr	r2, [pc, #72]	@ (8002a60 <MX_I2C1_Init+0x58>)
 8002a16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a18:	4b0f      	ldr	r3, [pc, #60]	@ (8002a58 <MX_I2C1_Init+0x50>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <MX_I2C1_Init+0x50>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a24:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <MX_I2C1_Init+0x50>)
 8002a26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a58 <MX_I2C1_Init+0x50>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002a32:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <MX_I2C1_Init+0x50>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a38:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <MX_I2C1_Init+0x50>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a3e:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <MX_I2C1_Init+0x50>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a44:	4804      	ldr	r0, [pc, #16]	@ (8002a58 <MX_I2C1_Init+0x50>)
 8002a46:	f002 f8c7 	bl	8004bd8 <HAL_I2C_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002a50:	f000 f9e2 	bl	8002e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	200003e4 	.word	0x200003e4
 8002a5c:	40005400 	.word	0x40005400
 8002a60:	000186a0 	.word	0x000186a0

08002a64 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002a68:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <MX_I2C2_Init+0x50>)
 8002a6a:	4a13      	ldr	r2, [pc, #76]	@ (8002ab8 <MX_I2C2_Init+0x54>)
 8002a6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002a6e:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <MX_I2C2_Init+0x50>)
 8002a70:	4a12      	ldr	r2, [pc, #72]	@ (8002abc <MX_I2C2_Init+0x58>)
 8002a72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab4 <MX_I2C2_Init+0x50>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <MX_I2C2_Init+0x50>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a80:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <MX_I2C2_Init+0x50>)
 8002a82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a86:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a88:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab4 <MX_I2C2_Init+0x50>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002a8e:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <MX_I2C2_Init+0x50>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a94:	4b07      	ldr	r3, [pc, #28]	@ (8002ab4 <MX_I2C2_Init+0x50>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a9a:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <MX_I2C2_Init+0x50>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002aa0:	4804      	ldr	r0, [pc, #16]	@ (8002ab4 <MX_I2C2_Init+0x50>)
 8002aa2:	f002 f899 	bl	8004bd8 <HAL_I2C_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002aac:	f000 f9b4 	bl	8002e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000438 	.word	0x20000438
 8002ab8:	40005800 	.word	0x40005800
 8002abc:	000186a0 	.word	0x000186a0

08002ac0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002ac4:	4b12      	ldr	r3, [pc, #72]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002ac6:	4a13      	ldr	r2, [pc, #76]	@ (8002b14 <MX_I2C3_Init+0x54>)
 8002ac8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002aca:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002acc:	4a12      	ldr	r2, [pc, #72]	@ (8002b18 <MX_I2C3_Init+0x58>)
 8002ace:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002adc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002ade:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ae2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002af0:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002af6:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002afc:	4804      	ldr	r0, [pc, #16]	@ (8002b10 <MX_I2C3_Init+0x50>)
 8002afe:	f002 f86b 	bl	8004bd8 <HAL_I2C_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002b08:	f000 f986 	bl	8002e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	2000048c 	.word	0x2000048c
 8002b14:	40005c00 	.word	0x40005c00
 8002b18:	000186a0 	.word	0x000186a0

08002b1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08e      	sub	sp, #56	@ 0x38
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a63      	ldr	r2, [pc, #396]	@ (8002cc8 <HAL_I2C_MspInit+0x1ac>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d12c      	bne.n	8002b98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	623b      	str	r3, [r7, #32]
 8002b42:	4b62      	ldr	r3, [pc, #392]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	4a61      	ldr	r2, [pc, #388]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002b48:	f043 0302 	orr.w	r3, r3, #2
 8002b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4e:	4b5f      	ldr	r3, [pc, #380]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	623b      	str	r3, [r7, #32]
 8002b58:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b5a:	23c0      	movs	r3, #192	@ 0xc0
 8002b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b5e:	2312      	movs	r3, #18
 8002b60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b66:	2303      	movs	r3, #3
 8002b68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b72:	4619      	mov	r1, r3
 8002b74:	4856      	ldr	r0, [pc, #344]	@ (8002cd0 <HAL_I2C_MspInit+0x1b4>)
 8002b76:	f001 fe91 	bl	800489c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	4b53      	ldr	r3, [pc, #332]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b82:	4a52      	ldr	r2, [pc, #328]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002b84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8a:	4b50      	ldr	r3, [pc, #320]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002b96:	e093      	b.n	8002cc0 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a4d      	ldr	r2, [pc, #308]	@ (8002cd4 <HAL_I2C_MspInit+0x1b8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d13d      	bne.n	8002c1e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	4b49      	ldr	r3, [pc, #292]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	4a48      	ldr	r2, [pc, #288]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb2:	4b46      	ldr	r3, [pc, #280]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bc4:	2312      	movs	r3, #18
 8002bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bd8:	4619      	mov	r1, r3
 8002bda:	483d      	ldr	r0, [pc, #244]	@ (8002cd0 <HAL_I2C_MspInit+0x1b4>)
 8002bdc:	f001 fe5e 	bl	800489c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002be0:	2308      	movs	r3, #8
 8002be2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002be4:	2312      	movs	r3, #18
 8002be6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002bf0:	2309      	movs	r3, #9
 8002bf2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4835      	ldr	r0, [pc, #212]	@ (8002cd0 <HAL_I2C_MspInit+0x1b4>)
 8002bfc:	f001 fe4e 	bl	800489c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	4b31      	ldr	r3, [pc, #196]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	4a30      	ldr	r2, [pc, #192]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002c0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c10:	4b2e      	ldr	r3, [pc, #184]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	697b      	ldr	r3, [r7, #20]
}
 8002c1c:	e050      	b.n	8002cc0 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C3)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a2d      	ldr	r2, [pc, #180]	@ (8002cd8 <HAL_I2C_MspInit+0x1bc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d14b      	bne.n	8002cc0 <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c28:	2300      	movs	r3, #0
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	4b27      	ldr	r3, [pc, #156]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c30:	4a26      	ldr	r2, [pc, #152]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c38:	4b24      	ldr	r3, [pc, #144]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	4b20      	ldr	r3, [pc, #128]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002c4e:	f043 0302 	orr.w	r3, r3, #2
 8002c52:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAG_SCL_Pin;
 8002c60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c66:	2312      	movs	r3, #18
 8002c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c72:	2304      	movs	r3, #4
 8002c74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SCL_GPIO_Port, &GPIO_InitStruct);
 8002c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4817      	ldr	r0, [pc, #92]	@ (8002cdc <HAL_I2C_MspInit+0x1c0>)
 8002c7e:	f001 fe0d 	bl	800489c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAG_SDA_Pin;
 8002c82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c88:	2312      	movs	r3, #18
 8002c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c90:	2303      	movs	r3, #3
 8002c92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002c94:	2309      	movs	r3, #9
 8002c96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SDA_GPIO_Port, &GPIO_InitStruct);
 8002c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	480c      	ldr	r0, [pc, #48]	@ (8002cd0 <HAL_I2C_MspInit+0x1b4>)
 8002ca0:	f001 fdfc 	bl	800489c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	4a07      	ldr	r2, [pc, #28]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002cae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <HAL_I2C_MspInit+0x1b0>)
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	3738      	adds	r7, #56	@ 0x38
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40005400 	.word	0x40005400
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40020400 	.word	0x40020400
 8002cd4:	40005800 	.word	0x40005800
 8002cd8:	40005c00 	.word	0x40005c00
 8002cdc:	40020000 	.word	0x40020000

08002ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ce4:	f000 fc20 	bl	8003528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ce8:	f000 f81c 	bl	8002d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cec:	f7ff fdd8 	bl	80028a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002cf0:	f7ff fcbc 	bl	800266c <MX_DMA_Init>
  MX_ADC1_Init();
 8002cf4:	f7ff fc24 	bl	8002540 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002cf8:	f7ff fe86 	bl	8002a08 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002cfc:	f7ff feb2 	bl	8002a64 <MX_I2C2_Init>
  MX_I2C3_Init();
 8002d00:	f7ff fede 	bl	8002ac0 <MX_I2C3_Init>
  MX_SPI1_Init();
 8002d04:	f000 f88e 	bl	8002e24 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002d08:	f000 f8c2 	bl	8002e90 <MX_SPI2_Init>
  MX_SPI3_Init();
 8002d0c:	f000 f8f6 	bl	8002efc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8002d10:	f000 fb10 	bl	8003334 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002d14:	f000 fb38 	bl	8003388 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002d18:	f7ff fce2 	bl	80026e0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002d1c:	f005 f83e 	bl	8007d9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <main+0x40>

08002d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b094      	sub	sp, #80	@ 0x50
 8002d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d2a:	f107 0320 	add.w	r3, r7, #32
 8002d2e:	2230      	movs	r2, #48	@ 0x30
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f006 fa76 	bl	8009224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d38:	f107 030c 	add.w	r3, r7, #12
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	4b27      	ldr	r3, [pc, #156]	@ (8002dec <SystemClock_Config+0xc8>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d50:	4a26      	ldr	r2, [pc, #152]	@ (8002dec <SystemClock_Config+0xc8>)
 8002d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d56:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d58:	4b24      	ldr	r3, [pc, #144]	@ (8002dec <SystemClock_Config+0xc8>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d64:	2300      	movs	r3, #0
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	4b21      	ldr	r3, [pc, #132]	@ (8002df0 <SystemClock_Config+0xcc>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a20      	ldr	r2, [pc, #128]	@ (8002df0 <SystemClock_Config+0xcc>)
 8002d6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	4b1e      	ldr	r3, [pc, #120]	@ (8002df0 <SystemClock_Config+0xcc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d7c:	607b      	str	r3, [r7, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d80:	2301      	movs	r3, #1
 8002d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002d94:	230c      	movs	r3, #12
 8002d96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002d98:	2360      	movs	r3, #96	@ 0x60
 8002d9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002da0:	2304      	movs	r3, #4
 8002da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da4:	f107 0320 	add.w	r3, r7, #32
 8002da8:	4618      	mov	r0, r3
 8002daa:	f002 ff39 	bl	8005c20 <HAL_RCC_OscConfig>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002db4:	f000 f830 	bl	8002e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002db8:	230f      	movs	r3, #15
 8002dba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002dce:	f107 030c 	add.w	r3, r7, #12
 8002dd2:	2103      	movs	r1, #3
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 f99b 	bl	8006110 <HAL_RCC_ClockConfig>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002de0:	f000 f81a 	bl	8002e18 <Error_Handler>
  }
}
 8002de4:	bf00      	nop
 8002de6:	3750      	adds	r7, #80	@ 0x50
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40007000 	.word	0x40007000

08002df4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a04      	ldr	r2, [pc, #16]	@ (8002e14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d101      	bne.n	8002e0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002e06:	f000 fbb1 	bl	800356c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40014800 	.word	0x40014800

08002e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e1c:	b672      	cpsid	i
}
 8002e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e20:	bf00      	nop
 8002e22:	e7fd      	b.n	8002e20 <Error_Handler+0x8>

08002e24 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002e28:	4b17      	ldr	r3, [pc, #92]	@ (8002e88 <MX_SPI1_Init+0x64>)
 8002e2a:	4a18      	ldr	r2, [pc, #96]	@ (8002e8c <MX_SPI1_Init+0x68>)
 8002e2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e2e:	4b16      	ldr	r3, [pc, #88]	@ (8002e88 <MX_SPI1_Init+0x64>)
 8002e30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e36:	4b14      	ldr	r3, [pc, #80]	@ (8002e88 <MX_SPI1_Init+0x64>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e3c:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <MX_SPI1_Init+0x64>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e42:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <MX_SPI1_Init+0x64>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e48:	4b0f      	ldr	r3, [pc, #60]	@ (8002e88 <MX_SPI1_Init+0x64>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <MX_SPI1_Init+0x64>)
 8002e50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e56:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <MX_SPI1_Init+0x64>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e88 <MX_SPI1_Init+0x64>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e62:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <MX_SPI1_Init+0x64>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e68:	4b07      	ldr	r3, [pc, #28]	@ (8002e88 <MX_SPI1_Init+0x64>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <MX_SPI1_Init+0x64>)
 8002e70:	220a      	movs	r2, #10
 8002e72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e74:	4804      	ldr	r0, [pc, #16]	@ (8002e88 <MX_SPI1_Init+0x64>)
 8002e76:	f003 fb5d 	bl	8006534 <HAL_SPI_Init>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e80:	f7ff ffca 	bl	8002e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	200004e0 	.word	0x200004e0
 8002e8c:	40013000 	.word	0x40013000

08002e90 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002e94:	4b17      	ldr	r3, [pc, #92]	@ (8002ef4 <MX_SPI2_Init+0x64>)
 8002e96:	4a18      	ldr	r2, [pc, #96]	@ (8002ef8 <MX_SPI2_Init+0x68>)
 8002e98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002e9a:	4b16      	ldr	r3, [pc, #88]	@ (8002ef4 <MX_SPI2_Init+0x64>)
 8002e9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ea0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ea2:	4b14      	ldr	r3, [pc, #80]	@ (8002ef4 <MX_SPI2_Init+0x64>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ea8:	4b12      	ldr	r3, [pc, #72]	@ (8002ef4 <MX_SPI2_Init+0x64>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eae:	4b11      	ldr	r3, [pc, #68]	@ (8002ef4 <MX_SPI2_Init+0x64>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef4 <MX_SPI2_Init+0x64>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002eba:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef4 <MX_SPI2_Init+0x64>)
 8002ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ec0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef4 <MX_SPI2_Init+0x64>)
 8002ec4:	2218      	movs	r2, #24
 8002ec6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef4 <MX_SPI2_Init+0x64>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ece:	4b09      	ldr	r3, [pc, #36]	@ (8002ef4 <MX_SPI2_Init+0x64>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ed4:	4b07      	ldr	r3, [pc, #28]	@ (8002ef4 <MX_SPI2_Init+0x64>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002eda:	4b06      	ldr	r3, [pc, #24]	@ (8002ef4 <MX_SPI2_Init+0x64>)
 8002edc:	220a      	movs	r2, #10
 8002ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ee0:	4804      	ldr	r0, [pc, #16]	@ (8002ef4 <MX_SPI2_Init+0x64>)
 8002ee2:	f003 fb27 	bl	8006534 <HAL_SPI_Init>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002eec:	f7ff ff94 	bl	8002e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000538 	.word	0x20000538
 8002ef8:	40003800 	.word	0x40003800

08002efc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002f00:	4b17      	ldr	r3, [pc, #92]	@ (8002f60 <MX_SPI3_Init+0x64>)
 8002f02:	4a18      	ldr	r2, [pc, #96]	@ (8002f64 <MX_SPI3_Init+0x68>)
 8002f04:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002f06:	4b16      	ldr	r3, [pc, #88]	@ (8002f60 <MX_SPI3_Init+0x64>)
 8002f08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002f0c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002f0e:	4b14      	ldr	r3, [pc, #80]	@ (8002f60 <MX_SPI3_Init+0x64>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f14:	4b12      	ldr	r3, [pc, #72]	@ (8002f60 <MX_SPI3_Init+0x64>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f1a:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <MX_SPI3_Init+0x64>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f20:	4b0f      	ldr	r3, [pc, #60]	@ (8002f60 <MX_SPI3_Init+0x64>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002f26:	4b0e      	ldr	r3, [pc, #56]	@ (8002f60 <MX_SPI3_Init+0x64>)
 8002f28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f2c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f60 <MX_SPI3_Init+0x64>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f34:	4b0a      	ldr	r3, [pc, #40]	@ (8002f60 <MX_SPI3_Init+0x64>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f3a:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <MX_SPI3_Init+0x64>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f40:	4b07      	ldr	r3, [pc, #28]	@ (8002f60 <MX_SPI3_Init+0x64>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002f46:	4b06      	ldr	r3, [pc, #24]	@ (8002f60 <MX_SPI3_Init+0x64>)
 8002f48:	220a      	movs	r2, #10
 8002f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002f4c:	4804      	ldr	r0, [pc, #16]	@ (8002f60 <MX_SPI3_Init+0x64>)
 8002f4e:	f003 faf1 	bl	8006534 <HAL_SPI_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002f58:	f7ff ff5e 	bl	8002e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002f5c:	bf00      	nop
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000590 	.word	0x20000590
 8002f64:	40003c00 	.word	0x40003c00

08002f68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08e      	sub	sp, #56	@ 0x38
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a6e      	ldr	r2, [pc, #440]	@ (8003140 <HAL_SPI_MspInit+0x1d8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d12c      	bne.n	8002fe4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
 8002f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 8002f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f92:	4a6c      	ldr	r2, [pc, #432]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 8002f94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fa2:	623b      	str	r3, [r7, #32]
 8002fa4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	4b66      	ldr	r3, [pc, #408]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	4a65      	ldr	r2, [pc, #404]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fb6:	4b63      	ldr	r3, [pc, #396]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 8002fc2:	23e0      	movs	r3, #224	@ 0xe0
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fd2:	2305      	movs	r3, #5
 8002fd4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fda:	4619      	mov	r1, r3
 8002fdc:	485a      	ldr	r0, [pc, #360]	@ (8003148 <HAL_SPI_MspInit+0x1e0>)
 8002fde:	f001 fc5d 	bl	800489c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002fe2:	e0a9      	b.n	8003138 <HAL_SPI_MspInit+0x1d0>
  else if(spiHandle->Instance==SPI2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a58      	ldr	r2, [pc, #352]	@ (800314c <HAL_SPI_MspInit+0x1e4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d162      	bne.n	80030b4 <HAL_SPI_MspInit+0x14c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	4b54      	ldr	r3, [pc, #336]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	4a53      	ldr	r2, [pc, #332]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 8002ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ffe:	4b51      	ldr	r3, [pc, #324]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003006:	61bb      	str	r3, [r7, #24]
 8003008:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	4b4d      	ldr	r3, [pc, #308]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	4a4c      	ldr	r2, [pc, #304]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	6313      	str	r3, [r2, #48]	@ 0x30
 800301a:	4b4a      	ldr	r3, [pc, #296]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 8003026:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302c:	2302      	movs	r3, #2
 800302e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003034:	2303      	movs	r3, #3
 8003036:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003038:	2305      	movs	r3, #5
 800303a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003040:	4619      	mov	r1, r3
 8003042:	4843      	ldr	r0, [pc, #268]	@ (8003150 <HAL_SPI_MspInit+0x1e8>)
 8003044:	f001 fc2a 	bl	800489c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8003048:	4b42      	ldr	r3, [pc, #264]	@ (8003154 <HAL_SPI_MspInit+0x1ec>)
 800304a:	4a43      	ldr	r2, [pc, #268]	@ (8003158 <HAL_SPI_MspInit+0x1f0>)
 800304c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800304e:	4b41      	ldr	r3, [pc, #260]	@ (8003154 <HAL_SPI_MspInit+0x1ec>)
 8003050:	2200      	movs	r2, #0
 8003052:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003054:	4b3f      	ldr	r3, [pc, #252]	@ (8003154 <HAL_SPI_MspInit+0x1ec>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800305a:	4b3e      	ldr	r3, [pc, #248]	@ (8003154 <HAL_SPI_MspInit+0x1ec>)
 800305c:	2200      	movs	r2, #0
 800305e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003060:	4b3c      	ldr	r3, [pc, #240]	@ (8003154 <HAL_SPI_MspInit+0x1ec>)
 8003062:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003066:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003068:	4b3a      	ldr	r3, [pc, #232]	@ (8003154 <HAL_SPI_MspInit+0x1ec>)
 800306a:	2200      	movs	r2, #0
 800306c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800306e:	4b39      	ldr	r3, [pc, #228]	@ (8003154 <HAL_SPI_MspInit+0x1ec>)
 8003070:	2200      	movs	r2, #0
 8003072:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8003074:	4b37      	ldr	r3, [pc, #220]	@ (8003154 <HAL_SPI_MspInit+0x1ec>)
 8003076:	2200      	movs	r2, #0
 8003078:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800307a:	4b36      	ldr	r3, [pc, #216]	@ (8003154 <HAL_SPI_MspInit+0x1ec>)
 800307c:	2200      	movs	r2, #0
 800307e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003080:	4b34      	ldr	r3, [pc, #208]	@ (8003154 <HAL_SPI_MspInit+0x1ec>)
 8003082:	2200      	movs	r2, #0
 8003084:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003086:	4833      	ldr	r0, [pc, #204]	@ (8003154 <HAL_SPI_MspInit+0x1ec>)
 8003088:	f000 fe08 	bl	8003c9c <HAL_DMA_Init>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 8003092:	f7ff fec1 	bl	8002e18 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a2e      	ldr	r2, [pc, #184]	@ (8003154 <HAL_SPI_MspInit+0x1ec>)
 800309a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800309c:	4a2d      	ldr	r2, [pc, #180]	@ (8003154 <HAL_SPI_MspInit+0x1ec>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2105      	movs	r1, #5
 80030a6:	2024      	movs	r0, #36	@ 0x24
 80030a8:	f000 fdce 	bl	8003c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80030ac:	2024      	movs	r0, #36	@ 0x24
 80030ae:	f000 fde7 	bl	8003c80 <HAL_NVIC_EnableIRQ>
}
 80030b2:	e041      	b.n	8003138 <HAL_SPI_MspInit+0x1d0>
  else if(spiHandle->Instance==SPI3)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a28      	ldr	r2, [pc, #160]	@ (800315c <HAL_SPI_MspInit+0x1f4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d13c      	bne.n	8003138 <HAL_SPI_MspInit+0x1d0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	4b20      	ldr	r3, [pc, #128]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 80030c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	4a18      	ldr	r2, [pc, #96]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 80030e4:	f043 0302 	orr.w	r3, r3, #2
 80030e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ea:	4b16      	ldr	r3, [pc, #88]	@ (8003144 <HAL_SPI_MspInit+0x1dc>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NRF_SCK_Pin;
 80030f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2302      	movs	r3, #2
 80030fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003104:	2303      	movs	r3, #3
 8003106:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003108:	2307      	movs	r3, #7
 800310a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 800310c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003110:	4619      	mov	r1, r3
 8003112:	480f      	ldr	r0, [pc, #60]	@ (8003150 <HAL_SPI_MspInit+0x1e8>)
 8003114:	f001 fbc2 	bl	800489c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NRF_MISO_Pin|NRF_MOSI_Pin;
 8003118:	2330      	movs	r3, #48	@ 0x30
 800311a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311c:	2302      	movs	r3, #2
 800311e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003120:	2300      	movs	r3, #0
 8003122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003124:	2303      	movs	r3, #3
 8003126:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003128:	2306      	movs	r3, #6
 800312a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800312c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003130:	4619      	mov	r1, r3
 8003132:	4807      	ldr	r0, [pc, #28]	@ (8003150 <HAL_SPI_MspInit+0x1e8>)
 8003134:	f001 fbb2 	bl	800489c <HAL_GPIO_Init>
}
 8003138:	bf00      	nop
 800313a:	3738      	adds	r7, #56	@ 0x38
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40013000 	.word	0x40013000
 8003144:	40023800 	.word	0x40023800
 8003148:	40020000 	.word	0x40020000
 800314c:	40003800 	.word	0x40003800
 8003150:	40020400 	.word	0x40020400
 8003154:	200005e8 	.word	0x200005e8
 8003158:	40026058 	.word	0x40026058
 800315c:	40003c00 	.word	0x40003c00

08003160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]
 800316a:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <HAL_MspInit+0x54>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316e:	4a11      	ldr	r2, [pc, #68]	@ (80031b4 <HAL_MspInit+0x54>)
 8003170:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003174:	6453      	str	r3, [r2, #68]	@ 0x44
 8003176:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <HAL_MspInit+0x54>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800317e:	607b      	str	r3, [r7, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <HAL_MspInit+0x54>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	4a0a      	ldr	r2, [pc, #40]	@ (80031b4 <HAL_MspInit+0x54>)
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003190:	6413      	str	r3, [r2, #64]	@ 0x40
 8003192:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <HAL_MspInit+0x54>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800319e:	2200      	movs	r2, #0
 80031a0:	210f      	movs	r1, #15
 80031a2:	f06f 0001 	mvn.w	r0, #1
 80031a6:	f000 fd4f 	bl	8003c48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800

080031b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08c      	sub	sp, #48	@ 0x30
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 80031c8:	2300      	movs	r3, #0
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003288 <HAL_InitTick+0xd0>)
 80031ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003288 <HAL_InitTick+0xd0>)
 80031d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80031d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003288 <HAL_InitTick+0xd0>)
 80031da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80031e4:	f107 020c 	add.w	r2, r7, #12
 80031e8:	f107 0310 	add.w	r3, r7, #16
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f003 f96e 	bl	80064d0 <HAL_RCC_GetClockConfig>
  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80031f4:	f003 f958 	bl	80064a8 <HAL_RCC_GetPCLK2Freq>
 80031f8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80031fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fc:	4a23      	ldr	r2, [pc, #140]	@ (800328c <HAL_InitTick+0xd4>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	0c9b      	lsrs	r3, r3, #18
 8003204:	3b01      	subs	r3, #1
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8003208:	4b21      	ldr	r3, [pc, #132]	@ (8003290 <HAL_InitTick+0xd8>)
 800320a:	4a22      	ldr	r2, [pc, #136]	@ (8003294 <HAL_InitTick+0xdc>)
 800320c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800320e:	4b20      	ldr	r3, [pc, #128]	@ (8003290 <HAL_InitTick+0xd8>)
 8003210:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003214:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8003216:	4a1e      	ldr	r2, [pc, #120]	@ (8003290 <HAL_InitTick+0xd8>)
 8003218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 800321c:	4b1c      	ldr	r3, [pc, #112]	@ (8003290 <HAL_InitTick+0xd8>)
 800321e:	2200      	movs	r2, #0
 8003220:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003222:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <HAL_InitTick+0xd8>)
 8003224:	2200      	movs	r2, #0
 8003226:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003228:	4b19      	ldr	r3, [pc, #100]	@ (8003290 <HAL_InitTick+0xd8>)
 800322a:	2200      	movs	r2, #0
 800322c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 800322e:	4818      	ldr	r0, [pc, #96]	@ (8003290 <HAL_InitTick+0xd8>)
 8003230:	f004 f864 	bl	80072fc <HAL_TIM_Base_Init>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800323a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800323e:	2b00      	cmp	r3, #0
 8003240:	d11b      	bne.n	800327a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8003242:	4813      	ldr	r0, [pc, #76]	@ (8003290 <HAL_InitTick+0xd8>)
 8003244:	f004 f8b4 	bl	80073b0 <HAL_TIM_Base_Start_IT>
 8003248:	4603      	mov	r3, r0
 800324a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800324e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003252:	2b00      	cmp	r3, #0
 8003254:	d111      	bne.n	800327a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003256:	201a      	movs	r0, #26
 8003258:	f000 fd12 	bl	8003c80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	d808      	bhi.n	8003274 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8003262:	2200      	movs	r2, #0
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	201a      	movs	r0, #26
 8003268:	f000 fcee 	bl	8003c48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800326c:	4a0a      	ldr	r2, [pc, #40]	@ (8003298 <HAL_InitTick+0xe0>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e002      	b.n	800327a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800327a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800327e:	4618      	mov	r0, r3
 8003280:	3730      	adds	r7, #48	@ 0x30
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	431bde83 	.word	0x431bde83
 8003290:	20000648 	.word	0x20000648
 8003294:	40014800 	.word	0x40014800
 8003298:	20000004 	.word	0x20000004

0800329c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032a0:	bf00      	nop
 80032a2:	e7fd      	b.n	80032a0 <NMI_Handler+0x4>

080032a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032a8:	bf00      	nop
 80032aa:	e7fd      	b.n	80032a8 <HardFault_Handler+0x4>

080032ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b0:	bf00      	nop
 80032b2:	e7fd      	b.n	80032b0 <MemManage_Handler+0x4>

080032b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032b8:	bf00      	nop
 80032ba:	e7fd      	b.n	80032b8 <BusFault_Handler+0x4>

080032bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c0:	bf00      	nop
 80032c2:	e7fd      	b.n	80032c0 <UsageFault_Handler+0x4>

080032c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80032d8:	4802      	ldr	r0, [pc, #8]	@ (80032e4 <DMA1_Stream3_IRQHandler+0x10>)
 80032da:	f000 fdaf 	bl	8003e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80032de:	bf00      	nop
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	200005e8 	.word	0x200005e8

080032e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80032ec:	4802      	ldr	r0, [pc, #8]	@ (80032f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80032ee:	f004 f8c1 	bl	8007474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000648 	.word	0x20000648

080032fc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003300:	4802      	ldr	r0, [pc, #8]	@ (800330c <SPI2_IRQHandler+0x10>)
 8003302:	f003 fda7 	bl	8006e54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000538 	.word	0x20000538

08003310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003314:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <SystemInit+0x20>)
 8003316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331a:	4a05      	ldr	r2, [pc, #20]	@ (8003330 <SystemInit+0x20>)
 800331c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003338:	4b11      	ldr	r3, [pc, #68]	@ (8003380 <MX_USART1_UART_Init+0x4c>)
 800333a:	4a12      	ldr	r2, [pc, #72]	@ (8003384 <MX_USART1_UART_Init+0x50>)
 800333c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800333e:	4b10      	ldr	r3, [pc, #64]	@ (8003380 <MX_USART1_UART_Init+0x4c>)
 8003340:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003344:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003346:	4b0e      	ldr	r3, [pc, #56]	@ (8003380 <MX_USART1_UART_Init+0x4c>)
 8003348:	2200      	movs	r2, #0
 800334a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800334c:	4b0c      	ldr	r3, [pc, #48]	@ (8003380 <MX_USART1_UART_Init+0x4c>)
 800334e:	2200      	movs	r2, #0
 8003350:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003352:	4b0b      	ldr	r3, [pc, #44]	@ (8003380 <MX_USART1_UART_Init+0x4c>)
 8003354:	2200      	movs	r2, #0
 8003356:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003358:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <MX_USART1_UART_Init+0x4c>)
 800335a:	220c      	movs	r2, #12
 800335c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800335e:	4b08      	ldr	r3, [pc, #32]	@ (8003380 <MX_USART1_UART_Init+0x4c>)
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003364:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <MX_USART1_UART_Init+0x4c>)
 8003366:	2200      	movs	r2, #0
 8003368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800336a:	4805      	ldr	r0, [pc, #20]	@ (8003380 <MX_USART1_UART_Init+0x4c>)
 800336c:	f004 fa3a 	bl	80077e4 <HAL_UART_Init>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003376:	f7ff fd4f 	bl	8002e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000690 	.word	0x20000690
 8003384:	40011000 	.word	0x40011000

08003388 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800338c:	4b11      	ldr	r3, [pc, #68]	@ (80033d4 <MX_USART2_UART_Init+0x4c>)
 800338e:	4a12      	ldr	r2, [pc, #72]	@ (80033d8 <MX_USART2_UART_Init+0x50>)
 8003390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003392:	4b10      	ldr	r3, [pc, #64]	@ (80033d4 <MX_USART2_UART_Init+0x4c>)
 8003394:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800339a:	4b0e      	ldr	r3, [pc, #56]	@ (80033d4 <MX_USART2_UART_Init+0x4c>)
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033a0:	4b0c      	ldr	r3, [pc, #48]	@ (80033d4 <MX_USART2_UART_Init+0x4c>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <MX_USART2_UART_Init+0x4c>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033ac:	4b09      	ldr	r3, [pc, #36]	@ (80033d4 <MX_USART2_UART_Init+0x4c>)
 80033ae:	220c      	movs	r2, #12
 80033b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033b2:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <MX_USART2_UART_Init+0x4c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b8:	4b06      	ldr	r3, [pc, #24]	@ (80033d4 <MX_USART2_UART_Init+0x4c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033be:	4805      	ldr	r0, [pc, #20]	@ (80033d4 <MX_USART2_UART_Init+0x4c>)
 80033c0:	f004 fa10 	bl	80077e4 <HAL_UART_Init>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80033ca:	f7ff fd25 	bl	8002e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	200006d8 	.word	0x200006d8
 80033d8:	40004400 	.word	0x40004400

080033dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08c      	sub	sp, #48	@ 0x30
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e4:	f107 031c 	add.w	r3, r7, #28
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a32      	ldr	r2, [pc, #200]	@ (80034c4 <HAL_UART_MspInit+0xe8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d12d      	bne.n	800345a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	4b31      	ldr	r3, [pc, #196]	@ (80034c8 <HAL_UART_MspInit+0xec>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003406:	4a30      	ldr	r2, [pc, #192]	@ (80034c8 <HAL_UART_MspInit+0xec>)
 8003408:	f043 0310 	orr.w	r3, r3, #16
 800340c:	6453      	str	r3, [r2, #68]	@ 0x44
 800340e:	4b2e      	ldr	r3, [pc, #184]	@ (80034c8 <HAL_UART_MspInit+0xec>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	4b2a      	ldr	r3, [pc, #168]	@ (80034c8 <HAL_UART_MspInit+0xec>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003422:	4a29      	ldr	r2, [pc, #164]	@ (80034c8 <HAL_UART_MspInit+0xec>)
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	6313      	str	r3, [r2, #48]	@ 0x30
 800342a:	4b27      	ldr	r3, [pc, #156]	@ (80034c8 <HAL_UART_MspInit+0xec>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8003436:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800343a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343c:	2302      	movs	r3, #2
 800343e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003444:	2303      	movs	r3, #3
 8003446:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003448:	2307      	movs	r3, #7
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344c:	f107 031c 	add.w	r3, r7, #28
 8003450:	4619      	mov	r1, r3
 8003452:	481e      	ldr	r0, [pc, #120]	@ (80034cc <HAL_UART_MspInit+0xf0>)
 8003454:	f001 fa22 	bl	800489c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003458:	e030      	b.n	80034bc <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1c      	ldr	r2, [pc, #112]	@ (80034d0 <HAL_UART_MspInit+0xf4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d12b      	bne.n	80034bc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003464:	2300      	movs	r3, #0
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	4b17      	ldr	r3, [pc, #92]	@ (80034c8 <HAL_UART_MspInit+0xec>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	4a16      	ldr	r2, [pc, #88]	@ (80034c8 <HAL_UART_MspInit+0xec>)
 800346e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003472:	6413      	str	r3, [r2, #64]	@ 0x40
 8003474:	4b14      	ldr	r3, [pc, #80]	@ (80034c8 <HAL_UART_MspInit+0xec>)
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	4b10      	ldr	r3, [pc, #64]	@ (80034c8 <HAL_UART_MspInit+0xec>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003488:	4a0f      	ldr	r2, [pc, #60]	@ (80034c8 <HAL_UART_MspInit+0xec>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003490:	4b0d      	ldr	r3, [pc, #52]	@ (80034c8 <HAL_UART_MspInit+0xec>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800349c:	230c      	movs	r3, #12
 800349e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a8:	2303      	movs	r3, #3
 80034aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034ac:	2307      	movs	r3, #7
 80034ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b0:	f107 031c 	add.w	r3, r7, #28
 80034b4:	4619      	mov	r1, r3
 80034b6:	4805      	ldr	r0, [pc, #20]	@ (80034cc <HAL_UART_MspInit+0xf0>)
 80034b8:	f001 f9f0 	bl	800489c <HAL_GPIO_Init>
}
 80034bc:	bf00      	nop
 80034be:	3730      	adds	r7, #48	@ 0x30
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40011000 	.word	0x40011000
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40020000 	.word	0x40020000
 80034d0:	40004400 	.word	0x40004400

080034d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800350c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034d8:	f7ff ff1a 	bl	8003310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034dc:	480c      	ldr	r0, [pc, #48]	@ (8003510 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034de:	490d      	ldr	r1, [pc, #52]	@ (8003514 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003518 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e4:	e002      	b.n	80034ec <LoopCopyDataInit>

080034e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ea:	3304      	adds	r3, #4

080034ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f0:	d3f9      	bcc.n	80034e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034f2:	4a0a      	ldr	r2, [pc, #40]	@ (800351c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003520 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f8:	e001      	b.n	80034fe <LoopFillZerobss>

080034fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034fc:	3204      	adds	r2, #4

080034fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003500:	d3fb      	bcc.n	80034fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003502:	f005 fe9d 	bl	8009240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003506:	f7ff fbeb 	bl	8002ce0 <main>
  bx  lr    
 800350a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800350c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003514:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003518:	080097c8 	.word	0x080097c8
  ldr r2, =_sbss
 800351c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003520:	200045d0 	.word	0x200045d0

08003524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003524:	e7fe      	b.n	8003524 <ADC_IRQHandler>
	...

08003528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800352c:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <HAL_Init+0x40>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0d      	ldr	r2, [pc, #52]	@ (8003568 <HAL_Init+0x40>)
 8003532:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003538:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <HAL_Init+0x40>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0a      	ldr	r2, [pc, #40]	@ (8003568 <HAL_Init+0x40>)
 800353e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003544:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <HAL_Init+0x40>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a07      	ldr	r2, [pc, #28]	@ (8003568 <HAL_Init+0x40>)
 800354a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800354e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003550:	2003      	movs	r0, #3
 8003552:	f000 fb6e 	bl	8003c32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003556:	200f      	movs	r0, #15
 8003558:	f7ff fe2e 	bl	80031b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800355c:	f7ff fe00 	bl	8003160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023c00 	.word	0x40023c00

0800356c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003570:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_IncTick+0x20>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	461a      	mov	r2, r3
 8003576:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <HAL_IncTick+0x24>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4413      	add	r3, r2
 800357c:	4a04      	ldr	r2, [pc, #16]	@ (8003590 <HAL_IncTick+0x24>)
 800357e:	6013      	str	r3, [r2, #0]
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000008 	.word	0x20000008
 8003590:	20000720 	.word	0x20000720

08003594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return uwTick;
 8003598:	4b03      	ldr	r3, [pc, #12]	@ (80035a8 <HAL_GetTick+0x14>)
 800359a:	681b      	ldr	r3, [r3, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000720 	.word	0x20000720

080035ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7ff ffee 	bl	8003594 <HAL_GetTick>
 80035b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d005      	beq.n	80035d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035c6:	4b0a      	ldr	r3, [pc, #40]	@ (80035f0 <HAL_Delay+0x44>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035d2:	bf00      	nop
 80035d4:	f7ff ffde 	bl	8003594 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d8f7      	bhi.n	80035d4 <HAL_Delay+0x28>
  {
  }
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000008 	.word	0x20000008

080035f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e033      	b.n	8003672 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fe ffe6 	bl	80025e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	d118      	bne.n	8003664 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800363a:	f023 0302 	bic.w	r3, r3, #2
 800363e:	f043 0202 	orr.w	r2, r3, #2
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f94a 	bl	80038e0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	f023 0303 	bic.w	r3, r3, #3
 800365a:	f043 0201 	orr.w	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	641a      	str	r2, [r3, #64]	@ 0x40
 8003662:	e001      	b.n	8003668 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003670:	7bfb      	ldrb	r3, [r7, #15]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x1c>
 8003694:	2302      	movs	r3, #2
 8003696:	e113      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x244>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b09      	cmp	r3, #9
 80036a6:	d925      	bls.n	80036f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68d9      	ldr	r1, [r3, #12]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	4613      	mov	r3, r2
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4413      	add	r3, r2
 80036bc:	3b1e      	subs	r3, #30
 80036be:	2207      	movs	r2, #7
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43da      	mvns	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	400a      	ands	r2, r1
 80036cc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68d9      	ldr	r1, [r3, #12]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	4618      	mov	r0, r3
 80036e0:	4603      	mov	r3, r0
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	4403      	add	r3, r0
 80036e6:	3b1e      	subs	r3, #30
 80036e8:	409a      	lsls	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	e022      	b.n	800373a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6919      	ldr	r1, [r3, #16]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	2207      	movs	r2, #7
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43da      	mvns	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	400a      	ands	r2, r1
 8003716:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6919      	ldr	r1, [r3, #16]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	b29b      	uxth	r3, r3
 8003728:	4618      	mov	r0, r3
 800372a:	4603      	mov	r3, r0
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4403      	add	r3, r0
 8003730:	409a      	lsls	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b06      	cmp	r3, #6
 8003740:	d824      	bhi.n	800378c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	3b05      	subs	r3, #5
 8003754:	221f      	movs	r2, #31
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43da      	mvns	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	400a      	ands	r2, r1
 8003762:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	4618      	mov	r0, r3
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	3b05      	subs	r3, #5
 800377e:	fa00 f203 	lsl.w	r2, r0, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	635a      	str	r2, [r3, #52]	@ 0x34
 800378a:	e04c      	b.n	8003826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b0c      	cmp	r3, #12
 8003792:	d824      	bhi.n	80037de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	3b23      	subs	r3, #35	@ 0x23
 80037a6:	221f      	movs	r2, #31
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43da      	mvns	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	400a      	ands	r2, r1
 80037b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	4618      	mov	r0, r3
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	3b23      	subs	r3, #35	@ 0x23
 80037d0:	fa00 f203 	lsl.w	r2, r0, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	631a      	str	r2, [r3, #48]	@ 0x30
 80037dc:	e023      	b.n	8003826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	3b41      	subs	r3, #65	@ 0x41
 80037f0:	221f      	movs	r2, #31
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43da      	mvns	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	400a      	ands	r2, r1
 80037fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	4618      	mov	r0, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	3b41      	subs	r3, #65	@ 0x41
 800381a:	fa00 f203 	lsl.w	r2, r0, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003826:	4b29      	ldr	r3, [pc, #164]	@ (80038cc <HAL_ADC_ConfigChannel+0x250>)
 8003828:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a28      	ldr	r2, [pc, #160]	@ (80038d0 <HAL_ADC_ConfigChannel+0x254>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d10f      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x1d8>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b12      	cmp	r3, #18
 800383a:	d10b      	bne.n	8003854 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1d      	ldr	r2, [pc, #116]	@ (80038d0 <HAL_ADC_ConfigChannel+0x254>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d12b      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x23a>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a1c      	ldr	r2, [pc, #112]	@ (80038d4 <HAL_ADC_ConfigChannel+0x258>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d003      	beq.n	8003870 <HAL_ADC_ConfigChannel+0x1f4>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b11      	cmp	r3, #17
 800386e:	d122      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a11      	ldr	r2, [pc, #68]	@ (80038d4 <HAL_ADC_ConfigChannel+0x258>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d111      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003892:	4b11      	ldr	r3, [pc, #68]	@ (80038d8 <HAL_ADC_ConfigChannel+0x25c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a11      	ldr	r2, [pc, #68]	@ (80038dc <HAL_ADC_ConfigChannel+0x260>)
 8003898:	fba2 2303 	umull	r2, r3, r2, r3
 800389c:	0c9a      	lsrs	r2, r3, #18
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80038a8:	e002      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f9      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40012300 	.word	0x40012300
 80038d0:	40012000 	.word	0x40012000
 80038d4:	10000012 	.word	0x10000012
 80038d8:	20000000 	.word	0x20000000
 80038dc:	431bde83 	.word	0x431bde83

080038e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038e8:	4b79      	ldr	r3, [pc, #484]	@ (8003ad0 <ADC_Init+0x1f0>)
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	431a      	orrs	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6859      	ldr	r1, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	021a      	lsls	r2, r3, #8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800395a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6899      	ldr	r1, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003972:	4a58      	ldr	r2, [pc, #352]	@ (8003ad4 <ADC_Init+0x1f4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d022      	beq.n	80039be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003986:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6899      	ldr	r1, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80039a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6899      	ldr	r1, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
 80039bc:	e00f      	b.n	80039de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80039cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80039dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0202 	bic.w	r2, r2, #2
 80039ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6899      	ldr	r1, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	7e1b      	ldrb	r3, [r3, #24]
 80039f8:	005a      	lsls	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01b      	beq.n	8003a44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a1a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003a2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6859      	ldr	r1, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	3b01      	subs	r3, #1
 8003a38:	035a      	lsls	r2, r3, #13
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
 8003a42:	e007      	b.n	8003a54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a52:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003a62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	051a      	lsls	r2, r3, #20
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003a88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6899      	ldr	r1, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a96:	025a      	lsls	r2, r3, #9
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6899      	ldr	r1, [r3, #8]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	029a      	lsls	r2, r3, #10
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]
}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	40012300 	.word	0x40012300
 8003ad4:	0f000001 	.word	0x0f000001

08003ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <__NVIC_SetPriorityGrouping+0x44>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003af4:	4013      	ands	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b0a:	4a04      	ldr	r2, [pc, #16]	@ (8003b1c <__NVIC_SetPriorityGrouping+0x44>)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	60d3      	str	r3, [r2, #12]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000ed00 	.word	0xe000ed00

08003b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b24:	4b04      	ldr	r3, [pc, #16]	@ (8003b38 <__NVIC_GetPriorityGrouping+0x18>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	0a1b      	lsrs	r3, r3, #8
 8003b2a:	f003 0307 	and.w	r3, r3, #7
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	db0b      	blt.n	8003b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	f003 021f 	and.w	r2, r3, #31
 8003b54:	4907      	ldr	r1, [pc, #28]	@ (8003b74 <__NVIC_EnableIRQ+0x38>)
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e000e100 	.word	0xe000e100

08003b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	db0a      	blt.n	8003ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	490c      	ldr	r1, [pc, #48]	@ (8003bc4 <__NVIC_SetPriority+0x4c>)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	0112      	lsls	r2, r2, #4
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba0:	e00a      	b.n	8003bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4908      	ldr	r1, [pc, #32]	@ (8003bc8 <__NVIC_SetPriority+0x50>)
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	3b04      	subs	r3, #4
 8003bb0:	0112      	lsls	r2, r2, #4
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	761a      	strb	r2, [r3, #24]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000e100 	.word	0xe000e100
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b089      	sub	sp, #36	@ 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f1c3 0307 	rsb	r3, r3, #7
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	bf28      	it	cs
 8003bea:	2304      	movcs	r3, #4
 8003bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d902      	bls.n	8003bfc <NVIC_EncodePriority+0x30>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3b03      	subs	r3, #3
 8003bfa:	e000      	b.n	8003bfe <NVIC_EncodePriority+0x32>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c00:	f04f 32ff 	mov.w	r2, #4294967295
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	401a      	ands	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c14:	f04f 31ff 	mov.w	r1, #4294967295
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	43d9      	mvns	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c24:	4313      	orrs	r3, r2
         );
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3724      	adds	r7, #36	@ 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff ff4c 	bl	8003ad8 <__NVIC_SetPriorityGrouping>
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c5a:	f7ff ff61 	bl	8003b20 <__NVIC_GetPriorityGrouping>
 8003c5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	6978      	ldr	r0, [r7, #20]
 8003c66:	f7ff ffb1 	bl	8003bcc <NVIC_EncodePriority>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff ff80 	bl	8003b78 <__NVIC_SetPriority>
}
 8003c78:	bf00      	nop
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff ff54 	bl	8003b3c <__NVIC_EnableIRQ>
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ca8:	f7ff fc74 	bl	8003594 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e099      	b.n	8003dec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cd8:	e00f      	b.n	8003cfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cda:	f7ff fc5b 	bl	8003594 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b05      	cmp	r3, #5
 8003ce6:	d908      	bls.n	8003cfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e078      	b.n	8003dec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e8      	bne.n	8003cda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4b38      	ldr	r3, [pc, #224]	@ (8003df4 <HAL_DMA_Init+0x158>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d107      	bne.n	8003d64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f023 0307 	bic.w	r3, r3, #7
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d117      	bne.n	8003dbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00e      	beq.n	8003dbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fa0b 	bl	80041bc <DMA_CheckFifoParam>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2240      	movs	r2, #64	@ 0x40
 8003db0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e016      	b.n	8003dec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f9c2 	bl	8004150 <DMA_CalcBaseAndBitshift>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd4:	223f      	movs	r2, #63	@ 0x3f
 8003dd6:	409a      	lsls	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	f010803f 	.word	0xf010803f

08003df8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d004      	beq.n	8003e16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2280      	movs	r2, #128	@ 0x80
 8003e10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e00c      	b.n	8003e30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2205      	movs	r2, #5
 8003e1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e48:	4b8e      	ldr	r3, [pc, #568]	@ (8004084 <HAL_DMA_IRQHandler+0x248>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a8e      	ldr	r2, [pc, #568]	@ (8004088 <HAL_DMA_IRQHandler+0x24c>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	0a9b      	lsrs	r3, r3, #10
 8003e54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e66:	2208      	movs	r2, #8
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01a      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d013      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0204 	bic.w	r2, r2, #4
 8003e8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e94:	2208      	movs	r2, #8
 8003e96:	409a      	lsls	r2, r3
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea0:	f043 0201 	orr.w	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eac:	2201      	movs	r2, #1
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d012      	beq.n	8003ede <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00b      	beq.n	8003ede <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eca:	2201      	movs	r2, #1
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed6:	f043 0202 	orr.w	r2, r3, #2
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d012      	beq.n	8003f14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f00:	2204      	movs	r2, #4
 8003f02:	409a      	lsls	r2, r3
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0c:	f043 0204 	orr.w	r2, r3, #4
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f18:	2210      	movs	r2, #16
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d043      	beq.n	8003fac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d03c      	beq.n	8003fac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f36:	2210      	movs	r2, #16
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d018      	beq.n	8003f7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d108      	bne.n	8003f6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d024      	beq.n	8003fac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	4798      	blx	r3
 8003f6a:	e01f      	b.n	8003fac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d01b      	beq.n	8003fac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4798      	blx	r3
 8003f7c:	e016      	b.n	8003fac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d107      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0208 	bic.w	r2, r2, #8
 8003f9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 808f 	beq.w	80040dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8087 	beq.w	80040dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	409a      	lsls	r2, r3
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d136      	bne.n	8004054 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0216 	bic.w	r2, r2, #22
 8003ff4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004004:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <HAL_DMA_IRQHandler+0x1da>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004012:	2b00      	cmp	r3, #0
 8004014:	d007      	beq.n	8004026 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0208 	bic.w	r2, r2, #8
 8004024:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402a:	223f      	movs	r2, #63	@ 0x3f
 800402c:	409a      	lsls	r2, r3
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004046:	2b00      	cmp	r3, #0
 8004048:	d07e      	beq.n	8004148 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	4798      	blx	r3
        }
        return;
 8004052:	e079      	b.n	8004148 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01d      	beq.n	800409e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10d      	bne.n	800408c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004074:	2b00      	cmp	r3, #0
 8004076:	d031      	beq.n	80040dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	4798      	blx	r3
 8004080:	e02c      	b.n	80040dc <HAL_DMA_IRQHandler+0x2a0>
 8004082:	bf00      	nop
 8004084:	20000000 	.word	0x20000000
 8004088:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d023      	beq.n	80040dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	4798      	blx	r3
 800409c:	e01e      	b.n	80040dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10f      	bne.n	80040cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0210 	bic.w	r2, r2, #16
 80040ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d032      	beq.n	800414a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d022      	beq.n	8004136 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2205      	movs	r2, #5
 80040f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	3301      	adds	r3, #1
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	429a      	cmp	r2, r3
 8004112:	d307      	bcc.n	8004124 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f2      	bne.n	8004108 <HAL_DMA_IRQHandler+0x2cc>
 8004122:	e000      	b.n	8004126 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004124:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	4798      	blx	r3
 8004146:	e000      	b.n	800414a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004148:	bf00      	nop
    }
  }
}
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	3b10      	subs	r3, #16
 8004160:	4a14      	ldr	r2, [pc, #80]	@ (80041b4 <DMA_CalcBaseAndBitshift+0x64>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	091b      	lsrs	r3, r3, #4
 8004168:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800416a:	4a13      	ldr	r2, [pc, #76]	@ (80041b8 <DMA_CalcBaseAndBitshift+0x68>)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b03      	cmp	r3, #3
 800417c:	d909      	bls.n	8004192 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004186:	f023 0303 	bic.w	r3, r3, #3
 800418a:	1d1a      	adds	r2, r3, #4
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004190:	e007      	b.n	80041a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800419a:	f023 0303 	bic.w	r3, r3, #3
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	aaaaaaab 	.word	0xaaaaaaab
 80041b8:	080097ac 	.word	0x080097ac

080041bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d11f      	bne.n	8004216 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d856      	bhi.n	800428a <DMA_CheckFifoParam+0xce>
 80041dc:	a201      	add	r2, pc, #4	@ (adr r2, 80041e4 <DMA_CheckFifoParam+0x28>)
 80041de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e2:	bf00      	nop
 80041e4:	080041f5 	.word	0x080041f5
 80041e8:	08004207 	.word	0x08004207
 80041ec:	080041f5 	.word	0x080041f5
 80041f0:	0800428b 	.word	0x0800428b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d046      	beq.n	800428e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004204:	e043      	b.n	800428e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800420e:	d140      	bne.n	8004292 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004214:	e03d      	b.n	8004292 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800421e:	d121      	bne.n	8004264 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b03      	cmp	r3, #3
 8004224:	d837      	bhi.n	8004296 <DMA_CheckFifoParam+0xda>
 8004226:	a201      	add	r2, pc, #4	@ (adr r2, 800422c <DMA_CheckFifoParam+0x70>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	0800423d 	.word	0x0800423d
 8004230:	08004243 	.word	0x08004243
 8004234:	0800423d 	.word	0x0800423d
 8004238:	08004255 	.word	0x08004255
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
      break;
 8004240:	e030      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004246:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d025      	beq.n	800429a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004252:	e022      	b.n	800429a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800425c:	d11f      	bne.n	800429e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004262:	e01c      	b.n	800429e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d903      	bls.n	8004272 <DMA_CheckFifoParam+0xb6>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b03      	cmp	r3, #3
 800426e:	d003      	beq.n	8004278 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004270:	e018      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
      break;
 8004276:	e015      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00e      	beq.n	80042a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      break;
 8004288:	e00b      	b.n	80042a2 <DMA_CheckFifoParam+0xe6>
      break;
 800428a:	bf00      	nop
 800428c:	e00a      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      break;
 800428e:	bf00      	nop
 8004290:	e008      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004292:	bf00      	nop
 8004294:	e006      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004296:	bf00      	nop
 8004298:	e004      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      break;
 800429a:	bf00      	nop
 800429c:	e002      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800429e:	bf00      	nop
 80042a0:	e000      	b.n	80042a4 <DMA_CheckFifoParam+0xe8>
      break;
 80042a2:	bf00      	nop
    }
  } 
  
  return status; 
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop

080042b4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80042c6:	4b23      	ldr	r3, [pc, #140]	@ (8004354 <HAL_FLASH_Program+0xa0>)
 80042c8:	7e1b      	ldrb	r3, [r3, #24]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_FLASH_Program+0x1e>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e03b      	b.n	800434a <HAL_FLASH_Program+0x96>
 80042d2:	4b20      	ldr	r3, [pc, #128]	@ (8004354 <HAL_FLASH_Program+0xa0>)
 80042d4:	2201      	movs	r2, #1
 80042d6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80042dc:	f000 f87c 	bl	80043d8 <FLASH_WaitForLastOperation>
 80042e0:	4603      	mov	r3, r0
 80042e2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d12b      	bne.n	8004342 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d105      	bne.n	80042fc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80042f0:	783b      	ldrb	r3, [r7, #0]
 80042f2:	4619      	mov	r1, r3
 80042f4:	68b8      	ldr	r0, [r7, #8]
 80042f6:	f000 f927 	bl	8004548 <FLASH_Program_Byte>
 80042fa:	e016      	b.n	800432a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d105      	bne.n	800430e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004302:	883b      	ldrh	r3, [r7, #0]
 8004304:	4619      	mov	r1, r3
 8004306:	68b8      	ldr	r0, [r7, #8]
 8004308:	f000 f8fa 	bl	8004500 <FLASH_Program_HalfWord>
 800430c:	e00d      	b.n	800432a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d105      	bne.n	8004320 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4619      	mov	r1, r3
 8004318:	68b8      	ldr	r0, [r7, #8]
 800431a:	f000 f8cf 	bl	80044bc <FLASH_Program_Word>
 800431e:	e004      	b.n	800432a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004324:	68b8      	ldr	r0, [r7, #8]
 8004326:	f000 f897 	bl	8004458 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800432a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800432e:	f000 f853 	bl	80043d8 <FLASH_WaitForLastOperation>
 8004332:	4603      	mov	r3, r0
 8004334:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8004336:	4b08      	ldr	r3, [pc, #32]	@ (8004358 <HAL_FLASH_Program+0xa4>)
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	4a07      	ldr	r2, [pc, #28]	@ (8004358 <HAL_FLASH_Program+0xa4>)
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004342:	4b04      	ldr	r3, [pc, #16]	@ (8004354 <HAL_FLASH_Program+0xa0>)
 8004344:	2200      	movs	r2, #0
 8004346:	761a      	strb	r2, [r3, #24]

  return status;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000724 	.word	0x20000724
 8004358:	40023c00 	.word	0x40023c00

0800435c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004366:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <HAL_FLASH_Unlock+0x38>)
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	da0b      	bge.n	8004386 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800436e:	4b09      	ldr	r3, [pc, #36]	@ (8004394 <HAL_FLASH_Unlock+0x38>)
 8004370:	4a09      	ldr	r2, [pc, #36]	@ (8004398 <HAL_FLASH_Unlock+0x3c>)
 8004372:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004374:	4b07      	ldr	r3, [pc, #28]	@ (8004394 <HAL_FLASH_Unlock+0x38>)
 8004376:	4a09      	ldr	r2, [pc, #36]	@ (800439c <HAL_FLASH_Unlock+0x40>)
 8004378:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800437a:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <HAL_FLASH_Unlock+0x38>)
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	da01      	bge.n	8004386 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004386:	79fb      	ldrb	r3, [r7, #7]
}
 8004388:	4618      	mov	r0, r3
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	40023c00 	.word	0x40023c00
 8004398:	45670123 	.word	0x45670123
 800439c:	cdef89ab 	.word	0xcdef89ab

080043a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80043a4:	4b05      	ldr	r3, [pc, #20]	@ (80043bc <HAL_FLASH_Lock+0x1c>)
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	4a04      	ldr	r2, [pc, #16]	@ (80043bc <HAL_FLASH_Lock+0x1c>)
 80043aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043ae:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	40023c00 	.word	0x40023c00

080043c0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag
  */
uint32_t HAL_FLASH_GetError(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 80043c4:	4b03      	ldr	r3, [pc, #12]	@ (80043d4 <HAL_FLASH_GetError+0x14>)
 80043c6:	69db      	ldr	r3, [r3, #28]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000724 	.word	0x20000724

080043d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004450 <FLASH_WaitForLastOperation+0x78>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80043ea:	f7ff f8d3 	bl	8003594 <HAL_GetTick>
 80043ee:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80043f0:	e010      	b.n	8004414 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f8:	d00c      	beq.n	8004414 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <FLASH_WaitForLastOperation+0x38>
 8004400:	f7ff f8c8 	bl	8003594 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	429a      	cmp	r2, r3
 800440e:	d201      	bcs.n	8004414 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e019      	b.n	8004448 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004414:	4b0f      	ldr	r3, [pc, #60]	@ (8004454 <FLASH_WaitForLastOperation+0x7c>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e8      	bne.n	80043f2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004420:	4b0c      	ldr	r3, [pc, #48]	@ (8004454 <FLASH_WaitForLastOperation+0x7c>)
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800442c:	4b09      	ldr	r3, [pc, #36]	@ (8004454 <FLASH_WaitForLastOperation+0x7c>)
 800442e:	2201      	movs	r2, #1
 8004430:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004432:	4b08      	ldr	r3, [pc, #32]	@ (8004454 <FLASH_WaitForLastOperation+0x7c>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800443e:	f000 f8a5 	bl	800458c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004446:	2300      	movs	r3, #0

}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20000724 	.word	0x20000724
 8004454:	40023c00 	.word	0x40023c00

08004458 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004464:	4b14      	ldr	r3, [pc, #80]	@ (80044b8 <FLASH_Program_DoubleWord+0x60>)
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	4a13      	ldr	r2, [pc, #76]	@ (80044b8 <FLASH_Program_DoubleWord+0x60>)
 800446a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800446e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004470:	4b11      	ldr	r3, [pc, #68]	@ (80044b8 <FLASH_Program_DoubleWord+0x60>)
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	4a10      	ldr	r2, [pc, #64]	@ (80044b8 <FLASH_Program_DoubleWord+0x60>)
 8004476:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800447a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800447c:	4b0e      	ldr	r3, [pc, #56]	@ (80044b8 <FLASH_Program_DoubleWord+0x60>)
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	4a0d      	ldr	r2, [pc, #52]	@ (80044b8 <FLASH_Program_DoubleWord+0x60>)
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800448e:	f3bf 8f6f 	isb	sy
}
 8004492:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8004494:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	000a      	movs	r2, r1
 80044a2:	2300      	movs	r3, #0
 80044a4:	68f9      	ldr	r1, [r7, #12]
 80044a6:	3104      	adds	r1, #4
 80044a8:	4613      	mov	r3, r2
 80044aa:	600b      	str	r3, [r1, #0]
}
 80044ac:	bf00      	nop
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40023c00 	.word	0x40023c00

080044bc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80044c6:	4b0d      	ldr	r3, [pc, #52]	@ (80044fc <FLASH_Program_Word+0x40>)
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	4a0c      	ldr	r2, [pc, #48]	@ (80044fc <FLASH_Program_Word+0x40>)
 80044cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80044d2:	4b0a      	ldr	r3, [pc, #40]	@ (80044fc <FLASH_Program_Word+0x40>)
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	4a09      	ldr	r2, [pc, #36]	@ (80044fc <FLASH_Program_Word+0x40>)
 80044d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80044de:	4b07      	ldr	r3, [pc, #28]	@ (80044fc <FLASH_Program_Word+0x40>)
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	4a06      	ldr	r2, [pc, #24]	@ (80044fc <FLASH_Program_Word+0x40>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	601a      	str	r2, [r3, #0]
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	40023c00 	.word	0x40023c00

08004500 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800450c:	4b0d      	ldr	r3, [pc, #52]	@ (8004544 <FLASH_Program_HalfWord+0x44>)
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	4a0c      	ldr	r2, [pc, #48]	@ (8004544 <FLASH_Program_HalfWord+0x44>)
 8004512:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004516:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004518:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <FLASH_Program_HalfWord+0x44>)
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	4a09      	ldr	r2, [pc, #36]	@ (8004544 <FLASH_Program_HalfWord+0x44>)
 800451e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004522:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004524:	4b07      	ldr	r3, [pc, #28]	@ (8004544 <FLASH_Program_HalfWord+0x44>)
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	4a06      	ldr	r2, [pc, #24]	@ (8004544 <FLASH_Program_HalfWord+0x44>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	887a      	ldrh	r2, [r7, #2]
 8004534:	801a      	strh	r2, [r3, #0]
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40023c00 	.word	0x40023c00

08004548 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	460b      	mov	r3, r1
 8004552:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004554:	4b0c      	ldr	r3, [pc, #48]	@ (8004588 <FLASH_Program_Byte+0x40>)
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	4a0b      	ldr	r2, [pc, #44]	@ (8004588 <FLASH_Program_Byte+0x40>)
 800455a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800455e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004560:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <FLASH_Program_Byte+0x40>)
 8004562:	4a09      	ldr	r2, [pc, #36]	@ (8004588 <FLASH_Program_Byte+0x40>)
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004568:	4b07      	ldr	r3, [pc, #28]	@ (8004588 <FLASH_Program_Byte+0x40>)
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	4a06      	ldr	r2, [pc, #24]	@ (8004588 <FLASH_Program_Byte+0x40>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	78fa      	ldrb	r2, [r7, #3]
 8004578:	701a      	strb	r2, [r3, #0]
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40023c00 	.word	0x40023c00

0800458c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004590:	4b2f      	ldr	r3, [pc, #188]	@ (8004650 <FLASH_SetErrorCode+0xc4>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800459c:	4b2d      	ldr	r3, [pc, #180]	@ (8004654 <FLASH_SetErrorCode+0xc8>)
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	f043 0310 	orr.w	r3, r3, #16
 80045a4:	4a2b      	ldr	r2, [pc, #172]	@ (8004654 <FLASH_SetErrorCode+0xc8>)
 80045a6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80045a8:	4b29      	ldr	r3, [pc, #164]	@ (8004650 <FLASH_SetErrorCode+0xc4>)
 80045aa:	2210      	movs	r2, #16
 80045ac:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80045ae:	4b28      	ldr	r3, [pc, #160]	@ (8004650 <FLASH_SetErrorCode+0xc4>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d008      	beq.n	80045cc <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80045ba:	4b26      	ldr	r3, [pc, #152]	@ (8004654 <FLASH_SetErrorCode+0xc8>)
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	f043 0308 	orr.w	r3, r3, #8
 80045c2:	4a24      	ldr	r2, [pc, #144]	@ (8004654 <FLASH_SetErrorCode+0xc8>)
 80045c4:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80045c6:	4b22      	ldr	r3, [pc, #136]	@ (8004650 <FLASH_SetErrorCode+0xc4>)
 80045c8:	2220      	movs	r2, #32
 80045ca:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80045cc:	4b20      	ldr	r3, [pc, #128]	@ (8004650 <FLASH_SetErrorCode+0xc4>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80045d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004654 <FLASH_SetErrorCode+0xc8>)
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	f043 0304 	orr.w	r3, r3, #4
 80045e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004654 <FLASH_SetErrorCode+0xc8>)
 80045e2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80045e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004650 <FLASH_SetErrorCode+0xc4>)
 80045e6:	2240      	movs	r2, #64	@ 0x40
 80045e8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80045ea:	4b19      	ldr	r3, [pc, #100]	@ (8004650 <FLASH_SetErrorCode+0xc4>)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d008      	beq.n	8004608 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80045f6:	4b17      	ldr	r3, [pc, #92]	@ (8004654 <FLASH_SetErrorCode+0xc8>)
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f043 0302 	orr.w	r3, r3, #2
 80045fe:	4a15      	ldr	r2, [pc, #84]	@ (8004654 <FLASH_SetErrorCode+0xc8>)
 8004600:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004602:	4b13      	ldr	r3, [pc, #76]	@ (8004650 <FLASH_SetErrorCode+0xc4>)
 8004604:	2280      	movs	r2, #128	@ 0x80
 8004606:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004608:	4b11      	ldr	r3, [pc, #68]	@ (8004650 <FLASH_SetErrorCode+0xc4>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d009      	beq.n	8004628 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004614:	4b0f      	ldr	r3, [pc, #60]	@ (8004654 <FLASH_SetErrorCode+0xc8>)
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	4a0d      	ldr	r2, [pc, #52]	@ (8004654 <FLASH_SetErrorCode+0xc8>)
 800461e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004620:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <FLASH_SetErrorCode+0xc4>)
 8004622:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004626:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004628:	4b09      	ldr	r3, [pc, #36]	@ (8004650 <FLASH_SetErrorCode+0xc4>)
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d008      	beq.n	8004646 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004634:	4b07      	ldr	r3, [pc, #28]	@ (8004654 <FLASH_SetErrorCode+0xc8>)
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	f043 0320 	orr.w	r3, r3, #32
 800463c:	4a05      	ldr	r2, [pc, #20]	@ (8004654 <FLASH_SetErrorCode+0xc8>)
 800463e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004640:	4b03      	ldr	r3, [pc, #12]	@ (8004650 <FLASH_SetErrorCode+0xc4>)
 8004642:	2202      	movs	r2, #2
 8004644:	60da      	str	r2, [r3, #12]
  }
}
 8004646:	bf00      	nop
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40023c00 	.word	0x40023c00
 8004654:	20000724 	.word	0x20000724

08004658 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800466a:	4b31      	ldr	r3, [pc, #196]	@ (8004730 <HAL_FLASHEx_Erase+0xd8>)
 800466c:	7e1b      	ldrb	r3, [r3, #24]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_FLASHEx_Erase+0x1e>
 8004672:	2302      	movs	r3, #2
 8004674:	e058      	b.n	8004728 <HAL_FLASHEx_Erase+0xd0>
 8004676:	4b2e      	ldr	r3, [pc, #184]	@ (8004730 <HAL_FLASHEx_Erase+0xd8>)
 8004678:	2201      	movs	r2, #1
 800467a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800467c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004680:	f7ff feaa 	bl	80043d8 <FLASH_WaitForLastOperation>
 8004684:	4603      	mov	r3, r0
 8004686:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d148      	bne.n	8004720 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f04f 32ff 	mov.w	r2, #4294967295
 8004694:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d115      	bne.n	80046ca <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f000 f844 	bl	8004738 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80046b0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80046b4:	f7ff fe90 	bl	80043d8 <FLASH_WaitForLastOperation>
 80046b8:	4603      	mov	r3, r0
 80046ba:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80046bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004734 <HAL_FLASHEx_Erase+0xdc>)
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004734 <HAL_FLASHEx_Erase+0xdc>)
 80046c2:	f023 0304 	bic.w	r3, r3, #4
 80046c6:	6113      	str	r3, [r2, #16]
 80046c8:	e028      	b.n	800471c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	e01c      	b.n	800470c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	4619      	mov	r1, r3
 80046da:	68b8      	ldr	r0, [r7, #8]
 80046dc:	f000 f850 	bl	8004780 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80046e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80046e4:	f7ff fe78 	bl	80043d8 <FLASH_WaitForLastOperation>
 80046e8:	4603      	mov	r3, r0
 80046ea:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80046ec:	4b11      	ldr	r3, [pc, #68]	@ (8004734 <HAL_FLASHEx_Erase+0xdc>)
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	4a10      	ldr	r2, [pc, #64]	@ (8004734 <HAL_FLASHEx_Erase+0xdc>)
 80046f2:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80046f6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	601a      	str	r2, [r3, #0]
          break;
 8004704:	e00a      	b.n	800471c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	3301      	adds	r3, #1
 800470a:	60bb      	str	r3, [r7, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4413      	add	r3, r2
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d3da      	bcc.n	80046d2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800471c:	f000 f878 	bl	8004810 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004720:	4b03      	ldr	r3, [pc, #12]	@ (8004730 <HAL_FLASHEx_Erase+0xd8>)
 8004722:	2200      	movs	r2, #0
 8004724:	761a      	strb	r2, [r3, #24]

  return status;
 8004726:	7bfb      	ldrb	r3, [r7, #15]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000724 	.word	0x20000724
 8004734:	40023c00 	.word	0x40023c00

08004738 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	6039      	str	r1, [r7, #0]
 8004742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004744:	4b0d      	ldr	r3, [pc, #52]	@ (800477c <FLASH_MassErase+0x44>)
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	4a0c      	ldr	r2, [pc, #48]	@ (800477c <FLASH_MassErase+0x44>)
 800474a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800474e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004750:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <FLASH_MassErase+0x44>)
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	4a09      	ldr	r2, [pc, #36]	@ (800477c <FLASH_MassErase+0x44>)
 8004756:	f043 0304 	orr.w	r3, r3, #4
 800475a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800475c:	4b07      	ldr	r3, [pc, #28]	@ (800477c <FLASH_MassErase+0x44>)
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	4313      	orrs	r3, r2
 8004766:	4a05      	ldr	r2, [pc, #20]	@ (800477c <FLASH_MassErase+0x44>)
 8004768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800476c:	6113      	str	r3, [r2, #16]
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40023c00 	.word	0x40023c00

08004780 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e010      	b.n	80047be <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d103      	bne.n	80047aa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80047a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	e009      	b.n	80047be <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80047aa:	78fb      	ldrb	r3, [r7, #3]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d103      	bne.n	80047b8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80047b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	e002      	b.n	80047be <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80047b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80047bc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80047be:	4b13      	ldr	r3, [pc, #76]	@ (800480c <FLASH_Erase_Sector+0x8c>)
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	4a12      	ldr	r2, [pc, #72]	@ (800480c <FLASH_Erase_Sector+0x8c>)
 80047c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80047ca:	4b10      	ldr	r3, [pc, #64]	@ (800480c <FLASH_Erase_Sector+0x8c>)
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	490f      	ldr	r1, [pc, #60]	@ (800480c <FLASH_Erase_Sector+0x8c>)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80047d6:	4b0d      	ldr	r3, [pc, #52]	@ (800480c <FLASH_Erase_Sector+0x8c>)
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	4a0c      	ldr	r2, [pc, #48]	@ (800480c <FLASH_Erase_Sector+0x8c>)
 80047dc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80047e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80047e2:	4b0a      	ldr	r3, [pc, #40]	@ (800480c <FLASH_Erase_Sector+0x8c>)
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4313      	orrs	r3, r2
 80047ec:	4a07      	ldr	r2, [pc, #28]	@ (800480c <FLASH_Erase_Sector+0x8c>)
 80047ee:	f043 0302 	orr.w	r3, r3, #2
 80047f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80047f4:	4b05      	ldr	r3, [pc, #20]	@ (800480c <FLASH_Erase_Sector+0x8c>)
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	4a04      	ldr	r2, [pc, #16]	@ (800480c <FLASH_Erase_Sector+0x8c>)
 80047fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047fe:	6113      	str	r3, [r2, #16]
}
 8004800:	bf00      	nop
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	40023c00 	.word	0x40023c00

08004810 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004814:	4b20      	ldr	r3, [pc, #128]	@ (8004898 <FLASH_FlushCaches+0x88>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800481c:	2b00      	cmp	r3, #0
 800481e:	d017      	beq.n	8004850 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004820:	4b1d      	ldr	r3, [pc, #116]	@ (8004898 <FLASH_FlushCaches+0x88>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1c      	ldr	r2, [pc, #112]	@ (8004898 <FLASH_FlushCaches+0x88>)
 8004826:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800482a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800482c:	4b1a      	ldr	r3, [pc, #104]	@ (8004898 <FLASH_FlushCaches+0x88>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a19      	ldr	r2, [pc, #100]	@ (8004898 <FLASH_FlushCaches+0x88>)
 8004832:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	4b17      	ldr	r3, [pc, #92]	@ (8004898 <FLASH_FlushCaches+0x88>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a16      	ldr	r2, [pc, #88]	@ (8004898 <FLASH_FlushCaches+0x88>)
 800483e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004842:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004844:	4b14      	ldr	r3, [pc, #80]	@ (8004898 <FLASH_FlushCaches+0x88>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a13      	ldr	r2, [pc, #76]	@ (8004898 <FLASH_FlushCaches+0x88>)
 800484a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800484e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004850:	4b11      	ldr	r3, [pc, #68]	@ (8004898 <FLASH_FlushCaches+0x88>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004858:	2b00      	cmp	r3, #0
 800485a:	d017      	beq.n	800488c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800485c:	4b0e      	ldr	r3, [pc, #56]	@ (8004898 <FLASH_FlushCaches+0x88>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a0d      	ldr	r2, [pc, #52]	@ (8004898 <FLASH_FlushCaches+0x88>)
 8004862:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004866:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004868:	4b0b      	ldr	r3, [pc, #44]	@ (8004898 <FLASH_FlushCaches+0x88>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a0a      	ldr	r2, [pc, #40]	@ (8004898 <FLASH_FlushCaches+0x88>)
 800486e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	4b08      	ldr	r3, [pc, #32]	@ (8004898 <FLASH_FlushCaches+0x88>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a07      	ldr	r2, [pc, #28]	@ (8004898 <FLASH_FlushCaches+0x88>)
 800487a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800487e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004880:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <FLASH_FlushCaches+0x88>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a04      	ldr	r2, [pc, #16]	@ (8004898 <FLASH_FlushCaches+0x88>)
 8004886:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800488a:	6013      	str	r3, [r2, #0]
  }
}
 800488c:	bf00      	nop
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40023c00 	.word	0x40023c00

0800489c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800489c:	b480      	push	{r7}
 800489e:	b089      	sub	sp, #36	@ 0x24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	e159      	b.n	8004b6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048b8:	2201      	movs	r2, #1
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4013      	ands	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	f040 8148 	bne.w	8004b66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d005      	beq.n	80048ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d130      	bne.n	8004950 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	2203      	movs	r2, #3
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	43db      	mvns	r3, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4013      	ands	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004924:	2201      	movs	r2, #1
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	43db      	mvns	r3, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4013      	ands	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f003 0201 	and.w	r2, r3, #1
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4313      	orrs	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 0303 	and.w	r3, r3, #3
 8004958:	2b03      	cmp	r3, #3
 800495a:	d017      	beq.n	800498c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	2203      	movs	r2, #3
 8004968:	fa02 f303 	lsl.w	r3, r2, r3
 800496c:	43db      	mvns	r3, r3
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	4013      	ands	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4313      	orrs	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d123      	bne.n	80049e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	08da      	lsrs	r2, r3, #3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3208      	adds	r2, #8
 80049a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	220f      	movs	r2, #15
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	43db      	mvns	r3, r3
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	4013      	ands	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	08da      	lsrs	r2, r3, #3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3208      	adds	r2, #8
 80049da:	69b9      	ldr	r1, [r7, #24]
 80049dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	2203      	movs	r2, #3
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	43db      	mvns	r3, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4013      	ands	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 0203 	and.w	r2, r3, #3
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 80a2 	beq.w	8004b66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	4b57      	ldr	r3, [pc, #348]	@ (8004b84 <HAL_GPIO_Init+0x2e8>)
 8004a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2a:	4a56      	ldr	r2, [pc, #344]	@ (8004b84 <HAL_GPIO_Init+0x2e8>)
 8004a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a32:	4b54      	ldr	r3, [pc, #336]	@ (8004b84 <HAL_GPIO_Init+0x2e8>)
 8004a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a3e:	4a52      	ldr	r2, [pc, #328]	@ (8004b88 <HAL_GPIO_Init+0x2ec>)
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	089b      	lsrs	r3, r3, #2
 8004a44:	3302      	adds	r3, #2
 8004a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	220f      	movs	r2, #15
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a49      	ldr	r2, [pc, #292]	@ (8004b8c <HAL_GPIO_Init+0x2f0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d019      	beq.n	8004a9e <HAL_GPIO_Init+0x202>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a48      	ldr	r2, [pc, #288]	@ (8004b90 <HAL_GPIO_Init+0x2f4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_GPIO_Init+0x1fe>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a47      	ldr	r2, [pc, #284]	@ (8004b94 <HAL_GPIO_Init+0x2f8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00d      	beq.n	8004a96 <HAL_GPIO_Init+0x1fa>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a46      	ldr	r2, [pc, #280]	@ (8004b98 <HAL_GPIO_Init+0x2fc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d007      	beq.n	8004a92 <HAL_GPIO_Init+0x1f6>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a45      	ldr	r2, [pc, #276]	@ (8004b9c <HAL_GPIO_Init+0x300>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d101      	bne.n	8004a8e <HAL_GPIO_Init+0x1f2>
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	e008      	b.n	8004aa0 <HAL_GPIO_Init+0x204>
 8004a8e:	2307      	movs	r3, #7
 8004a90:	e006      	b.n	8004aa0 <HAL_GPIO_Init+0x204>
 8004a92:	2303      	movs	r3, #3
 8004a94:	e004      	b.n	8004aa0 <HAL_GPIO_Init+0x204>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e002      	b.n	8004aa0 <HAL_GPIO_Init+0x204>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <HAL_GPIO_Init+0x204>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	f002 0203 	and.w	r2, r2, #3
 8004aa6:	0092      	lsls	r2, r2, #2
 8004aa8:	4093      	lsls	r3, r2
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ab0:	4935      	ldr	r1, [pc, #212]	@ (8004b88 <HAL_GPIO_Init+0x2ec>)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	089b      	lsrs	r3, r3, #2
 8004ab6:	3302      	adds	r3, #2
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004abe:	4b38      	ldr	r3, [pc, #224]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4013      	ands	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ae2:	4a2f      	ldr	r2, [pc, #188]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	43db      	mvns	r3, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4013      	ands	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b0c:	4a24      	ldr	r2, [pc, #144]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b12:	4b23      	ldr	r3, [pc, #140]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b36:	4a1a      	ldr	r2, [pc, #104]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b3c:	4b18      	ldr	r3, [pc, #96]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b60:	4a0f      	ldr	r2, [pc, #60]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	2b0f      	cmp	r3, #15
 8004b70:	f67f aea2 	bls.w	80048b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	3724      	adds	r7, #36	@ 0x24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40013800 	.word	0x40013800
 8004b8c:	40020000 	.word	0x40020000
 8004b90:	40020400 	.word	0x40020400
 8004b94:	40020800 	.word	0x40020800
 8004b98:	40020c00 	.word	0x40020c00
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	40013c00 	.word	0x40013c00

08004ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	807b      	strh	r3, [r7, #2]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bb4:	787b      	ldrb	r3, [r7, #1]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bba:	887a      	ldrh	r2, [r7, #2]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bc0:	e003      	b.n	8004bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bc2:	887b      	ldrh	r3, [r7, #2]
 8004bc4:	041a      	lsls	r2, r3, #16
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	619a      	str	r2, [r3, #24]
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
	...

08004bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e12b      	b.n	8004e42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7fd ff8c 	bl	8002b1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2224      	movs	r2, #36	@ 0x24
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c3c:	f001 fc20 	bl	8006480 <HAL_RCC_GetPCLK1Freq>
 8004c40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	4a81      	ldr	r2, [pc, #516]	@ (8004e4c <HAL_I2C_Init+0x274>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d807      	bhi.n	8004c5c <HAL_I2C_Init+0x84>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a80      	ldr	r2, [pc, #512]	@ (8004e50 <HAL_I2C_Init+0x278>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	bf94      	ite	ls
 8004c54:	2301      	movls	r3, #1
 8004c56:	2300      	movhi	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	e006      	b.n	8004c6a <HAL_I2C_Init+0x92>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4a7d      	ldr	r2, [pc, #500]	@ (8004e54 <HAL_I2C_Init+0x27c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	bf94      	ite	ls
 8004c64:	2301      	movls	r3, #1
 8004c66:	2300      	movhi	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e0e7      	b.n	8004e42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a78      	ldr	r2, [pc, #480]	@ (8004e58 <HAL_I2C_Init+0x280>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	0c9b      	lsrs	r3, r3, #18
 8004c7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4a6a      	ldr	r2, [pc, #424]	@ (8004e4c <HAL_I2C_Init+0x274>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d802      	bhi.n	8004cac <HAL_I2C_Init+0xd4>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	e009      	b.n	8004cc0 <HAL_I2C_Init+0xe8>
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004cb2:	fb02 f303 	mul.w	r3, r2, r3
 8004cb6:	4a69      	ldr	r2, [pc, #420]	@ (8004e5c <HAL_I2C_Init+0x284>)
 8004cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbc:	099b      	lsrs	r3, r3, #6
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004cd2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	495c      	ldr	r1, [pc, #368]	@ (8004e4c <HAL_I2C_Init+0x274>)
 8004cdc:	428b      	cmp	r3, r1
 8004cde:	d819      	bhi.n	8004d14 <HAL_I2C_Init+0x13c>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1e59      	subs	r1, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cee:	1c59      	adds	r1, r3, #1
 8004cf0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004cf4:	400b      	ands	r3, r1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_I2C_Init+0x138>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1e59      	subs	r1, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d08:	3301      	adds	r3, #1
 8004d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0e:	e051      	b.n	8004db4 <HAL_I2C_Init+0x1dc>
 8004d10:	2304      	movs	r3, #4
 8004d12:	e04f      	b.n	8004db4 <HAL_I2C_Init+0x1dc>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d111      	bne.n	8004d40 <HAL_I2C_Init+0x168>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	1e58      	subs	r0, r3, #1
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	440b      	add	r3, r1
 8004d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d2e:	3301      	adds	r3, #1
 8004d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	e012      	b.n	8004d66 <HAL_I2C_Init+0x18e>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	1e58      	subs	r0, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6859      	ldr	r1, [r3, #4]
 8004d48:	460b      	mov	r3, r1
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	0099      	lsls	r1, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d56:	3301      	adds	r3, #1
 8004d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bf0c      	ite	eq
 8004d60:	2301      	moveq	r3, #1
 8004d62:	2300      	movne	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_Init+0x196>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e022      	b.n	8004db4 <HAL_I2C_Init+0x1dc>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10e      	bne.n	8004d94 <HAL_I2C_Init+0x1bc>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1e58      	subs	r0, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6859      	ldr	r1, [r3, #4]
 8004d7e:	460b      	mov	r3, r1
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	440b      	add	r3, r1
 8004d84:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d88:	3301      	adds	r3, #1
 8004d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d92:	e00f      	b.n	8004db4 <HAL_I2C_Init+0x1dc>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	1e58      	subs	r0, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	0099      	lsls	r1, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004daa:	3301      	adds	r3, #1
 8004dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	6809      	ldr	r1, [r1, #0]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69da      	ldr	r2, [r3, #28]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004de2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6911      	ldr	r1, [r2, #16]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68d2      	ldr	r2, [r2, #12]
 8004dee:	4311      	orrs	r1, r2
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	430b      	orrs	r3, r1
 8004df6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695a      	ldr	r2, [r3, #20]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	000186a0 	.word	0x000186a0
 8004e50:	001e847f 	.word	0x001e847f
 8004e54:	003d08ff 	.word	0x003d08ff
 8004e58:	431bde83 	.word	0x431bde83
 8004e5c:	10624dd3 	.word	0x10624dd3

08004e60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af02      	add	r7, sp, #8
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	4608      	mov	r0, r1
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4603      	mov	r3, r0
 8004e70:	817b      	strh	r3, [r7, #10]
 8004e72:	460b      	mov	r3, r1
 8004e74:	813b      	strh	r3, [r7, #8]
 8004e76:	4613      	mov	r3, r2
 8004e78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e7a:	f7fe fb8b 	bl	8003594 <HAL_GetTick>
 8004e7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b20      	cmp	r3, #32
 8004e8a:	f040 80d9 	bne.w	8005040 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	2319      	movs	r3, #25
 8004e94:	2201      	movs	r2, #1
 8004e96:	496d      	ldr	r1, [pc, #436]	@ (800504c <HAL_I2C_Mem_Write+0x1ec>)
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fc8b 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	e0cc      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_I2C_Mem_Write+0x56>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e0c5      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d007      	beq.n	8004edc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2221      	movs	r2, #33	@ 0x21
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2240      	movs	r2, #64	@ 0x40
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a3a      	ldr	r2, [r7, #32]
 8004f06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4a4d      	ldr	r2, [pc, #308]	@ (8005050 <HAL_I2C_Mem_Write+0x1f0>)
 8004f1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f1e:	88f8      	ldrh	r0, [r7, #6]
 8004f20:	893a      	ldrh	r2, [r7, #8]
 8004f22:	8979      	ldrh	r1, [r7, #10]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fac2 	bl	80054b8 <I2C_RequestMemoryWrite>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d052      	beq.n	8004fe0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e081      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fd50 	bl	80059e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00d      	beq.n	8004f6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d107      	bne.n	8004f66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e06b      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	781a      	ldrb	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d11b      	bne.n	8004fe0 <HAL_I2C_Mem_Write+0x180>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d017      	beq.n	8004fe0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb4:	781a      	ldrb	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1aa      	bne.n	8004f3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 fd43 	bl	8005a78 <I2C_WaitOnBTFFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00d      	beq.n	8005014 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d107      	bne.n	8005010 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800500e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e016      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e000      	b.n	8005042 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	00100002 	.word	0x00100002
 8005050:	ffff0000 	.word	0xffff0000

08005054 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08c      	sub	sp, #48	@ 0x30
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	4608      	mov	r0, r1
 800505e:	4611      	mov	r1, r2
 8005060:	461a      	mov	r2, r3
 8005062:	4603      	mov	r3, r0
 8005064:	817b      	strh	r3, [r7, #10]
 8005066:	460b      	mov	r3, r1
 8005068:	813b      	strh	r3, [r7, #8]
 800506a:	4613      	mov	r3, r2
 800506c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800506e:	f7fe fa91 	bl	8003594 <HAL_GetTick>
 8005072:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b20      	cmp	r3, #32
 800507e:	f040 8214 	bne.w	80054aa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	2319      	movs	r3, #25
 8005088:	2201      	movs	r2, #1
 800508a:	497b      	ldr	r1, [pc, #492]	@ (8005278 <HAL_I2C_Mem_Read+0x224>)
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fb91 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005098:	2302      	movs	r3, #2
 800509a:	e207      	b.n	80054ac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_I2C_Mem_Read+0x56>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e200      	b.n	80054ac <HAL_I2C_Mem_Read+0x458>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d007      	beq.n	80050d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2222      	movs	r2, #34	@ 0x22
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2240      	movs	r2, #64	@ 0x40
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005100:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4a5b      	ldr	r2, [pc, #364]	@ (800527c <HAL_I2C_Mem_Read+0x228>)
 8005110:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005112:	88f8      	ldrh	r0, [r7, #6]
 8005114:	893a      	ldrh	r2, [r7, #8]
 8005116:	8979      	ldrh	r1, [r7, #10]
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	4603      	mov	r3, r0
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 fa5e 	bl	80055e4 <I2C_RequestMemoryRead>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e1bc      	b.n	80054ac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005136:	2b00      	cmp	r3, #0
 8005138:	d113      	bne.n	8005162 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800513a:	2300      	movs	r3, #0
 800513c:	623b      	str	r3, [r7, #32]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	623b      	str	r3, [r7, #32]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	623b      	str	r3, [r7, #32]
 800514e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e190      	b.n	8005484 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005166:	2b01      	cmp	r3, #1
 8005168:	d11b      	bne.n	80051a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005178:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	e170      	b.n	8005484 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d11b      	bne.n	80051e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ca:	2300      	movs	r3, #0
 80051cc:	61bb      	str	r3, [r7, #24]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	e150      	b.n	8005484 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80051f8:	e144      	b.n	8005484 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051fe:	2b03      	cmp	r3, #3
 8005200:	f200 80f1 	bhi.w	80053e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005208:	2b01      	cmp	r3, #1
 800520a:	d123      	bne.n	8005254 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800520c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800520e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 fc79 	bl	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e145      	b.n	80054ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005252:	e117      	b.n	8005484 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005258:	2b02      	cmp	r3, #2
 800525a:	d14e      	bne.n	80052fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005262:	2200      	movs	r2, #0
 8005264:	4906      	ldr	r1, [pc, #24]	@ (8005280 <HAL_I2C_Mem_Read+0x22c>)
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 faa4 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d008      	beq.n	8005284 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e11a      	b.n	80054ac <HAL_I2C_Mem_Read+0x458>
 8005276:	bf00      	nop
 8005278:	00100002 	.word	0x00100002
 800527c:	ffff0000 	.word	0xffff0000
 8005280:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d0:	b2d2      	uxtb	r2, r2
 80052d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052f8:	e0c4      	b.n	8005484 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005300:	2200      	movs	r2, #0
 8005302:	496c      	ldr	r1, [pc, #432]	@ (80054b4 <HAL_I2C_Mem_Read+0x460>)
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 fa55 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0cb      	b.n	80054ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	2200      	movs	r2, #0
 800535e:	4955      	ldr	r1, [pc, #340]	@ (80054b4 <HAL_I2C_Mem_Read+0x460>)
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fa27 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e09d      	b.n	80054ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800537e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80053e4:	e04e      	b.n	8005484 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 fb8c 	bl	8005b08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e058      	b.n	80054ac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691a      	ldr	r2, [r3, #16]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005422:	b29b      	uxth	r3, r3
 8005424:	3b01      	subs	r3, #1
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	2b04      	cmp	r3, #4
 8005438:	d124      	bne.n	8005484 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800543e:	2b03      	cmp	r3, #3
 8005440:	d107      	bne.n	8005452 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005450:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005488:	2b00      	cmp	r3, #0
 800548a:	f47f aeb6 	bne.w	80051fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	e000      	b.n	80054ac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80054aa:	2302      	movs	r3, #2
  }
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3728      	adds	r7, #40	@ 0x28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	00010004 	.word	0x00010004

080054b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	4608      	mov	r0, r1
 80054c2:	4611      	mov	r1, r2
 80054c4:	461a      	mov	r2, r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	817b      	strh	r3, [r7, #10]
 80054ca:	460b      	mov	r3, r1
 80054cc:	813b      	strh	r3, [r7, #8]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f960 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00d      	beq.n	8005516 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005508:	d103      	bne.n	8005512 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005510:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e05f      	b.n	80055d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005516:	897b      	ldrh	r3, [r7, #10]
 8005518:	b2db      	uxtb	r3, r3
 800551a:	461a      	mov	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005524:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	6a3a      	ldr	r2, [r7, #32]
 800552a:	492d      	ldr	r1, [pc, #180]	@ (80055e0 <I2C_RequestMemoryWrite+0x128>)
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f9bb 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e04c      	b.n	80055d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005554:	6a39      	ldr	r1, [r7, #32]
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 fa46 	bl	80059e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00d      	beq.n	800557e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005566:	2b04      	cmp	r3, #4
 8005568:	d107      	bne.n	800557a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005578:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e02b      	b.n	80055d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d105      	bne.n	8005590 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005584:	893b      	ldrh	r3, [r7, #8]
 8005586:	b2da      	uxtb	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	611a      	str	r2, [r3, #16]
 800558e:	e021      	b.n	80055d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005590:	893b      	ldrh	r3, [r7, #8]
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	b29b      	uxth	r3, r3
 8005596:	b2da      	uxtb	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800559e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a0:	6a39      	ldr	r1, [r7, #32]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 fa20 	bl	80059e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00d      	beq.n	80055ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d107      	bne.n	80055c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e005      	b.n	80055d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055ca:	893b      	ldrh	r3, [r7, #8]
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	00010002 	.word	0x00010002

080055e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	4608      	mov	r0, r1
 80055ee:	4611      	mov	r1, r2
 80055f0:	461a      	mov	r2, r3
 80055f2:	4603      	mov	r3, r0
 80055f4:	817b      	strh	r3, [r7, #10]
 80055f6:	460b      	mov	r3, r1
 80055f8:	813b      	strh	r3, [r7, #8]
 80055fa:	4613      	mov	r3, r2
 80055fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800560c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800561c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	2200      	movs	r2, #0
 8005626:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f8c2 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00d      	beq.n	8005652 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005644:	d103      	bne.n	800564e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800564c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e0aa      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005652:	897b      	ldrh	r3, [r7, #10]
 8005654:	b2db      	uxtb	r3, r3
 8005656:	461a      	mov	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005660:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	6a3a      	ldr	r2, [r7, #32]
 8005666:	4952      	ldr	r1, [pc, #328]	@ (80057b0 <I2C_RequestMemoryRead+0x1cc>)
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f91d 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e097      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800568e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005690:	6a39      	ldr	r1, [r7, #32]
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f9a8 	bl	80059e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00d      	beq.n	80056ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d107      	bne.n	80056b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e076      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d105      	bne.n	80056cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056c0:	893b      	ldrh	r3, [r7, #8]
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	611a      	str	r2, [r3, #16]
 80056ca:	e021      	b.n	8005710 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056cc:	893b      	ldrh	r3, [r7, #8]
 80056ce:	0a1b      	lsrs	r3, r3, #8
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056dc:	6a39      	ldr	r1, [r7, #32]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f982 	bl	80059e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00d      	beq.n	8005706 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d107      	bne.n	8005702 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005700:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e050      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005706:	893b      	ldrh	r3, [r7, #8]
 8005708:	b2da      	uxtb	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005712:	6a39      	ldr	r1, [r7, #32]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f967 	bl	80059e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00d      	beq.n	800573c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005724:	2b04      	cmp	r3, #4
 8005726:	d107      	bne.n	8005738 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005736:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e035      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800574a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	9300      	str	r3, [sp, #0]
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	2200      	movs	r2, #0
 8005754:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f82b 	bl	80057b4 <I2C_WaitOnFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00d      	beq.n	8005780 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800576e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005772:	d103      	bne.n	800577c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800577a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e013      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005780:	897b      	ldrh	r3, [r7, #10]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f043 0301 	orr.w	r3, r3, #1
 8005788:	b2da      	uxtb	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005792:	6a3a      	ldr	r2, [r7, #32]
 8005794:	4906      	ldr	r1, [pc, #24]	@ (80057b0 <I2C_RequestMemoryRead+0x1cc>)
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f886 	bl	80058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	00010002 	.word	0x00010002

080057b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	4613      	mov	r3, r2
 80057c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057c4:	e048      	b.n	8005858 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d044      	beq.n	8005858 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ce:	f7fd fee1 	bl	8003594 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d302      	bcc.n	80057e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d139      	bne.n	8005858 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	0c1b      	lsrs	r3, r3, #16
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d10d      	bne.n	800580a <I2C_WaitOnFlagUntilTimeout+0x56>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	43da      	mvns	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	4013      	ands	r3, r2
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	bf0c      	ite	eq
 8005800:	2301      	moveq	r3, #1
 8005802:	2300      	movne	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	e00c      	b.n	8005824 <I2C_WaitOnFlagUntilTimeout+0x70>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	43da      	mvns	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4013      	ands	r3, r2
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	bf0c      	ite	eq
 800581c:	2301      	moveq	r3, #1
 800581e:	2300      	movne	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	461a      	mov	r2, r3
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	429a      	cmp	r2, r3
 8005828:	d116      	bne.n	8005858 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005844:	f043 0220 	orr.w	r2, r3, #32
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e023      	b.n	80058a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	0c1b      	lsrs	r3, r3, #16
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b01      	cmp	r3, #1
 8005860:	d10d      	bne.n	800587e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	43da      	mvns	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4013      	ands	r3, r2
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	e00c      	b.n	8005898 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	43da      	mvns	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4013      	ands	r3, r2
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	bf0c      	ite	eq
 8005890:	2301      	moveq	r3, #1
 8005892:	2300      	movne	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	429a      	cmp	r2, r3
 800589c:	d093      	beq.n	80057c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058b6:	e071      	b.n	800599c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058c6:	d123      	bne.n	8005910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fc:	f043 0204 	orr.w	r2, r3, #4
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e067      	b.n	80059e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005916:	d041      	beq.n	800599c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005918:	f7fd fe3c 	bl	8003594 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	429a      	cmp	r2, r3
 8005926:	d302      	bcc.n	800592e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d136      	bne.n	800599c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	0c1b      	lsrs	r3, r3, #16
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	d10c      	bne.n	8005952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	43da      	mvns	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4013      	ands	r3, r2
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	bf14      	ite	ne
 800594a:	2301      	movne	r3, #1
 800594c:	2300      	moveq	r3, #0
 800594e:	b2db      	uxtb	r3, r3
 8005950:	e00b      	b.n	800596a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	43da      	mvns	r2, r3
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	4013      	ands	r3, r2
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	bf14      	ite	ne
 8005964:	2301      	movne	r3, #1
 8005966:	2300      	moveq	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d016      	beq.n	800599c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005988:	f043 0220 	orr.w	r2, r3, #32
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e021      	b.n	80059e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	0c1b      	lsrs	r3, r3, #16
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d10c      	bne.n	80059c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	43da      	mvns	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4013      	ands	r3, r2
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bf14      	ite	ne
 80059b8:	2301      	movne	r3, #1
 80059ba:	2300      	moveq	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	e00b      	b.n	80059d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	43da      	mvns	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	4013      	ands	r3, r2
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	bf14      	ite	ne
 80059d2:	2301      	movne	r3, #1
 80059d4:	2300      	moveq	r3, #0
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f47f af6d 	bne.w	80058b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059f4:	e034      	b.n	8005a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 f8e3 	bl	8005bc2 <I2C_IsAcknowledgeFailed>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e034      	b.n	8005a70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0c:	d028      	beq.n	8005a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a0e:	f7fd fdc1 	bl	8003594 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d302      	bcc.n	8005a24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d11d      	bne.n	8005a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2e:	2b80      	cmp	r3, #128	@ 0x80
 8005a30:	d016      	beq.n	8005a60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4c:	f043 0220 	orr.w	r2, r3, #32
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e007      	b.n	8005a70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a6a:	2b80      	cmp	r3, #128	@ 0x80
 8005a6c:	d1c3      	bne.n	80059f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a84:	e034      	b.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f89b 	bl	8005bc2 <I2C_IsAcknowledgeFailed>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e034      	b.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d028      	beq.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a9e:	f7fd fd79 	bl	8003594 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d302      	bcc.n	8005ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d11d      	bne.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d016      	beq.n	8005af0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005adc:	f043 0220 	orr.w	r2, r3, #32
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e007      	b.n	8005b00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	f003 0304 	and.w	r3, r3, #4
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d1c3      	bne.n	8005a86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b14:	e049      	b.n	8005baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	f003 0310 	and.w	r3, r3, #16
 8005b20:	2b10      	cmp	r3, #16
 8005b22:	d119      	bne.n	8005b58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f06f 0210 	mvn.w	r2, #16
 8005b2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e030      	b.n	8005bba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b58:	f7fd fd1c 	bl	8003594 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d302      	bcc.n	8005b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d11d      	bne.n	8005baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b78:	2b40      	cmp	r3, #64	@ 0x40
 8005b7a:	d016      	beq.n	8005baa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e007      	b.n	8005bba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb4:	2b40      	cmp	r3, #64	@ 0x40
 8005bb6:	d1ae      	bne.n	8005b16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bd8:	d11b      	bne.n	8005c12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005be2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	f043 0204 	orr.w	r2, r3, #4
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e267      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d075      	beq.n	8005d2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c3e:	4b88      	ldr	r3, [pc, #544]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 030c 	and.w	r3, r3, #12
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d00c      	beq.n	8005c64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c4a:	4b85      	ldr	r3, [pc, #532]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d112      	bne.n	8005c7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c56:	4b82      	ldr	r3, [pc, #520]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c62:	d10b      	bne.n	8005c7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c64:	4b7e      	ldr	r3, [pc, #504]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d05b      	beq.n	8005d28 <HAL_RCC_OscConfig+0x108>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d157      	bne.n	8005d28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e242      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c84:	d106      	bne.n	8005c94 <HAL_RCC_OscConfig+0x74>
 8005c86:	4b76      	ldr	r3, [pc, #472]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a75      	ldr	r2, [pc, #468]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	e01d      	b.n	8005cd0 <HAL_RCC_OscConfig+0xb0>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c9c:	d10c      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x98>
 8005c9e:	4b70      	ldr	r3, [pc, #448]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a6f      	ldr	r2, [pc, #444]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	4b6d      	ldr	r3, [pc, #436]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a6c      	ldr	r2, [pc, #432]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	e00b      	b.n	8005cd0 <HAL_RCC_OscConfig+0xb0>
 8005cb8:	4b69      	ldr	r3, [pc, #420]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a68      	ldr	r2, [pc, #416]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005cbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	4b66      	ldr	r3, [pc, #408]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a65      	ldr	r2, [pc, #404]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005cca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d013      	beq.n	8005d00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd8:	f7fd fc5c 	bl	8003594 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ce0:	f7fd fc58 	bl	8003594 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b64      	cmp	r3, #100	@ 0x64
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e207      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf2:	4b5b      	ldr	r3, [pc, #364]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0f0      	beq.n	8005ce0 <HAL_RCC_OscConfig+0xc0>
 8005cfe:	e014      	b.n	8005d2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d00:	f7fd fc48 	bl	8003594 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d08:	f7fd fc44 	bl	8003594 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b64      	cmp	r3, #100	@ 0x64
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e1f3      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1a:	4b51      	ldr	r3, [pc, #324]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f0      	bne.n	8005d08 <HAL_RCC_OscConfig+0xe8>
 8005d26:	e000      	b.n	8005d2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d063      	beq.n	8005dfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d36:	4b4a      	ldr	r3, [pc, #296]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 030c 	and.w	r3, r3, #12
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00b      	beq.n	8005d5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d42:	4b47      	ldr	r3, [pc, #284]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d4a:	2b08      	cmp	r3, #8
 8005d4c:	d11c      	bne.n	8005d88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d4e:	4b44      	ldr	r3, [pc, #272]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d116      	bne.n	8005d88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d5a:	4b41      	ldr	r3, [pc, #260]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_RCC_OscConfig+0x152>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d001      	beq.n	8005d72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e1c7      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d72:	4b3b      	ldr	r3, [pc, #236]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	4937      	ldr	r1, [pc, #220]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d86:	e03a      	b.n	8005dfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d020      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d90:	4b34      	ldr	r3, [pc, #208]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d96:	f7fd fbfd 	bl	8003594 <HAL_GetTick>
 8005d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d9e:	f7fd fbf9 	bl	8003594 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e1a8      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db0:	4b2b      	ldr	r3, [pc, #172]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0f0      	beq.n	8005d9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dbc:	4b28      	ldr	r3, [pc, #160]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	4925      	ldr	r1, [pc, #148]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	600b      	str	r3, [r1, #0]
 8005dd0:	e015      	b.n	8005dfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dd2:	4b24      	ldr	r3, [pc, #144]	@ (8005e64 <HAL_RCC_OscConfig+0x244>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fd fbdc 	bl	8003594 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005de0:	f7fd fbd8 	bl	8003594 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e187      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d036      	beq.n	8005e78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d016      	beq.n	8005e40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e12:	4b15      	ldr	r3, [pc, #84]	@ (8005e68 <HAL_RCC_OscConfig+0x248>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e18:	f7fd fbbc 	bl	8003594 <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e20:	f7fd fbb8 	bl	8003594 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e167      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e32:	4b0b      	ldr	r3, [pc, #44]	@ (8005e60 <HAL_RCC_OscConfig+0x240>)
 8005e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0f0      	beq.n	8005e20 <HAL_RCC_OscConfig+0x200>
 8005e3e:	e01b      	b.n	8005e78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e40:	4b09      	ldr	r3, [pc, #36]	@ (8005e68 <HAL_RCC_OscConfig+0x248>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e46:	f7fd fba5 	bl	8003594 <HAL_GetTick>
 8005e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e4c:	e00e      	b.n	8005e6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e4e:	f7fd fba1 	bl	8003594 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d907      	bls.n	8005e6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e150      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
 8005e60:	40023800 	.word	0x40023800
 8005e64:	42470000 	.word	0x42470000
 8005e68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e6c:	4b88      	ldr	r3, [pc, #544]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1ea      	bne.n	8005e4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8097 	beq.w	8005fb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e86:	2300      	movs	r3, #0
 8005e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e8a:	4b81      	ldr	r3, [pc, #516]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10f      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e96:	2300      	movs	r3, #0
 8005e98:	60bb      	str	r3, [r7, #8]
 8005e9a:	4b7d      	ldr	r3, [pc, #500]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9e:	4a7c      	ldr	r2, [pc, #496]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ea6:	4b7a      	ldr	r3, [pc, #488]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eae:	60bb      	str	r3, [r7, #8]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eb6:	4b77      	ldr	r3, [pc, #476]	@ (8006094 <HAL_RCC_OscConfig+0x474>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d118      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ec2:	4b74      	ldr	r3, [pc, #464]	@ (8006094 <HAL_RCC_OscConfig+0x474>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a73      	ldr	r2, [pc, #460]	@ (8006094 <HAL_RCC_OscConfig+0x474>)
 8005ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ece:	f7fd fb61 	bl	8003594 <HAL_GetTick>
 8005ed2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed4:	e008      	b.n	8005ee8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed6:	f7fd fb5d 	bl	8003594 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d901      	bls.n	8005ee8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e10c      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee8:	4b6a      	ldr	r3, [pc, #424]	@ (8006094 <HAL_RCC_OscConfig+0x474>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d0f0      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d106      	bne.n	8005f0a <HAL_RCC_OscConfig+0x2ea>
 8005efc:	4b64      	ldr	r3, [pc, #400]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f00:	4a63      	ldr	r2, [pc, #396]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f08:	e01c      	b.n	8005f44 <HAL_RCC_OscConfig+0x324>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b05      	cmp	r3, #5
 8005f10:	d10c      	bne.n	8005f2c <HAL_RCC_OscConfig+0x30c>
 8005f12:	4b5f      	ldr	r3, [pc, #380]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f16:	4a5e      	ldr	r2, [pc, #376]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f18:	f043 0304 	orr.w	r3, r3, #4
 8005f1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f1e:	4b5c      	ldr	r3, [pc, #368]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f22:	4a5b      	ldr	r2, [pc, #364]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f24:	f043 0301 	orr.w	r3, r3, #1
 8005f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f2a:	e00b      	b.n	8005f44 <HAL_RCC_OscConfig+0x324>
 8005f2c:	4b58      	ldr	r3, [pc, #352]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f30:	4a57      	ldr	r2, [pc, #348]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f32:	f023 0301 	bic.w	r3, r3, #1
 8005f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f38:	4b55      	ldr	r3, [pc, #340]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3c:	4a54      	ldr	r2, [pc, #336]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f3e:	f023 0304 	bic.w	r3, r3, #4
 8005f42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d015      	beq.n	8005f78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f4c:	f7fd fb22 	bl	8003594 <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f52:	e00a      	b.n	8005f6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f54:	f7fd fb1e 	bl	8003594 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e0cb      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f6a:	4b49      	ldr	r3, [pc, #292]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0ee      	beq.n	8005f54 <HAL_RCC_OscConfig+0x334>
 8005f76:	e014      	b.n	8005fa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f78:	f7fd fb0c 	bl	8003594 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f7e:	e00a      	b.n	8005f96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f80:	f7fd fb08 	bl	8003594 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e0b5      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f96:	4b3e      	ldr	r3, [pc, #248]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1ee      	bne.n	8005f80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fa2:	7dfb      	ldrb	r3, [r7, #23]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d105      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fa8:	4b39      	ldr	r3, [pc, #228]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fac:	4a38      	ldr	r2, [pc, #224]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005fae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 80a1 	beq.w	8006100 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fbe:	4b34      	ldr	r3, [pc, #208]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 030c 	and.w	r3, r3, #12
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d05c      	beq.n	8006084 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d141      	bne.n	8006056 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd2:	4b31      	ldr	r3, [pc, #196]	@ (8006098 <HAL_RCC_OscConfig+0x478>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd8:	f7fd fadc 	bl	8003594 <HAL_GetTick>
 8005fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fe0:	f7fd fad8 	bl	8003594 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e087      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ff2:	4b27      	ldr	r3, [pc, #156]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1f0      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69da      	ldr	r2, [r3, #28]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	431a      	orrs	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600c:	019b      	lsls	r3, r3, #6
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006014:	085b      	lsrs	r3, r3, #1
 8006016:	3b01      	subs	r3, #1
 8006018:	041b      	lsls	r3, r3, #16
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006020:	061b      	lsls	r3, r3, #24
 8006022:	491b      	ldr	r1, [pc, #108]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8006024:	4313      	orrs	r3, r2
 8006026:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006028:	4b1b      	ldr	r3, [pc, #108]	@ (8006098 <HAL_RCC_OscConfig+0x478>)
 800602a:	2201      	movs	r2, #1
 800602c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800602e:	f7fd fab1 	bl	8003594 <HAL_GetTick>
 8006032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006036:	f7fd faad 	bl	8003594 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e05c      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006048:	4b11      	ldr	r3, [pc, #68]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0f0      	beq.n	8006036 <HAL_RCC_OscConfig+0x416>
 8006054:	e054      	b.n	8006100 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006056:	4b10      	ldr	r3, [pc, #64]	@ (8006098 <HAL_RCC_OscConfig+0x478>)
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800605c:	f7fd fa9a 	bl	8003594 <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006064:	f7fd fa96 	bl	8003594 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e045      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006076:	4b06      	ldr	r3, [pc, #24]	@ (8006090 <HAL_RCC_OscConfig+0x470>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1f0      	bne.n	8006064 <HAL_RCC_OscConfig+0x444>
 8006082:	e03d      	b.n	8006100 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d107      	bne.n	800609c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e038      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
 8006090:	40023800 	.word	0x40023800
 8006094:	40007000 	.word	0x40007000
 8006098:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800609c:	4b1b      	ldr	r3, [pc, #108]	@ (800610c <HAL_RCC_OscConfig+0x4ec>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d028      	beq.n	80060fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d121      	bne.n	80060fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d11a      	bne.n	80060fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80060cc:	4013      	ands	r3, r2
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d111      	bne.n	80060fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e2:	085b      	lsrs	r3, r3, #1
 80060e4:	3b01      	subs	r3, #1
 80060e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d107      	bne.n	80060fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d001      	beq.n	8006100 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e000      	b.n	8006102 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40023800 	.word	0x40023800

08006110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0cc      	b.n	80062be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006124:	4b68      	ldr	r3, [pc, #416]	@ (80062c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	429a      	cmp	r2, r3
 8006130:	d90c      	bls.n	800614c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006132:	4b65      	ldr	r3, [pc, #404]	@ (80062c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800613a:	4b63      	ldr	r3, [pc, #396]	@ (80062c8 <HAL_RCC_ClockConfig+0x1b8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d001      	beq.n	800614c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0b8      	b.n	80062be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d020      	beq.n	800619a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006164:	4b59      	ldr	r3, [pc, #356]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	4a58      	ldr	r2, [pc, #352]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 800616a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800616e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0308 	and.w	r3, r3, #8
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800617c:	4b53      	ldr	r3, [pc, #332]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	4a52      	ldr	r2, [pc, #328]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006182:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006188:	4b50      	ldr	r3, [pc, #320]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	494d      	ldr	r1, [pc, #308]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006196:	4313      	orrs	r3, r2
 8006198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d044      	beq.n	8006230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d107      	bne.n	80061be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ae:	4b47      	ldr	r3, [pc, #284]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d119      	bne.n	80061ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e07f      	b.n	80062be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d003      	beq.n	80061ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d107      	bne.n	80061de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ce:	4b3f      	ldr	r3, [pc, #252]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d109      	bne.n	80061ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e06f      	b.n	80062be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061de:	4b3b      	ldr	r3, [pc, #236]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e067      	b.n	80062be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061ee:	4b37      	ldr	r3, [pc, #220]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f023 0203 	bic.w	r2, r3, #3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	4934      	ldr	r1, [pc, #208]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006200:	f7fd f9c8 	bl	8003594 <HAL_GetTick>
 8006204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006206:	e00a      	b.n	800621e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006208:	f7fd f9c4 	bl	8003594 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006216:	4293      	cmp	r3, r2
 8006218:	d901      	bls.n	800621e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e04f      	b.n	80062be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800621e:	4b2b      	ldr	r3, [pc, #172]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 020c 	and.w	r2, r3, #12
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	429a      	cmp	r2, r3
 800622e:	d1eb      	bne.n	8006208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006230:	4b25      	ldr	r3, [pc, #148]	@ (80062c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d20c      	bcs.n	8006258 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800623e:	4b22      	ldr	r3, [pc, #136]	@ (80062c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006246:	4b20      	ldr	r3, [pc, #128]	@ (80062c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d001      	beq.n	8006258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e032      	b.n	80062be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006264:	4b19      	ldr	r3, [pc, #100]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	4916      	ldr	r1, [pc, #88]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006272:	4313      	orrs	r3, r2
 8006274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0308 	and.w	r3, r3, #8
 800627e:	2b00      	cmp	r3, #0
 8006280:	d009      	beq.n	8006296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006282:	4b12      	ldr	r3, [pc, #72]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	490e      	ldr	r1, [pc, #56]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 8006292:	4313      	orrs	r3, r2
 8006294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006296:	f000 f821 	bl	80062dc <HAL_RCC_GetSysClockFreq>
 800629a:	4602      	mov	r2, r0
 800629c:	4b0b      	ldr	r3, [pc, #44]	@ (80062cc <HAL_RCC_ClockConfig+0x1bc>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	091b      	lsrs	r3, r3, #4
 80062a2:	f003 030f 	and.w	r3, r3, #15
 80062a6:	490a      	ldr	r1, [pc, #40]	@ (80062d0 <HAL_RCC_ClockConfig+0x1c0>)
 80062a8:	5ccb      	ldrb	r3, [r1, r3]
 80062aa:	fa22 f303 	lsr.w	r3, r2, r3
 80062ae:	4a09      	ldr	r2, [pc, #36]	@ (80062d4 <HAL_RCC_ClockConfig+0x1c4>)
 80062b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80062b2:	4b09      	ldr	r3, [pc, #36]	@ (80062d8 <HAL_RCC_ClockConfig+0x1c8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fc ff7e 	bl	80031b8 <HAL_InitTick>

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	40023c00 	.word	0x40023c00
 80062cc:	40023800 	.word	0x40023800
 80062d0:	08009794 	.word	0x08009794
 80062d4:	20000000 	.word	0x20000000
 80062d8:	20000004 	.word	0x20000004

080062dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e0:	b090      	sub	sp, #64	@ 0x40
 80062e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80062e8:	2300      	movs	r3, #0
 80062ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80062f0:	2300      	movs	r3, #0
 80062f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062f4:	4b59      	ldr	r3, [pc, #356]	@ (800645c <HAL_RCC_GetSysClockFreq+0x180>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f003 030c 	and.w	r3, r3, #12
 80062fc:	2b08      	cmp	r3, #8
 80062fe:	d00d      	beq.n	800631c <HAL_RCC_GetSysClockFreq+0x40>
 8006300:	2b08      	cmp	r3, #8
 8006302:	f200 80a1 	bhi.w	8006448 <HAL_RCC_GetSysClockFreq+0x16c>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <HAL_RCC_GetSysClockFreq+0x34>
 800630a:	2b04      	cmp	r3, #4
 800630c:	d003      	beq.n	8006316 <HAL_RCC_GetSysClockFreq+0x3a>
 800630e:	e09b      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006310:	4b53      	ldr	r3, [pc, #332]	@ (8006460 <HAL_RCC_GetSysClockFreq+0x184>)
 8006312:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006314:	e09b      	b.n	800644e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006316:	4b53      	ldr	r3, [pc, #332]	@ (8006464 <HAL_RCC_GetSysClockFreq+0x188>)
 8006318:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800631a:	e098      	b.n	800644e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800631c:	4b4f      	ldr	r3, [pc, #316]	@ (800645c <HAL_RCC_GetSysClockFreq+0x180>)
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006324:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006326:	4b4d      	ldr	r3, [pc, #308]	@ (800645c <HAL_RCC_GetSysClockFreq+0x180>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d028      	beq.n	8006384 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006332:	4b4a      	ldr	r3, [pc, #296]	@ (800645c <HAL_RCC_GetSysClockFreq+0x180>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	099b      	lsrs	r3, r3, #6
 8006338:	2200      	movs	r2, #0
 800633a:	623b      	str	r3, [r7, #32]
 800633c:	627a      	str	r2, [r7, #36]	@ 0x24
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006344:	2100      	movs	r1, #0
 8006346:	4b47      	ldr	r3, [pc, #284]	@ (8006464 <HAL_RCC_GetSysClockFreq+0x188>)
 8006348:	fb03 f201 	mul.w	r2, r3, r1
 800634c:	2300      	movs	r3, #0
 800634e:	fb00 f303 	mul.w	r3, r0, r3
 8006352:	4413      	add	r3, r2
 8006354:	4a43      	ldr	r2, [pc, #268]	@ (8006464 <HAL_RCC_GetSysClockFreq+0x188>)
 8006356:	fba0 1202 	umull	r1, r2, r0, r2
 800635a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800635c:	460a      	mov	r2, r1
 800635e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006362:	4413      	add	r3, r2
 8006364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006368:	2200      	movs	r2, #0
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	61fa      	str	r2, [r7, #28]
 800636e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006372:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006376:	f7fa fc5f 	bl	8000c38 <__aeabi_uldivmod>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4613      	mov	r3, r2
 8006380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006382:	e053      	b.n	800642c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006384:	4b35      	ldr	r3, [pc, #212]	@ (800645c <HAL_RCC_GetSysClockFreq+0x180>)
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	099b      	lsrs	r3, r3, #6
 800638a:	2200      	movs	r2, #0
 800638c:	613b      	str	r3, [r7, #16]
 800638e:	617a      	str	r2, [r7, #20]
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006396:	f04f 0b00 	mov.w	fp, #0
 800639a:	4652      	mov	r2, sl
 800639c:	465b      	mov	r3, fp
 800639e:	f04f 0000 	mov.w	r0, #0
 80063a2:	f04f 0100 	mov.w	r1, #0
 80063a6:	0159      	lsls	r1, r3, #5
 80063a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063ac:	0150      	lsls	r0, r2, #5
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	ebb2 080a 	subs.w	r8, r2, sl
 80063b6:	eb63 090b 	sbc.w	r9, r3, fp
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80063c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80063ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80063ce:	ebb2 0408 	subs.w	r4, r2, r8
 80063d2:	eb63 0509 	sbc.w	r5, r3, r9
 80063d6:	f04f 0200 	mov.w	r2, #0
 80063da:	f04f 0300 	mov.w	r3, #0
 80063de:	00eb      	lsls	r3, r5, #3
 80063e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063e4:	00e2      	lsls	r2, r4, #3
 80063e6:	4614      	mov	r4, r2
 80063e8:	461d      	mov	r5, r3
 80063ea:	eb14 030a 	adds.w	r3, r4, sl
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	eb45 030b 	adc.w	r3, r5, fp
 80063f4:	607b      	str	r3, [r7, #4]
 80063f6:	f04f 0200 	mov.w	r2, #0
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006402:	4629      	mov	r1, r5
 8006404:	028b      	lsls	r3, r1, #10
 8006406:	4621      	mov	r1, r4
 8006408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800640c:	4621      	mov	r1, r4
 800640e:	028a      	lsls	r2, r1, #10
 8006410:	4610      	mov	r0, r2
 8006412:	4619      	mov	r1, r3
 8006414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006416:	2200      	movs	r2, #0
 8006418:	60bb      	str	r3, [r7, #8]
 800641a:	60fa      	str	r2, [r7, #12]
 800641c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006420:	f7fa fc0a 	bl	8000c38 <__aeabi_uldivmod>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4613      	mov	r3, r2
 800642a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800642c:	4b0b      	ldr	r3, [pc, #44]	@ (800645c <HAL_RCC_GetSysClockFreq+0x180>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	0c1b      	lsrs	r3, r3, #16
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	3301      	adds	r3, #1
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800643c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800643e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006440:	fbb2 f3f3 	udiv	r3, r2, r3
 8006444:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006446:	e002      	b.n	800644e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006448:	4b05      	ldr	r3, [pc, #20]	@ (8006460 <HAL_RCC_GetSysClockFreq+0x184>)
 800644a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800644c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800644e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006450:	4618      	mov	r0, r3
 8006452:	3740      	adds	r7, #64	@ 0x40
 8006454:	46bd      	mov	sp, r7
 8006456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800645a:	bf00      	nop
 800645c:	40023800 	.word	0x40023800
 8006460:	00f42400 	.word	0x00f42400
 8006464:	017d7840 	.word	0x017d7840

08006468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800646c:	4b03      	ldr	r3, [pc, #12]	@ (800647c <HAL_RCC_GetHCLKFreq+0x14>)
 800646e:	681b      	ldr	r3, [r3, #0]
}
 8006470:	4618      	mov	r0, r3
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	20000000 	.word	0x20000000

08006480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006484:	f7ff fff0 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 8006488:	4602      	mov	r2, r0
 800648a:	4b05      	ldr	r3, [pc, #20]	@ (80064a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	0a9b      	lsrs	r3, r3, #10
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	4903      	ldr	r1, [pc, #12]	@ (80064a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006496:	5ccb      	ldrb	r3, [r1, r3]
 8006498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800649c:	4618      	mov	r0, r3
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	40023800 	.word	0x40023800
 80064a4:	080097a4 	.word	0x080097a4

080064a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064ac:	f7ff ffdc 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 80064b0:	4602      	mov	r2, r0
 80064b2:	4b05      	ldr	r3, [pc, #20]	@ (80064c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	0b5b      	lsrs	r3, r3, #13
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	4903      	ldr	r1, [pc, #12]	@ (80064cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80064be:	5ccb      	ldrb	r3, [r1, r3]
 80064c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	40023800 	.word	0x40023800
 80064cc:	080097a4 	.word	0x080097a4

080064d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	220f      	movs	r2, #15
 80064de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80064e0:	4b12      	ldr	r3, [pc, #72]	@ (800652c <HAL_RCC_GetClockConfig+0x5c>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 0203 	and.w	r2, r3, #3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064ec:	4b0f      	ldr	r3, [pc, #60]	@ (800652c <HAL_RCC_GetClockConfig+0x5c>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064f8:	4b0c      	ldr	r3, [pc, #48]	@ (800652c <HAL_RCC_GetClockConfig+0x5c>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006504:	4b09      	ldr	r3, [pc, #36]	@ (800652c <HAL_RCC_GetClockConfig+0x5c>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	08db      	lsrs	r3, r3, #3
 800650a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006512:	4b07      	ldr	r3, [pc, #28]	@ (8006530 <HAL_RCC_GetClockConfig+0x60>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0207 	and.w	r2, r3, #7
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	601a      	str	r2, [r3, #0]
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40023800 	.word	0x40023800
 8006530:	40023c00 	.word	0x40023c00

08006534 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e07b      	b.n	800663e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654a:	2b00      	cmp	r3, #0
 800654c:	d108      	bne.n	8006560 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006556:	d009      	beq.n	800656c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	61da      	str	r2, [r3, #28]
 800655e:	e005      	b.n	800656c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d106      	bne.n	800658c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7fc fcee 	bl	8002f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065f0:	ea42 0103 	orr.w	r1, r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	0c1b      	lsrs	r3, r3, #16
 800660a:	f003 0104 	and.w	r1, r3, #4
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006612:	f003 0210 	and.w	r2, r3, #16
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69da      	ldr	r2, [r3, #28]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800662c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b088      	sub	sp, #32
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	603b      	str	r3, [r7, #0]
 8006652:	4613      	mov	r3, r2
 8006654:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006656:	f7fc ff9d 	bl	8003594 <HAL_GetTick>
 800665a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800665c:	88fb      	ldrh	r3, [r7, #6]
 800665e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b01      	cmp	r3, #1
 800666a:	d001      	beq.n	8006670 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800666c:	2302      	movs	r3, #2
 800666e:	e12a      	b.n	80068c6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_SPI_Transmit+0x36>
 8006676:	88fb      	ldrh	r3, [r7, #6]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e122      	b.n	80068c6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006686:	2b01      	cmp	r3, #1
 8006688:	d101      	bne.n	800668e <HAL_SPI_Transmit+0x48>
 800668a:	2302      	movs	r3, #2
 800668c:	e11b      	b.n	80068c6 <HAL_SPI_Transmit+0x280>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2203      	movs	r2, #3
 800669a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	88fa      	ldrh	r2, [r7, #6]
 80066ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	88fa      	ldrh	r2, [r7, #6]
 80066b4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066dc:	d10f      	bne.n	80066fe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006708:	2b40      	cmp	r3, #64	@ 0x40
 800670a:	d007      	beq.n	800671c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800671a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006724:	d152      	bne.n	80067cc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <HAL_SPI_Transmit+0xee>
 800672e:	8b7b      	ldrh	r3, [r7, #26]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d145      	bne.n	80067c0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006738:	881a      	ldrh	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006744:	1c9a      	adds	r2, r3, #2
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006758:	e032      	b.n	80067c0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b02      	cmp	r3, #2
 8006766:	d112      	bne.n	800678e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676c:	881a      	ldrh	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006778:	1c9a      	adds	r2, r3, #2
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006782:	b29b      	uxth	r3, r3
 8006784:	3b01      	subs	r3, #1
 8006786:	b29a      	uxth	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800678c:	e018      	b.n	80067c0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800678e:	f7fc ff01 	bl	8003594 <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d803      	bhi.n	80067a6 <HAL_SPI_Transmit+0x160>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a4:	d102      	bne.n	80067ac <HAL_SPI_Transmit+0x166>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d109      	bne.n	80067c0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e082      	b.n	80068c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1c7      	bne.n	800675a <HAL_SPI_Transmit+0x114>
 80067ca:	e053      	b.n	8006874 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <HAL_SPI_Transmit+0x194>
 80067d4:	8b7b      	ldrh	r3, [r7, #26]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d147      	bne.n	800686a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	330c      	adds	r3, #12
 80067e4:	7812      	ldrb	r2, [r2, #0]
 80067e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	3b01      	subs	r3, #1
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006800:	e033      	b.n	800686a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b02      	cmp	r3, #2
 800680e:	d113      	bne.n	8006838 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	330c      	adds	r3, #12
 800681a:	7812      	ldrb	r2, [r2, #0]
 800681c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800682c:	b29b      	uxth	r3, r3
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006836:	e018      	b.n	800686a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006838:	f7fc feac 	bl	8003594 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d803      	bhi.n	8006850 <HAL_SPI_Transmit+0x20a>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684e:	d102      	bne.n	8006856 <HAL_SPI_Transmit+0x210>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d109      	bne.n	800686a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e02d      	b.n	80068c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1c6      	bne.n	8006802 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006874:	69fa      	ldr	r2, [r7, #28]
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 fceb 	bl	8007254 <SPI_EndRxTxTransaction>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2220      	movs	r2, #32
 8006888:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006892:	2300      	movs	r3, #0
 8006894:	617b      	str	r3, [r7, #20]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e000      	b.n	80068c6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80068c4:	2300      	movs	r3, #0
  }
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b088      	sub	sp, #32
 80068d2:	af02      	add	r7, sp, #8
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	603b      	str	r3, [r7, #0]
 80068da:	4613      	mov	r3, r2
 80068dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d001      	beq.n	80068ee <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80068ea:	2302      	movs	r3, #2
 80068ec:	e104      	b.n	8006af8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068f6:	d112      	bne.n	800691e <HAL_SPI_Receive+0x50>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10e      	bne.n	800691e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2204      	movs	r2, #4
 8006904:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006908:	88fa      	ldrh	r2, [r7, #6]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	4613      	mov	r3, r2
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	68b9      	ldr	r1, [r7, #8]
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 f8f3 	bl	8006b00 <HAL_SPI_TransmitReceive>
 800691a:	4603      	mov	r3, r0
 800691c:	e0ec      	b.n	8006af8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800691e:	f7fc fe39 	bl	8003594 <HAL_GetTick>
 8006922:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <HAL_SPI_Receive+0x62>
 800692a:	88fb      	ldrh	r3, [r7, #6]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e0e1      	b.n	8006af8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800693a:	2b01      	cmp	r3, #1
 800693c:	d101      	bne.n	8006942 <HAL_SPI_Receive+0x74>
 800693e:	2302      	movs	r3, #2
 8006940:	e0da      	b.n	8006af8 <HAL_SPI_Receive+0x22a>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2204      	movs	r2, #4
 800694e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	88fa      	ldrh	r2, [r7, #6]
 8006962:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	88fa      	ldrh	r2, [r7, #6]
 8006968:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006990:	d10f      	bne.n	80069b2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80069b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069bc:	2b40      	cmp	r3, #64	@ 0x40
 80069be:	d007      	beq.n	80069d0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d170      	bne.n	8006aba <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80069d8:	e035      	b.n	8006a46 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d115      	bne.n	8006a14 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f103 020c 	add.w	r2, r3, #12
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f4:	7812      	ldrb	r2, [r2, #0]
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a12:	e018      	b.n	8006a46 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a14:	f7fc fdbe 	bl	8003594 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d803      	bhi.n	8006a2c <HAL_SPI_Receive+0x15e>
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2a:	d102      	bne.n	8006a32 <HAL_SPI_Receive+0x164>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d109      	bne.n	8006a46 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e058      	b.n	8006af8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1c4      	bne.n	80069da <HAL_SPI_Receive+0x10c>
 8006a50:	e038      	b.n	8006ac4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d113      	bne.n	8006a88 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6a:	b292      	uxth	r2, r2
 8006a6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a72:	1c9a      	adds	r2, r3, #2
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a86:	e018      	b.n	8006aba <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a88:	f7fc fd84 	bl	8003594 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d803      	bhi.n	8006aa0 <HAL_SPI_Receive+0x1d2>
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9e:	d102      	bne.n	8006aa6 <HAL_SPI_Receive+0x1d8>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e01e      	b.n	8006af8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1c6      	bne.n	8006a52 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 fb5d 	bl	8007188 <SPI_EndRxTransaction>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006af6:	2300      	movs	r3, #0
  }
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	@ 0x28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b12:	f7fc fd3f 	bl	8003594 <HAL_GetTick>
 8006b16:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b1e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006b26:	887b      	ldrh	r3, [r7, #2]
 8006b28:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b2a:	7ffb      	ldrb	r3, [r7, #31]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d00c      	beq.n	8006b4a <HAL_SPI_TransmitReceive+0x4a>
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b36:	d106      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d102      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x46>
 8006b40:	7ffb      	ldrb	r3, [r7, #31]
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d001      	beq.n	8006b4a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006b46:	2302      	movs	r3, #2
 8006b48:	e17f      	b.n	8006e4a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d005      	beq.n	8006b5c <HAL_SPI_TransmitReceive+0x5c>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <HAL_SPI_TransmitReceive+0x5c>
 8006b56:	887b      	ldrh	r3, [r7, #2]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e174      	b.n	8006e4a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <HAL_SPI_TransmitReceive+0x6e>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e16d      	b.n	8006e4a <HAL_SPI_TransmitReceive+0x34a>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b04      	cmp	r3, #4
 8006b80:	d003      	beq.n	8006b8a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2205      	movs	r2, #5
 8006b86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	887a      	ldrh	r2, [r7, #2]
 8006b9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	887a      	ldrh	r2, [r7, #2]
 8006ba0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	887a      	ldrh	r2, [r7, #2]
 8006bac:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	887a      	ldrh	r2, [r7, #2]
 8006bb2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bca:	2b40      	cmp	r3, #64	@ 0x40
 8006bcc:	d007      	beq.n	8006bde <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006be6:	d17e      	bne.n	8006ce6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <HAL_SPI_TransmitReceive+0xf6>
 8006bf0:	8afb      	ldrh	r3, [r7, #22]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d16c      	bne.n	8006cd0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfa:	881a      	ldrh	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c06:	1c9a      	adds	r2, r3, #2
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c1a:	e059      	b.n	8006cd0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d11b      	bne.n	8006c62 <HAL_SPI_TransmitReceive+0x162>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d016      	beq.n	8006c62 <HAL_SPI_TransmitReceive+0x162>
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d113      	bne.n	8006c62 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c3e:	881a      	ldrh	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4a:	1c9a      	adds	r2, r3, #2
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d119      	bne.n	8006ca4 <HAL_SPI_TransmitReceive+0x1a4>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d014      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c84:	b292      	uxth	r2, r2
 8006c86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8c:	1c9a      	adds	r2, r3, #2
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ca4:	f7fc fc76 	bl	8003594 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d80d      	bhi.n	8006cd0 <HAL_SPI_TransmitReceive+0x1d0>
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cba:	d009      	beq.n	8006cd0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e0bc      	b.n	8006e4a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1a0      	bne.n	8006c1c <HAL_SPI_TransmitReceive+0x11c>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d19b      	bne.n	8006c1c <HAL_SPI_TransmitReceive+0x11c>
 8006ce4:	e082      	b.n	8006dec <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <HAL_SPI_TransmitReceive+0x1f4>
 8006cee:	8afb      	ldrh	r3, [r7, #22]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d171      	bne.n	8006dd8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	330c      	adds	r3, #12
 8006cfe:	7812      	ldrb	r2, [r2, #0]
 8006d00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3b01      	subs	r3, #1
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d1a:	e05d      	b.n	8006dd8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d11c      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x264>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d017      	beq.n	8006d64 <HAL_SPI_TransmitReceive+0x264>
 8006d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d114      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	330c      	adds	r3, #12
 8006d44:	7812      	ldrb	r2, [r2, #0]
 8006d46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d119      	bne.n	8006da6 <HAL_SPI_TransmitReceive+0x2a6>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d014      	beq.n	8006da6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68da      	ldr	r2, [r3, #12]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006da2:	2301      	movs	r3, #1
 8006da4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006da6:	f7fc fbf5 	bl	8003594 <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d803      	bhi.n	8006dbe <HAL_SPI_TransmitReceive+0x2be>
 8006db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dbc:	d102      	bne.n	8006dc4 <HAL_SPI_TransmitReceive+0x2c4>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d109      	bne.n	8006dd8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e038      	b.n	8006e4a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d19c      	bne.n	8006d1c <HAL_SPI_TransmitReceive+0x21c>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d197      	bne.n	8006d1c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dec:	6a3a      	ldr	r2, [r7, #32]
 8006dee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 fa2f 	bl	8007254 <SPI_EndRxTxTransaction>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d008      	beq.n	8006e0e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e01d      	b.n	8006e4a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10a      	bne.n	8006e2c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e16:	2300      	movs	r3, #0
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	613b      	str	r3, [r7, #16]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	613b      	str	r3, [r7, #16]
 8006e2a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e000      	b.n	8006e4a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006e48:	2300      	movs	r3, #0
  }
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3728      	adds	r7, #40	@ 0x28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10e      	bne.n	8006e94 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d009      	beq.n	8006e94 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d004      	beq.n	8006e94 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
    return;
 8006e92:	e0ce      	b.n	8007032 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d009      	beq.n	8006eb2 <HAL_SPI_IRQHandler+0x5e>
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d004      	beq.n	8006eb2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	4798      	blx	r3
    return;
 8006eb0:	e0bf      	b.n	8007032 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <HAL_SPI_IRQHandler+0x7e>
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d105      	bne.n	8006ed2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 80b0 	beq.w	8007032 <HAL_SPI_IRQHandler+0x1de>
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f003 0320 	and.w	r3, r3, #32
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 80aa 	beq.w	8007032 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d023      	beq.n	8006f30 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d011      	beq.n	8006f18 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ef8:	f043 0204 	orr.w	r2, r3, #4
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	e00b      	b.n	8006f30 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f18:	2300      	movs	r3, #0
 8006f1a:	613b      	str	r3, [r7, #16]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	613b      	str	r3, [r7, #16]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	613b      	str	r3, [r7, #16]
 8006f2c:	693b      	ldr	r3, [r7, #16]
        return;
 8006f2e:	e080      	b.n	8007032 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	f003 0320 	and.w	r3, r3, #32
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d014      	beq.n	8006f64 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f3e:	f043 0201 	orr.w	r2, r3, #1
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f46:	2300      	movs	r3, #0
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00c      	beq.n	8006f88 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f72:	f043 0208 	orr.w	r2, r3, #8
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60bb      	str	r3, [r7, #8]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	60bb      	str	r3, [r7, #8]
 8006f86:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d04f      	beq.n	8007030 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f9e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d104      	bne.n	8006fbc <HAL_SPI_IRQHandler+0x168>
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d034      	beq.n	8007026 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 0203 	bic.w	r2, r2, #3
 8006fca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d011      	beq.n	8006ff8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fd8:	4a17      	ldr	r2, [pc, #92]	@ (8007038 <HAL_SPI_IRQHandler+0x1e4>)
 8006fda:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fc ff09 	bl	8003df8 <HAL_DMA_Abort_IT>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d016      	beq.n	800702e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007004:	4a0c      	ldr	r2, [pc, #48]	@ (8007038 <HAL_SPI_IRQHandler+0x1e4>)
 8007006:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800700c:	4618      	mov	r0, r3
 800700e:	f7fc fef3 	bl	8003df8 <HAL_DMA_Abort_IT>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800701c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007024:	e003      	b.n	800702e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f808 	bl	800703c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800702c:	e000      	b.n	8007030 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800702e:	bf00      	nop
    return;
 8007030:	bf00      	nop
  }
}
 8007032:	3720      	adds	r7, #32
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	08007051 	.word	0x08007051

0800703c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f7ff ffe6 	bl	800703c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	4613      	mov	r3, r2
 8007086:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007088:	f7fc fa84 	bl	8003594 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007090:	1a9b      	subs	r3, r3, r2
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	4413      	add	r3, r2
 8007096:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007098:	f7fc fa7c 	bl	8003594 <HAL_GetTick>
 800709c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800709e:	4b39      	ldr	r3, [pc, #228]	@ (8007184 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	015b      	lsls	r3, r3, #5
 80070a4:	0d1b      	lsrs	r3, r3, #20
 80070a6:	69fa      	ldr	r2, [r7, #28]
 80070a8:	fb02 f303 	mul.w	r3, r2, r3
 80070ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070ae:	e054      	b.n	800715a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b6:	d050      	beq.n	800715a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070b8:	f7fc fa6c 	bl	8003594 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	69fa      	ldr	r2, [r7, #28]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d902      	bls.n	80070ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d13d      	bne.n	800714a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80070dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070e6:	d111      	bne.n	800710c <SPI_WaitFlagStateUntilTimeout+0x94>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070f0:	d004      	beq.n	80070fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070fa:	d107      	bne.n	800710c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800710a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007114:	d10f      	bne.n	8007136 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007134:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e017      	b.n	800717a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	3b01      	subs	r3, #1
 8007158:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	4013      	ands	r3, r2
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	429a      	cmp	r2, r3
 8007168:	bf0c      	ite	eq
 800716a:	2301      	moveq	r3, #1
 800716c:	2300      	movne	r3, #0
 800716e:	b2db      	uxtb	r3, r3
 8007170:	461a      	mov	r2, r3
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	429a      	cmp	r2, r3
 8007176:	d19b      	bne.n	80070b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3720      	adds	r7, #32
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000000 	.word	0x20000000

08007188 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af02      	add	r7, sp, #8
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800719c:	d111      	bne.n	80071c2 <SPI_EndRxTransaction+0x3a>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071a6:	d004      	beq.n	80071b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071b0:	d107      	bne.n	80071c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071ca:	d12a      	bne.n	8007222 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071d4:	d012      	beq.n	80071fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2200      	movs	r2, #0
 80071de:	2180      	movs	r1, #128	@ 0x80
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f7ff ff49 	bl	8007078 <SPI_WaitFlagStateUntilTimeout>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d02d      	beq.n	8007248 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071f0:	f043 0220 	orr.w	r2, r3, #32
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e026      	b.n	800724a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2200      	movs	r2, #0
 8007204:	2101      	movs	r1, #1
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f7ff ff36 	bl	8007078 <SPI_WaitFlagStateUntilTimeout>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d01a      	beq.n	8007248 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007216:	f043 0220 	orr.w	r2, r3, #32
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e013      	b.n	800724a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2200      	movs	r2, #0
 800722a:	2101      	movs	r1, #1
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f7ff ff23 	bl	8007078 <SPI_WaitFlagStateUntilTimeout>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800723c:	f043 0220 	orr.w	r2, r3, #32
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e000      	b.n	800724a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b088      	sub	sp, #32
 8007258:	af02      	add	r7, sp, #8
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2201      	movs	r2, #1
 8007268:	2102      	movs	r1, #2
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f7ff ff04 	bl	8007078 <SPI_WaitFlagStateUntilTimeout>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d007      	beq.n	8007286 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800727a:	f043 0220 	orr.w	r2, r3, #32
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e032      	b.n	80072ec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007286:	4b1b      	ldr	r3, [pc, #108]	@ (80072f4 <SPI_EndRxTxTransaction+0xa0>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1b      	ldr	r2, [pc, #108]	@ (80072f8 <SPI_EndRxTxTransaction+0xa4>)
 800728c:	fba2 2303 	umull	r2, r3, r2, r3
 8007290:	0d5b      	lsrs	r3, r3, #21
 8007292:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007296:	fb02 f303 	mul.w	r3, r2, r3
 800729a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072a4:	d112      	bne.n	80072cc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2200      	movs	r2, #0
 80072ae:	2180      	movs	r1, #128	@ 0x80
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f7ff fee1 	bl	8007078 <SPI_WaitFlagStateUntilTimeout>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d016      	beq.n	80072ea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072c0:	f043 0220 	orr.w	r2, r3, #32
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e00f      	b.n	80072ec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072e2:	2b80      	cmp	r3, #128	@ 0x80
 80072e4:	d0f2      	beq.n	80072cc <SPI_EndRxTxTransaction+0x78>
 80072e6:	e000      	b.n	80072ea <SPI_EndRxTxTransaction+0x96>
        break;
 80072e8:	bf00      	nop
  }

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3718      	adds	r7, #24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	20000000 	.word	0x20000000
 80072f8:	165e9f81 	.word	0x165e9f81

080072fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e041      	b.n	8007392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d106      	bne.n	8007328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f839 	bl	800739a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3304      	adds	r3, #4
 8007338:	4619      	mov	r1, r3
 800733a:	4610      	mov	r0, r2
 800733c:	f000 f9b2 	bl	80076a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800739a:	b480      	push	{r7}
 800739c:	b083      	sub	sp, #12
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
	...

080073b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d001      	beq.n	80073c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e044      	b.n	8007452 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f042 0201 	orr.w	r2, r2, #1
 80073de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1e      	ldr	r2, [pc, #120]	@ (8007460 <HAL_TIM_Base_Start_IT+0xb0>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d018      	beq.n	800741c <HAL_TIM_Base_Start_IT+0x6c>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f2:	d013      	beq.n	800741c <HAL_TIM_Base_Start_IT+0x6c>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1a      	ldr	r2, [pc, #104]	@ (8007464 <HAL_TIM_Base_Start_IT+0xb4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d00e      	beq.n	800741c <HAL_TIM_Base_Start_IT+0x6c>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a19      	ldr	r2, [pc, #100]	@ (8007468 <HAL_TIM_Base_Start_IT+0xb8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d009      	beq.n	800741c <HAL_TIM_Base_Start_IT+0x6c>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a17      	ldr	r2, [pc, #92]	@ (800746c <HAL_TIM_Base_Start_IT+0xbc>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d004      	beq.n	800741c <HAL_TIM_Base_Start_IT+0x6c>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a16      	ldr	r2, [pc, #88]	@ (8007470 <HAL_TIM_Base_Start_IT+0xc0>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d111      	bne.n	8007440 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b06      	cmp	r3, #6
 800742c:	d010      	beq.n	8007450 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 0201 	orr.w	r2, r2, #1
 800743c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800743e:	e007      	b.n	8007450 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f042 0201 	orr.w	r2, r2, #1
 800744e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	40010000 	.word	0x40010000
 8007464:	40000400 	.word	0x40000400
 8007468:	40000800 	.word	0x40000800
 800746c:	40000c00 	.word	0x40000c00
 8007470:	40014000 	.word	0x40014000

08007474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d020      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01b      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f06f 0202 	mvn.w	r2, #2
 80074a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f8d2 	bl	8007668 <HAL_TIM_IC_CaptureCallback>
 80074c4:	e005      	b.n	80074d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f8c4 	bl	8007654 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f8d5 	bl	800767c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d020      	beq.n	8007524 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d01b      	beq.n	8007524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0204 	mvn.w	r2, #4
 80074f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2202      	movs	r2, #2
 80074fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f8ac 	bl	8007668 <HAL_TIM_IC_CaptureCallback>
 8007510:	e005      	b.n	800751e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f89e 	bl	8007654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f8af 	bl	800767c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f003 0308 	and.w	r3, r3, #8
 800752a:	2b00      	cmp	r3, #0
 800752c:	d020      	beq.n	8007570 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f003 0308 	and.w	r3, r3, #8
 8007534:	2b00      	cmp	r3, #0
 8007536:	d01b      	beq.n	8007570 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0208 	mvn.w	r2, #8
 8007540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2204      	movs	r2, #4
 8007546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	f003 0303 	and.w	r3, r3, #3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f886 	bl	8007668 <HAL_TIM_IC_CaptureCallback>
 800755c:	e005      	b.n	800756a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f878 	bl	8007654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f889 	bl	800767c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f003 0310 	and.w	r3, r3, #16
 8007576:	2b00      	cmp	r3, #0
 8007578:	d020      	beq.n	80075bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01b      	beq.n	80075bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f06f 0210 	mvn.w	r2, #16
 800758c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2208      	movs	r2, #8
 8007592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f860 	bl	8007668 <HAL_TIM_IC_CaptureCallback>
 80075a8:	e005      	b.n	80075b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f852 	bl	8007654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f863 	bl	800767c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00c      	beq.n	80075e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d007      	beq.n	80075e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f06f 0201 	mvn.w	r2, #1
 80075d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7fb fc0a 	bl	8002df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00c      	beq.n	8007604 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d007      	beq.n	8007604 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80075fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f8e6 	bl	80077d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00c      	beq.n	8007628 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007614:	2b00      	cmp	r3, #0
 8007616:	d007      	beq.n	8007628 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f834 	bl	8007690 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f003 0320 	and.w	r3, r3, #32
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00c      	beq.n	800764c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d007      	beq.n	800764c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f06f 0220 	mvn.w	r2, #32
 8007644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f8b8 	bl	80077bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800764c:	bf00      	nop
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a3a      	ldr	r2, [pc, #232]	@ (80077a0 <TIM_Base_SetConfig+0xfc>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00f      	beq.n	80076dc <TIM_Base_SetConfig+0x38>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076c2:	d00b      	beq.n	80076dc <TIM_Base_SetConfig+0x38>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a37      	ldr	r2, [pc, #220]	@ (80077a4 <TIM_Base_SetConfig+0x100>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d007      	beq.n	80076dc <TIM_Base_SetConfig+0x38>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a36      	ldr	r2, [pc, #216]	@ (80077a8 <TIM_Base_SetConfig+0x104>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d003      	beq.n	80076dc <TIM_Base_SetConfig+0x38>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a35      	ldr	r2, [pc, #212]	@ (80077ac <TIM_Base_SetConfig+0x108>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d108      	bne.n	80076ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a2b      	ldr	r2, [pc, #172]	@ (80077a0 <TIM_Base_SetConfig+0xfc>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d01b      	beq.n	800772e <TIM_Base_SetConfig+0x8a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076fc:	d017      	beq.n	800772e <TIM_Base_SetConfig+0x8a>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a28      	ldr	r2, [pc, #160]	@ (80077a4 <TIM_Base_SetConfig+0x100>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d013      	beq.n	800772e <TIM_Base_SetConfig+0x8a>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a27      	ldr	r2, [pc, #156]	@ (80077a8 <TIM_Base_SetConfig+0x104>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00f      	beq.n	800772e <TIM_Base_SetConfig+0x8a>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a26      	ldr	r2, [pc, #152]	@ (80077ac <TIM_Base_SetConfig+0x108>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d00b      	beq.n	800772e <TIM_Base_SetConfig+0x8a>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a25      	ldr	r2, [pc, #148]	@ (80077b0 <TIM_Base_SetConfig+0x10c>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d007      	beq.n	800772e <TIM_Base_SetConfig+0x8a>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a24      	ldr	r2, [pc, #144]	@ (80077b4 <TIM_Base_SetConfig+0x110>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d003      	beq.n	800772e <TIM_Base_SetConfig+0x8a>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a23      	ldr	r2, [pc, #140]	@ (80077b8 <TIM_Base_SetConfig+0x114>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d108      	bne.n	8007740 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4313      	orrs	r3, r2
 800773e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	4313      	orrs	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	689a      	ldr	r2, [r3, #8]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a0e      	ldr	r2, [pc, #56]	@ (80077a0 <TIM_Base_SetConfig+0xfc>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d103      	bne.n	8007774 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	691a      	ldr	r2, [r3, #16]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b01      	cmp	r3, #1
 8007784:	d105      	bne.n	8007792 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f023 0201 	bic.w	r2, r3, #1
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	611a      	str	r2, [r3, #16]
  }
}
 8007792:	bf00      	nop
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40010000 	.word	0x40010000
 80077a4:	40000400 	.word	0x40000400
 80077a8:	40000800 	.word	0x40000800
 80077ac:	40000c00 	.word	0x40000c00
 80077b0:	40014000 	.word	0x40014000
 80077b4:	40014400 	.word	0x40014400
 80077b8:	40014800 	.word	0x40014800

080077bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e042      	b.n	800787c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7fb fde6 	bl	80033dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2224      	movs	r2, #36	@ 0x24
 8007814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007826:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f82b 	bl	8007884 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	691a      	ldr	r2, [r3, #16]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800783c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	695a      	ldr	r2, [r3, #20]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800784c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800785c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2220      	movs	r2, #32
 8007868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2220      	movs	r2, #32
 8007870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007888:	b0c0      	sub	sp, #256	@ 0x100
 800788a:	af00      	add	r7, sp, #0
 800788c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800789c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a0:	68d9      	ldr	r1, [r3, #12]
 80078a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a6:	681a      	ldr	r2, [r3, #0]
 80078a8:	ea40 0301 	orr.w	r3, r0, r1
 80078ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b8:	691b      	ldr	r3, [r3, #16]
 80078ba:	431a      	orrs	r2, r3
 80078bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	431a      	orrs	r2, r3
 80078c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80078dc:	f021 010c 	bic.w	r1, r1, #12
 80078e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078ea:	430b      	orrs	r3, r1
 80078ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80078fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078fe:	6999      	ldr	r1, [r3, #24]
 8007900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	ea40 0301 	orr.w	r3, r0, r1
 800790a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800790c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	4b8f      	ldr	r3, [pc, #572]	@ (8007b50 <UART_SetConfig+0x2cc>)
 8007914:	429a      	cmp	r2, r3
 8007916:	d005      	beq.n	8007924 <UART_SetConfig+0xa0>
 8007918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4b8d      	ldr	r3, [pc, #564]	@ (8007b54 <UART_SetConfig+0x2d0>)
 8007920:	429a      	cmp	r2, r3
 8007922:	d104      	bne.n	800792e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007924:	f7fe fdc0 	bl	80064a8 <HAL_RCC_GetPCLK2Freq>
 8007928:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800792c:	e003      	b.n	8007936 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800792e:	f7fe fda7 	bl	8006480 <HAL_RCC_GetPCLK1Freq>
 8007932:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007940:	f040 810c 	bne.w	8007b5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007944:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007948:	2200      	movs	r2, #0
 800794a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800794e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007952:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007956:	4622      	mov	r2, r4
 8007958:	462b      	mov	r3, r5
 800795a:	1891      	adds	r1, r2, r2
 800795c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800795e:	415b      	adcs	r3, r3
 8007960:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007962:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007966:	4621      	mov	r1, r4
 8007968:	eb12 0801 	adds.w	r8, r2, r1
 800796c:	4629      	mov	r1, r5
 800796e:	eb43 0901 	adc.w	r9, r3, r1
 8007972:	f04f 0200 	mov.w	r2, #0
 8007976:	f04f 0300 	mov.w	r3, #0
 800797a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800797e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007986:	4690      	mov	r8, r2
 8007988:	4699      	mov	r9, r3
 800798a:	4623      	mov	r3, r4
 800798c:	eb18 0303 	adds.w	r3, r8, r3
 8007990:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007994:	462b      	mov	r3, r5
 8007996:	eb49 0303 	adc.w	r3, r9, r3
 800799a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800799e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80079ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079b2:	460b      	mov	r3, r1
 80079b4:	18db      	adds	r3, r3, r3
 80079b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80079b8:	4613      	mov	r3, r2
 80079ba:	eb42 0303 	adc.w	r3, r2, r3
 80079be:	657b      	str	r3, [r7, #84]	@ 0x54
 80079c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80079c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80079c8:	f7f9 f936 	bl	8000c38 <__aeabi_uldivmod>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4b61      	ldr	r3, [pc, #388]	@ (8007b58 <UART_SetConfig+0x2d4>)
 80079d2:	fba3 2302 	umull	r2, r3, r3, r2
 80079d6:	095b      	lsrs	r3, r3, #5
 80079d8:	011c      	lsls	r4, r3, #4
 80079da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079de:	2200      	movs	r2, #0
 80079e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80079e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80079ec:	4642      	mov	r2, r8
 80079ee:	464b      	mov	r3, r9
 80079f0:	1891      	adds	r1, r2, r2
 80079f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80079f4:	415b      	adcs	r3, r3
 80079f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80079fc:	4641      	mov	r1, r8
 80079fe:	eb12 0a01 	adds.w	sl, r2, r1
 8007a02:	4649      	mov	r1, r9
 8007a04:	eb43 0b01 	adc.w	fp, r3, r1
 8007a08:	f04f 0200 	mov.w	r2, #0
 8007a0c:	f04f 0300 	mov.w	r3, #0
 8007a10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a1c:	4692      	mov	sl, r2
 8007a1e:	469b      	mov	fp, r3
 8007a20:	4643      	mov	r3, r8
 8007a22:	eb1a 0303 	adds.w	r3, sl, r3
 8007a26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a2a:	464b      	mov	r3, r9
 8007a2c:	eb4b 0303 	adc.w	r3, fp, r3
 8007a30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a40:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007a44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	18db      	adds	r3, r3, r3
 8007a4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a4e:	4613      	mov	r3, r2
 8007a50:	eb42 0303 	adc.w	r3, r2, r3
 8007a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a5e:	f7f9 f8eb 	bl	8000c38 <__aeabi_uldivmod>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	4b3b      	ldr	r3, [pc, #236]	@ (8007b58 <UART_SetConfig+0x2d4>)
 8007a6a:	fba3 2301 	umull	r2, r3, r3, r1
 8007a6e:	095b      	lsrs	r3, r3, #5
 8007a70:	2264      	movs	r2, #100	@ 0x64
 8007a72:	fb02 f303 	mul.w	r3, r2, r3
 8007a76:	1acb      	subs	r3, r1, r3
 8007a78:	00db      	lsls	r3, r3, #3
 8007a7a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a7e:	4b36      	ldr	r3, [pc, #216]	@ (8007b58 <UART_SetConfig+0x2d4>)
 8007a80:	fba3 2302 	umull	r2, r3, r3, r2
 8007a84:	095b      	lsrs	r3, r3, #5
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a8c:	441c      	add	r4, r3
 8007a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a98:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007aa0:	4642      	mov	r2, r8
 8007aa2:	464b      	mov	r3, r9
 8007aa4:	1891      	adds	r1, r2, r2
 8007aa6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007aa8:	415b      	adcs	r3, r3
 8007aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007aac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ab0:	4641      	mov	r1, r8
 8007ab2:	1851      	adds	r1, r2, r1
 8007ab4:	6339      	str	r1, [r7, #48]	@ 0x30
 8007ab6:	4649      	mov	r1, r9
 8007ab8:	414b      	adcs	r3, r1
 8007aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8007abc:	f04f 0200 	mov.w	r2, #0
 8007ac0:	f04f 0300 	mov.w	r3, #0
 8007ac4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007ac8:	4659      	mov	r1, fp
 8007aca:	00cb      	lsls	r3, r1, #3
 8007acc:	4651      	mov	r1, sl
 8007ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ad2:	4651      	mov	r1, sl
 8007ad4:	00ca      	lsls	r2, r1, #3
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4603      	mov	r3, r0
 8007adc:	4642      	mov	r2, r8
 8007ade:	189b      	adds	r3, r3, r2
 8007ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ae4:	464b      	mov	r3, r9
 8007ae6:	460a      	mov	r2, r1
 8007ae8:	eb42 0303 	adc.w	r3, r2, r3
 8007aec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007afc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007b00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b04:	460b      	mov	r3, r1
 8007b06:	18db      	adds	r3, r3, r3
 8007b08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	eb42 0303 	adc.w	r3, r2, r3
 8007b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007b16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007b1a:	f7f9 f88d 	bl	8000c38 <__aeabi_uldivmod>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4b0d      	ldr	r3, [pc, #52]	@ (8007b58 <UART_SetConfig+0x2d4>)
 8007b24:	fba3 1302 	umull	r1, r3, r3, r2
 8007b28:	095b      	lsrs	r3, r3, #5
 8007b2a:	2164      	movs	r1, #100	@ 0x64
 8007b2c:	fb01 f303 	mul.w	r3, r1, r3
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	3332      	adds	r3, #50	@ 0x32
 8007b36:	4a08      	ldr	r2, [pc, #32]	@ (8007b58 <UART_SetConfig+0x2d4>)
 8007b38:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3c:	095b      	lsrs	r3, r3, #5
 8007b3e:	f003 0207 	and.w	r2, r3, #7
 8007b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4422      	add	r2, r4
 8007b4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b4c:	e106      	b.n	8007d5c <UART_SetConfig+0x4d8>
 8007b4e:	bf00      	nop
 8007b50:	40011000 	.word	0x40011000
 8007b54:	40011400 	.word	0x40011400
 8007b58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b60:	2200      	movs	r2, #0
 8007b62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b6e:	4642      	mov	r2, r8
 8007b70:	464b      	mov	r3, r9
 8007b72:	1891      	adds	r1, r2, r2
 8007b74:	6239      	str	r1, [r7, #32]
 8007b76:	415b      	adcs	r3, r3
 8007b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b7e:	4641      	mov	r1, r8
 8007b80:	1854      	adds	r4, r2, r1
 8007b82:	4649      	mov	r1, r9
 8007b84:	eb43 0501 	adc.w	r5, r3, r1
 8007b88:	f04f 0200 	mov.w	r2, #0
 8007b8c:	f04f 0300 	mov.w	r3, #0
 8007b90:	00eb      	lsls	r3, r5, #3
 8007b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b96:	00e2      	lsls	r2, r4, #3
 8007b98:	4614      	mov	r4, r2
 8007b9a:	461d      	mov	r5, r3
 8007b9c:	4643      	mov	r3, r8
 8007b9e:	18e3      	adds	r3, r4, r3
 8007ba0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ba4:	464b      	mov	r3, r9
 8007ba6:	eb45 0303 	adc.w	r3, r5, r3
 8007baa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007bba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007bbe:	f04f 0200 	mov.w	r2, #0
 8007bc2:	f04f 0300 	mov.w	r3, #0
 8007bc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007bca:	4629      	mov	r1, r5
 8007bcc:	008b      	lsls	r3, r1, #2
 8007bce:	4621      	mov	r1, r4
 8007bd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	008a      	lsls	r2, r1, #2
 8007bd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007bdc:	f7f9 f82c 	bl	8000c38 <__aeabi_uldivmod>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	4b60      	ldr	r3, [pc, #384]	@ (8007d68 <UART_SetConfig+0x4e4>)
 8007be6:	fba3 2302 	umull	r2, r3, r3, r2
 8007bea:	095b      	lsrs	r3, r3, #5
 8007bec:	011c      	lsls	r4, r3, #4
 8007bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bf8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007bfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007c00:	4642      	mov	r2, r8
 8007c02:	464b      	mov	r3, r9
 8007c04:	1891      	adds	r1, r2, r2
 8007c06:	61b9      	str	r1, [r7, #24]
 8007c08:	415b      	adcs	r3, r3
 8007c0a:	61fb      	str	r3, [r7, #28]
 8007c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c10:	4641      	mov	r1, r8
 8007c12:	1851      	adds	r1, r2, r1
 8007c14:	6139      	str	r1, [r7, #16]
 8007c16:	4649      	mov	r1, r9
 8007c18:	414b      	adcs	r3, r1
 8007c1a:	617b      	str	r3, [r7, #20]
 8007c1c:	f04f 0200 	mov.w	r2, #0
 8007c20:	f04f 0300 	mov.w	r3, #0
 8007c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c28:	4659      	mov	r1, fp
 8007c2a:	00cb      	lsls	r3, r1, #3
 8007c2c:	4651      	mov	r1, sl
 8007c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c32:	4651      	mov	r1, sl
 8007c34:	00ca      	lsls	r2, r1, #3
 8007c36:	4610      	mov	r0, r2
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	4642      	mov	r2, r8
 8007c3e:	189b      	adds	r3, r3, r2
 8007c40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c44:	464b      	mov	r3, r9
 8007c46:	460a      	mov	r2, r1
 8007c48:	eb42 0303 	adc.w	r3, r2, r3
 8007c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c5c:	f04f 0200 	mov.w	r2, #0
 8007c60:	f04f 0300 	mov.w	r3, #0
 8007c64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c68:	4649      	mov	r1, r9
 8007c6a:	008b      	lsls	r3, r1, #2
 8007c6c:	4641      	mov	r1, r8
 8007c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c72:	4641      	mov	r1, r8
 8007c74:	008a      	lsls	r2, r1, #2
 8007c76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c7a:	f7f8 ffdd 	bl	8000c38 <__aeabi_uldivmod>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	4611      	mov	r1, r2
 8007c84:	4b38      	ldr	r3, [pc, #224]	@ (8007d68 <UART_SetConfig+0x4e4>)
 8007c86:	fba3 2301 	umull	r2, r3, r3, r1
 8007c8a:	095b      	lsrs	r3, r3, #5
 8007c8c:	2264      	movs	r2, #100	@ 0x64
 8007c8e:	fb02 f303 	mul.w	r3, r2, r3
 8007c92:	1acb      	subs	r3, r1, r3
 8007c94:	011b      	lsls	r3, r3, #4
 8007c96:	3332      	adds	r3, #50	@ 0x32
 8007c98:	4a33      	ldr	r2, [pc, #204]	@ (8007d68 <UART_SetConfig+0x4e4>)
 8007c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9e:	095b      	lsrs	r3, r3, #5
 8007ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ca4:	441c      	add	r4, r3
 8007ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007caa:	2200      	movs	r2, #0
 8007cac:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cae:	677a      	str	r2, [r7, #116]	@ 0x74
 8007cb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	464b      	mov	r3, r9
 8007cb8:	1891      	adds	r1, r2, r2
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	415b      	adcs	r3, r3
 8007cbe:	60fb      	str	r3, [r7, #12]
 8007cc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cc4:	4641      	mov	r1, r8
 8007cc6:	1851      	adds	r1, r2, r1
 8007cc8:	6039      	str	r1, [r7, #0]
 8007cca:	4649      	mov	r1, r9
 8007ccc:	414b      	adcs	r3, r1
 8007cce:	607b      	str	r3, [r7, #4]
 8007cd0:	f04f 0200 	mov.w	r2, #0
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007cdc:	4659      	mov	r1, fp
 8007cde:	00cb      	lsls	r3, r1, #3
 8007ce0:	4651      	mov	r1, sl
 8007ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ce6:	4651      	mov	r1, sl
 8007ce8:	00ca      	lsls	r2, r1, #3
 8007cea:	4610      	mov	r0, r2
 8007cec:	4619      	mov	r1, r3
 8007cee:	4603      	mov	r3, r0
 8007cf0:	4642      	mov	r2, r8
 8007cf2:	189b      	adds	r3, r3, r2
 8007cf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cf6:	464b      	mov	r3, r9
 8007cf8:	460a      	mov	r2, r1
 8007cfa:	eb42 0303 	adc.w	r3, r2, r3
 8007cfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	f04f 0300 	mov.w	r3, #0
 8007d14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007d18:	4649      	mov	r1, r9
 8007d1a:	008b      	lsls	r3, r1, #2
 8007d1c:	4641      	mov	r1, r8
 8007d1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d22:	4641      	mov	r1, r8
 8007d24:	008a      	lsls	r2, r1, #2
 8007d26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007d2a:	f7f8 ff85 	bl	8000c38 <__aeabi_uldivmod>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	4b0d      	ldr	r3, [pc, #52]	@ (8007d68 <UART_SetConfig+0x4e4>)
 8007d34:	fba3 1302 	umull	r1, r3, r3, r2
 8007d38:	095b      	lsrs	r3, r3, #5
 8007d3a:	2164      	movs	r1, #100	@ 0x64
 8007d3c:	fb01 f303 	mul.w	r3, r1, r3
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	3332      	adds	r3, #50	@ 0x32
 8007d46:	4a08      	ldr	r2, [pc, #32]	@ (8007d68 <UART_SetConfig+0x4e4>)
 8007d48:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4c:	095b      	lsrs	r3, r3, #5
 8007d4e:	f003 020f 	and.w	r2, r3, #15
 8007d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4422      	add	r2, r4
 8007d5a:	609a      	str	r2, [r3, #8]
}
 8007d5c:	bf00      	nop
 8007d5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d62:	46bd      	mov	sp, r7
 8007d64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d68:	51eb851f 	.word	0x51eb851f

08007d6c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	4603      	mov	r3, r0
 8007d74:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007d76:	2300      	movs	r3, #0
 8007d78:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d7e:	2b84      	cmp	r3, #132	@ 0x84
 8007d80:	d005      	beq.n	8007d8e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007d82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4413      	add	r3, r2
 8007d8a:	3303      	adds	r3, #3
 8007d8c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007da0:	f000 fae4 	bl	800836c <vTaskStartScheduler>
  
  return osOK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	bd80      	pop	{r7, pc}

08007daa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dac:	b089      	sub	sp, #36	@ 0x24
 8007dae:	af04      	add	r7, sp, #16
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	695b      	ldr	r3, [r3, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d020      	beq.n	8007dfe <osThreadCreate+0x54>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d01c      	beq.n	8007dfe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685c      	ldr	r4, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	691e      	ldr	r6, [r3, #16]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff ffc8 	bl	8007d6c <makeFreeRtosPriority>
 8007ddc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007de6:	9202      	str	r2, [sp, #8]
 8007de8:	9301      	str	r3, [sp, #4]
 8007dea:	9100      	str	r1, [sp, #0]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	4632      	mov	r2, r6
 8007df0:	4629      	mov	r1, r5
 8007df2:	4620      	mov	r0, r4
 8007df4:	f000 f8ed 	bl	8007fd2 <xTaskCreateStatic>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	e01c      	b.n	8007e38 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685c      	ldr	r4, [r3, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e0a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7ff ffaa 	bl	8007d6c <makeFreeRtosPriority>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	f107 030c 	add.w	r3, r7, #12
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	9200      	str	r2, [sp, #0]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	4632      	mov	r2, r6
 8007e26:	4629      	mov	r1, r5
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 f932 	bl	8008092 <xTaskCreate>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d001      	beq.n	8007e38 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e000      	b.n	8007e3a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007e38:	68fb      	ldr	r3, [r7, #12]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e42 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <osDelay+0x16>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	e000      	b.n	8007e5a <osDelay+0x18>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 fa50 	bl	8008300 <vTaskDelay>
  
  return osOK;
 8007e60:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f103 0208 	add.w	r2, r3, #8
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e82:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f103 0208 	add.w	r2, r3, #8
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f103 0208 	add.w	r2, r3, #8
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e9e:	bf00      	nop
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	689a      	ldr	r2, [r3, #8]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	601a      	str	r2, [r3, #0]
}
 8007f00:	bf00      	nop
 8007f02:	3714      	adds	r7, #20
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f22:	d103      	bne.n	8007f2c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	60fb      	str	r3, [r7, #12]
 8007f2a:	e00c      	b.n	8007f46 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3308      	adds	r3, #8
 8007f30:	60fb      	str	r3, [r7, #12]
 8007f32:	e002      	b.n	8007f3a <vListInsert+0x2e>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	60fb      	str	r3, [r7, #12]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d2f6      	bcs.n	8007f34 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	685a      	ldr	r2, [r3, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	601a      	str	r2, [r3, #0]
}
 8007f72:	bf00      	nop
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b085      	sub	sp, #20
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6892      	ldr	r2, [r2, #8]
 8007f94:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	6852      	ldr	r2, [r2, #4]
 8007f9e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d103      	bne.n	8007fb2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689a      	ldr	r2, [r3, #8]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	1e5a      	subs	r2, r3, #1
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b08e      	sub	sp, #56	@ 0x38
 8007fd6:	af04      	add	r7, sp, #16
 8007fd8:	60f8      	str	r0, [r7, #12]
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	607a      	str	r2, [r7, #4]
 8007fde:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10b      	bne.n	8007ffe <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fea:	f383 8811 	msr	BASEPRI, r3
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	f3bf 8f4f 	dsb	sy
 8007ff6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
 8007ffc:	e7fd      	b.n	8007ffa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10b      	bne.n	800801c <xTaskCreateStatic+0x4a>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	61fb      	str	r3, [r7, #28]
}
 8008016:	bf00      	nop
 8008018:	bf00      	nop
 800801a:	e7fd      	b.n	8008018 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800801c:	2354      	movs	r3, #84	@ 0x54
 800801e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	2b54      	cmp	r3, #84	@ 0x54
 8008024:	d00b      	beq.n	800803e <xTaskCreateStatic+0x6c>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	61bb      	str	r3, [r7, #24]
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	e7fd      	b.n	800803a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800803e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008042:	2b00      	cmp	r3, #0
 8008044:	d01e      	beq.n	8008084 <xTaskCreateStatic+0xb2>
 8008046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008048:	2b00      	cmp	r3, #0
 800804a:	d01b      	beq.n	8008084 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800804c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008052:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008054:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008058:	2202      	movs	r2, #2
 800805a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800805e:	2300      	movs	r3, #0
 8008060:	9303      	str	r3, [sp, #12]
 8008062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008064:	9302      	str	r3, [sp, #8]
 8008066:	f107 0314 	add.w	r3, r7, #20
 800806a:	9301      	str	r3, [sp, #4]
 800806c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	68b9      	ldr	r1, [r7, #8]
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f000 f850 	bl	800811c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800807c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800807e:	f000 f8d5 	bl	800822c <prvAddNewTaskToReadyList>
 8008082:	e001      	b.n	8008088 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008088:	697b      	ldr	r3, [r7, #20]
	}
 800808a:	4618      	mov	r0, r3
 800808c:	3728      	adds	r7, #40	@ 0x28
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008092:	b580      	push	{r7, lr}
 8008094:	b08c      	sub	sp, #48	@ 0x30
 8008096:	af04      	add	r7, sp, #16
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	603b      	str	r3, [r7, #0]
 800809e:	4613      	mov	r3, r2
 80080a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080a2:	88fb      	ldrh	r3, [r7, #6]
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 fece 	bl	8008e48 <pvPortMalloc>
 80080ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00e      	beq.n	80080d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80080b4:	2054      	movs	r0, #84	@ 0x54
 80080b6:	f000 fec7 	bl	8008e48 <pvPortMalloc>
 80080ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80080c8:	e005      	b.n	80080d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80080ca:	6978      	ldr	r0, [r7, #20]
 80080cc:	f000 ff8a 	bl	8008fe4 <vPortFree>
 80080d0:	e001      	b.n	80080d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d017      	beq.n	800810c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080e4:	88fa      	ldrh	r2, [r7, #6]
 80080e6:	2300      	movs	r3, #0
 80080e8:	9303      	str	r3, [sp, #12]
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	9302      	str	r3, [sp, #8]
 80080ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	68b9      	ldr	r1, [r7, #8]
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f000 f80e 	bl	800811c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008100:	69f8      	ldr	r0, [r7, #28]
 8008102:	f000 f893 	bl	800822c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008106:	2301      	movs	r3, #1
 8008108:	61bb      	str	r3, [r7, #24]
 800810a:	e002      	b.n	8008112 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800810c:	f04f 33ff 	mov.w	r3, #4294967295
 8008110:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008112:	69bb      	ldr	r3, [r7, #24]
	}
 8008114:	4618      	mov	r0, r3
 8008116:	3720      	adds	r7, #32
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b088      	sub	sp, #32
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008134:	3b01      	subs	r3, #1
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	f023 0307 	bic.w	r3, r3, #7
 8008142:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	f003 0307 	and.w	r3, r3, #7
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00b      	beq.n	8008166 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	617b      	str	r3, [r7, #20]
}
 8008160:	bf00      	nop
 8008162:	bf00      	nop
 8008164:	e7fd      	b.n	8008162 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d01f      	beq.n	80081ac <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800816c:	2300      	movs	r3, #0
 800816e:	61fb      	str	r3, [r7, #28]
 8008170:	e012      	b.n	8008198 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	4413      	add	r3, r2
 8008178:	7819      	ldrb	r1, [r3, #0]
 800817a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	4413      	add	r3, r2
 8008180:	3334      	adds	r3, #52	@ 0x34
 8008182:	460a      	mov	r2, r1
 8008184:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	4413      	add	r3, r2
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d006      	beq.n	80081a0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	3301      	adds	r3, #1
 8008196:	61fb      	str	r3, [r7, #28]
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	2b0f      	cmp	r3, #15
 800819c:	d9e9      	bls.n	8008172 <prvInitialiseNewTask+0x56>
 800819e:	e000      	b.n	80081a2 <prvInitialiseNewTask+0x86>
			{
				break;
 80081a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80081a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081aa:	e003      	b.n	80081b4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b6:	2b06      	cmp	r3, #6
 80081b8:	d901      	bls.n	80081be <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081ba:	2306      	movs	r3, #6
 80081bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081c8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80081ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081cc:	2200      	movs	r2, #0
 80081ce:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d2:	3304      	adds	r3, #4
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff fe68 	bl	8007eaa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081dc:	3318      	adds	r3, #24
 80081de:	4618      	mov	r0, r3
 80081e0:	f7ff fe63 	bl	8007eaa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ec:	f1c3 0207 	rsb	r2, r3, #7
 80081f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081fc:	2200      	movs	r2, #0
 80081fe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	68f9      	ldr	r1, [r7, #12]
 800820c:	69b8      	ldr	r0, [r7, #24]
 800820e:	f000 fc0d 	bl	8008a2c <pxPortInitialiseStack>
 8008212:	4602      	mov	r2, r0
 8008214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008216:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800821a:	2b00      	cmp	r3, #0
 800821c:	d002      	beq.n	8008224 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800821e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008222:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008224:	bf00      	nop
 8008226:	3720      	adds	r7, #32
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008234:	f000 fd28 	bl	8008c88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008238:	4b2a      	ldr	r3, [pc, #168]	@ (80082e4 <prvAddNewTaskToReadyList+0xb8>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3301      	adds	r3, #1
 800823e:	4a29      	ldr	r2, [pc, #164]	@ (80082e4 <prvAddNewTaskToReadyList+0xb8>)
 8008240:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008242:	4b29      	ldr	r3, [pc, #164]	@ (80082e8 <prvAddNewTaskToReadyList+0xbc>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d109      	bne.n	800825e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800824a:	4a27      	ldr	r2, [pc, #156]	@ (80082e8 <prvAddNewTaskToReadyList+0xbc>)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008250:	4b24      	ldr	r3, [pc, #144]	@ (80082e4 <prvAddNewTaskToReadyList+0xb8>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d110      	bne.n	800827a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008258:	f000 fac4 	bl	80087e4 <prvInitialiseTaskLists>
 800825c:	e00d      	b.n	800827a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800825e:	4b23      	ldr	r3, [pc, #140]	@ (80082ec <prvAddNewTaskToReadyList+0xc0>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d109      	bne.n	800827a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008266:	4b20      	ldr	r3, [pc, #128]	@ (80082e8 <prvAddNewTaskToReadyList+0xbc>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008270:	429a      	cmp	r2, r3
 8008272:	d802      	bhi.n	800827a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008274:	4a1c      	ldr	r2, [pc, #112]	@ (80082e8 <prvAddNewTaskToReadyList+0xbc>)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800827a:	4b1d      	ldr	r3, [pc, #116]	@ (80082f0 <prvAddNewTaskToReadyList+0xc4>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3301      	adds	r3, #1
 8008280:	4a1b      	ldr	r2, [pc, #108]	@ (80082f0 <prvAddNewTaskToReadyList+0xc4>)
 8008282:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008288:	2201      	movs	r2, #1
 800828a:	409a      	lsls	r2, r3
 800828c:	4b19      	ldr	r3, [pc, #100]	@ (80082f4 <prvAddNewTaskToReadyList+0xc8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4313      	orrs	r3, r2
 8008292:	4a18      	ldr	r2, [pc, #96]	@ (80082f4 <prvAddNewTaskToReadyList+0xc8>)
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4a15      	ldr	r2, [pc, #84]	@ (80082f8 <prvAddNewTaskToReadyList+0xcc>)
 80082a4:	441a      	add	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3304      	adds	r3, #4
 80082aa:	4619      	mov	r1, r3
 80082ac:	4610      	mov	r0, r2
 80082ae:	f7ff fe09 	bl	8007ec4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082b2:	f000 fd1b 	bl	8008cec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082b6:	4b0d      	ldr	r3, [pc, #52]	@ (80082ec <prvAddNewTaskToReadyList+0xc0>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00e      	beq.n	80082dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082be:	4b0a      	ldr	r3, [pc, #40]	@ (80082e8 <prvAddNewTaskToReadyList+0xbc>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d207      	bcs.n	80082dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082cc:	4b0b      	ldr	r3, [pc, #44]	@ (80082fc <prvAddNewTaskToReadyList+0xd0>)
 80082ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	20000844 	.word	0x20000844
 80082e8:	20000744 	.word	0x20000744
 80082ec:	20000850 	.word	0x20000850
 80082f0:	20000860 	.word	0x20000860
 80082f4:	2000084c 	.word	0x2000084c
 80082f8:	20000748 	.word	0x20000748
 80082fc:	e000ed04 	.word	0xe000ed04

08008300 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008308:	2300      	movs	r3, #0
 800830a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d018      	beq.n	8008344 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008312:	4b14      	ldr	r3, [pc, #80]	@ (8008364 <vTaskDelay+0x64>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00b      	beq.n	8008332 <vTaskDelay+0x32>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	60bb      	str	r3, [r7, #8]
}
 800832c:	bf00      	nop
 800832e:	bf00      	nop
 8008330:	e7fd      	b.n	800832e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008332:	f000 f87d 	bl	8008430 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008336:	2100      	movs	r1, #0
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fb11 	bl	8008960 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800833e:	f000 f885 	bl	800844c <xTaskResumeAll>
 8008342:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d107      	bne.n	800835a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800834a:	4b07      	ldr	r3, [pc, #28]	@ (8008368 <vTaskDelay+0x68>)
 800834c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	2000086c 	.word	0x2000086c
 8008368:	e000ed04 	.word	0xe000ed04

0800836c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b08a      	sub	sp, #40	@ 0x28
 8008370:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008372:	2300      	movs	r3, #0
 8008374:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008376:	2300      	movs	r3, #0
 8008378:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800837a:	463a      	mov	r2, r7
 800837c:	1d39      	adds	r1, r7, #4
 800837e:	f107 0308 	add.w	r3, r7, #8
 8008382:	4618      	mov	r0, r3
 8008384:	f7fa f992 	bl	80026ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	9202      	str	r2, [sp, #8]
 8008390:	9301      	str	r3, [sp, #4]
 8008392:	2300      	movs	r3, #0
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	2300      	movs	r3, #0
 8008398:	460a      	mov	r2, r1
 800839a:	491f      	ldr	r1, [pc, #124]	@ (8008418 <vTaskStartScheduler+0xac>)
 800839c:	481f      	ldr	r0, [pc, #124]	@ (800841c <vTaskStartScheduler+0xb0>)
 800839e:	f7ff fe18 	bl	8007fd2 <xTaskCreateStatic>
 80083a2:	4603      	mov	r3, r0
 80083a4:	4a1e      	ldr	r2, [pc, #120]	@ (8008420 <vTaskStartScheduler+0xb4>)
 80083a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083a8:	4b1d      	ldr	r3, [pc, #116]	@ (8008420 <vTaskStartScheduler+0xb4>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d002      	beq.n	80083b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80083b0:	2301      	movs	r3, #1
 80083b2:	617b      	str	r3, [r7, #20]
 80083b4:	e001      	b.n	80083ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d116      	bne.n	80083ee <vTaskStartScheduler+0x82>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	613b      	str	r3, [r7, #16]
}
 80083d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083d4:	4b13      	ldr	r3, [pc, #76]	@ (8008424 <vTaskStartScheduler+0xb8>)
 80083d6:	f04f 32ff 	mov.w	r2, #4294967295
 80083da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083dc:	4b12      	ldr	r3, [pc, #72]	@ (8008428 <vTaskStartScheduler+0xbc>)
 80083de:	2201      	movs	r2, #1
 80083e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083e2:	4b12      	ldr	r3, [pc, #72]	@ (800842c <vTaskStartScheduler+0xc0>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083e8:	f000 fbaa 	bl	8008b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083ec:	e00f      	b.n	800840e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f4:	d10b      	bne.n	800840e <vTaskStartScheduler+0xa2>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	60fb      	str	r3, [r7, #12]
}
 8008408:	bf00      	nop
 800840a:	bf00      	nop
 800840c:	e7fd      	b.n	800840a <vTaskStartScheduler+0x9e>
}
 800840e:	bf00      	nop
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	0800978c 	.word	0x0800978c
 800841c:	080087b5 	.word	0x080087b5
 8008420:	20000868 	.word	0x20000868
 8008424:	20000864 	.word	0x20000864
 8008428:	20000850 	.word	0x20000850
 800842c:	20000848 	.word	0x20000848

08008430 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008430:	b480      	push	{r7}
 8008432:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008434:	4b04      	ldr	r3, [pc, #16]	@ (8008448 <vTaskSuspendAll+0x18>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3301      	adds	r3, #1
 800843a:	4a03      	ldr	r2, [pc, #12]	@ (8008448 <vTaskSuspendAll+0x18>)
 800843c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800843e:	bf00      	nop
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	2000086c 	.word	0x2000086c

0800844c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008452:	2300      	movs	r3, #0
 8008454:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008456:	2300      	movs	r3, #0
 8008458:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800845a:	4b42      	ldr	r3, [pc, #264]	@ (8008564 <xTaskResumeAll+0x118>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10b      	bne.n	800847a <xTaskResumeAll+0x2e>
	__asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	603b      	str	r3, [r7, #0]
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
 8008478:	e7fd      	b.n	8008476 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800847a:	f000 fc05 	bl	8008c88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800847e:	4b39      	ldr	r3, [pc, #228]	@ (8008564 <xTaskResumeAll+0x118>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3b01      	subs	r3, #1
 8008484:	4a37      	ldr	r2, [pc, #220]	@ (8008564 <xTaskResumeAll+0x118>)
 8008486:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008488:	4b36      	ldr	r3, [pc, #216]	@ (8008564 <xTaskResumeAll+0x118>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d161      	bne.n	8008554 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008490:	4b35      	ldr	r3, [pc, #212]	@ (8008568 <xTaskResumeAll+0x11c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d05d      	beq.n	8008554 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008498:	e02e      	b.n	80084f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800849a:	4b34      	ldr	r3, [pc, #208]	@ (800856c <xTaskResumeAll+0x120>)
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3318      	adds	r3, #24
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff fd69 	bl	8007f7e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3304      	adds	r3, #4
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff fd64 	bl	8007f7e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ba:	2201      	movs	r2, #1
 80084bc:	409a      	lsls	r2, r3
 80084be:	4b2c      	ldr	r3, [pc, #176]	@ (8008570 <xTaskResumeAll+0x124>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	4a2a      	ldr	r2, [pc, #168]	@ (8008570 <xTaskResumeAll+0x124>)
 80084c6:	6013      	str	r3, [r2, #0]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084cc:	4613      	mov	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4a27      	ldr	r2, [pc, #156]	@ (8008574 <xTaskResumeAll+0x128>)
 80084d6:	441a      	add	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	3304      	adds	r3, #4
 80084dc:	4619      	mov	r1, r3
 80084de:	4610      	mov	r0, r2
 80084e0:	f7ff fcf0 	bl	8007ec4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084e8:	4b23      	ldr	r3, [pc, #140]	@ (8008578 <xTaskResumeAll+0x12c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d302      	bcc.n	80084f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80084f2:	4b22      	ldr	r3, [pc, #136]	@ (800857c <xTaskResumeAll+0x130>)
 80084f4:	2201      	movs	r2, #1
 80084f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084f8:	4b1c      	ldr	r3, [pc, #112]	@ (800856c <xTaskResumeAll+0x120>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1cc      	bne.n	800849a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008506:	f000 fa0b 	bl	8008920 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800850a:	4b1d      	ldr	r3, [pc, #116]	@ (8008580 <xTaskResumeAll+0x134>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d010      	beq.n	8008538 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008516:	f000 f837 	bl	8008588 <xTaskIncrementTick>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008520:	4b16      	ldr	r3, [pc, #88]	@ (800857c <xTaskResumeAll+0x130>)
 8008522:	2201      	movs	r2, #1
 8008524:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3b01      	subs	r3, #1
 800852a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1f1      	bne.n	8008516 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008532:	4b13      	ldr	r3, [pc, #76]	@ (8008580 <xTaskResumeAll+0x134>)
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008538:	4b10      	ldr	r3, [pc, #64]	@ (800857c <xTaskResumeAll+0x130>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d009      	beq.n	8008554 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008540:	2301      	movs	r3, #1
 8008542:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008544:	4b0f      	ldr	r3, [pc, #60]	@ (8008584 <xTaskResumeAll+0x138>)
 8008546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008554:	f000 fbca 	bl	8008cec <vPortExitCritical>

	return xAlreadyYielded;
 8008558:	68bb      	ldr	r3, [r7, #8]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	2000086c 	.word	0x2000086c
 8008568:	20000844 	.word	0x20000844
 800856c:	20000804 	.word	0x20000804
 8008570:	2000084c 	.word	0x2000084c
 8008574:	20000748 	.word	0x20000748
 8008578:	20000744 	.word	0x20000744
 800857c:	20000858 	.word	0x20000858
 8008580:	20000854 	.word	0x20000854
 8008584:	e000ed04 	.word	0xe000ed04

08008588 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800858e:	2300      	movs	r3, #0
 8008590:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008592:	4b4f      	ldr	r3, [pc, #316]	@ (80086d0 <xTaskIncrementTick+0x148>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	f040 808f 	bne.w	80086ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800859c:	4b4d      	ldr	r3, [pc, #308]	@ (80086d4 <xTaskIncrementTick+0x14c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3301      	adds	r3, #1
 80085a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085a4:	4a4b      	ldr	r2, [pc, #300]	@ (80086d4 <xTaskIncrementTick+0x14c>)
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d121      	bne.n	80085f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80085b0:	4b49      	ldr	r3, [pc, #292]	@ (80086d8 <xTaskIncrementTick+0x150>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00b      	beq.n	80085d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	603b      	str	r3, [r7, #0]
}
 80085cc:	bf00      	nop
 80085ce:	bf00      	nop
 80085d0:	e7fd      	b.n	80085ce <xTaskIncrementTick+0x46>
 80085d2:	4b41      	ldr	r3, [pc, #260]	@ (80086d8 <xTaskIncrementTick+0x150>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	4b40      	ldr	r3, [pc, #256]	@ (80086dc <xTaskIncrementTick+0x154>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a3e      	ldr	r2, [pc, #248]	@ (80086d8 <xTaskIncrementTick+0x150>)
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	4a3e      	ldr	r2, [pc, #248]	@ (80086dc <xTaskIncrementTick+0x154>)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	4b3e      	ldr	r3, [pc, #248]	@ (80086e0 <xTaskIncrementTick+0x158>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3301      	adds	r3, #1
 80085ec:	4a3c      	ldr	r2, [pc, #240]	@ (80086e0 <xTaskIncrementTick+0x158>)
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	f000 f996 	bl	8008920 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085f4:	4b3b      	ldr	r3, [pc, #236]	@ (80086e4 <xTaskIncrementTick+0x15c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d348      	bcc.n	8008690 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085fe:	4b36      	ldr	r3, [pc, #216]	@ (80086d8 <xTaskIncrementTick+0x150>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d104      	bne.n	8008612 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008608:	4b36      	ldr	r3, [pc, #216]	@ (80086e4 <xTaskIncrementTick+0x15c>)
 800860a:	f04f 32ff 	mov.w	r2, #4294967295
 800860e:	601a      	str	r2, [r3, #0]
					break;
 8008610:	e03e      	b.n	8008690 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008612:	4b31      	ldr	r3, [pc, #196]	@ (80086d8 <xTaskIncrementTick+0x150>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	68db      	ldr	r3, [r3, #12]
 800861a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008622:	693a      	ldr	r2, [r7, #16]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	429a      	cmp	r2, r3
 8008628:	d203      	bcs.n	8008632 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800862a:	4a2e      	ldr	r2, [pc, #184]	@ (80086e4 <xTaskIncrementTick+0x15c>)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008630:	e02e      	b.n	8008690 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	3304      	adds	r3, #4
 8008636:	4618      	mov	r0, r3
 8008638:	f7ff fca1 	bl	8007f7e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008640:	2b00      	cmp	r3, #0
 8008642:	d004      	beq.n	800864e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	3318      	adds	r3, #24
 8008648:	4618      	mov	r0, r3
 800864a:	f7ff fc98 	bl	8007f7e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008652:	2201      	movs	r2, #1
 8008654:	409a      	lsls	r2, r3
 8008656:	4b24      	ldr	r3, [pc, #144]	@ (80086e8 <xTaskIncrementTick+0x160>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4313      	orrs	r3, r2
 800865c:	4a22      	ldr	r2, [pc, #136]	@ (80086e8 <xTaskIncrementTick+0x160>)
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008664:	4613      	mov	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4a1f      	ldr	r2, [pc, #124]	@ (80086ec <xTaskIncrementTick+0x164>)
 800866e:	441a      	add	r2, r3
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	3304      	adds	r3, #4
 8008674:	4619      	mov	r1, r3
 8008676:	4610      	mov	r0, r2
 8008678:	f7ff fc24 	bl	8007ec4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008680:	4b1b      	ldr	r3, [pc, #108]	@ (80086f0 <xTaskIncrementTick+0x168>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008686:	429a      	cmp	r2, r3
 8008688:	d3b9      	bcc.n	80085fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800868a:	2301      	movs	r3, #1
 800868c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800868e:	e7b6      	b.n	80085fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008690:	4b17      	ldr	r3, [pc, #92]	@ (80086f0 <xTaskIncrementTick+0x168>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008696:	4915      	ldr	r1, [pc, #84]	@ (80086ec <xTaskIncrementTick+0x164>)
 8008698:	4613      	mov	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	440b      	add	r3, r1
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d901      	bls.n	80086ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80086a8:	2301      	movs	r3, #1
 80086aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086ac:	4b11      	ldr	r3, [pc, #68]	@ (80086f4 <xTaskIncrementTick+0x16c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d007      	beq.n	80086c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80086b4:	2301      	movs	r3, #1
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	e004      	b.n	80086c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80086ba:	4b0f      	ldr	r3, [pc, #60]	@ (80086f8 <xTaskIncrementTick+0x170>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3301      	adds	r3, #1
 80086c0:	4a0d      	ldr	r2, [pc, #52]	@ (80086f8 <xTaskIncrementTick+0x170>)
 80086c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80086c4:	697b      	ldr	r3, [r7, #20]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	2000086c 	.word	0x2000086c
 80086d4:	20000848 	.word	0x20000848
 80086d8:	200007fc 	.word	0x200007fc
 80086dc:	20000800 	.word	0x20000800
 80086e0:	2000085c 	.word	0x2000085c
 80086e4:	20000864 	.word	0x20000864
 80086e8:	2000084c 	.word	0x2000084c
 80086ec:	20000748 	.word	0x20000748
 80086f0:	20000744 	.word	0x20000744
 80086f4:	20000858 	.word	0x20000858
 80086f8:	20000854 	.word	0x20000854

080086fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008702:	4b27      	ldr	r3, [pc, #156]	@ (80087a0 <vTaskSwitchContext+0xa4>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800870a:	4b26      	ldr	r3, [pc, #152]	@ (80087a4 <vTaskSwitchContext+0xa8>)
 800870c:	2201      	movs	r2, #1
 800870e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008710:	e040      	b.n	8008794 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008712:	4b24      	ldr	r3, [pc, #144]	@ (80087a4 <vTaskSwitchContext+0xa8>)
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008718:	4b23      	ldr	r3, [pc, #140]	@ (80087a8 <vTaskSwitchContext+0xac>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	fab3 f383 	clz	r3, r3
 8008724:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008726:	7afb      	ldrb	r3, [r7, #11]
 8008728:	f1c3 031f 	rsb	r3, r3, #31
 800872c:	617b      	str	r3, [r7, #20]
 800872e:	491f      	ldr	r1, [pc, #124]	@ (80087ac <vTaskSwitchContext+0xb0>)
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4613      	mov	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	440b      	add	r3, r1
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10b      	bne.n	800875a <vTaskSwitchContext+0x5e>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	607b      	str	r3, [r7, #4]
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	e7fd      	b.n	8008756 <vTaskSwitchContext+0x5a>
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	4613      	mov	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	4413      	add	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4a11      	ldr	r2, [pc, #68]	@ (80087ac <vTaskSwitchContext+0xb0>)
 8008766:	4413      	add	r3, r2
 8008768:	613b      	str	r3, [r7, #16]
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	605a      	str	r2, [r3, #4]
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	3308      	adds	r3, #8
 800877c:	429a      	cmp	r2, r3
 800877e:	d104      	bne.n	800878a <vTaskSwitchContext+0x8e>
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	605a      	str	r2, [r3, #4]
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	4a07      	ldr	r2, [pc, #28]	@ (80087b0 <vTaskSwitchContext+0xb4>)
 8008792:	6013      	str	r3, [r2, #0]
}
 8008794:	bf00      	nop
 8008796:	371c      	adds	r7, #28
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	2000086c 	.word	0x2000086c
 80087a4:	20000858 	.word	0x20000858
 80087a8:	2000084c 	.word	0x2000084c
 80087ac:	20000748 	.word	0x20000748
 80087b0:	20000744 	.word	0x20000744

080087b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087bc:	f000 f852 	bl	8008864 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087c0:	4b06      	ldr	r3, [pc, #24]	@ (80087dc <prvIdleTask+0x28>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d9f9      	bls.n	80087bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80087c8:	4b05      	ldr	r3, [pc, #20]	@ (80087e0 <prvIdleTask+0x2c>)
 80087ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80087d8:	e7f0      	b.n	80087bc <prvIdleTask+0x8>
 80087da:	bf00      	nop
 80087dc:	20000748 	.word	0x20000748
 80087e0:	e000ed04 	.word	0xe000ed04

080087e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087ea:	2300      	movs	r3, #0
 80087ec:	607b      	str	r3, [r7, #4]
 80087ee:	e00c      	b.n	800880a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	4613      	mov	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4a12      	ldr	r2, [pc, #72]	@ (8008844 <prvInitialiseTaskLists+0x60>)
 80087fc:	4413      	add	r3, r2
 80087fe:	4618      	mov	r0, r3
 8008800:	f7ff fb33 	bl	8007e6a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3301      	adds	r3, #1
 8008808:	607b      	str	r3, [r7, #4]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b06      	cmp	r3, #6
 800880e:	d9ef      	bls.n	80087f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008810:	480d      	ldr	r0, [pc, #52]	@ (8008848 <prvInitialiseTaskLists+0x64>)
 8008812:	f7ff fb2a 	bl	8007e6a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008816:	480d      	ldr	r0, [pc, #52]	@ (800884c <prvInitialiseTaskLists+0x68>)
 8008818:	f7ff fb27 	bl	8007e6a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800881c:	480c      	ldr	r0, [pc, #48]	@ (8008850 <prvInitialiseTaskLists+0x6c>)
 800881e:	f7ff fb24 	bl	8007e6a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008822:	480c      	ldr	r0, [pc, #48]	@ (8008854 <prvInitialiseTaskLists+0x70>)
 8008824:	f7ff fb21 	bl	8007e6a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008828:	480b      	ldr	r0, [pc, #44]	@ (8008858 <prvInitialiseTaskLists+0x74>)
 800882a:	f7ff fb1e 	bl	8007e6a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800882e:	4b0b      	ldr	r3, [pc, #44]	@ (800885c <prvInitialiseTaskLists+0x78>)
 8008830:	4a05      	ldr	r2, [pc, #20]	@ (8008848 <prvInitialiseTaskLists+0x64>)
 8008832:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008834:	4b0a      	ldr	r3, [pc, #40]	@ (8008860 <prvInitialiseTaskLists+0x7c>)
 8008836:	4a05      	ldr	r2, [pc, #20]	@ (800884c <prvInitialiseTaskLists+0x68>)
 8008838:	601a      	str	r2, [r3, #0]
}
 800883a:	bf00      	nop
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	20000748 	.word	0x20000748
 8008848:	200007d4 	.word	0x200007d4
 800884c:	200007e8 	.word	0x200007e8
 8008850:	20000804 	.word	0x20000804
 8008854:	20000818 	.word	0x20000818
 8008858:	20000830 	.word	0x20000830
 800885c:	200007fc 	.word	0x200007fc
 8008860:	20000800 	.word	0x20000800

08008864 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800886a:	e019      	b.n	80088a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800886c:	f000 fa0c 	bl	8008c88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008870:	4b10      	ldr	r3, [pc, #64]	@ (80088b4 <prvCheckTasksWaitingTermination+0x50>)
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	3304      	adds	r3, #4
 800887c:	4618      	mov	r0, r3
 800887e:	f7ff fb7e 	bl	8007f7e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008882:	4b0d      	ldr	r3, [pc, #52]	@ (80088b8 <prvCheckTasksWaitingTermination+0x54>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3b01      	subs	r3, #1
 8008888:	4a0b      	ldr	r2, [pc, #44]	@ (80088b8 <prvCheckTasksWaitingTermination+0x54>)
 800888a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800888c:	4b0b      	ldr	r3, [pc, #44]	@ (80088bc <prvCheckTasksWaitingTermination+0x58>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3b01      	subs	r3, #1
 8008892:	4a0a      	ldr	r2, [pc, #40]	@ (80088bc <prvCheckTasksWaitingTermination+0x58>)
 8008894:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008896:	f000 fa29 	bl	8008cec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f810 	bl	80088c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088a0:	4b06      	ldr	r3, [pc, #24]	@ (80088bc <prvCheckTasksWaitingTermination+0x58>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e1      	bne.n	800886c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088a8:	bf00      	nop
 80088aa:	bf00      	nop
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	20000818 	.word	0x20000818
 80088b8:	20000844 	.word	0x20000844
 80088bc:	2000082c 	.word	0x2000082c

080088c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d108      	bne.n	80088e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 fb84 	bl	8008fe4 <vPortFree>
				vPortFree( pxTCB );
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fb81 	bl	8008fe4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088e2:	e019      	b.n	8008918 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d103      	bne.n	80088f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fb78 	bl	8008fe4 <vPortFree>
	}
 80088f4:	e010      	b.n	8008918 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d00b      	beq.n	8008918 <prvDeleteTCB+0x58>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	60fb      	str	r3, [r7, #12]
}
 8008912:	bf00      	nop
 8008914:	bf00      	nop
 8008916:	e7fd      	b.n	8008914 <prvDeleteTCB+0x54>
	}
 8008918:	bf00      	nop
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008926:	4b0c      	ldr	r3, [pc, #48]	@ (8008958 <prvResetNextTaskUnblockTime+0x38>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008930:	4b0a      	ldr	r3, [pc, #40]	@ (800895c <prvResetNextTaskUnblockTime+0x3c>)
 8008932:	f04f 32ff 	mov.w	r2, #4294967295
 8008936:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008938:	e008      	b.n	800894c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800893a:	4b07      	ldr	r3, [pc, #28]	@ (8008958 <prvResetNextTaskUnblockTime+0x38>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	4a04      	ldr	r2, [pc, #16]	@ (800895c <prvResetNextTaskUnblockTime+0x3c>)
 800894a:	6013      	str	r3, [r2, #0]
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	200007fc 	.word	0x200007fc
 800895c:	20000864 	.word	0x20000864

08008960 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800896a:	4b29      	ldr	r3, [pc, #164]	@ (8008a10 <prvAddCurrentTaskToDelayedList+0xb0>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008970:	4b28      	ldr	r3, [pc, #160]	@ (8008a14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3304      	adds	r3, #4
 8008976:	4618      	mov	r0, r3
 8008978:	f7ff fb01 	bl	8007f7e <uxListRemove>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10b      	bne.n	800899a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008982:	4b24      	ldr	r3, [pc, #144]	@ (8008a14 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008988:	2201      	movs	r2, #1
 800898a:	fa02 f303 	lsl.w	r3, r2, r3
 800898e:	43da      	mvns	r2, r3
 8008990:	4b21      	ldr	r3, [pc, #132]	@ (8008a18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4013      	ands	r3, r2
 8008996:	4a20      	ldr	r2, [pc, #128]	@ (8008a18 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008998:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a0:	d10a      	bne.n	80089b8 <prvAddCurrentTaskToDelayedList+0x58>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d007      	beq.n	80089b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008a14 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4619      	mov	r1, r3
 80089b0:	481a      	ldr	r0, [pc, #104]	@ (8008a1c <prvAddCurrentTaskToDelayedList+0xbc>)
 80089b2:	f7ff fa87 	bl	8007ec4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089b6:	e026      	b.n	8008a06 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4413      	add	r3, r2
 80089be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089c0:	4b14      	ldr	r3, [pc, #80]	@ (8008a14 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d209      	bcs.n	80089e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089d0:	4b13      	ldr	r3, [pc, #76]	@ (8008a20 <prvAddCurrentTaskToDelayedList+0xc0>)
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008a14 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3304      	adds	r3, #4
 80089da:	4619      	mov	r1, r3
 80089dc:	4610      	mov	r0, r2
 80089de:	f7ff fa95 	bl	8007f0c <vListInsert>
}
 80089e2:	e010      	b.n	8008a06 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008a24 <prvAddCurrentTaskToDelayedList+0xc4>)
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008a14 <prvAddCurrentTaskToDelayedList+0xb4>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3304      	adds	r3, #4
 80089ee:	4619      	mov	r1, r3
 80089f0:	4610      	mov	r0, r2
 80089f2:	f7ff fa8b 	bl	8007f0c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80089f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008a28 <prvAddCurrentTaskToDelayedList+0xc8>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d202      	bcs.n	8008a06 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008a00:	4a09      	ldr	r2, [pc, #36]	@ (8008a28 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	6013      	str	r3, [r2, #0]
}
 8008a06:	bf00      	nop
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	20000848 	.word	0x20000848
 8008a14:	20000744 	.word	0x20000744
 8008a18:	2000084c 	.word	0x2000084c
 8008a1c:	20000830 	.word	0x20000830
 8008a20:	20000800 	.word	0x20000800
 8008a24:	200007fc 	.word	0x200007fc
 8008a28:	20000864 	.word	0x20000864

08008a2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	3b04      	subs	r3, #4
 8008a3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008a44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	3b04      	subs	r3, #4
 8008a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	f023 0201 	bic.w	r2, r3, #1
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	3b04      	subs	r3, #4
 8008a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a5c:	4a0c      	ldr	r2, [pc, #48]	@ (8008a90 <pxPortInitialiseStack+0x64>)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3b14      	subs	r3, #20
 8008a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3b04      	subs	r3, #4
 8008a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f06f 0202 	mvn.w	r2, #2
 8008a7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	3b20      	subs	r3, #32
 8008a80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a82:	68fb      	ldr	r3, [r7, #12]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3714      	adds	r7, #20
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr
 8008a90:	08008a95 	.word	0x08008a95

08008a94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a9e:	4b13      	ldr	r3, [pc, #76]	@ (8008aec <prvTaskExitError+0x58>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa6:	d00b      	beq.n	8008ac0 <prvTaskExitError+0x2c>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	60fb      	str	r3, [r7, #12]
}
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
 8008abe:	e7fd      	b.n	8008abc <prvTaskExitError+0x28>
	__asm volatile
 8008ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	60bb      	str	r3, [r7, #8]
}
 8008ad2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ad4:	bf00      	nop
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d0fc      	beq.n	8008ad6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008adc:	bf00      	nop
 8008ade:	bf00      	nop
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	2000000c 	.word	0x2000000c

08008af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008af0:	4b07      	ldr	r3, [pc, #28]	@ (8008b10 <pxCurrentTCBConst2>)
 8008af2:	6819      	ldr	r1, [r3, #0]
 8008af4:	6808      	ldr	r0, [r1, #0]
 8008af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afa:	f380 8809 	msr	PSP, r0
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f04f 0000 	mov.w	r0, #0
 8008b06:	f380 8811 	msr	BASEPRI, r0
 8008b0a:	4770      	bx	lr
 8008b0c:	f3af 8000 	nop.w

08008b10 <pxCurrentTCBConst2>:
 8008b10:	20000744 	.word	0x20000744
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b14:	bf00      	nop
 8008b16:	bf00      	nop

08008b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b18:	4808      	ldr	r0, [pc, #32]	@ (8008b3c <prvPortStartFirstTask+0x24>)
 8008b1a:	6800      	ldr	r0, [r0, #0]
 8008b1c:	6800      	ldr	r0, [r0, #0]
 8008b1e:	f380 8808 	msr	MSP, r0
 8008b22:	f04f 0000 	mov.w	r0, #0
 8008b26:	f380 8814 	msr	CONTROL, r0
 8008b2a:	b662      	cpsie	i
 8008b2c:	b661      	cpsie	f
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	df00      	svc	0
 8008b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b3a:	bf00      	nop
 8008b3c:	e000ed08 	.word	0xe000ed08

08008b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b46:	4b47      	ldr	r3, [pc, #284]	@ (8008c64 <xPortStartScheduler+0x124>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a47      	ldr	r2, [pc, #284]	@ (8008c68 <xPortStartScheduler+0x128>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d10b      	bne.n	8008b68 <xPortStartScheduler+0x28>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	613b      	str	r3, [r7, #16]
}
 8008b62:	bf00      	nop
 8008b64:	bf00      	nop
 8008b66:	e7fd      	b.n	8008b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b68:	4b3e      	ldr	r3, [pc, #248]	@ (8008c64 <xPortStartScheduler+0x124>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8008c6c <xPortStartScheduler+0x12c>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d10b      	bne.n	8008b8a <xPortStartScheduler+0x4a>
	__asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	60fb      	str	r3, [r7, #12]
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop
 8008b88:	e7fd      	b.n	8008b86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b8a:	4b39      	ldr	r3, [pc, #228]	@ (8008c70 <xPortStartScheduler+0x130>)
 8008b8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	22ff      	movs	r2, #255	@ 0xff
 8008b9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	4b31      	ldr	r3, [pc, #196]	@ (8008c74 <xPortStartScheduler+0x134>)
 8008bb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008bb2:	4b31      	ldr	r3, [pc, #196]	@ (8008c78 <xPortStartScheduler+0x138>)
 8008bb4:	2207      	movs	r2, #7
 8008bb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bb8:	e009      	b.n	8008bce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008bba:	4b2f      	ldr	r3, [pc, #188]	@ (8008c78 <xPortStartScheduler+0x138>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8008c78 <xPortStartScheduler+0x138>)
 8008bc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008bc4:	78fb      	ldrb	r3, [r7, #3]
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bce:	78fb      	ldrb	r3, [r7, #3]
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bd6:	2b80      	cmp	r3, #128	@ 0x80
 8008bd8:	d0ef      	beq.n	8008bba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bda:	4b27      	ldr	r3, [pc, #156]	@ (8008c78 <xPortStartScheduler+0x138>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f1c3 0307 	rsb	r3, r3, #7
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	d00b      	beq.n	8008bfe <xPortStartScheduler+0xbe>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	60bb      	str	r3, [r7, #8]
}
 8008bf8:	bf00      	nop
 8008bfa:	bf00      	nop
 8008bfc:	e7fd      	b.n	8008bfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8008c78 <xPortStartScheduler+0x138>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	021b      	lsls	r3, r3, #8
 8008c04:	4a1c      	ldr	r2, [pc, #112]	@ (8008c78 <xPortStartScheduler+0x138>)
 8008c06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c08:	4b1b      	ldr	r3, [pc, #108]	@ (8008c78 <xPortStartScheduler+0x138>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c10:	4a19      	ldr	r2, [pc, #100]	@ (8008c78 <xPortStartScheduler+0x138>)
 8008c12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c1c:	4b17      	ldr	r3, [pc, #92]	@ (8008c7c <xPortStartScheduler+0x13c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a16      	ldr	r2, [pc, #88]	@ (8008c7c <xPortStartScheduler+0x13c>)
 8008c22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008c26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c28:	4b14      	ldr	r3, [pc, #80]	@ (8008c7c <xPortStartScheduler+0x13c>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a13      	ldr	r2, [pc, #76]	@ (8008c7c <xPortStartScheduler+0x13c>)
 8008c2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008c32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c34:	f000 f8da 	bl	8008dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c38:	4b11      	ldr	r3, [pc, #68]	@ (8008c80 <xPortStartScheduler+0x140>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c3e:	f000 f8f9 	bl	8008e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c42:	4b10      	ldr	r3, [pc, #64]	@ (8008c84 <xPortStartScheduler+0x144>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a0f      	ldr	r2, [pc, #60]	@ (8008c84 <xPortStartScheduler+0x144>)
 8008c48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008c4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c4e:	f7ff ff63 	bl	8008b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c52:	f7ff fd53 	bl	80086fc <vTaskSwitchContext>
	prvTaskExitError();
 8008c56:	f7ff ff1d 	bl	8008a94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	e000ed00 	.word	0xe000ed00
 8008c68:	410fc271 	.word	0x410fc271
 8008c6c:	410fc270 	.word	0x410fc270
 8008c70:	e000e400 	.word	0xe000e400
 8008c74:	20000870 	.word	0x20000870
 8008c78:	20000874 	.word	0x20000874
 8008c7c:	e000ed20 	.word	0xe000ed20
 8008c80:	2000000c 	.word	0x2000000c
 8008c84:	e000ef34 	.word	0xe000ef34

08008c88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	607b      	str	r3, [r7, #4]
}
 8008ca0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ca2:	4b10      	ldr	r3, [pc, #64]	@ (8008ce4 <vPortEnterCritical+0x5c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8008ce4 <vPortEnterCritical+0x5c>)
 8008caa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008cac:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce4 <vPortEnterCritical+0x5c>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d110      	bne.n	8008cd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce8 <vPortEnterCritical+0x60>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00b      	beq.n	8008cd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	603b      	str	r3, [r7, #0]
}
 8008cd0:	bf00      	nop
 8008cd2:	bf00      	nop
 8008cd4:	e7fd      	b.n	8008cd2 <vPortEnterCritical+0x4a>
	}
}
 8008cd6:	bf00      	nop
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	2000000c 	.word	0x2000000c
 8008ce8:	e000ed04 	.word	0xe000ed04

08008cec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008cf2:	4b12      	ldr	r3, [pc, #72]	@ (8008d3c <vPortExitCritical+0x50>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10b      	bne.n	8008d12 <vPortExitCritical+0x26>
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	607b      	str	r3, [r7, #4]
}
 8008d0c:	bf00      	nop
 8008d0e:	bf00      	nop
 8008d10:	e7fd      	b.n	8008d0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d12:	4b0a      	ldr	r3, [pc, #40]	@ (8008d3c <vPortExitCritical+0x50>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	4a08      	ldr	r2, [pc, #32]	@ (8008d3c <vPortExitCritical+0x50>)
 8008d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d1c:	4b07      	ldr	r3, [pc, #28]	@ (8008d3c <vPortExitCritical+0x50>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d105      	bne.n	8008d30 <vPortExitCritical+0x44>
 8008d24:	2300      	movs	r3, #0
 8008d26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr
 8008d3c:	2000000c 	.word	0x2000000c

08008d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d40:	f3ef 8009 	mrs	r0, PSP
 8008d44:	f3bf 8f6f 	isb	sy
 8008d48:	4b15      	ldr	r3, [pc, #84]	@ (8008da0 <pxCurrentTCBConst>)
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	f01e 0f10 	tst.w	lr, #16
 8008d50:	bf08      	it	eq
 8008d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5a:	6010      	str	r0, [r2, #0]
 8008d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008d64:	f380 8811 	msr	BASEPRI, r0
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f7ff fcc4 	bl	80086fc <vTaskSwitchContext>
 8008d74:	f04f 0000 	mov.w	r0, #0
 8008d78:	f380 8811 	msr	BASEPRI, r0
 8008d7c:	bc09      	pop	{r0, r3}
 8008d7e:	6819      	ldr	r1, [r3, #0]
 8008d80:	6808      	ldr	r0, [r1, #0]
 8008d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d86:	f01e 0f10 	tst.w	lr, #16
 8008d8a:	bf08      	it	eq
 8008d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d90:	f380 8809 	msr	PSP, r0
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	f3af 8000 	nop.w

08008da0 <pxCurrentTCBConst>:
 8008da0:	20000744 	.word	0x20000744
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop

08008da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	607b      	str	r3, [r7, #4]
}
 8008dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008dc2:	f7ff fbe1 	bl	8008588 <xTaskIncrementTick>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dcc:	4b06      	ldr	r3, [pc, #24]	@ (8008de8 <SysTick_Handler+0x40>)
 8008dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	f383 8811 	msr	BASEPRI, r3
}
 8008dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	e000ed04 	.word	0xe000ed04

08008dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008dec:	b480      	push	{r7}
 8008dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008df0:	4b0b      	ldr	r3, [pc, #44]	@ (8008e20 <vPortSetupTimerInterrupt+0x34>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008df6:	4b0b      	ldr	r3, [pc, #44]	@ (8008e24 <vPortSetupTimerInterrupt+0x38>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8008e28 <vPortSetupTimerInterrupt+0x3c>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a0a      	ldr	r2, [pc, #40]	@ (8008e2c <vPortSetupTimerInterrupt+0x40>)
 8008e02:	fba2 2303 	umull	r2, r3, r2, r3
 8008e06:	099b      	lsrs	r3, r3, #6
 8008e08:	4a09      	ldr	r2, [pc, #36]	@ (8008e30 <vPortSetupTimerInterrupt+0x44>)
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e0e:	4b04      	ldr	r3, [pc, #16]	@ (8008e20 <vPortSetupTimerInterrupt+0x34>)
 8008e10:	2207      	movs	r2, #7
 8008e12:	601a      	str	r2, [r3, #0]
}
 8008e14:	bf00      	nop
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	e000e010 	.word	0xe000e010
 8008e24:	e000e018 	.word	0xe000e018
 8008e28:	20000000 	.word	0x20000000
 8008e2c:	10624dd3 	.word	0x10624dd3
 8008e30:	e000e014 	.word	0xe000e014

08008e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008e44 <vPortEnableVFP+0x10>
 8008e38:	6801      	ldr	r1, [r0, #0]
 8008e3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008e3e:	6001      	str	r1, [r0, #0]
 8008e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e42:	bf00      	nop
 8008e44:	e000ed88 	.word	0xe000ed88

08008e48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08a      	sub	sp, #40	@ 0x28
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e50:	2300      	movs	r3, #0
 8008e52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e54:	f7ff faec 	bl	8008430 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e58:	4b5c      	ldr	r3, [pc, #368]	@ (8008fcc <pvPortMalloc+0x184>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d101      	bne.n	8008e64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e60:	f000 f924 	bl	80090ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e64:	4b5a      	ldr	r3, [pc, #360]	@ (8008fd0 <pvPortMalloc+0x188>)
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f040 8095 	bne.w	8008f9c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d01e      	beq.n	8008eb6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e78:	2208      	movs	r2, #8
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f003 0307 	and.w	r3, r3, #7
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d015      	beq.n	8008eb6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f023 0307 	bic.w	r3, r3, #7
 8008e90:	3308      	adds	r3, #8
 8008e92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f003 0307 	and.w	r3, r3, #7
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00b      	beq.n	8008eb6 <pvPortMalloc+0x6e>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	617b      	str	r3, [r7, #20]
}
 8008eb0:	bf00      	nop
 8008eb2:	bf00      	nop
 8008eb4:	e7fd      	b.n	8008eb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d06f      	beq.n	8008f9c <pvPortMalloc+0x154>
 8008ebc:	4b45      	ldr	r3, [pc, #276]	@ (8008fd4 <pvPortMalloc+0x18c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d86a      	bhi.n	8008f9c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ec6:	4b44      	ldr	r3, [pc, #272]	@ (8008fd8 <pvPortMalloc+0x190>)
 8008ec8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008eca:	4b43      	ldr	r3, [pc, #268]	@ (8008fd8 <pvPortMalloc+0x190>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ed0:	e004      	b.n	8008edc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d903      	bls.n	8008eee <pvPortMalloc+0xa6>
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1f1      	bne.n	8008ed2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008eee:	4b37      	ldr	r3, [pc, #220]	@ (8008fcc <pvPortMalloc+0x184>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d051      	beq.n	8008f9c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2208      	movs	r2, #8
 8008efe:	4413      	add	r3, r2
 8008f00:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	1ad2      	subs	r2, r2, r3
 8008f12:	2308      	movs	r3, #8
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d920      	bls.n	8008f5c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4413      	add	r3, r2
 8008f20:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	f003 0307 	and.w	r3, r3, #7
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <pvPortMalloc+0xfc>
	__asm volatile
 8008f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	613b      	str	r3, [r7, #16]
}
 8008f3e:	bf00      	nop
 8008f40:	bf00      	nop
 8008f42:	e7fd      	b.n	8008f40 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	1ad2      	subs	r2, r2, r3
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f56:	69b8      	ldr	r0, [r7, #24]
 8008f58:	f000 f90a 	bl	8009170 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8008fd4 <pvPortMalloc+0x18c>)
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	4a1b      	ldr	r2, [pc, #108]	@ (8008fd4 <pvPortMalloc+0x18c>)
 8008f68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8008fd4 <pvPortMalloc+0x18c>)
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8008fdc <pvPortMalloc+0x194>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d203      	bcs.n	8008f7e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f76:	4b17      	ldr	r3, [pc, #92]	@ (8008fd4 <pvPortMalloc+0x18c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a18      	ldr	r2, [pc, #96]	@ (8008fdc <pvPortMalloc+0x194>)
 8008f7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f80:	685a      	ldr	r2, [r3, #4]
 8008f82:	4b13      	ldr	r3, [pc, #76]	@ (8008fd0 <pvPortMalloc+0x188>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	431a      	orrs	r2, r3
 8008f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8e:	2200      	movs	r2, #0
 8008f90:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f92:	4b13      	ldr	r3, [pc, #76]	@ (8008fe0 <pvPortMalloc+0x198>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3301      	adds	r3, #1
 8008f98:	4a11      	ldr	r2, [pc, #68]	@ (8008fe0 <pvPortMalloc+0x198>)
 8008f9a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f9c:	f7ff fa56 	bl	800844c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	f003 0307 	and.w	r3, r3, #7
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00b      	beq.n	8008fc2 <pvPortMalloc+0x17a>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	60fb      	str	r3, [r7, #12]
}
 8008fbc:	bf00      	nop
 8008fbe:	bf00      	nop
 8008fc0:	e7fd      	b.n	8008fbe <pvPortMalloc+0x176>
	return pvReturn;
 8008fc2:	69fb      	ldr	r3, [r7, #28]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3728      	adds	r7, #40	@ 0x28
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20004480 	.word	0x20004480
 8008fd0:	20004494 	.word	0x20004494
 8008fd4:	20004484 	.word	0x20004484
 8008fd8:	20004478 	.word	0x20004478
 8008fdc:	20004488 	.word	0x20004488
 8008fe0:	2000448c 	.word	0x2000448c

08008fe4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d04f      	beq.n	8009096 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ff6:	2308      	movs	r3, #8
 8008ff8:	425b      	negs	r3, r3
 8008ffa:	697a      	ldr	r2, [r7, #20]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	4b25      	ldr	r3, [pc, #148]	@ (80090a0 <vPortFree+0xbc>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4013      	ands	r3, r2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10b      	bne.n	800902a <vPortFree+0x46>
	__asm volatile
 8009012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009016:	f383 8811 	msr	BASEPRI, r3
 800901a:	f3bf 8f6f 	isb	sy
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	60fb      	str	r3, [r7, #12]
}
 8009024:	bf00      	nop
 8009026:	bf00      	nop
 8009028:	e7fd      	b.n	8009026 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00b      	beq.n	800904a <vPortFree+0x66>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	60bb      	str	r3, [r7, #8]
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop
 8009048:	e7fd      	b.n	8009046 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	4b14      	ldr	r3, [pc, #80]	@ (80090a0 <vPortFree+0xbc>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4013      	ands	r3, r2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d01e      	beq.n	8009096 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d11a      	bne.n	8009096 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	4b0e      	ldr	r3, [pc, #56]	@ (80090a0 <vPortFree+0xbc>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	43db      	mvns	r3, r3
 800906a:	401a      	ands	r2, r3
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009070:	f7ff f9de 	bl	8008430 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	4b0a      	ldr	r3, [pc, #40]	@ (80090a4 <vPortFree+0xc0>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4413      	add	r3, r2
 800907e:	4a09      	ldr	r2, [pc, #36]	@ (80090a4 <vPortFree+0xc0>)
 8009080:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009082:	6938      	ldr	r0, [r7, #16]
 8009084:	f000 f874 	bl	8009170 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009088:	4b07      	ldr	r3, [pc, #28]	@ (80090a8 <vPortFree+0xc4>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3301      	adds	r3, #1
 800908e:	4a06      	ldr	r2, [pc, #24]	@ (80090a8 <vPortFree+0xc4>)
 8009090:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009092:	f7ff f9db 	bl	800844c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009096:	bf00      	nop
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	20004494 	.word	0x20004494
 80090a4:	20004484 	.word	0x20004484
 80090a8:	20004490 	.word	0x20004490

080090ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090b2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80090b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090b8:	4b27      	ldr	r3, [pc, #156]	@ (8009158 <prvHeapInit+0xac>)
 80090ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f003 0307 	and.w	r3, r3, #7
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00c      	beq.n	80090e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3307      	adds	r3, #7
 80090ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f023 0307 	bic.w	r3, r3, #7
 80090d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	4a1f      	ldr	r2, [pc, #124]	@ (8009158 <prvHeapInit+0xac>)
 80090dc:	4413      	add	r3, r2
 80090de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090e4:	4a1d      	ldr	r2, [pc, #116]	@ (800915c <prvHeapInit+0xb0>)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090ea:	4b1c      	ldr	r3, [pc, #112]	@ (800915c <prvHeapInit+0xb0>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	4413      	add	r3, r2
 80090f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090f8:	2208      	movs	r2, #8
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	1a9b      	subs	r3, r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f023 0307 	bic.w	r3, r3, #7
 8009106:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4a15      	ldr	r2, [pc, #84]	@ (8009160 <prvHeapInit+0xb4>)
 800910c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800910e:	4b14      	ldr	r3, [pc, #80]	@ (8009160 <prvHeapInit+0xb4>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2200      	movs	r2, #0
 8009114:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009116:	4b12      	ldr	r3, [pc, #72]	@ (8009160 <prvHeapInit+0xb4>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2200      	movs	r2, #0
 800911c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	1ad2      	subs	r2, r2, r3
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800912c:	4b0c      	ldr	r3, [pc, #48]	@ (8009160 <prvHeapInit+0xb4>)
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	4a0a      	ldr	r2, [pc, #40]	@ (8009164 <prvHeapInit+0xb8>)
 800913a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	4a09      	ldr	r2, [pc, #36]	@ (8009168 <prvHeapInit+0xbc>)
 8009142:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009144:	4b09      	ldr	r3, [pc, #36]	@ (800916c <prvHeapInit+0xc0>)
 8009146:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800914a:	601a      	str	r2, [r3, #0]
}
 800914c:	bf00      	nop
 800914e:	3714      	adds	r7, #20
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr
 8009158:	20000878 	.word	0x20000878
 800915c:	20004478 	.word	0x20004478
 8009160:	20004480 	.word	0x20004480
 8009164:	20004488 	.word	0x20004488
 8009168:	20004484 	.word	0x20004484
 800916c:	20004494 	.word	0x20004494

08009170 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009178:	4b28      	ldr	r3, [pc, #160]	@ (800921c <prvInsertBlockIntoFreeList+0xac>)
 800917a:	60fb      	str	r3, [r7, #12]
 800917c:	e002      	b.n	8009184 <prvInsertBlockIntoFreeList+0x14>
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	429a      	cmp	r2, r3
 800918c:	d8f7      	bhi.n	800917e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	4413      	add	r3, r2
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	429a      	cmp	r2, r3
 800919e:	d108      	bne.n	80091b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	441a      	add	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	441a      	add	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d118      	bne.n	80091f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	4b15      	ldr	r3, [pc, #84]	@ (8009220 <prvInsertBlockIntoFreeList+0xb0>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d00d      	beq.n	80091ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	441a      	add	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	e008      	b.n	8009200 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009220 <prvInsertBlockIntoFreeList+0xb0>)
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	e003      	b.n	8009200 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	429a      	cmp	r2, r3
 8009206:	d002      	beq.n	800920e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800920e:	bf00      	nop
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	20004478 	.word	0x20004478
 8009220:	20004480 	.word	0x20004480

08009224 <memset>:
 8009224:	4402      	add	r2, r0
 8009226:	4603      	mov	r3, r0
 8009228:	4293      	cmp	r3, r2
 800922a:	d100      	bne.n	800922e <memset+0xa>
 800922c:	4770      	bx	lr
 800922e:	f803 1b01 	strb.w	r1, [r3], #1
 8009232:	e7f9      	b.n	8009228 <memset+0x4>

08009234 <__errno>:
 8009234:	4b01      	ldr	r3, [pc, #4]	@ (800923c <__errno+0x8>)
 8009236:	6818      	ldr	r0, [r3, #0]
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	20000010 	.word	0x20000010

08009240 <__libc_init_array>:
 8009240:	b570      	push	{r4, r5, r6, lr}
 8009242:	4d0d      	ldr	r5, [pc, #52]	@ (8009278 <__libc_init_array+0x38>)
 8009244:	4c0d      	ldr	r4, [pc, #52]	@ (800927c <__libc_init_array+0x3c>)
 8009246:	1b64      	subs	r4, r4, r5
 8009248:	10a4      	asrs	r4, r4, #2
 800924a:	2600      	movs	r6, #0
 800924c:	42a6      	cmp	r6, r4
 800924e:	d109      	bne.n	8009264 <__libc_init_array+0x24>
 8009250:	4d0b      	ldr	r5, [pc, #44]	@ (8009280 <__libc_init_array+0x40>)
 8009252:	4c0c      	ldr	r4, [pc, #48]	@ (8009284 <__libc_init_array+0x44>)
 8009254:	f000 fa16 	bl	8009684 <_init>
 8009258:	1b64      	subs	r4, r4, r5
 800925a:	10a4      	asrs	r4, r4, #2
 800925c:	2600      	movs	r6, #0
 800925e:	42a6      	cmp	r6, r4
 8009260:	d105      	bne.n	800926e <__libc_init_array+0x2e>
 8009262:	bd70      	pop	{r4, r5, r6, pc}
 8009264:	f855 3b04 	ldr.w	r3, [r5], #4
 8009268:	4798      	blx	r3
 800926a:	3601      	adds	r6, #1
 800926c:	e7ee      	b.n	800924c <__libc_init_array+0xc>
 800926e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009272:	4798      	blx	r3
 8009274:	3601      	adds	r6, #1
 8009276:	e7f2      	b.n	800925e <__libc_init_array+0x1e>
 8009278:	080097c0 	.word	0x080097c0
 800927c:	080097c0 	.word	0x080097c0
 8009280:	080097c0 	.word	0x080097c0
 8009284:	080097c4 	.word	0x080097c4

08009288 <log>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	ed2d 8b02 	vpush	{d8}
 800928e:	ec55 4b10 	vmov	r4, r5, d0
 8009292:	f000 f841 	bl	8009318 <__ieee754_log>
 8009296:	4622      	mov	r2, r4
 8009298:	462b      	mov	r3, r5
 800929a:	4620      	mov	r0, r4
 800929c:	4629      	mov	r1, r5
 800929e:	eeb0 8a40 	vmov.f32	s16, s0
 80092a2:	eef0 8a60 	vmov.f32	s17, s1
 80092a6:	f7f7 fbf1 	bl	8000a8c <__aeabi_dcmpun>
 80092aa:	b998      	cbnz	r0, 80092d4 <log+0x4c>
 80092ac:	2200      	movs	r2, #0
 80092ae:	2300      	movs	r3, #0
 80092b0:	4620      	mov	r0, r4
 80092b2:	4629      	mov	r1, r5
 80092b4:	f7f7 fbe0 	bl	8000a78 <__aeabi_dcmpgt>
 80092b8:	b960      	cbnz	r0, 80092d4 <log+0x4c>
 80092ba:	2200      	movs	r2, #0
 80092bc:	2300      	movs	r3, #0
 80092be:	4620      	mov	r0, r4
 80092c0:	4629      	mov	r1, r5
 80092c2:	f7f7 fbb1 	bl	8000a28 <__aeabi_dcmpeq>
 80092c6:	b160      	cbz	r0, 80092e2 <log+0x5a>
 80092c8:	f7ff ffb4 	bl	8009234 <__errno>
 80092cc:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 80092f8 <log+0x70>
 80092d0:	2322      	movs	r3, #34	@ 0x22
 80092d2:	6003      	str	r3, [r0, #0]
 80092d4:	eeb0 0a48 	vmov.f32	s0, s16
 80092d8:	eef0 0a68 	vmov.f32	s1, s17
 80092dc:	ecbd 8b02 	vpop	{d8}
 80092e0:	bd38      	pop	{r3, r4, r5, pc}
 80092e2:	f7ff ffa7 	bl	8009234 <__errno>
 80092e6:	ecbd 8b02 	vpop	{d8}
 80092ea:	2321      	movs	r3, #33	@ 0x21
 80092ec:	6003      	str	r3, [r0, #0]
 80092ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092f2:	4803      	ldr	r0, [pc, #12]	@ (8009300 <log+0x78>)
 80092f4:	f000 b808 	b.w	8009308 <nan>
 80092f8:	00000000 	.word	0x00000000
 80092fc:	fff00000 	.word	0xfff00000
 8009300:	080097b4 	.word	0x080097b4
 8009304:	00000000 	.word	0x00000000

08009308 <nan>:
 8009308:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009310 <nan+0x8>
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	00000000 	.word	0x00000000
 8009314:	7ff80000 	.word	0x7ff80000

08009318 <__ieee754_log>:
 8009318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	ec51 0b10 	vmov	r0, r1, d0
 8009320:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8009324:	b087      	sub	sp, #28
 8009326:	460d      	mov	r5, r1
 8009328:	da26      	bge.n	8009378 <__ieee754_log+0x60>
 800932a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800932e:	4303      	orrs	r3, r0
 8009330:	4602      	mov	r2, r0
 8009332:	d10a      	bne.n	800934a <__ieee754_log+0x32>
 8009334:	49ce      	ldr	r1, [pc, #824]	@ (8009670 <__ieee754_log+0x358>)
 8009336:	2200      	movs	r2, #0
 8009338:	2300      	movs	r3, #0
 800933a:	2000      	movs	r0, #0
 800933c:	f7f7 fa36 	bl	80007ac <__aeabi_ddiv>
 8009340:	ec41 0b10 	vmov	d0, r0, r1
 8009344:	b007      	add	sp, #28
 8009346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934a:	2900      	cmp	r1, #0
 800934c:	da05      	bge.n	800935a <__ieee754_log+0x42>
 800934e:	460b      	mov	r3, r1
 8009350:	f7f6 ff4a 	bl	80001e8 <__aeabi_dsub>
 8009354:	2200      	movs	r2, #0
 8009356:	2300      	movs	r3, #0
 8009358:	e7f0      	b.n	800933c <__ieee754_log+0x24>
 800935a:	4bc6      	ldr	r3, [pc, #792]	@ (8009674 <__ieee754_log+0x35c>)
 800935c:	2200      	movs	r2, #0
 800935e:	f7f7 f8fb 	bl	8000558 <__aeabi_dmul>
 8009362:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8009366:	460d      	mov	r5, r1
 8009368:	4ac3      	ldr	r2, [pc, #780]	@ (8009678 <__ieee754_log+0x360>)
 800936a:	4295      	cmp	r5, r2
 800936c:	dd06      	ble.n	800937c <__ieee754_log+0x64>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	f7f6 ff3b 	bl	80001ec <__adddf3>
 8009376:	e7e3      	b.n	8009340 <__ieee754_log+0x28>
 8009378:	2300      	movs	r3, #0
 800937a:	e7f5      	b.n	8009368 <__ieee754_log+0x50>
 800937c:	152c      	asrs	r4, r5, #20
 800937e:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8009382:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009386:	441c      	add	r4, r3
 8009388:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800938c:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8009390:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009394:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8009398:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800939c:	ea42 0105 	orr.w	r1, r2, r5
 80093a0:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80093a4:	2200      	movs	r2, #0
 80093a6:	4bb5      	ldr	r3, [pc, #724]	@ (800967c <__ieee754_log+0x364>)
 80093a8:	f7f6 ff1e 	bl	80001e8 <__aeabi_dsub>
 80093ac:	1cab      	adds	r3, r5, #2
 80093ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	4682      	mov	sl, r0
 80093b6:	468b      	mov	fp, r1
 80093b8:	f04f 0200 	mov.w	r2, #0
 80093bc:	dc53      	bgt.n	8009466 <__ieee754_log+0x14e>
 80093be:	2300      	movs	r3, #0
 80093c0:	f7f7 fb32 	bl	8000a28 <__aeabi_dcmpeq>
 80093c4:	b1d0      	cbz	r0, 80093fc <__ieee754_log+0xe4>
 80093c6:	2c00      	cmp	r4, #0
 80093c8:	f000 8120 	beq.w	800960c <__ieee754_log+0x2f4>
 80093cc:	4620      	mov	r0, r4
 80093ce:	f7f7 f859 	bl	8000484 <__aeabi_i2d>
 80093d2:	a391      	add	r3, pc, #580	@ (adr r3, 8009618 <__ieee754_log+0x300>)
 80093d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d8:	4606      	mov	r6, r0
 80093da:	460f      	mov	r7, r1
 80093dc:	f7f7 f8bc 	bl	8000558 <__aeabi_dmul>
 80093e0:	a38f      	add	r3, pc, #572	@ (adr r3, 8009620 <__ieee754_log+0x308>)
 80093e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e6:	4604      	mov	r4, r0
 80093e8:	460d      	mov	r5, r1
 80093ea:	4630      	mov	r0, r6
 80093ec:	4639      	mov	r1, r7
 80093ee:	f7f7 f8b3 	bl	8000558 <__aeabi_dmul>
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	4620      	mov	r0, r4
 80093f8:	4629      	mov	r1, r5
 80093fa:	e7ba      	b.n	8009372 <__ieee754_log+0x5a>
 80093fc:	a38a      	add	r3, pc, #552	@ (adr r3, 8009628 <__ieee754_log+0x310>)
 80093fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009402:	4650      	mov	r0, sl
 8009404:	4659      	mov	r1, fp
 8009406:	f7f7 f8a7 	bl	8000558 <__aeabi_dmul>
 800940a:	4602      	mov	r2, r0
 800940c:	460b      	mov	r3, r1
 800940e:	2000      	movs	r0, #0
 8009410:	499b      	ldr	r1, [pc, #620]	@ (8009680 <__ieee754_log+0x368>)
 8009412:	f7f6 fee9 	bl	80001e8 <__aeabi_dsub>
 8009416:	4652      	mov	r2, sl
 8009418:	4606      	mov	r6, r0
 800941a:	460f      	mov	r7, r1
 800941c:	465b      	mov	r3, fp
 800941e:	4650      	mov	r0, sl
 8009420:	4659      	mov	r1, fp
 8009422:	f7f7 f899 	bl	8000558 <__aeabi_dmul>
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	4630      	mov	r0, r6
 800942c:	4639      	mov	r1, r7
 800942e:	f7f7 f893 	bl	8000558 <__aeabi_dmul>
 8009432:	4606      	mov	r6, r0
 8009434:	460f      	mov	r7, r1
 8009436:	b914      	cbnz	r4, 800943e <__ieee754_log+0x126>
 8009438:	4632      	mov	r2, r6
 800943a:	463b      	mov	r3, r7
 800943c:	e0a0      	b.n	8009580 <__ieee754_log+0x268>
 800943e:	4620      	mov	r0, r4
 8009440:	f7f7 f820 	bl	8000484 <__aeabi_i2d>
 8009444:	a374      	add	r3, pc, #464	@ (adr r3, 8009618 <__ieee754_log+0x300>)
 8009446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944a:	4680      	mov	r8, r0
 800944c:	4689      	mov	r9, r1
 800944e:	f7f7 f883 	bl	8000558 <__aeabi_dmul>
 8009452:	a373      	add	r3, pc, #460	@ (adr r3, 8009620 <__ieee754_log+0x308>)
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	4604      	mov	r4, r0
 800945a:	460d      	mov	r5, r1
 800945c:	4640      	mov	r0, r8
 800945e:	4649      	mov	r1, r9
 8009460:	f7f7 f87a 	bl	8000558 <__aeabi_dmul>
 8009464:	e0a5      	b.n	80095b2 <__ieee754_log+0x29a>
 8009466:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800946a:	f7f6 febf 	bl	80001ec <__adddf3>
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	4650      	mov	r0, sl
 8009474:	4659      	mov	r1, fp
 8009476:	f7f7 f999 	bl	80007ac <__aeabi_ddiv>
 800947a:	e9cd 0100 	strd	r0, r1, [sp]
 800947e:	4620      	mov	r0, r4
 8009480:	f7f7 f800 	bl	8000484 <__aeabi_i2d>
 8009484:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800948c:	4610      	mov	r0, r2
 800948e:	4619      	mov	r1, r3
 8009490:	f7f7 f862 	bl	8000558 <__aeabi_dmul>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800949c:	f7f7 f85c 	bl	8000558 <__aeabi_dmul>
 80094a0:	a363      	add	r3, pc, #396	@ (adr r3, 8009630 <__ieee754_log+0x318>)
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	4680      	mov	r8, r0
 80094a8:	4689      	mov	r9, r1
 80094aa:	f7f7 f855 	bl	8000558 <__aeabi_dmul>
 80094ae:	a362      	add	r3, pc, #392	@ (adr r3, 8009638 <__ieee754_log+0x320>)
 80094b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b4:	f7f6 fe9a 	bl	80001ec <__adddf3>
 80094b8:	4642      	mov	r2, r8
 80094ba:	464b      	mov	r3, r9
 80094bc:	f7f7 f84c 	bl	8000558 <__aeabi_dmul>
 80094c0:	a35f      	add	r3, pc, #380	@ (adr r3, 8009640 <__ieee754_log+0x328>)
 80094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c6:	f7f6 fe91 	bl	80001ec <__adddf3>
 80094ca:	4642      	mov	r2, r8
 80094cc:	464b      	mov	r3, r9
 80094ce:	f7f7 f843 	bl	8000558 <__aeabi_dmul>
 80094d2:	a35d      	add	r3, pc, #372	@ (adr r3, 8009648 <__ieee754_log+0x330>)
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	f7f6 fe88 	bl	80001ec <__adddf3>
 80094dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094e0:	f7f7 f83a 	bl	8000558 <__aeabi_dmul>
 80094e4:	a35a      	add	r3, pc, #360	@ (adr r3, 8009650 <__ieee754_log+0x338>)
 80094e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094ee:	4640      	mov	r0, r8
 80094f0:	4649      	mov	r1, r9
 80094f2:	f7f7 f831 	bl	8000558 <__aeabi_dmul>
 80094f6:	a358      	add	r3, pc, #352	@ (adr r3, 8009658 <__ieee754_log+0x340>)
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	f7f6 fe76 	bl	80001ec <__adddf3>
 8009500:	4642      	mov	r2, r8
 8009502:	464b      	mov	r3, r9
 8009504:	f7f7 f828 	bl	8000558 <__aeabi_dmul>
 8009508:	a355      	add	r3, pc, #340	@ (adr r3, 8009660 <__ieee754_log+0x348>)
 800950a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950e:	f7f6 fe6d 	bl	80001ec <__adddf3>
 8009512:	4642      	mov	r2, r8
 8009514:	464b      	mov	r3, r9
 8009516:	f7f7 f81f 	bl	8000558 <__aeabi_dmul>
 800951a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8009526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800952a:	f7f6 fe5f 	bl	80001ec <__adddf3>
 800952e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8009532:	3551      	adds	r5, #81	@ 0x51
 8009534:	4335      	orrs	r5, r6
 8009536:	2d00      	cmp	r5, #0
 8009538:	4680      	mov	r8, r0
 800953a:	4689      	mov	r9, r1
 800953c:	dd48      	ble.n	80095d0 <__ieee754_log+0x2b8>
 800953e:	4b50      	ldr	r3, [pc, #320]	@ (8009680 <__ieee754_log+0x368>)
 8009540:	2200      	movs	r2, #0
 8009542:	4650      	mov	r0, sl
 8009544:	4659      	mov	r1, fp
 8009546:	f7f7 f807 	bl	8000558 <__aeabi_dmul>
 800954a:	4652      	mov	r2, sl
 800954c:	465b      	mov	r3, fp
 800954e:	f7f7 f803 	bl	8000558 <__aeabi_dmul>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4606      	mov	r6, r0
 8009558:	460f      	mov	r7, r1
 800955a:	4640      	mov	r0, r8
 800955c:	4649      	mov	r1, r9
 800955e:	f7f6 fe45 	bl	80001ec <__adddf3>
 8009562:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009566:	f7f6 fff7 	bl	8000558 <__aeabi_dmul>
 800956a:	4680      	mov	r8, r0
 800956c:	4689      	mov	r9, r1
 800956e:	b964      	cbnz	r4, 800958a <__ieee754_log+0x272>
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	4630      	mov	r0, r6
 8009576:	4639      	mov	r1, r7
 8009578:	f7f6 fe36 	bl	80001e8 <__aeabi_dsub>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	4650      	mov	r0, sl
 8009582:	4659      	mov	r1, fp
 8009584:	f7f6 fe30 	bl	80001e8 <__aeabi_dsub>
 8009588:	e6da      	b.n	8009340 <__ieee754_log+0x28>
 800958a:	a323      	add	r3, pc, #140	@ (adr r3, 8009618 <__ieee754_log+0x300>)
 800958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009594:	f7f6 ffe0 	bl	8000558 <__aeabi_dmul>
 8009598:	a321      	add	r3, pc, #132	@ (adr r3, 8009620 <__ieee754_log+0x308>)
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	4604      	mov	r4, r0
 80095a0:	460d      	mov	r5, r1
 80095a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095a6:	f7f6 ffd7 	bl	8000558 <__aeabi_dmul>
 80095aa:	4642      	mov	r2, r8
 80095ac:	464b      	mov	r3, r9
 80095ae:	f7f6 fe1d 	bl	80001ec <__adddf3>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	4630      	mov	r0, r6
 80095b8:	4639      	mov	r1, r7
 80095ba:	f7f6 fe15 	bl	80001e8 <__aeabi_dsub>
 80095be:	4652      	mov	r2, sl
 80095c0:	465b      	mov	r3, fp
 80095c2:	f7f6 fe11 	bl	80001e8 <__aeabi_dsub>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4620      	mov	r0, r4
 80095cc:	4629      	mov	r1, r5
 80095ce:	e7d9      	b.n	8009584 <__ieee754_log+0x26c>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4650      	mov	r0, sl
 80095d6:	4659      	mov	r1, fp
 80095d8:	f7f6 fe06 	bl	80001e8 <__aeabi_dsub>
 80095dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095e0:	f7f6 ffba 	bl	8000558 <__aeabi_dmul>
 80095e4:	4606      	mov	r6, r0
 80095e6:	460f      	mov	r7, r1
 80095e8:	2c00      	cmp	r4, #0
 80095ea:	f43f af25 	beq.w	8009438 <__ieee754_log+0x120>
 80095ee:	a30a      	add	r3, pc, #40	@ (adr r3, 8009618 <__ieee754_log+0x300>)
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095f8:	f7f6 ffae 	bl	8000558 <__aeabi_dmul>
 80095fc:	a308      	add	r3, pc, #32	@ (adr r3, 8009620 <__ieee754_log+0x308>)
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	4604      	mov	r4, r0
 8009604:	460d      	mov	r5, r1
 8009606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800960a:	e729      	b.n	8009460 <__ieee754_log+0x148>
 800960c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8009668 <__ieee754_log+0x350>
 8009610:	e698      	b.n	8009344 <__ieee754_log+0x2c>
 8009612:	bf00      	nop
 8009614:	f3af 8000 	nop.w
 8009618:	fee00000 	.word	0xfee00000
 800961c:	3fe62e42 	.word	0x3fe62e42
 8009620:	35793c76 	.word	0x35793c76
 8009624:	3dea39ef 	.word	0x3dea39ef
 8009628:	55555555 	.word	0x55555555
 800962c:	3fd55555 	.word	0x3fd55555
 8009630:	df3e5244 	.word	0xdf3e5244
 8009634:	3fc2f112 	.word	0x3fc2f112
 8009638:	96cb03de 	.word	0x96cb03de
 800963c:	3fc74664 	.word	0x3fc74664
 8009640:	94229359 	.word	0x94229359
 8009644:	3fd24924 	.word	0x3fd24924
 8009648:	55555593 	.word	0x55555593
 800964c:	3fe55555 	.word	0x3fe55555
 8009650:	d078c69f 	.word	0xd078c69f
 8009654:	3fc39a09 	.word	0x3fc39a09
 8009658:	1d8e78af 	.word	0x1d8e78af
 800965c:	3fcc71c5 	.word	0x3fcc71c5
 8009660:	9997fa04 	.word	0x9997fa04
 8009664:	3fd99999 	.word	0x3fd99999
	...
 8009670:	c3500000 	.word	0xc3500000
 8009674:	43500000 	.word	0x43500000
 8009678:	7fefffff 	.word	0x7fefffff
 800967c:	3ff00000 	.word	0x3ff00000
 8009680:	3fe00000 	.word	0x3fe00000

08009684 <_init>:
 8009684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009686:	bf00      	nop
 8009688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800968a:	bc08      	pop	{r3}
 800968c:	469e      	mov	lr, r3
 800968e:	4770      	bx	lr

08009690 <_fini>:
 8009690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009692:	bf00      	nop
 8009694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009696:	bc08      	pop	{r3}
 8009698:	469e      	mov	lr, r3
 800969a:	4770      	bx	lr
