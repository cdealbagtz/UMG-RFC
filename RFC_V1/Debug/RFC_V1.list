
RFC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  08010a58  08010a58  00011a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080112e8  080112e8  000131fc  2**0
                  CONTENTS
  4 .ARM          00000008  080112e8  080112e8  000122e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080112f0  080112f0  000131fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080112f0  080112f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080112f4  080112f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080112f8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b08  200001fc  080114f4  000131fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d04  080114f4  00013d04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020903  00000000  00000000  0001322c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000524e  00000000  00000000  00033b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f28  00000000  00000000  00038d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001848  00000000  00000000  0003aca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eec6  00000000  00000000  0003c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a4c0  00000000  00000000  0005b3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac66d  00000000  00000000  00085876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131ee3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096c8  00000000  00000000  00131f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0013b5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010a3c 	.word	0x08010a3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	08010a3c 	.word	0x08010a3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <Mount_SD>:




void Mount_SD (const TCHAR* path)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	4805      	ldr	r0, [pc, #20]	@ (8001018 <Mount_SD+0x24>)
 8001002:	f008 f853 	bl	80090ac <f_mount>
 8001006:	4603      	mov	r3, r0
 8001008:	461a      	mov	r2, r3
 800100a:	4b04      	ldr	r3, [pc, #16]	@ (800101c <Mount_SD+0x28>)
 800100c:	701a      	strb	r2, [r3, #0]
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000218 	.word	0x20000218
 800101c:	20000698 	.word	0x20000698

08001020 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001028:	4939      	ldr	r1, [pc, #228]	@ (8001110 <Create_File+0xf0>)
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f008 fb6c 	bl	8009708 <f_stat>
 8001030:	4603      	mov	r3, r0
 8001032:	461a      	mov	r2, r3
 8001034:	4b37      	ldr	r3, [pc, #220]	@ (8001114 <Create_File+0xf4>)
 8001036:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001038:	4b36      	ldr	r3, [pc, #216]	@ (8001114 <Create_File+0xf4>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10e      	bne.n	800105e <Create_File+0x3e>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001040:	2064      	movs	r0, #100	@ 0x64
 8001042:	f00a ffa3 	bl	800bf8c <pvPortMalloc>
 8001046:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4933      	ldr	r1, [pc, #204]	@ (8001118 <Create_File+0xf8>)
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f00c f8b9 	bl	800d1c4 <siprintf>
		vPortFree(buf);
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f00b f868 	bl	800c128 <vPortFree>
	    return fresult;
 8001058:	4b2e      	ldr	r3, [pc, #184]	@ (8001114 <Create_File+0xf4>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	e053      	b.n	8001106 <Create_File+0xe6>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 800105e:	220b      	movs	r2, #11
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	482e      	ldr	r0, [pc, #184]	@ (800111c <Create_File+0xfc>)
 8001064:	f008 f886 	bl	8009174 <f_open>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <Create_File+0xf4>)
 800106e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001070:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <Create_File+0xf4>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d011      	beq.n	800109c <Create_File+0x7c>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001078:	2064      	movs	r0, #100	@ 0x64
 800107a:	f00a ff87 	bl	800bf8c <pvPortMalloc>
 800107e:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8001080:	4b24      	ldr	r3, [pc, #144]	@ (8001114 <Create_File+0xf4>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4925      	ldr	r1, [pc, #148]	@ (8001120 <Create_File+0x100>)
 800108a:	6938      	ldr	r0, [r7, #16]
 800108c:	f00c f89a 	bl	800d1c4 <siprintf>
			vPortFree(buf);
 8001090:	6938      	ldr	r0, [r7, #16]
 8001092:	f00b f849 	bl	800c128 <vPortFree>
		    return fresult;
 8001096:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <Create_File+0xf4>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	e034      	b.n	8001106 <Create_File+0xe6>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800109c:	2064      	movs	r0, #100	@ 0x64
 800109e:	f00a ff75 	bl	800bf8c <pvPortMalloc>
 80010a2:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	491f      	ldr	r1, [pc, #124]	@ (8001124 <Create_File+0x104>)
 80010a8:	69f8      	ldr	r0, [r7, #28]
 80010aa:	f00c f88b 	bl	800d1c4 <siprintf>
			vPortFree(buf);
 80010ae:	69f8      	ldr	r0, [r7, #28]
 80010b0:	f00b f83a 	bl	800c128 <vPortFree>
		}

		fresult = f_close(&fil);
 80010b4:	4819      	ldr	r0, [pc, #100]	@ (800111c <Create_File+0xfc>)
 80010b6:	f008 faa7 	bl	8009608 <f_close>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <Create_File+0xf4>)
 80010c0:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80010c2:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <Create_File+0xf4>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00f      	beq.n	80010ea <Create_File+0xca>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80010ca:	2064      	movs	r0, #100	@ 0x64
 80010cc:	f00a ff5e 	bl	800bf8c <pvPortMalloc>
 80010d0:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <Create_File+0xf4>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4913      	ldr	r1, [pc, #76]	@ (8001128 <Create_File+0x108>)
 80010dc:	6978      	ldr	r0, [r7, #20]
 80010de:	f00c f871 	bl	800d1c4 <siprintf>
			vPortFree(buf);
 80010e2:	6978      	ldr	r0, [r7, #20]
 80010e4:	f00b f820 	bl	800c128 <vPortFree>
 80010e8:	e00b      	b.n	8001102 <Create_File+0xe2>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80010ea:	2064      	movs	r0, #100	@ 0x64
 80010ec:	f00a ff4e 	bl	800bf8c <pvPortMalloc>
 80010f0:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	490d      	ldr	r1, [pc, #52]	@ (800112c <Create_File+0x10c>)
 80010f6:	69b8      	ldr	r0, [r7, #24]
 80010f8:	f00c f864 	bl	800d1c4 <siprintf>
			vPortFree(buf);
 80010fc:	69b8      	ldr	r0, [r7, #24]
 80010fe:	f00b f813 	bl	800c128 <vPortFree>
		}
	}
    return fresult;
 8001102:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <Create_File+0xf4>)
 8001104:	781b      	ldrb	r3, [r3, #0]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3720      	adds	r7, #32
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000680 	.word	0x20000680
 8001114:	20000698 	.word	0x20000698
 8001118:	08010c04 	.word	0x08010c04
 800111c:	20000450 	.word	0x20000450
 8001120:	08010c3c 	.word	0x08010c3c
 8001124:	08010c64 	.word	0x08010c64
 8001128:	08010ca4 	.word	0x08010ca4
 800112c:	08010be4 	.word	0x08010be4

08001130 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f008 fb25 	bl	8009788 <f_mkdir>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <Create_Dir+0x48>)
 8001144:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001146:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <Create_Dir+0x48>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d107      	bne.n	800115e <Create_Dir+0x2e>
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 800114e:	2064      	movs	r0, #100	@ 0x64
 8001150:	f00a ff1c 	bl	800bf8c <pvPortMalloc>
 8001154:	60b8      	str	r0, [r7, #8]

    	vPortFree(buf);
 8001156:	68b8      	ldr	r0, [r7, #8]
 8001158:	f00a ffe6 	bl	800c128 <vPortFree>
 800115c:	e006      	b.n	800116c <Create_Dir+0x3c>
    }
    else
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 800115e:	2064      	movs	r0, #100	@ 0x64
 8001160:	f00a ff14 	bl	800bf8c <pvPortMalloc>
 8001164:	60f8      	str	r0, [r7, #12]
    	vPortFree(buf);
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f00a ffde 	bl	800c128 <vPortFree>
    }
    return fresult;
 800116c:	4b02      	ldr	r3, [pc, #8]	@ (8001178 <Create_Dir+0x48>)
 800116e:	781b      	ldrb	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000698 	.word	0x20000698

0800117c <Open_Dir>:



FRESULT Open_Dir (char *name)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	fresult = f_chdir(name);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f008 fa6e 	bl	8009666 <f_chdir>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	4b04      	ldr	r3, [pc, #16]	@ (80011a0 <Open_Dir+0x24>)
 8001190:	701a      	strb	r2, [r3, #0]

    return fresult;
 8001192:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <Open_Dir+0x24>)
 8001194:	781b      	ldrb	r3, [r3, #0]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000698 	.word	0x20000698

080011a4 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2101      	movs	r1, #1
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <SELECT+0x14>)
 80011ae:	f003 fb2d 	bl	800480c <HAL_GPIO_WritePin>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020400 	.word	0x40020400

080011bc <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2101      	movs	r1, #1
 80011c4:	4802      	ldr	r0, [pc, #8]	@ (80011d0 <DESELECT+0x14>)
 80011c6:	f003 fb21 	bl	800480c <HAL_GPIO_WritePin>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40020400 	.word	0x40020400

080011d4 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80011de:	bf00      	nop
 80011e0:	4808      	ldr	r0, [pc, #32]	@ (8001204 <SPI_TxByte+0x30>)
 80011e2:	f004 fd6f 	bl	8005cc4 <HAL_SPI_GetState>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d1f9      	bne.n	80011e0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80011ec:	1df9      	adds	r1, r7, #7
 80011ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f2:	2201      	movs	r2, #1
 80011f4:	4803      	ldr	r0, [pc, #12]	@ (8001204 <SPI_TxByte+0x30>)
 80011f6:	f004 f97a 	bl	80054ee <HAL_SPI_Transmit>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000a34 	.word	0x20000a34

08001208 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800120e:	23ff      	movs	r3, #255	@ 0xff
 8001210:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001216:	bf00      	nop
 8001218:	4809      	ldr	r0, [pc, #36]	@ (8001240 <SPI_RxByte+0x38>)
 800121a:	f004 fd53 	bl	8005cc4 <HAL_SPI_GetState>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	d1f9      	bne.n	8001218 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8001224:	1dba      	adds	r2, r7, #6
 8001226:	1df9      	adds	r1, r7, #7
 8001228:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2301      	movs	r3, #1
 8001230:	4803      	ldr	r0, [pc, #12]	@ (8001240 <SPI_RxByte+0x38>)
 8001232:	f004 faa0 	bl	8005776 <HAL_SPI_TransmitReceive>
  
  return data;
 8001236:	79bb      	ldrb	r3, [r7, #6]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000a34 	.word	0x20000a34

08001244 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800124c:	f7ff ffdc 	bl	8001208 <SPI_RxByte>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	701a      	strb	r2, [r3, #0]
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <SD_ReadyWait+0x34>)
 8001268:	2232      	movs	r2, #50	@ 0x32
 800126a:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 800126c:	f7ff ffcc 	bl	8001208 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8001270:	f7ff ffca 	bl	8001208 <SPI_RxByte>
 8001274:	4603      	mov	r3, r0
 8001276:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2bff      	cmp	r3, #255	@ 0xff
 800127c:	d004      	beq.n	8001288 <SD_ReadyWait+0x28>
 800127e:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <SD_ReadyWait+0x34>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1f3      	bne.n	8001270 <SD_ReadyWait+0x10>
  
  return res;
 8001288:	79fb      	ldrb	r3, [r7, #7]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000d82 	.word	0x20000d82

08001298 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800129e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80012a2:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80012a4:	f7ff ff8a 	bl	80011bc <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	e005      	b.n	80012ba <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80012ae:	20ff      	movs	r0, #255	@ 0xff
 80012b0:	f7ff ff90 	bl	80011d4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	3301      	adds	r3, #1
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2b09      	cmp	r3, #9
 80012be:	ddf6      	ble.n	80012ae <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80012c0:	f7ff ff70 	bl	80011a4 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80012c4:	2340      	movs	r3, #64	@ 0x40
 80012c6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80012d8:	2395      	movs	r3, #149	@ 0x95
 80012da:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	e009      	b.n	80012f6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80012e2:	1d3a      	adds	r2, r7, #4
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff72 	bl	80011d4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b05      	cmp	r3, #5
 80012fa:	ddf2      	ble.n	80012e2 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80012fc:	e002      	b.n	8001304 <SD_PowerOn+0x6c>
  {
    Count--;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3b01      	subs	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001304:	f7ff ff80 	bl	8001208 <SPI_RxByte>
 8001308:	4603      	mov	r3, r0
 800130a:	2b01      	cmp	r3, #1
 800130c:	d002      	beq.n	8001314 <SD_PowerOn+0x7c>
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f4      	bne.n	80012fe <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8001314:	f7ff ff52 	bl	80011bc <DESELECT>
  SPI_TxByte(0XFF);
 8001318:	20ff      	movs	r0, #255	@ 0xff
 800131a:	f7ff ff5b 	bl	80011d4 <SPI_TxByte>
  
  PowerFlag = 1;
 800131e:	4b03      	ldr	r3, [pc, #12]	@ (800132c <SD_PowerOn+0x94>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
}
 8001324:	bf00      	nop
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000069a 	.word	0x2000069a

08001330 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001334:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <SD_PowerOff+0x14>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	2000069a 	.word	0x2000069a

08001348 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800134c:	4b03      	ldr	r3, [pc, #12]	@ (800135c <SD_CheckPower+0x14>)
 800134e:	781b      	ldrb	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000069a 	.word	0x2000069a

08001360 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 800136a:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <SD_RxDataBlock+0x68>)
 800136c:	220a      	movs	r2, #10
 800136e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001370:	f7ff ff4a 	bl	8001208 <SPI_RxByte>
 8001374:	4603      	mov	r3, r0
 8001376:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	2bff      	cmp	r3, #255	@ 0xff
 800137c:	d104      	bne.n	8001388 <SD_RxDataBlock+0x28>
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <SD_RxDataBlock+0x68>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1f3      	bne.n	8001370 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2bfe      	cmp	r3, #254	@ 0xfe
 800138c:	d001      	beq.n	8001392 <SD_RxDataBlock+0x32>
    return FALSE;
 800138e:	2300      	movs	r3, #0
 8001390:	e016      	b.n	80013c0 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff53 	bl	8001244 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	1c5a      	adds	r2, r3, #1
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff4d 	bl	8001244 <SPI_RxBytePtr>
  } while(btr -= 2);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	3b02      	subs	r3, #2
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1ed      	bne.n	8001392 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80013b6:	f7ff ff27 	bl	8001208 <SPI_RxByte>
  SPI_RxByte();
 80013ba:	f7ff ff25 	bl	8001208 <SPI_RxByte>
  
  return TRUE;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000d81 	.word	0x20000d81

080013cc <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80013dc:	f7ff ff40 	bl	8001260 <SD_ReadyWait>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2bff      	cmp	r3, #255	@ 0xff
 80013e4:	d001      	beq.n	80013ea <SD_TxDataBlock+0x1e>
    return FALSE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e040      	b.n	800146c <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fef1 	bl	80011d4 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	2bfd      	cmp	r3, #253	@ 0xfd
 80013f6:	d031      	beq.n	800145c <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	607a      	str	r2, [r7, #4]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fee5 	bl	80011d4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fede 	bl	80011d4 <SPI_TxByte>
    } while (--wc);
 8001418:	7bbb      	ldrb	r3, [r7, #14]
 800141a:	3b01      	subs	r3, #1
 800141c:	73bb      	strb	r3, [r7, #14]
 800141e:	7bbb      	ldrb	r3, [r7, #14]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1eb      	bne.n	80013fc <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001424:	f7ff fef0 	bl	8001208 <SPI_RxByte>
    SPI_RxByte();
 8001428:	f7ff feee 	bl	8001208 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 800142c:	e00b      	b.n	8001446 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800142e:	f7ff feeb 	bl	8001208 <SPI_RxByte>
 8001432:	4603      	mov	r3, r0
 8001434:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	f003 031f 	and.w	r3, r3, #31
 800143c:	2b05      	cmp	r3, #5
 800143e:	d006      	beq.n	800144e <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001440:	7b7b      	ldrb	r3, [r7, #13]
 8001442:	3301      	adds	r3, #1
 8001444:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001446:	7b7b      	ldrb	r3, [r7, #13]
 8001448:	2b40      	cmp	r3, #64	@ 0x40
 800144a:	d9f0      	bls.n	800142e <SD_TxDataBlock+0x62>
 800144c:	e000      	b.n	8001450 <SD_TxDataBlock+0x84>
        break;
 800144e:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001450:	bf00      	nop
 8001452:	f7ff fed9 	bl	8001208 <SPI_RxByte>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0fa      	beq.n	8001452 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	f003 031f 	and.w	r3, r3, #31
 8001462:	2b05      	cmp	r3, #5
 8001464:	d101      	bne.n	800146a <SD_TxDataBlock+0x9e>
    return TRUE;
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001480:	f7ff feee 	bl	8001260 <SD_ReadyWait>
 8001484:	4603      	mov	r3, r0
 8001486:	2bff      	cmp	r3, #255	@ 0xff
 8001488:	d001      	beq.n	800148e <SD_SendCmd+0x1a>
    return 0xFF;
 800148a:	23ff      	movs	r3, #255	@ 0xff
 800148c:	e040      	b.n	8001510 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fe9f 	bl	80011d4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	0e1b      	lsrs	r3, r3, #24
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fe99 	bl	80011d4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	0c1b      	lsrs	r3, r3, #16
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fe93 	bl	80011d4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe8d 	bl	80011d4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fe88 	bl	80011d4 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	2b40      	cmp	r3, #64	@ 0x40
 80014cc:	d101      	bne.n	80014d2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80014ce:	2395      	movs	r3, #149	@ 0x95
 80014d0:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b48      	cmp	r3, #72	@ 0x48
 80014d6:	d101      	bne.n	80014dc <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80014d8:	2387      	movs	r3, #135	@ 0x87
 80014da:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fe78 	bl	80011d4 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2b4c      	cmp	r3, #76	@ 0x4c
 80014e8:	d101      	bne.n	80014ee <SD_SendCmd+0x7a>
    SPI_RxByte();
 80014ea:	f7ff fe8d 	bl	8001208 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80014ee:	230a      	movs	r3, #10
 80014f0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80014f2:	f7ff fe89 	bl	8001208 <SPI_RxByte>
 80014f6:	4603      	mov	r3, r0
 80014f8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80014fa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	da05      	bge.n	800150e <SD_SendCmd+0x9a>
 8001502:	7bbb      	ldrb	r3, [r7, #14]
 8001504:	3b01      	subs	r3, #1
 8001506:	73bb      	strb	r3, [r7, #14]
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f1      	bne.n	80014f2 <SD_SendCmd+0x7e>
  
  return res;
 800150e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001528:	2301      	movs	r3, #1
 800152a:	e0d5      	b.n	80016d8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 800152c:	4b6c      	ldr	r3, [pc, #432]	@ (80016e0 <SD_disk_initialize+0x1c8>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <SD_disk_initialize+0x2a>
    return Stat;        
 800153a:	4b69      	ldr	r3, [pc, #420]	@ (80016e0 <SD_disk_initialize+0x1c8>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	e0ca      	b.n	80016d8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001542:	f7ff fea9 	bl	8001298 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001546:	f7ff fe2d 	bl	80011a4 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800154e:	2100      	movs	r1, #0
 8001550:	2040      	movs	r0, #64	@ 0x40
 8001552:	f7ff ff8f 	bl	8001474 <SD_SendCmd>
 8001556:	4603      	mov	r3, r0
 8001558:	2b01      	cmp	r3, #1
 800155a:	f040 80a5 	bne.w	80016a8 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800155e:	4b61      	ldr	r3, [pc, #388]	@ (80016e4 <SD_disk_initialize+0x1cc>)
 8001560:	2264      	movs	r2, #100	@ 0x64
 8001562:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001564:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001568:	2048      	movs	r0, #72	@ 0x48
 800156a:	f7ff ff83 	bl	8001474 <SD_SendCmd>
 800156e:	4603      	mov	r3, r0
 8001570:	2b01      	cmp	r3, #1
 8001572:	d158      	bne.n	8001626 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001574:	2300      	movs	r3, #0
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e00c      	b.n	8001594 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800157a:	7bfc      	ldrb	r4, [r7, #15]
 800157c:	f7ff fe44 	bl	8001208 <SPI_RxByte>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	f104 0310 	add.w	r3, r4, #16
 8001588:	443b      	add	r3, r7
 800158a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	3301      	adds	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d9ef      	bls.n	800157a <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 800159a:	7abb      	ldrb	r3, [r7, #10]
 800159c:	2b01      	cmp	r3, #1
 800159e:	f040 8083 	bne.w	80016a8 <SD_disk_initialize+0x190>
 80015a2:	7afb      	ldrb	r3, [r7, #11]
 80015a4:	2baa      	cmp	r3, #170	@ 0xaa
 80015a6:	d17f      	bne.n	80016a8 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80015a8:	2100      	movs	r1, #0
 80015aa:	2077      	movs	r0, #119	@ 0x77
 80015ac:	f7ff ff62 	bl	8001474 <SD_SendCmd>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d807      	bhi.n	80015c6 <SD_disk_initialize+0xae>
 80015b6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80015ba:	2069      	movs	r0, #105	@ 0x69
 80015bc:	f7ff ff5a 	bl	8001474 <SD_SendCmd>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d005      	beq.n	80015d2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80015c6:	4b47      	ldr	r3, [pc, #284]	@ (80016e4 <SD_disk_initialize+0x1cc>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1eb      	bne.n	80015a8 <SD_disk_initialize+0x90>
 80015d0:	e000      	b.n	80015d4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80015d2:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80015d4:	4b43      	ldr	r3, [pc, #268]	@ (80016e4 <SD_disk_initialize+0x1cc>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d064      	beq.n	80016a8 <SD_disk_initialize+0x190>
 80015de:	2100      	movs	r1, #0
 80015e0:	207a      	movs	r0, #122	@ 0x7a
 80015e2:	f7ff ff47 	bl	8001474 <SD_SendCmd>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d15d      	bne.n	80016a8 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e00c      	b.n	800160c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80015f2:	7bfc      	ldrb	r4, [r7, #15]
 80015f4:	f7ff fe08 	bl	8001208 <SPI_RxByte>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	f104 0310 	add.w	r3, r4, #16
 8001600:	443b      	add	r3, r7
 8001602:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	3301      	adds	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b03      	cmp	r3, #3
 8001610:	d9ef      	bls.n	80015f2 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001612:	7a3b      	ldrb	r3, [r7, #8]
 8001614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <SD_disk_initialize+0x108>
 800161c:	2306      	movs	r3, #6
 800161e:	e000      	b.n	8001622 <SD_disk_initialize+0x10a>
 8001620:	2302      	movs	r3, #2
 8001622:	73bb      	strb	r3, [r7, #14]
 8001624:	e040      	b.n	80016a8 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001626:	2100      	movs	r1, #0
 8001628:	2077      	movs	r0, #119	@ 0x77
 800162a:	f7ff ff23 	bl	8001474 <SD_SendCmd>
 800162e:	4603      	mov	r3, r0
 8001630:	2b01      	cmp	r3, #1
 8001632:	d808      	bhi.n	8001646 <SD_disk_initialize+0x12e>
 8001634:	2100      	movs	r1, #0
 8001636:	2069      	movs	r0, #105	@ 0x69
 8001638:	f7ff ff1c 	bl	8001474 <SD_SendCmd>
 800163c:	4603      	mov	r3, r0
 800163e:	2b01      	cmp	r3, #1
 8001640:	d801      	bhi.n	8001646 <SD_disk_initialize+0x12e>
 8001642:	2302      	movs	r3, #2
 8001644:	e000      	b.n	8001648 <SD_disk_initialize+0x130>
 8001646:	2301      	movs	r3, #1
 8001648:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 800164a:	7bbb      	ldrb	r3, [r7, #14]
 800164c:	2b02      	cmp	r3, #2
 800164e:	d10e      	bne.n	800166e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001650:	2100      	movs	r1, #0
 8001652:	2077      	movs	r0, #119	@ 0x77
 8001654:	f7ff ff0e 	bl	8001474 <SD_SendCmd>
 8001658:	4603      	mov	r3, r0
 800165a:	2b01      	cmp	r3, #1
 800165c:	d80e      	bhi.n	800167c <SD_disk_initialize+0x164>
 800165e:	2100      	movs	r1, #0
 8001660:	2069      	movs	r0, #105	@ 0x69
 8001662:	f7ff ff07 	bl	8001474 <SD_SendCmd>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d107      	bne.n	800167c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800166c:	e00d      	b.n	800168a <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800166e:	2100      	movs	r1, #0
 8001670:	2041      	movs	r0, #65	@ 0x41
 8001672:	f7ff feff 	bl	8001474 <SD_SendCmd>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800167c:	4b19      	ldr	r3, [pc, #100]	@ (80016e4 <SD_disk_initialize+0x1cc>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1e1      	bne.n	800164a <SD_disk_initialize+0x132>
 8001686:	e000      	b.n	800168a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001688:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 800168a:	4b16      	ldr	r3, [pc, #88]	@ (80016e4 <SD_disk_initialize+0x1cc>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d007      	beq.n	80016a4 <SD_disk_initialize+0x18c>
 8001694:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001698:	2050      	movs	r0, #80	@ 0x50
 800169a:	f7ff feeb 	bl	8001474 <SD_SendCmd>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80016a8:	4a0f      	ldr	r2, [pc, #60]	@ (80016e8 <SD_disk_initialize+0x1d0>)
 80016aa:	7bbb      	ldrb	r3, [r7, #14]
 80016ac:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80016ae:	f7ff fd85 	bl	80011bc <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80016b2:	f7ff fda9 	bl	8001208 <SPI_RxByte>
  
  if (type) 
 80016b6:	7bbb      	ldrb	r3, [r7, #14]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <SD_disk_initialize+0x1c8>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <SD_disk_initialize+0x1c8>)
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	e001      	b.n	80016d2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80016ce:	f7ff fe2f 	bl	8001330 <SD_PowerOff>
  }
  
  return Stat;
 80016d2:	4b03      	ldr	r3, [pc, #12]	@ (80016e0 <SD_disk_initialize+0x1c8>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd90      	pop	{r4, r7, pc}
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000d81 	.word	0x20000d81
 80016e8:	20000699 	.word	0x20000699

080016ec <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80016fc:	2301      	movs	r3, #1
 80016fe:	e002      	b.n	8001706 <SD_disk_status+0x1a>
  
  return Stat;
 8001700:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <SD_disk_status+0x28>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b2db      	uxtb	r3, r3
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000000 	.word	0x20000000

08001718 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	4603      	mov	r3, r0
 8001726:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <SD_disk_read+0x1c>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <SD_disk_read+0x20>
    return RES_PARERR;
 8001734:	2304      	movs	r3, #4
 8001736:	e051      	b.n	80017dc <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001738:	4b2a      	ldr	r3, [pc, #168]	@ (80017e4 <SD_disk_read+0xcc>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001746:	2303      	movs	r3, #3
 8001748:	e048      	b.n	80017dc <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 800174a:	4b27      	ldr	r3, [pc, #156]	@ (80017e8 <SD_disk_read+0xd0>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	025b      	lsls	r3, r3, #9
 800175a:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800175c:	f7ff fd22 	bl	80011a4 <SELECT>
  
  if (count == 1) 
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d111      	bne.n	800178a <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	2051      	movs	r0, #81	@ 0x51
 800176a:	f7ff fe83 	bl	8001474 <SD_SendCmd>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d129      	bne.n	80017c8 <SD_disk_read+0xb0>
 8001774:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001778:	68b8      	ldr	r0, [r7, #8]
 800177a:	f7ff fdf1 	bl	8001360 <SD_RxDataBlock>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d021      	beq.n	80017c8 <SD_disk_read+0xb0>
      count = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	e01e      	b.n	80017c8 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	2052      	movs	r0, #82	@ 0x52
 800178e:	f7ff fe71 	bl	8001474 <SD_SendCmd>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d117      	bne.n	80017c8 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001798:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800179c:	68b8      	ldr	r0, [r7, #8]
 800179e:	f7ff fddf 	bl	8001360 <SD_RxDataBlock>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00a      	beq.n	80017be <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80017ae:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1ed      	bne.n	8001798 <SD_disk_read+0x80>
 80017bc:	e000      	b.n	80017c0 <SD_disk_read+0xa8>
          break;
 80017be:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80017c0:	2100      	movs	r1, #0
 80017c2:	204c      	movs	r0, #76	@ 0x4c
 80017c4:	f7ff fe56 	bl	8001474 <SD_SendCmd>
    }
  }
  
  DESELECT();
 80017c8:	f7ff fcf8 	bl	80011bc <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80017cc:	f7ff fd1c 	bl	8001208 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	2300      	moveq	r3, #0
 80017da:	b2db      	uxtb	r3, r3
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000699 	.word	0x20000699

080017ec <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	4603      	mov	r3, r0
 80017fa:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <SD_disk_write+0x1c>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <SD_disk_write+0x20>
    return RES_PARERR;
 8001808:	2304      	movs	r3, #4
 800180a:	e06b      	b.n	80018e4 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 800180c:	4b37      	ldr	r3, [pc, #220]	@ (80018ec <SD_disk_write+0x100>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SD_disk_write+0x32>
    return RES_NOTRDY;
 800181a:	2303      	movs	r3, #3
 800181c:	e062      	b.n	80018e4 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 800181e:	4b33      	ldr	r3, [pc, #204]	@ (80018ec <SD_disk_write+0x100>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <SD_disk_write+0x44>
    return RES_WRPRT;
 800182c:	2302      	movs	r3, #2
 800182e:	e059      	b.n	80018e4 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001830:	4b2f      	ldr	r3, [pc, #188]	@ (80018f0 <SD_disk_write+0x104>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	025b      	lsls	r3, r3, #9
 8001840:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001842:	f7ff fcaf 	bl	80011a4 <SELECT>
  
  if (count == 1) 
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d110      	bne.n	800186e <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	2058      	movs	r0, #88	@ 0x58
 8001850:	f7ff fe10 	bl	8001474 <SD_SendCmd>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d13a      	bne.n	80018d0 <SD_disk_write+0xe4>
 800185a:	21fe      	movs	r1, #254	@ 0xfe
 800185c:	68b8      	ldr	r0, [r7, #8]
 800185e:	f7ff fdb5 	bl	80013cc <SD_TxDataBlock>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d033      	beq.n	80018d0 <SD_disk_write+0xe4>
      count = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	e030      	b.n	80018d0 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 800186e:	4b20      	ldr	r3, [pc, #128]	@ (80018f0 <SD_disk_write+0x104>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800187a:	2100      	movs	r1, #0
 800187c:	2077      	movs	r0, #119	@ 0x77
 800187e:	f7ff fdf9 	bl	8001474 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001882:	6839      	ldr	r1, [r7, #0]
 8001884:	2057      	movs	r0, #87	@ 0x57
 8001886:	f7ff fdf5 	bl	8001474 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	2059      	movs	r0, #89	@ 0x59
 800188e:	f7ff fdf1 	bl	8001474 <SD_SendCmd>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d11b      	bne.n	80018d0 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001898:	21fc      	movs	r1, #252	@ 0xfc
 800189a:	68b8      	ldr	r0, [r7, #8]
 800189c:	f7ff fd96 	bl	80013cc <SD_TxDataBlock>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00a      	beq.n	80018bc <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80018ac:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1ee      	bne.n	8001898 <SD_disk_write+0xac>
 80018ba:	e000      	b.n	80018be <SD_disk_write+0xd2>
          break;
 80018bc:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80018be:	21fd      	movs	r1, #253	@ 0xfd
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7ff fd83 	bl	80013cc <SD_TxDataBlock>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <SD_disk_write+0xe4>
      {        
        count = 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80018d0:	f7ff fc74 	bl	80011bc <DESELECT>
  SPI_RxByte();
 80018d4:	f7ff fc98 	bl	8001208 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	bf14      	ite	ne
 80018de:	2301      	movne	r3, #1
 80018e0:	2300      	moveq	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000699 	.word	0x20000699

080018f4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b08b      	sub	sp, #44	@ 0x2c
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	603a      	str	r2, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	460b      	mov	r3, r1
 8001902:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800190e:	2304      	movs	r3, #4
 8001910:	e119      	b.n	8001b46 <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 8001918:	79bb      	ldrb	r3, [r7, #6]
 800191a:	2b05      	cmp	r3, #5
 800191c:	d129      	bne.n	8001972 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d017      	beq.n	8001956 <SD_disk_ioctl+0x62>
 8001926:	2b02      	cmp	r3, #2
 8001928:	dc1f      	bgt.n	800196a <SD_disk_ioctl+0x76>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <SD_disk_ioctl+0x40>
 800192e:	2b01      	cmp	r3, #1
 8001930:	d00b      	beq.n	800194a <SD_disk_ioctl+0x56>
 8001932:	e01a      	b.n	800196a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001934:	f7ff fd08 	bl	8001348 <SD_CheckPower>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800193e:	f7ff fcf7 	bl	8001330 <SD_PowerOff>
      res = RES_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001948:	e0fb      	b.n	8001b42 <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 800194a:	f7ff fca5 	bl	8001298 <SD_PowerOn>
      res = RES_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001954:	e0f5      	b.n	8001b42 <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	1c5c      	adds	r4, r3, #1
 800195a:	f7ff fcf5 	bl	8001348 <SD_CheckPower>
 800195e:	4603      	mov	r3, r0
 8001960:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001962:	2300      	movs	r3, #0
 8001964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001968:	e0eb      	b.n	8001b42 <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 800196a:	2304      	movs	r3, #4
 800196c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001970:	e0e7      	b.n	8001b42 <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001972:	4b77      	ldr	r3, [pc, #476]	@ (8001b50 <SD_disk_ioctl+0x25c>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001980:	2303      	movs	r3, #3
 8001982:	e0e0      	b.n	8001b46 <SD_disk_ioctl+0x252>
    
    SELECT();
 8001984:	f7ff fc0e 	bl	80011a4 <SELECT>
    
    switch (ctrl) 
 8001988:	79bb      	ldrb	r3, [r7, #6]
 800198a:	2b0d      	cmp	r3, #13
 800198c:	f200 80ca 	bhi.w	8001b24 <SD_disk_ioctl+0x230>
 8001990:	a201      	add	r2, pc, #4	@ (adr r2, 8001998 <SD_disk_ioctl+0xa4>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	08001a8f 	.word	0x08001a8f
 800199c:	080019d1 	.word	0x080019d1
 80019a0:	08001a7f 	.word	0x08001a7f
 80019a4:	08001b25 	.word	0x08001b25
 80019a8:	08001b25 	.word	0x08001b25
 80019ac:	08001b25 	.word	0x08001b25
 80019b0:	08001b25 	.word	0x08001b25
 80019b4:	08001b25 	.word	0x08001b25
 80019b8:	08001b25 	.word	0x08001b25
 80019bc:	08001b25 	.word	0x08001b25
 80019c0:	08001b25 	.word	0x08001b25
 80019c4:	08001aa1 	.word	0x08001aa1
 80019c8:	08001ac5 	.word	0x08001ac5
 80019cc:	08001ae9 	.word	0x08001ae9
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80019d0:	2100      	movs	r1, #0
 80019d2:	2049      	movs	r0, #73	@ 0x49
 80019d4:	f7ff fd4e 	bl	8001474 <SD_SendCmd>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f040 80a6 	bne.w	8001b2c <SD_disk_ioctl+0x238>
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	2110      	movs	r1, #16
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fcba 	bl	8001360 <SD_RxDataBlock>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 809c 	beq.w	8001b2c <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 80019f4:	7b3b      	ldrb	r3, [r7, #12]
 80019f6:	099b      	lsrs	r3, r3, #6
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d10d      	bne.n	8001a1a <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80019fe:	7d7b      	ldrb	r3, [r7, #21]
 8001a00:	461a      	mov	r2, r3
 8001a02:	7d3b      	ldrb	r3, [r7, #20]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4413      	add	r3, r2
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001a10:	8bfb      	ldrh	r3, [r7, #30]
 8001a12:	029a      	lsls	r2, r3, #10
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	e02d      	b.n	8001a76 <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a1a:	7c7b      	ldrb	r3, [r7, #17]
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	7dbb      	ldrb	r3, [r7, #22]
 8001a24:	09db      	lsrs	r3, r3, #7
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	7d7b      	ldrb	r3, [r7, #21]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f003 0306 	and.w	r3, r3, #6
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001a42:	7d3b      	ldrb	r3, [r7, #20]
 8001a44:	099b      	lsrs	r3, r3, #6
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	7cfb      	ldrb	r3, [r7, #19]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	7cbb      	ldrb	r3, [r7, #18]
 8001a56:	029b      	lsls	r3, r3, #10
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001a68:	8bfa      	ldrh	r2, [r7, #30]
 8001a6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a6e:	3b09      	subs	r3, #9
 8001a70:	409a      	lsls	r2, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001a7c:	e056      	b.n	8001b2c <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a84:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001a8c:	e055      	b.n	8001b3a <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001a8e:	f7ff fbe7 	bl	8001260 <SD_ReadyWait>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2bff      	cmp	r3, #255	@ 0xff
 8001a96:	d14b      	bne.n	8001b30 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001a9e:	e047      	b.n	8001b30 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2049      	movs	r0, #73	@ 0x49
 8001aa4:	f7ff fce6 	bl	8001474 <SD_SendCmd>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d142      	bne.n	8001b34 <SD_disk_ioctl+0x240>
 8001aae:	2110      	movs	r1, #16
 8001ab0:	6a38      	ldr	r0, [r7, #32]
 8001ab2:	f7ff fc55 	bl	8001360 <SD_RxDataBlock>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d03b      	beq.n	8001b34 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001ac2:	e037      	b.n	8001b34 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	204a      	movs	r0, #74	@ 0x4a
 8001ac8:	f7ff fcd4 	bl	8001474 <SD_SendCmd>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d132      	bne.n	8001b38 <SD_disk_ioctl+0x244>
 8001ad2:	2110      	movs	r1, #16
 8001ad4:	6a38      	ldr	r0, [r7, #32]
 8001ad6:	f7ff fc43 	bl	8001360 <SD_RxDataBlock>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d02b      	beq.n	8001b38 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001ae6:	e027      	b.n	8001b38 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001ae8:	2100      	movs	r1, #0
 8001aea:	207a      	movs	r0, #122	@ 0x7a
 8001aec:	f7ff fcc2 	bl	8001474 <SD_SendCmd>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d116      	bne.n	8001b24 <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001afc:	e00b      	b.n	8001b16 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8001afe:	6a3c      	ldr	r4, [r7, #32]
 8001b00:	1c63      	adds	r3, r4, #1
 8001b02:	623b      	str	r3, [r7, #32]
 8001b04:	f7ff fb80 	bl	8001208 <SPI_RxByte>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001b0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b10:	3301      	adds	r3, #1
 8001b12:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001b16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d9ef      	bls.n	8001afe <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001b24:	2304      	movs	r3, #4
 8001b26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001b2a:	e006      	b.n	8001b3a <SD_disk_ioctl+0x246>
      break;
 8001b2c:	bf00      	nop
 8001b2e:	e004      	b.n	8001b3a <SD_disk_ioctl+0x246>
      break;
 8001b30:	bf00      	nop
 8001b32:	e002      	b.n	8001b3a <SD_disk_ioctl+0x246>
      break;
 8001b34:	bf00      	nop
 8001b36:	e000      	b.n	8001b3a <SD_disk_ioctl+0x246>
      break;
 8001b38:	bf00      	nop
    }
    
    DESELECT();
 8001b3a:	f7ff fb3f 	bl	80011bc <DESELECT>
    SPI_RxByte();
 8001b3e:	f7ff fb63 	bl	8001208 <SPI_RxByte>
  }
  
  return res;
 8001b42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	372c      	adds	r7, #44	@ 0x2c
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd90      	pop	{r4, r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000000 	.word	0x20000000

08001b54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4a07      	ldr	r2, [pc, #28]	@ (8001b80 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4a06      	ldr	r2, [pc, #24]	@ (8001b84 <vApplicationGetIdleTaskMemory+0x30>)
 8001b6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2280      	movs	r2, #128	@ 0x80
 8001b70:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	2000069c 	.word	0x2000069c
 8001b84:	200006f0 	.word	0x200006f0

08001b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b8e:	f001 fb23 	bl	80031d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b92:	f000 f843 	bl	8001c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b96:	f000 fb45 	bl	8002224 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b9a:	f000 fb13 	bl	80021c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b9e:	f000 f8a5 	bl	8001cec <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ba2:	f000 f8f5 	bl	8001d90 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001ba6:	f000 f921 	bl	8001dec <MX_I2C2_Init>
  MX_I2C3_Init();
 8001baa:	f000 f94d 	bl	8001e48 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001bae:	f000 f979 	bl	8001ea4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001bb2:	f000 f9ad 	bl	8001f10 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001bb6:	f000 f9e1 	bl	8001f7c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001bba:	f000 fad9 	bl	8002170 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001bbe:	f000 fa13 	bl	8001fe8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001bc2:	f000 fa87 	bl	80020d4 <MX_TIM5_Init>
  MX_FATFS_Init();
 8001bc6:	f005 fbf7 	bl	80073b8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MEMORY_init();
 8001bca:	f001 fabb 	bl	8003144 <MEMORY_init>

  TIM2->CCR4 = 1000;
 8001bce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001bd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bd6:	641a      	str	r2, [r3, #64]	@ 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001bd8:	210c      	movs	r1, #12
 8001bda:	480d      	ldr	r0, [pc, #52]	@ (8001c10 <main+0x88>)
 8001bdc:	f004 fa7c 	bl	80060d8 <HAL_TIM_PWM_Start>
  BlackBox_init();
 8001be0:	f001 fa3a 	bl	8003058 <BlackBox_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <main+0x8c>)
 8001be6:	1d3c      	adds	r4, r7, #4
 8001be8:	461d      	mov	r5, r3
 8001bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f007 ffb8 	bl	8009b70 <osThreadCreate>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <main+0x90>)
 8001c04:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001c06:	f007 ffac 	bl	8009b62 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c0a:	bf00      	nop
 8001c0c:	e7fd      	b.n	8001c0a <main+0x82>
 8001c0e:	bf00      	nop
 8001c10:	20000c5c 	.word	0x20000c5c
 8001c14:	08010d98 	.word	0x08010d98
 8001c18:	20000d34 	.word	0x20000d34

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b094      	sub	sp, #80	@ 0x50
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	2230      	movs	r2, #48	@ 0x30
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f00b fb2d 	bl	800d28a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	4b27      	ldr	r3, [pc, #156]	@ (8001ce4 <SystemClock_Config+0xc8>)
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	4a26      	ldr	r2, [pc, #152]	@ (8001ce4 <SystemClock_Config+0xc8>)
 8001c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c50:	4b24      	ldr	r3, [pc, #144]	@ (8001ce4 <SystemClock_Config+0xc8>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	4b21      	ldr	r3, [pc, #132]	@ (8001ce8 <SystemClock_Config+0xcc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a20      	ldr	r2, [pc, #128]	@ (8001ce8 <SystemClock_Config+0xcc>)
 8001c66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <SystemClock_Config+0xcc>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c82:	2302      	movs	r3, #2
 8001c84:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c86:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001c8c:	230c      	movs	r3, #12
 8001c8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c90:	2360      	movs	r3, #96	@ 0x60
 8001c92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c94:	2302      	movs	r3, #2
 8001c96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c9c:	f107 0320 	add.w	r3, r7, #32
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f002 ff11 	bl	8004ac8 <HAL_RCC_OscConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cac:	f000 fb96 	bl	80023dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	2103      	movs	r1, #3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 f973 	bl	8004fb8 <HAL_RCC_ClockConfig>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cd8:	f000 fb80 	bl	80023dc <Error_Handler>
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3750      	adds	r7, #80	@ 0x50
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40007000 	.word	0x40007000

08001cec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cfe:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <MX_ADC1_Init+0x98>)
 8001d00:	4a21      	ldr	r2, [pc, #132]	@ (8001d88 <MX_ADC1_Init+0x9c>)
 8001d02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <MX_ADC1_Init+0x98>)
 8001d06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <MX_ADC1_Init+0x98>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <MX_ADC1_Init+0x98>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d18:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <MX_ADC1_Init+0x98>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d1e:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <MX_ADC1_Init+0x98>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d26:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <MX_ADC1_Init+0x98>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d2c:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <MX_ADC1_Init+0x98>)
 8001d2e:	4a17      	ldr	r2, [pc, #92]	@ (8001d8c <MX_ADC1_Init+0xa0>)
 8001d30:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d32:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <MX_ADC1_Init+0x98>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d38:	4b12      	ldr	r3, [pc, #72]	@ (8001d84 <MX_ADC1_Init+0x98>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <MX_ADC1_Init+0x98>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d46:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <MX_ADC1_Init+0x98>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d4c:	480d      	ldr	r0, [pc, #52]	@ (8001d84 <MX_ADC1_Init+0x98>)
 8001d4e:	f001 fa85 	bl	800325c <HAL_ADC_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d58:	f000 fb40 	bl	80023dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d60:	2301      	movs	r3, #1
 8001d62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d68:	463b      	mov	r3, r7
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <MX_ADC1_Init+0x98>)
 8001d6e:	f001 fab9 	bl	80032e4 <HAL_ADC_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d78:	f000 fb30 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	200008f0 	.word	0x200008f0
 8001d88:	40012000 	.word	0x40012000
 8001d8c:	0f000001 	.word	0x0f000001

08001d90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d94:	4b13      	ldr	r3, [pc, #76]	@ (8001de4 <MX_I2C1_Init+0x54>)
 8001d96:	4a14      	ldr	r2, [pc, #80]	@ (8001de8 <MX_I2C1_Init+0x58>)
 8001d98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 8001d9a:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <MX_I2C1_Init+0x54>)
 8001d9c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001da0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da2:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <MX_I2C1_Init+0x54>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001da8:	4b0e      	ldr	r3, [pc, #56]	@ (8001de4 <MX_I2C1_Init+0x54>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dae:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <MX_I2C1_Init+0x54>)
 8001db0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001db4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db6:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <MX_I2C1_Init+0x54>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dbc:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <MX_I2C1_Init+0x54>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc2:	4b08      	ldr	r3, [pc, #32]	@ (8001de4 <MX_I2C1_Init+0x54>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <MX_I2C1_Init+0x54>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dce:	4805      	ldr	r0, [pc, #20]	@ (8001de4 <MX_I2C1_Init+0x54>)
 8001dd0:	f002 fd36 	bl	8004840 <HAL_I2C_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001dda:	f000 faff 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000938 	.word	0x20000938
 8001de8:	40005400 	.word	0x40005400

08001dec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <MX_I2C2_Init+0x50>)
 8001df2:	4a13      	ldr	r2, [pc, #76]	@ (8001e40 <MX_I2C2_Init+0x54>)
 8001df4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 200000;
 8001df6:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <MX_I2C2_Init+0x50>)
 8001df8:	4a12      	ldr	r2, [pc, #72]	@ (8001e44 <MX_I2C2_Init+0x58>)
 8001dfa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <MX_I2C2_Init+0x50>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <MX_I2C2_Init+0x50>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <MX_I2C2_Init+0x50>)
 8001e0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e0e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e10:	4b0a      	ldr	r3, [pc, #40]	@ (8001e3c <MX_I2C2_Init+0x50>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <MX_I2C2_Init+0x50>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e1c:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <MX_I2C2_Init+0x50>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <MX_I2C2_Init+0x50>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e28:	4804      	ldr	r0, [pc, #16]	@ (8001e3c <MX_I2C2_Init+0x50>)
 8001e2a:	f002 fd09 	bl	8004840 <HAL_I2C_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e34:	f000 fad2 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	2000098c 	.word	0x2000098c
 8001e40:	40005800 	.word	0x40005800
 8001e44:	00030d40 	.word	0x00030d40

08001e48 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <MX_I2C3_Init+0x50>)
 8001e4e:	4a13      	ldr	r2, [pc, #76]	@ (8001e9c <MX_I2C3_Init+0x54>)
 8001e50:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001e52:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <MX_I2C3_Init+0x50>)
 8001e54:	4a12      	ldr	r2, [pc, #72]	@ (8001ea0 <MX_I2C3_Init+0x58>)
 8001e56:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e58:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <MX_I2C3_Init+0x50>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e98 <MX_I2C3_Init+0x50>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <MX_I2C3_Init+0x50>)
 8001e66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e6a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <MX_I2C3_Init+0x50>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001e72:	4b09      	ldr	r3, [pc, #36]	@ (8001e98 <MX_I2C3_Init+0x50>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e78:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <MX_I2C3_Init+0x50>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <MX_I2C3_Init+0x50>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e84:	4804      	ldr	r0, [pc, #16]	@ (8001e98 <MX_I2C3_Init+0x50>)
 8001e86:	f002 fcdb 	bl	8004840 <HAL_I2C_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001e90:	f000 faa4 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	200009e0 	.word	0x200009e0
 8001e9c:	40005c00 	.word	0x40005c00
 8001ea0:	000186a0 	.word	0x000186a0

08001ea4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ea8:	4b17      	ldr	r3, [pc, #92]	@ (8001f08 <MX_SPI1_Init+0x64>)
 8001eaa:	4a18      	ldr	r2, [pc, #96]	@ (8001f0c <MX_SPI1_Init+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eae:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <MX_SPI1_Init+0x64>)
 8001eb0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001eb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001eb6:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <MX_SPI1_Init+0x64>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <MX_SPI1_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec2:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <MX_SPI1_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f08 <MX_SPI1_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <MX_SPI1_Init+0x64>)
 8001ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f08 <MX_SPI1_Init+0x64>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001edc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f08 <MX_SPI1_Init+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ee2:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <MX_SPI1_Init+0x64>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee8:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <MX_SPI1_Init+0x64>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001eee:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <MX_SPI1_Init+0x64>)
 8001ef0:	220a      	movs	r2, #10
 8001ef2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ef4:	4804      	ldr	r0, [pc, #16]	@ (8001f08 <MX_SPI1_Init+0x64>)
 8001ef6:	f003 fa71 	bl	80053dc <HAL_SPI_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f00:	f000 fa6c 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20000a34 	.word	0x20000a34
 8001f0c:	40013000 	.word	0x40013000

08001f10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f14:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f16:	4a18      	ldr	r2, [pc, #96]	@ (8001f78 <MX_SPI2_Init+0x68>)
 8001f18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f1a:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f22:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f28:	4b12      	ldr	r3, [pc, #72]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f42:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f44:	2218      	movs	r2, #24
 8001f46:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f54:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f5c:	220a      	movs	r2, #10
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f60:	4804      	ldr	r0, [pc, #16]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f62:	f003 fa3b 	bl	80053dc <HAL_SPI_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f6c:	f000 fa36 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000a8c 	.word	0x20000a8c
 8001f78:	40003800 	.word	0x40003800

08001f7c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001f80:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <MX_SPI3_Init+0x64>)
 8001f82:	4a18      	ldr	r2, [pc, #96]	@ (8001fe4 <MX_SPI3_Init+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f86:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <MX_SPI3_Init+0x64>)
 8001f88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f8c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001f8e:	4b14      	ldr	r3, [pc, #80]	@ (8001fe0 <MX_SPI3_Init+0x64>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <MX_SPI3_Init+0x64>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <MX_SPI3_Init+0x64>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <MX_SPI3_Init+0x64>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <MX_SPI3_Init+0x64>)
 8001fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fac:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001fae:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <MX_SPI3_Init+0x64>)
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <MX_SPI3_Init+0x64>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fba:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <MX_SPI3_Init+0x64>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fc0:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <MX_SPI3_Init+0x64>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <MX_SPI3_Init+0x64>)
 8001fc8:	220a      	movs	r2, #10
 8001fca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001fcc:	4804      	ldr	r0, [pc, #16]	@ (8001fe0 <MX_SPI3_Init+0x64>)
 8001fce:	f003 fa05 	bl	80053dc <HAL_SPI_Init>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001fd8:	f000 fa00 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000ae4 	.word	0x20000ae4
 8001fe4:	40003c00 	.word	0x40003c00

08001fe8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08e      	sub	sp, #56	@ 0x38
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffc:	f107 0320 	add.w	r3, r7, #32
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
 8002014:	615a      	str	r2, [r3, #20]
 8002016:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002018:	4b2d      	ldr	r3, [pc, #180]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 800201a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800201e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8002020:	4b2b      	ldr	r3, [pc, #172]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 8002022:	2263      	movs	r2, #99	@ 0x63
 8002024:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002026:	4b2a      	ldr	r3, [pc, #168]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 8002028:	2200      	movs	r2, #0
 800202a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7000;
 800202c:	4b28      	ldr	r3, [pc, #160]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 800202e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002032:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002034:	4b26      	ldr	r3, [pc, #152]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 8002036:	2200      	movs	r2, #0
 8002038:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800203a:	4b25      	ldr	r3, [pc, #148]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 800203c:	2280      	movs	r2, #128	@ 0x80
 800203e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002040:	4823      	ldr	r0, [pc, #140]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 8002042:	f003 ff3d 	bl	8005ec0 <HAL_TIM_Base_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800204c:	f000 f9c6 	bl	80023dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002054:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002056:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800205a:	4619      	mov	r1, r3
 800205c:	481c      	ldr	r0, [pc, #112]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 800205e:	f004 fa9d 	bl	800659c <HAL_TIM_ConfigClockSource>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002068:	f000 f9b8 	bl	80023dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800206c:	4818      	ldr	r0, [pc, #96]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 800206e:	f003 ffd9 	bl	8006024 <HAL_TIM_PWM_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002078:	f000 f9b0 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002084:	f107 0320 	add.w	r3, r7, #32
 8002088:	4619      	mov	r1, r3
 800208a:	4811      	ldr	r0, [pc, #68]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 800208c:	f004 fe4e 	bl	8006d2c <HAL_TIMEx_MasterConfigSynchronization>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002096:	f000 f9a1 	bl	80023dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800209a:	2360      	movs	r3, #96	@ 0x60
 800209c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	220c      	movs	r2, #12
 80020ae:	4619      	mov	r1, r3
 80020b0:	4807      	ldr	r0, [pc, #28]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 80020b2:	f004 f9b1 	bl	8006418 <HAL_TIM_PWM_ConfigChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80020bc:	f000 f98e 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80020c0:	4803      	ldr	r0, [pc, #12]	@ (80020d0 <MX_TIM2_Init+0xe8>)
 80020c2:	f000 fc81 	bl	80029c8 <HAL_TIM_MspPostInit>

}
 80020c6:	bf00      	nop
 80020c8:	3738      	adds	r7, #56	@ 0x38
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000c5c 	.word	0x20000c5c

080020d4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020da:	f107 0308 	add.w	r3, r7, #8
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e8:	463b      	mov	r3, r7
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002168 <MX_TIM5_Init+0x94>)
 80020f2:	4a1e      	ldr	r2, [pc, #120]	@ (800216c <MX_TIM5_Init+0x98>)
 80020f4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1000-1;
 80020f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002168 <MX_TIM5_Init+0x94>)
 80020f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020fc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <MX_TIM5_Init+0x94>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 8002104:	4b18      	ldr	r3, [pc, #96]	@ (8002168 <MX_TIM5_Init+0x94>)
 8002106:	2263      	movs	r2, #99	@ 0x63
 8002108:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210a:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <MX_TIM5_Init+0x94>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002110:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <MX_TIM5_Init+0x94>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002116:	4814      	ldr	r0, [pc, #80]	@ (8002168 <MX_TIM5_Init+0x94>)
 8002118:	f003 fed2 	bl	8005ec0 <HAL_TIM_Base_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002122:	f000 f95b 	bl	80023dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002126:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800212a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800212c:	f107 0308 	add.w	r3, r7, #8
 8002130:	4619      	mov	r1, r3
 8002132:	480d      	ldr	r0, [pc, #52]	@ (8002168 <MX_TIM5_Init+0x94>)
 8002134:	f004 fa32 	bl	800659c <HAL_TIM_ConfigClockSource>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800213e:	f000 f94d 	bl	80023dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800214a:	463b      	mov	r3, r7
 800214c:	4619      	mov	r1, r3
 800214e:	4806      	ldr	r0, [pc, #24]	@ (8002168 <MX_TIM5_Init+0x94>)
 8002150:	f004 fdec 	bl	8006d2c <HAL_TIMEx_MasterConfigSynchronization>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800215a:	f000 f93f 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000ca4 	.word	0x20000ca4
 800216c:	40000c00 	.word	0x40000c00

08002170 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002174:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <MX_USART1_UART_Init+0x4c>)
 8002176:	4a12      	ldr	r2, [pc, #72]	@ (80021c0 <MX_USART1_UART_Init+0x50>)
 8002178:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800217a:	4b10      	ldr	r3, [pc, #64]	@ (80021bc <MX_USART1_UART_Init+0x4c>)
 800217c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002180:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002182:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <MX_USART1_UART_Init+0x4c>)
 8002184:	2200      	movs	r2, #0
 8002186:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002188:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <MX_USART1_UART_Init+0x4c>)
 800218a:	2200      	movs	r2, #0
 800218c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800218e:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <MX_USART1_UART_Init+0x4c>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002194:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <MX_USART1_UART_Init+0x4c>)
 8002196:	220c      	movs	r2, #12
 8002198:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219a:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <MX_USART1_UART_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <MX_USART1_UART_Init+0x4c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021a6:	4805      	ldr	r0, [pc, #20]	@ (80021bc <MX_USART1_UART_Init+0x4c>)
 80021a8:	f004 fe42 	bl	8006e30 <HAL_UART_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021b2:	f000 f913 	bl	80023dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000cec 	.word	0x20000cec
 80021c0:	40011000 	.word	0x40011000

080021c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	4b14      	ldr	r3, [pc, #80]	@ (8002220 <MX_DMA_Init+0x5c>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d2:	4a13      	ldr	r2, [pc, #76]	@ (8002220 <MX_DMA_Init+0x5c>)
 80021d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021da:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <MX_DMA_Init+0x5c>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2105      	movs	r1, #5
 80021ea:	200b      	movs	r0, #11
 80021ec:	f001 fb60 	bl	80038b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80021f0:	200b      	movs	r0, #11
 80021f2:	f001 fb79 	bl	80038e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2105      	movs	r1, #5
 80021fa:	200e      	movs	r0, #14
 80021fc:	f001 fb58 	bl	80038b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002200:	200e      	movs	r0, #14
 8002202:	f001 fb71 	bl	80038e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2105      	movs	r1, #5
 800220a:	2010      	movs	r0, #16
 800220c:	f001 fb50 	bl	80038b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002210:	2010      	movs	r0, #16
 8002212:	f001 fb69 	bl	80038e8 <HAL_NVIC_EnableIRQ>

}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800

08002224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	@ 0x28
 8002228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	605a      	str	r2, [r3, #4]
 8002234:	609a      	str	r2, [r3, #8]
 8002236:	60da      	str	r2, [r3, #12]
 8002238:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	4b56      	ldr	r3, [pc, #344]	@ (8002398 <MX_GPIO_Init+0x174>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	4a55      	ldr	r2, [pc, #340]	@ (8002398 <MX_GPIO_Init+0x174>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6313      	str	r3, [r2, #48]	@ 0x30
 800224a:	4b53      	ldr	r3, [pc, #332]	@ (8002398 <MX_GPIO_Init+0x174>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b4f      	ldr	r3, [pc, #316]	@ (8002398 <MX_GPIO_Init+0x174>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a4e      	ldr	r2, [pc, #312]	@ (8002398 <MX_GPIO_Init+0x174>)
 8002260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b4c      	ldr	r3, [pc, #304]	@ (8002398 <MX_GPIO_Init+0x174>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	4b48      	ldr	r3, [pc, #288]	@ (8002398 <MX_GPIO_Init+0x174>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	4a47      	ldr	r2, [pc, #284]	@ (8002398 <MX_GPIO_Init+0x174>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6313      	str	r3, [r2, #48]	@ 0x30
 8002282:	4b45      	ldr	r3, [pc, #276]	@ (8002398 <MX_GPIO_Init+0x174>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	4b41      	ldr	r3, [pc, #260]	@ (8002398 <MX_GPIO_Init+0x174>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	4a40      	ldr	r2, [pc, #256]	@ (8002398 <MX_GPIO_Init+0x174>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6313      	str	r3, [r2, #48]	@ 0x30
 800229e:	4b3e      	ldr	r3, [pc, #248]	@ (8002398 <MX_GPIO_Init+0x174>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CS_GPIO_Port, NRF_CS_Pin, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022b0:	483a      	ldr	r0, [pc, #232]	@ (800239c <MX_GPIO_Init+0x178>)
 80022b2:	f002 faab 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|BMP_CS_Pin, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2105      	movs	r1, #5
 80022ba:	4839      	ldr	r0, [pc, #228]	@ (80023a0 <MX_GPIO_Init+0x17c>)
 80022bc:	f002 faa6 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, uLed_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80022c0:	2200      	movs	r2, #0
 80022c2:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 80022c6:	4837      	ldr	r0, [pc, #220]	@ (80023a4 <MX_GPIO_Init+0x180>)
 80022c8:	f002 faa0 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NRF_CS_Pin */
  GPIO_InitStruct.Pin = NRF_CS_Pin;
 80022cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d2:	2301      	movs	r3, #1
 80022d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CS_GPIO_Port, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	482d      	ldr	r0, [pc, #180]	@ (800239c <MX_GPIO_Init+0x178>)
 80022e6:	f002 f90d 	bl	8004504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80022ea:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80022ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f0:	2303      	movs	r3, #3
 80022f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	4827      	ldr	r0, [pc, #156]	@ (800239c <MX_GPIO_Init+0x178>)
 8002300:	f002 f900 	bl	8004504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA4 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_12;
 8002304:	f241 0315 	movw	r3, #4117	@ 0x1015
 8002308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800230a:	2303      	movs	r3, #3
 800230c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	4822      	ldr	r0, [pc, #136]	@ (80023a4 <MX_GPIO_Init+0x180>)
 800231a:	f002 f8f3 	bl	8004504 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin BMP_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|BMP_CS_Pin;
 800231e:	2305      	movs	r3, #5
 8002320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002322:	2301      	movs	r3, #1
 8002324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232e:	f107 0314 	add.w	r3, r7, #20
 8002332:	4619      	mov	r1, r3
 8002334:	481a      	ldr	r0, [pc, #104]	@ (80023a0 <MX_GPIO_Init+0x17c>)
 8002336:	f002 f8e5 	bl	8004504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 800233a:	f240 2302 	movw	r3, #514	@ 0x202
 800233e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002340:	2303      	movs	r3, #3
 8002342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4619      	mov	r1, r3
 800234e:	4814      	ldr	r0, [pc, #80]	@ (80023a0 <MX_GPIO_Init+0x17c>)
 8002350:	f002 f8d8 	bl	8004504 <HAL_GPIO_Init>

  /*Configure GPIO pin : uLed_Pin */
  GPIO_InitStruct.Pin = uLed_Pin;
 8002354:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235a:	2301      	movs	r3, #1
 800235c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(uLed_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 0314 	add.w	r3, r7, #20
 800236a:	4619      	mov	r1, r3
 800236c:	480d      	ldr	r0, [pc, #52]	@ (80023a4 <MX_GPIO_Init+0x180>)
 800236e:	f002 f8c9 	bl	8004504 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8002372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002378:	2301      	movs	r3, #1
 800237a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002380:	2302      	movs	r3, #2
 8002382:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8002384:	f107 0314 	add.w	r3, r7, #20
 8002388:	4619      	mov	r1, r3
 800238a:	4806      	ldr	r0, [pc, #24]	@ (80023a4 <MX_GPIO_Init+0x180>)
 800238c:	f002 f8ba 	bl	8004504 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002390:	bf00      	nop
 8002392:	3728      	adds	r7, #40	@ 0x28
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40023800 	.word	0x40023800
 800239c:	40020800 	.word	0x40020800
 80023a0:	40020400 	.word	0x40020400
 80023a4:	40020000 	.word	0x40020000

080023a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80023b0:	2001      	movs	r0, #1
 80023b2:	f007 fc29 	bl	8009c08 <osDelay>
 80023b6:	e7fb      	b.n	80023b0 <StartDefaultTask+0x8>

080023b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a04      	ldr	r2, [pc, #16]	@ (80023d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80023ca:	f000 ff27 	bl	800321c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40014800 	.word	0x40014800

080023dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e0:	b672      	cpsid	i
}
 80023e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <Error_Handler+0x8>

080023e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	4b12      	ldr	r3, [pc, #72]	@ (800243c <HAL_MspInit+0x54>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	4a11      	ldr	r2, [pc, #68]	@ (800243c <HAL_MspInit+0x54>)
 80023f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023fe:	4b0f      	ldr	r3, [pc, #60]	@ (800243c <HAL_MspInit+0x54>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <HAL_MspInit+0x54>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <HAL_MspInit+0x54>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002418:	6413      	str	r3, [r2, #64]	@ 0x40
 800241a:	4b08      	ldr	r3, [pc, #32]	@ (800243c <HAL_MspInit+0x54>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	210f      	movs	r1, #15
 800242a:	f06f 0001 	mvn.w	r0, #1
 800242e:	f001 fa3f 	bl	80038b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800

08002440 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	@ 0x28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a17      	ldr	r2, [pc, #92]	@ (80024bc <HAL_ADC_MspInit+0x7c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d127      	bne.n	80024b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	4b16      	ldr	r3, [pc, #88]	@ (80024c0 <HAL_ADC_MspInit+0x80>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	4a15      	ldr	r2, [pc, #84]	@ (80024c0 <HAL_ADC_MspInit+0x80>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002470:	6453      	str	r3, [r2, #68]	@ 0x44
 8002472:	4b13      	ldr	r3, [pc, #76]	@ (80024c0 <HAL_ADC_MspInit+0x80>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b0f      	ldr	r3, [pc, #60]	@ (80024c0 <HAL_ADC_MspInit+0x80>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	4a0e      	ldr	r2, [pc, #56]	@ (80024c0 <HAL_ADC_MspInit+0x80>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6313      	str	r3, [r2, #48]	@ 0x30
 800248e:	4b0c      	ldr	r3, [pc, #48]	@ (80024c0 <HAL_ADC_MspInit+0x80>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_VBat_Pin;
 800249a:	2302      	movs	r3, #2
 800249c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800249e:	2303      	movs	r3, #3
 80024a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VBat_GPIO_Port, &GPIO_InitStruct);
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	4619      	mov	r1, r3
 80024ac:	4805      	ldr	r0, [pc, #20]	@ (80024c4 <HAL_ADC_MspInit+0x84>)
 80024ae:	f002 f829 	bl	8004504 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80024b2:	bf00      	nop
 80024b4:	3728      	adds	r7, #40	@ 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40012000 	.word	0x40012000
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020000 	.word	0x40020000

080024c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08e      	sub	sp, #56	@ 0x38
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a63      	ldr	r2, [pc, #396]	@ (8002674 <HAL_I2C_MspInit+0x1ac>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d12c      	bne.n	8002544 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
 80024ee:	4b62      	ldr	r3, [pc, #392]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	4a61      	ldr	r2, [pc, #388]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 80024f4:	f043 0302 	orr.w	r3, r3, #2
 80024f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	623b      	str	r3, [r7, #32]
 8002504:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002506:	23c0      	movs	r3, #192	@ 0xc0
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800250a:	2312      	movs	r3, #18
 800250c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002516:	2304      	movs	r3, #4
 8002518:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800251e:	4619      	mov	r1, r3
 8002520:	4856      	ldr	r0, [pc, #344]	@ (800267c <HAL_I2C_MspInit+0x1b4>)
 8002522:	f001 ffef 	bl	8004504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	4b53      	ldr	r3, [pc, #332]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	4a52      	ldr	r2, [pc, #328]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 8002530:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002534:	6413      	str	r3, [r2, #64]	@ 0x40
 8002536:	4b50      	ldr	r3, [pc, #320]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002542:	e093      	b.n	800266c <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a4d      	ldr	r2, [pc, #308]	@ (8002680 <HAL_I2C_MspInit+0x1b8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d13d      	bne.n	80025ca <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	4b49      	ldr	r3, [pc, #292]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	4a48      	ldr	r2, [pc, #288]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6313      	str	r3, [r2, #48]	@ 0x30
 800255e:	4b46      	ldr	r3, [pc, #280]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800256a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002570:	2312      	movs	r3, #18
 8002572:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800257c:	2304      	movs	r3, #4
 800257e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002584:	4619      	mov	r1, r3
 8002586:	483d      	ldr	r0, [pc, #244]	@ (800267c <HAL_I2C_MspInit+0x1b4>)
 8002588:	f001 ffbc 	bl	8004504 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800258c:	2308      	movs	r3, #8
 800258e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002590:	2312      	movs	r3, #18
 8002592:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002598:	2303      	movs	r3, #3
 800259a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800259c:	2309      	movs	r3, #9
 800259e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025a4:	4619      	mov	r1, r3
 80025a6:	4835      	ldr	r0, [pc, #212]	@ (800267c <HAL_I2C_MspInit+0x1b4>)
 80025a8:	f001 ffac 	bl	8004504 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	4b31      	ldr	r3, [pc, #196]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 80025b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b4:	4a30      	ldr	r2, [pc, #192]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 80025b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80025bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	697b      	ldr	r3, [r7, #20]
}
 80025c8:	e050      	b.n	800266c <HAL_I2C_MspInit+0x1a4>
  else if(hi2c->Instance==I2C3)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002684 <HAL_I2C_MspInit+0x1bc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d14b      	bne.n	800266c <HAL_I2C_MspInit+0x1a4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	4b27      	ldr	r3, [pc, #156]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	4a26      	ldr	r2, [pc, #152]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e4:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 80025fa:	f043 0302 	orr.w	r3, r3, #2
 80025fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002600:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAG_SCL_Pin;
 800260c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002612:	2312      	movs	r3, #18
 8002614:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261a:	2303      	movs	r3, #3
 800261c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800261e:	2304      	movs	r3, #4
 8002620:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SCL_GPIO_Port, &GPIO_InitStruct);
 8002622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002626:	4619      	mov	r1, r3
 8002628:	4817      	ldr	r0, [pc, #92]	@ (8002688 <HAL_I2C_MspInit+0x1c0>)
 800262a:	f001 ff6b 	bl	8004504 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MAG_SDA_Pin;
 800262e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002634:	2312      	movs	r3, #18
 8002636:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263c:	2303      	movs	r3, #3
 800263e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002640:	2309      	movs	r3, #9
 8002642:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(MAG_SDA_GPIO_Port, &GPIO_InitStruct);
 8002644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002648:	4619      	mov	r1, r3
 800264a:	480c      	ldr	r0, [pc, #48]	@ (800267c <HAL_I2C_MspInit+0x1b4>)
 800264c:	f001 ff5a 	bl	8004504 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002650:	2300      	movs	r3, #0
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	4a07      	ldr	r2, [pc, #28]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 800265a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800265e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002660:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <HAL_I2C_MspInit+0x1b0>)
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]
}
 800266c:	bf00      	nop
 800266e:	3738      	adds	r7, #56	@ 0x38
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40005400 	.word	0x40005400
 8002678:	40023800 	.word	0x40023800
 800267c:	40020400 	.word	0x40020400
 8002680:	40005800 	.word	0x40005800
 8002684:	40005c00 	.word	0x40005c00
 8002688:	40020000 	.word	0x40020000

0800268c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08e      	sub	sp, #56	@ 0x38
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a9d      	ldr	r2, [pc, #628]	@ (8002920 <HAL_SPI_MspInit+0x294>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d12c      	bne.n	8002708 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
 80026b2:	4b9c      	ldr	r3, [pc, #624]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026b6:	4a9b      	ldr	r2, [pc, #620]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 80026b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026be:	4b99      	ldr	r3, [pc, #612]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026c6:	623b      	str	r3, [r7, #32]
 80026c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	4b95      	ldr	r3, [pc, #596]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	4a94      	ldr	r2, [pc, #592]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026da:	4b92      	ldr	r3, [pc, #584]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SD_SCK_Pin|SD_MISO_Pin|SD_MOSI_Pin;
 80026e6:	23e0      	movs	r3, #224	@ 0xe0
 80026e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f2:	2303      	movs	r3, #3
 80026f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026f6:	2305      	movs	r3, #5
 80026f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026fe:	4619      	mov	r1, r3
 8002700:	4889      	ldr	r0, [pc, #548]	@ (8002928 <HAL_SPI_MspInit+0x29c>)
 8002702:	f001 feff 	bl	8004504 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002706:	e106      	b.n	8002916 <HAL_SPI_MspInit+0x28a>
  else if(hspi->Instance==SPI2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a87      	ldr	r2, [pc, #540]	@ (800292c <HAL_SPI_MspInit+0x2a0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d162      	bne.n	80027d8 <HAL_SPI_MspInit+0x14c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	4b83      	ldr	r3, [pc, #524]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	4a82      	ldr	r2, [pc, #520]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 800271c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002720:	6413      	str	r3, [r2, #64]	@ 0x40
 8002722:	4b80      	ldr	r3, [pc, #512]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	4b7c      	ldr	r3, [pc, #496]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	4a7b      	ldr	r2, [pc, #492]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	6313      	str	r3, [r2, #48]	@ 0x30
 800273e:	4b79      	ldr	r3, [pc, #484]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BMP_SCK_Pin|BMP_MISO_Pin|BMP_MOSI_Pin;
 800274a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002758:	2303      	movs	r3, #3
 800275a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800275c:	2305      	movs	r3, #5
 800275e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002764:	4619      	mov	r1, r3
 8002766:	4872      	ldr	r0, [pc, #456]	@ (8002930 <HAL_SPI_MspInit+0x2a4>)
 8002768:	f001 fecc 	bl	8004504 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800276c:	4b71      	ldr	r3, [pc, #452]	@ (8002934 <HAL_SPI_MspInit+0x2a8>)
 800276e:	4a72      	ldr	r2, [pc, #456]	@ (8002938 <HAL_SPI_MspInit+0x2ac>)
 8002770:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8002772:	4b70      	ldr	r3, [pc, #448]	@ (8002934 <HAL_SPI_MspInit+0x2a8>)
 8002774:	2200      	movs	r2, #0
 8002776:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002778:	4b6e      	ldr	r3, [pc, #440]	@ (8002934 <HAL_SPI_MspInit+0x2a8>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800277e:	4b6d      	ldr	r3, [pc, #436]	@ (8002934 <HAL_SPI_MspInit+0x2a8>)
 8002780:	2200      	movs	r2, #0
 8002782:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002784:	4b6b      	ldr	r3, [pc, #428]	@ (8002934 <HAL_SPI_MspInit+0x2a8>)
 8002786:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800278a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800278c:	4b69      	ldr	r3, [pc, #420]	@ (8002934 <HAL_SPI_MspInit+0x2a8>)
 800278e:	2200      	movs	r2, #0
 8002790:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002792:	4b68      	ldr	r3, [pc, #416]	@ (8002934 <HAL_SPI_MspInit+0x2a8>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002798:	4b66      	ldr	r3, [pc, #408]	@ (8002934 <HAL_SPI_MspInit+0x2a8>)
 800279a:	2200      	movs	r2, #0
 800279c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800279e:	4b65      	ldr	r3, [pc, #404]	@ (8002934 <HAL_SPI_MspInit+0x2a8>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027a4:	4b63      	ldr	r3, [pc, #396]	@ (8002934 <HAL_SPI_MspInit+0x2a8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80027aa:	4862      	ldr	r0, [pc, #392]	@ (8002934 <HAL_SPI_MspInit+0x2a8>)
 80027ac:	f001 f8aa 	bl	8003904 <HAL_DMA_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_SPI_MspInit+0x12e>
      Error_Handler();
 80027b6:	f7ff fe11 	bl	80023dc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002934 <HAL_SPI_MspInit+0x2a8>)
 80027be:	64da      	str	r2, [r3, #76]	@ 0x4c
 80027c0:	4a5c      	ldr	r2, [pc, #368]	@ (8002934 <HAL_SPI_MspInit+0x2a8>)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2105      	movs	r1, #5
 80027ca:	2024      	movs	r0, #36	@ 0x24
 80027cc:	f001 f870 	bl	80038b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80027d0:	2024      	movs	r0, #36	@ 0x24
 80027d2:	f001 f889 	bl	80038e8 <HAL_NVIC_EnableIRQ>
}
 80027d6:	e09e      	b.n	8002916 <HAL_SPI_MspInit+0x28a>
  else if(hspi->Instance==SPI3)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a57      	ldr	r2, [pc, #348]	@ (800293c <HAL_SPI_MspInit+0x2b0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	f040 8099 	bne.w	8002916 <HAL_SPI_MspInit+0x28a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	4b4e      	ldr	r3, [pc, #312]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 80027ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80027f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	4b47      	ldr	r3, [pc, #284]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002808:	4a46      	ldr	r2, [pc, #280]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 800280a:	f043 0302 	orr.w	r3, r3, #2
 800280e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002810:	4b44      	ldr	r3, [pc, #272]	@ (8002924 <HAL_SPI_MspInit+0x298>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = NRF_SCK_Pin;
 800281c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002820:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282a:	2303      	movs	r3, #3
 800282c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800282e:	2307      	movs	r3, #7
 8002830:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 8002832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002836:	4619      	mov	r1, r3
 8002838:	483d      	ldr	r0, [pc, #244]	@ (8002930 <HAL_SPI_MspInit+0x2a4>)
 800283a:	f001 fe63 	bl	8004504 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = NRF_MISO_Pin|NRF_MOSI_Pin;
 800283e:	2330      	movs	r3, #48	@ 0x30
 8002840:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284a:	2303      	movs	r3, #3
 800284c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800284e:	2306      	movs	r3, #6
 8002850:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002852:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002856:	4619      	mov	r1, r3
 8002858:	4835      	ldr	r0, [pc, #212]	@ (8002930 <HAL_SPI_MspInit+0x2a4>)
 800285a:	f001 fe53 	bl	8004504 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800285e:	4b38      	ldr	r3, [pc, #224]	@ (8002940 <HAL_SPI_MspInit+0x2b4>)
 8002860:	4a38      	ldr	r2, [pc, #224]	@ (8002944 <HAL_SPI_MspInit+0x2b8>)
 8002862:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8002864:	4b36      	ldr	r3, [pc, #216]	@ (8002940 <HAL_SPI_MspInit+0x2b4>)
 8002866:	2200      	movs	r2, #0
 8002868:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800286a:	4b35      	ldr	r3, [pc, #212]	@ (8002940 <HAL_SPI_MspInit+0x2b4>)
 800286c:	2200      	movs	r2, #0
 800286e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002870:	4b33      	ldr	r3, [pc, #204]	@ (8002940 <HAL_SPI_MspInit+0x2b4>)
 8002872:	2200      	movs	r2, #0
 8002874:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002876:	4b32      	ldr	r3, [pc, #200]	@ (8002940 <HAL_SPI_MspInit+0x2b4>)
 8002878:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800287c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800287e:	4b30      	ldr	r3, [pc, #192]	@ (8002940 <HAL_SPI_MspInit+0x2b4>)
 8002880:	2200      	movs	r2, #0
 8002882:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002884:	4b2e      	ldr	r3, [pc, #184]	@ (8002940 <HAL_SPI_MspInit+0x2b4>)
 8002886:	2200      	movs	r2, #0
 8002888:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800288a:	4b2d      	ldr	r3, [pc, #180]	@ (8002940 <HAL_SPI_MspInit+0x2b4>)
 800288c:	2200      	movs	r2, #0
 800288e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002890:	4b2b      	ldr	r3, [pc, #172]	@ (8002940 <HAL_SPI_MspInit+0x2b4>)
 8002892:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002896:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002898:	4b29      	ldr	r3, [pc, #164]	@ (8002940 <HAL_SPI_MspInit+0x2b4>)
 800289a:	2200      	movs	r2, #0
 800289c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800289e:	4828      	ldr	r0, [pc, #160]	@ (8002940 <HAL_SPI_MspInit+0x2b4>)
 80028a0:	f001 f830 	bl	8003904 <HAL_DMA_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_SPI_MspInit+0x222>
      Error_Handler();
 80028aa:	f7ff fd97 	bl	80023dc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a23      	ldr	r2, [pc, #140]	@ (8002940 <HAL_SPI_MspInit+0x2b4>)
 80028b2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80028b4:	4a22      	ldr	r2, [pc, #136]	@ (8002940 <HAL_SPI_MspInit+0x2b4>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80028ba:	4b23      	ldr	r3, [pc, #140]	@ (8002948 <HAL_SPI_MspInit+0x2bc>)
 80028bc:	4a23      	ldr	r2, [pc, #140]	@ (800294c <HAL_SPI_MspInit+0x2c0>)
 80028be:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80028c0:	4b21      	ldr	r3, [pc, #132]	@ (8002948 <HAL_SPI_MspInit+0x2bc>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028c6:	4b20      	ldr	r3, [pc, #128]	@ (8002948 <HAL_SPI_MspInit+0x2bc>)
 80028c8:	2240      	movs	r2, #64	@ 0x40
 80028ca:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002948 <HAL_SPI_MspInit+0x2bc>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002948 <HAL_SPI_MspInit+0x2bc>)
 80028d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028da:	4b1b      	ldr	r3, [pc, #108]	@ (8002948 <HAL_SPI_MspInit+0x2bc>)
 80028dc:	2200      	movs	r2, #0
 80028de:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028e0:	4b19      	ldr	r3, [pc, #100]	@ (8002948 <HAL_SPI_MspInit+0x2bc>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80028e6:	4b18      	ldr	r3, [pc, #96]	@ (8002948 <HAL_SPI_MspInit+0x2bc>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80028ec:	4b16      	ldr	r3, [pc, #88]	@ (8002948 <HAL_SPI_MspInit+0x2bc>)
 80028ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028f2:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028f4:	4b14      	ldr	r3, [pc, #80]	@ (8002948 <HAL_SPI_MspInit+0x2bc>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80028fa:	4813      	ldr	r0, [pc, #76]	@ (8002948 <HAL_SPI_MspInit+0x2bc>)
 80028fc:	f001 f802 	bl	8003904 <HAL_DMA_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 8002906:	f7ff fd69 	bl	80023dc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a0e      	ldr	r2, [pc, #56]	@ (8002948 <HAL_SPI_MspInit+0x2bc>)
 800290e:	649a      	str	r2, [r3, #72]	@ 0x48
 8002910:	4a0d      	ldr	r2, [pc, #52]	@ (8002948 <HAL_SPI_MspInit+0x2bc>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002916:	bf00      	nop
 8002918:	3738      	adds	r7, #56	@ 0x38
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40013000 	.word	0x40013000
 8002924:	40023800 	.word	0x40023800
 8002928:	40020000 	.word	0x40020000
 800292c:	40003800 	.word	0x40003800
 8002930:	40020400 	.word	0x40020400
 8002934:	20000b3c 	.word	0x20000b3c
 8002938:	40026058 	.word	0x40026058
 800293c:	40003c00 	.word	0x40003c00
 8002940:	20000b9c 	.word	0x20000b9c
 8002944:	40026010 	.word	0x40026010
 8002948:	20000bfc 	.word	0x20000bfc
 800294c:	40026088 	.word	0x40026088

08002950 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002960:	d10e      	bne.n	8002980 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <HAL_TIM_Base_MspInit+0x70>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	4a15      	ldr	r2, [pc, #84]	@ (80029c0 <HAL_TIM_Base_MspInit+0x70>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6413      	str	r3, [r2, #64]	@ 0x40
 8002972:	4b13      	ldr	r3, [pc, #76]	@ (80029c0 <HAL_TIM_Base_MspInit+0x70>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800297e:	e01a      	b.n	80029b6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0f      	ldr	r2, [pc, #60]	@ (80029c4 <HAL_TIM_Base_MspInit+0x74>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d115      	bne.n	80029b6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <HAL_TIM_Base_MspInit+0x70>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	4a0b      	ldr	r2, [pc, #44]	@ (80029c0 <HAL_TIM_Base_MspInit+0x70>)
 8002994:	f043 0308 	orr.w	r3, r3, #8
 8002998:	6413      	str	r3, [r2, #64]	@ 0x40
 800299a:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <HAL_TIM_Base_MspInit+0x70>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2105      	movs	r1, #5
 80029aa:	2032      	movs	r0, #50	@ 0x32
 80029ac:	f000 ff80 	bl	80038b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80029b0:	2032      	movs	r0, #50	@ 0x32
 80029b2:	f000 ff99 	bl	80038e8 <HAL_NVIC_EnableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40000c00 	.word	0x40000c00

080029c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029e8:	d11d      	bne.n	8002a26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	4b10      	ldr	r3, [pc, #64]	@ (8002a30 <HAL_TIM_MspPostInit+0x68>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002a30 <HAL_TIM_MspPostInit+0x68>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002a30 <HAL_TIM_MspPostInit+0x68>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a06:	2308      	movs	r3, #8
 8002a08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a1a:	f107 030c 	add.w	r3, r7, #12
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4804      	ldr	r0, [pc, #16]	@ (8002a34 <HAL_TIM_MspPostInit+0x6c>)
 8002a22:	f001 fd6f 	bl	8004504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a26:	bf00      	nop
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40020000 	.word	0x40020000

08002a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	@ 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	609a      	str	r2, [r3, #8]
 8002a4c:	60da      	str	r2, [r3, #12]
 8002a4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a19      	ldr	r2, [pc, #100]	@ (8002abc <HAL_UART_MspInit+0x84>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d12c      	bne.n	8002ab4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	4b18      	ldr	r3, [pc, #96]	@ (8002ac0 <HAL_UART_MspInit+0x88>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	4a17      	ldr	r2, [pc, #92]	@ (8002ac0 <HAL_UART_MspInit+0x88>)
 8002a64:	f043 0310 	orr.w	r3, r3, #16
 8002a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a6a:	4b15      	ldr	r3, [pc, #84]	@ (8002ac0 <HAL_UART_MspInit+0x88>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <HAL_UART_MspInit+0x88>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	4a10      	ldr	r2, [pc, #64]	@ (8002ac0 <HAL_UART_MspInit+0x88>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac0 <HAL_UART_MspInit+0x88>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8002a92:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aa4:	2307      	movs	r3, #7
 8002aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	4619      	mov	r1, r3
 8002aae:	4805      	ldr	r0, [pc, #20]	@ (8002ac4 <HAL_UART_MspInit+0x8c>)
 8002ab0:	f001 fd28 	bl	8004504 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002ab4:	bf00      	nop
 8002ab6:	3728      	adds	r7, #40	@ 0x28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40011000 	.word	0x40011000
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40020000 	.word	0x40020000

08002ac8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08c      	sub	sp, #48	@ 0x30
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	4b2e      	ldr	r3, [pc, #184]	@ (8002b98 <HAL_InitTick+0xd0>)
 8002ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b98 <HAL_InitTick+0xd0>)
 8002ae2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ae6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b98 <HAL_InitTick+0xd0>)
 8002aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002af4:	f107 020c 	add.w	r2, r7, #12
 8002af8:	f107 0310 	add.w	r3, r7, #16
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f002 fc3a 	bl	8005378 <HAL_RCC_GetClockConfig>
  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002b04:	f002 fc24 	bl	8005350 <HAL_RCC_GetPCLK2Freq>
 8002b08:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0c:	4a23      	ldr	r2, [pc, #140]	@ (8002b9c <HAL_InitTick+0xd4>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	0c9b      	lsrs	r3, r3, #18
 8002b14:	3b01      	subs	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8002b18:	4b21      	ldr	r3, [pc, #132]	@ (8002ba0 <HAL_InitTick+0xd8>)
 8002b1a:	4a22      	ldr	r2, [pc, #136]	@ (8002ba4 <HAL_InitTick+0xdc>)
 8002b1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8002b1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ba0 <HAL_InitTick+0xd8>)
 8002b20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b24:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8002b26:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba0 <HAL_InitTick+0xd8>)
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8002b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba0 <HAL_InitTick+0xd8>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_InitTick+0xd8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b38:	4b19      	ldr	r3, [pc, #100]	@ (8002ba0 <HAL_InitTick+0xd8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8002b3e:	4818      	ldr	r0, [pc, #96]	@ (8002ba0 <HAL_InitTick+0xd8>)
 8002b40:	f003 f9be 	bl	8005ec0 <HAL_TIM_Base_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002b4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d11b      	bne.n	8002b8a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8002b52:	4813      	ldr	r0, [pc, #76]	@ (8002ba0 <HAL_InitTick+0xd8>)
 8002b54:	f003 fa04 	bl	8005f60 <HAL_TIM_Base_Start_IT>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d111      	bne.n	8002b8a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002b66:	201a      	movs	r0, #26
 8002b68:	f000 febe 	bl	80038e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b0f      	cmp	r3, #15
 8002b70:	d808      	bhi.n	8002b84 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8002b72:	2200      	movs	r2, #0
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	201a      	movs	r0, #26
 8002b78:	f000 fe9a 	bl	80038b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba8 <HAL_InitTick+0xe0>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e002      	b.n	8002b8a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3730      	adds	r7, #48	@ 0x30
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	431bde83 	.word	0x431bde83
 8002ba0:	20000d38 	.word	0x20000d38
 8002ba4:	40014800 	.word	0x40014800
 8002ba8:	20000014 	.word	0x20000014

08002bac <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bec <SDTimer_Handler+0x40>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d006      	beq.n	8002bc8 <SDTimer_Handler+0x1c>
    Timer1--;
 8002bba:	4b0c      	ldr	r3, [pc, #48]	@ (8002bec <SDTimer_Handler+0x40>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <SDTimer_Handler+0x40>)
 8002bc6:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002bc8:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <SDTimer_Handler+0x44>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d006      	beq.n	8002be0 <SDTimer_Handler+0x34>
    Timer2--;
 8002bd2:	4b07      	ldr	r3, [pc, #28]	@ (8002bf0 <SDTimer_Handler+0x44>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	4b04      	ldr	r3, [pc, #16]	@ (8002bf0 <SDTimer_Handler+0x44>)
 8002bde:	701a      	strb	r2, [r3, #0]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000d81 	.word	0x20000d81
 8002bf0:	20000d82 	.word	0x20000d82

08002bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bf8:	bf00      	nop
 8002bfa:	e7fd      	b.n	8002bf8 <NMI_Handler+0x4>

08002bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c00:	bf00      	nop
 8002c02:	e7fd      	b.n	8002c00 <HardFault_Handler+0x4>

08002c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c08:	bf00      	nop
 8002c0a:	e7fd      	b.n	8002c08 <MemManage_Handler+0x4>

08002c0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <BusFault_Handler+0x4>

08002c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <UsageFault_Handler+0x4>

08002c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8002c30:	4802      	ldr	r0, [pc, #8]	@ (8002c3c <DMA1_Stream0_IRQHandler+0x10>)
 8002c32:	f000 ff37 	bl	8003aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000b9c 	.word	0x20000b9c

08002c40 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002c44:	4802      	ldr	r0, [pc, #8]	@ (8002c50 <DMA1_Stream3_IRQHandler+0x10>)
 8002c46:	f000 ff2d 	bl	8003aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000b3c 	.word	0x20000b3c

08002c54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002c58:	4802      	ldr	r0, [pc, #8]	@ (8002c64 <DMA1_Stream5_IRQHandler+0x10>)
 8002c5a:	f000 ff23 	bl	8003aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	20000bfc 	.word	0x20000bfc

08002c68 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	FatFsCnt++;
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3301      	adds	r3, #1
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4b08      	ldr	r3, [pc, #32]	@ (8002c98 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 8002c78:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8002c7a:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b09      	cmp	r3, #9
 8002c82:	d904      	bls.n	8002c8e <TIM1_TRG_COM_TIM11_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8002c84:	4b04      	ldr	r3, [pc, #16]	@ (8002c98 <TIM1_TRG_COM_TIM11_IRQHandler+0x30>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8002c8a:	f7ff ff8f 	bl	8002bac <SDTimer_Handler>
	}
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002c8e:	4803      	ldr	r0, [pc, #12]	@ (8002c9c <TIM1_TRG_COM_TIM11_IRQHandler+0x34>)
 8002c90:	f003 fad2 	bl	8006238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	20000d80 	.word	0x20000d80
 8002c9c:	20000d38 	.word	0x20000d38

08002ca0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002ca4:	4802      	ldr	r0, [pc, #8]	@ (8002cb0 <SPI2_IRQHandler+0x10>)
 8002ca6:	f002 ff0f 	bl	8005ac8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000a8c 	.word	0x20000a8c

08002cb4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002cb8:	4802      	ldr	r0, [pc, #8]	@ (8002cc4 <TIM5_IRQHandler+0x10>)
 8002cba:	f003 fabd 	bl	8006238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000ca4 	.word	0x20000ca4

08002cc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return 1;
 8002ccc:	2301      	movs	r3, #1
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <_kill>:

int _kill(int pid, int sig)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ce2:	f00a fb25 	bl	800d330 <__errno>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2216      	movs	r2, #22
 8002cea:	601a      	str	r2, [r3, #0]
  return -1;
 8002cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <_exit>:

void _exit (int status)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d00:	f04f 31ff 	mov.w	r1, #4294967295
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ffe7 	bl	8002cd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d0a:	bf00      	nop
 8002d0c:	e7fd      	b.n	8002d0a <_exit+0x12>

08002d0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	e00a      	b.n	8002d36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d20:	f3af 8000 	nop.w
 8002d24:	4601      	mov	r1, r0
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	60ba      	str	r2, [r7, #8]
 8002d2c:	b2ca      	uxtb	r2, r1
 8002d2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	3301      	adds	r3, #1
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	dbf0      	blt.n	8002d20 <_read+0x12>
  }

  return len;
 8002d3e:	687b      	ldr	r3, [r7, #4]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e009      	b.n	8002d6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	60ba      	str	r2, [r7, #8]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	dbf1      	blt.n	8002d5a <_write+0x12>
  }
  return len;
 8002d76:	687b      	ldr	r3, [r7, #4]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <_close>:

int _close(int file)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002da8:	605a      	str	r2, [r3, #4]
  return 0;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <_isatty>:

int _isatty(int file)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dc0:	2301      	movs	r3, #1
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b085      	sub	sp, #20
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df0:	4a14      	ldr	r2, [pc, #80]	@ (8002e44 <_sbrk+0x5c>)
 8002df2:	4b15      	ldr	r3, [pc, #84]	@ (8002e48 <_sbrk+0x60>)
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dfc:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <_sbrk+0x64>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e04:	4b11      	ldr	r3, [pc, #68]	@ (8002e4c <_sbrk+0x64>)
 8002e06:	4a12      	ldr	r2, [pc, #72]	@ (8002e50 <_sbrk+0x68>)
 8002e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e0a:	4b10      	ldr	r3, [pc, #64]	@ (8002e4c <_sbrk+0x64>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d207      	bcs.n	8002e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e18:	f00a fa8a 	bl	800d330 <__errno>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	220c      	movs	r2, #12
 8002e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e22:	f04f 33ff 	mov.w	r3, #4294967295
 8002e26:	e009      	b.n	8002e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e28:	4b08      	ldr	r3, [pc, #32]	@ (8002e4c <_sbrk+0x64>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e2e:	4b07      	ldr	r3, [pc, #28]	@ (8002e4c <_sbrk+0x64>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	4a05      	ldr	r2, [pc, #20]	@ (8002e4c <_sbrk+0x64>)
 8002e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20020000 	.word	0x20020000
 8002e48:	00000400 	.word	0x00000400
 8002e4c:	20000d84 	.word	0x20000d84
 8002e50:	20004d08 	.word	0x20004d08

08002e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e58:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <SystemInit+0x20>)
 8002e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5e:	4a05      	ldr	r2, [pc, #20]	@ (8002e74 <SystemInit+0x20>)
 8002e60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a2e      	ldr	r2, [pc, #184]	@ (8002f40 <GetSector+0xc8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d806      	bhi.n	8002e9a <GetSector+0x22>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e92:	d302      	bcc.n	8002e9a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	e04b      	b.n	8002f32 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a29      	ldr	r2, [pc, #164]	@ (8002f44 <GetSector+0xcc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d806      	bhi.n	8002eb0 <GetSector+0x38>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a28      	ldr	r2, [pc, #160]	@ (8002f48 <GetSector+0xd0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d302      	bcc.n	8002eb0 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e040      	b.n	8002f32 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a26      	ldr	r2, [pc, #152]	@ (8002f4c <GetSector+0xd4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d806      	bhi.n	8002ec6 <GetSector+0x4e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a25      	ldr	r2, [pc, #148]	@ (8002f50 <GetSector+0xd8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d302      	bcc.n	8002ec6 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	e035      	b.n	8002f32 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a22      	ldr	r2, [pc, #136]	@ (8002f54 <GetSector+0xdc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d206      	bcs.n	8002edc <GetSector+0x64>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a21      	ldr	r2, [pc, #132]	@ (8002f58 <GetSector+0xe0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d302      	bcc.n	8002edc <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	e02a      	b.n	8002f32 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a1f      	ldr	r2, [pc, #124]	@ (8002f5c <GetSector+0xe4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d206      	bcs.n	8002ef2 <GetSector+0x7a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f54 <GetSector+0xdc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d902      	bls.n	8002ef2 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8002eec:	2304      	movs	r3, #4
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e01f      	b.n	8002f32 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8002f60 <GetSector+0xe8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d206      	bcs.n	8002f08 <GetSector+0x90>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a17      	ldr	r2, [pc, #92]	@ (8002f5c <GetSector+0xe4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d902      	bls.n	8002f08 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8002f02:	2305      	movs	r3, #5
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	e014      	b.n	8002f32 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a16      	ldr	r2, [pc, #88]	@ (8002f64 <GetSector+0xec>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d206      	bcs.n	8002f1e <GetSector+0xa6>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a13      	ldr	r2, [pc, #76]	@ (8002f60 <GetSector+0xe8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d902      	bls.n	8002f1e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8002f18:	2306      	movs	r3, #6
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	e009      	b.n	8002f32 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a11      	ldr	r2, [pc, #68]	@ (8002f68 <GetSector+0xf0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d205      	bcs.n	8002f32 <GetSector+0xba>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a0e      	ldr	r2, [pc, #56]	@ (8002f64 <GetSector+0xec>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 8002f2e:	2307      	movs	r3, #7
 8002f30:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 8002f32:	68fb      	ldr	r3, [r7, #12]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	08003ffe 	.word	0x08003ffe
 8002f44:	08007ffe 	.word	0x08007ffe
 8002f48:	08004000 	.word	0x08004000
 8002f4c:	0800bffe 	.word	0x0800bffe
 8002f50:	08008000 	.word	0x08008000
 8002f54:	0800ffff 	.word	0x0800ffff
 8002f58:	0800c000 	.word	0x0800c000
 8002f5c:	0801ffff 	.word	0x0801ffff
 8002f60:	0803ffff 	.word	0x0803ffff
 8002f64:	0805ffff 	.word	0x0805ffff
 8002f68:	0807ffff 	.word	0x0807ffff

08002f6c <Flash_Write>:


uint32_t Flash_Write (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 8002f6c:	b5b0      	push	{r4, r5, r7, lr}
 8002f6e:	b08a      	sub	sp, #40	@ 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	4613      	mov	r3, r2
 8002f78:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8002f7e:	f001 f821 	bl	8003fc4 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f7ff ff78 	bl	8002e78 <GetSector>
 8002f88:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8002f96:	69f8      	ldr	r0, [r7, #28]
 8002f98:	f7ff ff6e 	bl	8002e78 <GetSector>
 8002f9c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003018 <Flash_Write+0xac>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8003018 <Flash_Write+0xac>)
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8002faa:	4a1b      	ldr	r2, [pc, #108]	@ (8003018 <Flash_Write+0xac>)
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	4a17      	ldr	r2, [pc, #92]	@ (8003018 <Flash_Write+0xac>)
 8002fba:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4815      	ldr	r0, [pc, #84]	@ (8003018 <Flash_Write+0xac>)
 8002fc4:	f001 f97c 	bl	80042c0 <HAL_FLASHEx_Erase>

	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
 8002fc8:	e01b      	b.n	8003002 <Flash_Write+0x96>
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	461c      	mov	r4, r3
 8002fd8:	4615      	mov	r5, r2
 8002fda:	4622      	mov	r2, r4
 8002fdc:	462b      	mov	r3, r5
 8002fde:	68f9      	ldr	r1, [r7, #12]
 8002fe0:	2002      	movs	r0, #2
 8002fe2:	f000 ff9b 	bl	8003f1c <HAL_FLASH_Program>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d106      	bne.n	8002ffa <Flash_Write+0x8e>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff8:	e003      	b.n	8003002 <Flash_Write+0x96>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8002ffa:	f001 f815 	bl	8004028 <HAL_FLASH_GetError>
 8002ffe:	4603      	mov	r3, r0
 8003000:	e006      	b.n	8003010 <Flash_Write+0xa4>
	   while (sofar<numberofwords)
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003006:	429a      	cmp	r2, r3
 8003008:	dbdf      	blt.n	8002fca <Flash_Write+0x5e>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800300a:	f000 fffd 	bl	8004008 <HAL_FLASH_Lock>

	   return 0;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3728      	adds	r7, #40	@ 0x28
 8003014:	46bd      	mov	sp, r7
 8003016:	bdb0      	pop	{r4, r5, r7, pc}
 8003018:	20000d88 	.word	0x20000d88

0800301c <Flash_Read>:


void Flash_Read (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	4613      	mov	r3, r2
 8003028:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3304      	adds	r3, #4
 8003036:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	3304      	adds	r3, #4
 800303c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	1e5a      	subs	r2, r3, #1
 8003042:	80fa      	strh	r2, [r7, #6]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d000      	beq.n	800304a <Flash_Read+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 8003048:	e7ef      	b.n	800302a <Flash_Read+0xe>
		if (!(numberofwords--)) break;
 800304a:	bf00      	nop
	}
}
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <BlackBox_init>:
#include "Modules/BlackBox/blackbox.h"

char gucDirName[7];
char fileName[] = "FD000.csv";

void BlackBox_init(void){
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0

	uint8_t buf = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	71fb      	strb	r3, [r7, #7]
    char *path = pvPortMalloc(20*sizeof (char));
 8003062:	2014      	movs	r0, #20
 8003064:	f008 ff92 	bl	800bf8c <pvPortMalloc>
 8003068:	6038      	str	r0, [r7, #0]
    sprintf (path, "%s","/");
 800306a:	4a2e      	ldr	r2, [pc, #184]	@ (8003124 <BlackBox_init+0xcc>)
 800306c:	492e      	ldr	r1, [pc, #184]	@ (8003128 <BlackBox_init+0xd0>)
 800306e:	6838      	ldr	r0, [r7, #0]
 8003070:	f00a f8a8 	bl	800d1c4 <siprintf>

	Mount_SD("/");
 8003074:	482b      	ldr	r0, [pc, #172]	@ (8003124 <BlackBox_init+0xcc>)
 8003076:	f7fd ffbd 	bl	8000ff4 <Mount_SD>

	buf = MEMORY.str.STATUS.Reset_Number;
 800307a:	4b2c      	ldr	r3, [pc, #176]	@ (800312c <BlackBox_init+0xd4>)
 800307c:	7f1b      	ldrb	r3, [r3, #28]
 800307e:	71fb      	strb	r3, [r7, #7]
	sprintf(gucDirName,"LOG_");
 8003080:	492b      	ldr	r1, [pc, #172]	@ (8003130 <BlackBox_init+0xd8>)
 8003082:	482c      	ldr	r0, [pc, #176]	@ (8003134 <BlackBox_init+0xdc>)
 8003084:	f00a f89e 	bl	800d1c4 <siprintf>
	gucDirName[4] = buf/100 + 48;
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	4a2b      	ldr	r2, [pc, #172]	@ (8003138 <BlackBox_init+0xe0>)
 800308c:	fba2 2303 	umull	r2, r3, r2, r3
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	b2db      	uxtb	r3, r3
 8003094:	3330      	adds	r3, #48	@ 0x30
 8003096:	b2da      	uxtb	r2, r3
 8003098:	4b26      	ldr	r3, [pc, #152]	@ (8003134 <BlackBox_init+0xdc>)
 800309a:	711a      	strb	r2, [r3, #4]
	buf -= (buf/100) * 100;
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	4a26      	ldr	r2, [pc, #152]	@ (8003138 <BlackBox_init+0xe0>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	0092      	lsls	r2, r2, #2
 80030ac:	441a      	add	r2, r3
 80030ae:	00d2      	lsls	r2, r2, #3
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	4413      	add	r3, r2
 80030ba:	71fb      	strb	r3, [r7, #7]
	gucDirName[5] = buf/10 + 48;
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	4a1f      	ldr	r2, [pc, #124]	@ (800313c <BlackBox_init+0xe4>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	08db      	lsrs	r3, r3, #3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	3330      	adds	r3, #48	@ 0x30
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <BlackBox_init+0xdc>)
 80030ce:	715a      	strb	r2, [r3, #5]
	buf -= (buf/10) * 10;
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	4a1a      	ldr	r2, [pc, #104]	@ (800313c <BlackBox_init+0xe4>)
 80030d4:	fba2 2303 	umull	r2, r3, r2, r3
 80030d8:	08db      	lsrs	r3, r3, #3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	0152      	lsls	r2, r2, #5
 80030e0:	1ad2      	subs	r2, r2, r3
 80030e2:	0092      	lsls	r2, r2, #2
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	4413      	add	r3, r2
 80030ee:	71fb      	strb	r3, [r7, #7]
	gucDirName[6] = buf + 48;
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	3330      	adds	r3, #48	@ 0x30
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003134 <BlackBox_init+0xdc>)
 80030f8:	719a      	strb	r2, [r3, #6]

	MEMORY.str.STATUS.Reset_Number++;
 80030fa:	4b0c      	ldr	r3, [pc, #48]	@ (800312c <BlackBox_init+0xd4>)
 80030fc:	7f1b      	ldrb	r3, [r3, #28]
 80030fe:	3301      	adds	r3, #1
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4b0a      	ldr	r3, [pc, #40]	@ (800312c <BlackBox_init+0xd4>)
 8003104:	771a      	strb	r2, [r3, #28]

	Create_Dir(gucDirName);
 8003106:	480b      	ldr	r0, [pc, #44]	@ (8003134 <BlackBox_init+0xdc>)
 8003108:	f7fe f812 	bl	8001130 <Create_Dir>

	Open_Dir(gucDirName);
 800310c:	4809      	ldr	r0, [pc, #36]	@ (8003134 <BlackBox_init+0xdc>)
 800310e:	f7fe f835 	bl	800117c <Open_Dir>

	Create_File(fileName);
 8003112:	480b      	ldr	r0, [pc, #44]	@ (8003140 <BlackBox_init+0xe8>)
 8003114:	f7fd ff84 	bl	8001020 <Create_File>

	MEMORY_write();
 8003118:	f000 f822 	bl	8003160 <MEMORY_write>
}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	08010db4 	.word	0x08010db4
 8003128:	08010db8 	.word	0x08010db8
 800312c:	20000da4 	.word	0x20000da4
 8003130:	08010dbc 	.word	0x08010dbc
 8003134:	20000d9c 	.word	0x20000d9c
 8003138:	51eb851f 	.word	0x51eb851f
 800313c:	cccccccd 	.word	0xcccccccd
 8003140:	20000008 	.word	0x20000008

08003144 <MEMORY_init>:

#include "Modules/Status/memory.h"

MEMORY_u MEMORY;

void MEMORY_init(void){
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
	Flash_Read(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 8003148:	2208      	movs	r2, #8
 800314a:	4903      	ldr	r1, [pc, #12]	@ (8003158 <MEMORY_init+0x14>)
 800314c:	4803      	ldr	r0, [pc, #12]	@ (800315c <MEMORY_init+0x18>)
 800314e:	f7ff ff65 	bl	800301c <Flash_Read>
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000da4 	.word	0x20000da4
 800315c:	08020000 	.word	0x08020000

08003160 <MEMORY_write>:


void MEMORY_write(void){
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
	Flash_Write(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 8003164:	2208      	movs	r2, #8
 8003166:	4905      	ldr	r1, [pc, #20]	@ (800317c <MEMORY_write+0x1c>)
 8003168:	4805      	ldr	r0, [pc, #20]	@ (8003180 <MEMORY_write+0x20>)
 800316a:	f7ff feff 	bl	8002f6c <Flash_Write>
	Flash_Read(FLASH_ADDR,MEMORY.word,SIZEOFSTR);
 800316e:	2208      	movs	r2, #8
 8003170:	4902      	ldr	r1, [pc, #8]	@ (800317c <MEMORY_write+0x1c>)
 8003172:	4803      	ldr	r0, [pc, #12]	@ (8003180 <MEMORY_write+0x20>)
 8003174:	f7ff ff52 	bl	800301c <Flash_Read>
}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000da4 	.word	0x20000da4
 8003180:	08020000 	.word	0x08020000

08003184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003184:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003188:	f7ff fe64 	bl	8002e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800318c:	480c      	ldr	r0, [pc, #48]	@ (80031c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800318e:	490d      	ldr	r1, [pc, #52]	@ (80031c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003190:	4a0d      	ldr	r2, [pc, #52]	@ (80031c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003194:	e002      	b.n	800319c <LoopCopyDataInit>

08003196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800319a:	3304      	adds	r3, #4

0800319c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800319c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800319e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031a0:	d3f9      	bcc.n	8003196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031a2:	4a0a      	ldr	r2, [pc, #40]	@ (80031cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031a4:	4c0a      	ldr	r4, [pc, #40]	@ (80031d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a8:	e001      	b.n	80031ae <LoopFillZerobss>

080031aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031ac:	3204      	adds	r2, #4

080031ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031b0:	d3fb      	bcc.n	80031aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031b2:	f00a f8c3 	bl	800d33c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031b6:	f7fe fce7 	bl	8001b88 <main>
  bx  lr    
 80031ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031c4:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80031c8:	080112f8 	.word	0x080112f8
  ldr r2, =_sbss
 80031cc:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80031d0:	20004d04 	.word	0x20004d04

080031d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031d4:	e7fe      	b.n	80031d4 <ADC_IRQHandler>
	...

080031d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003218 <HAL_Init+0x40>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003218 <HAL_Init+0x40>)
 80031e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <HAL_Init+0x40>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003218 <HAL_Init+0x40>)
 80031ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031f4:	4b08      	ldr	r3, [pc, #32]	@ (8003218 <HAL_Init+0x40>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a07      	ldr	r2, [pc, #28]	@ (8003218 <HAL_Init+0x40>)
 80031fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003200:	2003      	movs	r0, #3
 8003202:	f000 fb4a 	bl	800389a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003206:	200f      	movs	r0, #15
 8003208:	f7ff fc5e 	bl	8002ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800320c:	f7ff f8ec 	bl	80023e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023c00 	.word	0x40023c00

0800321c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003220:	4b06      	ldr	r3, [pc, #24]	@ (800323c <HAL_IncTick+0x20>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <HAL_IncTick+0x24>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4413      	add	r3, r2
 800322c:	4a04      	ldr	r2, [pc, #16]	@ (8003240 <HAL_IncTick+0x24>)
 800322e:	6013      	str	r3, [r2, #0]
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000018 	.word	0x20000018
 8003240:	20000dc4 	.word	0x20000dc4

08003244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return uwTick;
 8003248:	4b03      	ldr	r3, [pc, #12]	@ (8003258 <HAL_GetTick+0x14>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000dc4 	.word	0x20000dc4

0800325c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e033      	b.n	80032da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff f8e0 	bl	8002440 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d118      	bne.n	80032cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80032a2:	f023 0302 	bic.w	r3, r3, #2
 80032a6:	f043 0202 	orr.w	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f94a 	bl	8003548 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	f043 0201 	orr.w	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80032ca:	e001      	b.n	80032d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x1c>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e113      	b.n	8003528 <HAL_ADC_ConfigChannel+0x244>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b09      	cmp	r3, #9
 800330e:	d925      	bls.n	800335c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68d9      	ldr	r1, [r3, #12]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	3b1e      	subs	r3, #30
 8003326:	2207      	movs	r2, #7
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43da      	mvns	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	400a      	ands	r2, r1
 8003334:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68d9      	ldr	r1, [r3, #12]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	b29b      	uxth	r3, r3
 8003346:	4618      	mov	r0, r3
 8003348:	4603      	mov	r3, r0
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4403      	add	r3, r0
 800334e:	3b1e      	subs	r3, #30
 8003350:	409a      	lsls	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	e022      	b.n	80033a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6919      	ldr	r1, [r3, #16]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	2207      	movs	r2, #7
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43da      	mvns	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	400a      	ands	r2, r1
 800337e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6919      	ldr	r1, [r3, #16]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	4618      	mov	r0, r3
 8003392:	4603      	mov	r3, r0
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4403      	add	r3, r0
 8003398:	409a      	lsls	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d824      	bhi.n	80033f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	3b05      	subs	r3, #5
 80033bc:	221f      	movs	r2, #31
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43da      	mvns	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	400a      	ands	r2, r1
 80033ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	4618      	mov	r0, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	3b05      	subs	r3, #5
 80033e6:	fa00 f203 	lsl.w	r2, r0, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80033f2:	e04c      	b.n	800348e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b0c      	cmp	r3, #12
 80033fa:	d824      	bhi.n	8003446 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	3b23      	subs	r3, #35	@ 0x23
 800340e:	221f      	movs	r2, #31
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43da      	mvns	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	400a      	ands	r2, r1
 800341c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	4618      	mov	r0, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	3b23      	subs	r3, #35	@ 0x23
 8003438:	fa00 f203 	lsl.w	r2, r0, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	631a      	str	r2, [r3, #48]	@ 0x30
 8003444:	e023      	b.n	800348e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	3b41      	subs	r3, #65	@ 0x41
 8003458:	221f      	movs	r2, #31
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43da      	mvns	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	400a      	ands	r2, r1
 8003466:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	4618      	mov	r0, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	3b41      	subs	r3, #65	@ 0x41
 8003482:	fa00 f203 	lsl.w	r2, r0, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800348e:	4b29      	ldr	r3, [pc, #164]	@ (8003534 <HAL_ADC_ConfigChannel+0x250>)
 8003490:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a28      	ldr	r2, [pc, #160]	@ (8003538 <HAL_ADC_ConfigChannel+0x254>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d10f      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x1d8>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b12      	cmp	r3, #18
 80034a2:	d10b      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003538 <HAL_ADC_ConfigChannel+0x254>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d12b      	bne.n	800351e <HAL_ADC_ConfigChannel+0x23a>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1c      	ldr	r2, [pc, #112]	@ (800353c <HAL_ADC_ConfigChannel+0x258>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d003      	beq.n	80034d8 <HAL_ADC_ConfigChannel+0x1f4>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b11      	cmp	r3, #17
 80034d6:	d122      	bne.n	800351e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a11      	ldr	r2, [pc, #68]	@ (800353c <HAL_ADC_ConfigChannel+0x258>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d111      	bne.n	800351e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034fa:	4b11      	ldr	r3, [pc, #68]	@ (8003540 <HAL_ADC_ConfigChannel+0x25c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a11      	ldr	r2, [pc, #68]	@ (8003544 <HAL_ADC_ConfigChannel+0x260>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	0c9a      	lsrs	r2, r3, #18
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003510:	e002      	b.n	8003518 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	3b01      	subs	r3, #1
 8003516:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f9      	bne.n	8003512 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40012300 	.word	0x40012300
 8003538:	40012000 	.word	0x40012000
 800353c:	10000012 	.word	0x10000012
 8003540:	20000004 	.word	0x20000004
 8003544:	431bde83 	.word	0x431bde83

08003548 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003550:	4b79      	ldr	r3, [pc, #484]	@ (8003738 <ADC_Init+0x1f0>)
 8003552:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	431a      	orrs	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800357c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	021a      	lsls	r2, r3, #8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80035a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6899      	ldr	r1, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	4a58      	ldr	r2, [pc, #352]	@ (800373c <ADC_Init+0x1f4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d022      	beq.n	8003626 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6899      	ldr	r1, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6899      	ldr	r1, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	e00f      	b.n	8003646 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003634:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003644:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0202 	bic.w	r2, r2, #2
 8003654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6899      	ldr	r1, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	7e1b      	ldrb	r3, [r3, #24]
 8003660:	005a      	lsls	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01b      	beq.n	80036ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003682:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003692:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	3b01      	subs	r3, #1
 80036a0:	035a      	lsls	r2, r3, #13
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	e007      	b.n	80036bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80036ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	051a      	lsls	r2, r3, #20
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6899      	ldr	r1, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036fe:	025a      	lsls	r2, r3, #9
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003716:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6899      	ldr	r1, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	029a      	lsls	r2, r3, #10
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40012300 	.word	0x40012300
 800373c:	0f000001 	.word	0x0f000001

08003740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003750:	4b0c      	ldr	r3, [pc, #48]	@ (8003784 <__NVIC_SetPriorityGrouping+0x44>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800375c:	4013      	ands	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800376c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003772:	4a04      	ldr	r2, [pc, #16]	@ (8003784 <__NVIC_SetPriorityGrouping+0x44>)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	60d3      	str	r3, [r2, #12]
}
 8003778:	bf00      	nop
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800378c:	4b04      	ldr	r3, [pc, #16]	@ (80037a0 <__NVIC_GetPriorityGrouping+0x18>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	f003 0307 	and.w	r3, r3, #7
}
 8003796:	4618      	mov	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	db0b      	blt.n	80037ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	f003 021f 	and.w	r2, r3, #31
 80037bc:	4907      	ldr	r1, [pc, #28]	@ (80037dc <__NVIC_EnableIRQ+0x38>)
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	2001      	movs	r0, #1
 80037c6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	e000e100 	.word	0xe000e100

080037e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	6039      	str	r1, [r7, #0]
 80037ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	db0a      	blt.n	800380a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	490c      	ldr	r1, [pc, #48]	@ (800382c <__NVIC_SetPriority+0x4c>)
 80037fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fe:	0112      	lsls	r2, r2, #4
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	440b      	add	r3, r1
 8003804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003808:	e00a      	b.n	8003820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	b2da      	uxtb	r2, r3
 800380e:	4908      	ldr	r1, [pc, #32]	@ (8003830 <__NVIC_SetPriority+0x50>)
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	3b04      	subs	r3, #4
 8003818:	0112      	lsls	r2, r2, #4
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	440b      	add	r3, r1
 800381e:	761a      	strb	r2, [r3, #24]
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000e100 	.word	0xe000e100
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003834:	b480      	push	{r7}
 8003836:	b089      	sub	sp, #36	@ 0x24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f1c3 0307 	rsb	r3, r3, #7
 800384e:	2b04      	cmp	r3, #4
 8003850:	bf28      	it	cs
 8003852:	2304      	movcs	r3, #4
 8003854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	3304      	adds	r3, #4
 800385a:	2b06      	cmp	r3, #6
 800385c:	d902      	bls.n	8003864 <NVIC_EncodePriority+0x30>
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	3b03      	subs	r3, #3
 8003862:	e000      	b.n	8003866 <NVIC_EncodePriority+0x32>
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003868:	f04f 32ff 	mov.w	r2, #4294967295
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43da      	mvns	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	401a      	ands	r2, r3
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800387c:	f04f 31ff 	mov.w	r1, #4294967295
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	fa01 f303 	lsl.w	r3, r1, r3
 8003886:	43d9      	mvns	r1, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800388c:	4313      	orrs	r3, r2
         );
}
 800388e:	4618      	mov	r0, r3
 8003890:	3724      	adds	r7, #36	@ 0x24
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff ff4c 	bl	8003740 <__NVIC_SetPriorityGrouping>
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038c2:	f7ff ff61 	bl	8003788 <__NVIC_GetPriorityGrouping>
 80038c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	6978      	ldr	r0, [r7, #20]
 80038ce:	f7ff ffb1 	bl	8003834 <NVIC_EncodePriority>
 80038d2:	4602      	mov	r2, r0
 80038d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d8:	4611      	mov	r1, r2
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff ff80 	bl	80037e0 <__NVIC_SetPriority>
}
 80038e0:	bf00      	nop
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ff54 	bl	80037a4 <__NVIC_EnableIRQ>
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003910:	f7ff fc98 	bl	8003244 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e099      	b.n	8003a54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003940:	e00f      	b.n	8003962 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003942:	f7ff fc7f 	bl	8003244 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b05      	cmp	r3, #5
 800394e:	d908      	bls.n	8003962 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2203      	movs	r2, #3
 800395a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e078      	b.n	8003a54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e8      	bne.n	8003942 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4b38      	ldr	r3, [pc, #224]	@ (8003a5c <HAL_DMA_Init+0x158>)
 800397c:	4013      	ands	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800398e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800399a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	2b04      	cmp	r3, #4
 80039ba:	d107      	bne.n	80039cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c4:	4313      	orrs	r3, r2
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f023 0307 	bic.w	r3, r3, #7
 80039e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d117      	bne.n	8003a26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00e      	beq.n	8003a26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fa0b 	bl	8003e24 <DMA_CheckFifoParam>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2240      	movs	r2, #64	@ 0x40
 8003a18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a22:	2301      	movs	r3, #1
 8003a24:	e016      	b.n	8003a54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f9c2 	bl	8003db8 <DMA_CalcBaseAndBitshift>
 8003a34:	4603      	mov	r3, r0
 8003a36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3c:	223f      	movs	r2, #63	@ 0x3f
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	f010803f 	.word	0xf010803f

08003a60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d004      	beq.n	8003a7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2280      	movs	r2, #128	@ 0x80
 8003a78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e00c      	b.n	8003a98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2205      	movs	r2, #5
 8003a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0201 	bic.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ab0:	4b8e      	ldr	r3, [pc, #568]	@ (8003cec <HAL_DMA_IRQHandler+0x248>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a8e      	ldr	r2, [pc, #568]	@ (8003cf0 <HAL_DMA_IRQHandler+0x24c>)
 8003ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aba:	0a9b      	lsrs	r3, r3, #10
 8003abc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ace:	2208      	movs	r2, #8
 8003ad0:	409a      	lsls	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d01a      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d013      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0204 	bic.w	r2, r2, #4
 8003af6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afc:	2208      	movs	r2, #8
 8003afe:	409a      	lsls	r2, r3
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b08:	f043 0201 	orr.w	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b14:	2201      	movs	r2, #1
 8003b16:	409a      	lsls	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d012      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00b      	beq.n	8003b46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b32:	2201      	movs	r2, #1
 8003b34:	409a      	lsls	r2, r3
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3e:	f043 0202 	orr.w	r2, r3, #2
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	409a      	lsls	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d012      	beq.n	8003b7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00b      	beq.n	8003b7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b68:	2204      	movs	r2, #4
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b74:	f043 0204 	orr.w	r2, r3, #4
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b80:	2210      	movs	r2, #16
 8003b82:	409a      	lsls	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d043      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d03c      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9e:	2210      	movs	r2, #16
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d018      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d108      	bne.n	8003bd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d024      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	4798      	blx	r3
 8003bd2:	e01f      	b.n	8003c14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01b      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
 8003be4:	e016      	b.n	8003c14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d107      	bne.n	8003c04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0208 	bic.w	r2, r2, #8
 8003c02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c18:	2220      	movs	r2, #32
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 808f 	beq.w	8003d44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 8087 	beq.w	8003d44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b05      	cmp	r3, #5
 8003c4c:	d136      	bne.n	8003cbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0216 	bic.w	r2, r2, #22
 8003c5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695a      	ldr	r2, [r3, #20]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d103      	bne.n	8003c7e <HAL_DMA_IRQHandler+0x1da>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0208 	bic.w	r2, r2, #8
 8003c8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c92:	223f      	movs	r2, #63	@ 0x3f
 8003c94:	409a      	lsls	r2, r3
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d07e      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4798      	blx	r3
        }
        return;
 8003cba:	e079      	b.n	8003db0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d01d      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10d      	bne.n	8003cf4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d031      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	4798      	blx	r3
 8003ce8:	e02c      	b.n	8003d44 <HAL_DMA_IRQHandler+0x2a0>
 8003cea:	bf00      	nop
 8003cec:	20000004 	.word	0x20000004
 8003cf0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d023      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3
 8003d04:	e01e      	b.n	8003d44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10f      	bne.n	8003d34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0210 	bic.w	r2, r2, #16
 8003d22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d032      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d022      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2205      	movs	r2, #5
 8003d5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0201 	bic.w	r2, r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	3301      	adds	r3, #1
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d307      	bcc.n	8003d8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f2      	bne.n	8003d70 <HAL_DMA_IRQHandler+0x2cc>
 8003d8a:	e000      	b.n	8003d8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	4798      	blx	r3
 8003dae:	e000      	b.n	8003db2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003db0:	bf00      	nop
    }
  }
}
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	3b10      	subs	r3, #16
 8003dc8:	4a14      	ldr	r2, [pc, #80]	@ (8003e1c <DMA_CalcBaseAndBitshift+0x64>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dd2:	4a13      	ldr	r2, [pc, #76]	@ (8003e20 <DMA_CalcBaseAndBitshift+0x68>)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d909      	bls.n	8003dfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003dee:	f023 0303 	bic.w	r3, r3, #3
 8003df2:	1d1a      	adds	r2, r3, #4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003df8:	e007      	b.n	8003e0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e02:	f023 0303 	bic.w	r3, r3, #3
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	aaaaaaab 	.word	0xaaaaaaab
 8003e20:	08010e30 	.word	0x08010e30

08003e24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d11f      	bne.n	8003e7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d856      	bhi.n	8003ef2 <DMA_CheckFifoParam+0xce>
 8003e44:	a201      	add	r2, pc, #4	@ (adr r2, 8003e4c <DMA_CheckFifoParam+0x28>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003e5d 	.word	0x08003e5d
 8003e50:	08003e6f 	.word	0x08003e6f
 8003e54:	08003e5d 	.word	0x08003e5d
 8003e58:	08003ef3 	.word	0x08003ef3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d046      	beq.n	8003ef6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e6c:	e043      	b.n	8003ef6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e76:	d140      	bne.n	8003efa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e7c:	e03d      	b.n	8003efa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e86:	d121      	bne.n	8003ecc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d837      	bhi.n	8003efe <DMA_CheckFifoParam+0xda>
 8003e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e94 <DMA_CheckFifoParam+0x70>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003eab 	.word	0x08003eab
 8003e9c:	08003ea5 	.word	0x08003ea5
 8003ea0:	08003ebd 	.word	0x08003ebd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea8:	e030      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d025      	beq.n	8003f02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eba:	e022      	b.n	8003f02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ec4:	d11f      	bne.n	8003f06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003eca:	e01c      	b.n	8003f06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d903      	bls.n	8003eda <DMA_CheckFifoParam+0xb6>
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d003      	beq.n	8003ee0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ed8:	e018      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
      break;
 8003ede:	e015      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00e      	beq.n	8003f0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef0:	e00b      	b.n	8003f0a <DMA_CheckFifoParam+0xe6>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e00a      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e008      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;
 8003efa:	bf00      	nop
 8003efc:	e006      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;
 8003efe:	bf00      	nop
 8003f00:	e004      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;
 8003f02:	bf00      	nop
 8003f04:	e002      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;   
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <DMA_CheckFifoParam+0xe8>
      break;
 8003f0a:	bf00      	nop
    }
  } 
  
  return status; 
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop

08003f1c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003f2e:	4b23      	ldr	r3, [pc, #140]	@ (8003fbc <HAL_FLASH_Program+0xa0>)
 8003f30:	7e1b      	ldrb	r3, [r3, #24]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_FLASH_Program+0x1e>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e03b      	b.n	8003fb2 <HAL_FLASH_Program+0x96>
 8003f3a:	4b20      	ldr	r3, [pc, #128]	@ (8003fbc <HAL_FLASH_Program+0xa0>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f40:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f44:	f000 f87c 	bl	8004040 <FLASH_WaitForLastOperation>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d12b      	bne.n	8003faa <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d105      	bne.n	8003f64 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003f58:	783b      	ldrb	r3, [r7, #0]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	68b8      	ldr	r0, [r7, #8]
 8003f5e:	f000 f927 	bl	80041b0 <FLASH_Program_Byte>
 8003f62:	e016      	b.n	8003f92 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d105      	bne.n	8003f76 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003f6a:	883b      	ldrh	r3, [r7, #0]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	68b8      	ldr	r0, [r7, #8]
 8003f70:	f000 f8fa 	bl	8004168 <FLASH_Program_HalfWord>
 8003f74:	e00d      	b.n	8003f92 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d105      	bne.n	8003f88 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	68b8      	ldr	r0, [r7, #8]
 8003f82:	f000 f8cf 	bl	8004124 <FLASH_Program_Word>
 8003f86:	e004      	b.n	8003f92 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f8c:	68b8      	ldr	r0, [r7, #8]
 8003f8e:	f000 f897 	bl	80040c0 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003f92:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003f96:	f000 f853 	bl	8004040 <FLASH_WaitForLastOperation>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003f9e:	4b08      	ldr	r3, [pc, #32]	@ (8003fc0 <HAL_FLASH_Program+0xa4>)
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	4a07      	ldr	r2, [pc, #28]	@ (8003fc0 <HAL_FLASH_Program+0xa4>)
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003faa:	4b04      	ldr	r3, [pc, #16]	@ (8003fbc <HAL_FLASH_Program+0xa0>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	761a      	strb	r2, [r3, #24]

  return status;
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000dc8 	.word	0x20000dc8
 8003fc0:	40023c00 	.word	0x40023c00

08003fc4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003fce:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <HAL_FLASH_Unlock+0x38>)
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	da0b      	bge.n	8003fee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003fd6:	4b09      	ldr	r3, [pc, #36]	@ (8003ffc <HAL_FLASH_Unlock+0x38>)
 8003fd8:	4a09      	ldr	r2, [pc, #36]	@ (8004000 <HAL_FLASH_Unlock+0x3c>)
 8003fda:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003fdc:	4b07      	ldr	r3, [pc, #28]	@ (8003ffc <HAL_FLASH_Unlock+0x38>)
 8003fde:	4a09      	ldr	r2, [pc, #36]	@ (8004004 <HAL_FLASH_Unlock+0x40>)
 8003fe0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003fe2:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <HAL_FLASH_Unlock+0x38>)
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	da01      	bge.n	8003fee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003fee:	79fb      	ldrb	r3, [r7, #7]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40023c00 	.word	0x40023c00
 8004000:	45670123 	.word	0x45670123
 8004004:	cdef89ab 	.word	0xcdef89ab

08004008 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800400c:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <HAL_FLASH_Lock+0x1c>)
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	4a04      	ldr	r2, [pc, #16]	@ (8004024 <HAL_FLASH_Lock+0x1c>)
 8004012:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004016:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40023c00 	.word	0x40023c00

08004028 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag
  */
uint32_t HAL_FLASH_GetError(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 800402c:	4b03      	ldr	r3, [pc, #12]	@ (800403c <HAL_FLASH_GetError+0x14>)
 800402e:	69db      	ldr	r3, [r3, #28]
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000dc8 	.word	0x20000dc8

08004040 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800404c:	4b1a      	ldr	r3, [pc, #104]	@ (80040b8 <FLASH_WaitForLastOperation+0x78>)
 800404e:	2200      	movs	r2, #0
 8004050:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004052:	f7ff f8f7 	bl	8003244 <HAL_GetTick>
 8004056:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8004058:	e010      	b.n	800407c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d00c      	beq.n	800407c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <FLASH_WaitForLastOperation+0x38>
 8004068:	f7ff f8ec 	bl	8003244 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	429a      	cmp	r2, r3
 8004076:	d201      	bcs.n	800407c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e019      	b.n	80040b0 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800407c:	4b0f      	ldr	r3, [pc, #60]	@ (80040bc <FLASH_WaitForLastOperation+0x7c>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e8      	bne.n	800405a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004088:	4b0c      	ldr	r3, [pc, #48]	@ (80040bc <FLASH_WaitForLastOperation+0x7c>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004094:	4b09      	ldr	r3, [pc, #36]	@ (80040bc <FLASH_WaitForLastOperation+0x7c>)
 8004096:	2201      	movs	r2, #1
 8004098:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800409a:	4b08      	ldr	r3, [pc, #32]	@ (80040bc <FLASH_WaitForLastOperation+0x7c>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80040a6:	f000 f8a5 	bl	80041f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0

}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	20000dc8 	.word	0x20000dc8
 80040bc:	40023c00 	.word	0x40023c00

080040c0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80040cc:	4b14      	ldr	r3, [pc, #80]	@ (8004120 <FLASH_Program_DoubleWord+0x60>)
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	4a13      	ldr	r2, [pc, #76]	@ (8004120 <FLASH_Program_DoubleWord+0x60>)
 80040d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80040d8:	4b11      	ldr	r3, [pc, #68]	@ (8004120 <FLASH_Program_DoubleWord+0x60>)
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	4a10      	ldr	r2, [pc, #64]	@ (8004120 <FLASH_Program_DoubleWord+0x60>)
 80040de:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80040e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80040e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004120 <FLASH_Program_DoubleWord+0x60>)
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004120 <FLASH_Program_DoubleWord+0x60>)
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80040f6:	f3bf 8f6f 	isb	sy
}
 80040fa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80040fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	000a      	movs	r2, r1
 800410a:	2300      	movs	r3, #0
 800410c:	68f9      	ldr	r1, [r7, #12]
 800410e:	3104      	adds	r1, #4
 8004110:	4613      	mov	r3, r2
 8004112:	600b      	str	r3, [r1, #0]
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	40023c00 	.word	0x40023c00

08004124 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800412e:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <FLASH_Program_Word+0x40>)
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	4a0c      	ldr	r2, [pc, #48]	@ (8004164 <FLASH_Program_Word+0x40>)
 8004134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004138:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800413a:	4b0a      	ldr	r3, [pc, #40]	@ (8004164 <FLASH_Program_Word+0x40>)
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	4a09      	ldr	r2, [pc, #36]	@ (8004164 <FLASH_Program_Word+0x40>)
 8004140:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004144:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004146:	4b07      	ldr	r3, [pc, #28]	@ (8004164 <FLASH_Program_Word+0x40>)
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	4a06      	ldr	r2, [pc, #24]	@ (8004164 <FLASH_Program_Word+0x40>)
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	601a      	str	r2, [r3, #0]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	40023c00 	.word	0x40023c00

08004168 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004174:	4b0d      	ldr	r3, [pc, #52]	@ (80041ac <FLASH_Program_HalfWord+0x44>)
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	4a0c      	ldr	r2, [pc, #48]	@ (80041ac <FLASH_Program_HalfWord+0x44>)
 800417a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800417e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004180:	4b0a      	ldr	r3, [pc, #40]	@ (80041ac <FLASH_Program_HalfWord+0x44>)
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	4a09      	ldr	r2, [pc, #36]	@ (80041ac <FLASH_Program_HalfWord+0x44>)
 8004186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800418a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800418c:	4b07      	ldr	r3, [pc, #28]	@ (80041ac <FLASH_Program_HalfWord+0x44>)
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	4a06      	ldr	r2, [pc, #24]	@ (80041ac <FLASH_Program_HalfWord+0x44>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	887a      	ldrh	r2, [r7, #2]
 800419c:	801a      	strh	r2, [r3, #0]
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40023c00 	.word	0x40023c00

080041b0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80041bc:	4b0c      	ldr	r3, [pc, #48]	@ (80041f0 <FLASH_Program_Byte+0x40>)
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	4a0b      	ldr	r2, [pc, #44]	@ (80041f0 <FLASH_Program_Byte+0x40>)
 80041c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80041c8:	4b09      	ldr	r3, [pc, #36]	@ (80041f0 <FLASH_Program_Byte+0x40>)
 80041ca:	4a09      	ldr	r2, [pc, #36]	@ (80041f0 <FLASH_Program_Byte+0x40>)
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80041d0:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <FLASH_Program_Byte+0x40>)
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	4a06      	ldr	r2, [pc, #24]	@ (80041f0 <FLASH_Program_Byte+0x40>)
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	701a      	strb	r2, [r3, #0]
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40023c00 	.word	0x40023c00

080041f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80041f8:	4b2f      	ldr	r3, [pc, #188]	@ (80042b8 <FLASH_SetErrorCode+0xc4>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004204:	4b2d      	ldr	r3, [pc, #180]	@ (80042bc <FLASH_SetErrorCode+0xc8>)
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	f043 0310 	orr.w	r3, r3, #16
 800420c:	4a2b      	ldr	r2, [pc, #172]	@ (80042bc <FLASH_SetErrorCode+0xc8>)
 800420e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004210:	4b29      	ldr	r3, [pc, #164]	@ (80042b8 <FLASH_SetErrorCode+0xc4>)
 8004212:	2210      	movs	r2, #16
 8004214:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004216:	4b28      	ldr	r3, [pc, #160]	@ (80042b8 <FLASH_SetErrorCode+0xc4>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004222:	4b26      	ldr	r3, [pc, #152]	@ (80042bc <FLASH_SetErrorCode+0xc8>)
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f043 0308 	orr.w	r3, r3, #8
 800422a:	4a24      	ldr	r2, [pc, #144]	@ (80042bc <FLASH_SetErrorCode+0xc8>)
 800422c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800422e:	4b22      	ldr	r3, [pc, #136]	@ (80042b8 <FLASH_SetErrorCode+0xc4>)
 8004230:	2220      	movs	r2, #32
 8004232:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004234:	4b20      	ldr	r3, [pc, #128]	@ (80042b8 <FLASH_SetErrorCode+0xc4>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004240:	4b1e      	ldr	r3, [pc, #120]	@ (80042bc <FLASH_SetErrorCode+0xc8>)
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f043 0304 	orr.w	r3, r3, #4
 8004248:	4a1c      	ldr	r2, [pc, #112]	@ (80042bc <FLASH_SetErrorCode+0xc8>)
 800424a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800424c:	4b1a      	ldr	r3, [pc, #104]	@ (80042b8 <FLASH_SetErrorCode+0xc4>)
 800424e:	2240      	movs	r2, #64	@ 0x40
 8004250:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004252:	4b19      	ldr	r3, [pc, #100]	@ (80042b8 <FLASH_SetErrorCode+0xc4>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425a:	2b00      	cmp	r3, #0
 800425c:	d008      	beq.n	8004270 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800425e:	4b17      	ldr	r3, [pc, #92]	@ (80042bc <FLASH_SetErrorCode+0xc8>)
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f043 0302 	orr.w	r3, r3, #2
 8004266:	4a15      	ldr	r2, [pc, #84]	@ (80042bc <FLASH_SetErrorCode+0xc8>)
 8004268:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800426a:	4b13      	ldr	r3, [pc, #76]	@ (80042b8 <FLASH_SetErrorCode+0xc4>)
 800426c:	2280      	movs	r2, #128	@ 0x80
 800426e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004270:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <FLASH_SetErrorCode+0xc4>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d009      	beq.n	8004290 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800427c:	4b0f      	ldr	r3, [pc, #60]	@ (80042bc <FLASH_SetErrorCode+0xc8>)
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	4a0d      	ldr	r2, [pc, #52]	@ (80042bc <FLASH_SetErrorCode+0xc8>)
 8004286:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004288:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <FLASH_SetErrorCode+0xc4>)
 800428a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800428e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004290:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <FLASH_SetErrorCode+0xc4>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800429c:	4b07      	ldr	r3, [pc, #28]	@ (80042bc <FLASH_SetErrorCode+0xc8>)
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f043 0320 	orr.w	r3, r3, #32
 80042a4:	4a05      	ldr	r2, [pc, #20]	@ (80042bc <FLASH_SetErrorCode+0xc8>)
 80042a6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80042a8:	4b03      	ldr	r3, [pc, #12]	@ (80042b8 <FLASH_SetErrorCode+0xc4>)
 80042aa:	2202      	movs	r2, #2
 80042ac:	60da      	str	r2, [r3, #12]
  }
}
 80042ae:	bf00      	nop
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	40023c00 	.word	0x40023c00
 80042bc:	20000dc8 	.word	0x20000dc8

080042c0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80042d2:	4b31      	ldr	r3, [pc, #196]	@ (8004398 <HAL_FLASHEx_Erase+0xd8>)
 80042d4:	7e1b      	ldrb	r3, [r3, #24]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_FLASHEx_Erase+0x1e>
 80042da:	2302      	movs	r3, #2
 80042dc:	e058      	b.n	8004390 <HAL_FLASHEx_Erase+0xd0>
 80042de:	4b2e      	ldr	r3, [pc, #184]	@ (8004398 <HAL_FLASHEx_Erase+0xd8>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042e4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80042e8:	f7ff feaa 	bl	8004040 <FLASH_WaitForLastOperation>
 80042ec:	4603      	mov	r3, r0
 80042ee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d148      	bne.n	8004388 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	f04f 32ff 	mov.w	r2, #4294967295
 80042fc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d115      	bne.n	8004332 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	b2da      	uxtb	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f000 f844 	bl	80043a0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004318:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800431c:	f7ff fe90 	bl	8004040 <FLASH_WaitForLastOperation>
 8004320:	4603      	mov	r3, r0
 8004322:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004324:	4b1d      	ldr	r3, [pc, #116]	@ (800439c <HAL_FLASHEx_Erase+0xdc>)
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	4a1c      	ldr	r2, [pc, #112]	@ (800439c <HAL_FLASHEx_Erase+0xdc>)
 800432a:	f023 0304 	bic.w	r3, r3, #4
 800432e:	6113      	str	r3, [r2, #16]
 8004330:	e028      	b.n	8004384 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	e01c      	b.n	8004374 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	b2db      	uxtb	r3, r3
 8004340:	4619      	mov	r1, r3
 8004342:	68b8      	ldr	r0, [r7, #8]
 8004344:	f000 f850 	bl	80043e8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004348:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800434c:	f7ff fe78 	bl	8004040 <FLASH_WaitForLastOperation>
 8004350:	4603      	mov	r3, r0
 8004352:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004354:	4b11      	ldr	r3, [pc, #68]	@ (800439c <HAL_FLASHEx_Erase+0xdc>)
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	4a10      	ldr	r2, [pc, #64]	@ (800439c <HAL_FLASHEx_Erase+0xdc>)
 800435a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800435e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	601a      	str	r2, [r3, #0]
          break;
 800436c:	e00a      	b.n	8004384 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	3301      	adds	r3, #1
 8004372:	60bb      	str	r3, [r7, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68da      	ldr	r2, [r3, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4413      	add	r3, r2
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	429a      	cmp	r2, r3
 8004382:	d3da      	bcc.n	800433a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004384:	f000 f878 	bl	8004478 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004388:	4b03      	ldr	r3, [pc, #12]	@ (8004398 <HAL_FLASHEx_Erase+0xd8>)
 800438a:	2200      	movs	r2, #0
 800438c:	761a      	strb	r2, [r3, #24]

  return status;
 800438e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20000dc8 	.word	0x20000dc8
 800439c:	40023c00 	.word	0x40023c00

080043a0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	6039      	str	r1, [r7, #0]
 80043aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80043ac:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <FLASH_MassErase+0x44>)
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	4a0c      	ldr	r2, [pc, #48]	@ (80043e4 <FLASH_MassErase+0x44>)
 80043b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80043b8:	4b0a      	ldr	r3, [pc, #40]	@ (80043e4 <FLASH_MassErase+0x44>)
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	4a09      	ldr	r2, [pc, #36]	@ (80043e4 <FLASH_MassErase+0x44>)
 80043be:	f043 0304 	orr.w	r3, r3, #4
 80043c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80043c4:	4b07      	ldr	r3, [pc, #28]	@ (80043e4 <FLASH_MassErase+0x44>)
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	4313      	orrs	r3, r2
 80043ce:	4a05      	ldr	r2, [pc, #20]	@ (80043e4 <FLASH_MassErase+0x44>)
 80043d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d4:	6113      	str	r3, [r2, #16]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40023c00 	.word	0x40023c00

080043e8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
 8004402:	e010      	b.n	8004426 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d103      	bne.n	8004412 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800440a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	e009      	b.n	8004426 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d103      	bne.n	8004420 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004418:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	e002      	b.n	8004426 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004420:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004424:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004426:	4b13      	ldr	r3, [pc, #76]	@ (8004474 <FLASH_Erase_Sector+0x8c>)
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	4a12      	ldr	r2, [pc, #72]	@ (8004474 <FLASH_Erase_Sector+0x8c>)
 800442c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004430:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004432:	4b10      	ldr	r3, [pc, #64]	@ (8004474 <FLASH_Erase_Sector+0x8c>)
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	490f      	ldr	r1, [pc, #60]	@ (8004474 <FLASH_Erase_Sector+0x8c>)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800443e:	4b0d      	ldr	r3, [pc, #52]	@ (8004474 <FLASH_Erase_Sector+0x8c>)
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	4a0c      	ldr	r2, [pc, #48]	@ (8004474 <FLASH_Erase_Sector+0x8c>)
 8004444:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004448:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800444a:	4b0a      	ldr	r3, [pc, #40]	@ (8004474 <FLASH_Erase_Sector+0x8c>)
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4313      	orrs	r3, r2
 8004454:	4a07      	ldr	r2, [pc, #28]	@ (8004474 <FLASH_Erase_Sector+0x8c>)
 8004456:	f043 0302 	orr.w	r3, r3, #2
 800445a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800445c:	4b05      	ldr	r3, [pc, #20]	@ (8004474 <FLASH_Erase_Sector+0x8c>)
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	4a04      	ldr	r2, [pc, #16]	@ (8004474 <FLASH_Erase_Sector+0x8c>)
 8004462:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004466:	6113      	str	r3, [r2, #16]
}
 8004468:	bf00      	nop
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	40023c00 	.word	0x40023c00

08004478 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800447c:	4b20      	ldr	r3, [pc, #128]	@ (8004500 <FLASH_FlushCaches+0x88>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004484:	2b00      	cmp	r3, #0
 8004486:	d017      	beq.n	80044b8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004488:	4b1d      	ldr	r3, [pc, #116]	@ (8004500 <FLASH_FlushCaches+0x88>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1c      	ldr	r2, [pc, #112]	@ (8004500 <FLASH_FlushCaches+0x88>)
 800448e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004492:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004494:	4b1a      	ldr	r3, [pc, #104]	@ (8004500 <FLASH_FlushCaches+0x88>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a19      	ldr	r2, [pc, #100]	@ (8004500 <FLASH_FlushCaches+0x88>)
 800449a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4b17      	ldr	r3, [pc, #92]	@ (8004500 <FLASH_FlushCaches+0x88>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a16      	ldr	r2, [pc, #88]	@ (8004500 <FLASH_FlushCaches+0x88>)
 80044a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044aa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044ac:	4b14      	ldr	r3, [pc, #80]	@ (8004500 <FLASH_FlushCaches+0x88>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a13      	ldr	r2, [pc, #76]	@ (8004500 <FLASH_FlushCaches+0x88>)
 80044b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80044b6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80044b8:	4b11      	ldr	r3, [pc, #68]	@ (8004500 <FLASH_FlushCaches+0x88>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d017      	beq.n	80044f4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80044c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004500 <FLASH_FlushCaches+0x88>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004500 <FLASH_FlushCaches+0x88>)
 80044ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044ce:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80044d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004500 <FLASH_FlushCaches+0x88>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004500 <FLASH_FlushCaches+0x88>)
 80044d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	4b08      	ldr	r3, [pc, #32]	@ (8004500 <FLASH_FlushCaches+0x88>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a07      	ldr	r2, [pc, #28]	@ (8004500 <FLASH_FlushCaches+0x88>)
 80044e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044e6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80044e8:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <FLASH_FlushCaches+0x88>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a04      	ldr	r2, [pc, #16]	@ (8004500 <FLASH_FlushCaches+0x88>)
 80044ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044f2:	6013      	str	r3, [r2, #0]
  }
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40023c00 	.word	0x40023c00

08004504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004504:	b480      	push	{r7}
 8004506:	b089      	sub	sp, #36	@ 0x24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800450e:	2300      	movs	r3, #0
 8004510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004512:	2300      	movs	r3, #0
 8004514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	e159      	b.n	80047d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004520:	2201      	movs	r2, #1
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4013      	ands	r3, r2
 8004532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	429a      	cmp	r2, r3
 800453a:	f040 8148 	bne.w	80047ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b01      	cmp	r3, #1
 8004548:	d005      	beq.n	8004556 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004552:	2b02      	cmp	r3, #2
 8004554:	d130      	bne.n	80045b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	2203      	movs	r2, #3
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800458c:	2201      	movs	r2, #1
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	f003 0201 	and.w	r2, r3, #1
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d017      	beq.n	80045f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	2203      	movs	r2, #3
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	43db      	mvns	r3, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4013      	ands	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d123      	bne.n	8004648 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	08da      	lsrs	r2, r3, #3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3208      	adds	r2, #8
 8004608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800460c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	220f      	movs	r2, #15
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	08da      	lsrs	r2, r3, #3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3208      	adds	r2, #8
 8004642:	69b9      	ldr	r1, [r7, #24]
 8004644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	2203      	movs	r2, #3
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4013      	ands	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 0203 	and.w	r2, r3, #3
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4313      	orrs	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80a2 	beq.w	80047ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	4b57      	ldr	r3, [pc, #348]	@ (80047ec <HAL_GPIO_Init+0x2e8>)
 8004690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004692:	4a56      	ldr	r2, [pc, #344]	@ (80047ec <HAL_GPIO_Init+0x2e8>)
 8004694:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004698:	6453      	str	r3, [r2, #68]	@ 0x44
 800469a:	4b54      	ldr	r3, [pc, #336]	@ (80047ec <HAL_GPIO_Init+0x2e8>)
 800469c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046a6:	4a52      	ldr	r2, [pc, #328]	@ (80047f0 <HAL_GPIO_Init+0x2ec>)
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	3302      	adds	r3, #2
 80046ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	220f      	movs	r2, #15
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4013      	ands	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a49      	ldr	r2, [pc, #292]	@ (80047f4 <HAL_GPIO_Init+0x2f0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d019      	beq.n	8004706 <HAL_GPIO_Init+0x202>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a48      	ldr	r2, [pc, #288]	@ (80047f8 <HAL_GPIO_Init+0x2f4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <HAL_GPIO_Init+0x1fe>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a47      	ldr	r2, [pc, #284]	@ (80047fc <HAL_GPIO_Init+0x2f8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00d      	beq.n	80046fe <HAL_GPIO_Init+0x1fa>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a46      	ldr	r2, [pc, #280]	@ (8004800 <HAL_GPIO_Init+0x2fc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d007      	beq.n	80046fa <HAL_GPIO_Init+0x1f6>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a45      	ldr	r2, [pc, #276]	@ (8004804 <HAL_GPIO_Init+0x300>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d101      	bne.n	80046f6 <HAL_GPIO_Init+0x1f2>
 80046f2:	2304      	movs	r3, #4
 80046f4:	e008      	b.n	8004708 <HAL_GPIO_Init+0x204>
 80046f6:	2307      	movs	r3, #7
 80046f8:	e006      	b.n	8004708 <HAL_GPIO_Init+0x204>
 80046fa:	2303      	movs	r3, #3
 80046fc:	e004      	b.n	8004708 <HAL_GPIO_Init+0x204>
 80046fe:	2302      	movs	r3, #2
 8004700:	e002      	b.n	8004708 <HAL_GPIO_Init+0x204>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_GPIO_Init+0x204>
 8004706:	2300      	movs	r3, #0
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	f002 0203 	and.w	r2, r2, #3
 800470e:	0092      	lsls	r2, r2, #2
 8004710:	4093      	lsls	r3, r2
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4313      	orrs	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004718:	4935      	ldr	r1, [pc, #212]	@ (80047f0 <HAL_GPIO_Init+0x2ec>)
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	3302      	adds	r3, #2
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004726:	4b38      	ldr	r3, [pc, #224]	@ (8004808 <HAL_GPIO_Init+0x304>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	43db      	mvns	r3, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4013      	ands	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800474a:	4a2f      	ldr	r2, [pc, #188]	@ (8004808 <HAL_GPIO_Init+0x304>)
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004750:	4b2d      	ldr	r3, [pc, #180]	@ (8004808 <HAL_GPIO_Init+0x304>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004774:	4a24      	ldr	r2, [pc, #144]	@ (8004808 <HAL_GPIO_Init+0x304>)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800477a:	4b23      	ldr	r3, [pc, #140]	@ (8004808 <HAL_GPIO_Init+0x304>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	43db      	mvns	r3, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4013      	ands	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800479e:	4a1a      	ldr	r2, [pc, #104]	@ (8004808 <HAL_GPIO_Init+0x304>)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047a4:	4b18      	ldr	r3, [pc, #96]	@ (8004808 <HAL_GPIO_Init+0x304>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4013      	ands	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047c8:	4a0f      	ldr	r2, [pc, #60]	@ (8004808 <HAL_GPIO_Init+0x304>)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	3301      	adds	r3, #1
 80047d2:	61fb      	str	r3, [r7, #28]
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	2b0f      	cmp	r3, #15
 80047d8:	f67f aea2 	bls.w	8004520 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	3724      	adds	r7, #36	@ 0x24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40013800 	.word	0x40013800
 80047f4:	40020000 	.word	0x40020000
 80047f8:	40020400 	.word	0x40020400
 80047fc:	40020800 	.word	0x40020800
 8004800:	40020c00 	.word	0x40020c00
 8004804:	40021000 	.word	0x40021000
 8004808:	40013c00 	.word	0x40013c00

0800480c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	807b      	strh	r3, [r7, #2]
 8004818:	4613      	mov	r3, r2
 800481a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800481c:	787b      	ldrb	r3, [r7, #1]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004822:	887a      	ldrh	r2, [r7, #2]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004828:	e003      	b.n	8004832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800482a:	887b      	ldrh	r3, [r7, #2]
 800482c:	041a      	lsls	r2, r3, #16
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	619a      	str	r2, [r3, #24]
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e12b      	b.n	8004aaa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fd fe2e 	bl	80024c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	@ 0x24
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004892:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048a4:	f000 fd40 	bl	8005328 <HAL_RCC_GetPCLK1Freq>
 80048a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4a81      	ldr	r2, [pc, #516]	@ (8004ab4 <HAL_I2C_Init+0x274>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d807      	bhi.n	80048c4 <HAL_I2C_Init+0x84>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a80      	ldr	r2, [pc, #512]	@ (8004ab8 <HAL_I2C_Init+0x278>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	bf94      	ite	ls
 80048bc:	2301      	movls	r3, #1
 80048be:	2300      	movhi	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	e006      	b.n	80048d2 <HAL_I2C_Init+0x92>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a7d      	ldr	r2, [pc, #500]	@ (8004abc <HAL_I2C_Init+0x27c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	bf94      	ite	ls
 80048cc:	2301      	movls	r3, #1
 80048ce:	2300      	movhi	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e0e7      	b.n	8004aaa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4a78      	ldr	r2, [pc, #480]	@ (8004ac0 <HAL_I2C_Init+0x280>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	0c9b      	lsrs	r3, r3, #18
 80048e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4a6a      	ldr	r2, [pc, #424]	@ (8004ab4 <HAL_I2C_Init+0x274>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d802      	bhi.n	8004914 <HAL_I2C_Init+0xd4>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	3301      	adds	r3, #1
 8004912:	e009      	b.n	8004928 <HAL_I2C_Init+0xe8>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	4a69      	ldr	r2, [pc, #420]	@ (8004ac4 <HAL_I2C_Init+0x284>)
 8004920:	fba2 2303 	umull	r2, r3, r2, r3
 8004924:	099b      	lsrs	r3, r3, #6
 8004926:	3301      	adds	r3, #1
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6812      	ldr	r2, [r2, #0]
 800492c:	430b      	orrs	r3, r1
 800492e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800493a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	495c      	ldr	r1, [pc, #368]	@ (8004ab4 <HAL_I2C_Init+0x274>)
 8004944:	428b      	cmp	r3, r1
 8004946:	d819      	bhi.n	800497c <HAL_I2C_Init+0x13c>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1e59      	subs	r1, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	fbb1 f3f3 	udiv	r3, r1, r3
 8004956:	1c59      	adds	r1, r3, #1
 8004958:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800495c:	400b      	ands	r3, r1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <HAL_I2C_Init+0x138>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1e59      	subs	r1, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004970:	3301      	adds	r3, #1
 8004972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004976:	e051      	b.n	8004a1c <HAL_I2C_Init+0x1dc>
 8004978:	2304      	movs	r3, #4
 800497a:	e04f      	b.n	8004a1c <HAL_I2C_Init+0x1dc>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d111      	bne.n	80049a8 <HAL_I2C_Init+0x168>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	1e58      	subs	r0, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6859      	ldr	r1, [r3, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	440b      	add	r3, r1
 8004992:	fbb0 f3f3 	udiv	r3, r0, r3
 8004996:	3301      	adds	r3, #1
 8004998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800499c:	2b00      	cmp	r3, #0
 800499e:	bf0c      	ite	eq
 80049a0:	2301      	moveq	r3, #1
 80049a2:	2300      	movne	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	e012      	b.n	80049ce <HAL_I2C_Init+0x18e>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	1e58      	subs	r0, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6859      	ldr	r1, [r3, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	0099      	lsls	r1, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80049be:	3301      	adds	r3, #1
 80049c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bf0c      	ite	eq
 80049c8:	2301      	moveq	r3, #1
 80049ca:	2300      	movne	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_I2C_Init+0x196>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e022      	b.n	8004a1c <HAL_I2C_Init+0x1dc>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10e      	bne.n	80049fc <HAL_I2C_Init+0x1bc>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1e58      	subs	r0, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6859      	ldr	r1, [r3, #4]
 80049e6:	460b      	mov	r3, r1
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	440b      	add	r3, r1
 80049ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80049f0:	3301      	adds	r3, #1
 80049f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049fa:	e00f      	b.n	8004a1c <HAL_I2C_Init+0x1dc>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	1e58      	subs	r0, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6859      	ldr	r1, [r3, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	0099      	lsls	r1, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a12:	3301      	adds	r3, #1
 8004a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	6809      	ldr	r1, [r1, #0]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69da      	ldr	r2, [r3, #28]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6911      	ldr	r1, [r2, #16]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	68d2      	ldr	r2, [r2, #12]
 8004a56:	4311      	orrs	r1, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	430b      	orrs	r3, r1
 8004a5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695a      	ldr	r2, [r3, #20]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	000186a0 	.word	0x000186a0
 8004ab8:	001e847f 	.word	0x001e847f
 8004abc:	003d08ff 	.word	0x003d08ff
 8004ac0:	431bde83 	.word	0x431bde83
 8004ac4:	10624dd3 	.word	0x10624dd3

08004ac8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e267      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d075      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ae6:	4b88      	ldr	r3, [pc, #544]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 030c 	and.w	r3, r3, #12
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d00c      	beq.n	8004b0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004af2:	4b85      	ldr	r3, [pc, #532]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d112      	bne.n	8004b24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004afe:	4b82      	ldr	r3, [pc, #520]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b0a:	d10b      	bne.n	8004b24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d05b      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x108>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d157      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e242      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b2c:	d106      	bne.n	8004b3c <HAL_RCC_OscConfig+0x74>
 8004b2e:	4b76      	ldr	r3, [pc, #472]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a75      	ldr	r2, [pc, #468]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e01d      	b.n	8004b78 <HAL_RCC_OscConfig+0xb0>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x98>
 8004b46:	4b70      	ldr	r3, [pc, #448]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a6f      	ldr	r2, [pc, #444]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	4b6d      	ldr	r3, [pc, #436]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a6c      	ldr	r2, [pc, #432]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e00b      	b.n	8004b78 <HAL_RCC_OscConfig+0xb0>
 8004b60:	4b69      	ldr	r3, [pc, #420]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a68      	ldr	r2, [pc, #416]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	4b66      	ldr	r3, [pc, #408]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a65      	ldr	r2, [pc, #404]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d013      	beq.n	8004ba8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7fe fb60 	bl	8003244 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fe fb5c 	bl	8003244 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	@ 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e207      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b5b      	ldr	r3, [pc, #364]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0xc0>
 8004ba6:	e014      	b.n	8004bd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba8:	f7fe fb4c 	bl	8003244 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fe fb48 	bl	8003244 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	@ 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e1f3      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc2:	4b51      	ldr	r3, [pc, #324]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0xe8>
 8004bce:	e000      	b.n	8004bd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d063      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bde:	4b4a      	ldr	r3, [pc, #296]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bea:	4b47      	ldr	r3, [pc, #284]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d11c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bf6:	4b44      	ldr	r3, [pc, #272]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d116      	bne.n	8004c30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	4b41      	ldr	r3, [pc, #260]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_RCC_OscConfig+0x152>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d001      	beq.n	8004c1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e1c7      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4937      	ldr	r1, [pc, #220]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2e:	e03a      	b.n	8004ca6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d020      	beq.n	8004c7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c38:	4b34      	ldr	r3, [pc, #208]	@ (8004d0c <HAL_RCC_OscConfig+0x244>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fe fb01 	bl	8003244 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c46:	f7fe fafd 	bl	8003244 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e1a8      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c58:	4b2b      	ldr	r3, [pc, #172]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c64:	4b28      	ldr	r3, [pc, #160]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4925      	ldr	r1, [pc, #148]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	600b      	str	r3, [r1, #0]
 8004c78:	e015      	b.n	8004ca6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7a:	4b24      	ldr	r3, [pc, #144]	@ (8004d0c <HAL_RCC_OscConfig+0x244>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fe fae0 	bl	8003244 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c88:	f7fe fadc 	bl	8003244 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e187      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d036      	beq.n	8004d20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d016      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cba:	4b15      	ldr	r3, [pc, #84]	@ (8004d10 <HAL_RCC_OscConfig+0x248>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc0:	f7fe fac0 	bl	8003244 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc8:	f7fe fabc 	bl	8003244 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e167      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cda:	4b0b      	ldr	r3, [pc, #44]	@ (8004d08 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x200>
 8004ce6:	e01b      	b.n	8004d20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce8:	4b09      	ldr	r3, [pc, #36]	@ (8004d10 <HAL_RCC_OscConfig+0x248>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cee:	f7fe faa9 	bl	8003244 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf4:	e00e      	b.n	8004d14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf6:	f7fe faa5 	bl	8003244 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d907      	bls.n	8004d14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e150      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	42470000 	.word	0x42470000
 8004d10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d14:	4b88      	ldr	r3, [pc, #544]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004d16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1ea      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8097 	beq.w	8004e5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d32:	4b81      	ldr	r3, [pc, #516]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10f      	bne.n	8004d5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	4b7d      	ldr	r3, [pc, #500]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	4a7c      	ldr	r2, [pc, #496]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5e:	4b77      	ldr	r3, [pc, #476]	@ (8004f3c <HAL_RCC_OscConfig+0x474>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d118      	bne.n	8004d9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d6a:	4b74      	ldr	r3, [pc, #464]	@ (8004f3c <HAL_RCC_OscConfig+0x474>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a73      	ldr	r2, [pc, #460]	@ (8004f3c <HAL_RCC_OscConfig+0x474>)
 8004d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d76:	f7fe fa65 	bl	8003244 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7e:	f7fe fa61 	bl	8003244 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e10c      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d90:	4b6a      	ldr	r3, [pc, #424]	@ (8004f3c <HAL_RCC_OscConfig+0x474>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0f0      	beq.n	8004d7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d106      	bne.n	8004db2 <HAL_RCC_OscConfig+0x2ea>
 8004da4:	4b64      	ldr	r3, [pc, #400]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da8:	4a63      	ldr	r2, [pc, #396]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db0:	e01c      	b.n	8004dec <HAL_RCC_OscConfig+0x324>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	2b05      	cmp	r3, #5
 8004db8:	d10c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x30c>
 8004dba:	4b5f      	ldr	r3, [pc, #380]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dbe:	4a5e      	ldr	r2, [pc, #376]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004dc0:	f043 0304 	orr.w	r3, r3, #4
 8004dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dc6:	4b5c      	ldr	r3, [pc, #368]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dca:	4a5b      	ldr	r2, [pc, #364]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	f043 0301 	orr.w	r3, r3, #1
 8004dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd2:	e00b      	b.n	8004dec <HAL_RCC_OscConfig+0x324>
 8004dd4:	4b58      	ldr	r3, [pc, #352]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd8:	4a57      	ldr	r2, [pc, #348]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004dda:	f023 0301 	bic.w	r3, r3, #1
 8004dde:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de0:	4b55      	ldr	r3, [pc, #340]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de4:	4a54      	ldr	r2, [pc, #336]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004de6:	f023 0304 	bic.w	r3, r3, #4
 8004dea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d015      	beq.n	8004e20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df4:	f7fe fa26 	bl	8003244 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfa:	e00a      	b.n	8004e12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfc:	f7fe fa22 	bl	8003244 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e0cb      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e12:	4b49      	ldr	r3, [pc, #292]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0ee      	beq.n	8004dfc <HAL_RCC_OscConfig+0x334>
 8004e1e:	e014      	b.n	8004e4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e20:	f7fe fa10 	bl	8003244 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e26:	e00a      	b.n	8004e3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e28:	f7fe fa0c 	bl	8003244 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e0b5      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1ee      	bne.n	8004e28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e4a:	7dfb      	ldrb	r3, [r7, #23]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d105      	bne.n	8004e5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e50:	4b39      	ldr	r3, [pc, #228]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e54:	4a38      	ldr	r2, [pc, #224]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80a1 	beq.w	8004fa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e66:	4b34      	ldr	r3, [pc, #208]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d05c      	beq.n	8004f2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d141      	bne.n	8004efe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7a:	4b31      	ldr	r3, [pc, #196]	@ (8004f40 <HAL_RCC_OscConfig+0x478>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e80:	f7fe f9e0 	bl	8003244 <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e88:	f7fe f9dc 	bl	8003244 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e087      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9a:	4b27      	ldr	r3, [pc, #156]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f0      	bne.n	8004e88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69da      	ldr	r2, [r3, #28]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb4:	019b      	lsls	r3, r3, #6
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebc:	085b      	lsrs	r3, r3, #1
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	041b      	lsls	r3, r3, #16
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec8:	061b      	lsls	r3, r3, #24
 8004eca:	491b      	ldr	r1, [pc, #108]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f40 <HAL_RCC_OscConfig+0x478>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed6:	f7fe f9b5 	bl	8003244 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ede:	f7fe f9b1 	bl	8003244 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e05c      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef0:	4b11      	ldr	r3, [pc, #68]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0f0      	beq.n	8004ede <HAL_RCC_OscConfig+0x416>
 8004efc:	e054      	b.n	8004fa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004efe:	4b10      	ldr	r3, [pc, #64]	@ (8004f40 <HAL_RCC_OscConfig+0x478>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f04:	f7fe f99e 	bl	8003244 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0c:	f7fe f99a 	bl	8003244 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e045      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f1e:	4b06      	ldr	r3, [pc, #24]	@ (8004f38 <HAL_RCC_OscConfig+0x470>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <HAL_RCC_OscConfig+0x444>
 8004f2a:	e03d      	b.n	8004fa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d107      	bne.n	8004f44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e038      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	40007000 	.word	0x40007000
 8004f40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f44:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb4 <HAL_RCC_OscConfig+0x4ec>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d028      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d121      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d11a      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f74:	4013      	ands	r3, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d111      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d107      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d001      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3718      	adds	r7, #24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40023800 	.word	0x40023800

08004fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e0cc      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fcc:	4b68      	ldr	r3, [pc, #416]	@ (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d90c      	bls.n	8004ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fda:	4b65      	ldr	r3, [pc, #404]	@ (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe2:	4b63      	ldr	r3, [pc, #396]	@ (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d001      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e0b8      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d020      	beq.n	8005042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800500c:	4b59      	ldr	r3, [pc, #356]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4a58      	ldr	r2, [pc, #352]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005016:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005024:	4b53      	ldr	r3, [pc, #332]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4a52      	ldr	r2, [pc, #328]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800502e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005030:	4b50      	ldr	r3, [pc, #320]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	494d      	ldr	r1, [pc, #308]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	4313      	orrs	r3, r2
 8005040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d044      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d107      	bne.n	8005066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005056:	4b47      	ldr	r3, [pc, #284]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d119      	bne.n	8005096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e07f      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d003      	beq.n	8005076 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005072:	2b03      	cmp	r3, #3
 8005074:	d107      	bne.n	8005086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005076:	4b3f      	ldr	r3, [pc, #252]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e06f      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005086:	4b3b      	ldr	r3, [pc, #236]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e067      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005096:	4b37      	ldr	r3, [pc, #220]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f023 0203 	bic.w	r2, r3, #3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4934      	ldr	r1, [pc, #208]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050a8:	f7fe f8cc 	bl	8003244 <HAL_GetTick>
 80050ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ae:	e00a      	b.n	80050c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b0:	f7fe f8c8 	bl	8003244 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050be:	4293      	cmp	r3, r2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e04f      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c6:	4b2b      	ldr	r3, [pc, #172]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 020c 	and.w	r2, r3, #12
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d1eb      	bne.n	80050b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050d8:	4b25      	ldr	r3, [pc, #148]	@ (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d20c      	bcs.n	8005100 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e6:	4b22      	ldr	r3, [pc, #136]	@ (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	4b20      	ldr	r3, [pc, #128]	@ (8005170 <HAL_RCC_ClockConfig+0x1b8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e032      	b.n	8005166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800510c:	4b19      	ldr	r3, [pc, #100]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4916      	ldr	r1, [pc, #88]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	4313      	orrs	r3, r2
 800511c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800512a:	4b12      	ldr	r3, [pc, #72]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	490e      	ldr	r1, [pc, #56]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800513e:	f000 f821 	bl	8005184 <HAL_RCC_GetSysClockFreq>
 8005142:	4602      	mov	r2, r0
 8005144:	4b0b      	ldr	r3, [pc, #44]	@ (8005174 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	490a      	ldr	r1, [pc, #40]	@ (8005178 <HAL_RCC_ClockConfig+0x1c0>)
 8005150:	5ccb      	ldrb	r3, [r1, r3]
 8005152:	fa22 f303 	lsr.w	r3, r2, r3
 8005156:	4a09      	ldr	r2, [pc, #36]	@ (800517c <HAL_RCC_ClockConfig+0x1c4>)
 8005158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800515a:	4b09      	ldr	r3, [pc, #36]	@ (8005180 <HAL_RCC_ClockConfig+0x1c8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f7fd fcb2 	bl	8002ac8 <HAL_InitTick>

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	40023c00 	.word	0x40023c00
 8005174:	40023800 	.word	0x40023800
 8005178:	08010e18 	.word	0x08010e18
 800517c:	20000004 	.word	0x20000004
 8005180:	20000014 	.word	0x20000014

08005184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005188:	b090      	sub	sp, #64	@ 0x40
 800518a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800519c:	4b59      	ldr	r3, [pc, #356]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x180>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 030c 	and.w	r3, r3, #12
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d00d      	beq.n	80051c4 <HAL_RCC_GetSysClockFreq+0x40>
 80051a8:	2b08      	cmp	r3, #8
 80051aa:	f200 80a1 	bhi.w	80052f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0x34>
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d003      	beq.n	80051be <HAL_RCC_GetSysClockFreq+0x3a>
 80051b6:	e09b      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051b8:	4b53      	ldr	r3, [pc, #332]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x184>)
 80051ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051bc:	e09b      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051be:	4b53      	ldr	r3, [pc, #332]	@ (800530c <HAL_RCC_GetSysClockFreq+0x188>)
 80051c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80051c2:	e098      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051c4:	4b4f      	ldr	r3, [pc, #316]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x180>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ce:	4b4d      	ldr	r3, [pc, #308]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x180>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d028      	beq.n	800522c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051da:	4b4a      	ldr	r3, [pc, #296]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x180>)
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	099b      	lsrs	r3, r3, #6
 80051e0:	2200      	movs	r2, #0
 80051e2:	623b      	str	r3, [r7, #32]
 80051e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80051ec:	2100      	movs	r1, #0
 80051ee:	4b47      	ldr	r3, [pc, #284]	@ (800530c <HAL_RCC_GetSysClockFreq+0x188>)
 80051f0:	fb03 f201 	mul.w	r2, r3, r1
 80051f4:	2300      	movs	r3, #0
 80051f6:	fb00 f303 	mul.w	r3, r0, r3
 80051fa:	4413      	add	r3, r2
 80051fc:	4a43      	ldr	r2, [pc, #268]	@ (800530c <HAL_RCC_GetSysClockFreq+0x188>)
 80051fe:	fba0 1202 	umull	r1, r2, r0, r2
 8005202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005204:	460a      	mov	r2, r1
 8005206:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800520a:	4413      	add	r3, r2
 800520c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800520e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005210:	2200      	movs	r2, #0
 8005212:	61bb      	str	r3, [r7, #24]
 8005214:	61fa      	str	r2, [r7, #28]
 8005216:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800521a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800521e:	f7fb fd3b 	bl	8000c98 <__aeabi_uldivmod>
 8005222:	4602      	mov	r2, r0
 8005224:	460b      	mov	r3, r1
 8005226:	4613      	mov	r3, r2
 8005228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800522a:	e053      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800522c:	4b35      	ldr	r3, [pc, #212]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x180>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	099b      	lsrs	r3, r3, #6
 8005232:	2200      	movs	r2, #0
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	617a      	str	r2, [r7, #20]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800523e:	f04f 0b00 	mov.w	fp, #0
 8005242:	4652      	mov	r2, sl
 8005244:	465b      	mov	r3, fp
 8005246:	f04f 0000 	mov.w	r0, #0
 800524a:	f04f 0100 	mov.w	r1, #0
 800524e:	0159      	lsls	r1, r3, #5
 8005250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005254:	0150      	lsls	r0, r2, #5
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	ebb2 080a 	subs.w	r8, r2, sl
 800525e:	eb63 090b 	sbc.w	r9, r3, fp
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800526e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005272:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005276:	ebb2 0408 	subs.w	r4, r2, r8
 800527a:	eb63 0509 	sbc.w	r5, r3, r9
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	00eb      	lsls	r3, r5, #3
 8005288:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800528c:	00e2      	lsls	r2, r4, #3
 800528e:	4614      	mov	r4, r2
 8005290:	461d      	mov	r5, r3
 8005292:	eb14 030a 	adds.w	r3, r4, sl
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	eb45 030b 	adc.w	r3, r5, fp
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052aa:	4629      	mov	r1, r5
 80052ac:	028b      	lsls	r3, r1, #10
 80052ae:	4621      	mov	r1, r4
 80052b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052b4:	4621      	mov	r1, r4
 80052b6:	028a      	lsls	r2, r1, #10
 80052b8:	4610      	mov	r0, r2
 80052ba:	4619      	mov	r1, r3
 80052bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052be:	2200      	movs	r2, #0
 80052c0:	60bb      	str	r3, [r7, #8]
 80052c2:	60fa      	str	r2, [r7, #12]
 80052c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052c8:	f7fb fce6 	bl	8000c98 <__aeabi_uldivmod>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4613      	mov	r3, r2
 80052d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x180>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	0c1b      	lsrs	r3, r3, #16
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	3301      	adds	r3, #1
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80052e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80052e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80052ee:	e002      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052f0:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x184>)
 80052f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80052f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3740      	adds	r7, #64	@ 0x40
 80052fc:	46bd      	mov	sp, r7
 80052fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005302:	bf00      	nop
 8005304:	40023800 	.word	0x40023800
 8005308:	00f42400 	.word	0x00f42400
 800530c:	017d7840 	.word	0x017d7840

08005310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005314:	4b03      	ldr	r3, [pc, #12]	@ (8005324 <HAL_RCC_GetHCLKFreq+0x14>)
 8005316:	681b      	ldr	r3, [r3, #0]
}
 8005318:	4618      	mov	r0, r3
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000004 	.word	0x20000004

08005328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800532c:	f7ff fff0 	bl	8005310 <HAL_RCC_GetHCLKFreq>
 8005330:	4602      	mov	r2, r0
 8005332:	4b05      	ldr	r3, [pc, #20]	@ (8005348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	0a9b      	lsrs	r3, r3, #10
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	4903      	ldr	r1, [pc, #12]	@ (800534c <HAL_RCC_GetPCLK1Freq+0x24>)
 800533e:	5ccb      	ldrb	r3, [r1, r3]
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005344:	4618      	mov	r0, r3
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40023800 	.word	0x40023800
 800534c:	08010e28 	.word	0x08010e28

08005350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005354:	f7ff ffdc 	bl	8005310 <HAL_RCC_GetHCLKFreq>
 8005358:	4602      	mov	r2, r0
 800535a:	4b05      	ldr	r3, [pc, #20]	@ (8005370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	0b5b      	lsrs	r3, r3, #13
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	4903      	ldr	r1, [pc, #12]	@ (8005374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005366:	5ccb      	ldrb	r3, [r1, r3]
 8005368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800536c:	4618      	mov	r0, r3
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40023800 	.word	0x40023800
 8005374:	08010e28 	.word	0x08010e28

08005378 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	220f      	movs	r2, #15
 8005386:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005388:	4b12      	ldr	r3, [pc, #72]	@ (80053d4 <HAL_RCC_GetClockConfig+0x5c>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 0203 	and.w	r2, r3, #3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005394:	4b0f      	ldr	r3, [pc, #60]	@ (80053d4 <HAL_RCC_GetClockConfig+0x5c>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053a0:	4b0c      	ldr	r3, [pc, #48]	@ (80053d4 <HAL_RCC_GetClockConfig+0x5c>)
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053ac:	4b09      	ldr	r3, [pc, #36]	@ (80053d4 <HAL_RCC_GetClockConfig+0x5c>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	08db      	lsrs	r3, r3, #3
 80053b2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053ba:	4b07      	ldr	r3, [pc, #28]	@ (80053d8 <HAL_RCC_GetClockConfig+0x60>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0207 	and.w	r2, r3, #7
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	601a      	str	r2, [r3, #0]
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40023800 	.word	0x40023800
 80053d8:	40023c00 	.word	0x40023c00

080053dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e07b      	b.n	80054e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d108      	bne.n	8005408 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053fe:	d009      	beq.n	8005414 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	61da      	str	r2, [r3, #28]
 8005406:	e005      	b.n	8005414 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fd f92c 	bl	800268c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800544a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005484:	431a      	orrs	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005498:	ea42 0103 	orr.w	r1, r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	0c1b      	lsrs	r3, r3, #16
 80054b2:	f003 0104 	and.w	r1, r3, #4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ba:	f003 0210 	and.w	r2, r3, #16
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b088      	sub	sp, #32
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	603b      	str	r3, [r7, #0]
 80054fa:	4613      	mov	r3, r2
 80054fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054fe:	f7fd fea1 	bl	8003244 <HAL_GetTick>
 8005502:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005504:	88fb      	ldrh	r3, [r7, #6]
 8005506:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	d001      	beq.n	8005518 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005514:	2302      	movs	r3, #2
 8005516:	e12a      	b.n	800576e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <HAL_SPI_Transmit+0x36>
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e122      	b.n	800576e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_SPI_Transmit+0x48>
 8005532:	2302      	movs	r3, #2
 8005534:	e11b      	b.n	800576e <HAL_SPI_Transmit+0x280>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2203      	movs	r2, #3
 8005542:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	88fa      	ldrh	r2, [r7, #6]
 8005556:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	88fa      	ldrh	r2, [r7, #6]
 800555c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005584:	d10f      	bne.n	80055a6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005594:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b0:	2b40      	cmp	r3, #64	@ 0x40
 80055b2:	d007      	beq.n	80055c4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055cc:	d152      	bne.n	8005674 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_SPI_Transmit+0xee>
 80055d6:	8b7b      	ldrh	r3, [r7, #26]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d145      	bne.n	8005668 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e0:	881a      	ldrh	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ec:	1c9a      	adds	r2, r3, #2
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005600:	e032      	b.n	8005668 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b02      	cmp	r3, #2
 800560e:	d112      	bne.n	8005636 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005614:	881a      	ldrh	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005620:	1c9a      	adds	r2, r3, #2
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005634:	e018      	b.n	8005668 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005636:	f7fd fe05 	bl	8003244 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d803      	bhi.n	800564e <HAL_SPI_Transmit+0x160>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564c:	d102      	bne.n	8005654 <HAL_SPI_Transmit+0x166>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e082      	b.n	800576e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1c7      	bne.n	8005602 <HAL_SPI_Transmit+0x114>
 8005672:	e053      	b.n	800571c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <HAL_SPI_Transmit+0x194>
 800567c:	8b7b      	ldrh	r3, [r7, #26]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d147      	bne.n	8005712 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	7812      	ldrb	r2, [r2, #0]
 800568e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056a8:	e033      	b.n	8005712 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d113      	bne.n	80056e0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	7812      	ldrb	r2, [r2, #0]
 80056c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80056de:	e018      	b.n	8005712 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056e0:	f7fd fdb0 	bl	8003244 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d803      	bhi.n	80056f8 <HAL_SPI_Transmit+0x20a>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f6:	d102      	bne.n	80056fe <HAL_SPI_Transmit+0x210>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d109      	bne.n	8005712 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e02d      	b.n	800576e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1c6      	bne.n	80056aa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	6839      	ldr	r1, [r7, #0]
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 fb79 	bl	8005e18 <SPI_EndRxTxTransaction>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800573a:	2300      	movs	r3, #0
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800576c:	2300      	movs	r3, #0
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b08a      	sub	sp, #40	@ 0x28
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	607a      	str	r2, [r7, #4]
 8005782:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005784:	2301      	movs	r3, #1
 8005786:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005788:	f7fd fd5c 	bl	8003244 <HAL_GetTick>
 800578c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005794:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800579c:	887b      	ldrh	r3, [r7, #2]
 800579e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057a0:	7ffb      	ldrb	r3, [r7, #31]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d00c      	beq.n	80057c0 <HAL_SPI_TransmitReceive+0x4a>
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057ac:	d106      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d102      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x46>
 80057b6:	7ffb      	ldrb	r3, [r7, #31]
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d001      	beq.n	80057c0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80057bc:	2302      	movs	r3, #2
 80057be:	e17f      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <HAL_SPI_TransmitReceive+0x5c>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <HAL_SPI_TransmitReceive+0x5c>
 80057cc:	887b      	ldrh	r3, [r7, #2]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e174      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x6e>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e16d      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x34a>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d003      	beq.n	8005800 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2205      	movs	r2, #5
 80057fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	887a      	ldrh	r2, [r7, #2]
 8005810:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	887a      	ldrh	r2, [r7, #2]
 8005816:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	887a      	ldrh	r2, [r7, #2]
 8005822:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	887a      	ldrh	r2, [r7, #2]
 8005828:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005840:	2b40      	cmp	r3, #64	@ 0x40
 8005842:	d007      	beq.n	8005854 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005852:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800585c:	d17e      	bne.n	800595c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <HAL_SPI_TransmitReceive+0xf6>
 8005866:	8afb      	ldrh	r3, [r7, #22]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d16c      	bne.n	8005946 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005870:	881a      	ldrh	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587c:	1c9a      	adds	r2, r3, #2
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005890:	e059      	b.n	8005946 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b02      	cmp	r3, #2
 800589e:	d11b      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x162>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d016      	beq.n	80058d8 <HAL_SPI_TransmitReceive+0x162>
 80058aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d113      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	881a      	ldrh	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c0:	1c9a      	adds	r2, r3, #2
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d119      	bne.n	800591a <HAL_SPI_TransmitReceive+0x1a4>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d014      	beq.n	800591a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fa:	b292      	uxth	r2, r2
 80058fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005902:	1c9a      	adds	r2, r3, #2
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800590c:	b29b      	uxth	r3, r3
 800590e:	3b01      	subs	r3, #1
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005916:	2301      	movs	r3, #1
 8005918:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800591a:	f7fd fc93 	bl	8003244 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005926:	429a      	cmp	r2, r3
 8005928:	d80d      	bhi.n	8005946 <HAL_SPI_TransmitReceive+0x1d0>
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005930:	d009      	beq.n	8005946 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e0bc      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1a0      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x11c>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d19b      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x11c>
 800595a:	e082      	b.n	8005a62 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <HAL_SPI_TransmitReceive+0x1f4>
 8005964:	8afb      	ldrh	r3, [r7, #22]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d171      	bne.n	8005a4e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	330c      	adds	r3, #12
 8005974:	7812      	ldrb	r2, [r2, #0]
 8005976:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005990:	e05d      	b.n	8005a4e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b02      	cmp	r3, #2
 800599e:	d11c      	bne.n	80059da <HAL_SPI_TransmitReceive+0x264>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d017      	beq.n	80059da <HAL_SPI_TransmitReceive+0x264>
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d114      	bne.n	80059da <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	330c      	adds	r3, #12
 80059ba:	7812      	ldrb	r2, [r2, #0]
 80059bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d119      	bne.n	8005a1c <HAL_SPI_TransmitReceive+0x2a6>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d014      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fc:	b2d2      	uxtb	r2, r2
 80059fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a1c:	f7fd fc12 	bl	8003244 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d803      	bhi.n	8005a34 <HAL_SPI_TransmitReceive+0x2be>
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a32:	d102      	bne.n	8005a3a <HAL_SPI_TransmitReceive+0x2c4>
 8005a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e038      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d19c      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x21c>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d197      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a62:	6a3a      	ldr	r2, [r7, #32]
 8005a64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f9d6 	bl	8005e18 <SPI_EndRxTxTransaction>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d008      	beq.n	8005a84 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2220      	movs	r2, #32
 8005a76:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e01d      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	613b      	str	r3, [r7, #16]
 8005aa0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005abe:	2300      	movs	r3, #0
  }
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3728      	adds	r7, #40	@ 0x28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10e      	bne.n	8005b08 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d009      	beq.n	8005b08 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d004      	beq.n	8005b08 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	4798      	blx	r3
    return;
 8005b06:	e0ce      	b.n	8005ca6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <HAL_SPI_IRQHandler+0x5e>
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d004      	beq.n	8005b26 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	4798      	blx	r3
    return;
 8005b24:	e0bf      	b.n	8005ca6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <HAL_SPI_IRQHandler+0x7e>
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d105      	bne.n	8005b46 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80b0 	beq.w	8005ca6 <HAL_SPI_IRQHandler+0x1de>
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 80aa 	beq.w	8005ca6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d023      	beq.n	8005ba4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d011      	beq.n	8005b8c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b6c:	f043 0204 	orr.w	r2, r3, #4
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	e00b      	b.n	8005ba4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	613b      	str	r3, [r7, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	693b      	ldr	r3, [r7, #16]
        return;
 8005ba2:	e080      	b.n	8005ca6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d014      	beq.n	8005bd8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb2:	f043 0201 	orr.w	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00c      	beq.n	8005bfc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be6:	f043 0208 	orr.w	r2, r3, #8
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60bb      	str	r3, [r7, #8]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	60bb      	str	r3, [r7, #8]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d04f      	beq.n	8005ca4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c12:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d104      	bne.n	8005c30 <HAL_SPI_IRQHandler+0x168>
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d034      	beq.n	8005c9a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0203 	bic.w	r2, r2, #3
 8005c3e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d011      	beq.n	8005c6c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c4c:	4a17      	ldr	r2, [pc, #92]	@ (8005cac <HAL_SPI_IRQHandler+0x1e4>)
 8005c4e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fd ff03 	bl	8003a60 <HAL_DMA_Abort_IT>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c64:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d016      	beq.n	8005ca2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c78:	4a0c      	ldr	r2, [pc, #48]	@ (8005cac <HAL_SPI_IRQHandler+0x1e4>)
 8005c7a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fd feed 	bl	8003a60 <HAL_DMA_Abort_IT>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c90:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8005c98:	e003      	b.n	8005ca2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f808 	bl	8005cb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005ca0:	e000      	b.n	8005ca4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005ca2:	bf00      	nop
    return;
 8005ca4:	bf00      	nop
  }
}
 8005ca6:	3720      	adds	r7, #32
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	08005ce1 	.word	0x08005ce1

08005cb0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cd2:	b2db      	uxtb	r3, r3
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f7ff ffd8 	bl	8005cb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d00:	bf00      	nop
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	4613      	mov	r3, r2
 8005d16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d18:	f7fd fa94 	bl	8003244 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	1a9b      	subs	r3, r3, r2
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	4413      	add	r3, r2
 8005d26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d28:	f7fd fa8c 	bl	8003244 <HAL_GetTick>
 8005d2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d2e:	4b39      	ldr	r3, [pc, #228]	@ (8005e14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	015b      	lsls	r3, r3, #5
 8005d34:	0d1b      	lsrs	r3, r3, #20
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	fb02 f303 	mul.w	r3, r2, r3
 8005d3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d3e:	e054      	b.n	8005dea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d46:	d050      	beq.n	8005dea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d48:	f7fd fa7c 	bl	8003244 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d902      	bls.n	8005d5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d13d      	bne.n	8005dda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d76:	d111      	bne.n	8005d9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d80:	d004      	beq.n	8005d8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d8a:	d107      	bne.n	8005d9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005da4:	d10f      	bne.n	8005dc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005dc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e017      	b.n	8005e0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4013      	ands	r3, r2
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	bf0c      	ite	eq
 8005dfa:	2301      	moveq	r3, #1
 8005dfc:	2300      	movne	r3, #0
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d19b      	bne.n	8005d40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000004 	.word	0x20000004

08005e18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	2102      	movs	r1, #2
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7ff ff6a 	bl	8005d08 <SPI_WaitFlagStateUntilTimeout>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3e:	f043 0220 	orr.w	r2, r3, #32
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e032      	b.n	8005eb0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb8 <SPI_EndRxTxTransaction+0xa0>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005ebc <SPI_EndRxTxTransaction+0xa4>)
 8005e50:	fba2 2303 	umull	r2, r3, r2, r3
 8005e54:	0d5b      	lsrs	r3, r3, #21
 8005e56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e5a:	fb02 f303 	mul.w	r3, r2, r3
 8005e5e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e68:	d112      	bne.n	8005e90 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2200      	movs	r2, #0
 8005e72:	2180      	movs	r1, #128	@ 0x80
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7ff ff47 	bl	8005d08 <SPI_WaitFlagStateUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d016      	beq.n	8005eae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e84:	f043 0220 	orr.w	r2, r3, #32
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e00f      	b.n	8005eb0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ea6:	2b80      	cmp	r3, #128	@ 0x80
 8005ea8:	d0f2      	beq.n	8005e90 <SPI_EndRxTxTransaction+0x78>
 8005eaa:	e000      	b.n	8005eae <SPI_EndRxTxTransaction+0x96>
        break;
 8005eac:	bf00      	nop
  }

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	20000004 	.word	0x20000004
 8005ebc:	165e9f81 	.word	0x165e9f81

08005ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e041      	b.n	8005f56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fc fd32 	bl	8002950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	3304      	adds	r3, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4610      	mov	r0, r2
 8005f00:	f000 fc3c 	bl	800677c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d001      	beq.n	8005f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e044      	b.n	8006002 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a1e      	ldr	r2, [pc, #120]	@ (8006010 <HAL_TIM_Base_Start_IT+0xb0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d018      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x6c>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa2:	d013      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x6c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8006014 <HAL_TIM_Base_Start_IT+0xb4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00e      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x6c>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a19      	ldr	r2, [pc, #100]	@ (8006018 <HAL_TIM_Base_Start_IT+0xb8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d009      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x6c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a17      	ldr	r2, [pc, #92]	@ (800601c <HAL_TIM_Base_Start_IT+0xbc>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d004      	beq.n	8005fcc <HAL_TIM_Base_Start_IT+0x6c>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a16      	ldr	r2, [pc, #88]	@ (8006020 <HAL_TIM_Base_Start_IT+0xc0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d111      	bne.n	8005ff0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 0307 	and.w	r3, r3, #7
 8005fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b06      	cmp	r3, #6
 8005fdc:	d010      	beq.n	8006000 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0201 	orr.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fee:	e007      	b.n	8006000 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0201 	orr.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40010000 	.word	0x40010000
 8006014:	40000400 	.word	0x40000400
 8006018:	40000800 	.word	0x40000800
 800601c:	40000c00 	.word	0x40000c00
 8006020:	40014000 	.word	0x40014000

08006024 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e041      	b.n	80060ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f839 	bl	80060c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	3304      	adds	r3, #4
 8006060:	4619      	mov	r1, r3
 8006062:	4610      	mov	r0, r2
 8006064:	f000 fb8a 	bl	800677c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d109      	bne.n	80060fc <HAL_TIM_PWM_Start+0x24>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	bf14      	ite	ne
 80060f4:	2301      	movne	r3, #1
 80060f6:	2300      	moveq	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	e022      	b.n	8006142 <HAL_TIM_PWM_Start+0x6a>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b04      	cmp	r3, #4
 8006100:	d109      	bne.n	8006116 <HAL_TIM_PWM_Start+0x3e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b01      	cmp	r3, #1
 800610c:	bf14      	ite	ne
 800610e:	2301      	movne	r3, #1
 8006110:	2300      	moveq	r3, #0
 8006112:	b2db      	uxtb	r3, r3
 8006114:	e015      	b.n	8006142 <HAL_TIM_PWM_Start+0x6a>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b08      	cmp	r3, #8
 800611a:	d109      	bne.n	8006130 <HAL_TIM_PWM_Start+0x58>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b01      	cmp	r3, #1
 8006126:	bf14      	ite	ne
 8006128:	2301      	movne	r3, #1
 800612a:	2300      	moveq	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	e008      	b.n	8006142 <HAL_TIM_PWM_Start+0x6a>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006136:	b2db      	uxtb	r3, r3
 8006138:	2b01      	cmp	r3, #1
 800613a:	bf14      	ite	ne
 800613c:	2301      	movne	r3, #1
 800613e:	2300      	moveq	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e068      	b.n	800621c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d104      	bne.n	800615a <HAL_TIM_PWM_Start+0x82>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006158:	e013      	b.n	8006182 <HAL_TIM_PWM_Start+0xaa>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b04      	cmp	r3, #4
 800615e:	d104      	bne.n	800616a <HAL_TIM_PWM_Start+0x92>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006168:	e00b      	b.n	8006182 <HAL_TIM_PWM_Start+0xaa>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b08      	cmp	r3, #8
 800616e:	d104      	bne.n	800617a <HAL_TIM_PWM_Start+0xa2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006178:	e003      	b.n	8006182 <HAL_TIM_PWM_Start+0xaa>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2202      	movs	r2, #2
 800617e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2201      	movs	r2, #1
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 fda8 	bl	8006ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a23      	ldr	r2, [pc, #140]	@ (8006224 <HAL_TIM_PWM_Start+0x14c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d107      	bne.n	80061aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a1d      	ldr	r2, [pc, #116]	@ (8006224 <HAL_TIM_PWM_Start+0x14c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d018      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x10e>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061bc:	d013      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x10e>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a19      	ldr	r2, [pc, #100]	@ (8006228 <HAL_TIM_PWM_Start+0x150>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d00e      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x10e>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a17      	ldr	r2, [pc, #92]	@ (800622c <HAL_TIM_PWM_Start+0x154>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d009      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x10e>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a16      	ldr	r2, [pc, #88]	@ (8006230 <HAL_TIM_PWM_Start+0x158>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d004      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x10e>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a14      	ldr	r2, [pc, #80]	@ (8006234 <HAL_TIM_PWM_Start+0x15c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d111      	bne.n	800620a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b06      	cmp	r3, #6
 80061f6:	d010      	beq.n	800621a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f042 0201 	orr.w	r2, r2, #1
 8006206:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006208:	e007      	b.n	800621a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0201 	orr.w	r2, r2, #1
 8006218:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40010000 	.word	0x40010000
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40000c00 	.word	0x40000c00
 8006234:	40014000 	.word	0x40014000

08006238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d020      	beq.n	800629c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01b      	beq.n	800629c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0202 	mvn.w	r2, #2
 800626c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa5b 	bl	800673e <HAL_TIM_IC_CaptureCallback>
 8006288:	e005      	b.n	8006296 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fa4d 	bl	800672a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fa5e 	bl	8006752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 0304 	and.w	r3, r3, #4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d020      	beq.n	80062e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01b      	beq.n	80062e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0204 	mvn.w	r2, #4
 80062b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2202      	movs	r2, #2
 80062be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fa35 	bl	800673e <HAL_TIM_IC_CaptureCallback>
 80062d4:	e005      	b.n	80062e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fa27 	bl	800672a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fa38 	bl	8006752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d020      	beq.n	8006334 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f003 0308 	and.w	r3, r3, #8
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01b      	beq.n	8006334 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0208 	mvn.w	r2, #8
 8006304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2204      	movs	r2, #4
 800630a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	f003 0303 	and.w	r3, r3, #3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fa0f 	bl	800673e <HAL_TIM_IC_CaptureCallback>
 8006320:	e005      	b.n	800632e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fa01 	bl	800672a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fa12 	bl	8006752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f003 0310 	and.w	r3, r3, #16
 800633a:	2b00      	cmp	r3, #0
 800633c:	d020      	beq.n	8006380 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f003 0310 	and.w	r3, r3, #16
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01b      	beq.n	8006380 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f06f 0210 	mvn.w	r2, #16
 8006350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2208      	movs	r2, #8
 8006356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f9e9 	bl	800673e <HAL_TIM_IC_CaptureCallback>
 800636c:	e005      	b.n	800637a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f9db 	bl	800672a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f9ec 	bl	8006752 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00c      	beq.n	80063a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0201 	mvn.w	r2, #1
 800639c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7fc f80a 	bl	80023b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00c      	beq.n	80063c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80063c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fd2a 	bl	8006e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00c      	beq.n	80063ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d007      	beq.n	80063ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f9bd 	bl	8006766 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00c      	beq.n	8006410 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 0320 	and.w	r3, r3, #32
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d007      	beq.n	8006410 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0220 	mvn.w	r2, #32
 8006408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fcfc 	bl	8006e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006410:	bf00      	nop
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006424:	2300      	movs	r3, #0
 8006426:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800642e:	2b01      	cmp	r3, #1
 8006430:	d101      	bne.n	8006436 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006432:	2302      	movs	r3, #2
 8006434:	e0ae      	b.n	8006594 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b0c      	cmp	r3, #12
 8006442:	f200 809f 	bhi.w	8006584 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006446:	a201      	add	r2, pc, #4	@ (adr r2, 800644c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644c:	08006481 	.word	0x08006481
 8006450:	08006585 	.word	0x08006585
 8006454:	08006585 	.word	0x08006585
 8006458:	08006585 	.word	0x08006585
 800645c:	080064c1 	.word	0x080064c1
 8006460:	08006585 	.word	0x08006585
 8006464:	08006585 	.word	0x08006585
 8006468:	08006585 	.word	0x08006585
 800646c:	08006503 	.word	0x08006503
 8006470:	08006585 	.word	0x08006585
 8006474:	08006585 	.word	0x08006585
 8006478:	08006585 	.word	0x08006585
 800647c:	08006543 	.word	0x08006543
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fa04 	bl	8006894 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	699a      	ldr	r2, [r3, #24]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0208 	orr.w	r2, r2, #8
 800649a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	699a      	ldr	r2, [r3, #24]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0204 	bic.w	r2, r2, #4
 80064aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6999      	ldr	r1, [r3, #24]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	691a      	ldr	r2, [r3, #16]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	619a      	str	r2, [r3, #24]
      break;
 80064be:	e064      	b.n	800658a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fa4a 	bl	8006960 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699a      	ldr	r2, [r3, #24]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6999      	ldr	r1, [r3, #24]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	021a      	lsls	r2, r3, #8
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	619a      	str	r2, [r3, #24]
      break;
 8006500:	e043      	b.n	800658a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68b9      	ldr	r1, [r7, #8]
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fa95 	bl	8006a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0208 	orr.w	r2, r2, #8
 800651c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0204 	bic.w	r2, r2, #4
 800652c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69d9      	ldr	r1, [r3, #28]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	61da      	str	r2, [r3, #28]
      break;
 8006540:	e023      	b.n	800658a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fadf 	bl	8006b0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69da      	ldr	r2, [r3, #28]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800655c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	69da      	ldr	r2, [r3, #28]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800656c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69d9      	ldr	r1, [r3, #28]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	021a      	lsls	r2, r3, #8
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	61da      	str	r2, [r3, #28]
      break;
 8006582:	e002      	b.n	800658a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	75fb      	strb	r3, [r7, #23]
      break;
 8006588:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006592:	7dfb      	ldrb	r3, [r7, #23]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_TIM_ConfigClockSource+0x1c>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e0b4      	b.n	8006722 <HAL_TIM_ConfigClockSource+0x186>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80065d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065f0:	d03e      	beq.n	8006670 <HAL_TIM_ConfigClockSource+0xd4>
 80065f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065f6:	f200 8087 	bhi.w	8006708 <HAL_TIM_ConfigClockSource+0x16c>
 80065fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065fe:	f000 8086 	beq.w	800670e <HAL_TIM_ConfigClockSource+0x172>
 8006602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006606:	d87f      	bhi.n	8006708 <HAL_TIM_ConfigClockSource+0x16c>
 8006608:	2b70      	cmp	r3, #112	@ 0x70
 800660a:	d01a      	beq.n	8006642 <HAL_TIM_ConfigClockSource+0xa6>
 800660c:	2b70      	cmp	r3, #112	@ 0x70
 800660e:	d87b      	bhi.n	8006708 <HAL_TIM_ConfigClockSource+0x16c>
 8006610:	2b60      	cmp	r3, #96	@ 0x60
 8006612:	d050      	beq.n	80066b6 <HAL_TIM_ConfigClockSource+0x11a>
 8006614:	2b60      	cmp	r3, #96	@ 0x60
 8006616:	d877      	bhi.n	8006708 <HAL_TIM_ConfigClockSource+0x16c>
 8006618:	2b50      	cmp	r3, #80	@ 0x50
 800661a:	d03c      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0xfa>
 800661c:	2b50      	cmp	r3, #80	@ 0x50
 800661e:	d873      	bhi.n	8006708 <HAL_TIM_ConfigClockSource+0x16c>
 8006620:	2b40      	cmp	r3, #64	@ 0x40
 8006622:	d058      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0x13a>
 8006624:	2b40      	cmp	r3, #64	@ 0x40
 8006626:	d86f      	bhi.n	8006708 <HAL_TIM_ConfigClockSource+0x16c>
 8006628:	2b30      	cmp	r3, #48	@ 0x30
 800662a:	d064      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x15a>
 800662c:	2b30      	cmp	r3, #48	@ 0x30
 800662e:	d86b      	bhi.n	8006708 <HAL_TIM_ConfigClockSource+0x16c>
 8006630:	2b20      	cmp	r3, #32
 8006632:	d060      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006634:	2b20      	cmp	r3, #32
 8006636:	d867      	bhi.n	8006708 <HAL_TIM_ConfigClockSource+0x16c>
 8006638:	2b00      	cmp	r3, #0
 800663a:	d05c      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x15a>
 800663c:	2b10      	cmp	r3, #16
 800663e:	d05a      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006640:	e062      	b.n	8006708 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006652:	f000 fb25 	bl	8006ca0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006664:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	609a      	str	r2, [r3, #8]
      break;
 800666e:	e04f      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006680:	f000 fb0e 	bl	8006ca0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689a      	ldr	r2, [r3, #8]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006692:	609a      	str	r2, [r3, #8]
      break;
 8006694:	e03c      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066a2:	461a      	mov	r2, r3
 80066a4:	f000 fa82 	bl	8006bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2150      	movs	r1, #80	@ 0x50
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fadb 	bl	8006c6a <TIM_ITRx_SetConfig>
      break;
 80066b4:	e02c      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066c2:	461a      	mov	r2, r3
 80066c4:	f000 faa1 	bl	8006c0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2160      	movs	r1, #96	@ 0x60
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 facb 	bl	8006c6a <TIM_ITRx_SetConfig>
      break;
 80066d4:	e01c      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e2:	461a      	mov	r2, r3
 80066e4:	f000 fa62 	bl	8006bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2140      	movs	r1, #64	@ 0x40
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fabb 	bl	8006c6a <TIM_ITRx_SetConfig>
      break;
 80066f4:	e00c      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4619      	mov	r1, r3
 8006700:	4610      	mov	r0, r2
 8006702:	f000 fab2 	bl	8006c6a <TIM_ITRx_SetConfig>
      break;
 8006706:	e003      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	73fb      	strb	r3, [r7, #15]
      break;
 800670c:	e000      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800670e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
	...

0800677c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a3a      	ldr	r2, [pc, #232]	@ (8006878 <TIM_Base_SetConfig+0xfc>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d00f      	beq.n	80067b4 <TIM_Base_SetConfig+0x38>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800679a:	d00b      	beq.n	80067b4 <TIM_Base_SetConfig+0x38>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a37      	ldr	r2, [pc, #220]	@ (800687c <TIM_Base_SetConfig+0x100>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d007      	beq.n	80067b4 <TIM_Base_SetConfig+0x38>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a36      	ldr	r2, [pc, #216]	@ (8006880 <TIM_Base_SetConfig+0x104>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d003      	beq.n	80067b4 <TIM_Base_SetConfig+0x38>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a35      	ldr	r2, [pc, #212]	@ (8006884 <TIM_Base_SetConfig+0x108>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d108      	bne.n	80067c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a2b      	ldr	r2, [pc, #172]	@ (8006878 <TIM_Base_SetConfig+0xfc>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d01b      	beq.n	8006806 <TIM_Base_SetConfig+0x8a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d4:	d017      	beq.n	8006806 <TIM_Base_SetConfig+0x8a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a28      	ldr	r2, [pc, #160]	@ (800687c <TIM_Base_SetConfig+0x100>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d013      	beq.n	8006806 <TIM_Base_SetConfig+0x8a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a27      	ldr	r2, [pc, #156]	@ (8006880 <TIM_Base_SetConfig+0x104>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00f      	beq.n	8006806 <TIM_Base_SetConfig+0x8a>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a26      	ldr	r2, [pc, #152]	@ (8006884 <TIM_Base_SetConfig+0x108>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00b      	beq.n	8006806 <TIM_Base_SetConfig+0x8a>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a25      	ldr	r2, [pc, #148]	@ (8006888 <TIM_Base_SetConfig+0x10c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d007      	beq.n	8006806 <TIM_Base_SetConfig+0x8a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a24      	ldr	r2, [pc, #144]	@ (800688c <TIM_Base_SetConfig+0x110>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d003      	beq.n	8006806 <TIM_Base_SetConfig+0x8a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a23      	ldr	r2, [pc, #140]	@ (8006890 <TIM_Base_SetConfig+0x114>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d108      	bne.n	8006818 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800680c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4313      	orrs	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a0e      	ldr	r2, [pc, #56]	@ (8006878 <TIM_Base_SetConfig+0xfc>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d103      	bne.n	800684c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	691a      	ldr	r2, [r3, #16]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b01      	cmp	r3, #1
 800685c:	d105      	bne.n	800686a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	f023 0201 	bic.w	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	611a      	str	r2, [r3, #16]
  }
}
 800686a:	bf00      	nop
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	40010000 	.word	0x40010000
 800687c:	40000400 	.word	0x40000400
 8006880:	40000800 	.word	0x40000800
 8006884:	40000c00 	.word	0x40000c00
 8006888:	40014000 	.word	0x40014000
 800688c:	40014400 	.word	0x40014400
 8006890:	40014800 	.word	0x40014800

08006894 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	f023 0201 	bic.w	r2, r3, #1
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0303 	bic.w	r3, r3, #3
 80068ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f023 0302 	bic.w	r3, r3, #2
 80068dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a1c      	ldr	r2, [pc, #112]	@ (800695c <TIM_OC1_SetConfig+0xc8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d10c      	bne.n	800690a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f023 0308 	bic.w	r3, r3, #8
 80068f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f023 0304 	bic.w	r3, r3, #4
 8006908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a13      	ldr	r2, [pc, #76]	@ (800695c <TIM_OC1_SetConfig+0xc8>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d111      	bne.n	8006936 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	621a      	str	r2, [r3, #32]
}
 8006950:	bf00      	nop
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	40010000 	.word	0x40010000

08006960 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	f023 0210 	bic.w	r2, r3, #16
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800698e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f023 0320 	bic.w	r3, r3, #32
 80069aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	011b      	lsls	r3, r3, #4
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006a34 <TIM_OC2_SetConfig+0xd4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d10d      	bne.n	80069dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a15      	ldr	r2, [pc, #84]	@ (8006a34 <TIM_OC2_SetConfig+0xd4>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d113      	bne.n	8006a0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	621a      	str	r2, [r3, #32]
}
 8006a26:	bf00      	nop
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40010000 	.word	0x40010000

08006a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0303 	bic.w	r3, r3, #3
 8006a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a1d      	ldr	r2, [pc, #116]	@ (8006b08 <TIM_OC3_SetConfig+0xd0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d10d      	bne.n	8006ab2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	021b      	lsls	r3, r3, #8
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a14      	ldr	r2, [pc, #80]	@ (8006b08 <TIM_OC3_SetConfig+0xd0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d113      	bne.n	8006ae2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	011b      	lsls	r3, r3, #4
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	621a      	str	r2, [r3, #32]
}
 8006afc:	bf00      	nop
 8006afe:	371c      	adds	r7, #28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	40010000 	.word	0x40010000

08006b0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	021b      	lsls	r3, r3, #8
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	031b      	lsls	r3, r3, #12
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a10      	ldr	r2, [pc, #64]	@ (8006ba8 <TIM_OC4_SetConfig+0x9c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d109      	bne.n	8006b80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	019b      	lsls	r3, r3, #6
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	621a      	str	r2, [r3, #32]
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	40010000 	.word	0x40010000

08006bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	f023 0201 	bic.w	r2, r3, #1
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	011b      	lsls	r3, r3, #4
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f023 030a 	bic.w	r3, r3, #10
 8006be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b087      	sub	sp, #28
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	f023 0210 	bic.w	r2, r3, #16
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	031b      	lsls	r3, r3, #12
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	011b      	lsls	r3, r3, #4
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	621a      	str	r2, [r3, #32]
}
 8006c5e:	bf00      	nop
 8006c60:	371c      	adds	r7, #28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b085      	sub	sp, #20
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f043 0307 	orr.w	r3, r3, #7
 8006c8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	609a      	str	r2, [r3, #8]
}
 8006c94:	bf00      	nop
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	021a      	lsls	r2, r3, #8
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	609a      	str	r2, [r3, #8]
}
 8006cd4:	bf00      	nop
 8006cd6:	371c      	adds	r7, #28
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f003 031f 	and.w	r3, r3, #31
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6a1a      	ldr	r2, [r3, #32]
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	43db      	mvns	r3, r3
 8006d02:	401a      	ands	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a1a      	ldr	r2, [r3, #32]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	f003 031f 	and.w	r3, r3, #31
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	fa01 f303 	lsl.w	r3, r1, r3
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
	...

08006d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d101      	bne.n	8006d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d40:	2302      	movs	r3, #2
 8006d42:	e050      	b.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1c      	ldr	r2, [pc, #112]	@ (8006df4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d018      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d90:	d013      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a18      	ldr	r2, [pc, #96]	@ (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00e      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a16      	ldr	r2, [pc, #88]	@ (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d009      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a15      	ldr	r2, [pc, #84]	@ (8006e00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d004      	beq.n	8006dba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a13      	ldr	r2, [pc, #76]	@ (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d10c      	bne.n	8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	40010000 	.word	0x40010000
 8006df8:	40000400 	.word	0x40000400
 8006dfc:	40000800 	.word	0x40000800
 8006e00:	40000c00 	.word	0x40000c00
 8006e04:	40014000 	.word	0x40014000

08006e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e042      	b.n	8006ec8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d106      	bne.n	8006e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fb fdee 	bl	8002a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2224      	movs	r2, #36	@ 0x24
 8006e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68da      	ldr	r2, [r3, #12]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f82b 	bl	8006ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	695a      	ldr	r2, [r3, #20]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ed4:	b0c0      	sub	sp, #256	@ 0x100
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eec:	68d9      	ldr	r1, [r3, #12]
 8006eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	ea40 0301 	orr.w	r3, r0, r1
 8006ef8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	431a      	orrs	r2, r3
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f28:	f021 010c 	bic.w	r1, r1, #12
 8006f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f36:	430b      	orrs	r3, r1
 8006f38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4a:	6999      	ldr	r1, [r3, #24]
 8006f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	ea40 0301 	orr.w	r3, r0, r1
 8006f56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	4b8f      	ldr	r3, [pc, #572]	@ (800719c <UART_SetConfig+0x2cc>)
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d005      	beq.n	8006f70 <UART_SetConfig+0xa0>
 8006f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	4b8d      	ldr	r3, [pc, #564]	@ (80071a0 <UART_SetConfig+0x2d0>)
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d104      	bne.n	8006f7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f70:	f7fe f9ee 	bl	8005350 <HAL_RCC_GetPCLK2Freq>
 8006f74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f78:	e003      	b.n	8006f82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f7a:	f7fe f9d5 	bl	8005328 <HAL_RCC_GetPCLK1Freq>
 8006f7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f8c:	f040 810c 	bne.w	80071a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	462b      	mov	r3, r5
 8006fa6:	1891      	adds	r1, r2, r2
 8006fa8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006faa:	415b      	adcs	r3, r3
 8006fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006fb2:	4621      	mov	r1, r4
 8006fb4:	eb12 0801 	adds.w	r8, r2, r1
 8006fb8:	4629      	mov	r1, r5
 8006fba:	eb43 0901 	adc.w	r9, r3, r1
 8006fbe:	f04f 0200 	mov.w	r2, #0
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fd2:	4690      	mov	r8, r2
 8006fd4:	4699      	mov	r9, r3
 8006fd6:	4623      	mov	r3, r4
 8006fd8:	eb18 0303 	adds.w	r3, r8, r3
 8006fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	eb49 0303 	adc.w	r3, r9, r3
 8006fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ff6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ffa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ffe:	460b      	mov	r3, r1
 8007000:	18db      	adds	r3, r3, r3
 8007002:	653b      	str	r3, [r7, #80]	@ 0x50
 8007004:	4613      	mov	r3, r2
 8007006:	eb42 0303 	adc.w	r3, r2, r3
 800700a:	657b      	str	r3, [r7, #84]	@ 0x54
 800700c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007010:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007014:	f7f9 fe40 	bl	8000c98 <__aeabi_uldivmod>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4b61      	ldr	r3, [pc, #388]	@ (80071a4 <UART_SetConfig+0x2d4>)
 800701e:	fba3 2302 	umull	r2, r3, r3, r2
 8007022:	095b      	lsrs	r3, r3, #5
 8007024:	011c      	lsls	r4, r3, #4
 8007026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800702a:	2200      	movs	r2, #0
 800702c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007030:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007034:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007038:	4642      	mov	r2, r8
 800703a:	464b      	mov	r3, r9
 800703c:	1891      	adds	r1, r2, r2
 800703e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007040:	415b      	adcs	r3, r3
 8007042:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007044:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007048:	4641      	mov	r1, r8
 800704a:	eb12 0a01 	adds.w	sl, r2, r1
 800704e:	4649      	mov	r1, r9
 8007050:	eb43 0b01 	adc.w	fp, r3, r1
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	f04f 0300 	mov.w	r3, #0
 800705c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007060:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007064:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007068:	4692      	mov	sl, r2
 800706a:	469b      	mov	fp, r3
 800706c:	4643      	mov	r3, r8
 800706e:	eb1a 0303 	adds.w	r3, sl, r3
 8007072:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007076:	464b      	mov	r3, r9
 8007078:	eb4b 0303 	adc.w	r3, fp, r3
 800707c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800708c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007090:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007094:	460b      	mov	r3, r1
 8007096:	18db      	adds	r3, r3, r3
 8007098:	643b      	str	r3, [r7, #64]	@ 0x40
 800709a:	4613      	mov	r3, r2
 800709c:	eb42 0303 	adc.w	r3, r2, r3
 80070a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80070a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80070a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80070aa:	f7f9 fdf5 	bl	8000c98 <__aeabi_uldivmod>
 80070ae:	4602      	mov	r2, r0
 80070b0:	460b      	mov	r3, r1
 80070b2:	4611      	mov	r1, r2
 80070b4:	4b3b      	ldr	r3, [pc, #236]	@ (80071a4 <UART_SetConfig+0x2d4>)
 80070b6:	fba3 2301 	umull	r2, r3, r3, r1
 80070ba:	095b      	lsrs	r3, r3, #5
 80070bc:	2264      	movs	r2, #100	@ 0x64
 80070be:	fb02 f303 	mul.w	r3, r2, r3
 80070c2:	1acb      	subs	r3, r1, r3
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80070ca:	4b36      	ldr	r3, [pc, #216]	@ (80071a4 <UART_SetConfig+0x2d4>)
 80070cc:	fba3 2302 	umull	r2, r3, r3, r2
 80070d0:	095b      	lsrs	r3, r3, #5
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80070d8:	441c      	add	r4, r3
 80070da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070ec:	4642      	mov	r2, r8
 80070ee:	464b      	mov	r3, r9
 80070f0:	1891      	adds	r1, r2, r2
 80070f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070f4:	415b      	adcs	r3, r3
 80070f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070fc:	4641      	mov	r1, r8
 80070fe:	1851      	adds	r1, r2, r1
 8007100:	6339      	str	r1, [r7, #48]	@ 0x30
 8007102:	4649      	mov	r1, r9
 8007104:	414b      	adcs	r3, r1
 8007106:	637b      	str	r3, [r7, #52]	@ 0x34
 8007108:	f04f 0200 	mov.w	r2, #0
 800710c:	f04f 0300 	mov.w	r3, #0
 8007110:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007114:	4659      	mov	r1, fp
 8007116:	00cb      	lsls	r3, r1, #3
 8007118:	4651      	mov	r1, sl
 800711a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800711e:	4651      	mov	r1, sl
 8007120:	00ca      	lsls	r2, r1, #3
 8007122:	4610      	mov	r0, r2
 8007124:	4619      	mov	r1, r3
 8007126:	4603      	mov	r3, r0
 8007128:	4642      	mov	r2, r8
 800712a:	189b      	adds	r3, r3, r2
 800712c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007130:	464b      	mov	r3, r9
 8007132:	460a      	mov	r2, r1
 8007134:	eb42 0303 	adc.w	r3, r2, r3
 8007138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800713c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007148:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800714c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007150:	460b      	mov	r3, r1
 8007152:	18db      	adds	r3, r3, r3
 8007154:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007156:	4613      	mov	r3, r2
 8007158:	eb42 0303 	adc.w	r3, r2, r3
 800715c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800715e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007162:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007166:	f7f9 fd97 	bl	8000c98 <__aeabi_uldivmod>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4b0d      	ldr	r3, [pc, #52]	@ (80071a4 <UART_SetConfig+0x2d4>)
 8007170:	fba3 1302 	umull	r1, r3, r3, r2
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	2164      	movs	r1, #100	@ 0x64
 8007178:	fb01 f303 	mul.w	r3, r1, r3
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	3332      	adds	r3, #50	@ 0x32
 8007182:	4a08      	ldr	r2, [pc, #32]	@ (80071a4 <UART_SetConfig+0x2d4>)
 8007184:	fba2 2303 	umull	r2, r3, r2, r3
 8007188:	095b      	lsrs	r3, r3, #5
 800718a:	f003 0207 	and.w	r2, r3, #7
 800718e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4422      	add	r2, r4
 8007196:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007198:	e106      	b.n	80073a8 <UART_SetConfig+0x4d8>
 800719a:	bf00      	nop
 800719c:	40011000 	.word	0x40011000
 80071a0:	40011400 	.word	0x40011400
 80071a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071ac:	2200      	movs	r2, #0
 80071ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80071b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80071ba:	4642      	mov	r2, r8
 80071bc:	464b      	mov	r3, r9
 80071be:	1891      	adds	r1, r2, r2
 80071c0:	6239      	str	r1, [r7, #32]
 80071c2:	415b      	adcs	r3, r3
 80071c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80071c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071ca:	4641      	mov	r1, r8
 80071cc:	1854      	adds	r4, r2, r1
 80071ce:	4649      	mov	r1, r9
 80071d0:	eb43 0501 	adc.w	r5, r3, r1
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	f04f 0300 	mov.w	r3, #0
 80071dc:	00eb      	lsls	r3, r5, #3
 80071de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071e2:	00e2      	lsls	r2, r4, #3
 80071e4:	4614      	mov	r4, r2
 80071e6:	461d      	mov	r5, r3
 80071e8:	4643      	mov	r3, r8
 80071ea:	18e3      	adds	r3, r4, r3
 80071ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071f0:	464b      	mov	r3, r9
 80071f2:	eb45 0303 	adc.w	r3, r5, r3
 80071f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007206:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	f04f 0300 	mov.w	r3, #0
 8007212:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007216:	4629      	mov	r1, r5
 8007218:	008b      	lsls	r3, r1, #2
 800721a:	4621      	mov	r1, r4
 800721c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007220:	4621      	mov	r1, r4
 8007222:	008a      	lsls	r2, r1, #2
 8007224:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007228:	f7f9 fd36 	bl	8000c98 <__aeabi_uldivmod>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4b60      	ldr	r3, [pc, #384]	@ (80073b4 <UART_SetConfig+0x4e4>)
 8007232:	fba3 2302 	umull	r2, r3, r3, r2
 8007236:	095b      	lsrs	r3, r3, #5
 8007238:	011c      	lsls	r4, r3, #4
 800723a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800723e:	2200      	movs	r2, #0
 8007240:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007244:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007248:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800724c:	4642      	mov	r2, r8
 800724e:	464b      	mov	r3, r9
 8007250:	1891      	adds	r1, r2, r2
 8007252:	61b9      	str	r1, [r7, #24]
 8007254:	415b      	adcs	r3, r3
 8007256:	61fb      	str	r3, [r7, #28]
 8007258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800725c:	4641      	mov	r1, r8
 800725e:	1851      	adds	r1, r2, r1
 8007260:	6139      	str	r1, [r7, #16]
 8007262:	4649      	mov	r1, r9
 8007264:	414b      	adcs	r3, r1
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	f04f 0200 	mov.w	r2, #0
 800726c:	f04f 0300 	mov.w	r3, #0
 8007270:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007274:	4659      	mov	r1, fp
 8007276:	00cb      	lsls	r3, r1, #3
 8007278:	4651      	mov	r1, sl
 800727a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800727e:	4651      	mov	r1, sl
 8007280:	00ca      	lsls	r2, r1, #3
 8007282:	4610      	mov	r0, r2
 8007284:	4619      	mov	r1, r3
 8007286:	4603      	mov	r3, r0
 8007288:	4642      	mov	r2, r8
 800728a:	189b      	adds	r3, r3, r2
 800728c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007290:	464b      	mov	r3, r9
 8007292:	460a      	mov	r2, r1
 8007294:	eb42 0303 	adc.w	r3, r2, r3
 8007298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800729c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80072a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80072b4:	4649      	mov	r1, r9
 80072b6:	008b      	lsls	r3, r1, #2
 80072b8:	4641      	mov	r1, r8
 80072ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072be:	4641      	mov	r1, r8
 80072c0:	008a      	lsls	r2, r1, #2
 80072c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80072c6:	f7f9 fce7 	bl	8000c98 <__aeabi_uldivmod>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	4611      	mov	r1, r2
 80072d0:	4b38      	ldr	r3, [pc, #224]	@ (80073b4 <UART_SetConfig+0x4e4>)
 80072d2:	fba3 2301 	umull	r2, r3, r3, r1
 80072d6:	095b      	lsrs	r3, r3, #5
 80072d8:	2264      	movs	r2, #100	@ 0x64
 80072da:	fb02 f303 	mul.w	r3, r2, r3
 80072de:	1acb      	subs	r3, r1, r3
 80072e0:	011b      	lsls	r3, r3, #4
 80072e2:	3332      	adds	r3, #50	@ 0x32
 80072e4:	4a33      	ldr	r2, [pc, #204]	@ (80073b4 <UART_SetConfig+0x4e4>)
 80072e6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ea:	095b      	lsrs	r3, r3, #5
 80072ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072f0:	441c      	add	r4, r3
 80072f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072f6:	2200      	movs	r2, #0
 80072f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80072fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80072fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007300:	4642      	mov	r2, r8
 8007302:	464b      	mov	r3, r9
 8007304:	1891      	adds	r1, r2, r2
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	415b      	adcs	r3, r3
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007310:	4641      	mov	r1, r8
 8007312:	1851      	adds	r1, r2, r1
 8007314:	6039      	str	r1, [r7, #0]
 8007316:	4649      	mov	r1, r9
 8007318:	414b      	adcs	r3, r1
 800731a:	607b      	str	r3, [r7, #4]
 800731c:	f04f 0200 	mov.w	r2, #0
 8007320:	f04f 0300 	mov.w	r3, #0
 8007324:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007328:	4659      	mov	r1, fp
 800732a:	00cb      	lsls	r3, r1, #3
 800732c:	4651      	mov	r1, sl
 800732e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007332:	4651      	mov	r1, sl
 8007334:	00ca      	lsls	r2, r1, #3
 8007336:	4610      	mov	r0, r2
 8007338:	4619      	mov	r1, r3
 800733a:	4603      	mov	r3, r0
 800733c:	4642      	mov	r2, r8
 800733e:	189b      	adds	r3, r3, r2
 8007340:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007342:	464b      	mov	r3, r9
 8007344:	460a      	mov	r2, r1
 8007346:	eb42 0303 	adc.w	r3, r2, r3
 800734a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800734c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	663b      	str	r3, [r7, #96]	@ 0x60
 8007356:	667a      	str	r2, [r7, #100]	@ 0x64
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	f04f 0300 	mov.w	r3, #0
 8007360:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007364:	4649      	mov	r1, r9
 8007366:	008b      	lsls	r3, r1, #2
 8007368:	4641      	mov	r1, r8
 800736a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800736e:	4641      	mov	r1, r8
 8007370:	008a      	lsls	r2, r1, #2
 8007372:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007376:	f7f9 fc8f 	bl	8000c98 <__aeabi_uldivmod>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	4b0d      	ldr	r3, [pc, #52]	@ (80073b4 <UART_SetConfig+0x4e4>)
 8007380:	fba3 1302 	umull	r1, r3, r3, r2
 8007384:	095b      	lsrs	r3, r3, #5
 8007386:	2164      	movs	r1, #100	@ 0x64
 8007388:	fb01 f303 	mul.w	r3, r1, r3
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	011b      	lsls	r3, r3, #4
 8007390:	3332      	adds	r3, #50	@ 0x32
 8007392:	4a08      	ldr	r2, [pc, #32]	@ (80073b4 <UART_SetConfig+0x4e4>)
 8007394:	fba2 2303 	umull	r2, r3, r2, r3
 8007398:	095b      	lsrs	r3, r3, #5
 800739a:	f003 020f 	and.w	r2, r3, #15
 800739e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4422      	add	r2, r4
 80073a6:	609a      	str	r2, [r3, #8]
}
 80073a8:	bf00      	nop
 80073aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80073ae:	46bd      	mov	sp, r7
 80073b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073b4:	51eb851f 	.word	0x51eb851f

080073b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80073bc:	4904      	ldr	r1, [pc, #16]	@ (80073d0 <MX_FATFS_Init+0x18>)
 80073be:	4805      	ldr	r0, [pc, #20]	@ (80073d4 <MX_FATFS_Init+0x1c>)
 80073c0:	f002 fb4a 	bl	8009a58 <FATFS_LinkDriver>
 80073c4:	4603      	mov	r3, r0
 80073c6:	461a      	mov	r2, r3
 80073c8:	4b03      	ldr	r3, [pc, #12]	@ (80073d8 <MX_FATFS_Init+0x20>)
 80073ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80073cc:	bf00      	nop
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	20000dec 	.word	0x20000dec
 80073d4:	2000001c 	.word	0x2000001c
 80073d8:	20000de8 	.word	0x20000de8

080073dc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80073dc:	b480      	push	{r7}
 80073de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80073e0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	4603      	mov	r3, r0
 80073f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return SD_disk_initialize (pdrv);
 80073f6:	79fb      	ldrb	r3, [r7, #7]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fa f88d 	bl	8001518 <SD_disk_initialize>
 80073fe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007400:	4618      	mov	r0, r3
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	4603      	mov	r3, r0
 8007410:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
     return SD_disk_status(pdrv);
 8007412:	79fb      	ldrb	r3, [r7, #7]
 8007414:	4618      	mov	r0, r3
 8007416:	f7fa f969 	bl	80016ec <SD_disk_status>
 800741a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800741c:	4618      	mov	r0, r3
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	607a      	str	r2, [r7, #4]
 800742e:	603b      	str	r3, [r7, #0]
 8007430:	4603      	mov	r3, r0
 8007432:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 8007434:	7bf8      	ldrb	r0, [r7, #15]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	68b9      	ldr	r1, [r7, #8]
 800743c:	f7fa f96c 	bl	8001718 <SD_disk_read>
 8007440:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	603b      	str	r3, [r7, #0]
 8007456:	4603      	mov	r3, r0
 8007458:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 800745a:	7bf8      	ldrb	r0, [r7, #15]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	68b9      	ldr	r1, [r7, #8]
 8007462:	f7fa f9c3 	bl	80017ec <SD_disk_write>
 8007466:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007468:	4618      	mov	r0, r3
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	603a      	str	r2, [r7, #0]
 800747a:	71fb      	strb	r3, [r7, #7]
 800747c:	460b      	mov	r3, r1
 800747e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8007480:	79b9      	ldrb	r1, [r7, #6]
 8007482:	79fb      	ldrb	r3, [r7, #7]
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	4618      	mov	r0, r3
 8007488:	f7fa fa34 	bl	80018f4 <SD_disk_ioctl>
 800748c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800748e:	4618      	mov	r0, r3
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	4603      	mov	r3, r0
 80074a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80074a2:	79fb      	ldrb	r3, [r7, #7]
 80074a4:	4a08      	ldr	r2, [pc, #32]	@ (80074c8 <disk_status+0x30>)
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	79fa      	ldrb	r2, [r7, #7]
 80074b0:	4905      	ldr	r1, [pc, #20]	@ (80074c8 <disk_status+0x30>)
 80074b2:	440a      	add	r2, r1
 80074b4:	7a12      	ldrb	r2, [r2, #8]
 80074b6:	4610      	mov	r0, r2
 80074b8:	4798      	blx	r3
 80074ba:	4603      	mov	r3, r0
 80074bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80074be:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	20000e18 	.word	0x20000e18

080074cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	4a0e      	ldr	r2, [pc, #56]	@ (8007518 <disk_initialize+0x4c>)
 80074de:	5cd3      	ldrb	r3, [r2, r3]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d114      	bne.n	800750e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80074e4:	79fb      	ldrb	r3, [r7, #7]
 80074e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007518 <disk_initialize+0x4c>)
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	4413      	add	r3, r2
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	79fa      	ldrb	r2, [r7, #7]
 80074f2:	4909      	ldr	r1, [pc, #36]	@ (8007518 <disk_initialize+0x4c>)
 80074f4:	440a      	add	r2, r1
 80074f6:	7a12      	ldrb	r2, [r2, #8]
 80074f8:	4610      	mov	r0, r2
 80074fa:	4798      	blx	r3
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d103      	bne.n	800750e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8007506:	79fb      	ldrb	r3, [r7, #7]
 8007508:	4a03      	ldr	r2, [pc, #12]	@ (8007518 <disk_initialize+0x4c>)
 800750a:	2101      	movs	r1, #1
 800750c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800750e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	20000e18 	.word	0x20000e18

0800751c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800751c:	b590      	push	{r4, r7, lr}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	607a      	str	r2, [r7, #4]
 8007526:	603b      	str	r3, [r7, #0]
 8007528:	4603      	mov	r3, r0
 800752a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	4a0a      	ldr	r2, [pc, #40]	@ (8007558 <disk_read+0x3c>)
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	689c      	ldr	r4, [r3, #8]
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	4a07      	ldr	r2, [pc, #28]	@ (8007558 <disk_read+0x3c>)
 800753c:	4413      	add	r3, r2
 800753e:	7a18      	ldrb	r0, [r3, #8]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	47a0      	blx	r4
 8007548:	4603      	mov	r3, r0
 800754a:	75fb      	strb	r3, [r7, #23]
  return res;
 800754c:	7dfb      	ldrb	r3, [r7, #23]
}
 800754e:	4618      	mov	r0, r3
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	bd90      	pop	{r4, r7, pc}
 8007556:	bf00      	nop
 8007558:	20000e18 	.word	0x20000e18

0800755c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800755c:	b590      	push	{r4, r7, lr}
 800755e:	b087      	sub	sp, #28
 8007560:	af00      	add	r7, sp, #0
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	607a      	str	r2, [r7, #4]
 8007566:	603b      	str	r3, [r7, #0]
 8007568:	4603      	mov	r3, r0
 800756a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	4a0a      	ldr	r2, [pc, #40]	@ (8007598 <disk_write+0x3c>)
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	68dc      	ldr	r4, [r3, #12]
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	4a07      	ldr	r2, [pc, #28]	@ (8007598 <disk_write+0x3c>)
 800757c:	4413      	add	r3, r2
 800757e:	7a18      	ldrb	r0, [r3, #8]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	68b9      	ldr	r1, [r7, #8]
 8007586:	47a0      	blx	r4
 8007588:	4603      	mov	r3, r0
 800758a:	75fb      	strb	r3, [r7, #23]
  return res;
 800758c:	7dfb      	ldrb	r3, [r7, #23]
}
 800758e:	4618      	mov	r0, r3
 8007590:	371c      	adds	r7, #28
 8007592:	46bd      	mov	sp, r7
 8007594:	bd90      	pop	{r4, r7, pc}
 8007596:	bf00      	nop
 8007598:	20000e18 	.word	0x20000e18

0800759c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	603a      	str	r2, [r7, #0]
 80075a6:	71fb      	strb	r3, [r7, #7]
 80075a8:	460b      	mov	r3, r1
 80075aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	4a09      	ldr	r2, [pc, #36]	@ (80075d4 <disk_ioctl+0x38>)
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	79fa      	ldrb	r2, [r7, #7]
 80075ba:	4906      	ldr	r1, [pc, #24]	@ (80075d4 <disk_ioctl+0x38>)
 80075bc:	440a      	add	r2, r1
 80075be:	7a10      	ldrb	r0, [r2, #8]
 80075c0:	79b9      	ldrb	r1, [r7, #6]
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	4798      	blx	r3
 80075c6:	4603      	mov	r3, r0
 80075c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20000e18 	.word	0x20000e18

080075d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3301      	adds	r3, #1
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80075e8:	89fb      	ldrh	r3, [r7, #14]
 80075ea:	021b      	lsls	r3, r3, #8
 80075ec:	b21a      	sxth	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	b21b      	sxth	r3, r3
 80075f4:	4313      	orrs	r3, r2
 80075f6:	b21b      	sxth	r3, r3
 80075f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80075fa:	89fb      	ldrh	r3, [r7, #14]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3303      	adds	r3, #3
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	021b      	lsls	r3, r3, #8
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	3202      	adds	r2, #2
 8007620:	7812      	ldrb	r2, [r2, #0]
 8007622:	4313      	orrs	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	021b      	lsls	r3, r3, #8
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	3201      	adds	r2, #1
 800762e:	7812      	ldrb	r2, [r2, #0]
 8007630:	4313      	orrs	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	021b      	lsls	r3, r3, #8
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	7812      	ldrb	r2, [r2, #0]
 800763c:	4313      	orrs	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]
	return rv;
 8007640:	68fb      	ldr	r3, [r7, #12]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
 8007656:	460b      	mov	r3, r1
 8007658:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	887a      	ldrh	r2, [r7, #2]
 8007662:	b2d2      	uxtb	r2, r2
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	887b      	ldrh	r3, [r7, #2]
 8007668:	0a1b      	lsrs	r3, r3, #8
 800766a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	607a      	str	r2, [r7, #4]
 8007672:	887a      	ldrh	r2, [r7, #2]
 8007674:	b2d2      	uxtb	r2, r2
 8007676:	701a      	strb	r2, [r3, #0]
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	607a      	str	r2, [r7, #4]
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	b2d2      	uxtb	r2, r2
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	0a1b      	lsrs	r3, r3, #8
 800769e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	607a      	str	r2, [r7, #4]
 80076a6:	683a      	ldr	r2, [r7, #0]
 80076a8:	b2d2      	uxtb	r2, r2
 80076aa:	701a      	strb	r2, [r3, #0]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	0a1b      	lsrs	r3, r3, #8
 80076b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	1c5a      	adds	r2, r3, #1
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	b2d2      	uxtb	r2, r2
 80076bc:	701a      	strb	r2, [r3, #0]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	0a1b      	lsrs	r3, r3, #8
 80076c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	607a      	str	r2, [r7, #4]
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	b2d2      	uxtb	r2, r2
 80076ce:	701a      	strb	r2, [r3, #0]
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00d      	beq.n	8007712 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	1c53      	adds	r3, r2, #1
 80076fa:	613b      	str	r3, [r7, #16]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	1c59      	adds	r1, r3, #1
 8007700:	6179      	str	r1, [r7, #20]
 8007702:	7812      	ldrb	r2, [r2, #0]
 8007704:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	3b01      	subs	r3, #1
 800770a:	607b      	str	r3, [r7, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1f1      	bne.n	80076f6 <mem_cpy+0x1a>
	}
}
 8007712:	bf00      	nop
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800771e:	b480      	push	{r7}
 8007720:	b087      	sub	sp, #28
 8007722:	af00      	add	r7, sp, #0
 8007724:	60f8      	str	r0, [r7, #12]
 8007726:	60b9      	str	r1, [r7, #8]
 8007728:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	617a      	str	r2, [r7, #20]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	b2d2      	uxtb	r2, r2
 8007738:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3b01      	subs	r3, #1
 800773e:	607b      	str	r3, [r7, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1f3      	bne.n	800772e <mem_set+0x10>
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	371c      	adds	r7, #28
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007754:	b480      	push	{r7}
 8007756:	b089      	sub	sp, #36	@ 0x24
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	61fb      	str	r3, [r7, #28]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	61fa      	str	r2, [r7, #28]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	4619      	mov	r1, r3
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	1c5a      	adds	r2, r3, #1
 800777a:	61ba      	str	r2, [r7, #24]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	1acb      	subs	r3, r1, r3
 8007780:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	3b01      	subs	r3, #1
 8007786:	607b      	str	r3, [r7, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <mem_cmp+0x40>
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0eb      	beq.n	800776c <mem_cmp+0x18>

	return r;
 8007794:	697b      	ldr	r3, [r7, #20]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3724      	adds	r7, #36	@ 0x24
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80077ac:	e002      	b.n	80077b4 <chk_chr+0x12>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3301      	adds	r3, #1
 80077b2:	607b      	str	r3, [r7, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d005      	beq.n	80077c8 <chk_chr+0x26>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d1f2      	bne.n	80077ae <chk_chr+0xc>
	return *str;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	781b      	ldrb	r3, [r3, #0]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d009      	beq.n	80077fa <lock_fs+0x22>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f002 f96f 	bl	8009ace <ff_req_grant>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <lock_fs+0x22>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e000      	b.n	80077fc <lock_fs+0x24>
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00d      	beq.n	8007832 <unlock_fs+0x2e>
 8007816:	78fb      	ldrb	r3, [r7, #3]
 8007818:	2b0c      	cmp	r3, #12
 800781a:	d00a      	beq.n	8007832 <unlock_fs+0x2e>
 800781c:	78fb      	ldrb	r3, [r7, #3]
 800781e:	2b0b      	cmp	r3, #11
 8007820:	d007      	beq.n	8007832 <unlock_fs+0x2e>
 8007822:	78fb      	ldrb	r3, [r7, #3]
 8007824:	2b0f      	cmp	r3, #15
 8007826:	d004      	beq.n	8007832 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	4618      	mov	r0, r3
 800782e:	f002 f963 	bl	8009af8 <ff_rel_grant>
	}
}
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007846:	2300      	movs	r3, #0
 8007848:	60bb      	str	r3, [r7, #8]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	e029      	b.n	80078a4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007850:	4a27      	ldr	r2, [pc, #156]	@ (80078f0 <chk_lock+0xb4>)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	011b      	lsls	r3, r3, #4
 8007856:	4413      	add	r3, r2
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d01d      	beq.n	800789a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800785e:	4a24      	ldr	r2, [pc, #144]	@ (80078f0 <chk_lock+0xb4>)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	011b      	lsls	r3, r3, #4
 8007864:	4413      	add	r3, r2
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	429a      	cmp	r2, r3
 800786e:	d116      	bne.n	800789e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007870:	4a1f      	ldr	r2, [pc, #124]	@ (80078f0 <chk_lock+0xb4>)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	011b      	lsls	r3, r3, #4
 8007876:	4413      	add	r3, r2
 8007878:	3304      	adds	r3, #4
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007880:	429a      	cmp	r2, r3
 8007882:	d10c      	bne.n	800789e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007884:	4a1a      	ldr	r2, [pc, #104]	@ (80078f0 <chk_lock+0xb4>)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	4413      	add	r3, r2
 800788c:	3308      	adds	r3, #8
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007894:	429a      	cmp	r2, r3
 8007896:	d102      	bne.n	800789e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007898:	e007      	b.n	80078aa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800789a:	2301      	movs	r3, #1
 800789c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3301      	adds	r3, #1
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d9d2      	bls.n	8007850 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d109      	bne.n	80078c4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d102      	bne.n	80078bc <chk_lock+0x80>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d101      	bne.n	80078c0 <chk_lock+0x84>
 80078bc:	2300      	movs	r3, #0
 80078be:	e010      	b.n	80078e2 <chk_lock+0xa6>
 80078c0:	2312      	movs	r3, #18
 80078c2:	e00e      	b.n	80078e2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d108      	bne.n	80078dc <chk_lock+0xa0>
 80078ca:	4a09      	ldr	r2, [pc, #36]	@ (80078f0 <chk_lock+0xb4>)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	011b      	lsls	r3, r3, #4
 80078d0:	4413      	add	r3, r2
 80078d2:	330c      	adds	r3, #12
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078da:	d101      	bne.n	80078e0 <chk_lock+0xa4>
 80078dc:	2310      	movs	r3, #16
 80078de:	e000      	b.n	80078e2 <chk_lock+0xa6>
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20000df8 	.word	0x20000df8

080078f4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80078fa:	2300      	movs	r3, #0
 80078fc:	607b      	str	r3, [r7, #4]
 80078fe:	e002      	b.n	8007906 <enq_lock+0x12>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3301      	adds	r3, #1
 8007904:	607b      	str	r3, [r7, #4]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d806      	bhi.n	800791a <enq_lock+0x26>
 800790c:	4a09      	ldr	r2, [pc, #36]	@ (8007934 <enq_lock+0x40>)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	011b      	lsls	r3, r3, #4
 8007912:	4413      	add	r3, r2
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1f2      	bne.n	8007900 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b02      	cmp	r3, #2
 800791e:	bf14      	ite	ne
 8007920:	2301      	movne	r3, #1
 8007922:	2300      	moveq	r3, #0
 8007924:	b2db      	uxtb	r3, r3
}
 8007926:	4618      	mov	r0, r3
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	20000df8 	.word	0x20000df8

08007938 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	e01f      	b.n	8007988 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007948:	4a41      	ldr	r2, [pc, #260]	@ (8007a50 <inc_lock+0x118>)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	4413      	add	r3, r2
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d113      	bne.n	8007982 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800795a:	4a3d      	ldr	r2, [pc, #244]	@ (8007a50 <inc_lock+0x118>)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	011b      	lsls	r3, r3, #4
 8007960:	4413      	add	r3, r2
 8007962:	3304      	adds	r3, #4
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800796a:	429a      	cmp	r2, r3
 800796c:	d109      	bne.n	8007982 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800796e:	4a38      	ldr	r2, [pc, #224]	@ (8007a50 <inc_lock+0x118>)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	4413      	add	r3, r2
 8007976:	3308      	adds	r3, #8
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800797e:	429a      	cmp	r2, r3
 8007980:	d006      	beq.n	8007990 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3301      	adds	r3, #1
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d9dc      	bls.n	8007948 <inc_lock+0x10>
 800798e:	e000      	b.n	8007992 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007990:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b02      	cmp	r3, #2
 8007996:	d132      	bne.n	80079fe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007998:	2300      	movs	r3, #0
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	e002      	b.n	80079a4 <inc_lock+0x6c>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3301      	adds	r3, #1
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d806      	bhi.n	80079b8 <inc_lock+0x80>
 80079aa:	4a29      	ldr	r2, [pc, #164]	@ (8007a50 <inc_lock+0x118>)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	4413      	add	r3, r2
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1f2      	bne.n	800799e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d101      	bne.n	80079c2 <inc_lock+0x8a>
 80079be:	2300      	movs	r3, #0
 80079c0:	e040      	b.n	8007a44 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	4922      	ldr	r1, [pc, #136]	@ (8007a50 <inc_lock+0x118>)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	440b      	add	r3, r1
 80079ce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	491e      	ldr	r1, [pc, #120]	@ (8007a50 <inc_lock+0x118>)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	011b      	lsls	r3, r3, #4
 80079da:	440b      	add	r3, r1
 80079dc:	3304      	adds	r3, #4
 80079de:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	695a      	ldr	r2, [r3, #20]
 80079e4:	491a      	ldr	r1, [pc, #104]	@ (8007a50 <inc_lock+0x118>)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	011b      	lsls	r3, r3, #4
 80079ea:	440b      	add	r3, r1
 80079ec:	3308      	adds	r3, #8
 80079ee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80079f0:	4a17      	ldr	r2, [pc, #92]	@ (8007a50 <inc_lock+0x118>)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	4413      	add	r3, r2
 80079f8:	330c      	adds	r3, #12
 80079fa:	2200      	movs	r2, #0
 80079fc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d009      	beq.n	8007a18 <inc_lock+0xe0>
 8007a04:	4a12      	ldr	r2, [pc, #72]	@ (8007a50 <inc_lock+0x118>)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	4413      	add	r3, r2
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <inc_lock+0xe0>
 8007a14:	2300      	movs	r3, #0
 8007a16:	e015      	b.n	8007a44 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d108      	bne.n	8007a30 <inc_lock+0xf8>
 8007a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8007a50 <inc_lock+0x118>)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	4413      	add	r3, r2
 8007a26:	330c      	adds	r3, #12
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	e001      	b.n	8007a34 <inc_lock+0xfc>
 8007a30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a34:	4906      	ldr	r1, [pc, #24]	@ (8007a50 <inc_lock+0x118>)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	440b      	add	r3, r1
 8007a3c:	330c      	adds	r3, #12
 8007a3e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3301      	adds	r3, #1
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	20000df8 	.word	0x20000df8

08007a54 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	607b      	str	r3, [r7, #4]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d825      	bhi.n	8007ab4 <dec_lock+0x60>
		n = Files[i].ctr;
 8007a68:	4a17      	ldr	r2, [pc, #92]	@ (8007ac8 <dec_lock+0x74>)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	011b      	lsls	r3, r3, #4
 8007a6e:	4413      	add	r3, r2
 8007a70:	330c      	adds	r3, #12
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007a76:	89fb      	ldrh	r3, [r7, #14]
 8007a78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a7c:	d101      	bne.n	8007a82 <dec_lock+0x2e>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007a82:	89fb      	ldrh	r3, [r7, #14]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <dec_lock+0x3a>
 8007a88:	89fb      	ldrh	r3, [r7, #14]
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8007ac8 <dec_lock+0x74>)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	011b      	lsls	r3, r3, #4
 8007a94:	4413      	add	r3, r2
 8007a96:	330c      	adds	r3, #12
 8007a98:	89fa      	ldrh	r2, [r7, #14]
 8007a9a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007a9c:	89fb      	ldrh	r3, [r7, #14]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d105      	bne.n	8007aae <dec_lock+0x5a>
 8007aa2:	4a09      	ldr	r2, [pc, #36]	@ (8007ac8 <dec_lock+0x74>)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	4413      	add	r3, r2
 8007aaa:	2200      	movs	r2, #0
 8007aac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	737b      	strb	r3, [r7, #13]
 8007ab2:	e001      	b.n	8007ab8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007ab8:	7b7b      	ldrb	r3, [r7, #13]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	20000df8 	.word	0x20000df8

08007acc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	e010      	b.n	8007afc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007ada:	4a0d      	ldr	r2, [pc, #52]	@ (8007b10 <clear_lock+0x44>)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	4413      	add	r3, r2
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d105      	bne.n	8007af6 <clear_lock+0x2a>
 8007aea:	4a09      	ldr	r2, [pc, #36]	@ (8007b10 <clear_lock+0x44>)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	011b      	lsls	r3, r3, #4
 8007af0:	4413      	add	r3, r2
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3301      	adds	r3, #1
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d9eb      	bls.n	8007ada <clear_lock+0xe>
	}
}
 8007b02:	bf00      	nop
 8007b04:	bf00      	nop
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	20000df8 	.word	0x20000df8

08007b14 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	78db      	ldrb	r3, [r3, #3]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d034      	beq.n	8007b92 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b2c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	7858      	ldrb	r0, [r3, #1]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007b38:	2301      	movs	r3, #1
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	f7ff fd0e 	bl	800755c <disk_write>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	73fb      	strb	r3, [r7, #15]
 8007b4a:	e022      	b.n	8007b92 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	1ad2      	subs	r2, r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d217      	bcs.n	8007b92 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	789b      	ldrb	r3, [r3, #2]
 8007b66:	613b      	str	r3, [r7, #16]
 8007b68:	e010      	b.n	8007b8c <sync_window+0x78>
					wsect += fs->fsize;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	4413      	add	r3, r2
 8007b72:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	7858      	ldrb	r0, [r3, #1]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007b7e:	2301      	movs	r3, #1
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	f7ff fceb 	bl	800755c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	613b      	str	r3, [r7, #16]
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d8eb      	bhi.n	8007b6a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3718      	adds	r7, #24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d01b      	beq.n	8007bec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff ffad 	bl	8007b14 <sync_window>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d113      	bne.n	8007bec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	7858      	ldrb	r0, [r3, #1]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007bce:	2301      	movs	r3, #1
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	f7ff fca3 	bl	800751c <disk_read>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d004      	beq.n	8007be6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8007be0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff ff87 	bl	8007b14 <sync_window>
 8007c06:	4603      	mov	r3, r0
 8007c08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d158      	bne.n	8007cc2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d148      	bne.n	8007caa <sync_fs+0xb2>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	791b      	ldrb	r3, [r3, #4]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d144      	bne.n	8007caa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3338      	adds	r3, #56	@ 0x38
 8007c24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7ff fd77 	bl	800771e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3338      	adds	r3, #56	@ 0x38
 8007c34:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007c38:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7ff fd06 	bl	800764e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	3338      	adds	r3, #56	@ 0x38
 8007c46:	4921      	ldr	r1, [pc, #132]	@ (8007ccc <sync_fs+0xd4>)
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7ff fd1b 	bl	8007684 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3338      	adds	r3, #56	@ 0x38
 8007c52:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007c56:	491e      	ldr	r1, [pc, #120]	@ (8007cd0 <sync_fs+0xd8>)
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7ff fd13 	bl	8007684 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	3338      	adds	r3, #56	@ 0x38
 8007c62:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	f7ff fd09 	bl	8007684 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3338      	adds	r3, #56	@ 0x38
 8007c76:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	4610      	mov	r0, r2
 8007c82:	f7ff fcff 	bl	8007684 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	7858      	ldrb	r0, [r3, #1]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	f7ff fc5c 	bl	800755c <disk_write>
			fs->fsi_flag = 0;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff fc72 	bl	800759c <disk_ioctl>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <sync_fs+0xca>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	41615252 	.word	0x41615252
 8007cd0:	61417272 	.word	0x61417272

08007cd4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	3b02      	subs	r3, #2
 8007ce2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	69db      	ldr	r3, [r3, #28]
 8007ce8:	3b02      	subs	r3, #2
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d301      	bcc.n	8007cf4 <clust2sect+0x20>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	e008      	b.n	8007d06 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	895b      	ldrh	r3, [r3, #10]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	fb03 f202 	mul.w	r2, r3, r2
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d04:	4413      	add	r3, r2
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b086      	sub	sp, #24
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d904      	bls.n	8007d32 <get_fat+0x20>
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d302      	bcc.n	8007d38 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007d32:	2301      	movs	r3, #1
 8007d34:	617b      	str	r3, [r7, #20]
 8007d36:	e08e      	b.n	8007e56 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007d38:	f04f 33ff 	mov.w	r3, #4294967295
 8007d3c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d061      	beq.n	8007e0a <get_fat+0xf8>
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	dc7b      	bgt.n	8007e42 <get_fat+0x130>
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d002      	beq.n	8007d54 <get_fat+0x42>
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d041      	beq.n	8007dd6 <get_fat+0xc4>
 8007d52:	e076      	b.n	8007e42 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	085b      	lsrs	r3, r3, #1
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	4413      	add	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	0a5b      	lsrs	r3, r3, #9
 8007d6a:	4413      	add	r3, r2
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6938      	ldr	r0, [r7, #16]
 8007d70:	f7ff ff14 	bl	8007b9c <move_window>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d166      	bne.n	8007e48 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	1c5a      	adds	r2, r3, #1
 8007d7e:	60fa      	str	r2, [r7, #12]
 8007d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	4413      	add	r3, r2
 8007d88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007d8c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	0a5b      	lsrs	r3, r3, #9
 8007d96:	4413      	add	r3, r2
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6938      	ldr	r0, [r7, #16]
 8007d9c:	f7ff fefe 	bl	8007b9c <move_window>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d152      	bne.n	8007e4c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	4413      	add	r3, r2
 8007db0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007db4:	021b      	lsls	r3, r3, #8
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <get_fat+0xba>
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	091b      	lsrs	r3, r3, #4
 8007dca:	e002      	b.n	8007dd2 <get_fat+0xc0>
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dd2:	617b      	str	r3, [r7, #20]
			break;
 8007dd4:	e03f      	b.n	8007e56 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	0a1b      	lsrs	r3, r3, #8
 8007dde:	4413      	add	r3, r2
 8007de0:	4619      	mov	r1, r3
 8007de2:	6938      	ldr	r0, [r7, #16]
 8007de4:	f7ff feda 	bl	8007b9c <move_window>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d130      	bne.n	8007e50 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	005b      	lsls	r3, r3, #1
 8007df8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007dfc:	4413      	add	r3, r2
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7ff fbea 	bl	80075d8 <ld_word>
 8007e04:	4603      	mov	r3, r0
 8007e06:	617b      	str	r3, [r7, #20]
			break;
 8007e08:	e025      	b.n	8007e56 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	09db      	lsrs	r3, r3, #7
 8007e12:	4413      	add	r3, r2
 8007e14:	4619      	mov	r1, r3
 8007e16:	6938      	ldr	r0, [r7, #16]
 8007e18:	f7ff fec0 	bl	8007b9c <move_window>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d118      	bne.n	8007e54 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007e30:	4413      	add	r3, r2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff fbe8 	bl	8007608 <ld_dword>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007e3e:	617b      	str	r3, [r7, #20]
			break;
 8007e40:	e009      	b.n	8007e56 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007e42:	2301      	movs	r3, #1
 8007e44:	617b      	str	r3, [r7, #20]
 8007e46:	e006      	b.n	8007e56 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e48:	bf00      	nop
 8007e4a:	e004      	b.n	8007e56 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e4c:	bf00      	nop
 8007e4e:	e002      	b.n	8007e56 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e50:	bf00      	nop
 8007e52:	e000      	b.n	8007e56 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007e54:	bf00      	nop
		}
	}

	return val;
 8007e56:	697b      	ldr	r3, [r7, #20]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3718      	adds	r7, #24
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007e60:	b590      	push	{r4, r7, lr}
 8007e62:	b089      	sub	sp, #36	@ 0x24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	f240 80d9 	bls.w	800802a <put_fat+0x1ca>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	f080 80d3 	bcs.w	800802a <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	f000 8096 	beq.w	8007fba <put_fat+0x15a>
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	f300 80cb 	bgt.w	800802a <put_fat+0x1ca>
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d002      	beq.n	8007e9e <put_fat+0x3e>
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d06e      	beq.n	8007f7a <put_fat+0x11a>
 8007e9c:	e0c5      	b.n	800802a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	61bb      	str	r3, [r7, #24]
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	085b      	lsrs	r3, r3, #1
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	0a5b      	lsrs	r3, r3, #9
 8007eb4:	4413      	add	r3, r2
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f7ff fe6f 	bl	8007b9c <move_window>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ec2:	7ffb      	ldrb	r3, [r7, #31]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f040 80a9 	bne.w	800801c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	1c59      	adds	r1, r3, #1
 8007ed4:	61b9      	str	r1, [r7, #24]
 8007ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eda:	4413      	add	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00d      	beq.n	8007f04 <put_fat+0xa4>
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	b25b      	sxtb	r3, r3
 8007eee:	f003 030f 	and.w	r3, r3, #15
 8007ef2:	b25a      	sxtb	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	b25b      	sxtb	r3, r3
 8007efc:	4313      	orrs	r3, r2
 8007efe:	b25b      	sxtb	r3, r3
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	e001      	b.n	8007f08 <put_fat+0xa8>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	0a5b      	lsrs	r3, r3, #9
 8007f1a:	4413      	add	r3, r2
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f7ff fe3c 	bl	8007b9c <move_window>
 8007f24:	4603      	mov	r3, r0
 8007f26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f28:	7ffb      	ldrb	r3, [r7, #31]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d178      	bne.n	8008020 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f3a:	4413      	add	r3, r2
 8007f3c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <put_fat+0xf0>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	091b      	lsrs	r3, r3, #4
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	e00e      	b.n	8007f6e <put_fat+0x10e>
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	b25b      	sxtb	r3, r3
 8007f56:	f023 030f 	bic.w	r3, r3, #15
 8007f5a:	b25a      	sxtb	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	0a1b      	lsrs	r3, r3, #8
 8007f60:	b25b      	sxtb	r3, r3
 8007f62:	f003 030f 	and.w	r3, r3, #15
 8007f66:	b25b      	sxtb	r3, r3
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	b25b      	sxtb	r3, r3
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2201      	movs	r2, #1
 8007f76:	70da      	strb	r2, [r3, #3]
			break;
 8007f78:	e057      	b.n	800802a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	0a1b      	lsrs	r3, r3, #8
 8007f82:	4413      	add	r3, r2
 8007f84:	4619      	mov	r1, r3
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f7ff fe08 	bl	8007b9c <move_window>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f90:	7ffb      	ldrb	r3, [r7, #31]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d146      	bne.n	8008024 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007fa4:	4413      	add	r3, r2
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	b292      	uxth	r2, r2
 8007faa:	4611      	mov	r1, r2
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff fb4e 	bl	800764e <st_word>
			fs->wflag = 1;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	70da      	strb	r2, [r3, #3]
			break;
 8007fb8:	e037      	b.n	800802a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	09db      	lsrs	r3, r3, #7
 8007fc2:	4413      	add	r3, r2
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f7ff fde8 	bl	8007b9c <move_window>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fd0:	7ffb      	ldrb	r3, [r7, #31]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d128      	bne.n	8008028 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007fea:	4413      	add	r3, r2
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff fb0b 	bl	8007608 <ld_dword>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007ff8:	4323      	orrs	r3, r4
 8007ffa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800800a:	4413      	add	r3, r2
 800800c:	6879      	ldr	r1, [r7, #4]
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff fb38 	bl	8007684 <st_dword>
			fs->wflag = 1;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2201      	movs	r2, #1
 8008018:	70da      	strb	r2, [r3, #3]
			break;
 800801a:	e006      	b.n	800802a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800801c:	bf00      	nop
 800801e:	e004      	b.n	800802a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008020:	bf00      	nop
 8008022:	e002      	b.n	800802a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008024:	bf00      	nop
 8008026:	e000      	b.n	800802a <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008028:	bf00      	nop
		}
	}
	return res;
 800802a:	7ffb      	ldrb	r3, [r7, #31]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3724      	adds	r7, #36	@ 0x24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd90      	pop	{r4, r7, pc}

08008034 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b088      	sub	sp, #32
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d904      	bls.n	800805a <remove_chain+0x26>
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	429a      	cmp	r2, r3
 8008058:	d301      	bcc.n	800805e <remove_chain+0x2a>
 800805a:	2302      	movs	r3, #2
 800805c:	e04b      	b.n	80080f6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00c      	beq.n	800807e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008064:	f04f 32ff 	mov.w	r2, #4294967295
 8008068:	6879      	ldr	r1, [r7, #4]
 800806a:	69b8      	ldr	r0, [r7, #24]
 800806c:	f7ff fef8 	bl	8007e60 <put_fat>
 8008070:	4603      	mov	r3, r0
 8008072:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008074:	7ffb      	ldrb	r3, [r7, #31]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <remove_chain+0x4a>
 800807a:	7ffb      	ldrb	r3, [r7, #31]
 800807c:	e03b      	b.n	80080f6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800807e:	68b9      	ldr	r1, [r7, #8]
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f7ff fe46 	bl	8007d12 <get_fat>
 8008086:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d031      	beq.n	80080f2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d101      	bne.n	8008098 <remove_chain+0x64>
 8008094:	2302      	movs	r3, #2
 8008096:	e02e      	b.n	80080f6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809e:	d101      	bne.n	80080a4 <remove_chain+0x70>
 80080a0:	2301      	movs	r3, #1
 80080a2:	e028      	b.n	80080f6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80080a4:	2200      	movs	r2, #0
 80080a6:	68b9      	ldr	r1, [r7, #8]
 80080a8:	69b8      	ldr	r0, [r7, #24]
 80080aa:	f7ff fed9 	bl	8007e60 <put_fat>
 80080ae:	4603      	mov	r3, r0
 80080b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80080b2:	7ffb      	ldrb	r3, [r7, #31]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <remove_chain+0x88>
 80080b8:	7ffb      	ldrb	r3, [r7, #31]
 80080ba:	e01c      	b.n	80080f6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	695a      	ldr	r2, [r3, #20]
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	3b02      	subs	r3, #2
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d20b      	bcs.n	80080e2 <remove_chain+0xae>
			fs->free_clst++;
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	791b      	ldrb	r3, [r3, #4]
 80080d8:	f043 0301 	orr.w	r3, r3, #1
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d3c6      	bcc.n	800807e <remove_chain+0x4a>
 80080f0:	e000      	b.n	80080f4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80080f2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3720      	adds	r7, #32
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b088      	sub	sp, #32
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10d      	bne.n	8008130 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d004      	beq.n	800812a <create_chain+0x2c>
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	429a      	cmp	r2, r3
 8008128:	d31b      	bcc.n	8008162 <create_chain+0x64>
 800812a:	2301      	movs	r3, #1
 800812c:	61bb      	str	r3, [r7, #24]
 800812e:	e018      	b.n	8008162 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7ff fded 	bl	8007d12 <get_fat>
 8008138:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d801      	bhi.n	8008144 <create_chain+0x46>
 8008140:	2301      	movs	r3, #1
 8008142:	e070      	b.n	8008226 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814a:	d101      	bne.n	8008150 <create_chain+0x52>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	e06a      	b.n	8008226 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	69db      	ldr	r3, [r3, #28]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	429a      	cmp	r2, r3
 8008158:	d201      	bcs.n	800815e <create_chain+0x60>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	e063      	b.n	8008226 <create_chain+0x128>
		scl = clst;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	3301      	adds	r3, #1
 800816a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	69fa      	ldr	r2, [r7, #28]
 8008172:	429a      	cmp	r2, r3
 8008174:	d307      	bcc.n	8008186 <create_chain+0x88>
				ncl = 2;
 8008176:	2302      	movs	r3, #2
 8008178:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800817a:	69fa      	ldr	r2, [r7, #28]
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	429a      	cmp	r2, r3
 8008180:	d901      	bls.n	8008186 <create_chain+0x88>
 8008182:	2300      	movs	r3, #0
 8008184:	e04f      	b.n	8008226 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008186:	69f9      	ldr	r1, [r7, #28]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7ff fdc2 	bl	8007d12 <get_fat>
 800818e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00e      	beq.n	80081b4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d003      	beq.n	80081a4 <create_chain+0xa6>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a2:	d101      	bne.n	80081a8 <create_chain+0xaa>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	e03e      	b.n	8008226 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80081a8:	69fa      	ldr	r2, [r7, #28]
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d1da      	bne.n	8008166 <create_chain+0x68>
 80081b0:	2300      	movs	r3, #0
 80081b2:	e038      	b.n	8008226 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80081b4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80081b6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ba:	69f9      	ldr	r1, [r7, #28]
 80081bc:	6938      	ldr	r0, [r7, #16]
 80081be:	f7ff fe4f 	bl	8007e60 <put_fat>
 80081c2:	4603      	mov	r3, r0
 80081c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d109      	bne.n	80081e0 <create_chain+0xe2>
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d006      	beq.n	80081e0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6938      	ldr	r0, [r7, #16]
 80081d8:	f7ff fe42 	bl	8007e60 <put_fat>
 80081dc:	4603      	mov	r3, r0
 80081de:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d116      	bne.n	8008214 <create_chain+0x116>
		fs->last_clst = ncl;
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	695a      	ldr	r2, [r3, #20]
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	3b02      	subs	r3, #2
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d804      	bhi.n	8008204 <create_chain+0x106>
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	1e5a      	subs	r2, r3, #1
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	791b      	ldrb	r3, [r3, #4]
 8008208:	f043 0301 	orr.w	r3, r3, #1
 800820c:	b2da      	uxtb	r2, r3
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	711a      	strb	r2, [r3, #4]
 8008212:	e007      	b.n	8008224 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008214:	7dfb      	ldrb	r3, [r7, #23]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d102      	bne.n	8008220 <create_chain+0x122>
 800821a:	f04f 33ff 	mov.w	r3, #4294967295
 800821e:	e000      	b.n	8008222 <create_chain+0x124>
 8008220:	2301      	movs	r3, #1
 8008222:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008224:	69fb      	ldr	r3, [r7, #28]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3720      	adds	r7, #32
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b086      	sub	sp, #24
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008244:	d204      	bcs.n	8008250 <dir_sdi+0x22>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	f003 031f 	and.w	r3, r3, #31
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008250:	2302      	movs	r3, #2
 8008252:	e063      	b.n	800831c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d106      	bne.n	8008274 <dir_sdi+0x46>
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d902      	bls.n	8008274 <dir_sdi+0x46>
		clst = fs->dirbase;
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008272:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10c      	bne.n	8008294 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	095b      	lsrs	r3, r3, #5
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	8912      	ldrh	r2, [r2, #8]
 8008282:	4293      	cmp	r3, r2
 8008284:	d301      	bcc.n	800828a <dir_sdi+0x5c>
 8008286:	2302      	movs	r3, #2
 8008288:	e048      	b.n	800831c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	61da      	str	r2, [r3, #28]
 8008292:	e029      	b.n	80082e8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	895b      	ldrh	r3, [r3, #10]
 8008298:	025b      	lsls	r3, r3, #9
 800829a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800829c:	e019      	b.n	80082d2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6979      	ldr	r1, [r7, #20]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7ff fd35 	bl	8007d12 <get_fat>
 80082a8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b0:	d101      	bne.n	80082b6 <dir_sdi+0x88>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e032      	b.n	800831c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d904      	bls.n	80082c6 <dir_sdi+0x98>
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d301      	bcc.n	80082ca <dir_sdi+0x9c>
 80082c6:	2302      	movs	r3, #2
 80082c8:	e028      	b.n	800831c <dir_sdi+0xee>
			ofs -= csz;
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d2e1      	bcs.n	800829e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80082da:	6979      	ldr	r1, [r7, #20]
 80082dc:	6938      	ldr	r0, [r7, #16]
 80082de:	f7ff fcf9 	bl	8007cd4 <clust2sect>
 80082e2:	4602      	mov	r2, r0
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <dir_sdi+0xcc>
 80082f6:	2302      	movs	r3, #2
 80082f8:	e010      	b.n	800831c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	69da      	ldr	r2, [r3, #28]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	0a5b      	lsrs	r3, r3, #9
 8008302:	441a      	add	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008314:	441a      	add	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	3320      	adds	r3, #32
 800833a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <dir_next+0x28>
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800834a:	d301      	bcc.n	8008350 <dir_next+0x2c>
 800834c:	2304      	movs	r3, #4
 800834e:	e0aa      	b.n	80084a6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008356:	2b00      	cmp	r3, #0
 8008358:	f040 8098 	bne.w	800848c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10b      	bne.n	8008386 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	095b      	lsrs	r3, r3, #5
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	8912      	ldrh	r2, [r2, #8]
 8008376:	4293      	cmp	r3, r2
 8008378:	f0c0 8088 	bcc.w	800848c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	61da      	str	r2, [r3, #28]
 8008382:	2304      	movs	r3, #4
 8008384:	e08f      	b.n	80084a6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	0a5b      	lsrs	r3, r3, #9
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	8952      	ldrh	r2, [r2, #10]
 800838e:	3a01      	subs	r2, #1
 8008390:	4013      	ands	r3, r2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d17a      	bne.n	800848c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	4619      	mov	r1, r3
 800839e:	4610      	mov	r0, r2
 80083a0:	f7ff fcb7 	bl	8007d12 <get_fat>
 80083a4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d801      	bhi.n	80083b0 <dir_next+0x8c>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e07a      	b.n	80084a6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b6:	d101      	bne.n	80083bc <dir_next+0x98>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e074      	b.n	80084a6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d358      	bcc.n	8008478 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d104      	bne.n	80083d6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	61da      	str	r2, [r3, #28]
 80083d2:	2304      	movs	r3, #4
 80083d4:	e067      	b.n	80084a6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	4619      	mov	r1, r3
 80083de:	4610      	mov	r0, r2
 80083e0:	f7ff fe8d 	bl	80080fe <create_chain>
 80083e4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <dir_next+0xcc>
 80083ec:	2307      	movs	r3, #7
 80083ee:	e05a      	b.n	80084a6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d101      	bne.n	80083fa <dir_next+0xd6>
 80083f6:	2302      	movs	r3, #2
 80083f8:	e055      	b.n	80084a6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008400:	d101      	bne.n	8008406 <dir_next+0xe2>
 8008402:	2301      	movs	r3, #1
 8008404:	e04f      	b.n	80084a6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f7ff fb84 	bl	8007b14 <sync_window>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <dir_next+0xf2>
 8008412:	2301      	movs	r3, #1
 8008414:	e047      	b.n	80084a6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3338      	adds	r3, #56	@ 0x38
 800841a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800841e:	2100      	movs	r1, #0
 8008420:	4618      	mov	r0, r3
 8008422:	f7ff f97c 	bl	800771e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008426:	2300      	movs	r3, #0
 8008428:	613b      	str	r3, [r7, #16]
 800842a:	6979      	ldr	r1, [r7, #20]
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f7ff fc51 	bl	8007cd4 <clust2sect>
 8008432:	4602      	mov	r2, r0
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	635a      	str	r2, [r3, #52]	@ 0x34
 8008438:	e012      	b.n	8008460 <dir_next+0x13c>
						fs->wflag = 1;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f7ff fb67 	bl	8007b14 <sync_window>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <dir_next+0x12c>
 800844c:	2301      	movs	r3, #1
 800844e:	e02a      	b.n	80084a6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	3301      	adds	r3, #1
 8008454:	613b      	str	r3, [r7, #16]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	635a      	str	r2, [r3, #52]	@ 0x34
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	895b      	ldrh	r3, [r3, #10]
 8008464:	461a      	mov	r2, r3
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	4293      	cmp	r3, r2
 800846a:	d3e6      	bcc.n	800843a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	1ad2      	subs	r2, r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800847e:	6979      	ldr	r1, [r7, #20]
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7ff fc27 	bl	8007cd4 <clust2sect>
 8008486:	4602      	mov	r2, r0
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849e:	441a      	add	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3718      	adds	r7, #24
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b086      	sub	sp, #24
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80084be:	2100      	movs	r1, #0
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff feb4 	bl	800822e <dir_sdi>
 80084c6:	4603      	mov	r3, r0
 80084c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d12b      	bne.n	8008528 <dir_alloc+0x7a>
		n = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	69db      	ldr	r3, [r3, #28]
 80084d8:	4619      	mov	r1, r3
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f7ff fb5e 	bl	8007b9c <move_window>
 80084e0:	4603      	mov	r3, r0
 80084e2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d11d      	bne.n	8008526 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	2be5      	cmp	r3, #229	@ 0xe5
 80084f2:	d004      	beq.n	80084fe <dir_alloc+0x50>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d107      	bne.n	800850e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	3301      	adds	r3, #1
 8008502:	613b      	str	r3, [r7, #16]
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d102      	bne.n	8008512 <dir_alloc+0x64>
 800850c:	e00c      	b.n	8008528 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800850e:	2300      	movs	r3, #0
 8008510:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008512:	2101      	movs	r1, #1
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7ff ff05 	bl	8008324 <dir_next>
 800851a:	4603      	mov	r3, r0
 800851c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800851e:	7dfb      	ldrb	r3, [r7, #23]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d0d7      	beq.n	80084d4 <dir_alloc+0x26>
 8008524:	e000      	b.n	8008528 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008526:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008528:	7dfb      	ldrb	r3, [r7, #23]
 800852a:	2b04      	cmp	r3, #4
 800852c:	d101      	bne.n	8008532 <dir_alloc+0x84>
 800852e:	2307      	movs	r3, #7
 8008530:	75fb      	strb	r3, [r7, #23]
	return res;
 8008532:	7dfb      	ldrb	r3, [r7, #23]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	331a      	adds	r3, #26
 800854a:	4618      	mov	r0, r3
 800854c:	f7ff f844 	bl	80075d8 <ld_word>
 8008550:	4603      	mov	r3, r0
 8008552:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	2b03      	cmp	r3, #3
 800855a:	d109      	bne.n	8008570 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	3314      	adds	r3, #20
 8008560:	4618      	mov	r0, r3
 8008562:	f7ff f839 	bl	80075d8 <ld_word>
 8008566:	4603      	mov	r3, r0
 8008568:	041b      	lsls	r3, r3, #16
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	4313      	orrs	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008570:	68fb      	ldr	r3, [r7, #12]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	331a      	adds	r3, #26
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	b292      	uxth	r2, r2
 800858e:	4611      	mov	r1, r2
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff f85c 	bl	800764e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b03      	cmp	r3, #3
 800859c:	d109      	bne.n	80085b2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f103 0214 	add.w	r2, r3, #20
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	0c1b      	lsrs	r3, r3, #16
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	4619      	mov	r1, r3
 80085ac:	4610      	mov	r0, r2
 80085ae:	f7ff f84e 	bl	800764e <st_word>
	}
}
 80085b2:	bf00      	nop
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b086      	sub	sp, #24
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80085c8:	2100      	movs	r1, #0
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7ff fe2f 	bl	800822e <dir_sdi>
 80085d0:	4603      	mov	r3, r0
 80085d2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <dir_find+0x24>
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	e03e      	b.n	800865c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	4619      	mov	r1, r3
 80085e4:	6938      	ldr	r0, [r7, #16]
 80085e6:	f7ff fad9 	bl	8007b9c <move_window>
 80085ea:	4603      	mov	r3, r0
 80085ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80085ee:	7dfb      	ldrb	r3, [r7, #23]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d12f      	bne.n	8008654 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a1b      	ldr	r3, [r3, #32]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d102      	bne.n	8008608 <dir_find+0x4e>
 8008602:	2304      	movs	r3, #4
 8008604:	75fb      	strb	r3, [r7, #23]
 8008606:	e028      	b.n	800865a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	330b      	adds	r3, #11
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008614:	b2da      	uxtb	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	330b      	adds	r3, #11
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	f003 0308 	and.w	r3, r3, #8
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10a      	bne.n	8008640 <dir_find+0x86>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a18      	ldr	r0, [r3, #32]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	3324      	adds	r3, #36	@ 0x24
 8008632:	220b      	movs	r2, #11
 8008634:	4619      	mov	r1, r3
 8008636:	f7ff f88d 	bl	8007754 <mem_cmp>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00b      	beq.n	8008658 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008640:	2100      	movs	r1, #0
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7ff fe6e 	bl	8008324 <dir_next>
 8008648:	4603      	mov	r3, r0
 800864a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d0c5      	beq.n	80085de <dir_find+0x24>
 8008652:	e002      	b.n	800865a <dir_find+0xa0>
		if (res != FR_OK) break;
 8008654:	bf00      	nop
 8008656:	e000      	b.n	800865a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008658:	bf00      	nop

	return res;
 800865a:	7dfb      	ldrb	r3, [r7, #23]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008672:	2101      	movs	r1, #1
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff ff1a 	bl	80084ae <dir_alloc>
 800867a:	4603      	mov	r3, r0
 800867c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d11c      	bne.n	80086be <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	69db      	ldr	r3, [r3, #28]
 8008688:	4619      	mov	r1, r3
 800868a:	68b8      	ldr	r0, [r7, #8]
 800868c:	f7ff fa86 	bl	8007b9c <move_window>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008694:	7bfb      	ldrb	r3, [r7, #15]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d111      	bne.n	80086be <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	2220      	movs	r2, #32
 80086a0:	2100      	movs	r1, #0
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7ff f83b 	bl	800771e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a18      	ldr	r0, [r3, #32]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3324      	adds	r3, #36	@ 0x24
 80086b0:	220b      	movs	r2, #11
 80086b2:	4619      	mov	r1, r3
 80086b4:	f7ff f812 	bl	80076dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2201      	movs	r2, #1
 80086bc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80086be:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	2200      	movs	r2, #0
 80086d6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	69db      	ldr	r3, [r3, #28]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d04f      	beq.n	8008780 <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80086e0:	2300      	movs	r3, #0
 80086e2:	613b      	str	r3, [r7, #16]
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80086e8:	e022      	b.n	8008730 <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1a      	ldr	r2, [r3, #32]
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	1c59      	adds	r1, r3, #1
 80086f2:	6179      	str	r1, [r7, #20]
 80086f4:	4413      	add	r3, r2
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	2b20      	cmp	r3, #32
 80086fe:	d016      	beq.n	800872e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	2b05      	cmp	r3, #5
 8008704:	d101      	bne.n	800870a <get_fileinfo+0x42>
 8008706:	23e5      	movs	r3, #229	@ 0xe5
 8008708:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2b09      	cmp	r3, #9
 800870e:	d106      	bne.n	800871e <get_fileinfo+0x56>
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	613a      	str	r2, [r7, #16]
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	4413      	add	r3, r2
 800871a:	222e      	movs	r2, #46	@ 0x2e
 800871c:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	613a      	str	r2, [r7, #16]
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	4413      	add	r3, r2
 8008728:	7bfa      	ldrb	r2, [r7, #15]
 800872a:	725a      	strb	r2, [r3, #9]
 800872c:	e000      	b.n	8008730 <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 800872e:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	2b0a      	cmp	r3, #10
 8008734:	d9d9      	bls.n	80086ea <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	4413      	add	r3, r2
 800873c:	3309      	adds	r3, #9
 800873e:	2200      	movs	r2, #0
 8008740:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	7ada      	ldrb	r2, [r3, #11]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6a1b      	ldr	r3, [r3, #32]
 8008750:	331c      	adds	r3, #28
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe ff58 	bl	8007608 <ld_dword>
 8008758:	4602      	mov	r2, r0
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	3316      	adds	r3, #22
 8008764:	4618      	mov	r0, r3
 8008766:	f7fe ff4f 	bl	8007608 <ld_dword>
 800876a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	b29a      	uxth	r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	80da      	strh	r2, [r3, #6]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	0c1b      	lsrs	r3, r3, #16
 8008778:	b29a      	uxth	r2, r3
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	809a      	strh	r2, [r3, #4]
 800877e:	e000      	b.n	8008782 <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008780:	bf00      	nop
}
 8008782:	3718      	adds	r7, #24
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b088      	sub	sp, #32
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3324      	adds	r3, #36	@ 0x24
 800879c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800879e:	220b      	movs	r2, #11
 80087a0:	2120      	movs	r1, #32
 80087a2:	68b8      	ldr	r0, [r7, #8]
 80087a4:	f7fe ffbb 	bl	800771e <mem_set>
	si = i = 0; ni = 8;
 80087a8:	2300      	movs	r3, #0
 80087aa:	613b      	str	r3, [r7, #16]
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	61fb      	str	r3, [r7, #28]
 80087b0:	2308      	movs	r3, #8
 80087b2:	617b      	str	r3, [r7, #20]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	4413      	add	r3, r2
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80087be:	d12f      	bne.n	8008820 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	61fa      	str	r2, [r7, #28]
 80087c6:	68fa      	ldr	r2, [r7, #12]
 80087c8:	4413      	add	r3, r2
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	76fb      	strb	r3, [r7, #27]
			if (c != '.' || si >= 3) break;
 80087ce:	7efb      	ldrb	r3, [r7, #27]
 80087d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80087d2:	d10a      	bne.n	80087ea <create_name+0x62>
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d807      	bhi.n	80087ea <create_name+0x62>
			sfn[i++] = c;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	1c5a      	adds	r2, r3, #1
 80087de:	613a      	str	r2, [r7, #16]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	4413      	add	r3, r2
 80087e4:	7efa      	ldrb	r2, [r7, #27]
 80087e6:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80087e8:	e7ea      	b.n	80087c0 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80087ea:	7efb      	ldrb	r3, [r7, #27]
 80087ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80087ee:	d007      	beq.n	8008800 <create_name+0x78>
 80087f0:	7efb      	ldrb	r3, [r7, #27]
 80087f2:	2b5c      	cmp	r3, #92	@ 0x5c
 80087f4:	d004      	beq.n	8008800 <create_name+0x78>
 80087f6:	7efb      	ldrb	r3, [r7, #27]
 80087f8:	2b20      	cmp	r3, #32
 80087fa:	d901      	bls.n	8008800 <create_name+0x78>
 80087fc:	2306      	movs	r3, #6
 80087fe:	e084      	b.n	800890a <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	441a      	add	r2, r3
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800880a:	7efb      	ldrb	r3, [r7, #27]
 800880c:	2b20      	cmp	r3, #32
 800880e:	d801      	bhi.n	8008814 <create_name+0x8c>
 8008810:	2224      	movs	r2, #36	@ 0x24
 8008812:	e000      	b.n	8008816 <create_name+0x8e>
 8008814:	2220      	movs	r2, #32
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	330b      	adds	r3, #11
 800881a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	e074      	b.n	800890a <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	61fa      	str	r2, [r7, #28]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	4413      	add	r3, r2
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800882e:	7efb      	ldrb	r3, [r7, #27]
 8008830:	2b20      	cmp	r3, #32
 8008832:	d94e      	bls.n	80088d2 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008834:	7efb      	ldrb	r3, [r7, #27]
 8008836:	2b2f      	cmp	r3, #47	@ 0x2f
 8008838:	d006      	beq.n	8008848 <create_name+0xc0>
 800883a:	7efb      	ldrb	r3, [r7, #27]
 800883c:	2b5c      	cmp	r3, #92	@ 0x5c
 800883e:	d110      	bne.n	8008862 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008840:	e002      	b.n	8008848 <create_name+0xc0>
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	3301      	adds	r3, #1
 8008846:	61fb      	str	r3, [r7, #28]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	4413      	add	r3, r2
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b2f      	cmp	r3, #47	@ 0x2f
 8008852:	d0f6      	beq.n	8008842 <create_name+0xba>
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	4413      	add	r3, r2
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b5c      	cmp	r3, #92	@ 0x5c
 800885e:	d0f0      	beq.n	8008842 <create_name+0xba>
			break;
 8008860:	e038      	b.n	80088d4 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008862:	7efb      	ldrb	r3, [r7, #27]
 8008864:	2b2e      	cmp	r3, #46	@ 0x2e
 8008866:	d003      	beq.n	8008870 <create_name+0xe8>
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	429a      	cmp	r2, r3
 800886e:	d30c      	bcc.n	800888a <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2b0b      	cmp	r3, #11
 8008874:	d002      	beq.n	800887c <create_name+0xf4>
 8008876:	7efb      	ldrb	r3, [r7, #27]
 8008878:	2b2e      	cmp	r3, #46	@ 0x2e
 800887a:	d001      	beq.n	8008880 <create_name+0xf8>
 800887c:	2306      	movs	r3, #6
 800887e:	e044      	b.n	800890a <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8008880:	2308      	movs	r3, #8
 8008882:	613b      	str	r3, [r7, #16]
 8008884:	230b      	movs	r3, #11
 8008886:	617b      	str	r3, [r7, #20]
			continue;
 8008888:	e022      	b.n	80088d0 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800888a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800888e:	2b00      	cmp	r3, #0
 8008890:	da04      	bge.n	800889c <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008892:	7efb      	ldrb	r3, [r7, #27]
 8008894:	3b80      	subs	r3, #128	@ 0x80
 8008896:	4a1f      	ldr	r2, [pc, #124]	@ (8008914 <create_name+0x18c>)
 8008898:	5cd3      	ldrb	r3, [r2, r3]
 800889a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800889c:	7efb      	ldrb	r3, [r7, #27]
 800889e:	4619      	mov	r1, r3
 80088a0:	481d      	ldr	r0, [pc, #116]	@ (8008918 <create_name+0x190>)
 80088a2:	f7fe ff7e 	bl	80077a2 <chk_chr>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <create_name+0x128>
 80088ac:	2306      	movs	r3, #6
 80088ae:	e02c      	b.n	800890a <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80088b0:	7efb      	ldrb	r3, [r7, #27]
 80088b2:	2b60      	cmp	r3, #96	@ 0x60
 80088b4:	d905      	bls.n	80088c2 <create_name+0x13a>
 80088b6:	7efb      	ldrb	r3, [r7, #27]
 80088b8:	2b7a      	cmp	r3, #122	@ 0x7a
 80088ba:	d802      	bhi.n	80088c2 <create_name+0x13a>
 80088bc:	7efb      	ldrb	r3, [r7, #27]
 80088be:	3b20      	subs	r3, #32
 80088c0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	1c5a      	adds	r2, r3, #1
 80088c6:	613a      	str	r2, [r7, #16]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	4413      	add	r3, r2
 80088cc:	7efa      	ldrb	r2, [r7, #27]
 80088ce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80088d0:	e7a6      	b.n	8008820 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80088d2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	441a      	add	r2, r3
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d101      	bne.n	80088e8 <create_name+0x160>
 80088e4:	2306      	movs	r3, #6
 80088e6:	e010      	b.n	800890a <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	2be5      	cmp	r3, #229	@ 0xe5
 80088ee:	d102      	bne.n	80088f6 <create_name+0x16e>
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2205      	movs	r2, #5
 80088f4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80088f6:	7efb      	ldrb	r3, [r7, #27]
 80088f8:	2b20      	cmp	r3, #32
 80088fa:	d801      	bhi.n	8008900 <create_name+0x178>
 80088fc:	2204      	movs	r2, #4
 80088fe:	e000      	b.n	8008902 <create_name+0x17a>
 8008900:	2200      	movs	r2, #0
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	330b      	adds	r3, #11
 8008906:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008908:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800890a:	4618      	mov	r0, r3
 800890c:	3720      	adds	r7, #32
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	08010e38 	.word	0x08010e38
 8008918:	08010dcc 	.word	0x08010dcc

0800891c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b2f      	cmp	r3, #47	@ 0x2f
 8008936:	d00b      	beq.n	8008950 <follow_path+0x34>
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	2b5c      	cmp	r3, #92	@ 0x5c
 800893e:	d007      	beq.n	8008950 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	699a      	ldr	r2, [r3, #24]
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	609a      	str	r2, [r3, #8]
 8008948:	e00d      	b.n	8008966 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	3301      	adds	r3, #1
 800894e:	603b      	str	r3, [r7, #0]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	2b2f      	cmp	r3, #47	@ 0x2f
 8008956:	d0f8      	beq.n	800894a <follow_path+0x2e>
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2b5c      	cmp	r3, #92	@ 0x5c
 800895e:	d0f4      	beq.n	800894a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	2200      	movs	r2, #0
 8008964:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	2b1f      	cmp	r3, #31
 800896c:	d80a      	bhi.n	8008984 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2280      	movs	r2, #128	@ 0x80
 8008972:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008976:	2100      	movs	r1, #0
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7ff fc58 	bl	800822e <dir_sdi>
 800897e:	4603      	mov	r3, r0
 8008980:	75fb      	strb	r3, [r7, #23]
 8008982:	e056      	b.n	8008a32 <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008984:	463b      	mov	r3, r7
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7ff fefd 	bl	8008788 <create_name>
 800898e:	4603      	mov	r3, r0
 8008990:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008992:	7dfb      	ldrb	r3, [r7, #23]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d147      	bne.n	8008a28 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f7ff fe0e 	bl	80085ba <dir_find>
 800899e:	4603      	mov	r3, r0
 80089a0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80089a8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80089aa:	7dfb      	ldrb	r3, [r7, #23]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01b      	beq.n	80089e8 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80089b0:	7dfb      	ldrb	r3, [r7, #23]
 80089b2:	2b04      	cmp	r3, #4
 80089b4:	d13a      	bne.n	8008a2c <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80089b6:	7afb      	ldrb	r3, [r7, #11]
 80089b8:	f003 0320 	and.w	r3, r3, #32
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80089c0:	7afb      	ldrb	r3, [r7, #11]
 80089c2:	f003 0304 	and.w	r3, r3, #4
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d02c      	beq.n	8008a24 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2280      	movs	r2, #128	@ 0x80
 80089ce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
						res = FR_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80089d6:	e029      	b.n	8008a2c <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80089d8:	7afb      	ldrb	r3, [r7, #11]
 80089da:	f003 0304 	and.w	r3, r3, #4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d124      	bne.n	8008a2c <follow_path+0x110>
 80089e2:	2305      	movs	r3, #5
 80089e4:	75fb      	strb	r3, [r7, #23]
				break;
 80089e6:	e021      	b.n	8008a2c <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80089e8:	7afb      	ldrb	r3, [r7, #11]
 80089ea:	f003 0304 	and.w	r3, r3, #4
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d11e      	bne.n	8008a30 <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	799b      	ldrb	r3, [r3, #6]
 80089f6:	f003 0310 	and.w	r3, r3, #16
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d102      	bne.n	8008a04 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80089fe:	2305      	movs	r3, #5
 8008a00:	75fb      	strb	r3, [r7, #23]
 8008a02:	e016      	b.n	8008a32 <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a12:	4413      	add	r3, r2
 8008a14:	4619      	mov	r1, r3
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f7ff fd90 	bl	800853c <ld_clust>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	609a      	str	r2, [r3, #8]
 8008a22:	e7af      	b.n	8008984 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8008a24:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008a26:	e7ad      	b.n	8008984 <follow_path+0x68>
			if (res != FR_OK) break;
 8008a28:	bf00      	nop
 8008a2a:	e002      	b.n	8008a32 <follow_path+0x116>
				break;
 8008a2c:	bf00      	nop
 8008a2e:	e000      	b.n	8008a32 <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008a30:	bf00      	nop
			}
		}
	}

	return res;
 8008a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008a44:	f04f 33ff 	mov.w	r3, #4294967295
 8008a48:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d031      	beq.n	8008ab6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	617b      	str	r3, [r7, #20]
 8008a58:	e002      	b.n	8008a60 <get_ldnumber+0x24>
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	2b20      	cmp	r3, #32
 8008a66:	d903      	bls.n	8008a70 <get_ldnumber+0x34>
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	2b3a      	cmp	r3, #58	@ 0x3a
 8008a6e:	d1f4      	bne.n	8008a5a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	2b3a      	cmp	r3, #58	@ 0x3a
 8008a76:	d11c      	bne.n	8008ab2 <get_ldnumber+0x76>
			tp = *path;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	60fa      	str	r2, [r7, #12]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	3b30      	subs	r3, #48	@ 0x30
 8008a88:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	2b09      	cmp	r3, #9
 8008a8e:	d80e      	bhi.n	8008aae <get_ldnumber+0x72>
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d10a      	bne.n	8008aae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d107      	bne.n	8008aae <get_ldnumber+0x72>
					vol = (int)i;
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	617b      	str	r3, [r7, #20]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	e002      	b.n	8008ab8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008ab6:	693b      	ldr	r3, [r7, #16]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	371c      	adds	r7, #28
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	70da      	strb	r2, [r3, #3]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8008ada:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f7ff f85c 	bl	8007b9c <move_window>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <check_fs+0x2a>
 8008aea:	2304      	movs	r3, #4
 8008aec:	e038      	b.n	8008b60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3338      	adds	r3, #56	@ 0x38
 8008af2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fe fd6e 	bl	80075d8 <ld_word>
 8008afc:	4603      	mov	r3, r0
 8008afe:	461a      	mov	r2, r3
 8008b00:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d001      	beq.n	8008b0c <check_fs+0x48>
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e029      	b.n	8008b60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008b12:	2be9      	cmp	r3, #233	@ 0xe9
 8008b14:	d009      	beq.n	8008b2a <check_fs+0x66>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008b1c:	2beb      	cmp	r3, #235	@ 0xeb
 8008b1e:	d11e      	bne.n	8008b5e <check_fs+0x9a>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008b26:	2b90      	cmp	r3, #144	@ 0x90
 8008b28:	d119      	bne.n	8008b5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3338      	adds	r3, #56	@ 0x38
 8008b2e:	3336      	adds	r3, #54	@ 0x36
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fe fd69 	bl	8007608 <ld_dword>
 8008b36:	4603      	mov	r3, r0
 8008b38:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8008b68 <check_fs+0xa4>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d101      	bne.n	8008b46 <check_fs+0x82>
 8008b42:	2300      	movs	r3, #0
 8008b44:	e00c      	b.n	8008b60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	3338      	adds	r3, #56	@ 0x38
 8008b4a:	3352      	adds	r3, #82	@ 0x52
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fe fd5b 	bl	8007608 <ld_dword>
 8008b52:	4603      	mov	r3, r0
 8008b54:	4a05      	ldr	r2, [pc, #20]	@ (8008b6c <check_fs+0xa8>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d101      	bne.n	8008b5e <check_fs+0x9a>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	e000      	b.n	8008b60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008b5e:	2302      	movs	r3, #2
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	00544146 	.word	0x00544146
 8008b6c:	33544146 	.word	0x33544146

08008b70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b096      	sub	sp, #88	@ 0x58
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f7ff ff59 	bl	8008a3c <get_ldnumber>
 8008b8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	da01      	bge.n	8008b96 <find_volume+0x26>
 8008b92:	230b      	movs	r3, #11
 8008b94:	e238      	b.n	8009008 <find_volume+0x498>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008b96:	4aa5      	ldr	r2, [pc, #660]	@ (8008e2c <find_volume+0x2bc>)
 8008b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <find_volume+0x3a>
 8008ba6:	230c      	movs	r3, #12
 8008ba8:	e22e      	b.n	8009008 <find_volume+0x498>

	ENTER_FF(fs);						/* Lock the volume */
 8008baa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008bac:	f7fe fe14 	bl	80077d8 <lock_fs>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <find_volume+0x4a>
 8008bb6:	230f      	movs	r3, #15
 8008bb8:	e226      	b.n	8009008 <find_volume+0x498>
	*rfs = fs;							/* Return pointer to the file system object */
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bbe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	f023 0301 	bic.w	r3, r3, #1
 8008bc6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01a      	beq.n	8008c06 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd2:	785b      	ldrb	r3, [r3, #1]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fe fc5f 	bl	8007498 <disk_status>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008be0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10c      	bne.n	8008c06 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008bec:	79fb      	ldrb	r3, [r7, #7]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d007      	beq.n	8008c02 <find_volume+0x92>
 8008bf2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008bf6:	f003 0304 	and.w	r3, r3, #4
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8008bfe:	230a      	movs	r3, #10
 8008c00:	e202      	b.n	8009008 <find_volume+0x498>
			}
			return FR_OK;				/* The file system object is valid */
 8008c02:	2300      	movs	r3, #0
 8008c04:	e200      	b.n	8009008 <find_volume+0x498>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c08:	2200      	movs	r2, #0
 8008c0a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c12:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c16:	785b      	ldrb	r3, [r3, #1]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fe fc57 	bl	80074cc <disk_initialize>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008c24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d001      	beq.n	8008c34 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008c30:	2303      	movs	r3, #3
 8008c32:	e1e9      	b.n	8009008 <find_volume+0x498>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008c34:	79fb      	ldrb	r3, [r7, #7]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d007      	beq.n	8008c4a <find_volume+0xda>
 8008c3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c3e:	f003 0304 	and.w	r3, r3, #4
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8008c46:	230a      	movs	r3, #10
 8008c48:	e1de      	b.n	8009008 <find_volume+0x498>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008c4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c52:	f7ff ff37 	bl	8008ac4 <check_fs>
 8008c56:	4603      	mov	r3, r0
 8008c58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008c5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d149      	bne.n	8008cf8 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008c64:	2300      	movs	r3, #0
 8008c66:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c68:	e01e      	b.n	8008ca8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008c78:	4413      	add	r3, r2
 8008c7a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7e:	3304      	adds	r3, #4
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d006      	beq.n	8008c94 <find_volume+0x124>
 8008c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c88:	3308      	adds	r3, #8
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fe fcbc 	bl	8007608 <ld_dword>
 8008c90:	4602      	mov	r2, r0
 8008c92:	e000      	b.n	8008c96 <find_volume+0x126>
 8008c94:	2200      	movs	r2, #0
 8008c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	3358      	adds	r3, #88	@ 0x58
 8008c9c:	443b      	add	r3, r7
 8008c9e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d9dd      	bls.n	8008c6a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008cae:	2300      	movs	r3, #0
 8008cb0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <find_volume+0x14e>
 8008cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	3358      	adds	r3, #88	@ 0x58
 8008cc4:	443b      	add	r3, r7
 8008cc6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008cca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d005      	beq.n	8008cde <find_volume+0x16e>
 8008cd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008cd4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008cd6:	f7ff fef5 	bl	8008ac4 <check_fs>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	e000      	b.n	8008ce0 <find_volume+0x170>
 8008cde:	2303      	movs	r3, #3
 8008ce0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008ce4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d905      	bls.n	8008cf8 <find_volume+0x188>
 8008cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cee:	3301      	adds	r3, #1
 8008cf0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cf4:	2b03      	cmp	r3, #3
 8008cf6:	d9e2      	bls.n	8008cbe <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008cf8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008cfc:	2b04      	cmp	r3, #4
 8008cfe:	d101      	bne.n	8008d04 <find_volume+0x194>
 8008d00:	2301      	movs	r3, #1
 8008d02:	e181      	b.n	8009008 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008d04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d901      	bls.n	8008d10 <find_volume+0x1a0>
 8008d0c:	230d      	movs	r3, #13
 8008d0e:	e17b      	b.n	8009008 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d12:	3338      	adds	r3, #56	@ 0x38
 8008d14:	330b      	adds	r3, #11
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7fe fc5e 	bl	80075d8 <ld_word>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d22:	d001      	beq.n	8008d28 <find_volume+0x1b8>
 8008d24:	230d      	movs	r3, #13
 8008d26:	e16f      	b.n	8009008 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2a:	3338      	adds	r3, #56	@ 0x38
 8008d2c:	3316      	adds	r3, #22
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fe fc52 	bl	80075d8 <ld_word>
 8008d34:	4603      	mov	r3, r0
 8008d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008d38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d106      	bne.n	8008d4c <find_volume+0x1dc>
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d40:	3338      	adds	r3, #56	@ 0x38
 8008d42:	3324      	adds	r3, #36	@ 0x24
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fe fc5f 	bl	8007608 <ld_dword>
 8008d4a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d50:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d54:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8008d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5e:	789b      	ldrb	r3, [r3, #2]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d005      	beq.n	8008d70 <find_volume+0x200>
 8008d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d66:	789b      	ldrb	r3, [r3, #2]
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d001      	beq.n	8008d70 <find_volume+0x200>
 8008d6c:	230d      	movs	r3, #13
 8008d6e:	e14b      	b.n	8009008 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d72:	789b      	ldrb	r3, [r3, #2]
 8008d74:	461a      	mov	r2, r3
 8008d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d78:	fb02 f303 	mul.w	r3, r2, r3
 8008d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d84:	461a      	mov	r2, r3
 8008d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8c:	895b      	ldrh	r3, [r3, #10]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d008      	beq.n	8008da4 <find_volume+0x234>
 8008d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d94:	895b      	ldrh	r3, [r3, #10]
 8008d96:	461a      	mov	r2, r3
 8008d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9a:	895b      	ldrh	r3, [r3, #10]
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	4013      	ands	r3, r2
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <find_volume+0x238>
 8008da4:	230d      	movs	r3, #13
 8008da6:	e12f      	b.n	8009008 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008daa:	3338      	adds	r3, #56	@ 0x38
 8008dac:	3311      	adds	r3, #17
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fe fc12 	bl	80075d8 <ld_word>
 8008db4:	4603      	mov	r3, r0
 8008db6:	461a      	mov	r2, r3
 8008db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dbe:	891b      	ldrh	r3, [r3, #8]
 8008dc0:	f003 030f 	and.w	r3, r3, #15
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <find_volume+0x25e>
 8008dca:	230d      	movs	r3, #13
 8008dcc:	e11c      	b.n	8009008 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd0:	3338      	adds	r3, #56	@ 0x38
 8008dd2:	3313      	adds	r3, #19
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fe fbff 	bl	80075d8 <ld_word>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d106      	bne.n	8008df2 <find_volume+0x282>
 8008de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de6:	3338      	adds	r3, #56	@ 0x38
 8008de8:	3320      	adds	r3, #32
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fe fc0c 	bl	8007608 <ld_dword>
 8008df0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df4:	3338      	adds	r3, #56	@ 0x38
 8008df6:	330e      	adds	r3, #14
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fe fbed 	bl	80075d8 <ld_word>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008e02:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <find_volume+0x29c>
 8008e08:	230d      	movs	r3, #13
 8008e0a:	e0fd      	b.n	8009008 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008e0c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e10:	4413      	add	r3, r2
 8008e12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e14:	8912      	ldrh	r2, [r2, #8]
 8008e16:	0912      	lsrs	r2, r2, #4
 8008e18:	b292      	uxth	r2, r2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008e1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d204      	bcs.n	8008e30 <find_volume+0x2c0>
 8008e26:	230d      	movs	r3, #13
 8008e28:	e0ee      	b.n	8009008 <find_volume+0x498>
 8008e2a:	bf00      	nop
 8008e2c:	20000df0 	.word	0x20000df0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008e30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e38:	8952      	ldrh	r2, [r2, #10]
 8008e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e3e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <find_volume+0x2da>
 8008e46:	230d      	movs	r3, #13
 8008e48:	e0de      	b.n	8009008 <find_volume+0x498>
		fmt = FS_FAT32;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e52:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d802      	bhi.n	8008e60 <find_volume+0x2f0>
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e62:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d802      	bhi.n	8008e70 <find_volume+0x300>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e72:	1c9a      	adds	r2, r3, #2
 8008e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e76:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008e7c:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008e7e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008e80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e82:	441a      	add	r2, r3
 8008e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e86:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008e88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8c:	441a      	add	r2, r3
 8008e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e90:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8008e92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d11e      	bne.n	8008ed8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e9c:	3338      	adds	r3, #56	@ 0x38
 8008e9e:	332a      	adds	r3, #42	@ 0x2a
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fe fb99 	bl	80075d8 <ld_word>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <find_volume+0x340>
 8008eac:	230d      	movs	r3, #13
 8008eae:	e0ab      	b.n	8009008 <find_volume+0x498>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb2:	891b      	ldrh	r3, [r3, #8]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <find_volume+0x34c>
 8008eb8:	230d      	movs	r3, #13
 8008eba:	e0a5      	b.n	8009008 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ebe:	3338      	adds	r3, #56	@ 0x38
 8008ec0:	332c      	adds	r3, #44	@ 0x2c
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe fba0 	bl	8007608 <ld_dword>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ed6:	e01f      	b.n	8008f18 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eda:	891b      	ldrh	r3, [r3, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <find_volume+0x374>
 8008ee0:	230d      	movs	r3, #13
 8008ee2:	e091      	b.n	8009008 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eea:	441a      	add	r2, r3
 8008eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eee:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008ef0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d103      	bne.n	8008f00 <find_volume+0x390>
 8008ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	e00a      	b.n	8008f16 <find_volume+0x3a6>
 8008f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f02:	69da      	ldr	r2, [r3, #28]
 8008f04:	4613      	mov	r3, r2
 8008f06:	005b      	lsls	r3, r3, #1
 8008f08:	4413      	add	r3, r2
 8008f0a:	085a      	lsrs	r2, r3, #1
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0e:	69db      	ldr	r3, [r3, #28]
 8008f10:	f003 0301 	and.w	r3, r3, #1
 8008f14:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008f16:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1a:	6a1a      	ldr	r2, [r3, #32]
 8008f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f1e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8008f22:	0a5b      	lsrs	r3, r3, #9
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d201      	bcs.n	8008f2c <find_volume+0x3bc>
 8008f28:	230d      	movs	r3, #13
 8008f2a:	e06d      	b.n	8009008 <find_volume+0x498>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f32:	615a      	str	r2, [r3, #20]
 8008f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f36:	695a      	ldr	r2, [r3, #20]
 8008f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3e:	2280      	movs	r2, #128	@ 0x80
 8008f40:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008f42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	d149      	bne.n	8008fde <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4c:	3338      	adds	r3, #56	@ 0x38
 8008f4e:	3330      	adds	r3, #48	@ 0x30
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fe fb41 	bl	80075d8 <ld_word>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d140      	bne.n	8008fde <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f5e:	3301      	adds	r3, #1
 8008f60:	4619      	mov	r1, r3
 8008f62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008f64:	f7fe fe1a 	bl	8007b9c <move_window>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d137      	bne.n	8008fde <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f70:	2200      	movs	r2, #0
 8008f72:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f76:	3338      	adds	r3, #56	@ 0x38
 8008f78:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fe fb2b 	bl	80075d8 <ld_word>
 8008f82:	4603      	mov	r3, r0
 8008f84:	461a      	mov	r2, r3
 8008f86:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d127      	bne.n	8008fde <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f90:	3338      	adds	r3, #56	@ 0x38
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe fb38 	bl	8007608 <ld_dword>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8009010 <find_volume+0x4a0>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d11e      	bne.n	8008fde <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa2:	3338      	adds	r3, #56	@ 0x38
 8008fa4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fe fb2d 	bl	8007608 <ld_dword>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	4a18      	ldr	r2, [pc, #96]	@ (8009014 <find_volume+0x4a4>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d113      	bne.n	8008fde <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb8:	3338      	adds	r3, #56	@ 0x38
 8008fba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe fb22 	bl	8007608 <ld_dword>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fcc:	3338      	adds	r3, #56	@ 0x38
 8008fce:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe fb18 	bl	8007608 <ld_dword>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fdc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fe0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008fe4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8009018 <find_volume+0x4a8>)
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	3301      	adds	r3, #1
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	4b0a      	ldr	r3, [pc, #40]	@ (8009018 <find_volume+0x4a8>)
 8008ff0:	801a      	strh	r2, [r3, #0]
 8008ff2:	4b09      	ldr	r3, [pc, #36]	@ (8009018 <find_volume+0x4a8>)
 8008ff4:	881a      	ldrh	r2, [r3, #0]
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff8:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009000:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009002:	f7fe fd63 	bl	8007acc <clear_lock>
#endif
	return FR_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3758      	adds	r7, #88	@ 0x58
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	41615252 	.word	0x41615252
 8009014:	61417272 	.word	0x61417272
 8009018:	20000df4 	.word	0x20000df4

0800901c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009026:	2309      	movs	r3, #9
 8009028:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d02e      	beq.n	800908e <validate+0x72>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d02a      	beq.n	800908e <validate+0x72>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d025      	beq.n	800908e <validate+0x72>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	889a      	ldrh	r2, [r3, #4]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	88db      	ldrh	r3, [r3, #6]
 800904c:	429a      	cmp	r2, r3
 800904e:	d11e      	bne.n	800908e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4618      	mov	r0, r3
 8009056:	f7fe fbbf 	bl	80077d8 <lock_fs>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d014      	beq.n	800908a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	785b      	ldrb	r3, [r3, #1]
 8009066:	4618      	mov	r0, r3
 8009068:	f7fe fa16 	bl	8007498 <disk_status>
 800906c:	4603      	mov	r3, r0
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d102      	bne.n	800907c <validate+0x60>
				res = FR_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	73fb      	strb	r3, [r7, #15]
 800907a:	e008      	b.n	800908e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2100      	movs	r1, #0
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fbbe 	bl	8007804 <unlock_fs>
 8009088:	e001      	b.n	800908e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800908a:	230f      	movs	r3, #15
 800908c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d102      	bne.n	800909a <validate+0x7e>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	e000      	b.n	800909c <validate+0x80>
 800909a:	2300      	movs	r3, #0
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	6013      	str	r3, [r2, #0]
	return res;
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b088      	sub	sp, #32
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	4613      	mov	r3, r2
 80090b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80090be:	f107 0310 	add.w	r3, r7, #16
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7ff fcba 	bl	8008a3c <get_ldnumber>
 80090c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	da01      	bge.n	80090d4 <f_mount+0x28>
 80090d0:	230b      	movs	r3, #11
 80090d2:	e048      	b.n	8009166 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80090d4:	4a26      	ldr	r2, [pc, #152]	@ (8009170 <f_mount+0xc4>)
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00f      	beq.n	8009104 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80090e4:	69b8      	ldr	r0, [r7, #24]
 80090e6:	f7fe fcf1 	bl	8007acc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fce1 	bl	8009ab6 <ff_del_syncobj>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d101      	bne.n	80090fe <f_mount+0x52>
 80090fa:	2302      	movs	r3, #2
 80090fc:	e033      	b.n	8009166 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	2200      	movs	r2, #0
 8009102:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00f      	beq.n	800912a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2200      	movs	r2, #0
 800910e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	b2da      	uxtb	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	330c      	adds	r3, #12
 8009118:	4619      	mov	r1, r3
 800911a:	4610      	mov	r0, r2
 800911c:	f000 fcab 	bl	8009a76 <ff_cre_syncobj>
 8009120:	4603      	mov	r3, r0
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <f_mount+0x7e>
 8009126:	2302      	movs	r3, #2
 8009128:	e01d      	b.n	8009166 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	4910      	ldr	r1, [pc, #64]	@ (8009170 <f_mount+0xc4>)
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d002      	beq.n	8009140 <f_mount+0x94>
 800913a:	79fb      	ldrb	r3, [r7, #7]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d001      	beq.n	8009144 <f_mount+0x98>
 8009140:	2300      	movs	r3, #0
 8009142:	e010      	b.n	8009166 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009144:	f107 010c 	add.w	r1, r7, #12
 8009148:	f107 0308 	add.w	r3, r7, #8
 800914c:	2200      	movs	r2, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff fd0e 	bl	8008b70 <find_volume>
 8009154:	4603      	mov	r3, r0
 8009156:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	7dfa      	ldrb	r2, [r7, #23]
 800915c:	4611      	mov	r1, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f7fe fb50 	bl	8007804 <unlock_fs>
 8009164:	7dfb      	ldrb	r3, [r7, #23]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3720      	adds	r7, #32
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000df0 	.word	0x20000df0

08009174 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b098      	sub	sp, #96	@ 0x60
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	4613      	mov	r3, r2
 8009180:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <f_open+0x18>
 8009188:	2309      	movs	r3, #9
 800918a:	e1b0      	b.n	80094ee <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800918c:	79fb      	ldrb	r3, [r7, #7]
 800918e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009192:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009194:	79fa      	ldrb	r2, [r7, #7]
 8009196:	f107 0110 	add.w	r1, r7, #16
 800919a:	f107 0308 	add.w	r3, r7, #8
 800919e:	4618      	mov	r0, r3
 80091a0:	f7ff fce6 	bl	8008b70 <find_volume>
 80091a4:	4603      	mov	r3, r0
 80091a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80091aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f040 818d 	bne.w	80094ce <f_open+0x35a>
		dj.obj.fs = fs;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	f107 0314 	add.w	r3, r7, #20
 80091be:	4611      	mov	r1, r2
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7ff fbab 	bl	800891c <follow_path>
 80091c6:	4603      	mov	r3, r0
 80091c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80091cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d118      	bne.n	8009206 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80091d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80091d8:	b25b      	sxtb	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	da03      	bge.n	80091e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80091de:	2306      	movs	r3, #6
 80091e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80091e4:	e00f      	b.n	8009206 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80091e6:	79fb      	ldrb	r3, [r7, #7]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	bf8c      	ite	hi
 80091ec:	2301      	movhi	r3, #1
 80091ee:	2300      	movls	r3, #0
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	461a      	mov	r2, r3
 80091f4:	f107 0314 	add.w	r3, r7, #20
 80091f8:	4611      	mov	r1, r2
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe fb1e 	bl	800783c <chk_lock>
 8009200:	4603      	mov	r3, r0
 8009202:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009206:	79fb      	ldrb	r3, [r7, #7]
 8009208:	f003 031c 	and.w	r3, r3, #28
 800920c:	2b00      	cmp	r3, #0
 800920e:	d07f      	beq.n	8009310 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009210:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009214:	2b00      	cmp	r3, #0
 8009216:	d017      	beq.n	8009248 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009218:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800921c:	2b04      	cmp	r3, #4
 800921e:	d10e      	bne.n	800923e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009220:	f7fe fb68 	bl	80078f4 <enq_lock>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d006      	beq.n	8009238 <f_open+0xc4>
 800922a:	f107 0314 	add.w	r3, r7, #20
 800922e:	4618      	mov	r0, r3
 8009230:	f7ff fa18 	bl	8008664 <dir_register>
 8009234:	4603      	mov	r3, r0
 8009236:	e000      	b.n	800923a <f_open+0xc6>
 8009238:	2312      	movs	r3, #18
 800923a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800923e:	79fb      	ldrb	r3, [r7, #7]
 8009240:	f043 0308 	orr.w	r3, r3, #8
 8009244:	71fb      	strb	r3, [r7, #7]
 8009246:	e010      	b.n	800926a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009248:	7ebb      	ldrb	r3, [r7, #26]
 800924a:	f003 0311 	and.w	r3, r3, #17
 800924e:	2b00      	cmp	r3, #0
 8009250:	d003      	beq.n	800925a <f_open+0xe6>
					res = FR_DENIED;
 8009252:	2307      	movs	r3, #7
 8009254:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009258:	e007      	b.n	800926a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800925a:	79fb      	ldrb	r3, [r7, #7]
 800925c:	f003 0304 	and.w	r3, r3, #4
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <f_open+0xf6>
 8009264:	2308      	movs	r3, #8
 8009266:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800926a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800926e:	2b00      	cmp	r3, #0
 8009270:	d168      	bne.n	8009344 <f_open+0x1d0>
 8009272:	79fb      	ldrb	r3, [r7, #7]
 8009274:	f003 0308 	and.w	r3, r3, #8
 8009278:	2b00      	cmp	r3, #0
 800927a:	d063      	beq.n	8009344 <f_open+0x1d0>
				dw = GET_FATTIME();
 800927c:	f7fe f8ae 	bl	80073dc <get_fattime>
 8009280:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009284:	330e      	adds	r3, #14
 8009286:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009288:	4618      	mov	r0, r3
 800928a:	f7fe f9fb 	bl	8007684 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800928e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009290:	3316      	adds	r3, #22
 8009292:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009294:	4618      	mov	r0, r3
 8009296:	f7fe f9f5 	bl	8007684 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800929a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800929c:	330b      	adds	r3, #11
 800929e:	2220      	movs	r2, #32
 80092a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092a6:	4611      	mov	r1, r2
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7ff f947 	bl	800853c <ld_clust>
 80092ae:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80092b4:	2200      	movs	r2, #0
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7ff f95f 	bl	800857a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80092bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092be:	331c      	adds	r3, #28
 80092c0:	2100      	movs	r1, #0
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fe f9de 	bl	8007684 <st_dword>
					fs->wflag = 1;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	2201      	movs	r2, #1
 80092cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80092ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d037      	beq.n	8009344 <f_open+0x1d0>
						dw = fs->winsect;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092d8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80092da:	f107 0314 	add.w	r3, r7, #20
 80092de:	2200      	movs	r2, #0
 80092e0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fe fea6 	bl	8008034 <remove_chain>
 80092e8:	4603      	mov	r3, r0
 80092ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80092ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d126      	bne.n	8009344 <f_open+0x1d0>
							res = move_window(fs, dw);
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fe fc4e 	bl	8007b9c <move_window>
 8009300:	4603      	mov	r3, r0
 8009302:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800930a:	3a01      	subs	r2, #1
 800930c:	611a      	str	r2, [r3, #16]
 800930e:	e019      	b.n	8009344 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009310:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009314:	2b00      	cmp	r3, #0
 8009316:	d115      	bne.n	8009344 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009318:	7ebb      	ldrb	r3, [r7, #26]
 800931a:	f003 0310 	and.w	r3, r3, #16
 800931e:	2b00      	cmp	r3, #0
 8009320:	d003      	beq.n	800932a <f_open+0x1b6>
					res = FR_NO_FILE;
 8009322:	2304      	movs	r3, #4
 8009324:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009328:	e00c      	b.n	8009344 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800932a:	79fb      	ldrb	r3, [r7, #7]
 800932c:	f003 0302 	and.w	r3, r3, #2
 8009330:	2b00      	cmp	r3, #0
 8009332:	d007      	beq.n	8009344 <f_open+0x1d0>
 8009334:	7ebb      	ldrb	r3, [r7, #26]
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	2b00      	cmp	r3, #0
 800933c:	d002      	beq.n	8009344 <f_open+0x1d0>
						res = FR_DENIED;
 800933e:	2307      	movs	r3, #7
 8009340:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009344:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009348:	2b00      	cmp	r3, #0
 800934a:	d126      	bne.n	800939a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800934c:	79fb      	ldrb	r3, [r7, #7]
 800934e:	f003 0308 	and.w	r3, r3, #8
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8009356:	79fb      	ldrb	r3, [r7, #7]
 8009358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800935c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009366:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800936c:	79fb      	ldrb	r3, [r7, #7]
 800936e:	2b01      	cmp	r3, #1
 8009370:	bf8c      	ite	hi
 8009372:	2301      	movhi	r3, #1
 8009374:	2300      	movls	r3, #0
 8009376:	b2db      	uxtb	r3, r3
 8009378:	461a      	mov	r2, r3
 800937a:	f107 0314 	add.w	r3, r7, #20
 800937e:	4611      	mov	r1, r2
 8009380:	4618      	mov	r0, r3
 8009382:	f7fe fad9 	bl	8007938 <inc_lock>
 8009386:	4602      	mov	r2, r0
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <f_open+0x226>
 8009394:	2302      	movs	r3, #2
 8009396:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800939a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f040 8095 	bne.w	80094ce <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093a8:	4611      	mov	r1, r2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7ff f8c6 	bl	800853c <ld_clust>
 80093b0:	4602      	mov	r2, r0
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80093b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093b8:	331c      	adds	r3, #28
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe f924 	bl	8007608 <ld_dword>
 80093c0:	4602      	mov	r2, r0
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	88da      	ldrh	r2, [r3, #6]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	79fa      	ldrb	r2, [r7, #7]
 80093de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3330      	adds	r3, #48	@ 0x30
 80093f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093fa:	2100      	movs	r1, #0
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fe f98e 	bl	800771e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009402:	79fb      	ldrb	r3, [r7, #7]
 8009404:	f003 0320 	and.w	r3, r3, #32
 8009408:	2b00      	cmp	r3, #0
 800940a:	d060      	beq.n	80094ce <f_open+0x35a>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d05c      	beq.n	80094ce <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	895b      	ldrh	r3, [r3, #10]
 8009420:	025b      	lsls	r3, r3, #9
 8009422:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009430:	e016      	b.n	8009460 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009436:	4618      	mov	r0, r3
 8009438:	f7fe fc6b 	bl	8007d12 <get_fat>
 800943c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800943e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009440:	2b01      	cmp	r3, #1
 8009442:	d802      	bhi.n	800944a <f_open+0x2d6>
 8009444:	2302      	movs	r3, #2
 8009446:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800944a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800944c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009450:	d102      	bne.n	8009458 <f_open+0x2e4>
 8009452:	2301      	movs	r3, #1
 8009454:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009458:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800945a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009460:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009464:	2b00      	cmp	r3, #0
 8009466:	d103      	bne.n	8009470 <f_open+0x2fc>
 8009468:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800946a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800946c:	429a      	cmp	r2, r3
 800946e:	d8e0      	bhi.n	8009432 <f_open+0x2be>
				}
				fp->clust = clst;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009474:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009476:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800947a:	2b00      	cmp	r3, #0
 800947c:	d127      	bne.n	80094ce <f_open+0x35a>
 800947e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009484:	2b00      	cmp	r3, #0
 8009486:	d022      	beq.n	80094ce <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800948c:	4618      	mov	r0, r3
 800948e:	f7fe fc21 	bl	8007cd4 <clust2sect>
 8009492:	6478      	str	r0, [r7, #68]	@ 0x44
 8009494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009496:	2b00      	cmp	r3, #0
 8009498:	d103      	bne.n	80094a2 <f_open+0x32e>
						res = FR_INT_ERR;
 800949a:	2302      	movs	r3, #2
 800949c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80094a0:	e015      	b.n	80094ce <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80094a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094a4:	0a5a      	lsrs	r2, r3, #9
 80094a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094a8:	441a      	add	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	7858      	ldrb	r0, [r3, #1]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6a1a      	ldr	r2, [r3, #32]
 80094bc:	2301      	movs	r3, #1
 80094be:	f7fe f82d 	bl	800751c <disk_read>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <f_open+0x35a>
 80094c8:	2301      	movs	r3, #1
 80094ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80094ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <f_open+0x368>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80094e2:	4611      	mov	r1, r2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fe f98d 	bl	8007804 <unlock_fs>
 80094ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3760      	adds	r7, #96	@ 0x60
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b086      	sub	sp, #24
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f107 0208 	add.w	r2, r7, #8
 8009504:	4611      	mov	r1, r2
 8009506:	4618      	mov	r0, r3
 8009508:	f7ff fd88 	bl	800901c <validate>
 800950c:	4603      	mov	r3, r0
 800950e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009510:	7dfb      	ldrb	r3, [r7, #23]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d16d      	bne.n	80095f2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	7d1b      	ldrb	r3, [r3, #20]
 800951a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800951e:	2b00      	cmp	r3, #0
 8009520:	d067      	beq.n	80095f2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	7d1b      	ldrb	r3, [r3, #20]
 8009526:	b25b      	sxtb	r3, r3
 8009528:	2b00      	cmp	r3, #0
 800952a:	da1a      	bge.n	8009562 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	7858      	ldrb	r0, [r3, #1]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1a      	ldr	r2, [r3, #32]
 800953a:	2301      	movs	r3, #1
 800953c:	f7fe f80e 	bl	800755c <disk_write>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d006      	beq.n	8009554 <f_sync+0x5e>
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2101      	movs	r1, #1
 800954a:	4618      	mov	r0, r3
 800954c:	f7fe f95a 	bl	8007804 <unlock_fs>
 8009550:	2301      	movs	r3, #1
 8009552:	e055      	b.n	8009600 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	7d1b      	ldrb	r3, [r3, #20]
 8009558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800955c:	b2da      	uxtb	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009562:	f7fd ff3b 	bl	80073dc <get_fattime>
 8009566:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800956e:	4619      	mov	r1, r3
 8009570:	4610      	mov	r0, r2
 8009572:	f7fe fb13 	bl	8007b9c <move_window>
 8009576:	4603      	mov	r3, r0
 8009578:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800957a:	7dfb      	ldrb	r3, [r7, #23]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d138      	bne.n	80095f2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009584:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	330b      	adds	r3, #11
 800958a:	781a      	ldrb	r2, [r3, #0]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	330b      	adds	r3, #11
 8009590:	f042 0220 	orr.w	r2, r2, #32
 8009594:	b2d2      	uxtb	r2, r2
 8009596:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6818      	ldr	r0, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	461a      	mov	r2, r3
 80095a2:	68f9      	ldr	r1, [r7, #12]
 80095a4:	f7fe ffe9 	bl	800857a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f103 021c 	add.w	r2, r3, #28
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	4619      	mov	r1, r3
 80095b4:	4610      	mov	r0, r2
 80095b6:	f7fe f865 	bl	8007684 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3316      	adds	r3, #22
 80095be:	6939      	ldr	r1, [r7, #16]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fe f85f 	bl	8007684 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3312      	adds	r3, #18
 80095ca:	2100      	movs	r1, #0
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fe f83e 	bl	800764e <st_word>
					fs->wflag = 1;
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2201      	movs	r2, #1
 80095d6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fb0c 	bl	8007bf8 <sync_fs>
 80095e0:	4603      	mov	r3, r0
 80095e2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	7d1b      	ldrb	r3, [r3, #20]
 80095e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	7dfa      	ldrb	r2, [r7, #23]
 80095f6:	4611      	mov	r1, r2
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7fe f903 	bl	8007804 <unlock_fs>
 80095fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7ff ff70 	bl	80094f6 <f_sync>
 8009616:	4603      	mov	r3, r0
 8009618:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d11d      	bne.n	800965c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f107 0208 	add.w	r2, r7, #8
 8009626:	4611      	mov	r1, r2
 8009628:	4618      	mov	r0, r3
 800962a:	f7ff fcf7 	bl	800901c <validate>
 800962e:	4603      	mov	r3, r0
 8009630:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009632:	7bfb      	ldrb	r3, [r7, #15]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d111      	bne.n	800965c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	4618      	mov	r0, r3
 800963e:	f7fe fa09 	bl	8007a54 <dec_lock>
 8009642:	4603      	mov	r3, r0
 8009644:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009646:	7bfb      	ldrb	r3, [r7, #15]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d102      	bne.n	8009652 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	2100      	movs	r1, #0
 8009656:	4618      	mov	r0, r3
 8009658:	f7fe f8d4 	bl	8007804 <unlock_fs>
#endif
		}
	}
	return res;
 800965c:	7bfb      	ldrb	r3, [r7, #15]
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8009666:	b590      	push	{r4, r7, lr}
 8009668:	b091      	sub	sp, #68	@ 0x44
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800966e:	f107 0108 	add.w	r1, r7, #8
 8009672:	1d3b      	adds	r3, r7, #4
 8009674:	2200      	movs	r2, #0
 8009676:	4618      	mov	r0, r3
 8009678:	f7ff fa7a 	bl	8008b70 <find_volume>
 800967c:	4603      	mov	r3, r0
 800967e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 8009682:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009686:	2b00      	cmp	r3, #0
 8009688:	d131      	bne.n	80096ee <f_chdir+0x88>
		dj.obj.fs = fs;
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	f107 030c 	add.w	r3, r7, #12
 8009694:	4611      	mov	r1, r2
 8009696:	4618      	mov	r0, r3
 8009698:	f7ff f940 	bl	800891c <follow_path>
 800969c:	4603      	mov	r3, r0
 800969e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80096a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d11a      	bne.n	80096e0 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80096aa:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80096ae:	b25b      	sxtb	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	da03      	bge.n	80096bc <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	619a      	str	r2, [r3, #24]
 80096ba:	e011      	b.n	80096e0 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80096bc:	7cbb      	ldrb	r3, [r7, #18]
 80096be:	f003 0310 	and.w	r3, r3, #16
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d009      	beq.n	80096da <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096ca:	68bc      	ldr	r4, [r7, #8]
 80096cc:	4611      	mov	r1, r2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe ff34 	bl	800853c <ld_clust>
 80096d4:	4603      	mov	r3, r0
 80096d6:	61a3      	str	r3, [r4, #24]
 80096d8:	e002      	b.n	80096e0 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80096da:	2305      	movs	r3, #5
 80096dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80096e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80096e4:	2b04      	cmp	r3, #4
 80096e6:	d102      	bne.n	80096ee <f_chdir+0x88>
 80096e8:	2305      	movs	r3, #5
 80096ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	LEAVE_FF(fs, res);
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80096f4:	4611      	mov	r1, r2
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fe f884 	bl	8007804 <unlock_fs>
 80096fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8009700:	4618      	mov	r0, r3
 8009702:	3744      	adds	r7, #68	@ 0x44
 8009704:	46bd      	mov	sp, r7
 8009706:	bd90      	pop	{r4, r7, pc}

08009708 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b090      	sub	sp, #64	@ 0x40
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8009712:	f107 010c 	add.w	r1, r7, #12
 8009716:	1d3b      	adds	r3, r7, #4
 8009718:	2200      	movs	r2, #0
 800971a:	4618      	mov	r0, r3
 800971c:	f7ff fa28 	bl	8008b70 <find_volume>
 8009720:	4603      	mov	r3, r0
 8009722:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 8009726:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800972a:	2b00      	cmp	r3, #0
 800972c:	d11f      	bne.n	800976e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	f107 030c 	add.w	r3, r7, #12
 8009734:	4611      	mov	r1, r2
 8009736:	4618      	mov	r0, r3
 8009738:	f7ff f8f0 	bl	800891c <follow_path>
 800973c:	4603      	mov	r3, r0
 800973e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8009742:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009746:	2b00      	cmp	r3, #0
 8009748:	d111      	bne.n	800976e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800974a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800974e:	b25b      	sxtb	r3, r3
 8009750:	2b00      	cmp	r3, #0
 8009752:	da03      	bge.n	800975c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8009754:	2306      	movs	r3, #6
 8009756:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800975a:	e008      	b.n	800976e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d005      	beq.n	800976e <f_stat+0x66>
 8009762:	f107 030c 	add.w	r3, r7, #12
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	4618      	mov	r0, r3
 800976a:	f7fe ffad 	bl	80086c8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009774:	4611      	mov	r1, r2
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe f844 	bl	8007804 <unlock_fs>
 800977c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8009780:	4618      	mov	r0, r3
 8009782:	3740      	adds	r7, #64	@ 0x40
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b096      	sub	sp, #88	@ 0x58
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009790:	f107 0108 	add.w	r1, r7, #8
 8009794:	1d3b      	adds	r3, r7, #4
 8009796:	2202      	movs	r2, #2
 8009798:	4618      	mov	r0, r3
 800979a:	f7ff f9e9 	bl	8008b70 <find_volume>
 800979e:	4603      	mov	r3, r0
 80097a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80097a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	f040 80f9 	bne.w	80099a4 <f_mkdir+0x21c>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	f107 030c 	add.w	r3, r7, #12
 80097b8:	4611      	mov	r1, r2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7ff f8ae 	bl	800891c <follow_path>
 80097c0:	4603      	mov	r3, r0
 80097c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80097c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d102      	bne.n	80097d4 <f_mkdir+0x4c>
 80097ce:	2308      	movs	r3, #8
 80097d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80097d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80097d8:	2b04      	cmp	r3, #4
 80097da:	d108      	bne.n	80097ee <f_mkdir+0x66>
 80097dc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80097e0:	f003 0320 	and.w	r3, r3, #32
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80097e8:	2306      	movs	r3, #6
 80097ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80097ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80097f2:	2b04      	cmp	r3, #4
 80097f4:	f040 80d6 	bne.w	80099a4 <f_mkdir+0x21c>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80097f8:	f107 030c 	add.w	r3, r7, #12
 80097fc:	2100      	movs	r1, #0
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe fc7d 	bl	80080fe <create_chain>
 8009804:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	895b      	ldrh	r3, [r3, #10]
 800980a:	025b      	lsls	r3, r3, #9
 800980c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800980e:	2300      	movs	r3, #0
 8009810:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8009814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009816:	2b00      	cmp	r3, #0
 8009818:	d102      	bne.n	8009820 <f_mkdir+0x98>
 800981a:	2307      	movs	r3, #7
 800981c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8009820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009822:	2b01      	cmp	r3, #1
 8009824:	d102      	bne.n	800982c <f_mkdir+0xa4>
 8009826:	2302      	movs	r3, #2
 8009828:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800982c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800982e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009832:	d102      	bne.n	800983a <f_mkdir+0xb2>
 8009834:	2301      	movs	r3, #1
 8009836:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800983a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800983e:	2b00      	cmp	r3, #0
 8009840:	d106      	bne.n	8009850 <f_mkdir+0xc8>
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	4618      	mov	r0, r3
 8009846:	f7fe f965 	bl	8007b14 <sync_window>
 800984a:	4603      	mov	r3, r0
 800984c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 8009850:	f7fd fdc4 	bl	80073dc <get_fattime>
 8009854:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8009856:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800985a:	2b00      	cmp	r3, #0
 800985c:	d16a      	bne.n	8009934 <f_mkdir+0x1ac>
				dsc = clust2sect(fs, dcl);
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009862:	4618      	mov	r0, r3
 8009864:	f7fe fa36 	bl	8007cd4 <clust2sect>
 8009868:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	3338      	adds	r3, #56	@ 0x38
 800986e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8009870:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009874:	2100      	movs	r1, #0
 8009876:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009878:	f7fd ff51 	bl	800771e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800987c:	220b      	movs	r2, #11
 800987e:	2120      	movs	r1, #32
 8009880:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009882:	f7fd ff4c 	bl	800771e <mem_set>
					dir[DIR_Name] = '.';
 8009886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009888:	222e      	movs	r2, #46	@ 0x2e
 800988a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800988c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800988e:	330b      	adds	r3, #11
 8009890:	2210      	movs	r2, #16
 8009892:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8009894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009896:	3316      	adds	r3, #22
 8009898:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800989a:	4618      	mov	r0, r3
 800989c:	f7fd fef2 	bl	8007684 <st_dword>
					st_clust(fs, dir, dcl);
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe fe67 	bl	800857a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80098ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ae:	3320      	adds	r3, #32
 80098b0:	2220      	movs	r2, #32
 80098b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fd ff11 	bl	80076dc <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80098ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098bc:	3321      	adds	r3, #33	@ 0x21
 80098be:	222e      	movs	r2, #46	@ 0x2e
 80098c0:	701a      	strb	r2, [r3, #0]
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	2b03      	cmp	r3, #3
 80098cc:	d106      	bne.n	80098dc <f_mkdir+0x154>
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d101      	bne.n	80098dc <f_mkdir+0x154>
 80098d8:	2300      	movs	r3, #0
 80098da:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80098dc:	68b8      	ldr	r0, [r7, #8]
 80098de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e0:	3320      	adds	r3, #32
 80098e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098e4:	4619      	mov	r1, r3
 80098e6:	f7fe fe48 	bl	800857a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	895b      	ldrh	r3, [r3, #10]
 80098ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80098f0:	e01b      	b.n	800992a <f_mkdir+0x1a2>
					fs->winsect = dsc++;
 80098f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098f4:	1c5a      	adds	r2, r3, #1
 80098f6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	6353      	str	r3, [r2, #52]	@ 0x34
					fs->wflag = 1;
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	2201      	movs	r2, #1
 8009900:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	4618      	mov	r0, r3
 8009906:	f7fe f905 	bl	8007b14 <sync_window>
 800990a:	4603      	mov	r3, r0
 800990c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 8009910:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009914:	2b00      	cmp	r3, #0
 8009916:	d10c      	bne.n	8009932 <f_mkdir+0x1aa>
					mem_set(dir, 0, SS(fs));
 8009918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800991c:	2100      	movs	r1, #0
 800991e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009920:	f7fd fefd 	bl	800771e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009926:	3b01      	subs	r3, #1
 8009928:	653b      	str	r3, [r7, #80]	@ 0x50
 800992a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1e0      	bne.n	80098f2 <f_mkdir+0x16a>
 8009930:	e000      	b.n	8009934 <f_mkdir+0x1ac>
					if (res != FR_OK) break;
 8009932:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8009934:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009938:	2b00      	cmp	r3, #0
 800993a:	d107      	bne.n	800994c <f_mkdir+0x1c4>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800993c:	f107 030c 	add.w	r3, r7, #12
 8009940:	4618      	mov	r0, r3
 8009942:	f7fe fe8f 	bl	8008664 <dir_register>
 8009946:	4603      	mov	r3, r0
 8009948:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 800994c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009950:	2b00      	cmp	r3, #0
 8009952:	d120      	bne.n	8009996 <f_mkdir+0x20e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8009954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009956:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8009958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800995a:	3316      	adds	r3, #22
 800995c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800995e:	4618      	mov	r0, r3
 8009960:	f7fd fe90 	bl	8007684 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009968:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe fe05 	bl	800857a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8009970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009972:	330b      	adds	r3, #11
 8009974:	2210      	movs	r2, #16
 8009976:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2201      	movs	r2, #1
 800997c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800997e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10e      	bne.n	80099a4 <f_mkdir+0x21c>
					res = sync_fs(fs);
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	4618      	mov	r0, r3
 800998a:	f7fe f935 	bl	8007bf8 <sync_fs>
 800998e:	4603      	mov	r3, r0
 8009990:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8009994:	e006      	b.n	80099a4 <f_mkdir+0x21c>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8009996:	f107 030c 	add.w	r3, r7, #12
 800999a:	2200      	movs	r2, #0
 800999c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe fb48 	bl	8008034 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80099aa:	4611      	mov	r1, r2
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fd ff29 	bl	8007804 <unlock_fs>
 80099b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3758      	adds	r7, #88	@ 0x58
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
	...

080099c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b087      	sub	sp, #28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	4613      	mov	r3, r2
 80099cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80099ce:	2301      	movs	r3, #1
 80099d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80099d6:	4b1f      	ldr	r3, [pc, #124]	@ (8009a54 <FATFS_LinkDriverEx+0x94>)
 80099d8:	7a5b      	ldrb	r3, [r3, #9]
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d131      	bne.n	8009a44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80099e0:	4b1c      	ldr	r3, [pc, #112]	@ (8009a54 <FATFS_LinkDriverEx+0x94>)
 80099e2:	7a5b      	ldrb	r3, [r3, #9]
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	461a      	mov	r2, r3
 80099e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009a54 <FATFS_LinkDriverEx+0x94>)
 80099ea:	2100      	movs	r1, #0
 80099ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80099ee:	4b19      	ldr	r3, [pc, #100]	@ (8009a54 <FATFS_LinkDriverEx+0x94>)
 80099f0:	7a5b      	ldrb	r3, [r3, #9]
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	4a17      	ldr	r2, [pc, #92]	@ (8009a54 <FATFS_LinkDriverEx+0x94>)
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4413      	add	r3, r2
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80099fe:	4b15      	ldr	r3, [pc, #84]	@ (8009a54 <FATFS_LinkDriverEx+0x94>)
 8009a00:	7a5b      	ldrb	r3, [r3, #9]
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	461a      	mov	r2, r3
 8009a06:	4b13      	ldr	r3, [pc, #76]	@ (8009a54 <FATFS_LinkDriverEx+0x94>)
 8009a08:	4413      	add	r3, r2
 8009a0a:	79fa      	ldrb	r2, [r7, #7]
 8009a0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009a0e:	4b11      	ldr	r3, [pc, #68]	@ (8009a54 <FATFS_LinkDriverEx+0x94>)
 8009a10:	7a5b      	ldrb	r3, [r3, #9]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	1c5a      	adds	r2, r3, #1
 8009a16:	b2d1      	uxtb	r1, r2
 8009a18:	4a0e      	ldr	r2, [pc, #56]	@ (8009a54 <FATFS_LinkDriverEx+0x94>)
 8009a1a:	7251      	strb	r1, [r2, #9]
 8009a1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009a1e:	7dbb      	ldrb	r3, [r7, #22]
 8009a20:	3330      	adds	r3, #48	@ 0x30
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	223a      	movs	r2, #58	@ 0x3a
 8009a2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	3302      	adds	r3, #2
 8009a34:	222f      	movs	r2, #47	@ 0x2f
 8009a36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	3303      	adds	r3, #3
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	371c      	adds	r7, #28
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop
 8009a54:	20000e18 	.word	0x20000e18

08009a58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009a62:	2200      	movs	r2, #0
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f7ff ffaa 	bl	80099c0 <FATFS_LinkDriverEx>
 8009a6c:	4603      	mov	r3, r0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009a76:	b580      	push	{r7, lr}
 8009a78:	b086      	sub	sp, #24
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	6039      	str	r1, [r7, #0]
 8009a80:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8009a82:	2300      	movs	r3, #0
 8009a84:	60fb      	str	r3, [r7, #12]
 8009a86:	2300      	movs	r3, #0
 8009a88:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009a8a:	f107 030c 	add.w	r3, r7, #12
 8009a8e:	2101      	movs	r1, #1
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 f8cd 	bl	8009c30 <osSemaphoreCreate>
 8009a96:	4602      	mov	r2, r0
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	bf14      	ite	ne
 8009aa4:	2301      	movne	r3, #1
 8009aa6:	2300      	moveq	r3, #0
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	617b      	str	r3, [r7, #20]

    return ret;
 8009aac:	697b      	ldr	r3, [r7, #20]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b082      	sub	sp, #8
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f96c 	bl	8009d9c <osSemaphoreDelete>
#endif
    return 1;
 8009ac4:	2301      	movs	r3, #1
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8009ada:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f8d8 	bl	8009c94 <osSemaphoreWait>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d101      	bne.n	8009aee <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8009aea:	2301      	movs	r3, #1
 8009aec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009aee:	68fb      	ldr	r3, [r7, #12]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f915 	bl	8009d30 <osSemaphoreRelease>
#endif
}
 8009b06:	bf00      	nop
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b085      	sub	sp, #20
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	4603      	mov	r3, r0
 8009b16:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b20:	2b84      	cmp	r3, #132	@ 0x84
 8009b22:	d005      	beq.n	8009b30 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009b24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	3303      	adds	r3, #3
 8009b2e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009b30:	68fb      	ldr	r3, [r7, #12]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b083      	sub	sp, #12
 8009b42:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b44:	f3ef 8305 	mrs	r3, IPSR
 8009b48:	607b      	str	r3, [r7, #4]
  return(result);
 8009b4a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	bf14      	ite	ne
 8009b50:	2301      	movne	r3, #1
 8009b52:	2300      	moveq	r3, #0
 8009b54:	b2db      	uxtb	r3, r3
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr

08009b62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009b66:	f001 f98b 	bl	800ae80 <vTaskStartScheduler>
  
  return osOK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b72:	b089      	sub	sp, #36	@ 0x24
 8009b74:	af04      	add	r7, sp, #16
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d020      	beq.n	8009bc4 <osThreadCreate+0x54>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d01c      	beq.n	8009bc4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	685c      	ldr	r4, [r3, #4]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	691e      	ldr	r6, [r3, #16]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff ffb6 	bl	8009b0e <makeFreeRtosPriority>
 8009ba2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	695b      	ldr	r3, [r3, #20]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bac:	9202      	str	r2, [sp, #8]
 8009bae:	9301      	str	r3, [sp, #4]
 8009bb0:	9100      	str	r1, [sp, #0]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	4632      	mov	r2, r6
 8009bb6:	4629      	mov	r1, r5
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f000 ff93 	bl	800aae4 <xTaskCreateStatic>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	60fb      	str	r3, [r7, #12]
 8009bc2:	e01c      	b.n	8009bfe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685c      	ldr	r4, [r3, #4]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bd0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7ff ff98 	bl	8009b0e <makeFreeRtosPriority>
 8009bde:	4602      	mov	r2, r0
 8009be0:	f107 030c 	add.w	r3, r7, #12
 8009be4:	9301      	str	r3, [sp, #4]
 8009be6:	9200      	str	r2, [sp, #0]
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	4632      	mov	r2, r6
 8009bec:	4629      	mov	r1, r5
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f000 ffd8 	bl	800aba4 <xTaskCreate>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d001      	beq.n	8009bfe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e000      	b.n	8009c00 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c08 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <osDelay+0x16>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	e000      	b.n	8009c20 <osDelay+0x18>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	4618      	mov	r0, r3
 8009c22:	f001 f8f7 	bl	800ae14 <vTaskDelay>
  
  return osOK;
 8009c26:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af02      	add	r7, sp, #8
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00f      	beq.n	8009c62 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d10a      	bne.n	8009c5e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	2203      	movs	r2, #3
 8009c4e:	9200      	str	r2, [sp, #0]
 8009c50:	2200      	movs	r2, #0
 8009c52:	2100      	movs	r1, #0
 8009c54:	2001      	movs	r0, #1
 8009c56:	f000 f9d3 	bl	800a000 <xQueueGenericCreateStatic>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	e016      	b.n	8009c8c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e014      	b.n	8009c8c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d110      	bne.n	8009c8a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009c68:	2203      	movs	r2, #3
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	2001      	movs	r0, #1
 8009c6e:	f000 fa44 	bl	800a0fa <xQueueGenericCreate>
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d005      	beq.n	8009c86 <osSemaphoreCreate+0x56>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2100      	movs	r1, #0
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 fa95 	bl	800a1b0 <xQueueGenericSend>
      return sema;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	e000      	b.n	8009c8c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009c8a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d101      	bne.n	8009cac <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009ca8:	2380      	movs	r3, #128	@ 0x80
 8009caa:	e03a      	b.n	8009d22 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009cac:	2300      	movs	r3, #0
 8009cae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb6:	d103      	bne.n	8009cc0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cbc:	60fb      	str	r3, [r7, #12]
 8009cbe:	e009      	b.n	8009cd4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d006      	beq.n	8009cd4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d101      	bne.n	8009cd4 <osSemaphoreWait+0x40>
      ticks = 1;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009cd4:	f7ff ff33 	bl	8009b3e <inHandlerMode>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d017      	beq.n	8009d0e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009cde:	f107 0308 	add.w	r3, r7, #8
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fd04 	bl	800a6f4 <xQueueReceiveFromISR>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d001      	beq.n	8009cf6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8009cf2:	23ff      	movs	r3, #255	@ 0xff
 8009cf4:	e015      	b.n	8009d22 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d011      	beq.n	8009d20 <osSemaphoreWait+0x8c>
 8009cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8009d2c <osSemaphoreWait+0x98>)
 8009cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d02:	601a      	str	r2, [r3, #0]
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	e008      	b.n	8009d20 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009d0e:	68f9      	ldr	r1, [r7, #12]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 fbdf 	bl	800a4d4 <xQueueSemaphoreTake>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d001      	beq.n	8009d20 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009d1c:	23ff      	movs	r3, #255	@ 0xff
 8009d1e:	e000      	b.n	8009d22 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	e000ed04 	.word	0xe000ed04

08009d30 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009d40:	f7ff fefd 	bl	8009b3e <inHandlerMode>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d016      	beq.n	8009d78 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009d4a:	f107 0308 	add.w	r3, r7, #8
 8009d4e:	4619      	mov	r1, r3
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fb2f 	bl	800a3b4 <xQueueGiveFromISR>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d001      	beq.n	8009d60 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009d5c:	23ff      	movs	r3, #255	@ 0xff
 8009d5e:	e017      	b.n	8009d90 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d013      	beq.n	8009d8e <osSemaphoreRelease+0x5e>
 8009d66:	4b0c      	ldr	r3, [pc, #48]	@ (8009d98 <osSemaphoreRelease+0x68>)
 8009d68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	e00a      	b.n	8009d8e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009d78:	2300      	movs	r3, #0
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fa16 	bl	800a1b0 <xQueueGenericSend>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d001      	beq.n	8009d8e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009d8a:	23ff      	movs	r3, #255	@ 0xff
 8009d8c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009da4:	f7ff fecb 	bl	8009b3e <inHandlerMode>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009dae:	2382      	movs	r3, #130	@ 0x82
 8009db0:	e003      	b.n	8009dba <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 fd20 	bl	800a7f8 <vQueueDelete>

  return osOK; 
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f103 0208 	add.w	r2, r3, #8
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dda:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f103 0208 	add.w	r2, r3, #8
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f103 0208 	add.w	r2, r3, #8
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e02:	b480      	push	{r7}
 8009e04:	b083      	sub	sp, #12
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	689a      	ldr	r2, [r3, #8]
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	1c5a      	adds	r2, r3, #1
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	601a      	str	r2, [r3, #0]
}
 8009e58:	bf00      	nop
 8009e5a:	3714      	adds	r7, #20
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7a:	d103      	bne.n	8009e84 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	60fb      	str	r3, [r7, #12]
 8009e82:	e00c      	b.n	8009e9e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	3308      	adds	r3, #8
 8009e88:	60fb      	str	r3, [r7, #12]
 8009e8a:	e002      	b.n	8009e92 <vListInsert+0x2e>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	60fb      	str	r3, [r7, #12]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d2f6      	bcs.n	8009e8c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	1c5a      	adds	r2, r3, #1
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	601a      	str	r2, [r3, #0]
}
 8009eca:	bf00      	nop
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b085      	sub	sp, #20
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	6892      	ldr	r2, [r2, #8]
 8009eec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	6852      	ldr	r2, [r2, #4]
 8009ef6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d103      	bne.n	8009f0a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	689a      	ldr	r2, [r3, #8]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	1e5a      	subs	r2, r3, #1
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
	...

08009f2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10b      	bne.n	8009f58 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	e7fd      	b.n	8009f54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f58:	f001 fef6 	bl	800bd48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f64:	68f9      	ldr	r1, [r7, #12]
 8009f66:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009f68:	fb01 f303 	mul.w	r3, r1, r3
 8009f6c:	441a      	add	r2, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	68f9      	ldr	r1, [r7, #12]
 8009f8c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009f8e:	fb01 f303 	mul.w	r3, r1, r3
 8009f92:	441a      	add	r2, r3
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	22ff      	movs	r2, #255	@ 0xff
 8009f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	22ff      	movs	r2, #255	@ 0xff
 8009fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d114      	bne.n	8009fd8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d01a      	beq.n	8009fec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	3310      	adds	r3, #16
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f001 f9aa 	bl	800b314 <xTaskRemoveFromEventList>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d012      	beq.n	8009fec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8009ffc <xQueueGenericReset+0xd0>)
 8009fc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	e009      	b.n	8009fec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3310      	adds	r3, #16
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7ff fef0 	bl	8009dc2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3324      	adds	r3, #36	@ 0x24
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff feeb 	bl	8009dc2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009fec:	f001 fede 	bl	800bdac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ff0:	2301      	movs	r3, #1
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3710      	adds	r7, #16
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	e000ed04 	.word	0xe000ed04

0800a000 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08e      	sub	sp, #56	@ 0x38
 800a004:	af02      	add	r7, sp, #8
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10b      	bne.n	800a02c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a026:	bf00      	nop
 800a028:	bf00      	nop
 800a02a:	e7fd      	b.n	800a028 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10b      	bne.n	800a04a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a036:	f383 8811 	msr	BASEPRI, r3
 800a03a:	f3bf 8f6f 	isb	sy
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a044:	bf00      	nop
 800a046:	bf00      	nop
 800a048:	e7fd      	b.n	800a046 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d002      	beq.n	800a056 <xQueueGenericCreateStatic+0x56>
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <xQueueGenericCreateStatic+0x5a>
 800a056:	2301      	movs	r3, #1
 800a058:	e000      	b.n	800a05c <xQueueGenericCreateStatic+0x5c>
 800a05a:	2300      	movs	r3, #0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10b      	bne.n	800a078 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	623b      	str	r3, [r7, #32]
}
 800a072:	bf00      	nop
 800a074:	bf00      	nop
 800a076:	e7fd      	b.n	800a074 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d102      	bne.n	800a084 <xQueueGenericCreateStatic+0x84>
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d101      	bne.n	800a088 <xQueueGenericCreateStatic+0x88>
 800a084:	2301      	movs	r3, #1
 800a086:	e000      	b.n	800a08a <xQueueGenericCreateStatic+0x8a>
 800a088:	2300      	movs	r3, #0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10b      	bne.n	800a0a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	61fb      	str	r3, [r7, #28]
}
 800a0a0:	bf00      	nop
 800a0a2:	bf00      	nop
 800a0a4:	e7fd      	b.n	800a0a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0a6:	2348      	movs	r3, #72	@ 0x48
 800a0a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b48      	cmp	r3, #72	@ 0x48
 800a0ae:	d00b      	beq.n	800a0c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0b4:	f383 8811 	msr	BASEPRI, r3
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	61bb      	str	r3, [r7, #24]
}
 800a0c2:	bf00      	nop
 800a0c4:	bf00      	nop
 800a0c6:	e7fd      	b.n	800a0c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00d      	beq.n	800a0f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e2:	9300      	str	r3, [sp, #0]
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	68b9      	ldr	r1, [r7, #8]
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f000 f840 	bl	800a170 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3730      	adds	r7, #48	@ 0x30
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b08a      	sub	sp, #40	@ 0x28
 800a0fe:	af02      	add	r7, sp, #8
 800a100:	60f8      	str	r0, [r7, #12]
 800a102:	60b9      	str	r1, [r7, #8]
 800a104:	4613      	mov	r3, r2
 800a106:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10b      	bne.n	800a126 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	613b      	str	r3, [r7, #16]
}
 800a120:	bf00      	nop
 800a122:	bf00      	nop
 800a124:	e7fd      	b.n	800a122 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	fb02 f303 	mul.w	r3, r2, r3
 800a12e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	3348      	adds	r3, #72	@ 0x48
 800a134:	4618      	mov	r0, r3
 800a136:	f001 ff29 	bl	800bf8c <pvPortMalloc>
 800a13a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d011      	beq.n	800a166 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	3348      	adds	r3, #72	@ 0x48
 800a14a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a154:	79fa      	ldrb	r2, [r7, #7]
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	4613      	mov	r3, r2
 800a15c:	697a      	ldr	r2, [r7, #20]
 800a15e:	68b9      	ldr	r1, [r7, #8]
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f000 f805 	bl	800a170 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a166:	69bb      	ldr	r3, [r7, #24]
	}
 800a168:	4618      	mov	r0, r3
 800a16a:	3720      	adds	r7, #32
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d103      	bne.n	800a18c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	69ba      	ldr	r2, [r7, #24]
 800a188:	601a      	str	r2, [r3, #0]
 800a18a:	e002      	b.n	800a192 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	68ba      	ldr	r2, [r7, #8]
 800a19c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a19e:	2101      	movs	r1, #1
 800a1a0:	69b8      	ldr	r0, [r7, #24]
 800a1a2:	f7ff fec3 	bl	8009f2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1a6:	bf00      	nop
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
	...

0800a1b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b08e      	sub	sp, #56	@ 0x38
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
 800a1bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10b      	bne.n	800a1e4 <xQueueGenericSend+0x34>
	__asm volatile
 800a1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a1de:	bf00      	nop
 800a1e0:	bf00      	nop
 800a1e2:	e7fd      	b.n	800a1e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d103      	bne.n	800a1f2 <xQueueGenericSend+0x42>
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <xQueueGenericSend+0x46>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	e000      	b.n	800a1f8 <xQueueGenericSend+0x48>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d10b      	bne.n	800a214 <xQueueGenericSend+0x64>
	__asm volatile
 800a1fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a200:	f383 8811 	msr	BASEPRI, r3
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a20e:	bf00      	nop
 800a210:	bf00      	nop
 800a212:	e7fd      	b.n	800a210 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b02      	cmp	r3, #2
 800a218:	d103      	bne.n	800a222 <xQueueGenericSend+0x72>
 800a21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d101      	bne.n	800a226 <xQueueGenericSend+0x76>
 800a222:	2301      	movs	r3, #1
 800a224:	e000      	b.n	800a228 <xQueueGenericSend+0x78>
 800a226:	2300      	movs	r3, #0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10b      	bne.n	800a244 <xQueueGenericSend+0x94>
	__asm volatile
 800a22c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a230:	f383 8811 	msr	BASEPRI, r3
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	623b      	str	r3, [r7, #32]
}
 800a23e:	bf00      	nop
 800a240:	bf00      	nop
 800a242:	e7fd      	b.n	800a240 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a244:	f001 fa26 	bl	800b694 <xTaskGetSchedulerState>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d102      	bne.n	800a254 <xQueueGenericSend+0xa4>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <xQueueGenericSend+0xa8>
 800a254:	2301      	movs	r3, #1
 800a256:	e000      	b.n	800a25a <xQueueGenericSend+0xaa>
 800a258:	2300      	movs	r3, #0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10b      	bne.n	800a276 <xQueueGenericSend+0xc6>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	61fb      	str	r3, [r7, #28]
}
 800a270:	bf00      	nop
 800a272:	bf00      	nop
 800a274:	e7fd      	b.n	800a272 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a276:	f001 fd67 	bl	800bd48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a282:	429a      	cmp	r2, r3
 800a284:	d302      	bcc.n	800a28c <xQueueGenericSend+0xdc>
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d129      	bne.n	800a2e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	68b9      	ldr	r1, [r7, #8]
 800a290:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a292:	f000 faed 	bl	800a870 <prvCopyDataToQueue>
 800a296:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d010      	beq.n	800a2c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	3324      	adds	r3, #36	@ 0x24
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 f835 	bl	800b314 <xTaskRemoveFromEventList>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d013      	beq.n	800a2d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a2b0:	4b3f      	ldr	r3, [pc, #252]	@ (800a3b0 <xQueueGenericSend+0x200>)
 800a2b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	e00a      	b.n	800a2d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d007      	beq.n	800a2d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a2c8:	4b39      	ldr	r3, [pc, #228]	@ (800a3b0 <xQueueGenericSend+0x200>)
 800a2ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2ce:	601a      	str	r2, [r3, #0]
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a2d8:	f001 fd68 	bl	800bdac <vPortExitCritical>
				return pdPASS;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e063      	b.n	800a3a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d103      	bne.n	800a2ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2e6:	f001 fd61 	bl	800bdac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	e05c      	b.n	800a3a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d106      	bne.n	800a302 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2f4:	f107 0314 	add.w	r3, r7, #20
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f001 f86f 	bl	800b3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2fe:	2301      	movs	r3, #1
 800a300:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a302:	f001 fd53 	bl	800bdac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a306:	f000 fe1d 	bl	800af44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a30a:	f001 fd1d 	bl	800bd48 <vPortEnterCritical>
 800a30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a310:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a314:	b25b      	sxtb	r3, r3
 800a316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a31a:	d103      	bne.n	800a324 <xQueueGenericSend+0x174>
 800a31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31e:	2200      	movs	r2, #0
 800a320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a326:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a32a:	b25b      	sxtb	r3, r3
 800a32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a330:	d103      	bne.n	800a33a <xQueueGenericSend+0x18a>
 800a332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a334:	2200      	movs	r2, #0
 800a336:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a33a:	f001 fd37 	bl	800bdac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a33e:	1d3a      	adds	r2, r7, #4
 800a340:	f107 0314 	add.w	r3, r7, #20
 800a344:	4611      	mov	r1, r2
 800a346:	4618      	mov	r0, r3
 800a348:	f001 f85e 	bl	800b408 <xTaskCheckForTimeOut>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d124      	bne.n	800a39c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a352:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a354:	f000 fb84 	bl	800aa60 <prvIsQueueFull>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d018      	beq.n	800a390 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a360:	3310      	adds	r3, #16
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	4611      	mov	r1, r2
 800a366:	4618      	mov	r0, r3
 800a368:	f000 ffae 	bl	800b2c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a36c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a36e:	f000 fb0f 	bl	800a990 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a372:	f000 fdf5 	bl	800af60 <xTaskResumeAll>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f47f af7c 	bne.w	800a276 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a37e:	4b0c      	ldr	r3, [pc, #48]	@ (800a3b0 <xQueueGenericSend+0x200>)
 800a380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	e772      	b.n	800a276 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a392:	f000 fafd 	bl	800a990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a396:	f000 fde3 	bl	800af60 <xTaskResumeAll>
 800a39a:	e76c      	b.n	800a276 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a39c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a39e:	f000 faf7 	bl	800a990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3a2:	f000 fddd 	bl	800af60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a3a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3738      	adds	r7, #56	@ 0x38
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	e000ed04 	.word	0xe000ed04

0800a3b4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b08e      	sub	sp, #56	@ 0x38
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10b      	bne.n	800a3e0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	623b      	str	r3, [r7, #32]
}
 800a3da:	bf00      	nop
 800a3dc:	bf00      	nop
 800a3de:	e7fd      	b.n	800a3dc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00b      	beq.n	800a400 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	61fb      	str	r3, [r7, #28]
}
 800a3fa:	bf00      	nop
 800a3fc:	bf00      	nop
 800a3fe:	e7fd      	b.n	800a3fc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d103      	bne.n	800a410 <xQueueGiveFromISR+0x5c>
 800a408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d101      	bne.n	800a414 <xQueueGiveFromISR+0x60>
 800a410:	2301      	movs	r3, #1
 800a412:	e000      	b.n	800a416 <xQueueGiveFromISR+0x62>
 800a414:	2300      	movs	r3, #0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10b      	bne.n	800a432 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	61bb      	str	r3, [r7, #24]
}
 800a42c:	bf00      	nop
 800a42e:	bf00      	nop
 800a430:	e7fd      	b.n	800a42e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a432:	f001 fd69 	bl	800bf08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a436:	f3ef 8211 	mrs	r2, BASEPRI
 800a43a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	617a      	str	r2, [r7, #20]
 800a44c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a44e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a450:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a456:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a45c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a45e:	429a      	cmp	r2, r3
 800a460:	d22b      	bcs.n	800a4ba <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a464:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a472:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a474:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47c:	d112      	bne.n	800a4a4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a482:	2b00      	cmp	r3, #0
 800a484:	d016      	beq.n	800a4b4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a488:	3324      	adds	r3, #36	@ 0x24
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 ff42 	bl	800b314 <xTaskRemoveFromEventList>
 800a490:	4603      	mov	r3, r0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00e      	beq.n	800a4b4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00b      	beq.n	800a4b4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	e007      	b.n	800a4b4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a4a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	b25a      	sxtb	r2, r3
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4b8:	e001      	b.n	800a4be <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a4c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3738      	adds	r7, #56	@ 0x38
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b08e      	sub	sp, #56	@ 0x38
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10b      	bne.n	800a508 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	623b      	str	r3, [r7, #32]
}
 800a502:	bf00      	nop
 800a504:	bf00      	nop
 800a506:	e7fd      	b.n	800a504 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a50a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00b      	beq.n	800a528 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	61fb      	str	r3, [r7, #28]
}
 800a522:	bf00      	nop
 800a524:	bf00      	nop
 800a526:	e7fd      	b.n	800a524 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a528:	f001 f8b4 	bl	800b694 <xTaskGetSchedulerState>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d102      	bne.n	800a538 <xQueueSemaphoreTake+0x64>
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d101      	bne.n	800a53c <xQueueSemaphoreTake+0x68>
 800a538:	2301      	movs	r3, #1
 800a53a:	e000      	b.n	800a53e <xQueueSemaphoreTake+0x6a>
 800a53c:	2300      	movs	r3, #0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10b      	bne.n	800a55a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a546:	f383 8811 	msr	BASEPRI, r3
 800a54a:	f3bf 8f6f 	isb	sy
 800a54e:	f3bf 8f4f 	dsb	sy
 800a552:	61bb      	str	r3, [r7, #24]
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop
 800a558:	e7fd      	b.n	800a556 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a55a:	f001 fbf5 	bl	800bd48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a562:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a566:	2b00      	cmp	r3, #0
 800a568:	d024      	beq.n	800a5b4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56c:	1e5a      	subs	r2, r3, #1
 800a56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a570:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d104      	bne.n	800a584 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a57a:	f001 fa37 	bl	800b9ec <pvTaskIncrementMutexHeldCount>
 800a57e:	4602      	mov	r2, r0
 800a580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a582:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00f      	beq.n	800a5ac <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a58e:	3310      	adds	r3, #16
 800a590:	4618      	mov	r0, r3
 800a592:	f000 febf 	bl	800b314 <xTaskRemoveFromEventList>
 800a596:	4603      	mov	r3, r0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d007      	beq.n	800a5ac <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a59c:	4b54      	ldr	r3, [pc, #336]	@ (800a6f0 <xQueueSemaphoreTake+0x21c>)
 800a59e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	f3bf 8f4f 	dsb	sy
 800a5a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a5ac:	f001 fbfe 	bl	800bdac <vPortExitCritical>
				return pdPASS;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e098      	b.n	800a6e6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d112      	bne.n	800a5e0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00b      	beq.n	800a5d8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	617b      	str	r3, [r7, #20]
}
 800a5d2:	bf00      	nop
 800a5d4:	bf00      	nop
 800a5d6:	e7fd      	b.n	800a5d4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a5d8:	f001 fbe8 	bl	800bdac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	e082      	b.n	800a6e6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d106      	bne.n	800a5f4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a5e6:	f107 030c 	add.w	r3, r7, #12
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 fef6 	bl	800b3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5f4:	f001 fbda 	bl	800bdac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5f8:	f000 fca4 	bl	800af44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5fc:	f001 fba4 	bl	800bd48 <vPortEnterCritical>
 800a600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a602:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a606:	b25b      	sxtb	r3, r3
 800a608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a60c:	d103      	bne.n	800a616 <xQueueSemaphoreTake+0x142>
 800a60e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a610:	2200      	movs	r2, #0
 800a612:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a618:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a61c:	b25b      	sxtb	r3, r3
 800a61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a622:	d103      	bne.n	800a62c <xQueueSemaphoreTake+0x158>
 800a624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a626:	2200      	movs	r2, #0
 800a628:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a62c:	f001 fbbe 	bl	800bdac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a630:	463a      	mov	r2, r7
 800a632:	f107 030c 	add.w	r3, r7, #12
 800a636:	4611      	mov	r1, r2
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 fee5 	bl	800b408 <xTaskCheckForTimeOut>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d132      	bne.n	800a6aa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a644:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a646:	f000 f9f5 	bl	800aa34 <prvIsQueueEmpty>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d026      	beq.n	800a69e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d109      	bne.n	800a66c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a658:	f001 fb76 	bl	800bd48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	4618      	mov	r0, r3
 800a662:	f001 f835 	bl	800b6d0 <xTaskPriorityInherit>
 800a666:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a668:	f001 fba0 	bl	800bdac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a66e:	3324      	adds	r3, #36	@ 0x24
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	4611      	mov	r1, r2
 800a674:	4618      	mov	r0, r3
 800a676:	f000 fe27 	bl	800b2c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a67a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a67c:	f000 f988 	bl	800a990 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a680:	f000 fc6e 	bl	800af60 <xTaskResumeAll>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	f47f af67 	bne.w	800a55a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a68c:	4b18      	ldr	r3, [pc, #96]	@ (800a6f0 <xQueueSemaphoreTake+0x21c>)
 800a68e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	e75d      	b.n	800a55a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a69e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6a0:	f000 f976 	bl	800a990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6a4:	f000 fc5c 	bl	800af60 <xTaskResumeAll>
 800a6a8:	e757      	b.n	800a55a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a6aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6ac:	f000 f970 	bl	800a990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6b0:	f000 fc56 	bl	800af60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6b6:	f000 f9bd 	bl	800aa34 <prvIsQueueEmpty>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	f43f af4c 	beq.w	800a55a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00d      	beq.n	800a6e4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a6c8:	f001 fb3e 	bl	800bd48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a6cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a6ce:	f000 f8b7 	bl	800a840 <prvGetDisinheritPriorityAfterTimeout>
 800a6d2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f001 f8f6 	bl	800b8cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a6e0:	f001 fb64 	bl	800bdac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3738      	adds	r7, #56	@ 0x38
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	e000ed04 	.word	0xe000ed04

0800a6f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b08e      	sub	sp, #56	@ 0x38
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10b      	bne.n	800a722 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70e:	f383 8811 	msr	BASEPRI, r3
 800a712:	f3bf 8f6f 	isb	sy
 800a716:	f3bf 8f4f 	dsb	sy
 800a71a:	623b      	str	r3, [r7, #32]
}
 800a71c:	bf00      	nop
 800a71e:	bf00      	nop
 800a720:	e7fd      	b.n	800a71e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d103      	bne.n	800a730 <xQueueReceiveFromISR+0x3c>
 800a728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d101      	bne.n	800a734 <xQueueReceiveFromISR+0x40>
 800a730:	2301      	movs	r3, #1
 800a732:	e000      	b.n	800a736 <xQueueReceiveFromISR+0x42>
 800a734:	2300      	movs	r3, #0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d10b      	bne.n	800a752 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	61fb      	str	r3, [r7, #28]
}
 800a74c:	bf00      	nop
 800a74e:	bf00      	nop
 800a750:	e7fd      	b.n	800a74e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a752:	f001 fbd9 	bl	800bf08 <vPortValidateInterruptPriority>
	__asm volatile
 800a756:	f3ef 8211 	mrs	r2, BASEPRI
 800a75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	61ba      	str	r2, [r7, #24]
 800a76c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a76e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a770:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a776:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d02f      	beq.n	800a7de <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a780:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a788:	68b9      	ldr	r1, [r7, #8]
 800a78a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a78c:	f000 f8da 	bl	800a944 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a792:	1e5a      	subs	r2, r3, #1
 800a794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a796:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a798:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a0:	d112      	bne.n	800a7c8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d016      	beq.n	800a7d8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ac:	3310      	adds	r3, #16
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 fdb0 	bl	800b314 <xTaskRemoveFromEventList>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00e      	beq.n	800a7d8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00b      	beq.n	800a7d8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	601a      	str	r2, [r3, #0]
 800a7c6:	e007      	b.n	800a7d8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a7c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	b25a      	sxtb	r2, r3
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7dc:	e001      	b.n	800a7e2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	f383 8811 	msr	BASEPRI, r3
}
 800a7ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3738      	adds	r7, #56	@ 0x38
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10b      	bne.n	800a822 <vQueueDelete+0x2a>
	__asm volatile
 800a80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	60bb      	str	r3, [r7, #8]
}
 800a81c:	bf00      	nop
 800a81e:	bf00      	nop
 800a820:	e7fd      	b.n	800a81e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f000 f934 	bl	800aa90 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d102      	bne.n	800a838 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f001 fc78 	bl	800c128 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a838:	bf00      	nop
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d006      	beq.n	800a85e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f1c3 0307 	rsb	r3, r3, #7
 800a85a:	60fb      	str	r3, [r7, #12]
 800a85c:	e001      	b.n	800a862 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a85e:	2300      	movs	r3, #0
 800a860:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a862:	68fb      	ldr	r3, [r7, #12]
	}
 800a864:	4618      	mov	r0, r3
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a87c:	2300      	movs	r3, #0
 800a87e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a884:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10d      	bne.n	800a8aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d14d      	bne.n	800a932 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 ff8e 	bl	800b7bc <xTaskPriorityDisinherit>
 800a8a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	609a      	str	r2, [r3, #8]
 800a8a8:	e043      	b.n	800a932 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d119      	bne.n	800a8e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6858      	ldr	r0, [r3, #4]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	68b9      	ldr	r1, [r7, #8]
 800a8bc:	f002 fd65 	bl	800d38a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	685a      	ldr	r2, [r3, #4]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8c8:	441a      	add	r2, r3
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	685a      	ldr	r2, [r3, #4]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d32b      	bcc.n	800a932 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	605a      	str	r2, [r3, #4]
 800a8e2:	e026      	b.n	800a932 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	68d8      	ldr	r0, [r3, #12]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	68b9      	ldr	r1, [r7, #8]
 800a8f0:	f002 fd4b 	bl	800d38a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	68da      	ldr	r2, [r3, #12]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8fc:	425b      	negs	r3, r3
 800a8fe:	441a      	add	r2, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	68da      	ldr	r2, [r3, #12]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d207      	bcs.n	800a920 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	689a      	ldr	r2, [r3, #8]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a918:	425b      	negs	r3, r3
 800a91a:	441a      	add	r2, r3
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b02      	cmp	r3, #2
 800a924:	d105      	bne.n	800a932 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d002      	beq.n	800a932 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	3b01      	subs	r3, #1
 800a930:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	1c5a      	adds	r2, r3, #1
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a93a:	697b      	ldr	r3, [r7, #20]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3718      	adds	r7, #24
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a952:	2b00      	cmp	r3, #0
 800a954:	d018      	beq.n	800a988 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	68da      	ldr	r2, [r3, #12]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a95e:	441a      	add	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68da      	ldr	r2, [r3, #12]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d303      	bcc.n	800a978 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	68d9      	ldr	r1, [r3, #12]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a980:	461a      	mov	r2, r3
 800a982:	6838      	ldr	r0, [r7, #0]
 800a984:	f002 fd01 	bl	800d38a <memcpy>
	}
}
 800a988:	bf00      	nop
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a998:	f001 f9d6 	bl	800bd48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9a4:	e011      	b.n	800a9ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d012      	beq.n	800a9d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	3324      	adds	r3, #36	@ 0x24
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f000 fcae 	bl	800b314 <xTaskRemoveFromEventList>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a9be:	f000 fd87 	bl	800b4d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	dce9      	bgt.n	800a9a6 <prvUnlockQueue+0x16>
 800a9d2:	e000      	b.n	800a9d6 <prvUnlockQueue+0x46>
					break;
 800a9d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	22ff      	movs	r2, #255	@ 0xff
 800a9da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a9de:	f001 f9e5 	bl	800bdac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a9e2:	f001 f9b1 	bl	800bd48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9ee:	e011      	b.n	800aa14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d012      	beq.n	800aa1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	3310      	adds	r3, #16
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 fc89 	bl	800b314 <xTaskRemoveFromEventList>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aa08:	f000 fd62 	bl	800b4d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aa0c:	7bbb      	ldrb	r3, [r7, #14]
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	dce9      	bgt.n	800a9f0 <prvUnlockQueue+0x60>
 800aa1c:	e000      	b.n	800aa20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	22ff      	movs	r2, #255	@ 0xff
 800aa24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aa28:	f001 f9c0 	bl	800bdac <vPortExitCritical>
}
 800aa2c:	bf00      	nop
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa3c:	f001 f984 	bl	800bd48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d102      	bne.n	800aa4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	60fb      	str	r3, [r7, #12]
 800aa4c:	e001      	b.n	800aa52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa52:	f001 f9ab 	bl	800bdac <vPortExitCritical>

	return xReturn;
 800aa56:	68fb      	ldr	r3, [r7, #12]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa68:	f001 f96e 	bl	800bd48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d102      	bne.n	800aa7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	60fb      	str	r3, [r7, #12]
 800aa7c:	e001      	b.n	800aa82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa82:	f001 f993 	bl	800bdac <vPortExitCritical>

	return xReturn;
 800aa86:	68fb      	ldr	r3, [r7, #12]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa98:	2300      	movs	r3, #0
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	e016      	b.n	800aacc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aa9e:	4a10      	ldr	r2, [pc, #64]	@ (800aae0 <vQueueUnregisterQueue+0x50>)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	4413      	add	r3, r2
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d10b      	bne.n	800aac6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aaae:	4a0c      	ldr	r2, [pc, #48]	@ (800aae0 <vQueueUnregisterQueue+0x50>)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2100      	movs	r1, #0
 800aab4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aab8:	4a09      	ldr	r2, [pc, #36]	@ (800aae0 <vQueueUnregisterQueue+0x50>)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	00db      	lsls	r3, r3, #3
 800aabe:	4413      	add	r3, r2
 800aac0:	2200      	movs	r2, #0
 800aac2:	605a      	str	r2, [r3, #4]
				break;
 800aac4:	e006      	b.n	800aad4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3301      	adds	r3, #1
 800aaca:	60fb      	str	r3, [r7, #12]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2b07      	cmp	r3, #7
 800aad0:	d9e5      	bls.n	800aa9e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aad2:	bf00      	nop
 800aad4:	bf00      	nop
 800aad6:	3714      	adds	r7, #20
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr
 800aae0:	20000e24 	.word	0x20000e24

0800aae4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08e      	sub	sp, #56	@ 0x38
 800aae8:	af04      	add	r7, sp, #16
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
 800aaf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aaf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d10b      	bne.n	800ab10 <xTaskCreateStatic+0x2c>
	__asm volatile
 800aaf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	623b      	str	r3, [r7, #32]
}
 800ab0a:	bf00      	nop
 800ab0c:	bf00      	nop
 800ab0e:	e7fd      	b.n	800ab0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10b      	bne.n	800ab2e <xTaskCreateStatic+0x4a>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	61fb      	str	r3, [r7, #28]
}
 800ab28:	bf00      	nop
 800ab2a:	bf00      	nop
 800ab2c:	e7fd      	b.n	800ab2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab2e:	2354      	movs	r3, #84	@ 0x54
 800ab30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	2b54      	cmp	r3, #84	@ 0x54
 800ab36:	d00b      	beq.n	800ab50 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ab38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab3c:	f383 8811 	msr	BASEPRI, r3
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	61bb      	str	r3, [r7, #24]
}
 800ab4a:	bf00      	nop
 800ab4c:	bf00      	nop
 800ab4e:	e7fd      	b.n	800ab4c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d01e      	beq.n	800ab96 <xTaskCreateStatic+0xb2>
 800ab58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d01b      	beq.n	800ab96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab60:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ab66:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab70:	2300      	movs	r3, #0
 800ab72:	9303      	str	r3, [sp, #12]
 800ab74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab76:	9302      	str	r3, [sp, #8]
 800ab78:	f107 0314 	add.w	r3, r7, #20
 800ab7c:	9301      	str	r3, [sp, #4]
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	68b9      	ldr	r1, [r7, #8]
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f000 f850 	bl	800ac2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ab90:	f000 f8d6 	bl	800ad40 <prvAddNewTaskToReadyList>
 800ab94:	e001      	b.n	800ab9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ab96:	2300      	movs	r3, #0
 800ab98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab9a:	697b      	ldr	r3, [r7, #20]
	}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3728      	adds	r7, #40	@ 0x28
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b08c      	sub	sp, #48	@ 0x30
 800aba8:	af04      	add	r7, sp, #16
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	603b      	str	r3, [r7, #0]
 800abb0:	4613      	mov	r3, r2
 800abb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800abb4:	88fb      	ldrh	r3, [r7, #6]
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4618      	mov	r0, r3
 800abba:	f001 f9e7 	bl	800bf8c <pvPortMalloc>
 800abbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00e      	beq.n	800abe4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800abc6:	2054      	movs	r0, #84	@ 0x54
 800abc8:	f001 f9e0 	bl	800bf8c <pvPortMalloc>
 800abcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d003      	beq.n	800abdc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	631a      	str	r2, [r3, #48]	@ 0x30
 800abda:	e005      	b.n	800abe8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abdc:	6978      	ldr	r0, [r7, #20]
 800abde:	f001 faa3 	bl	800c128 <vPortFree>
 800abe2:	e001      	b.n	800abe8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abe4:	2300      	movs	r3, #0
 800abe6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d017      	beq.n	800ac1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abf6:	88fa      	ldrh	r2, [r7, #6]
 800abf8:	2300      	movs	r3, #0
 800abfa:	9303      	str	r3, [sp, #12]
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	9302      	str	r3, [sp, #8]
 800ac00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac02:	9301      	str	r3, [sp, #4]
 800ac04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac06:	9300      	str	r3, [sp, #0]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	68b9      	ldr	r1, [r7, #8]
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f000 f80e 	bl	800ac2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac12:	69f8      	ldr	r0, [r7, #28]
 800ac14:	f000 f894 	bl	800ad40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	61bb      	str	r3, [r7, #24]
 800ac1c:	e002      	b.n	800ac24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac24:	69bb      	ldr	r3, [r7, #24]
	}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3720      	adds	r7, #32
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b088      	sub	sp, #32
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	60f8      	str	r0, [r7, #12]
 800ac36:	60b9      	str	r1, [r7, #8]
 800ac38:	607a      	str	r2, [r7, #4]
 800ac3a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac46:	3b01      	subs	r3, #1
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	f023 0307 	bic.w	r3, r3, #7
 800ac54:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	f003 0307 	and.w	r3, r3, #7
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00b      	beq.n	800ac78 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	617b      	str	r3, [r7, #20]
}
 800ac72:	bf00      	nop
 800ac74:	bf00      	nop
 800ac76:	e7fd      	b.n	800ac74 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d01f      	beq.n	800acbe <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac7e:	2300      	movs	r3, #0
 800ac80:	61fb      	str	r3, [r7, #28]
 800ac82:	e012      	b.n	800acaa <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	4413      	add	r3, r2
 800ac8a:	7819      	ldrb	r1, [r3, #0]
 800ac8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	4413      	add	r3, r2
 800ac92:	3334      	adds	r3, #52	@ 0x34
 800ac94:	460a      	mov	r2, r1
 800ac96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d006      	beq.n	800acb2 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	3301      	adds	r3, #1
 800aca8:	61fb      	str	r3, [r7, #28]
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	2b0f      	cmp	r3, #15
 800acae:	d9e9      	bls.n	800ac84 <prvInitialiseNewTask+0x56>
 800acb0:	e000      	b.n	800acb4 <prvInitialiseNewTask+0x86>
			{
				break;
 800acb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800acb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800acbc:	e003      	b.n	800acc6 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800acbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800acc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc8:	2b06      	cmp	r3, #6
 800acca:	d901      	bls.n	800acd0 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800accc:	2306      	movs	r3, #6
 800acce:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800acd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acd4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800acd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acda:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800acdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acde:	2200      	movs	r2, #0
 800ace0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ace2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace4:	3304      	adds	r3, #4
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7ff f88b 	bl	8009e02 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acee:	3318      	adds	r3, #24
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7ff f886 	bl	8009e02 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acfa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acfe:	f1c3 0207 	rsb	r2, r3, #7
 800ad02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad0a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0e:	2200      	movs	r2, #0
 800ad10:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	68f9      	ldr	r1, [r7, #12]
 800ad1e:	69b8      	ldr	r0, [r7, #24]
 800ad20:	f000 fede 	bl	800bae0 <pxPortInitialiseStack>
 800ad24:	4602      	mov	r2, r0
 800ad26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad36:	bf00      	nop
 800ad38:	3720      	adds	r7, #32
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
	...

0800ad40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad48:	f000 fffe 	bl	800bd48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad4c:	4b2a      	ldr	r3, [pc, #168]	@ (800adf8 <prvAddNewTaskToReadyList+0xb8>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	3301      	adds	r3, #1
 800ad52:	4a29      	ldr	r2, [pc, #164]	@ (800adf8 <prvAddNewTaskToReadyList+0xb8>)
 800ad54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad56:	4b29      	ldr	r3, [pc, #164]	@ (800adfc <prvAddNewTaskToReadyList+0xbc>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d109      	bne.n	800ad72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad5e:	4a27      	ldr	r2, [pc, #156]	@ (800adfc <prvAddNewTaskToReadyList+0xbc>)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad64:	4b24      	ldr	r3, [pc, #144]	@ (800adf8 <prvAddNewTaskToReadyList+0xb8>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d110      	bne.n	800ad8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ad6c:	f000 fbd4 	bl	800b518 <prvInitialiseTaskLists>
 800ad70:	e00d      	b.n	800ad8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ad72:	4b23      	ldr	r3, [pc, #140]	@ (800ae00 <prvAddNewTaskToReadyList+0xc0>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d109      	bne.n	800ad8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad7a:	4b20      	ldr	r3, [pc, #128]	@ (800adfc <prvAddNewTaskToReadyList+0xbc>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d802      	bhi.n	800ad8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ad88:	4a1c      	ldr	r2, [pc, #112]	@ (800adfc <prvAddNewTaskToReadyList+0xbc>)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ad8e:	4b1d      	ldr	r3, [pc, #116]	@ (800ae04 <prvAddNewTaskToReadyList+0xc4>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	3301      	adds	r3, #1
 800ad94:	4a1b      	ldr	r2, [pc, #108]	@ (800ae04 <prvAddNewTaskToReadyList+0xc4>)
 800ad96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	409a      	lsls	r2, r3
 800ada0:	4b19      	ldr	r3, [pc, #100]	@ (800ae08 <prvAddNewTaskToReadyList+0xc8>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4313      	orrs	r3, r2
 800ada6:	4a18      	ldr	r2, [pc, #96]	@ (800ae08 <prvAddNewTaskToReadyList+0xc8>)
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adae:	4613      	mov	r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	4413      	add	r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4a15      	ldr	r2, [pc, #84]	@ (800ae0c <prvAddNewTaskToReadyList+0xcc>)
 800adb8:	441a      	add	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3304      	adds	r3, #4
 800adbe:	4619      	mov	r1, r3
 800adc0:	4610      	mov	r0, r2
 800adc2:	f7ff f82b 	bl	8009e1c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800adc6:	f000 fff1 	bl	800bdac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800adca:	4b0d      	ldr	r3, [pc, #52]	@ (800ae00 <prvAddNewTaskToReadyList+0xc0>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00e      	beq.n	800adf0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800add2:	4b0a      	ldr	r3, [pc, #40]	@ (800adfc <prvAddNewTaskToReadyList+0xbc>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800addc:	429a      	cmp	r2, r3
 800adde:	d207      	bcs.n	800adf0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ade0:	4b0b      	ldr	r3, [pc, #44]	@ (800ae10 <prvAddNewTaskToReadyList+0xd0>)
 800ade2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ade6:	601a      	str	r2, [r3, #0]
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adf0:	bf00      	nop
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}
 800adf8:	20000f64 	.word	0x20000f64
 800adfc:	20000e64 	.word	0x20000e64
 800ae00:	20000f70 	.word	0x20000f70
 800ae04:	20000f80 	.word	0x20000f80
 800ae08:	20000f6c 	.word	0x20000f6c
 800ae0c:	20000e68 	.word	0x20000e68
 800ae10:	e000ed04 	.word	0xe000ed04

0800ae14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d018      	beq.n	800ae58 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae26:	4b14      	ldr	r3, [pc, #80]	@ (800ae78 <vTaskDelay+0x64>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00b      	beq.n	800ae46 <vTaskDelay+0x32>
	__asm volatile
 800ae2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	60bb      	str	r3, [r7, #8]
}
 800ae40:	bf00      	nop
 800ae42:	bf00      	nop
 800ae44:	e7fd      	b.n	800ae42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ae46:	f000 f87d 	bl	800af44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fde1 	bl	800ba14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae52:	f000 f885 	bl	800af60 <xTaskResumeAll>
 800ae56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d107      	bne.n	800ae6e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ae5e:	4b07      	ldr	r3, [pc, #28]	@ (800ae7c <vTaskDelay+0x68>)
 800ae60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae64:	601a      	str	r2, [r3, #0]
 800ae66:	f3bf 8f4f 	dsb	sy
 800ae6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae6e:	bf00      	nop
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	20000f8c 	.word	0x20000f8c
 800ae7c:	e000ed04 	.word	0xe000ed04

0800ae80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b08a      	sub	sp, #40	@ 0x28
 800ae84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ae8e:	463a      	mov	r2, r7
 800ae90:	1d39      	adds	r1, r7, #4
 800ae92:	f107 0308 	add.w	r3, r7, #8
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7f6 fe5c 	bl	8001b54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	9202      	str	r2, [sp, #8]
 800aea4:	9301      	str	r3, [sp, #4]
 800aea6:	2300      	movs	r3, #0
 800aea8:	9300      	str	r3, [sp, #0]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	460a      	mov	r2, r1
 800aeae:	491f      	ldr	r1, [pc, #124]	@ (800af2c <vTaskStartScheduler+0xac>)
 800aeb0:	481f      	ldr	r0, [pc, #124]	@ (800af30 <vTaskStartScheduler+0xb0>)
 800aeb2:	f7ff fe17 	bl	800aae4 <xTaskCreateStatic>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	4a1e      	ldr	r2, [pc, #120]	@ (800af34 <vTaskStartScheduler+0xb4>)
 800aeba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aebc:	4b1d      	ldr	r3, [pc, #116]	@ (800af34 <vTaskStartScheduler+0xb4>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aec4:	2301      	movs	r3, #1
 800aec6:	617b      	str	r3, [r7, #20]
 800aec8:	e001      	b.n	800aece <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aeca:	2300      	movs	r3, #0
 800aecc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d116      	bne.n	800af02 <vTaskStartScheduler+0x82>
	__asm volatile
 800aed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	613b      	str	r3, [r7, #16]
}
 800aee6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aee8:	4b13      	ldr	r3, [pc, #76]	@ (800af38 <vTaskStartScheduler+0xb8>)
 800aeea:	f04f 32ff 	mov.w	r2, #4294967295
 800aeee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aef0:	4b12      	ldr	r3, [pc, #72]	@ (800af3c <vTaskStartScheduler+0xbc>)
 800aef2:	2201      	movs	r2, #1
 800aef4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aef6:	4b12      	ldr	r3, [pc, #72]	@ (800af40 <vTaskStartScheduler+0xc0>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aefc:	f000 fe80 	bl	800bc00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af00:	e00f      	b.n	800af22 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af08:	d10b      	bne.n	800af22 <vTaskStartScheduler+0xa2>
	__asm volatile
 800af0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0e:	f383 8811 	msr	BASEPRI, r3
 800af12:	f3bf 8f6f 	isb	sy
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	60fb      	str	r3, [r7, #12]
}
 800af1c:	bf00      	nop
 800af1e:	bf00      	nop
 800af20:	e7fd      	b.n	800af1e <vTaskStartScheduler+0x9e>
}
 800af22:	bf00      	nop
 800af24:	3718      	adds	r7, #24
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	08010e10 	.word	0x08010e10
 800af30:	0800b4e9 	.word	0x0800b4e9
 800af34:	20000f88 	.word	0x20000f88
 800af38:	20000f84 	.word	0x20000f84
 800af3c:	20000f70 	.word	0x20000f70
 800af40:	20000f68 	.word	0x20000f68

0800af44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af44:	b480      	push	{r7}
 800af46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800af48:	4b04      	ldr	r3, [pc, #16]	@ (800af5c <vTaskSuspendAll+0x18>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3301      	adds	r3, #1
 800af4e:	4a03      	ldr	r2, [pc, #12]	@ (800af5c <vTaskSuspendAll+0x18>)
 800af50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800af52:	bf00      	nop
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	20000f8c 	.word	0x20000f8c

0800af60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800af66:	2300      	movs	r3, #0
 800af68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800af6a:	2300      	movs	r3, #0
 800af6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800af6e:	4b42      	ldr	r3, [pc, #264]	@ (800b078 <xTaskResumeAll+0x118>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10b      	bne.n	800af8e <xTaskResumeAll+0x2e>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	603b      	str	r3, [r7, #0]
}
 800af88:	bf00      	nop
 800af8a:	bf00      	nop
 800af8c:	e7fd      	b.n	800af8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800af8e:	f000 fedb 	bl	800bd48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800af92:	4b39      	ldr	r3, [pc, #228]	@ (800b078 <xTaskResumeAll+0x118>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	3b01      	subs	r3, #1
 800af98:	4a37      	ldr	r2, [pc, #220]	@ (800b078 <xTaskResumeAll+0x118>)
 800af9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af9c:	4b36      	ldr	r3, [pc, #216]	@ (800b078 <xTaskResumeAll+0x118>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d161      	bne.n	800b068 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800afa4:	4b35      	ldr	r3, [pc, #212]	@ (800b07c <xTaskResumeAll+0x11c>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d05d      	beq.n	800b068 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800afac:	e02e      	b.n	800b00c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afae:	4b34      	ldr	r3, [pc, #208]	@ (800b080 <xTaskResumeAll+0x120>)
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	3318      	adds	r3, #24
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fe ff8b 	bl	8009ed6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	3304      	adds	r3, #4
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fe ff86 	bl	8009ed6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afce:	2201      	movs	r2, #1
 800afd0:	409a      	lsls	r2, r3
 800afd2:	4b2c      	ldr	r3, [pc, #176]	@ (800b084 <xTaskResumeAll+0x124>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	4a2a      	ldr	r2, [pc, #168]	@ (800b084 <xTaskResumeAll+0x124>)
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afe0:	4613      	mov	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	4413      	add	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4a27      	ldr	r2, [pc, #156]	@ (800b088 <xTaskResumeAll+0x128>)
 800afea:	441a      	add	r2, r3
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	3304      	adds	r3, #4
 800aff0:	4619      	mov	r1, r3
 800aff2:	4610      	mov	r0, r2
 800aff4:	f7fe ff12 	bl	8009e1c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800affc:	4b23      	ldr	r3, [pc, #140]	@ (800b08c <xTaskResumeAll+0x12c>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b002:	429a      	cmp	r2, r3
 800b004:	d302      	bcc.n	800b00c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b006:	4b22      	ldr	r3, [pc, #136]	@ (800b090 <xTaskResumeAll+0x130>)
 800b008:	2201      	movs	r2, #1
 800b00a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b00c:	4b1c      	ldr	r3, [pc, #112]	@ (800b080 <xTaskResumeAll+0x120>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1cc      	bne.n	800afae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d001      	beq.n	800b01e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b01a:	f000 fb1b 	bl	800b654 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b01e:	4b1d      	ldr	r3, [pc, #116]	@ (800b094 <xTaskResumeAll+0x134>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d010      	beq.n	800b04c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b02a:	f000 f837 	bl	800b09c <xTaskIncrementTick>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b034:	4b16      	ldr	r3, [pc, #88]	@ (800b090 <xTaskResumeAll+0x130>)
 800b036:	2201      	movs	r2, #1
 800b038:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	3b01      	subs	r3, #1
 800b03e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1f1      	bne.n	800b02a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b046:	4b13      	ldr	r3, [pc, #76]	@ (800b094 <xTaskResumeAll+0x134>)
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b04c:	4b10      	ldr	r3, [pc, #64]	@ (800b090 <xTaskResumeAll+0x130>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d009      	beq.n	800b068 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b054:	2301      	movs	r3, #1
 800b056:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b058:	4b0f      	ldr	r3, [pc, #60]	@ (800b098 <xTaskResumeAll+0x138>)
 800b05a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b05e:	601a      	str	r2, [r3, #0]
 800b060:	f3bf 8f4f 	dsb	sy
 800b064:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b068:	f000 fea0 	bl	800bdac <vPortExitCritical>

	return xAlreadyYielded;
 800b06c:	68bb      	ldr	r3, [r7, #8]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	20000f8c 	.word	0x20000f8c
 800b07c:	20000f64 	.word	0x20000f64
 800b080:	20000f24 	.word	0x20000f24
 800b084:	20000f6c 	.word	0x20000f6c
 800b088:	20000e68 	.word	0x20000e68
 800b08c:	20000e64 	.word	0x20000e64
 800b090:	20000f78 	.word	0x20000f78
 800b094:	20000f74 	.word	0x20000f74
 800b098:	e000ed04 	.word	0xe000ed04

0800b09c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0a6:	4b4f      	ldr	r3, [pc, #316]	@ (800b1e4 <xTaskIncrementTick+0x148>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f040 808f 	bne.w	800b1ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b0b0:	4b4d      	ldr	r3, [pc, #308]	@ (800b1e8 <xTaskIncrementTick+0x14c>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b0b8:	4a4b      	ldr	r2, [pc, #300]	@ (800b1e8 <xTaskIncrementTick+0x14c>)
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d121      	bne.n	800b108 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b0c4:	4b49      	ldr	r3, [pc, #292]	@ (800b1ec <xTaskIncrementTick+0x150>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00b      	beq.n	800b0e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	603b      	str	r3, [r7, #0]
}
 800b0e0:	bf00      	nop
 800b0e2:	bf00      	nop
 800b0e4:	e7fd      	b.n	800b0e2 <xTaskIncrementTick+0x46>
 800b0e6:	4b41      	ldr	r3, [pc, #260]	@ (800b1ec <xTaskIncrementTick+0x150>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	4b40      	ldr	r3, [pc, #256]	@ (800b1f0 <xTaskIncrementTick+0x154>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a3e      	ldr	r2, [pc, #248]	@ (800b1ec <xTaskIncrementTick+0x150>)
 800b0f2:	6013      	str	r3, [r2, #0]
 800b0f4:	4a3e      	ldr	r2, [pc, #248]	@ (800b1f0 <xTaskIncrementTick+0x154>)
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6013      	str	r3, [r2, #0]
 800b0fa:	4b3e      	ldr	r3, [pc, #248]	@ (800b1f4 <xTaskIncrementTick+0x158>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	3301      	adds	r3, #1
 800b100:	4a3c      	ldr	r2, [pc, #240]	@ (800b1f4 <xTaskIncrementTick+0x158>)
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	f000 faa6 	bl	800b654 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b108:	4b3b      	ldr	r3, [pc, #236]	@ (800b1f8 <xTaskIncrementTick+0x15c>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	693a      	ldr	r2, [r7, #16]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d348      	bcc.n	800b1a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b112:	4b36      	ldr	r3, [pc, #216]	@ (800b1ec <xTaskIncrementTick+0x150>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d104      	bne.n	800b126 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b11c:	4b36      	ldr	r3, [pc, #216]	@ (800b1f8 <xTaskIncrementTick+0x15c>)
 800b11e:	f04f 32ff 	mov.w	r2, #4294967295
 800b122:	601a      	str	r2, [r3, #0]
					break;
 800b124:	e03e      	b.n	800b1a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b126:	4b31      	ldr	r3, [pc, #196]	@ (800b1ec <xTaskIncrementTick+0x150>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b136:	693a      	ldr	r2, [r7, #16]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d203      	bcs.n	800b146 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b13e:	4a2e      	ldr	r2, [pc, #184]	@ (800b1f8 <xTaskIncrementTick+0x15c>)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b144:	e02e      	b.n	800b1a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	3304      	adds	r3, #4
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fe fec3 	bl	8009ed6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b154:	2b00      	cmp	r3, #0
 800b156:	d004      	beq.n	800b162 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	3318      	adds	r3, #24
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fe feba 	bl	8009ed6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b166:	2201      	movs	r2, #1
 800b168:	409a      	lsls	r2, r3
 800b16a:	4b24      	ldr	r3, [pc, #144]	@ (800b1fc <xTaskIncrementTick+0x160>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4313      	orrs	r3, r2
 800b170:	4a22      	ldr	r2, [pc, #136]	@ (800b1fc <xTaskIncrementTick+0x160>)
 800b172:	6013      	str	r3, [r2, #0]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b178:	4613      	mov	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4413      	add	r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	4a1f      	ldr	r2, [pc, #124]	@ (800b200 <xTaskIncrementTick+0x164>)
 800b182:	441a      	add	r2, r3
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	3304      	adds	r3, #4
 800b188:	4619      	mov	r1, r3
 800b18a:	4610      	mov	r0, r2
 800b18c:	f7fe fe46 	bl	8009e1c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b194:	4b1b      	ldr	r3, [pc, #108]	@ (800b204 <xTaskIncrementTick+0x168>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d3b9      	bcc.n	800b112 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1a2:	e7b6      	b.n	800b112 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b1a4:	4b17      	ldr	r3, [pc, #92]	@ (800b204 <xTaskIncrementTick+0x168>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1aa:	4915      	ldr	r1, [pc, #84]	@ (800b200 <xTaskIncrementTick+0x164>)
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	440b      	add	r3, r1
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d901      	bls.n	800b1c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b1c0:	4b11      	ldr	r3, [pc, #68]	@ (800b208 <xTaskIncrementTick+0x16c>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d007      	beq.n	800b1d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	617b      	str	r3, [r7, #20]
 800b1cc:	e004      	b.n	800b1d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b1ce:	4b0f      	ldr	r3, [pc, #60]	@ (800b20c <xTaskIncrementTick+0x170>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	4a0d      	ldr	r2, [pc, #52]	@ (800b20c <xTaskIncrementTick+0x170>)
 800b1d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b1d8:	697b      	ldr	r3, [r7, #20]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3718      	adds	r7, #24
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20000f8c 	.word	0x20000f8c
 800b1e8:	20000f68 	.word	0x20000f68
 800b1ec:	20000f1c 	.word	0x20000f1c
 800b1f0:	20000f20 	.word	0x20000f20
 800b1f4:	20000f7c 	.word	0x20000f7c
 800b1f8:	20000f84 	.word	0x20000f84
 800b1fc:	20000f6c 	.word	0x20000f6c
 800b200:	20000e68 	.word	0x20000e68
 800b204:	20000e64 	.word	0x20000e64
 800b208:	20000f78 	.word	0x20000f78
 800b20c:	20000f74 	.word	0x20000f74

0800b210 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b210:	b480      	push	{r7}
 800b212:	b087      	sub	sp, #28
 800b214:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b216:	4b27      	ldr	r3, [pc, #156]	@ (800b2b4 <vTaskSwitchContext+0xa4>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d003      	beq.n	800b226 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b21e:	4b26      	ldr	r3, [pc, #152]	@ (800b2b8 <vTaskSwitchContext+0xa8>)
 800b220:	2201      	movs	r2, #1
 800b222:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b224:	e040      	b.n	800b2a8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b226:	4b24      	ldr	r3, [pc, #144]	@ (800b2b8 <vTaskSwitchContext+0xa8>)
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b22c:	4b23      	ldr	r3, [pc, #140]	@ (800b2bc <vTaskSwitchContext+0xac>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	fab3 f383 	clz	r3, r3
 800b238:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b23a:	7afb      	ldrb	r3, [r7, #11]
 800b23c:	f1c3 031f 	rsb	r3, r3, #31
 800b240:	617b      	str	r3, [r7, #20]
 800b242:	491f      	ldr	r1, [pc, #124]	@ (800b2c0 <vTaskSwitchContext+0xb0>)
 800b244:	697a      	ldr	r2, [r7, #20]
 800b246:	4613      	mov	r3, r2
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	4413      	add	r3, r2
 800b24c:	009b      	lsls	r3, r3, #2
 800b24e:	440b      	add	r3, r1
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d10b      	bne.n	800b26e <vTaskSwitchContext+0x5e>
	__asm volatile
 800b256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	607b      	str	r3, [r7, #4]
}
 800b268:	bf00      	nop
 800b26a:	bf00      	nop
 800b26c:	e7fd      	b.n	800b26a <vTaskSwitchContext+0x5a>
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	4613      	mov	r3, r2
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	4a11      	ldr	r2, [pc, #68]	@ (800b2c0 <vTaskSwitchContext+0xb0>)
 800b27a:	4413      	add	r3, r2
 800b27c:	613b      	str	r3, [r7, #16]
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	685a      	ldr	r2, [r3, #4]
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	605a      	str	r2, [r3, #4]
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	685a      	ldr	r2, [r3, #4]
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	3308      	adds	r3, #8
 800b290:	429a      	cmp	r2, r3
 800b292:	d104      	bne.n	800b29e <vTaskSwitchContext+0x8e>
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	685a      	ldr	r2, [r3, #4]
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	605a      	str	r2, [r3, #4]
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	4a07      	ldr	r2, [pc, #28]	@ (800b2c4 <vTaskSwitchContext+0xb4>)
 800b2a6:	6013      	str	r3, [r2, #0]
}
 800b2a8:	bf00      	nop
 800b2aa:	371c      	adds	r7, #28
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr
 800b2b4:	20000f8c 	.word	0x20000f8c
 800b2b8:	20000f78 	.word	0x20000f78
 800b2bc:	20000f6c 	.word	0x20000f6c
 800b2c0:	20000e68 	.word	0x20000e68
 800b2c4:	20000e64 	.word	0x20000e64

0800b2c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10b      	bne.n	800b2f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	60fb      	str	r3, [r7, #12]
}
 800b2ea:	bf00      	nop
 800b2ec:	bf00      	nop
 800b2ee:	e7fd      	b.n	800b2ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2f0:	4b07      	ldr	r3, [pc, #28]	@ (800b310 <vTaskPlaceOnEventList+0x48>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3318      	adds	r3, #24
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f7fe fdb3 	bl	8009e64 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b2fe:	2101      	movs	r1, #1
 800b300:	6838      	ldr	r0, [r7, #0]
 800b302:	f000 fb87 	bl	800ba14 <prvAddCurrentTaskToDelayedList>
}
 800b306:	bf00      	nop
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	20000e64 	.word	0x20000e64

0800b314 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b086      	sub	sp, #24
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d10b      	bne.n	800b342 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b32e:	f383 8811 	msr	BASEPRI, r3
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	60fb      	str	r3, [r7, #12]
}
 800b33c:	bf00      	nop
 800b33e:	bf00      	nop
 800b340:	e7fd      	b.n	800b33e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	3318      	adds	r3, #24
 800b346:	4618      	mov	r0, r3
 800b348:	f7fe fdc5 	bl	8009ed6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b34c:	4b1d      	ldr	r3, [pc, #116]	@ (800b3c4 <xTaskRemoveFromEventList+0xb0>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d11c      	bne.n	800b38e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	3304      	adds	r3, #4
 800b358:	4618      	mov	r0, r3
 800b35a:	f7fe fdbc 	bl	8009ed6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b362:	2201      	movs	r2, #1
 800b364:	409a      	lsls	r2, r3
 800b366:	4b18      	ldr	r3, [pc, #96]	@ (800b3c8 <xTaskRemoveFromEventList+0xb4>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	4a16      	ldr	r2, [pc, #88]	@ (800b3c8 <xTaskRemoveFromEventList+0xb4>)
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b374:	4613      	mov	r3, r2
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4413      	add	r3, r2
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	4a13      	ldr	r2, [pc, #76]	@ (800b3cc <xTaskRemoveFromEventList+0xb8>)
 800b37e:	441a      	add	r2, r3
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	3304      	adds	r3, #4
 800b384:	4619      	mov	r1, r3
 800b386:	4610      	mov	r0, r2
 800b388:	f7fe fd48 	bl	8009e1c <vListInsertEnd>
 800b38c:	e005      	b.n	800b39a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	3318      	adds	r3, #24
 800b392:	4619      	mov	r1, r3
 800b394:	480e      	ldr	r0, [pc, #56]	@ (800b3d0 <xTaskRemoveFromEventList+0xbc>)
 800b396:	f7fe fd41 	bl	8009e1c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b39e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3d4 <xTaskRemoveFromEventList+0xc0>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d905      	bls.n	800b3b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b3d8 <xTaskRemoveFromEventList+0xc4>)
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	601a      	str	r2, [r3, #0]
 800b3b2:	e001      	b.n	800b3b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b3b8:	697b      	ldr	r3, [r7, #20]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3718      	adds	r7, #24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	20000f8c 	.word	0x20000f8c
 800b3c8:	20000f6c 	.word	0x20000f6c
 800b3cc:	20000e68 	.word	0x20000e68
 800b3d0:	20000f24 	.word	0x20000f24
 800b3d4:	20000e64 	.word	0x20000e64
 800b3d8:	20000f78 	.word	0x20000f78

0800b3dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3e4:	4b06      	ldr	r3, [pc, #24]	@ (800b400 <vTaskInternalSetTimeOutState+0x24>)
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3ec:	4b05      	ldr	r3, [pc, #20]	@ (800b404 <vTaskInternalSetTimeOutState+0x28>)
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	605a      	str	r2, [r3, #4]
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr
 800b400:	20000f7c 	.word	0x20000f7c
 800b404:	20000f68 	.word	0x20000f68

0800b408 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b088      	sub	sp, #32
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d10b      	bne.n	800b430 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b41c:	f383 8811 	msr	BASEPRI, r3
 800b420:	f3bf 8f6f 	isb	sy
 800b424:	f3bf 8f4f 	dsb	sy
 800b428:	613b      	str	r3, [r7, #16]
}
 800b42a:	bf00      	nop
 800b42c:	bf00      	nop
 800b42e:	e7fd      	b.n	800b42c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10b      	bne.n	800b44e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	60fb      	str	r3, [r7, #12]
}
 800b448:	bf00      	nop
 800b44a:	bf00      	nop
 800b44c:	e7fd      	b.n	800b44a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b44e:	f000 fc7b 	bl	800bd48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b452:	4b1d      	ldr	r3, [pc, #116]	@ (800b4c8 <xTaskCheckForTimeOut+0xc0>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	69ba      	ldr	r2, [r7, #24]
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b46a:	d102      	bne.n	800b472 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b46c:	2300      	movs	r3, #0
 800b46e:	61fb      	str	r3, [r7, #28]
 800b470:	e023      	b.n	800b4ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	4b15      	ldr	r3, [pc, #84]	@ (800b4cc <xTaskCheckForTimeOut+0xc4>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d007      	beq.n	800b48e <xTaskCheckForTimeOut+0x86>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	69ba      	ldr	r2, [r7, #24]
 800b484:	429a      	cmp	r2, r3
 800b486:	d302      	bcc.n	800b48e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b488:	2301      	movs	r3, #1
 800b48a:	61fb      	str	r3, [r7, #28]
 800b48c:	e015      	b.n	800b4ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	697a      	ldr	r2, [r7, #20]
 800b494:	429a      	cmp	r2, r3
 800b496:	d20b      	bcs.n	800b4b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	1ad2      	subs	r2, r2, r3
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f7ff ff99 	bl	800b3dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	61fb      	str	r3, [r7, #28]
 800b4ae:	e004      	b.n	800b4ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b4ba:	f000 fc77 	bl	800bdac <vPortExitCritical>

	return xReturn;
 800b4be:	69fb      	ldr	r3, [r7, #28]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3720      	adds	r7, #32
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	20000f68 	.word	0x20000f68
 800b4cc:	20000f7c 	.word	0x20000f7c

0800b4d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4d4:	4b03      	ldr	r3, [pc, #12]	@ (800b4e4 <vTaskMissedYield+0x14>)
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	601a      	str	r2, [r3, #0]
}
 800b4da:	bf00      	nop
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr
 800b4e4:	20000f78 	.word	0x20000f78

0800b4e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4f0:	f000 f852 	bl	800b598 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b4f4:	4b06      	ldr	r3, [pc, #24]	@ (800b510 <prvIdleTask+0x28>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d9f9      	bls.n	800b4f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b4fc:	4b05      	ldr	r3, [pc, #20]	@ (800b514 <prvIdleTask+0x2c>)
 800b4fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b502:	601a      	str	r2, [r3, #0]
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b50c:	e7f0      	b.n	800b4f0 <prvIdleTask+0x8>
 800b50e:	bf00      	nop
 800b510:	20000e68 	.word	0x20000e68
 800b514:	e000ed04 	.word	0xe000ed04

0800b518 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b51e:	2300      	movs	r3, #0
 800b520:	607b      	str	r3, [r7, #4]
 800b522:	e00c      	b.n	800b53e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	4613      	mov	r3, r2
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	4413      	add	r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	4a12      	ldr	r2, [pc, #72]	@ (800b578 <prvInitialiseTaskLists+0x60>)
 800b530:	4413      	add	r3, r2
 800b532:	4618      	mov	r0, r3
 800b534:	f7fe fc45 	bl	8009dc2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	3301      	adds	r3, #1
 800b53c:	607b      	str	r3, [r7, #4]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2b06      	cmp	r3, #6
 800b542:	d9ef      	bls.n	800b524 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b544:	480d      	ldr	r0, [pc, #52]	@ (800b57c <prvInitialiseTaskLists+0x64>)
 800b546:	f7fe fc3c 	bl	8009dc2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b54a:	480d      	ldr	r0, [pc, #52]	@ (800b580 <prvInitialiseTaskLists+0x68>)
 800b54c:	f7fe fc39 	bl	8009dc2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b550:	480c      	ldr	r0, [pc, #48]	@ (800b584 <prvInitialiseTaskLists+0x6c>)
 800b552:	f7fe fc36 	bl	8009dc2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b556:	480c      	ldr	r0, [pc, #48]	@ (800b588 <prvInitialiseTaskLists+0x70>)
 800b558:	f7fe fc33 	bl	8009dc2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b55c:	480b      	ldr	r0, [pc, #44]	@ (800b58c <prvInitialiseTaskLists+0x74>)
 800b55e:	f7fe fc30 	bl	8009dc2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b562:	4b0b      	ldr	r3, [pc, #44]	@ (800b590 <prvInitialiseTaskLists+0x78>)
 800b564:	4a05      	ldr	r2, [pc, #20]	@ (800b57c <prvInitialiseTaskLists+0x64>)
 800b566:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b568:	4b0a      	ldr	r3, [pc, #40]	@ (800b594 <prvInitialiseTaskLists+0x7c>)
 800b56a:	4a05      	ldr	r2, [pc, #20]	@ (800b580 <prvInitialiseTaskLists+0x68>)
 800b56c:	601a      	str	r2, [r3, #0]
}
 800b56e:	bf00      	nop
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	20000e68 	.word	0x20000e68
 800b57c:	20000ef4 	.word	0x20000ef4
 800b580:	20000f08 	.word	0x20000f08
 800b584:	20000f24 	.word	0x20000f24
 800b588:	20000f38 	.word	0x20000f38
 800b58c:	20000f50 	.word	0x20000f50
 800b590:	20000f1c 	.word	0x20000f1c
 800b594:	20000f20 	.word	0x20000f20

0800b598 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b59e:	e019      	b.n	800b5d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b5a0:	f000 fbd2 	bl	800bd48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5a4:	4b10      	ldr	r3, [pc, #64]	@ (800b5e8 <prvCheckTasksWaitingTermination+0x50>)
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	3304      	adds	r3, #4
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7fe fc90 	bl	8009ed6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b5ec <prvCheckTasksWaitingTermination+0x54>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	4a0b      	ldr	r2, [pc, #44]	@ (800b5ec <prvCheckTasksWaitingTermination+0x54>)
 800b5be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b5c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b5f0 <prvCheckTasksWaitingTermination+0x58>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	4a0a      	ldr	r2, [pc, #40]	@ (800b5f0 <prvCheckTasksWaitingTermination+0x58>)
 800b5c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5ca:	f000 fbef 	bl	800bdac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f810 	bl	800b5f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5d4:	4b06      	ldr	r3, [pc, #24]	@ (800b5f0 <prvCheckTasksWaitingTermination+0x58>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1e1      	bne.n	800b5a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5dc:	bf00      	nop
 800b5de:	bf00      	nop
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	20000f38 	.word	0x20000f38
 800b5ec:	20000f64 	.word	0x20000f64
 800b5f0:	20000f4c 	.word	0x20000f4c

0800b5f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b602:	2b00      	cmp	r3, #0
 800b604:	d108      	bne.n	800b618 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b60a:	4618      	mov	r0, r3
 800b60c:	f000 fd8c 	bl	800c128 <vPortFree>
				vPortFree( pxTCB );
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fd89 	bl	800c128 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b616:	e019      	b.n	800b64c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d103      	bne.n	800b62a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fd80 	bl	800c128 <vPortFree>
	}
 800b628:	e010      	b.n	800b64c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b630:	2b02      	cmp	r3, #2
 800b632:	d00b      	beq.n	800b64c <prvDeleteTCB+0x58>
	__asm volatile
 800b634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b638:	f383 8811 	msr	BASEPRI, r3
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	60fb      	str	r3, [r7, #12]
}
 800b646:	bf00      	nop
 800b648:	bf00      	nop
 800b64a:	e7fd      	b.n	800b648 <prvDeleteTCB+0x54>
	}
 800b64c:	bf00      	nop
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b65a:	4b0c      	ldr	r3, [pc, #48]	@ (800b68c <prvResetNextTaskUnblockTime+0x38>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d104      	bne.n	800b66e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b664:	4b0a      	ldr	r3, [pc, #40]	@ (800b690 <prvResetNextTaskUnblockTime+0x3c>)
 800b666:	f04f 32ff 	mov.w	r2, #4294967295
 800b66a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b66c:	e008      	b.n	800b680 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b66e:	4b07      	ldr	r3, [pc, #28]	@ (800b68c <prvResetNextTaskUnblockTime+0x38>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	4a04      	ldr	r2, [pc, #16]	@ (800b690 <prvResetNextTaskUnblockTime+0x3c>)
 800b67e:	6013      	str	r3, [r2, #0]
}
 800b680:	bf00      	nop
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	20000f1c 	.word	0x20000f1c
 800b690:	20000f84 	.word	0x20000f84

0800b694 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b69a:	4b0b      	ldr	r3, [pc, #44]	@ (800b6c8 <xTaskGetSchedulerState+0x34>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d102      	bne.n	800b6a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	607b      	str	r3, [r7, #4]
 800b6a6:	e008      	b.n	800b6ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6a8:	4b08      	ldr	r3, [pc, #32]	@ (800b6cc <xTaskGetSchedulerState+0x38>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d102      	bne.n	800b6b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b6b0:	2302      	movs	r3, #2
 800b6b2:	607b      	str	r3, [r7, #4]
 800b6b4:	e001      	b.n	800b6ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b6ba:	687b      	ldr	r3, [r7, #4]
	}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	20000f70 	.word	0x20000f70
 800b6cc:	20000f8c 	.word	0x20000f8c

0800b6d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d05e      	beq.n	800b7a4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ea:	4b31      	ldr	r3, [pc, #196]	@ (800b7b0 <xTaskPriorityInherit+0xe0>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d24e      	bcs.n	800b792 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	db06      	blt.n	800b70a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6fc:	4b2c      	ldr	r3, [pc, #176]	@ (800b7b0 <xTaskPriorityInherit+0xe0>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b702:	f1c3 0207 	rsb	r2, r3, #7
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	6959      	ldr	r1, [r3, #20]
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b712:	4613      	mov	r3, r2
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	4413      	add	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	4a26      	ldr	r2, [pc, #152]	@ (800b7b4 <xTaskPriorityInherit+0xe4>)
 800b71c:	4413      	add	r3, r2
 800b71e:	4299      	cmp	r1, r3
 800b720:	d12f      	bne.n	800b782 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	3304      	adds	r3, #4
 800b726:	4618      	mov	r0, r3
 800b728:	f7fe fbd5 	bl	8009ed6 <uxListRemove>
 800b72c:	4603      	mov	r3, r0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d10a      	bne.n	800b748 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b736:	2201      	movs	r2, #1
 800b738:	fa02 f303 	lsl.w	r3, r2, r3
 800b73c:	43da      	mvns	r2, r3
 800b73e:	4b1e      	ldr	r3, [pc, #120]	@ (800b7b8 <xTaskPriorityInherit+0xe8>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4013      	ands	r3, r2
 800b744:	4a1c      	ldr	r2, [pc, #112]	@ (800b7b8 <xTaskPriorityInherit+0xe8>)
 800b746:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b748:	4b19      	ldr	r3, [pc, #100]	@ (800b7b0 <xTaskPriorityInherit+0xe0>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b756:	2201      	movs	r2, #1
 800b758:	409a      	lsls	r2, r3
 800b75a:	4b17      	ldr	r3, [pc, #92]	@ (800b7b8 <xTaskPriorityInherit+0xe8>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4313      	orrs	r3, r2
 800b760:	4a15      	ldr	r2, [pc, #84]	@ (800b7b8 <xTaskPriorityInherit+0xe8>)
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b768:	4613      	mov	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	4413      	add	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4a10      	ldr	r2, [pc, #64]	@ (800b7b4 <xTaskPriorityInherit+0xe4>)
 800b772:	441a      	add	r2, r3
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	3304      	adds	r3, #4
 800b778:	4619      	mov	r1, r3
 800b77a:	4610      	mov	r0, r2
 800b77c:	f7fe fb4e 	bl	8009e1c <vListInsertEnd>
 800b780:	e004      	b.n	800b78c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b782:	4b0b      	ldr	r3, [pc, #44]	@ (800b7b0 <xTaskPriorityInherit+0xe0>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b78c:	2301      	movs	r3, #1
 800b78e:	60fb      	str	r3, [r7, #12]
 800b790:	e008      	b.n	800b7a4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b796:	4b06      	ldr	r3, [pc, #24]	@ (800b7b0 <xTaskPriorityInherit+0xe0>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d201      	bcs.n	800b7a4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
	}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	20000e64 	.word	0x20000e64
 800b7b4:	20000e68 	.word	0x20000e68
 800b7b8:	20000f6c 	.word	0x20000f6c

0800b7bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d070      	beq.n	800b8b4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b7d2:	4b3b      	ldr	r3, [pc, #236]	@ (800b8c0 <xTaskPriorityDisinherit+0x104>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	693a      	ldr	r2, [r7, #16]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d00b      	beq.n	800b7f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e0:	f383 8811 	msr	BASEPRI, r3
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	60fb      	str	r3, [r7, #12]
}
 800b7ee:	bf00      	nop
 800b7f0:	bf00      	nop
 800b7f2:	e7fd      	b.n	800b7f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10b      	bne.n	800b814 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	60bb      	str	r3, [r7, #8]
}
 800b80e:	bf00      	nop
 800b810:	bf00      	nop
 800b812:	e7fd      	b.n	800b810 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b818:	1e5a      	subs	r2, r3, #1
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b826:	429a      	cmp	r2, r3
 800b828:	d044      	beq.n	800b8b4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d140      	bne.n	800b8b4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	3304      	adds	r3, #4
 800b836:	4618      	mov	r0, r3
 800b838:	f7fe fb4d 	bl	8009ed6 <uxListRemove>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d115      	bne.n	800b86e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b846:	491f      	ldr	r1, [pc, #124]	@ (800b8c4 <xTaskPriorityDisinherit+0x108>)
 800b848:	4613      	mov	r3, r2
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	4413      	add	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	440b      	add	r3, r1
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d10a      	bne.n	800b86e <xTaskPriorityDisinherit+0xb2>
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85c:	2201      	movs	r2, #1
 800b85e:	fa02 f303 	lsl.w	r3, r2, r3
 800b862:	43da      	mvns	r2, r3
 800b864:	4b18      	ldr	r3, [pc, #96]	@ (800b8c8 <xTaskPriorityDisinherit+0x10c>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4013      	ands	r3, r2
 800b86a:	4a17      	ldr	r2, [pc, #92]	@ (800b8c8 <xTaskPriorityDisinherit+0x10c>)
 800b86c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b87a:	f1c3 0207 	rsb	r2, r3, #7
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b886:	2201      	movs	r2, #1
 800b888:	409a      	lsls	r2, r3
 800b88a:	4b0f      	ldr	r3, [pc, #60]	@ (800b8c8 <xTaskPriorityDisinherit+0x10c>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4313      	orrs	r3, r2
 800b890:	4a0d      	ldr	r2, [pc, #52]	@ (800b8c8 <xTaskPriorityDisinherit+0x10c>)
 800b892:	6013      	str	r3, [r2, #0]
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b898:	4613      	mov	r3, r2
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	4413      	add	r3, r2
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4a08      	ldr	r2, [pc, #32]	@ (800b8c4 <xTaskPriorityDisinherit+0x108>)
 800b8a2:	441a      	add	r2, r3
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	4610      	mov	r0, r2
 800b8ac:	f7fe fab6 	bl	8009e1c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8b4:	697b      	ldr	r3, [r7, #20]
	}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3718      	adds	r7, #24
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	20000e64 	.word	0x20000e64
 800b8c4:	20000e68 	.word	0x20000e68
 800b8c8:	20000f6c 	.word	0x20000f6c

0800b8cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b088      	sub	sp, #32
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d079      	beq.n	800b9d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d10b      	bne.n	800b904 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f0:	f383 8811 	msr	BASEPRI, r3
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	60fb      	str	r3, [r7, #12]
}
 800b8fe:	bf00      	nop
 800b900:	bf00      	nop
 800b902:	e7fd      	b.n	800b900 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d902      	bls.n	800b914 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	61fb      	str	r3, [r7, #28]
 800b912:	e002      	b.n	800b91a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b918:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b91e:	69fa      	ldr	r2, [r7, #28]
 800b920:	429a      	cmp	r2, r3
 800b922:	d059      	beq.n	800b9d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d154      	bne.n	800b9d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b92e:	4b2c      	ldr	r3, [pc, #176]	@ (800b9e0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	69ba      	ldr	r2, [r7, #24]
 800b934:	429a      	cmp	r2, r3
 800b936:	d10b      	bne.n	800b950 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b93c:	f383 8811 	msr	BASEPRI, r3
 800b940:	f3bf 8f6f 	isb	sy
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	60bb      	str	r3, [r7, #8]
}
 800b94a:	bf00      	nop
 800b94c:	bf00      	nop
 800b94e:	e7fd      	b.n	800b94c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b954:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	69fa      	ldr	r2, [r7, #28]
 800b95a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	699b      	ldr	r3, [r3, #24]
 800b960:	2b00      	cmp	r3, #0
 800b962:	db04      	blt.n	800b96e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b964:	69fb      	ldr	r3, [r7, #28]
 800b966:	f1c3 0207 	rsb	r2, r3, #7
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	6959      	ldr	r1, [r3, #20]
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	4613      	mov	r3, r2
 800b976:	009b      	lsls	r3, r3, #2
 800b978:	4413      	add	r3, r2
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	4a19      	ldr	r2, [pc, #100]	@ (800b9e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b97e:	4413      	add	r3, r2
 800b980:	4299      	cmp	r1, r3
 800b982:	d129      	bne.n	800b9d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	3304      	adds	r3, #4
 800b988:	4618      	mov	r0, r3
 800b98a:	f7fe faa4 	bl	8009ed6 <uxListRemove>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d10a      	bne.n	800b9aa <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b998:	2201      	movs	r2, #1
 800b99a:	fa02 f303 	lsl.w	r3, r2, r3
 800b99e:	43da      	mvns	r2, r3
 800b9a0:	4b11      	ldr	r3, [pc, #68]	@ (800b9e8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	4a10      	ldr	r2, [pc, #64]	@ (800b9e8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b9a8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	409a      	lsls	r2, r3
 800b9b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b9e8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	4a0b      	ldr	r2, [pc, #44]	@ (800b9e8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800b9ba:	6013      	str	r3, [r2, #0]
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4a06      	ldr	r2, [pc, #24]	@ (800b9e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b9ca:	441a      	add	r2, r3
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	3304      	adds	r3, #4
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	4610      	mov	r0, r2
 800b9d4:	f7fe fa22 	bl	8009e1c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b9d8:	bf00      	nop
 800b9da:	3720      	adds	r7, #32
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	20000e64 	.word	0x20000e64
 800b9e4:	20000e68 	.word	0x20000e68
 800b9e8:	20000f6c 	.word	0x20000f6c

0800b9ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b9ec:	b480      	push	{r7}
 800b9ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b9f0:	4b07      	ldr	r3, [pc, #28]	@ (800ba10 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d004      	beq.n	800ba02 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b9f8:	4b05      	ldr	r3, [pc, #20]	@ (800ba10 <pvTaskIncrementMutexHeldCount+0x24>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b9fe:	3201      	adds	r2, #1
 800ba00:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800ba02:	4b03      	ldr	r3, [pc, #12]	@ (800ba10 <pvTaskIncrementMutexHeldCount+0x24>)
 800ba04:	681b      	ldr	r3, [r3, #0]
	}
 800ba06:	4618      	mov	r0, r3
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr
 800ba10:	20000e64 	.word	0x20000e64

0800ba14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba1e:	4b29      	ldr	r3, [pc, #164]	@ (800bac4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba24:	4b28      	ldr	r3, [pc, #160]	@ (800bac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	3304      	adds	r3, #4
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fe fa53 	bl	8009ed6 <uxListRemove>
 800ba30:	4603      	mov	r3, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10b      	bne.n	800ba4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ba36:	4b24      	ldr	r3, [pc, #144]	@ (800bac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba42:	43da      	mvns	r2, r3
 800ba44:	4b21      	ldr	r3, [pc, #132]	@ (800bacc <prvAddCurrentTaskToDelayedList+0xb8>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4013      	ands	r3, r2
 800ba4a:	4a20      	ldr	r2, [pc, #128]	@ (800bacc <prvAddCurrentTaskToDelayedList+0xb8>)
 800ba4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba54:	d10a      	bne.n	800ba6c <prvAddCurrentTaskToDelayedList+0x58>
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d007      	beq.n	800ba6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba5c:	4b1a      	ldr	r3, [pc, #104]	@ (800bac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	3304      	adds	r3, #4
 800ba62:	4619      	mov	r1, r3
 800ba64:	481a      	ldr	r0, [pc, #104]	@ (800bad0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ba66:	f7fe f9d9 	bl	8009e1c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba6a:	e026      	b.n	800baba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba6c:	68fa      	ldr	r2, [r7, #12]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4413      	add	r3, r2
 800ba72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba74:	4b14      	ldr	r3, [pc, #80]	@ (800bac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68ba      	ldr	r2, [r7, #8]
 800ba7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ba7c:	68ba      	ldr	r2, [r7, #8]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d209      	bcs.n	800ba98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba84:	4b13      	ldr	r3, [pc, #76]	@ (800bad4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	4b0f      	ldr	r3, [pc, #60]	@ (800bac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	3304      	adds	r3, #4
 800ba8e:	4619      	mov	r1, r3
 800ba90:	4610      	mov	r0, r2
 800ba92:	f7fe f9e7 	bl	8009e64 <vListInsert>
}
 800ba96:	e010      	b.n	800baba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba98:	4b0f      	ldr	r3, [pc, #60]	@ (800bad8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	4b0a      	ldr	r3, [pc, #40]	@ (800bac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	3304      	adds	r3, #4
 800baa2:	4619      	mov	r1, r3
 800baa4:	4610      	mov	r0, r2
 800baa6:	f7fe f9dd 	bl	8009e64 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800baaa:	4b0c      	ldr	r3, [pc, #48]	@ (800badc <prvAddCurrentTaskToDelayedList+0xc8>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d202      	bcs.n	800baba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bab4:	4a09      	ldr	r2, [pc, #36]	@ (800badc <prvAddCurrentTaskToDelayedList+0xc8>)
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	6013      	str	r3, [r2, #0]
}
 800baba:	bf00      	nop
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	20000f68 	.word	0x20000f68
 800bac8:	20000e64 	.word	0x20000e64
 800bacc:	20000f6c 	.word	0x20000f6c
 800bad0:	20000f50 	.word	0x20000f50
 800bad4:	20000f20 	.word	0x20000f20
 800bad8:	20000f1c 	.word	0x20000f1c
 800badc:	20000f84 	.word	0x20000f84

0800bae0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bae0:	b480      	push	{r7}
 800bae2:	b085      	sub	sp, #20
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	3b04      	subs	r3, #4
 800baf0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800baf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	3b04      	subs	r3, #4
 800bafe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	f023 0201 	bic.w	r2, r3, #1
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	3b04      	subs	r3, #4
 800bb0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb10:	4a0c      	ldr	r2, [pc, #48]	@ (800bb44 <pxPortInitialiseStack+0x64>)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	3b14      	subs	r3, #20
 800bb1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	3b04      	subs	r3, #4
 800bb26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f06f 0202 	mvn.w	r2, #2
 800bb2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	3b20      	subs	r3, #32
 800bb34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb36:	68fb      	ldr	r3, [r7, #12]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3714      	adds	r7, #20
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr
 800bb44:	0800bb49 	.word	0x0800bb49

0800bb48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb52:	4b13      	ldr	r3, [pc, #76]	@ (800bba0 <prvTaskExitError+0x58>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb5a:	d00b      	beq.n	800bb74 <prvTaskExitError+0x2c>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	60fb      	str	r3, [r7, #12]
}
 800bb6e:	bf00      	nop
 800bb70:	bf00      	nop
 800bb72:	e7fd      	b.n	800bb70 <prvTaskExitError+0x28>
	__asm volatile
 800bb74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb78:	f383 8811 	msr	BASEPRI, r3
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f3bf 8f4f 	dsb	sy
 800bb84:	60bb      	str	r3, [r7, #8]
}
 800bb86:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb88:	bf00      	nop
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d0fc      	beq.n	800bb8a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb90:	bf00      	nop
 800bb92:	bf00      	nop
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	20000030 	.word	0x20000030
	...

0800bbb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bbb0:	4b07      	ldr	r3, [pc, #28]	@ (800bbd0 <pxCurrentTCBConst2>)
 800bbb2:	6819      	ldr	r1, [r3, #0]
 800bbb4:	6808      	ldr	r0, [r1, #0]
 800bbb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbba:	f380 8809 	msr	PSP, r0
 800bbbe:	f3bf 8f6f 	isb	sy
 800bbc2:	f04f 0000 	mov.w	r0, #0
 800bbc6:	f380 8811 	msr	BASEPRI, r0
 800bbca:	4770      	bx	lr
 800bbcc:	f3af 8000 	nop.w

0800bbd0 <pxCurrentTCBConst2>:
 800bbd0:	20000e64 	.word	0x20000e64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bbd4:	bf00      	nop
 800bbd6:	bf00      	nop

0800bbd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bbd8:	4808      	ldr	r0, [pc, #32]	@ (800bbfc <prvPortStartFirstTask+0x24>)
 800bbda:	6800      	ldr	r0, [r0, #0]
 800bbdc:	6800      	ldr	r0, [r0, #0]
 800bbde:	f380 8808 	msr	MSP, r0
 800bbe2:	f04f 0000 	mov.w	r0, #0
 800bbe6:	f380 8814 	msr	CONTROL, r0
 800bbea:	b662      	cpsie	i
 800bbec:	b661      	cpsie	f
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	df00      	svc	0
 800bbf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bbfa:	bf00      	nop
 800bbfc:	e000ed08 	.word	0xe000ed08

0800bc00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc06:	4b47      	ldr	r3, [pc, #284]	@ (800bd24 <xPortStartScheduler+0x124>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a47      	ldr	r2, [pc, #284]	@ (800bd28 <xPortStartScheduler+0x128>)
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	d10b      	bne.n	800bc28 <xPortStartScheduler+0x28>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	613b      	str	r3, [r7, #16]
}
 800bc22:	bf00      	nop
 800bc24:	bf00      	nop
 800bc26:	e7fd      	b.n	800bc24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc28:	4b3e      	ldr	r3, [pc, #248]	@ (800bd24 <xPortStartScheduler+0x124>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4a3f      	ldr	r2, [pc, #252]	@ (800bd2c <xPortStartScheduler+0x12c>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d10b      	bne.n	800bc4a <xPortStartScheduler+0x4a>
	__asm volatile
 800bc32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	60fb      	str	r3, [r7, #12]
}
 800bc44:	bf00      	nop
 800bc46:	bf00      	nop
 800bc48:	e7fd      	b.n	800bc46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc4a:	4b39      	ldr	r3, [pc, #228]	@ (800bd30 <xPortStartScheduler+0x130>)
 800bc4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	22ff      	movs	r2, #255	@ 0xff
 800bc5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc64:	78fb      	ldrb	r3, [r7, #3]
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bc6c:	b2da      	uxtb	r2, r3
 800bc6e:	4b31      	ldr	r3, [pc, #196]	@ (800bd34 <xPortStartScheduler+0x134>)
 800bc70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc72:	4b31      	ldr	r3, [pc, #196]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bc74:	2207      	movs	r2, #7
 800bc76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc78:	e009      	b.n	800bc8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bc7a:	4b2f      	ldr	r3, [pc, #188]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	4a2d      	ldr	r2, [pc, #180]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bc82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc84:	78fb      	ldrb	r3, [r7, #3]
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc8e:	78fb      	ldrb	r3, [r7, #3]
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc96:	2b80      	cmp	r3, #128	@ 0x80
 800bc98:	d0ef      	beq.n	800bc7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc9a:	4b27      	ldr	r3, [pc, #156]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f1c3 0307 	rsb	r3, r3, #7
 800bca2:	2b04      	cmp	r3, #4
 800bca4:	d00b      	beq.n	800bcbe <xPortStartScheduler+0xbe>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	60bb      	str	r3, [r7, #8]
}
 800bcb8:	bf00      	nop
 800bcba:	bf00      	nop
 800bcbc:	e7fd      	b.n	800bcba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bcbe:	4b1e      	ldr	r3, [pc, #120]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	021b      	lsls	r3, r3, #8
 800bcc4:	4a1c      	ldr	r2, [pc, #112]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bcc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bcc8:	4b1b      	ldr	r3, [pc, #108]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bcd0:	4a19      	ldr	r2, [pc, #100]	@ (800bd38 <xPortStartScheduler+0x138>)
 800bcd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	b2da      	uxtb	r2, r3
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bcdc:	4b17      	ldr	r3, [pc, #92]	@ (800bd3c <xPortStartScheduler+0x13c>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a16      	ldr	r2, [pc, #88]	@ (800bd3c <xPortStartScheduler+0x13c>)
 800bce2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bce6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bce8:	4b14      	ldr	r3, [pc, #80]	@ (800bd3c <xPortStartScheduler+0x13c>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a13      	ldr	r2, [pc, #76]	@ (800bd3c <xPortStartScheduler+0x13c>)
 800bcee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bcf2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bcf4:	f000 f8da 	bl	800beac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bcf8:	4b11      	ldr	r3, [pc, #68]	@ (800bd40 <xPortStartScheduler+0x140>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bcfe:	f000 f8f9 	bl	800bef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd02:	4b10      	ldr	r3, [pc, #64]	@ (800bd44 <xPortStartScheduler+0x144>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a0f      	ldr	r2, [pc, #60]	@ (800bd44 <xPortStartScheduler+0x144>)
 800bd08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bd0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd0e:	f7ff ff63 	bl	800bbd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd12:	f7ff fa7d 	bl	800b210 <vTaskSwitchContext>
	prvTaskExitError();
 800bd16:	f7ff ff17 	bl	800bb48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	e000ed00 	.word	0xe000ed00
 800bd28:	410fc271 	.word	0x410fc271
 800bd2c:	410fc270 	.word	0x410fc270
 800bd30:	e000e400 	.word	0xe000e400
 800bd34:	20000f90 	.word	0x20000f90
 800bd38:	20000f94 	.word	0x20000f94
 800bd3c:	e000ed20 	.word	0xe000ed20
 800bd40:	20000030 	.word	0x20000030
 800bd44:	e000ef34 	.word	0xe000ef34

0800bd48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd52:	f383 8811 	msr	BASEPRI, r3
 800bd56:	f3bf 8f6f 	isb	sy
 800bd5a:	f3bf 8f4f 	dsb	sy
 800bd5e:	607b      	str	r3, [r7, #4]
}
 800bd60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd62:	4b10      	ldr	r3, [pc, #64]	@ (800bda4 <vPortEnterCritical+0x5c>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	3301      	adds	r3, #1
 800bd68:	4a0e      	ldr	r2, [pc, #56]	@ (800bda4 <vPortEnterCritical+0x5c>)
 800bd6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd6c:	4b0d      	ldr	r3, [pc, #52]	@ (800bda4 <vPortEnterCritical+0x5c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d110      	bne.n	800bd96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd74:	4b0c      	ldr	r3, [pc, #48]	@ (800bda8 <vPortEnterCritical+0x60>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00b      	beq.n	800bd96 <vPortEnterCritical+0x4e>
	__asm volatile
 800bd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd82:	f383 8811 	msr	BASEPRI, r3
 800bd86:	f3bf 8f6f 	isb	sy
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	603b      	str	r3, [r7, #0]
}
 800bd90:	bf00      	nop
 800bd92:	bf00      	nop
 800bd94:	e7fd      	b.n	800bd92 <vPortEnterCritical+0x4a>
	}
}
 800bd96:	bf00      	nop
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	20000030 	.word	0x20000030
 800bda8:	e000ed04 	.word	0xe000ed04

0800bdac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bdb2:	4b12      	ldr	r3, [pc, #72]	@ (800bdfc <vPortExitCritical+0x50>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d10b      	bne.n	800bdd2 <vPortExitCritical+0x26>
	__asm volatile
 800bdba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	607b      	str	r3, [r7, #4]
}
 800bdcc:	bf00      	nop
 800bdce:	bf00      	nop
 800bdd0:	e7fd      	b.n	800bdce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bdd2:	4b0a      	ldr	r3, [pc, #40]	@ (800bdfc <vPortExitCritical+0x50>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	4a08      	ldr	r2, [pc, #32]	@ (800bdfc <vPortExitCritical+0x50>)
 800bdda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bddc:	4b07      	ldr	r3, [pc, #28]	@ (800bdfc <vPortExitCritical+0x50>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d105      	bne.n	800bdf0 <vPortExitCritical+0x44>
 800bde4:	2300      	movs	r3, #0
 800bde6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	f383 8811 	msr	BASEPRI, r3
}
 800bdee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bdf0:	bf00      	nop
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	20000030 	.word	0x20000030

0800be00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be00:	f3ef 8009 	mrs	r0, PSP
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	4b15      	ldr	r3, [pc, #84]	@ (800be60 <pxCurrentTCBConst>)
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	f01e 0f10 	tst.w	lr, #16
 800be10:	bf08      	it	eq
 800be12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1a:	6010      	str	r0, [r2, #0]
 800be1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800be24:	f380 8811 	msr	BASEPRI, r0
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	f3bf 8f6f 	isb	sy
 800be30:	f7ff f9ee 	bl	800b210 <vTaskSwitchContext>
 800be34:	f04f 0000 	mov.w	r0, #0
 800be38:	f380 8811 	msr	BASEPRI, r0
 800be3c:	bc09      	pop	{r0, r3}
 800be3e:	6819      	ldr	r1, [r3, #0]
 800be40:	6808      	ldr	r0, [r1, #0]
 800be42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be46:	f01e 0f10 	tst.w	lr, #16
 800be4a:	bf08      	it	eq
 800be4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be50:	f380 8809 	msr	PSP, r0
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop
 800be5c:	f3af 8000 	nop.w

0800be60 <pxCurrentTCBConst>:
 800be60:	20000e64 	.word	0x20000e64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be64:	bf00      	nop
 800be66:	bf00      	nop

0800be68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
	__asm volatile
 800be6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be72:	f383 8811 	msr	BASEPRI, r3
 800be76:	f3bf 8f6f 	isb	sy
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	607b      	str	r3, [r7, #4]
}
 800be80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be82:	f7ff f90b 	bl	800b09c <xTaskIncrementTick>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d003      	beq.n	800be94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be8c:	4b06      	ldr	r3, [pc, #24]	@ (800bea8 <SysTick_Handler+0x40>)
 800be8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	2300      	movs	r3, #0
 800be96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	f383 8811 	msr	BASEPRI, r3
}
 800be9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bea0:	bf00      	nop
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	e000ed04 	.word	0xe000ed04

0800beac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800beac:	b480      	push	{r7}
 800beae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800beb0:	4b0b      	ldr	r3, [pc, #44]	@ (800bee0 <vPortSetupTimerInterrupt+0x34>)
 800beb2:	2200      	movs	r2, #0
 800beb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800beb6:	4b0b      	ldr	r3, [pc, #44]	@ (800bee4 <vPortSetupTimerInterrupt+0x38>)
 800beb8:	2200      	movs	r2, #0
 800beba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bebc:	4b0a      	ldr	r3, [pc, #40]	@ (800bee8 <vPortSetupTimerInterrupt+0x3c>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a0a      	ldr	r2, [pc, #40]	@ (800beec <vPortSetupTimerInterrupt+0x40>)
 800bec2:	fba2 2303 	umull	r2, r3, r2, r3
 800bec6:	099b      	lsrs	r3, r3, #6
 800bec8:	4a09      	ldr	r2, [pc, #36]	@ (800bef0 <vPortSetupTimerInterrupt+0x44>)
 800beca:	3b01      	subs	r3, #1
 800becc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bece:	4b04      	ldr	r3, [pc, #16]	@ (800bee0 <vPortSetupTimerInterrupt+0x34>)
 800bed0:	2207      	movs	r2, #7
 800bed2:	601a      	str	r2, [r3, #0]
}
 800bed4:	bf00      	nop
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	e000e010 	.word	0xe000e010
 800bee4:	e000e018 	.word	0xe000e018
 800bee8:	20000004 	.word	0x20000004
 800beec:	10624dd3 	.word	0x10624dd3
 800bef0:	e000e014 	.word	0xe000e014

0800bef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bef4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bf04 <vPortEnableVFP+0x10>
 800bef8:	6801      	ldr	r1, [r0, #0]
 800befa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800befe:	6001      	str	r1, [r0, #0]
 800bf00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf02:	bf00      	nop
 800bf04:	e000ed88 	.word	0xe000ed88

0800bf08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf0e:	f3ef 8305 	mrs	r3, IPSR
 800bf12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2b0f      	cmp	r3, #15
 800bf18:	d915      	bls.n	800bf46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf1a:	4a18      	ldr	r2, [pc, #96]	@ (800bf7c <vPortValidateInterruptPriority+0x74>)
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	4413      	add	r3, r2
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf24:	4b16      	ldr	r3, [pc, #88]	@ (800bf80 <vPortValidateInterruptPriority+0x78>)
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	7afa      	ldrb	r2, [r7, #11]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d20b      	bcs.n	800bf46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	607b      	str	r3, [r7, #4]
}
 800bf40:	bf00      	nop
 800bf42:	bf00      	nop
 800bf44:	e7fd      	b.n	800bf42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf46:	4b0f      	ldr	r3, [pc, #60]	@ (800bf84 <vPortValidateInterruptPriority+0x7c>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bf4e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf88 <vPortValidateInterruptPriority+0x80>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d90b      	bls.n	800bf6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bf56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf5a:	f383 8811 	msr	BASEPRI, r3
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	603b      	str	r3, [r7, #0]
}
 800bf68:	bf00      	nop
 800bf6a:	bf00      	nop
 800bf6c:	e7fd      	b.n	800bf6a <vPortValidateInterruptPriority+0x62>
	}
 800bf6e:	bf00      	nop
 800bf70:	3714      	adds	r7, #20
 800bf72:	46bd      	mov	sp, r7
 800bf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop
 800bf7c:	e000e3f0 	.word	0xe000e3f0
 800bf80:	20000f90 	.word	0x20000f90
 800bf84:	e000ed0c 	.word	0xe000ed0c
 800bf88:	20000f94 	.word	0x20000f94

0800bf8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b08a      	sub	sp, #40	@ 0x28
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf94:	2300      	movs	r3, #0
 800bf96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf98:	f7fe ffd4 	bl	800af44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf9c:	4b5c      	ldr	r3, [pc, #368]	@ (800c110 <pvPortMalloc+0x184>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d101      	bne.n	800bfa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bfa4:	f000 f924 	bl	800c1f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bfa8:	4b5a      	ldr	r3, [pc, #360]	@ (800c114 <pvPortMalloc+0x188>)
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	4013      	ands	r3, r2
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f040 8095 	bne.w	800c0e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d01e      	beq.n	800bffa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bfbc:	2208      	movs	r2, #8
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f003 0307 	and.w	r3, r3, #7
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d015      	beq.n	800bffa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f023 0307 	bic.w	r3, r3, #7
 800bfd4:	3308      	adds	r3, #8
 800bfd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f003 0307 	and.w	r3, r3, #7
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d00b      	beq.n	800bffa <pvPortMalloc+0x6e>
	__asm volatile
 800bfe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	617b      	str	r3, [r7, #20]
}
 800bff4:	bf00      	nop
 800bff6:	bf00      	nop
 800bff8:	e7fd      	b.n	800bff6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d06f      	beq.n	800c0e0 <pvPortMalloc+0x154>
 800c000:	4b45      	ldr	r3, [pc, #276]	@ (800c118 <pvPortMalloc+0x18c>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	429a      	cmp	r2, r3
 800c008:	d86a      	bhi.n	800c0e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c00a:	4b44      	ldr	r3, [pc, #272]	@ (800c11c <pvPortMalloc+0x190>)
 800c00c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c00e:	4b43      	ldr	r3, [pc, #268]	@ (800c11c <pvPortMalloc+0x190>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c014:	e004      	b.n	800c020 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c018:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	429a      	cmp	r2, r3
 800c028:	d903      	bls.n	800c032 <pvPortMalloc+0xa6>
 800c02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1f1      	bne.n	800c016 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c032:	4b37      	ldr	r3, [pc, #220]	@ (800c110 <pvPortMalloc+0x184>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c038:	429a      	cmp	r2, r3
 800c03a:	d051      	beq.n	800c0e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c03c:	6a3b      	ldr	r3, [r7, #32]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2208      	movs	r2, #8
 800c042:	4413      	add	r3, r2
 800c044:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	6a3b      	ldr	r3, [r7, #32]
 800c04c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c050:	685a      	ldr	r2, [r3, #4]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	1ad2      	subs	r2, r2, r3
 800c056:	2308      	movs	r3, #8
 800c058:	005b      	lsls	r3, r3, #1
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d920      	bls.n	800c0a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c05e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4413      	add	r3, r2
 800c064:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	f003 0307 	and.w	r3, r3, #7
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00b      	beq.n	800c088 <pvPortMalloc+0xfc>
	__asm volatile
 800c070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c074:	f383 8811 	msr	BASEPRI, r3
 800c078:	f3bf 8f6f 	isb	sy
 800c07c:	f3bf 8f4f 	dsb	sy
 800c080:	613b      	str	r3, [r7, #16]
}
 800c082:	bf00      	nop
 800c084:	bf00      	nop
 800c086:	e7fd      	b.n	800c084 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c08a:	685a      	ldr	r2, [r3, #4]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	1ad2      	subs	r2, r2, r3
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c09a:	69b8      	ldr	r0, [r7, #24]
 800c09c:	f000 f90a 	bl	800c2b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c0a0:	4b1d      	ldr	r3, [pc, #116]	@ (800c118 <pvPortMalloc+0x18c>)
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	4a1b      	ldr	r2, [pc, #108]	@ (800c118 <pvPortMalloc+0x18c>)
 800c0ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c0ae:	4b1a      	ldr	r3, [pc, #104]	@ (800c118 <pvPortMalloc+0x18c>)
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	4b1b      	ldr	r3, [pc, #108]	@ (800c120 <pvPortMalloc+0x194>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d203      	bcs.n	800c0c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c0ba:	4b17      	ldr	r3, [pc, #92]	@ (800c118 <pvPortMalloc+0x18c>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a18      	ldr	r2, [pc, #96]	@ (800c120 <pvPortMalloc+0x194>)
 800c0c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c4:	685a      	ldr	r2, [r3, #4]
 800c0c6:	4b13      	ldr	r3, [pc, #76]	@ (800c114 <pvPortMalloc+0x188>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	431a      	orrs	r2, r3
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c0d6:	4b13      	ldr	r3, [pc, #76]	@ (800c124 <pvPortMalloc+0x198>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	4a11      	ldr	r2, [pc, #68]	@ (800c124 <pvPortMalloc+0x198>)
 800c0de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c0e0:	f7fe ff3e 	bl	800af60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0e4:	69fb      	ldr	r3, [r7, #28]
 800c0e6:	f003 0307 	and.w	r3, r3, #7
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00b      	beq.n	800c106 <pvPortMalloc+0x17a>
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f2:	f383 8811 	msr	BASEPRI, r3
 800c0f6:	f3bf 8f6f 	isb	sy
 800c0fa:	f3bf 8f4f 	dsb	sy
 800c0fe:	60fb      	str	r3, [r7, #12]
}
 800c100:	bf00      	nop
 800c102:	bf00      	nop
 800c104:	e7fd      	b.n	800c102 <pvPortMalloc+0x176>
	return pvReturn;
 800c106:	69fb      	ldr	r3, [r7, #28]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3728      	adds	r7, #40	@ 0x28
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	20004ba0 	.word	0x20004ba0
 800c114:	20004bb4 	.word	0x20004bb4
 800c118:	20004ba4 	.word	0x20004ba4
 800c11c:	20004b98 	.word	0x20004b98
 800c120:	20004ba8 	.word	0x20004ba8
 800c124:	20004bac 	.word	0x20004bac

0800c128 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b086      	sub	sp, #24
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d04f      	beq.n	800c1da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c13a:	2308      	movs	r3, #8
 800c13c:	425b      	negs	r3, r3
 800c13e:	697a      	ldr	r2, [r7, #20]
 800c140:	4413      	add	r3, r2
 800c142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	685a      	ldr	r2, [r3, #4]
 800c14c:	4b25      	ldr	r3, [pc, #148]	@ (800c1e4 <vPortFree+0xbc>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4013      	ands	r3, r2
 800c152:	2b00      	cmp	r3, #0
 800c154:	d10b      	bne.n	800c16e <vPortFree+0x46>
	__asm volatile
 800c156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c15a:	f383 8811 	msr	BASEPRI, r3
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	60fb      	str	r3, [r7, #12]
}
 800c168:	bf00      	nop
 800c16a:	bf00      	nop
 800c16c:	e7fd      	b.n	800c16a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00b      	beq.n	800c18e <vPortFree+0x66>
	__asm volatile
 800c176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c17a:	f383 8811 	msr	BASEPRI, r3
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	60bb      	str	r3, [r7, #8]
}
 800c188:	bf00      	nop
 800c18a:	bf00      	nop
 800c18c:	e7fd      	b.n	800c18a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	685a      	ldr	r2, [r3, #4]
 800c192:	4b14      	ldr	r3, [pc, #80]	@ (800c1e4 <vPortFree+0xbc>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4013      	ands	r3, r2
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d01e      	beq.n	800c1da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d11a      	bne.n	800c1da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	685a      	ldr	r2, [r3, #4]
 800c1a8:	4b0e      	ldr	r3, [pc, #56]	@ (800c1e4 <vPortFree+0xbc>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	43db      	mvns	r3, r3
 800c1ae:	401a      	ands	r2, r3
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c1b4:	f7fe fec6 	bl	800af44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c1e8 <vPortFree+0xc0>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	4a09      	ldr	r2, [pc, #36]	@ (800c1e8 <vPortFree+0xc0>)
 800c1c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c1c6:	6938      	ldr	r0, [r7, #16]
 800c1c8:	f000 f874 	bl	800c2b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c1cc:	4b07      	ldr	r3, [pc, #28]	@ (800c1ec <vPortFree+0xc4>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	4a06      	ldr	r2, [pc, #24]	@ (800c1ec <vPortFree+0xc4>)
 800c1d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c1d6:	f7fe fec3 	bl	800af60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c1da:	bf00      	nop
 800c1dc:	3718      	adds	r7, #24
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	20004bb4 	.word	0x20004bb4
 800c1e8:	20004ba4 	.word	0x20004ba4
 800c1ec:	20004bb0 	.word	0x20004bb0

0800c1f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b085      	sub	sp, #20
 800c1f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c1f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c1fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c1fc:	4b27      	ldr	r3, [pc, #156]	@ (800c29c <prvHeapInit+0xac>)
 800c1fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f003 0307 	and.w	r3, r3, #7
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00c      	beq.n	800c224 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	3307      	adds	r3, #7
 800c20e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f023 0307 	bic.w	r3, r3, #7
 800c216:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c218:	68ba      	ldr	r2, [r7, #8]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	1ad3      	subs	r3, r2, r3
 800c21e:	4a1f      	ldr	r2, [pc, #124]	@ (800c29c <prvHeapInit+0xac>)
 800c220:	4413      	add	r3, r2
 800c222:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c228:	4a1d      	ldr	r2, [pc, #116]	@ (800c2a0 <prvHeapInit+0xb0>)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c22e:	4b1c      	ldr	r3, [pc, #112]	@ (800c2a0 <prvHeapInit+0xb0>)
 800c230:	2200      	movs	r2, #0
 800c232:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	68ba      	ldr	r2, [r7, #8]
 800c238:	4413      	add	r3, r2
 800c23a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c23c:	2208      	movs	r2, #8
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	1a9b      	subs	r3, r3, r2
 800c242:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f023 0307 	bic.w	r3, r3, #7
 800c24a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	4a15      	ldr	r2, [pc, #84]	@ (800c2a4 <prvHeapInit+0xb4>)
 800c250:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c252:	4b14      	ldr	r3, [pc, #80]	@ (800c2a4 <prvHeapInit+0xb4>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	2200      	movs	r2, #0
 800c258:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c25a:	4b12      	ldr	r3, [pc, #72]	@ (800c2a4 <prvHeapInit+0xb4>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2200      	movs	r2, #0
 800c260:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	1ad2      	subs	r2, r2, r3
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c270:	4b0c      	ldr	r3, [pc, #48]	@ (800c2a4 <prvHeapInit+0xb4>)
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	4a0a      	ldr	r2, [pc, #40]	@ (800c2a8 <prvHeapInit+0xb8>)
 800c27e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	4a09      	ldr	r2, [pc, #36]	@ (800c2ac <prvHeapInit+0xbc>)
 800c286:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c288:	4b09      	ldr	r3, [pc, #36]	@ (800c2b0 <prvHeapInit+0xc0>)
 800c28a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c28e:	601a      	str	r2, [r3, #0]
}
 800c290:	bf00      	nop
 800c292:	3714      	adds	r7, #20
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	20000f98 	.word	0x20000f98
 800c2a0:	20004b98 	.word	0x20004b98
 800c2a4:	20004ba0 	.word	0x20004ba0
 800c2a8:	20004ba8 	.word	0x20004ba8
 800c2ac:	20004ba4 	.word	0x20004ba4
 800c2b0:	20004bb4 	.word	0x20004bb4

0800c2b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c2bc:	4b28      	ldr	r3, [pc, #160]	@ (800c360 <prvInsertBlockIntoFreeList+0xac>)
 800c2be:	60fb      	str	r3, [r7, #12]
 800c2c0:	e002      	b.n	800c2c8 <prvInsertBlockIntoFreeList+0x14>
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	60fb      	str	r3, [r7, #12]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d8f7      	bhi.n	800c2c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	68ba      	ldr	r2, [r7, #8]
 800c2dc:	4413      	add	r3, r2
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d108      	bne.n	800c2f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	685a      	ldr	r2, [r3, #4]
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	441a      	add	r2, r3
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	441a      	add	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	429a      	cmp	r2, r3
 800c308:	d118      	bne.n	800c33c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	4b15      	ldr	r3, [pc, #84]	@ (800c364 <prvInsertBlockIntoFreeList+0xb0>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	429a      	cmp	r2, r3
 800c314:	d00d      	beq.n	800c332 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	685a      	ldr	r2, [r3, #4]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	441a      	add	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	601a      	str	r2, [r3, #0]
 800c330:	e008      	b.n	800c344 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c332:	4b0c      	ldr	r3, [pc, #48]	@ (800c364 <prvInsertBlockIntoFreeList+0xb0>)
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	601a      	str	r2, [r3, #0]
 800c33a:	e003      	b.n	800c344 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d002      	beq.n	800c352 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c352:	bf00      	nop
 800c354:	3714      	adds	r7, #20
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	20004b98 	.word	0x20004b98
 800c364:	20004ba0 	.word	0x20004ba0

0800c368 <__cvt>:
 800c368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c36c:	ec57 6b10 	vmov	r6, r7, d0
 800c370:	2f00      	cmp	r7, #0
 800c372:	460c      	mov	r4, r1
 800c374:	4619      	mov	r1, r3
 800c376:	463b      	mov	r3, r7
 800c378:	bfbb      	ittet	lt
 800c37a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c37e:	461f      	movlt	r7, r3
 800c380:	2300      	movge	r3, #0
 800c382:	232d      	movlt	r3, #45	@ 0x2d
 800c384:	700b      	strb	r3, [r1, #0]
 800c386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c388:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c38c:	4691      	mov	r9, r2
 800c38e:	f023 0820 	bic.w	r8, r3, #32
 800c392:	bfbc      	itt	lt
 800c394:	4632      	movlt	r2, r6
 800c396:	4616      	movlt	r6, r2
 800c398:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c39c:	d005      	beq.n	800c3aa <__cvt+0x42>
 800c39e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c3a2:	d100      	bne.n	800c3a6 <__cvt+0x3e>
 800c3a4:	3401      	adds	r4, #1
 800c3a6:	2102      	movs	r1, #2
 800c3a8:	e000      	b.n	800c3ac <__cvt+0x44>
 800c3aa:	2103      	movs	r1, #3
 800c3ac:	ab03      	add	r3, sp, #12
 800c3ae:	9301      	str	r3, [sp, #4]
 800c3b0:	ab02      	add	r3, sp, #8
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	ec47 6b10 	vmov	d0, r6, r7
 800c3b8:	4653      	mov	r3, sl
 800c3ba:	4622      	mov	r2, r4
 800c3bc:	f001 f884 	bl	800d4c8 <_dtoa_r>
 800c3c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c3c4:	4605      	mov	r5, r0
 800c3c6:	d119      	bne.n	800c3fc <__cvt+0x94>
 800c3c8:	f019 0f01 	tst.w	r9, #1
 800c3cc:	d00e      	beq.n	800c3ec <__cvt+0x84>
 800c3ce:	eb00 0904 	add.w	r9, r0, r4
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	4639      	mov	r1, r7
 800c3da:	f7f4 fb7d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3de:	b108      	cbz	r0, 800c3e4 <__cvt+0x7c>
 800c3e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c3e4:	2230      	movs	r2, #48	@ 0x30
 800c3e6:	9b03      	ldr	r3, [sp, #12]
 800c3e8:	454b      	cmp	r3, r9
 800c3ea:	d31e      	bcc.n	800c42a <__cvt+0xc2>
 800c3ec:	9b03      	ldr	r3, [sp, #12]
 800c3ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3f0:	1b5b      	subs	r3, r3, r5
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	6013      	str	r3, [r2, #0]
 800c3f6:	b004      	add	sp, #16
 800c3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c400:	eb00 0904 	add.w	r9, r0, r4
 800c404:	d1e5      	bne.n	800c3d2 <__cvt+0x6a>
 800c406:	7803      	ldrb	r3, [r0, #0]
 800c408:	2b30      	cmp	r3, #48	@ 0x30
 800c40a:	d10a      	bne.n	800c422 <__cvt+0xba>
 800c40c:	2200      	movs	r2, #0
 800c40e:	2300      	movs	r3, #0
 800c410:	4630      	mov	r0, r6
 800c412:	4639      	mov	r1, r7
 800c414:	f7f4 fb60 	bl	8000ad8 <__aeabi_dcmpeq>
 800c418:	b918      	cbnz	r0, 800c422 <__cvt+0xba>
 800c41a:	f1c4 0401 	rsb	r4, r4, #1
 800c41e:	f8ca 4000 	str.w	r4, [sl]
 800c422:	f8da 3000 	ldr.w	r3, [sl]
 800c426:	4499      	add	r9, r3
 800c428:	e7d3      	b.n	800c3d2 <__cvt+0x6a>
 800c42a:	1c59      	adds	r1, r3, #1
 800c42c:	9103      	str	r1, [sp, #12]
 800c42e:	701a      	strb	r2, [r3, #0]
 800c430:	e7d9      	b.n	800c3e6 <__cvt+0x7e>

0800c432 <__exponent>:
 800c432:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c434:	2900      	cmp	r1, #0
 800c436:	bfba      	itte	lt
 800c438:	4249      	neglt	r1, r1
 800c43a:	232d      	movlt	r3, #45	@ 0x2d
 800c43c:	232b      	movge	r3, #43	@ 0x2b
 800c43e:	2909      	cmp	r1, #9
 800c440:	7002      	strb	r2, [r0, #0]
 800c442:	7043      	strb	r3, [r0, #1]
 800c444:	dd29      	ble.n	800c49a <__exponent+0x68>
 800c446:	f10d 0307 	add.w	r3, sp, #7
 800c44a:	461d      	mov	r5, r3
 800c44c:	270a      	movs	r7, #10
 800c44e:	461a      	mov	r2, r3
 800c450:	fbb1 f6f7 	udiv	r6, r1, r7
 800c454:	fb07 1416 	mls	r4, r7, r6, r1
 800c458:	3430      	adds	r4, #48	@ 0x30
 800c45a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c45e:	460c      	mov	r4, r1
 800c460:	2c63      	cmp	r4, #99	@ 0x63
 800c462:	f103 33ff 	add.w	r3, r3, #4294967295
 800c466:	4631      	mov	r1, r6
 800c468:	dcf1      	bgt.n	800c44e <__exponent+0x1c>
 800c46a:	3130      	adds	r1, #48	@ 0x30
 800c46c:	1e94      	subs	r4, r2, #2
 800c46e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c472:	1c41      	adds	r1, r0, #1
 800c474:	4623      	mov	r3, r4
 800c476:	42ab      	cmp	r3, r5
 800c478:	d30a      	bcc.n	800c490 <__exponent+0x5e>
 800c47a:	f10d 0309 	add.w	r3, sp, #9
 800c47e:	1a9b      	subs	r3, r3, r2
 800c480:	42ac      	cmp	r4, r5
 800c482:	bf88      	it	hi
 800c484:	2300      	movhi	r3, #0
 800c486:	3302      	adds	r3, #2
 800c488:	4403      	add	r3, r0
 800c48a:	1a18      	subs	r0, r3, r0
 800c48c:	b003      	add	sp, #12
 800c48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c490:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c494:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c498:	e7ed      	b.n	800c476 <__exponent+0x44>
 800c49a:	2330      	movs	r3, #48	@ 0x30
 800c49c:	3130      	adds	r1, #48	@ 0x30
 800c49e:	7083      	strb	r3, [r0, #2]
 800c4a0:	70c1      	strb	r1, [r0, #3]
 800c4a2:	1d03      	adds	r3, r0, #4
 800c4a4:	e7f1      	b.n	800c48a <__exponent+0x58>
	...

0800c4a8 <_printf_float>:
 800c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	b08d      	sub	sp, #52	@ 0x34
 800c4ae:	460c      	mov	r4, r1
 800c4b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c4b4:	4616      	mov	r6, r2
 800c4b6:	461f      	mov	r7, r3
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	f000 feef 	bl	800d29c <_localeconv_r>
 800c4be:	6803      	ldr	r3, [r0, #0]
 800c4c0:	9304      	str	r3, [sp, #16]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7f3 fedc 	bl	8000280 <strlen>
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4cc:	f8d8 3000 	ldr.w	r3, [r8]
 800c4d0:	9005      	str	r0, [sp, #20]
 800c4d2:	3307      	adds	r3, #7
 800c4d4:	f023 0307 	bic.w	r3, r3, #7
 800c4d8:	f103 0208 	add.w	r2, r3, #8
 800c4dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c4e0:	f8d4 b000 	ldr.w	fp, [r4]
 800c4e4:	f8c8 2000 	str.w	r2, [r8]
 800c4e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c4f0:	9307      	str	r3, [sp, #28]
 800c4f2:	f8cd 8018 	str.w	r8, [sp, #24]
 800c4f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c4fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4fe:	4b9c      	ldr	r3, [pc, #624]	@ (800c770 <_printf_float+0x2c8>)
 800c500:	f04f 32ff 	mov.w	r2, #4294967295
 800c504:	f7f4 fb1a 	bl	8000b3c <__aeabi_dcmpun>
 800c508:	bb70      	cbnz	r0, 800c568 <_printf_float+0xc0>
 800c50a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c50e:	4b98      	ldr	r3, [pc, #608]	@ (800c770 <_printf_float+0x2c8>)
 800c510:	f04f 32ff 	mov.w	r2, #4294967295
 800c514:	f7f4 faf4 	bl	8000b00 <__aeabi_dcmple>
 800c518:	bb30      	cbnz	r0, 800c568 <_printf_float+0xc0>
 800c51a:	2200      	movs	r2, #0
 800c51c:	2300      	movs	r3, #0
 800c51e:	4640      	mov	r0, r8
 800c520:	4649      	mov	r1, r9
 800c522:	f7f4 fae3 	bl	8000aec <__aeabi_dcmplt>
 800c526:	b110      	cbz	r0, 800c52e <_printf_float+0x86>
 800c528:	232d      	movs	r3, #45	@ 0x2d
 800c52a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c52e:	4a91      	ldr	r2, [pc, #580]	@ (800c774 <_printf_float+0x2cc>)
 800c530:	4b91      	ldr	r3, [pc, #580]	@ (800c778 <_printf_float+0x2d0>)
 800c532:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c536:	bf94      	ite	ls
 800c538:	4690      	movls	r8, r2
 800c53a:	4698      	movhi	r8, r3
 800c53c:	2303      	movs	r3, #3
 800c53e:	6123      	str	r3, [r4, #16]
 800c540:	f02b 0304 	bic.w	r3, fp, #4
 800c544:	6023      	str	r3, [r4, #0]
 800c546:	f04f 0900 	mov.w	r9, #0
 800c54a:	9700      	str	r7, [sp, #0]
 800c54c:	4633      	mov	r3, r6
 800c54e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c550:	4621      	mov	r1, r4
 800c552:	4628      	mov	r0, r5
 800c554:	f000 f9d2 	bl	800c8fc <_printf_common>
 800c558:	3001      	adds	r0, #1
 800c55a:	f040 808d 	bne.w	800c678 <_printf_float+0x1d0>
 800c55e:	f04f 30ff 	mov.w	r0, #4294967295
 800c562:	b00d      	add	sp, #52	@ 0x34
 800c564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c568:	4642      	mov	r2, r8
 800c56a:	464b      	mov	r3, r9
 800c56c:	4640      	mov	r0, r8
 800c56e:	4649      	mov	r1, r9
 800c570:	f7f4 fae4 	bl	8000b3c <__aeabi_dcmpun>
 800c574:	b140      	cbz	r0, 800c588 <_printf_float+0xe0>
 800c576:	464b      	mov	r3, r9
 800c578:	2b00      	cmp	r3, #0
 800c57a:	bfbc      	itt	lt
 800c57c:	232d      	movlt	r3, #45	@ 0x2d
 800c57e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c582:	4a7e      	ldr	r2, [pc, #504]	@ (800c77c <_printf_float+0x2d4>)
 800c584:	4b7e      	ldr	r3, [pc, #504]	@ (800c780 <_printf_float+0x2d8>)
 800c586:	e7d4      	b.n	800c532 <_printf_float+0x8a>
 800c588:	6863      	ldr	r3, [r4, #4]
 800c58a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c58e:	9206      	str	r2, [sp, #24]
 800c590:	1c5a      	adds	r2, r3, #1
 800c592:	d13b      	bne.n	800c60c <_printf_float+0x164>
 800c594:	2306      	movs	r3, #6
 800c596:	6063      	str	r3, [r4, #4]
 800c598:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c59c:	2300      	movs	r3, #0
 800c59e:	6022      	str	r2, [r4, #0]
 800c5a0:	9303      	str	r3, [sp, #12]
 800c5a2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c5a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c5a8:	ab09      	add	r3, sp, #36	@ 0x24
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	6861      	ldr	r1, [r4, #4]
 800c5ae:	ec49 8b10 	vmov	d0, r8, r9
 800c5b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c5b6:	4628      	mov	r0, r5
 800c5b8:	f7ff fed6 	bl	800c368 <__cvt>
 800c5bc:	9b06      	ldr	r3, [sp, #24]
 800c5be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5c0:	2b47      	cmp	r3, #71	@ 0x47
 800c5c2:	4680      	mov	r8, r0
 800c5c4:	d129      	bne.n	800c61a <_printf_float+0x172>
 800c5c6:	1cc8      	adds	r0, r1, #3
 800c5c8:	db02      	blt.n	800c5d0 <_printf_float+0x128>
 800c5ca:	6863      	ldr	r3, [r4, #4]
 800c5cc:	4299      	cmp	r1, r3
 800c5ce:	dd41      	ble.n	800c654 <_printf_float+0x1ac>
 800c5d0:	f1aa 0a02 	sub.w	sl, sl, #2
 800c5d4:	fa5f fa8a 	uxtb.w	sl, sl
 800c5d8:	3901      	subs	r1, #1
 800c5da:	4652      	mov	r2, sl
 800c5dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c5e0:	9109      	str	r1, [sp, #36]	@ 0x24
 800c5e2:	f7ff ff26 	bl	800c432 <__exponent>
 800c5e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c5e8:	1813      	adds	r3, r2, r0
 800c5ea:	2a01      	cmp	r2, #1
 800c5ec:	4681      	mov	r9, r0
 800c5ee:	6123      	str	r3, [r4, #16]
 800c5f0:	dc02      	bgt.n	800c5f8 <_printf_float+0x150>
 800c5f2:	6822      	ldr	r2, [r4, #0]
 800c5f4:	07d2      	lsls	r2, r2, #31
 800c5f6:	d501      	bpl.n	800c5fc <_printf_float+0x154>
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	6123      	str	r3, [r4, #16]
 800c5fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c600:	2b00      	cmp	r3, #0
 800c602:	d0a2      	beq.n	800c54a <_printf_float+0xa2>
 800c604:	232d      	movs	r3, #45	@ 0x2d
 800c606:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c60a:	e79e      	b.n	800c54a <_printf_float+0xa2>
 800c60c:	9a06      	ldr	r2, [sp, #24]
 800c60e:	2a47      	cmp	r2, #71	@ 0x47
 800c610:	d1c2      	bne.n	800c598 <_printf_float+0xf0>
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1c0      	bne.n	800c598 <_printf_float+0xf0>
 800c616:	2301      	movs	r3, #1
 800c618:	e7bd      	b.n	800c596 <_printf_float+0xee>
 800c61a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c61e:	d9db      	bls.n	800c5d8 <_printf_float+0x130>
 800c620:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c624:	d118      	bne.n	800c658 <_printf_float+0x1b0>
 800c626:	2900      	cmp	r1, #0
 800c628:	6863      	ldr	r3, [r4, #4]
 800c62a:	dd0b      	ble.n	800c644 <_printf_float+0x19c>
 800c62c:	6121      	str	r1, [r4, #16]
 800c62e:	b913      	cbnz	r3, 800c636 <_printf_float+0x18e>
 800c630:	6822      	ldr	r2, [r4, #0]
 800c632:	07d0      	lsls	r0, r2, #31
 800c634:	d502      	bpl.n	800c63c <_printf_float+0x194>
 800c636:	3301      	adds	r3, #1
 800c638:	440b      	add	r3, r1
 800c63a:	6123      	str	r3, [r4, #16]
 800c63c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c63e:	f04f 0900 	mov.w	r9, #0
 800c642:	e7db      	b.n	800c5fc <_printf_float+0x154>
 800c644:	b913      	cbnz	r3, 800c64c <_printf_float+0x1a4>
 800c646:	6822      	ldr	r2, [r4, #0]
 800c648:	07d2      	lsls	r2, r2, #31
 800c64a:	d501      	bpl.n	800c650 <_printf_float+0x1a8>
 800c64c:	3302      	adds	r3, #2
 800c64e:	e7f4      	b.n	800c63a <_printf_float+0x192>
 800c650:	2301      	movs	r3, #1
 800c652:	e7f2      	b.n	800c63a <_printf_float+0x192>
 800c654:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c658:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c65a:	4299      	cmp	r1, r3
 800c65c:	db05      	blt.n	800c66a <_printf_float+0x1c2>
 800c65e:	6823      	ldr	r3, [r4, #0]
 800c660:	6121      	str	r1, [r4, #16]
 800c662:	07d8      	lsls	r0, r3, #31
 800c664:	d5ea      	bpl.n	800c63c <_printf_float+0x194>
 800c666:	1c4b      	adds	r3, r1, #1
 800c668:	e7e7      	b.n	800c63a <_printf_float+0x192>
 800c66a:	2900      	cmp	r1, #0
 800c66c:	bfd4      	ite	le
 800c66e:	f1c1 0202 	rsble	r2, r1, #2
 800c672:	2201      	movgt	r2, #1
 800c674:	4413      	add	r3, r2
 800c676:	e7e0      	b.n	800c63a <_printf_float+0x192>
 800c678:	6823      	ldr	r3, [r4, #0]
 800c67a:	055a      	lsls	r2, r3, #21
 800c67c:	d407      	bmi.n	800c68e <_printf_float+0x1e6>
 800c67e:	6923      	ldr	r3, [r4, #16]
 800c680:	4642      	mov	r2, r8
 800c682:	4631      	mov	r1, r6
 800c684:	4628      	mov	r0, r5
 800c686:	47b8      	blx	r7
 800c688:	3001      	adds	r0, #1
 800c68a:	d12b      	bne.n	800c6e4 <_printf_float+0x23c>
 800c68c:	e767      	b.n	800c55e <_printf_float+0xb6>
 800c68e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c692:	f240 80dd 	bls.w	800c850 <_printf_float+0x3a8>
 800c696:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c69a:	2200      	movs	r2, #0
 800c69c:	2300      	movs	r3, #0
 800c69e:	f7f4 fa1b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d033      	beq.n	800c70e <_printf_float+0x266>
 800c6a6:	4a37      	ldr	r2, [pc, #220]	@ (800c784 <_printf_float+0x2dc>)
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	47b8      	blx	r7
 800c6b0:	3001      	adds	r0, #1
 800c6b2:	f43f af54 	beq.w	800c55e <_printf_float+0xb6>
 800c6b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c6ba:	4543      	cmp	r3, r8
 800c6bc:	db02      	blt.n	800c6c4 <_printf_float+0x21c>
 800c6be:	6823      	ldr	r3, [r4, #0]
 800c6c0:	07d8      	lsls	r0, r3, #31
 800c6c2:	d50f      	bpl.n	800c6e4 <_printf_float+0x23c>
 800c6c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6c8:	4631      	mov	r1, r6
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	47b8      	blx	r7
 800c6ce:	3001      	adds	r0, #1
 800c6d0:	f43f af45 	beq.w	800c55e <_printf_float+0xb6>
 800c6d4:	f04f 0900 	mov.w	r9, #0
 800c6d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c6dc:	f104 0a1a 	add.w	sl, r4, #26
 800c6e0:	45c8      	cmp	r8, r9
 800c6e2:	dc09      	bgt.n	800c6f8 <_printf_float+0x250>
 800c6e4:	6823      	ldr	r3, [r4, #0]
 800c6e6:	079b      	lsls	r3, r3, #30
 800c6e8:	f100 8103 	bmi.w	800c8f2 <_printf_float+0x44a>
 800c6ec:	68e0      	ldr	r0, [r4, #12]
 800c6ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6f0:	4298      	cmp	r0, r3
 800c6f2:	bfb8      	it	lt
 800c6f4:	4618      	movlt	r0, r3
 800c6f6:	e734      	b.n	800c562 <_printf_float+0xba>
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	4652      	mov	r2, sl
 800c6fc:	4631      	mov	r1, r6
 800c6fe:	4628      	mov	r0, r5
 800c700:	47b8      	blx	r7
 800c702:	3001      	adds	r0, #1
 800c704:	f43f af2b 	beq.w	800c55e <_printf_float+0xb6>
 800c708:	f109 0901 	add.w	r9, r9, #1
 800c70c:	e7e8      	b.n	800c6e0 <_printf_float+0x238>
 800c70e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c710:	2b00      	cmp	r3, #0
 800c712:	dc39      	bgt.n	800c788 <_printf_float+0x2e0>
 800c714:	4a1b      	ldr	r2, [pc, #108]	@ (800c784 <_printf_float+0x2dc>)
 800c716:	2301      	movs	r3, #1
 800c718:	4631      	mov	r1, r6
 800c71a:	4628      	mov	r0, r5
 800c71c:	47b8      	blx	r7
 800c71e:	3001      	adds	r0, #1
 800c720:	f43f af1d 	beq.w	800c55e <_printf_float+0xb6>
 800c724:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c728:	ea59 0303 	orrs.w	r3, r9, r3
 800c72c:	d102      	bne.n	800c734 <_printf_float+0x28c>
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	07d9      	lsls	r1, r3, #31
 800c732:	d5d7      	bpl.n	800c6e4 <_printf_float+0x23c>
 800c734:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c738:	4631      	mov	r1, r6
 800c73a:	4628      	mov	r0, r5
 800c73c:	47b8      	blx	r7
 800c73e:	3001      	adds	r0, #1
 800c740:	f43f af0d 	beq.w	800c55e <_printf_float+0xb6>
 800c744:	f04f 0a00 	mov.w	sl, #0
 800c748:	f104 0b1a 	add.w	fp, r4, #26
 800c74c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c74e:	425b      	negs	r3, r3
 800c750:	4553      	cmp	r3, sl
 800c752:	dc01      	bgt.n	800c758 <_printf_float+0x2b0>
 800c754:	464b      	mov	r3, r9
 800c756:	e793      	b.n	800c680 <_printf_float+0x1d8>
 800c758:	2301      	movs	r3, #1
 800c75a:	465a      	mov	r2, fp
 800c75c:	4631      	mov	r1, r6
 800c75e:	4628      	mov	r0, r5
 800c760:	47b8      	blx	r7
 800c762:	3001      	adds	r0, #1
 800c764:	f43f aefb 	beq.w	800c55e <_printf_float+0xb6>
 800c768:	f10a 0a01 	add.w	sl, sl, #1
 800c76c:	e7ee      	b.n	800c74c <_printf_float+0x2a4>
 800c76e:	bf00      	nop
 800c770:	7fefffff 	.word	0x7fefffff
 800c774:	08010eb8 	.word	0x08010eb8
 800c778:	08010ebc 	.word	0x08010ebc
 800c77c:	08010ec0 	.word	0x08010ec0
 800c780:	08010ec4 	.word	0x08010ec4
 800c784:	08010ec8 	.word	0x08010ec8
 800c788:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c78a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c78e:	4553      	cmp	r3, sl
 800c790:	bfa8      	it	ge
 800c792:	4653      	movge	r3, sl
 800c794:	2b00      	cmp	r3, #0
 800c796:	4699      	mov	r9, r3
 800c798:	dc36      	bgt.n	800c808 <_printf_float+0x360>
 800c79a:	f04f 0b00 	mov.w	fp, #0
 800c79e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7a2:	f104 021a 	add.w	r2, r4, #26
 800c7a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c7a8:	9306      	str	r3, [sp, #24]
 800c7aa:	eba3 0309 	sub.w	r3, r3, r9
 800c7ae:	455b      	cmp	r3, fp
 800c7b0:	dc31      	bgt.n	800c816 <_printf_float+0x36e>
 800c7b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7b4:	459a      	cmp	sl, r3
 800c7b6:	dc3a      	bgt.n	800c82e <_printf_float+0x386>
 800c7b8:	6823      	ldr	r3, [r4, #0]
 800c7ba:	07da      	lsls	r2, r3, #31
 800c7bc:	d437      	bmi.n	800c82e <_printf_float+0x386>
 800c7be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7c0:	ebaa 0903 	sub.w	r9, sl, r3
 800c7c4:	9b06      	ldr	r3, [sp, #24]
 800c7c6:	ebaa 0303 	sub.w	r3, sl, r3
 800c7ca:	4599      	cmp	r9, r3
 800c7cc:	bfa8      	it	ge
 800c7ce:	4699      	movge	r9, r3
 800c7d0:	f1b9 0f00 	cmp.w	r9, #0
 800c7d4:	dc33      	bgt.n	800c83e <_printf_float+0x396>
 800c7d6:	f04f 0800 	mov.w	r8, #0
 800c7da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7de:	f104 0b1a 	add.w	fp, r4, #26
 800c7e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7e4:	ebaa 0303 	sub.w	r3, sl, r3
 800c7e8:	eba3 0309 	sub.w	r3, r3, r9
 800c7ec:	4543      	cmp	r3, r8
 800c7ee:	f77f af79 	ble.w	800c6e4 <_printf_float+0x23c>
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	465a      	mov	r2, fp
 800c7f6:	4631      	mov	r1, r6
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	47b8      	blx	r7
 800c7fc:	3001      	adds	r0, #1
 800c7fe:	f43f aeae 	beq.w	800c55e <_printf_float+0xb6>
 800c802:	f108 0801 	add.w	r8, r8, #1
 800c806:	e7ec      	b.n	800c7e2 <_printf_float+0x33a>
 800c808:	4642      	mov	r2, r8
 800c80a:	4631      	mov	r1, r6
 800c80c:	4628      	mov	r0, r5
 800c80e:	47b8      	blx	r7
 800c810:	3001      	adds	r0, #1
 800c812:	d1c2      	bne.n	800c79a <_printf_float+0x2f2>
 800c814:	e6a3      	b.n	800c55e <_printf_float+0xb6>
 800c816:	2301      	movs	r3, #1
 800c818:	4631      	mov	r1, r6
 800c81a:	4628      	mov	r0, r5
 800c81c:	9206      	str	r2, [sp, #24]
 800c81e:	47b8      	blx	r7
 800c820:	3001      	adds	r0, #1
 800c822:	f43f ae9c 	beq.w	800c55e <_printf_float+0xb6>
 800c826:	9a06      	ldr	r2, [sp, #24]
 800c828:	f10b 0b01 	add.w	fp, fp, #1
 800c82c:	e7bb      	b.n	800c7a6 <_printf_float+0x2fe>
 800c82e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c832:	4631      	mov	r1, r6
 800c834:	4628      	mov	r0, r5
 800c836:	47b8      	blx	r7
 800c838:	3001      	adds	r0, #1
 800c83a:	d1c0      	bne.n	800c7be <_printf_float+0x316>
 800c83c:	e68f      	b.n	800c55e <_printf_float+0xb6>
 800c83e:	9a06      	ldr	r2, [sp, #24]
 800c840:	464b      	mov	r3, r9
 800c842:	4442      	add	r2, r8
 800c844:	4631      	mov	r1, r6
 800c846:	4628      	mov	r0, r5
 800c848:	47b8      	blx	r7
 800c84a:	3001      	adds	r0, #1
 800c84c:	d1c3      	bne.n	800c7d6 <_printf_float+0x32e>
 800c84e:	e686      	b.n	800c55e <_printf_float+0xb6>
 800c850:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c854:	f1ba 0f01 	cmp.w	sl, #1
 800c858:	dc01      	bgt.n	800c85e <_printf_float+0x3b6>
 800c85a:	07db      	lsls	r3, r3, #31
 800c85c:	d536      	bpl.n	800c8cc <_printf_float+0x424>
 800c85e:	2301      	movs	r3, #1
 800c860:	4642      	mov	r2, r8
 800c862:	4631      	mov	r1, r6
 800c864:	4628      	mov	r0, r5
 800c866:	47b8      	blx	r7
 800c868:	3001      	adds	r0, #1
 800c86a:	f43f ae78 	beq.w	800c55e <_printf_float+0xb6>
 800c86e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c872:	4631      	mov	r1, r6
 800c874:	4628      	mov	r0, r5
 800c876:	47b8      	blx	r7
 800c878:	3001      	adds	r0, #1
 800c87a:	f43f ae70 	beq.w	800c55e <_printf_float+0xb6>
 800c87e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c882:	2200      	movs	r2, #0
 800c884:	2300      	movs	r3, #0
 800c886:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c88a:	f7f4 f925 	bl	8000ad8 <__aeabi_dcmpeq>
 800c88e:	b9c0      	cbnz	r0, 800c8c2 <_printf_float+0x41a>
 800c890:	4653      	mov	r3, sl
 800c892:	f108 0201 	add.w	r2, r8, #1
 800c896:	4631      	mov	r1, r6
 800c898:	4628      	mov	r0, r5
 800c89a:	47b8      	blx	r7
 800c89c:	3001      	adds	r0, #1
 800c89e:	d10c      	bne.n	800c8ba <_printf_float+0x412>
 800c8a0:	e65d      	b.n	800c55e <_printf_float+0xb6>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	465a      	mov	r2, fp
 800c8a6:	4631      	mov	r1, r6
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	47b8      	blx	r7
 800c8ac:	3001      	adds	r0, #1
 800c8ae:	f43f ae56 	beq.w	800c55e <_printf_float+0xb6>
 800c8b2:	f108 0801 	add.w	r8, r8, #1
 800c8b6:	45d0      	cmp	r8, sl
 800c8b8:	dbf3      	blt.n	800c8a2 <_printf_float+0x3fa>
 800c8ba:	464b      	mov	r3, r9
 800c8bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c8c0:	e6df      	b.n	800c682 <_printf_float+0x1da>
 800c8c2:	f04f 0800 	mov.w	r8, #0
 800c8c6:	f104 0b1a 	add.w	fp, r4, #26
 800c8ca:	e7f4      	b.n	800c8b6 <_printf_float+0x40e>
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	4642      	mov	r2, r8
 800c8d0:	e7e1      	b.n	800c896 <_printf_float+0x3ee>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	464a      	mov	r2, r9
 800c8d6:	4631      	mov	r1, r6
 800c8d8:	4628      	mov	r0, r5
 800c8da:	47b8      	blx	r7
 800c8dc:	3001      	adds	r0, #1
 800c8de:	f43f ae3e 	beq.w	800c55e <_printf_float+0xb6>
 800c8e2:	f108 0801 	add.w	r8, r8, #1
 800c8e6:	68e3      	ldr	r3, [r4, #12]
 800c8e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c8ea:	1a5b      	subs	r3, r3, r1
 800c8ec:	4543      	cmp	r3, r8
 800c8ee:	dcf0      	bgt.n	800c8d2 <_printf_float+0x42a>
 800c8f0:	e6fc      	b.n	800c6ec <_printf_float+0x244>
 800c8f2:	f04f 0800 	mov.w	r8, #0
 800c8f6:	f104 0919 	add.w	r9, r4, #25
 800c8fa:	e7f4      	b.n	800c8e6 <_printf_float+0x43e>

0800c8fc <_printf_common>:
 800c8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c900:	4616      	mov	r6, r2
 800c902:	4698      	mov	r8, r3
 800c904:	688a      	ldr	r2, [r1, #8]
 800c906:	690b      	ldr	r3, [r1, #16]
 800c908:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c90c:	4293      	cmp	r3, r2
 800c90e:	bfb8      	it	lt
 800c910:	4613      	movlt	r3, r2
 800c912:	6033      	str	r3, [r6, #0]
 800c914:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c918:	4607      	mov	r7, r0
 800c91a:	460c      	mov	r4, r1
 800c91c:	b10a      	cbz	r2, 800c922 <_printf_common+0x26>
 800c91e:	3301      	adds	r3, #1
 800c920:	6033      	str	r3, [r6, #0]
 800c922:	6823      	ldr	r3, [r4, #0]
 800c924:	0699      	lsls	r1, r3, #26
 800c926:	bf42      	ittt	mi
 800c928:	6833      	ldrmi	r3, [r6, #0]
 800c92a:	3302      	addmi	r3, #2
 800c92c:	6033      	strmi	r3, [r6, #0]
 800c92e:	6825      	ldr	r5, [r4, #0]
 800c930:	f015 0506 	ands.w	r5, r5, #6
 800c934:	d106      	bne.n	800c944 <_printf_common+0x48>
 800c936:	f104 0a19 	add.w	sl, r4, #25
 800c93a:	68e3      	ldr	r3, [r4, #12]
 800c93c:	6832      	ldr	r2, [r6, #0]
 800c93e:	1a9b      	subs	r3, r3, r2
 800c940:	42ab      	cmp	r3, r5
 800c942:	dc26      	bgt.n	800c992 <_printf_common+0x96>
 800c944:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c948:	6822      	ldr	r2, [r4, #0]
 800c94a:	3b00      	subs	r3, #0
 800c94c:	bf18      	it	ne
 800c94e:	2301      	movne	r3, #1
 800c950:	0692      	lsls	r2, r2, #26
 800c952:	d42b      	bmi.n	800c9ac <_printf_common+0xb0>
 800c954:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c958:	4641      	mov	r1, r8
 800c95a:	4638      	mov	r0, r7
 800c95c:	47c8      	blx	r9
 800c95e:	3001      	adds	r0, #1
 800c960:	d01e      	beq.n	800c9a0 <_printf_common+0xa4>
 800c962:	6823      	ldr	r3, [r4, #0]
 800c964:	6922      	ldr	r2, [r4, #16]
 800c966:	f003 0306 	and.w	r3, r3, #6
 800c96a:	2b04      	cmp	r3, #4
 800c96c:	bf02      	ittt	eq
 800c96e:	68e5      	ldreq	r5, [r4, #12]
 800c970:	6833      	ldreq	r3, [r6, #0]
 800c972:	1aed      	subeq	r5, r5, r3
 800c974:	68a3      	ldr	r3, [r4, #8]
 800c976:	bf0c      	ite	eq
 800c978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c97c:	2500      	movne	r5, #0
 800c97e:	4293      	cmp	r3, r2
 800c980:	bfc4      	itt	gt
 800c982:	1a9b      	subgt	r3, r3, r2
 800c984:	18ed      	addgt	r5, r5, r3
 800c986:	2600      	movs	r6, #0
 800c988:	341a      	adds	r4, #26
 800c98a:	42b5      	cmp	r5, r6
 800c98c:	d11a      	bne.n	800c9c4 <_printf_common+0xc8>
 800c98e:	2000      	movs	r0, #0
 800c990:	e008      	b.n	800c9a4 <_printf_common+0xa8>
 800c992:	2301      	movs	r3, #1
 800c994:	4652      	mov	r2, sl
 800c996:	4641      	mov	r1, r8
 800c998:	4638      	mov	r0, r7
 800c99a:	47c8      	blx	r9
 800c99c:	3001      	adds	r0, #1
 800c99e:	d103      	bne.n	800c9a8 <_printf_common+0xac>
 800c9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a8:	3501      	adds	r5, #1
 800c9aa:	e7c6      	b.n	800c93a <_printf_common+0x3e>
 800c9ac:	18e1      	adds	r1, r4, r3
 800c9ae:	1c5a      	adds	r2, r3, #1
 800c9b0:	2030      	movs	r0, #48	@ 0x30
 800c9b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c9b6:	4422      	add	r2, r4
 800c9b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c9bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c9c0:	3302      	adds	r3, #2
 800c9c2:	e7c7      	b.n	800c954 <_printf_common+0x58>
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	4622      	mov	r2, r4
 800c9c8:	4641      	mov	r1, r8
 800c9ca:	4638      	mov	r0, r7
 800c9cc:	47c8      	blx	r9
 800c9ce:	3001      	adds	r0, #1
 800c9d0:	d0e6      	beq.n	800c9a0 <_printf_common+0xa4>
 800c9d2:	3601      	adds	r6, #1
 800c9d4:	e7d9      	b.n	800c98a <_printf_common+0x8e>
	...

0800c9d8 <_printf_i>:
 800c9d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9dc:	7e0f      	ldrb	r7, [r1, #24]
 800c9de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c9e0:	2f78      	cmp	r7, #120	@ 0x78
 800c9e2:	4691      	mov	r9, r2
 800c9e4:	4680      	mov	r8, r0
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	469a      	mov	sl, r3
 800c9ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c9ee:	d807      	bhi.n	800ca00 <_printf_i+0x28>
 800c9f0:	2f62      	cmp	r7, #98	@ 0x62
 800c9f2:	d80a      	bhi.n	800ca0a <_printf_i+0x32>
 800c9f4:	2f00      	cmp	r7, #0
 800c9f6:	f000 80d2 	beq.w	800cb9e <_printf_i+0x1c6>
 800c9fa:	2f58      	cmp	r7, #88	@ 0x58
 800c9fc:	f000 80b9 	beq.w	800cb72 <_printf_i+0x19a>
 800ca00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ca08:	e03a      	b.n	800ca80 <_printf_i+0xa8>
 800ca0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ca0e:	2b15      	cmp	r3, #21
 800ca10:	d8f6      	bhi.n	800ca00 <_printf_i+0x28>
 800ca12:	a101      	add	r1, pc, #4	@ (adr r1, 800ca18 <_printf_i+0x40>)
 800ca14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca18:	0800ca71 	.word	0x0800ca71
 800ca1c:	0800ca85 	.word	0x0800ca85
 800ca20:	0800ca01 	.word	0x0800ca01
 800ca24:	0800ca01 	.word	0x0800ca01
 800ca28:	0800ca01 	.word	0x0800ca01
 800ca2c:	0800ca01 	.word	0x0800ca01
 800ca30:	0800ca85 	.word	0x0800ca85
 800ca34:	0800ca01 	.word	0x0800ca01
 800ca38:	0800ca01 	.word	0x0800ca01
 800ca3c:	0800ca01 	.word	0x0800ca01
 800ca40:	0800ca01 	.word	0x0800ca01
 800ca44:	0800cb85 	.word	0x0800cb85
 800ca48:	0800caaf 	.word	0x0800caaf
 800ca4c:	0800cb3f 	.word	0x0800cb3f
 800ca50:	0800ca01 	.word	0x0800ca01
 800ca54:	0800ca01 	.word	0x0800ca01
 800ca58:	0800cba7 	.word	0x0800cba7
 800ca5c:	0800ca01 	.word	0x0800ca01
 800ca60:	0800caaf 	.word	0x0800caaf
 800ca64:	0800ca01 	.word	0x0800ca01
 800ca68:	0800ca01 	.word	0x0800ca01
 800ca6c:	0800cb47 	.word	0x0800cb47
 800ca70:	6833      	ldr	r3, [r6, #0]
 800ca72:	1d1a      	adds	r2, r3, #4
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	6032      	str	r2, [r6, #0]
 800ca78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ca80:	2301      	movs	r3, #1
 800ca82:	e09d      	b.n	800cbc0 <_printf_i+0x1e8>
 800ca84:	6833      	ldr	r3, [r6, #0]
 800ca86:	6820      	ldr	r0, [r4, #0]
 800ca88:	1d19      	adds	r1, r3, #4
 800ca8a:	6031      	str	r1, [r6, #0]
 800ca8c:	0606      	lsls	r6, r0, #24
 800ca8e:	d501      	bpl.n	800ca94 <_printf_i+0xbc>
 800ca90:	681d      	ldr	r5, [r3, #0]
 800ca92:	e003      	b.n	800ca9c <_printf_i+0xc4>
 800ca94:	0645      	lsls	r5, r0, #25
 800ca96:	d5fb      	bpl.n	800ca90 <_printf_i+0xb8>
 800ca98:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ca9c:	2d00      	cmp	r5, #0
 800ca9e:	da03      	bge.n	800caa8 <_printf_i+0xd0>
 800caa0:	232d      	movs	r3, #45	@ 0x2d
 800caa2:	426d      	negs	r5, r5
 800caa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800caa8:	4859      	ldr	r0, [pc, #356]	@ (800cc10 <_printf_i+0x238>)
 800caaa:	230a      	movs	r3, #10
 800caac:	e011      	b.n	800cad2 <_printf_i+0xfa>
 800caae:	6821      	ldr	r1, [r4, #0]
 800cab0:	6833      	ldr	r3, [r6, #0]
 800cab2:	0608      	lsls	r0, r1, #24
 800cab4:	f853 5b04 	ldr.w	r5, [r3], #4
 800cab8:	d402      	bmi.n	800cac0 <_printf_i+0xe8>
 800caba:	0649      	lsls	r1, r1, #25
 800cabc:	bf48      	it	mi
 800cabe:	b2ad      	uxthmi	r5, r5
 800cac0:	2f6f      	cmp	r7, #111	@ 0x6f
 800cac2:	4853      	ldr	r0, [pc, #332]	@ (800cc10 <_printf_i+0x238>)
 800cac4:	6033      	str	r3, [r6, #0]
 800cac6:	bf14      	ite	ne
 800cac8:	230a      	movne	r3, #10
 800caca:	2308      	moveq	r3, #8
 800cacc:	2100      	movs	r1, #0
 800cace:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cad2:	6866      	ldr	r6, [r4, #4]
 800cad4:	60a6      	str	r6, [r4, #8]
 800cad6:	2e00      	cmp	r6, #0
 800cad8:	bfa2      	ittt	ge
 800cada:	6821      	ldrge	r1, [r4, #0]
 800cadc:	f021 0104 	bicge.w	r1, r1, #4
 800cae0:	6021      	strge	r1, [r4, #0]
 800cae2:	b90d      	cbnz	r5, 800cae8 <_printf_i+0x110>
 800cae4:	2e00      	cmp	r6, #0
 800cae6:	d04b      	beq.n	800cb80 <_printf_i+0x1a8>
 800cae8:	4616      	mov	r6, r2
 800caea:	fbb5 f1f3 	udiv	r1, r5, r3
 800caee:	fb03 5711 	mls	r7, r3, r1, r5
 800caf2:	5dc7      	ldrb	r7, [r0, r7]
 800caf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800caf8:	462f      	mov	r7, r5
 800cafa:	42bb      	cmp	r3, r7
 800cafc:	460d      	mov	r5, r1
 800cafe:	d9f4      	bls.n	800caea <_printf_i+0x112>
 800cb00:	2b08      	cmp	r3, #8
 800cb02:	d10b      	bne.n	800cb1c <_printf_i+0x144>
 800cb04:	6823      	ldr	r3, [r4, #0]
 800cb06:	07df      	lsls	r7, r3, #31
 800cb08:	d508      	bpl.n	800cb1c <_printf_i+0x144>
 800cb0a:	6923      	ldr	r3, [r4, #16]
 800cb0c:	6861      	ldr	r1, [r4, #4]
 800cb0e:	4299      	cmp	r1, r3
 800cb10:	bfde      	ittt	le
 800cb12:	2330      	movle	r3, #48	@ 0x30
 800cb14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cb18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cb1c:	1b92      	subs	r2, r2, r6
 800cb1e:	6122      	str	r2, [r4, #16]
 800cb20:	f8cd a000 	str.w	sl, [sp]
 800cb24:	464b      	mov	r3, r9
 800cb26:	aa03      	add	r2, sp, #12
 800cb28:	4621      	mov	r1, r4
 800cb2a:	4640      	mov	r0, r8
 800cb2c:	f7ff fee6 	bl	800c8fc <_printf_common>
 800cb30:	3001      	adds	r0, #1
 800cb32:	d14a      	bne.n	800cbca <_printf_i+0x1f2>
 800cb34:	f04f 30ff 	mov.w	r0, #4294967295
 800cb38:	b004      	add	sp, #16
 800cb3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb3e:	6823      	ldr	r3, [r4, #0]
 800cb40:	f043 0320 	orr.w	r3, r3, #32
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	4833      	ldr	r0, [pc, #204]	@ (800cc14 <_printf_i+0x23c>)
 800cb48:	2778      	movs	r7, #120	@ 0x78
 800cb4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	6831      	ldr	r1, [r6, #0]
 800cb52:	061f      	lsls	r7, r3, #24
 800cb54:	f851 5b04 	ldr.w	r5, [r1], #4
 800cb58:	d402      	bmi.n	800cb60 <_printf_i+0x188>
 800cb5a:	065f      	lsls	r7, r3, #25
 800cb5c:	bf48      	it	mi
 800cb5e:	b2ad      	uxthmi	r5, r5
 800cb60:	6031      	str	r1, [r6, #0]
 800cb62:	07d9      	lsls	r1, r3, #31
 800cb64:	bf44      	itt	mi
 800cb66:	f043 0320 	orrmi.w	r3, r3, #32
 800cb6a:	6023      	strmi	r3, [r4, #0]
 800cb6c:	b11d      	cbz	r5, 800cb76 <_printf_i+0x19e>
 800cb6e:	2310      	movs	r3, #16
 800cb70:	e7ac      	b.n	800cacc <_printf_i+0xf4>
 800cb72:	4827      	ldr	r0, [pc, #156]	@ (800cc10 <_printf_i+0x238>)
 800cb74:	e7e9      	b.n	800cb4a <_printf_i+0x172>
 800cb76:	6823      	ldr	r3, [r4, #0]
 800cb78:	f023 0320 	bic.w	r3, r3, #32
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	e7f6      	b.n	800cb6e <_printf_i+0x196>
 800cb80:	4616      	mov	r6, r2
 800cb82:	e7bd      	b.n	800cb00 <_printf_i+0x128>
 800cb84:	6833      	ldr	r3, [r6, #0]
 800cb86:	6825      	ldr	r5, [r4, #0]
 800cb88:	6961      	ldr	r1, [r4, #20]
 800cb8a:	1d18      	adds	r0, r3, #4
 800cb8c:	6030      	str	r0, [r6, #0]
 800cb8e:	062e      	lsls	r6, r5, #24
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	d501      	bpl.n	800cb98 <_printf_i+0x1c0>
 800cb94:	6019      	str	r1, [r3, #0]
 800cb96:	e002      	b.n	800cb9e <_printf_i+0x1c6>
 800cb98:	0668      	lsls	r0, r5, #25
 800cb9a:	d5fb      	bpl.n	800cb94 <_printf_i+0x1bc>
 800cb9c:	8019      	strh	r1, [r3, #0]
 800cb9e:	2300      	movs	r3, #0
 800cba0:	6123      	str	r3, [r4, #16]
 800cba2:	4616      	mov	r6, r2
 800cba4:	e7bc      	b.n	800cb20 <_printf_i+0x148>
 800cba6:	6833      	ldr	r3, [r6, #0]
 800cba8:	1d1a      	adds	r2, r3, #4
 800cbaa:	6032      	str	r2, [r6, #0]
 800cbac:	681e      	ldr	r6, [r3, #0]
 800cbae:	6862      	ldr	r2, [r4, #4]
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	f7f3 fb14 	bl	80001e0 <memchr>
 800cbb8:	b108      	cbz	r0, 800cbbe <_printf_i+0x1e6>
 800cbba:	1b80      	subs	r0, r0, r6
 800cbbc:	6060      	str	r0, [r4, #4]
 800cbbe:	6863      	ldr	r3, [r4, #4]
 800cbc0:	6123      	str	r3, [r4, #16]
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbc8:	e7aa      	b.n	800cb20 <_printf_i+0x148>
 800cbca:	6923      	ldr	r3, [r4, #16]
 800cbcc:	4632      	mov	r2, r6
 800cbce:	4649      	mov	r1, r9
 800cbd0:	4640      	mov	r0, r8
 800cbd2:	47d0      	blx	sl
 800cbd4:	3001      	adds	r0, #1
 800cbd6:	d0ad      	beq.n	800cb34 <_printf_i+0x15c>
 800cbd8:	6823      	ldr	r3, [r4, #0]
 800cbda:	079b      	lsls	r3, r3, #30
 800cbdc:	d413      	bmi.n	800cc06 <_printf_i+0x22e>
 800cbde:	68e0      	ldr	r0, [r4, #12]
 800cbe0:	9b03      	ldr	r3, [sp, #12]
 800cbe2:	4298      	cmp	r0, r3
 800cbe4:	bfb8      	it	lt
 800cbe6:	4618      	movlt	r0, r3
 800cbe8:	e7a6      	b.n	800cb38 <_printf_i+0x160>
 800cbea:	2301      	movs	r3, #1
 800cbec:	4632      	mov	r2, r6
 800cbee:	4649      	mov	r1, r9
 800cbf0:	4640      	mov	r0, r8
 800cbf2:	47d0      	blx	sl
 800cbf4:	3001      	adds	r0, #1
 800cbf6:	d09d      	beq.n	800cb34 <_printf_i+0x15c>
 800cbf8:	3501      	adds	r5, #1
 800cbfa:	68e3      	ldr	r3, [r4, #12]
 800cbfc:	9903      	ldr	r1, [sp, #12]
 800cbfe:	1a5b      	subs	r3, r3, r1
 800cc00:	42ab      	cmp	r3, r5
 800cc02:	dcf2      	bgt.n	800cbea <_printf_i+0x212>
 800cc04:	e7eb      	b.n	800cbde <_printf_i+0x206>
 800cc06:	2500      	movs	r5, #0
 800cc08:	f104 0619 	add.w	r6, r4, #25
 800cc0c:	e7f5      	b.n	800cbfa <_printf_i+0x222>
 800cc0e:	bf00      	nop
 800cc10:	08010eca 	.word	0x08010eca
 800cc14:	08010edb 	.word	0x08010edb

0800cc18 <_scanf_float>:
 800cc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1c:	b087      	sub	sp, #28
 800cc1e:	4617      	mov	r7, r2
 800cc20:	9303      	str	r3, [sp, #12]
 800cc22:	688b      	ldr	r3, [r1, #8]
 800cc24:	1e5a      	subs	r2, r3, #1
 800cc26:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cc2a:	bf81      	itttt	hi
 800cc2c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cc30:	eb03 0b05 	addhi.w	fp, r3, r5
 800cc34:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cc38:	608b      	strhi	r3, [r1, #8]
 800cc3a:	680b      	ldr	r3, [r1, #0]
 800cc3c:	460a      	mov	r2, r1
 800cc3e:	f04f 0500 	mov.w	r5, #0
 800cc42:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cc46:	f842 3b1c 	str.w	r3, [r2], #28
 800cc4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cc4e:	4680      	mov	r8, r0
 800cc50:	460c      	mov	r4, r1
 800cc52:	bf98      	it	ls
 800cc54:	f04f 0b00 	movls.w	fp, #0
 800cc58:	9201      	str	r2, [sp, #4]
 800cc5a:	4616      	mov	r6, r2
 800cc5c:	46aa      	mov	sl, r5
 800cc5e:	46a9      	mov	r9, r5
 800cc60:	9502      	str	r5, [sp, #8]
 800cc62:	68a2      	ldr	r2, [r4, #8]
 800cc64:	b152      	cbz	r2, 800cc7c <_scanf_float+0x64>
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	2b4e      	cmp	r3, #78	@ 0x4e
 800cc6c:	d864      	bhi.n	800cd38 <_scanf_float+0x120>
 800cc6e:	2b40      	cmp	r3, #64	@ 0x40
 800cc70:	d83c      	bhi.n	800ccec <_scanf_float+0xd4>
 800cc72:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cc76:	b2c8      	uxtb	r0, r1
 800cc78:	280e      	cmp	r0, #14
 800cc7a:	d93a      	bls.n	800ccf2 <_scanf_float+0xda>
 800cc7c:	f1b9 0f00 	cmp.w	r9, #0
 800cc80:	d003      	beq.n	800cc8a <_scanf_float+0x72>
 800cc82:	6823      	ldr	r3, [r4, #0]
 800cc84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc8e:	f1ba 0f01 	cmp.w	sl, #1
 800cc92:	f200 8117 	bhi.w	800cec4 <_scanf_float+0x2ac>
 800cc96:	9b01      	ldr	r3, [sp, #4]
 800cc98:	429e      	cmp	r6, r3
 800cc9a:	f200 8108 	bhi.w	800ceae <_scanf_float+0x296>
 800cc9e:	2001      	movs	r0, #1
 800cca0:	b007      	add	sp, #28
 800cca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ccaa:	2a0d      	cmp	r2, #13
 800ccac:	d8e6      	bhi.n	800cc7c <_scanf_float+0x64>
 800ccae:	a101      	add	r1, pc, #4	@ (adr r1, 800ccb4 <_scanf_float+0x9c>)
 800ccb0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ccb4:	0800cdfb 	.word	0x0800cdfb
 800ccb8:	0800cc7d 	.word	0x0800cc7d
 800ccbc:	0800cc7d 	.word	0x0800cc7d
 800ccc0:	0800cc7d 	.word	0x0800cc7d
 800ccc4:	0800ce5b 	.word	0x0800ce5b
 800ccc8:	0800ce33 	.word	0x0800ce33
 800cccc:	0800cc7d 	.word	0x0800cc7d
 800ccd0:	0800cc7d 	.word	0x0800cc7d
 800ccd4:	0800ce09 	.word	0x0800ce09
 800ccd8:	0800cc7d 	.word	0x0800cc7d
 800ccdc:	0800cc7d 	.word	0x0800cc7d
 800cce0:	0800cc7d 	.word	0x0800cc7d
 800cce4:	0800cc7d 	.word	0x0800cc7d
 800cce8:	0800cdc1 	.word	0x0800cdc1
 800ccec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800ccf0:	e7db      	b.n	800ccaa <_scanf_float+0x92>
 800ccf2:	290e      	cmp	r1, #14
 800ccf4:	d8c2      	bhi.n	800cc7c <_scanf_float+0x64>
 800ccf6:	a001      	add	r0, pc, #4	@ (adr r0, 800ccfc <_scanf_float+0xe4>)
 800ccf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ccfc:	0800cdb1 	.word	0x0800cdb1
 800cd00:	0800cc7d 	.word	0x0800cc7d
 800cd04:	0800cdb1 	.word	0x0800cdb1
 800cd08:	0800ce47 	.word	0x0800ce47
 800cd0c:	0800cc7d 	.word	0x0800cc7d
 800cd10:	0800cd59 	.word	0x0800cd59
 800cd14:	0800cd97 	.word	0x0800cd97
 800cd18:	0800cd97 	.word	0x0800cd97
 800cd1c:	0800cd97 	.word	0x0800cd97
 800cd20:	0800cd97 	.word	0x0800cd97
 800cd24:	0800cd97 	.word	0x0800cd97
 800cd28:	0800cd97 	.word	0x0800cd97
 800cd2c:	0800cd97 	.word	0x0800cd97
 800cd30:	0800cd97 	.word	0x0800cd97
 800cd34:	0800cd97 	.word	0x0800cd97
 800cd38:	2b6e      	cmp	r3, #110	@ 0x6e
 800cd3a:	d809      	bhi.n	800cd50 <_scanf_float+0x138>
 800cd3c:	2b60      	cmp	r3, #96	@ 0x60
 800cd3e:	d8b2      	bhi.n	800cca6 <_scanf_float+0x8e>
 800cd40:	2b54      	cmp	r3, #84	@ 0x54
 800cd42:	d07b      	beq.n	800ce3c <_scanf_float+0x224>
 800cd44:	2b59      	cmp	r3, #89	@ 0x59
 800cd46:	d199      	bne.n	800cc7c <_scanf_float+0x64>
 800cd48:	2d07      	cmp	r5, #7
 800cd4a:	d197      	bne.n	800cc7c <_scanf_float+0x64>
 800cd4c:	2508      	movs	r5, #8
 800cd4e:	e02c      	b.n	800cdaa <_scanf_float+0x192>
 800cd50:	2b74      	cmp	r3, #116	@ 0x74
 800cd52:	d073      	beq.n	800ce3c <_scanf_float+0x224>
 800cd54:	2b79      	cmp	r3, #121	@ 0x79
 800cd56:	e7f6      	b.n	800cd46 <_scanf_float+0x12e>
 800cd58:	6821      	ldr	r1, [r4, #0]
 800cd5a:	05c8      	lsls	r0, r1, #23
 800cd5c:	d51b      	bpl.n	800cd96 <_scanf_float+0x17e>
 800cd5e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cd62:	6021      	str	r1, [r4, #0]
 800cd64:	f109 0901 	add.w	r9, r9, #1
 800cd68:	f1bb 0f00 	cmp.w	fp, #0
 800cd6c:	d003      	beq.n	800cd76 <_scanf_float+0x15e>
 800cd6e:	3201      	adds	r2, #1
 800cd70:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cd74:	60a2      	str	r2, [r4, #8]
 800cd76:	68a3      	ldr	r3, [r4, #8]
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	60a3      	str	r3, [r4, #8]
 800cd7c:	6923      	ldr	r3, [r4, #16]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	6123      	str	r3, [r4, #16]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	3b01      	subs	r3, #1
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	607b      	str	r3, [r7, #4]
 800cd8a:	f340 8087 	ble.w	800ce9c <_scanf_float+0x284>
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	3301      	adds	r3, #1
 800cd92:	603b      	str	r3, [r7, #0]
 800cd94:	e765      	b.n	800cc62 <_scanf_float+0x4a>
 800cd96:	eb1a 0105 	adds.w	r1, sl, r5
 800cd9a:	f47f af6f 	bne.w	800cc7c <_scanf_float+0x64>
 800cd9e:	6822      	ldr	r2, [r4, #0]
 800cda0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cda4:	6022      	str	r2, [r4, #0]
 800cda6:	460d      	mov	r5, r1
 800cda8:	468a      	mov	sl, r1
 800cdaa:	f806 3b01 	strb.w	r3, [r6], #1
 800cdae:	e7e2      	b.n	800cd76 <_scanf_float+0x15e>
 800cdb0:	6822      	ldr	r2, [r4, #0]
 800cdb2:	0610      	lsls	r0, r2, #24
 800cdb4:	f57f af62 	bpl.w	800cc7c <_scanf_float+0x64>
 800cdb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cdbc:	6022      	str	r2, [r4, #0]
 800cdbe:	e7f4      	b.n	800cdaa <_scanf_float+0x192>
 800cdc0:	f1ba 0f00 	cmp.w	sl, #0
 800cdc4:	d10e      	bne.n	800cde4 <_scanf_float+0x1cc>
 800cdc6:	f1b9 0f00 	cmp.w	r9, #0
 800cdca:	d10e      	bne.n	800cdea <_scanf_float+0x1d2>
 800cdcc:	6822      	ldr	r2, [r4, #0]
 800cdce:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cdd2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cdd6:	d108      	bne.n	800cdea <_scanf_float+0x1d2>
 800cdd8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cddc:	6022      	str	r2, [r4, #0]
 800cdde:	f04f 0a01 	mov.w	sl, #1
 800cde2:	e7e2      	b.n	800cdaa <_scanf_float+0x192>
 800cde4:	f1ba 0f02 	cmp.w	sl, #2
 800cde8:	d055      	beq.n	800ce96 <_scanf_float+0x27e>
 800cdea:	2d01      	cmp	r5, #1
 800cdec:	d002      	beq.n	800cdf4 <_scanf_float+0x1dc>
 800cdee:	2d04      	cmp	r5, #4
 800cdf0:	f47f af44 	bne.w	800cc7c <_scanf_float+0x64>
 800cdf4:	3501      	adds	r5, #1
 800cdf6:	b2ed      	uxtb	r5, r5
 800cdf8:	e7d7      	b.n	800cdaa <_scanf_float+0x192>
 800cdfa:	f1ba 0f01 	cmp.w	sl, #1
 800cdfe:	f47f af3d 	bne.w	800cc7c <_scanf_float+0x64>
 800ce02:	f04f 0a02 	mov.w	sl, #2
 800ce06:	e7d0      	b.n	800cdaa <_scanf_float+0x192>
 800ce08:	b97d      	cbnz	r5, 800ce2a <_scanf_float+0x212>
 800ce0a:	f1b9 0f00 	cmp.w	r9, #0
 800ce0e:	f47f af38 	bne.w	800cc82 <_scanf_float+0x6a>
 800ce12:	6822      	ldr	r2, [r4, #0]
 800ce14:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ce18:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ce1c:	f040 8108 	bne.w	800d030 <_scanf_float+0x418>
 800ce20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ce24:	6022      	str	r2, [r4, #0]
 800ce26:	2501      	movs	r5, #1
 800ce28:	e7bf      	b.n	800cdaa <_scanf_float+0x192>
 800ce2a:	2d03      	cmp	r5, #3
 800ce2c:	d0e2      	beq.n	800cdf4 <_scanf_float+0x1dc>
 800ce2e:	2d05      	cmp	r5, #5
 800ce30:	e7de      	b.n	800cdf0 <_scanf_float+0x1d8>
 800ce32:	2d02      	cmp	r5, #2
 800ce34:	f47f af22 	bne.w	800cc7c <_scanf_float+0x64>
 800ce38:	2503      	movs	r5, #3
 800ce3a:	e7b6      	b.n	800cdaa <_scanf_float+0x192>
 800ce3c:	2d06      	cmp	r5, #6
 800ce3e:	f47f af1d 	bne.w	800cc7c <_scanf_float+0x64>
 800ce42:	2507      	movs	r5, #7
 800ce44:	e7b1      	b.n	800cdaa <_scanf_float+0x192>
 800ce46:	6822      	ldr	r2, [r4, #0]
 800ce48:	0591      	lsls	r1, r2, #22
 800ce4a:	f57f af17 	bpl.w	800cc7c <_scanf_float+0x64>
 800ce4e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ce52:	6022      	str	r2, [r4, #0]
 800ce54:	f8cd 9008 	str.w	r9, [sp, #8]
 800ce58:	e7a7      	b.n	800cdaa <_scanf_float+0x192>
 800ce5a:	6822      	ldr	r2, [r4, #0]
 800ce5c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ce60:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ce64:	d006      	beq.n	800ce74 <_scanf_float+0x25c>
 800ce66:	0550      	lsls	r0, r2, #21
 800ce68:	f57f af08 	bpl.w	800cc7c <_scanf_float+0x64>
 800ce6c:	f1b9 0f00 	cmp.w	r9, #0
 800ce70:	f000 80de 	beq.w	800d030 <_scanf_float+0x418>
 800ce74:	0591      	lsls	r1, r2, #22
 800ce76:	bf58      	it	pl
 800ce78:	9902      	ldrpl	r1, [sp, #8]
 800ce7a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ce7e:	bf58      	it	pl
 800ce80:	eba9 0101 	subpl.w	r1, r9, r1
 800ce84:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ce88:	bf58      	it	pl
 800ce8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ce8e:	6022      	str	r2, [r4, #0]
 800ce90:	f04f 0900 	mov.w	r9, #0
 800ce94:	e789      	b.n	800cdaa <_scanf_float+0x192>
 800ce96:	f04f 0a03 	mov.w	sl, #3
 800ce9a:	e786      	b.n	800cdaa <_scanf_float+0x192>
 800ce9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cea0:	4639      	mov	r1, r7
 800cea2:	4640      	mov	r0, r8
 800cea4:	4798      	blx	r3
 800cea6:	2800      	cmp	r0, #0
 800cea8:	f43f aedb 	beq.w	800cc62 <_scanf_float+0x4a>
 800ceac:	e6e6      	b.n	800cc7c <_scanf_float+0x64>
 800ceae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ceb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ceb6:	463a      	mov	r2, r7
 800ceb8:	4640      	mov	r0, r8
 800ceba:	4798      	blx	r3
 800cebc:	6923      	ldr	r3, [r4, #16]
 800cebe:	3b01      	subs	r3, #1
 800cec0:	6123      	str	r3, [r4, #16]
 800cec2:	e6e8      	b.n	800cc96 <_scanf_float+0x7e>
 800cec4:	1e6b      	subs	r3, r5, #1
 800cec6:	2b06      	cmp	r3, #6
 800cec8:	d824      	bhi.n	800cf14 <_scanf_float+0x2fc>
 800ceca:	2d02      	cmp	r5, #2
 800cecc:	d836      	bhi.n	800cf3c <_scanf_float+0x324>
 800cece:	9b01      	ldr	r3, [sp, #4]
 800ced0:	429e      	cmp	r6, r3
 800ced2:	f67f aee4 	bls.w	800cc9e <_scanf_float+0x86>
 800ced6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ceda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cede:	463a      	mov	r2, r7
 800cee0:	4640      	mov	r0, r8
 800cee2:	4798      	blx	r3
 800cee4:	6923      	ldr	r3, [r4, #16]
 800cee6:	3b01      	subs	r3, #1
 800cee8:	6123      	str	r3, [r4, #16]
 800ceea:	e7f0      	b.n	800cece <_scanf_float+0x2b6>
 800ceec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cef0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cef4:	463a      	mov	r2, r7
 800cef6:	4640      	mov	r0, r8
 800cef8:	4798      	blx	r3
 800cefa:	6923      	ldr	r3, [r4, #16]
 800cefc:	3b01      	subs	r3, #1
 800cefe:	6123      	str	r3, [r4, #16]
 800cf00:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf04:	fa5f fa8a 	uxtb.w	sl, sl
 800cf08:	f1ba 0f02 	cmp.w	sl, #2
 800cf0c:	d1ee      	bne.n	800ceec <_scanf_float+0x2d4>
 800cf0e:	3d03      	subs	r5, #3
 800cf10:	b2ed      	uxtb	r5, r5
 800cf12:	1b76      	subs	r6, r6, r5
 800cf14:	6823      	ldr	r3, [r4, #0]
 800cf16:	05da      	lsls	r2, r3, #23
 800cf18:	d530      	bpl.n	800cf7c <_scanf_float+0x364>
 800cf1a:	055b      	lsls	r3, r3, #21
 800cf1c:	d511      	bpl.n	800cf42 <_scanf_float+0x32a>
 800cf1e:	9b01      	ldr	r3, [sp, #4]
 800cf20:	429e      	cmp	r6, r3
 800cf22:	f67f aebc 	bls.w	800cc9e <_scanf_float+0x86>
 800cf26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cf2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cf2e:	463a      	mov	r2, r7
 800cf30:	4640      	mov	r0, r8
 800cf32:	4798      	blx	r3
 800cf34:	6923      	ldr	r3, [r4, #16]
 800cf36:	3b01      	subs	r3, #1
 800cf38:	6123      	str	r3, [r4, #16]
 800cf3a:	e7f0      	b.n	800cf1e <_scanf_float+0x306>
 800cf3c:	46aa      	mov	sl, r5
 800cf3e:	46b3      	mov	fp, r6
 800cf40:	e7de      	b.n	800cf00 <_scanf_float+0x2e8>
 800cf42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cf46:	6923      	ldr	r3, [r4, #16]
 800cf48:	2965      	cmp	r1, #101	@ 0x65
 800cf4a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cf4e:	f106 35ff 	add.w	r5, r6, #4294967295
 800cf52:	6123      	str	r3, [r4, #16]
 800cf54:	d00c      	beq.n	800cf70 <_scanf_float+0x358>
 800cf56:	2945      	cmp	r1, #69	@ 0x45
 800cf58:	d00a      	beq.n	800cf70 <_scanf_float+0x358>
 800cf5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cf5e:	463a      	mov	r2, r7
 800cf60:	4640      	mov	r0, r8
 800cf62:	4798      	blx	r3
 800cf64:	6923      	ldr	r3, [r4, #16]
 800cf66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cf6a:	3b01      	subs	r3, #1
 800cf6c:	1eb5      	subs	r5, r6, #2
 800cf6e:	6123      	str	r3, [r4, #16]
 800cf70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cf74:	463a      	mov	r2, r7
 800cf76:	4640      	mov	r0, r8
 800cf78:	4798      	blx	r3
 800cf7a:	462e      	mov	r6, r5
 800cf7c:	6822      	ldr	r2, [r4, #0]
 800cf7e:	f012 0210 	ands.w	r2, r2, #16
 800cf82:	d001      	beq.n	800cf88 <_scanf_float+0x370>
 800cf84:	2000      	movs	r0, #0
 800cf86:	e68b      	b.n	800cca0 <_scanf_float+0x88>
 800cf88:	7032      	strb	r2, [r6, #0]
 800cf8a:	6823      	ldr	r3, [r4, #0]
 800cf8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cf90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf94:	d11c      	bne.n	800cfd0 <_scanf_float+0x3b8>
 800cf96:	9b02      	ldr	r3, [sp, #8]
 800cf98:	454b      	cmp	r3, r9
 800cf9a:	eba3 0209 	sub.w	r2, r3, r9
 800cf9e:	d123      	bne.n	800cfe8 <_scanf_float+0x3d0>
 800cfa0:	9901      	ldr	r1, [sp, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	4640      	mov	r0, r8
 800cfa6:	f002 fc07 	bl	800f7b8 <_strtod_r>
 800cfaa:	9b03      	ldr	r3, [sp, #12]
 800cfac:	6821      	ldr	r1, [r4, #0]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f011 0f02 	tst.w	r1, #2
 800cfb4:	ec57 6b10 	vmov	r6, r7, d0
 800cfb8:	f103 0204 	add.w	r2, r3, #4
 800cfbc:	d01f      	beq.n	800cffe <_scanf_float+0x3e6>
 800cfbe:	9903      	ldr	r1, [sp, #12]
 800cfc0:	600a      	str	r2, [r1, #0]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	e9c3 6700 	strd	r6, r7, [r3]
 800cfc8:	68e3      	ldr	r3, [r4, #12]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	60e3      	str	r3, [r4, #12]
 800cfce:	e7d9      	b.n	800cf84 <_scanf_float+0x36c>
 800cfd0:	9b04      	ldr	r3, [sp, #16]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d0e4      	beq.n	800cfa0 <_scanf_float+0x388>
 800cfd6:	9905      	ldr	r1, [sp, #20]
 800cfd8:	230a      	movs	r3, #10
 800cfda:	3101      	adds	r1, #1
 800cfdc:	4640      	mov	r0, r8
 800cfde:	f002 fc6b 	bl	800f8b8 <_strtol_r>
 800cfe2:	9b04      	ldr	r3, [sp, #16]
 800cfe4:	9e05      	ldr	r6, [sp, #20]
 800cfe6:	1ac2      	subs	r2, r0, r3
 800cfe8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cfec:	429e      	cmp	r6, r3
 800cfee:	bf28      	it	cs
 800cff0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cff4:	4910      	ldr	r1, [pc, #64]	@ (800d038 <_scanf_float+0x420>)
 800cff6:	4630      	mov	r0, r6
 800cff8:	f000 f8e4 	bl	800d1c4 <siprintf>
 800cffc:	e7d0      	b.n	800cfa0 <_scanf_float+0x388>
 800cffe:	f011 0f04 	tst.w	r1, #4
 800d002:	9903      	ldr	r1, [sp, #12]
 800d004:	600a      	str	r2, [r1, #0]
 800d006:	d1dc      	bne.n	800cfc2 <_scanf_float+0x3aa>
 800d008:	681d      	ldr	r5, [r3, #0]
 800d00a:	4632      	mov	r2, r6
 800d00c:	463b      	mov	r3, r7
 800d00e:	4630      	mov	r0, r6
 800d010:	4639      	mov	r1, r7
 800d012:	f7f3 fd93 	bl	8000b3c <__aeabi_dcmpun>
 800d016:	b128      	cbz	r0, 800d024 <_scanf_float+0x40c>
 800d018:	4808      	ldr	r0, [pc, #32]	@ (800d03c <_scanf_float+0x424>)
 800d01a:	f000 f9c5 	bl	800d3a8 <nanf>
 800d01e:	ed85 0a00 	vstr	s0, [r5]
 800d022:	e7d1      	b.n	800cfc8 <_scanf_float+0x3b0>
 800d024:	4630      	mov	r0, r6
 800d026:	4639      	mov	r1, r7
 800d028:	f7f3 fde6 	bl	8000bf8 <__aeabi_d2f>
 800d02c:	6028      	str	r0, [r5, #0]
 800d02e:	e7cb      	b.n	800cfc8 <_scanf_float+0x3b0>
 800d030:	f04f 0900 	mov.w	r9, #0
 800d034:	e629      	b.n	800cc8a <_scanf_float+0x72>
 800d036:	bf00      	nop
 800d038:	08010eec 	.word	0x08010eec
 800d03c:	08011285 	.word	0x08011285

0800d040 <std>:
 800d040:	2300      	movs	r3, #0
 800d042:	b510      	push	{r4, lr}
 800d044:	4604      	mov	r4, r0
 800d046:	e9c0 3300 	strd	r3, r3, [r0]
 800d04a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d04e:	6083      	str	r3, [r0, #8]
 800d050:	8181      	strh	r1, [r0, #12]
 800d052:	6643      	str	r3, [r0, #100]	@ 0x64
 800d054:	81c2      	strh	r2, [r0, #14]
 800d056:	6183      	str	r3, [r0, #24]
 800d058:	4619      	mov	r1, r3
 800d05a:	2208      	movs	r2, #8
 800d05c:	305c      	adds	r0, #92	@ 0x5c
 800d05e:	f000 f914 	bl	800d28a <memset>
 800d062:	4b0d      	ldr	r3, [pc, #52]	@ (800d098 <std+0x58>)
 800d064:	6263      	str	r3, [r4, #36]	@ 0x24
 800d066:	4b0d      	ldr	r3, [pc, #52]	@ (800d09c <std+0x5c>)
 800d068:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d06a:	4b0d      	ldr	r3, [pc, #52]	@ (800d0a0 <std+0x60>)
 800d06c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d06e:	4b0d      	ldr	r3, [pc, #52]	@ (800d0a4 <std+0x64>)
 800d070:	6323      	str	r3, [r4, #48]	@ 0x30
 800d072:	4b0d      	ldr	r3, [pc, #52]	@ (800d0a8 <std+0x68>)
 800d074:	6224      	str	r4, [r4, #32]
 800d076:	429c      	cmp	r4, r3
 800d078:	d006      	beq.n	800d088 <std+0x48>
 800d07a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d07e:	4294      	cmp	r4, r2
 800d080:	d002      	beq.n	800d088 <std+0x48>
 800d082:	33d0      	adds	r3, #208	@ 0xd0
 800d084:	429c      	cmp	r4, r3
 800d086:	d105      	bne.n	800d094 <std+0x54>
 800d088:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d090:	f000 b978 	b.w	800d384 <__retarget_lock_init_recursive>
 800d094:	bd10      	pop	{r4, pc}
 800d096:	bf00      	nop
 800d098:	0800d205 	.word	0x0800d205
 800d09c:	0800d227 	.word	0x0800d227
 800d0a0:	0800d25f 	.word	0x0800d25f
 800d0a4:	0800d283 	.word	0x0800d283
 800d0a8:	20004bb8 	.word	0x20004bb8

0800d0ac <stdio_exit_handler>:
 800d0ac:	4a02      	ldr	r2, [pc, #8]	@ (800d0b8 <stdio_exit_handler+0xc>)
 800d0ae:	4903      	ldr	r1, [pc, #12]	@ (800d0bc <stdio_exit_handler+0x10>)
 800d0b0:	4803      	ldr	r0, [pc, #12]	@ (800d0c0 <stdio_exit_handler+0x14>)
 800d0b2:	f000 b869 	b.w	800d188 <_fwalk_sglue>
 800d0b6:	bf00      	nop
 800d0b8:	20000034 	.word	0x20000034
 800d0bc:	0800fc75 	.word	0x0800fc75
 800d0c0:	20000044 	.word	0x20000044

0800d0c4 <cleanup_stdio>:
 800d0c4:	6841      	ldr	r1, [r0, #4]
 800d0c6:	4b0c      	ldr	r3, [pc, #48]	@ (800d0f8 <cleanup_stdio+0x34>)
 800d0c8:	4299      	cmp	r1, r3
 800d0ca:	b510      	push	{r4, lr}
 800d0cc:	4604      	mov	r4, r0
 800d0ce:	d001      	beq.n	800d0d4 <cleanup_stdio+0x10>
 800d0d0:	f002 fdd0 	bl	800fc74 <_fflush_r>
 800d0d4:	68a1      	ldr	r1, [r4, #8]
 800d0d6:	4b09      	ldr	r3, [pc, #36]	@ (800d0fc <cleanup_stdio+0x38>)
 800d0d8:	4299      	cmp	r1, r3
 800d0da:	d002      	beq.n	800d0e2 <cleanup_stdio+0x1e>
 800d0dc:	4620      	mov	r0, r4
 800d0de:	f002 fdc9 	bl	800fc74 <_fflush_r>
 800d0e2:	68e1      	ldr	r1, [r4, #12]
 800d0e4:	4b06      	ldr	r3, [pc, #24]	@ (800d100 <cleanup_stdio+0x3c>)
 800d0e6:	4299      	cmp	r1, r3
 800d0e8:	d004      	beq.n	800d0f4 <cleanup_stdio+0x30>
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0f0:	f002 bdc0 	b.w	800fc74 <_fflush_r>
 800d0f4:	bd10      	pop	{r4, pc}
 800d0f6:	bf00      	nop
 800d0f8:	20004bb8 	.word	0x20004bb8
 800d0fc:	20004c20 	.word	0x20004c20
 800d100:	20004c88 	.word	0x20004c88

0800d104 <global_stdio_init.part.0>:
 800d104:	b510      	push	{r4, lr}
 800d106:	4b0b      	ldr	r3, [pc, #44]	@ (800d134 <global_stdio_init.part.0+0x30>)
 800d108:	4c0b      	ldr	r4, [pc, #44]	@ (800d138 <global_stdio_init.part.0+0x34>)
 800d10a:	4a0c      	ldr	r2, [pc, #48]	@ (800d13c <global_stdio_init.part.0+0x38>)
 800d10c:	601a      	str	r2, [r3, #0]
 800d10e:	4620      	mov	r0, r4
 800d110:	2200      	movs	r2, #0
 800d112:	2104      	movs	r1, #4
 800d114:	f7ff ff94 	bl	800d040 <std>
 800d118:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d11c:	2201      	movs	r2, #1
 800d11e:	2109      	movs	r1, #9
 800d120:	f7ff ff8e 	bl	800d040 <std>
 800d124:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d128:	2202      	movs	r2, #2
 800d12a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d12e:	2112      	movs	r1, #18
 800d130:	f7ff bf86 	b.w	800d040 <std>
 800d134:	20004cf0 	.word	0x20004cf0
 800d138:	20004bb8 	.word	0x20004bb8
 800d13c:	0800d0ad 	.word	0x0800d0ad

0800d140 <__sfp_lock_acquire>:
 800d140:	4801      	ldr	r0, [pc, #4]	@ (800d148 <__sfp_lock_acquire+0x8>)
 800d142:	f000 b920 	b.w	800d386 <__retarget_lock_acquire_recursive>
 800d146:	bf00      	nop
 800d148:	20004cf9 	.word	0x20004cf9

0800d14c <__sfp_lock_release>:
 800d14c:	4801      	ldr	r0, [pc, #4]	@ (800d154 <__sfp_lock_release+0x8>)
 800d14e:	f000 b91b 	b.w	800d388 <__retarget_lock_release_recursive>
 800d152:	bf00      	nop
 800d154:	20004cf9 	.word	0x20004cf9

0800d158 <__sinit>:
 800d158:	b510      	push	{r4, lr}
 800d15a:	4604      	mov	r4, r0
 800d15c:	f7ff fff0 	bl	800d140 <__sfp_lock_acquire>
 800d160:	6a23      	ldr	r3, [r4, #32]
 800d162:	b11b      	cbz	r3, 800d16c <__sinit+0x14>
 800d164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d168:	f7ff bff0 	b.w	800d14c <__sfp_lock_release>
 800d16c:	4b04      	ldr	r3, [pc, #16]	@ (800d180 <__sinit+0x28>)
 800d16e:	6223      	str	r3, [r4, #32]
 800d170:	4b04      	ldr	r3, [pc, #16]	@ (800d184 <__sinit+0x2c>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d1f5      	bne.n	800d164 <__sinit+0xc>
 800d178:	f7ff ffc4 	bl	800d104 <global_stdio_init.part.0>
 800d17c:	e7f2      	b.n	800d164 <__sinit+0xc>
 800d17e:	bf00      	nop
 800d180:	0800d0c5 	.word	0x0800d0c5
 800d184:	20004cf0 	.word	0x20004cf0

0800d188 <_fwalk_sglue>:
 800d188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d18c:	4607      	mov	r7, r0
 800d18e:	4688      	mov	r8, r1
 800d190:	4614      	mov	r4, r2
 800d192:	2600      	movs	r6, #0
 800d194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d198:	f1b9 0901 	subs.w	r9, r9, #1
 800d19c:	d505      	bpl.n	800d1aa <_fwalk_sglue+0x22>
 800d19e:	6824      	ldr	r4, [r4, #0]
 800d1a0:	2c00      	cmp	r4, #0
 800d1a2:	d1f7      	bne.n	800d194 <_fwalk_sglue+0xc>
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1aa:	89ab      	ldrh	r3, [r5, #12]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d907      	bls.n	800d1c0 <_fwalk_sglue+0x38>
 800d1b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	d003      	beq.n	800d1c0 <_fwalk_sglue+0x38>
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	4638      	mov	r0, r7
 800d1bc:	47c0      	blx	r8
 800d1be:	4306      	orrs	r6, r0
 800d1c0:	3568      	adds	r5, #104	@ 0x68
 800d1c2:	e7e9      	b.n	800d198 <_fwalk_sglue+0x10>

0800d1c4 <siprintf>:
 800d1c4:	b40e      	push	{r1, r2, r3}
 800d1c6:	b500      	push	{lr}
 800d1c8:	b09c      	sub	sp, #112	@ 0x70
 800d1ca:	ab1d      	add	r3, sp, #116	@ 0x74
 800d1cc:	9002      	str	r0, [sp, #8]
 800d1ce:	9006      	str	r0, [sp, #24]
 800d1d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d1d4:	4809      	ldr	r0, [pc, #36]	@ (800d1fc <siprintf+0x38>)
 800d1d6:	9107      	str	r1, [sp, #28]
 800d1d8:	9104      	str	r1, [sp, #16]
 800d1da:	4909      	ldr	r1, [pc, #36]	@ (800d200 <siprintf+0x3c>)
 800d1dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1e0:	9105      	str	r1, [sp, #20]
 800d1e2:	6800      	ldr	r0, [r0, #0]
 800d1e4:	9301      	str	r3, [sp, #4]
 800d1e6:	a902      	add	r1, sp, #8
 800d1e8:	f002 fbc4 	bl	800f974 <_svfiprintf_r>
 800d1ec:	9b02      	ldr	r3, [sp, #8]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	701a      	strb	r2, [r3, #0]
 800d1f2:	b01c      	add	sp, #112	@ 0x70
 800d1f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1f8:	b003      	add	sp, #12
 800d1fa:	4770      	bx	lr
 800d1fc:	20000040 	.word	0x20000040
 800d200:	ffff0208 	.word	0xffff0208

0800d204 <__sread>:
 800d204:	b510      	push	{r4, lr}
 800d206:	460c      	mov	r4, r1
 800d208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d20c:	f000 f86c 	bl	800d2e8 <_read_r>
 800d210:	2800      	cmp	r0, #0
 800d212:	bfab      	itete	ge
 800d214:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d216:	89a3      	ldrhlt	r3, [r4, #12]
 800d218:	181b      	addge	r3, r3, r0
 800d21a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d21e:	bfac      	ite	ge
 800d220:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d222:	81a3      	strhlt	r3, [r4, #12]
 800d224:	bd10      	pop	{r4, pc}

0800d226 <__swrite>:
 800d226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d22a:	461f      	mov	r7, r3
 800d22c:	898b      	ldrh	r3, [r1, #12]
 800d22e:	05db      	lsls	r3, r3, #23
 800d230:	4605      	mov	r5, r0
 800d232:	460c      	mov	r4, r1
 800d234:	4616      	mov	r6, r2
 800d236:	d505      	bpl.n	800d244 <__swrite+0x1e>
 800d238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d23c:	2302      	movs	r3, #2
 800d23e:	2200      	movs	r2, #0
 800d240:	f000 f840 	bl	800d2c4 <_lseek_r>
 800d244:	89a3      	ldrh	r3, [r4, #12]
 800d246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d24a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d24e:	81a3      	strh	r3, [r4, #12]
 800d250:	4632      	mov	r2, r6
 800d252:	463b      	mov	r3, r7
 800d254:	4628      	mov	r0, r5
 800d256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d25a:	f000 b857 	b.w	800d30c <_write_r>

0800d25e <__sseek>:
 800d25e:	b510      	push	{r4, lr}
 800d260:	460c      	mov	r4, r1
 800d262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d266:	f000 f82d 	bl	800d2c4 <_lseek_r>
 800d26a:	1c43      	adds	r3, r0, #1
 800d26c:	89a3      	ldrh	r3, [r4, #12]
 800d26e:	bf15      	itete	ne
 800d270:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d272:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d276:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d27a:	81a3      	strheq	r3, [r4, #12]
 800d27c:	bf18      	it	ne
 800d27e:	81a3      	strhne	r3, [r4, #12]
 800d280:	bd10      	pop	{r4, pc}

0800d282 <__sclose>:
 800d282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d286:	f000 b80d 	b.w	800d2a4 <_close_r>

0800d28a <memset>:
 800d28a:	4402      	add	r2, r0
 800d28c:	4603      	mov	r3, r0
 800d28e:	4293      	cmp	r3, r2
 800d290:	d100      	bne.n	800d294 <memset+0xa>
 800d292:	4770      	bx	lr
 800d294:	f803 1b01 	strb.w	r1, [r3], #1
 800d298:	e7f9      	b.n	800d28e <memset+0x4>
	...

0800d29c <_localeconv_r>:
 800d29c:	4800      	ldr	r0, [pc, #0]	@ (800d2a0 <_localeconv_r+0x4>)
 800d29e:	4770      	bx	lr
 800d2a0:	20000180 	.word	0x20000180

0800d2a4 <_close_r>:
 800d2a4:	b538      	push	{r3, r4, r5, lr}
 800d2a6:	4d06      	ldr	r5, [pc, #24]	@ (800d2c0 <_close_r+0x1c>)
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	4608      	mov	r0, r1
 800d2ae:	602b      	str	r3, [r5, #0]
 800d2b0:	f7f5 fd66 	bl	8002d80 <_close>
 800d2b4:	1c43      	adds	r3, r0, #1
 800d2b6:	d102      	bne.n	800d2be <_close_r+0x1a>
 800d2b8:	682b      	ldr	r3, [r5, #0]
 800d2ba:	b103      	cbz	r3, 800d2be <_close_r+0x1a>
 800d2bc:	6023      	str	r3, [r4, #0]
 800d2be:	bd38      	pop	{r3, r4, r5, pc}
 800d2c0:	20004cf4 	.word	0x20004cf4

0800d2c4 <_lseek_r>:
 800d2c4:	b538      	push	{r3, r4, r5, lr}
 800d2c6:	4d07      	ldr	r5, [pc, #28]	@ (800d2e4 <_lseek_r+0x20>)
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	4608      	mov	r0, r1
 800d2cc:	4611      	mov	r1, r2
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	602a      	str	r2, [r5, #0]
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	f7f5 fd7b 	bl	8002dce <_lseek>
 800d2d8:	1c43      	adds	r3, r0, #1
 800d2da:	d102      	bne.n	800d2e2 <_lseek_r+0x1e>
 800d2dc:	682b      	ldr	r3, [r5, #0]
 800d2de:	b103      	cbz	r3, 800d2e2 <_lseek_r+0x1e>
 800d2e0:	6023      	str	r3, [r4, #0]
 800d2e2:	bd38      	pop	{r3, r4, r5, pc}
 800d2e4:	20004cf4 	.word	0x20004cf4

0800d2e8 <_read_r>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	4d07      	ldr	r5, [pc, #28]	@ (800d308 <_read_r+0x20>)
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	4608      	mov	r0, r1
 800d2f0:	4611      	mov	r1, r2
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	602a      	str	r2, [r5, #0]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	f7f5 fd09 	bl	8002d0e <_read>
 800d2fc:	1c43      	adds	r3, r0, #1
 800d2fe:	d102      	bne.n	800d306 <_read_r+0x1e>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	b103      	cbz	r3, 800d306 <_read_r+0x1e>
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	bd38      	pop	{r3, r4, r5, pc}
 800d308:	20004cf4 	.word	0x20004cf4

0800d30c <_write_r>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	4d07      	ldr	r5, [pc, #28]	@ (800d32c <_write_r+0x20>)
 800d310:	4604      	mov	r4, r0
 800d312:	4608      	mov	r0, r1
 800d314:	4611      	mov	r1, r2
 800d316:	2200      	movs	r2, #0
 800d318:	602a      	str	r2, [r5, #0]
 800d31a:	461a      	mov	r2, r3
 800d31c:	f7f5 fd14 	bl	8002d48 <_write>
 800d320:	1c43      	adds	r3, r0, #1
 800d322:	d102      	bne.n	800d32a <_write_r+0x1e>
 800d324:	682b      	ldr	r3, [r5, #0]
 800d326:	b103      	cbz	r3, 800d32a <_write_r+0x1e>
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	bd38      	pop	{r3, r4, r5, pc}
 800d32c:	20004cf4 	.word	0x20004cf4

0800d330 <__errno>:
 800d330:	4b01      	ldr	r3, [pc, #4]	@ (800d338 <__errno+0x8>)
 800d332:	6818      	ldr	r0, [r3, #0]
 800d334:	4770      	bx	lr
 800d336:	bf00      	nop
 800d338:	20000040 	.word	0x20000040

0800d33c <__libc_init_array>:
 800d33c:	b570      	push	{r4, r5, r6, lr}
 800d33e:	4d0d      	ldr	r5, [pc, #52]	@ (800d374 <__libc_init_array+0x38>)
 800d340:	4c0d      	ldr	r4, [pc, #52]	@ (800d378 <__libc_init_array+0x3c>)
 800d342:	1b64      	subs	r4, r4, r5
 800d344:	10a4      	asrs	r4, r4, #2
 800d346:	2600      	movs	r6, #0
 800d348:	42a6      	cmp	r6, r4
 800d34a:	d109      	bne.n	800d360 <__libc_init_array+0x24>
 800d34c:	4d0b      	ldr	r5, [pc, #44]	@ (800d37c <__libc_init_array+0x40>)
 800d34e:	4c0c      	ldr	r4, [pc, #48]	@ (800d380 <__libc_init_array+0x44>)
 800d350:	f003 fb74 	bl	8010a3c <_init>
 800d354:	1b64      	subs	r4, r4, r5
 800d356:	10a4      	asrs	r4, r4, #2
 800d358:	2600      	movs	r6, #0
 800d35a:	42a6      	cmp	r6, r4
 800d35c:	d105      	bne.n	800d36a <__libc_init_array+0x2e>
 800d35e:	bd70      	pop	{r4, r5, r6, pc}
 800d360:	f855 3b04 	ldr.w	r3, [r5], #4
 800d364:	4798      	blx	r3
 800d366:	3601      	adds	r6, #1
 800d368:	e7ee      	b.n	800d348 <__libc_init_array+0xc>
 800d36a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d36e:	4798      	blx	r3
 800d370:	3601      	adds	r6, #1
 800d372:	e7f2      	b.n	800d35a <__libc_init_array+0x1e>
 800d374:	080112f0 	.word	0x080112f0
 800d378:	080112f0 	.word	0x080112f0
 800d37c:	080112f0 	.word	0x080112f0
 800d380:	080112f4 	.word	0x080112f4

0800d384 <__retarget_lock_init_recursive>:
 800d384:	4770      	bx	lr

0800d386 <__retarget_lock_acquire_recursive>:
 800d386:	4770      	bx	lr

0800d388 <__retarget_lock_release_recursive>:
 800d388:	4770      	bx	lr

0800d38a <memcpy>:
 800d38a:	440a      	add	r2, r1
 800d38c:	4291      	cmp	r1, r2
 800d38e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d392:	d100      	bne.n	800d396 <memcpy+0xc>
 800d394:	4770      	bx	lr
 800d396:	b510      	push	{r4, lr}
 800d398:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d39c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3a0:	4291      	cmp	r1, r2
 800d3a2:	d1f9      	bne.n	800d398 <memcpy+0xe>
 800d3a4:	bd10      	pop	{r4, pc}
	...

0800d3a8 <nanf>:
 800d3a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d3b0 <nanf+0x8>
 800d3ac:	4770      	bx	lr
 800d3ae:	bf00      	nop
 800d3b0:	7fc00000 	.word	0x7fc00000

0800d3b4 <quorem>:
 800d3b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b8:	6903      	ldr	r3, [r0, #16]
 800d3ba:	690c      	ldr	r4, [r1, #16]
 800d3bc:	42a3      	cmp	r3, r4
 800d3be:	4607      	mov	r7, r0
 800d3c0:	db7e      	blt.n	800d4c0 <quorem+0x10c>
 800d3c2:	3c01      	subs	r4, #1
 800d3c4:	f101 0814 	add.w	r8, r1, #20
 800d3c8:	00a3      	lsls	r3, r4, #2
 800d3ca:	f100 0514 	add.w	r5, r0, #20
 800d3ce:	9300      	str	r3, [sp, #0]
 800d3d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3d4:	9301      	str	r3, [sp, #4]
 800d3d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d3da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3e6:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3ea:	d32e      	bcc.n	800d44a <quorem+0x96>
 800d3ec:	f04f 0a00 	mov.w	sl, #0
 800d3f0:	46c4      	mov	ip, r8
 800d3f2:	46ae      	mov	lr, r5
 800d3f4:	46d3      	mov	fp, sl
 800d3f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d3fa:	b298      	uxth	r0, r3
 800d3fc:	fb06 a000 	mla	r0, r6, r0, sl
 800d400:	0c02      	lsrs	r2, r0, #16
 800d402:	0c1b      	lsrs	r3, r3, #16
 800d404:	fb06 2303 	mla	r3, r6, r3, r2
 800d408:	f8de 2000 	ldr.w	r2, [lr]
 800d40c:	b280      	uxth	r0, r0
 800d40e:	b292      	uxth	r2, r2
 800d410:	1a12      	subs	r2, r2, r0
 800d412:	445a      	add	r2, fp
 800d414:	f8de 0000 	ldr.w	r0, [lr]
 800d418:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d422:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d426:	b292      	uxth	r2, r2
 800d428:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d42c:	45e1      	cmp	r9, ip
 800d42e:	f84e 2b04 	str.w	r2, [lr], #4
 800d432:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d436:	d2de      	bcs.n	800d3f6 <quorem+0x42>
 800d438:	9b00      	ldr	r3, [sp, #0]
 800d43a:	58eb      	ldr	r3, [r5, r3]
 800d43c:	b92b      	cbnz	r3, 800d44a <quorem+0x96>
 800d43e:	9b01      	ldr	r3, [sp, #4]
 800d440:	3b04      	subs	r3, #4
 800d442:	429d      	cmp	r5, r3
 800d444:	461a      	mov	r2, r3
 800d446:	d32f      	bcc.n	800d4a8 <quorem+0xf4>
 800d448:	613c      	str	r4, [r7, #16]
 800d44a:	4638      	mov	r0, r7
 800d44c:	f001 f9c4 	bl	800e7d8 <__mcmp>
 800d450:	2800      	cmp	r0, #0
 800d452:	db25      	blt.n	800d4a0 <quorem+0xec>
 800d454:	4629      	mov	r1, r5
 800d456:	2000      	movs	r0, #0
 800d458:	f858 2b04 	ldr.w	r2, [r8], #4
 800d45c:	f8d1 c000 	ldr.w	ip, [r1]
 800d460:	fa1f fe82 	uxth.w	lr, r2
 800d464:	fa1f f38c 	uxth.w	r3, ip
 800d468:	eba3 030e 	sub.w	r3, r3, lr
 800d46c:	4403      	add	r3, r0
 800d46e:	0c12      	lsrs	r2, r2, #16
 800d470:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d474:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d478:	b29b      	uxth	r3, r3
 800d47a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d47e:	45c1      	cmp	r9, r8
 800d480:	f841 3b04 	str.w	r3, [r1], #4
 800d484:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d488:	d2e6      	bcs.n	800d458 <quorem+0xa4>
 800d48a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d48e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d492:	b922      	cbnz	r2, 800d49e <quorem+0xea>
 800d494:	3b04      	subs	r3, #4
 800d496:	429d      	cmp	r5, r3
 800d498:	461a      	mov	r2, r3
 800d49a:	d30b      	bcc.n	800d4b4 <quorem+0x100>
 800d49c:	613c      	str	r4, [r7, #16]
 800d49e:	3601      	adds	r6, #1
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	b003      	add	sp, #12
 800d4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a8:	6812      	ldr	r2, [r2, #0]
 800d4aa:	3b04      	subs	r3, #4
 800d4ac:	2a00      	cmp	r2, #0
 800d4ae:	d1cb      	bne.n	800d448 <quorem+0x94>
 800d4b0:	3c01      	subs	r4, #1
 800d4b2:	e7c6      	b.n	800d442 <quorem+0x8e>
 800d4b4:	6812      	ldr	r2, [r2, #0]
 800d4b6:	3b04      	subs	r3, #4
 800d4b8:	2a00      	cmp	r2, #0
 800d4ba:	d1ef      	bne.n	800d49c <quorem+0xe8>
 800d4bc:	3c01      	subs	r4, #1
 800d4be:	e7ea      	b.n	800d496 <quorem+0xe2>
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	e7ee      	b.n	800d4a2 <quorem+0xee>
 800d4c4:	0000      	movs	r0, r0
	...

0800d4c8 <_dtoa_r>:
 800d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	69c7      	ldr	r7, [r0, #28]
 800d4ce:	b099      	sub	sp, #100	@ 0x64
 800d4d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d4d4:	ec55 4b10 	vmov	r4, r5, d0
 800d4d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d4da:	9109      	str	r1, [sp, #36]	@ 0x24
 800d4dc:	4683      	mov	fp, r0
 800d4de:	920e      	str	r2, [sp, #56]	@ 0x38
 800d4e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d4e2:	b97f      	cbnz	r7, 800d504 <_dtoa_r+0x3c>
 800d4e4:	2010      	movs	r0, #16
 800d4e6:	f000 fdfd 	bl	800e0e4 <malloc>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	f8cb 001c 	str.w	r0, [fp, #28]
 800d4f0:	b920      	cbnz	r0, 800d4fc <_dtoa_r+0x34>
 800d4f2:	4ba7      	ldr	r3, [pc, #668]	@ (800d790 <_dtoa_r+0x2c8>)
 800d4f4:	21ef      	movs	r1, #239	@ 0xef
 800d4f6:	48a7      	ldr	r0, [pc, #668]	@ (800d794 <_dtoa_r+0x2cc>)
 800d4f8:	f002 fc2a 	bl	800fd50 <__assert_func>
 800d4fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d500:	6007      	str	r7, [r0, #0]
 800d502:	60c7      	str	r7, [r0, #12]
 800d504:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d508:	6819      	ldr	r1, [r3, #0]
 800d50a:	b159      	cbz	r1, 800d524 <_dtoa_r+0x5c>
 800d50c:	685a      	ldr	r2, [r3, #4]
 800d50e:	604a      	str	r2, [r1, #4]
 800d510:	2301      	movs	r3, #1
 800d512:	4093      	lsls	r3, r2
 800d514:	608b      	str	r3, [r1, #8]
 800d516:	4658      	mov	r0, fp
 800d518:	f000 feda 	bl	800e2d0 <_Bfree>
 800d51c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d520:	2200      	movs	r2, #0
 800d522:	601a      	str	r2, [r3, #0]
 800d524:	1e2b      	subs	r3, r5, #0
 800d526:	bfb9      	ittee	lt
 800d528:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d52c:	9303      	strlt	r3, [sp, #12]
 800d52e:	2300      	movge	r3, #0
 800d530:	6033      	strge	r3, [r6, #0]
 800d532:	9f03      	ldr	r7, [sp, #12]
 800d534:	4b98      	ldr	r3, [pc, #608]	@ (800d798 <_dtoa_r+0x2d0>)
 800d536:	bfbc      	itt	lt
 800d538:	2201      	movlt	r2, #1
 800d53a:	6032      	strlt	r2, [r6, #0]
 800d53c:	43bb      	bics	r3, r7
 800d53e:	d112      	bne.n	800d566 <_dtoa_r+0x9e>
 800d540:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d542:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d546:	6013      	str	r3, [r2, #0]
 800d548:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d54c:	4323      	orrs	r3, r4
 800d54e:	f000 854d 	beq.w	800dfec <_dtoa_r+0xb24>
 800d552:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d554:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d7ac <_dtoa_r+0x2e4>
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f000 854f 	beq.w	800dffc <_dtoa_r+0xb34>
 800d55e:	f10a 0303 	add.w	r3, sl, #3
 800d562:	f000 bd49 	b.w	800dff8 <_dtoa_r+0xb30>
 800d566:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d56a:	2200      	movs	r2, #0
 800d56c:	ec51 0b17 	vmov	r0, r1, d7
 800d570:	2300      	movs	r3, #0
 800d572:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d576:	f7f3 faaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800d57a:	4680      	mov	r8, r0
 800d57c:	b158      	cbz	r0, 800d596 <_dtoa_r+0xce>
 800d57e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d580:	2301      	movs	r3, #1
 800d582:	6013      	str	r3, [r2, #0]
 800d584:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d586:	b113      	cbz	r3, 800d58e <_dtoa_r+0xc6>
 800d588:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d58a:	4b84      	ldr	r3, [pc, #528]	@ (800d79c <_dtoa_r+0x2d4>)
 800d58c:	6013      	str	r3, [r2, #0]
 800d58e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d7b0 <_dtoa_r+0x2e8>
 800d592:	f000 bd33 	b.w	800dffc <_dtoa_r+0xb34>
 800d596:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d59a:	aa16      	add	r2, sp, #88	@ 0x58
 800d59c:	a917      	add	r1, sp, #92	@ 0x5c
 800d59e:	4658      	mov	r0, fp
 800d5a0:	f001 fa3a 	bl	800ea18 <__d2b>
 800d5a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d5a8:	4681      	mov	r9, r0
 800d5aa:	2e00      	cmp	r6, #0
 800d5ac:	d077      	beq.n	800d69e <_dtoa_r+0x1d6>
 800d5ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d5b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d5b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d5c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d5c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	4b74      	ldr	r3, [pc, #464]	@ (800d7a0 <_dtoa_r+0x2d8>)
 800d5ce:	f7f2 fe63 	bl	8000298 <__aeabi_dsub>
 800d5d2:	a369      	add	r3, pc, #420	@ (adr r3, 800d778 <_dtoa_r+0x2b0>)
 800d5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d8:	f7f3 f816 	bl	8000608 <__aeabi_dmul>
 800d5dc:	a368      	add	r3, pc, #416	@ (adr r3, 800d780 <_dtoa_r+0x2b8>)
 800d5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e2:	f7f2 fe5b 	bl	800029c <__adddf3>
 800d5e6:	4604      	mov	r4, r0
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	460d      	mov	r5, r1
 800d5ec:	f7f2 ffa2 	bl	8000534 <__aeabi_i2d>
 800d5f0:	a365      	add	r3, pc, #404	@ (adr r3, 800d788 <_dtoa_r+0x2c0>)
 800d5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f6:	f7f3 f807 	bl	8000608 <__aeabi_dmul>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	4620      	mov	r0, r4
 800d600:	4629      	mov	r1, r5
 800d602:	f7f2 fe4b 	bl	800029c <__adddf3>
 800d606:	4604      	mov	r4, r0
 800d608:	460d      	mov	r5, r1
 800d60a:	f7f3 faad 	bl	8000b68 <__aeabi_d2iz>
 800d60e:	2200      	movs	r2, #0
 800d610:	4607      	mov	r7, r0
 800d612:	2300      	movs	r3, #0
 800d614:	4620      	mov	r0, r4
 800d616:	4629      	mov	r1, r5
 800d618:	f7f3 fa68 	bl	8000aec <__aeabi_dcmplt>
 800d61c:	b140      	cbz	r0, 800d630 <_dtoa_r+0x168>
 800d61e:	4638      	mov	r0, r7
 800d620:	f7f2 ff88 	bl	8000534 <__aeabi_i2d>
 800d624:	4622      	mov	r2, r4
 800d626:	462b      	mov	r3, r5
 800d628:	f7f3 fa56 	bl	8000ad8 <__aeabi_dcmpeq>
 800d62c:	b900      	cbnz	r0, 800d630 <_dtoa_r+0x168>
 800d62e:	3f01      	subs	r7, #1
 800d630:	2f16      	cmp	r7, #22
 800d632:	d851      	bhi.n	800d6d8 <_dtoa_r+0x210>
 800d634:	4b5b      	ldr	r3, [pc, #364]	@ (800d7a4 <_dtoa_r+0x2dc>)
 800d636:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d642:	f7f3 fa53 	bl	8000aec <__aeabi_dcmplt>
 800d646:	2800      	cmp	r0, #0
 800d648:	d048      	beq.n	800d6dc <_dtoa_r+0x214>
 800d64a:	3f01      	subs	r7, #1
 800d64c:	2300      	movs	r3, #0
 800d64e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d650:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d652:	1b9b      	subs	r3, r3, r6
 800d654:	1e5a      	subs	r2, r3, #1
 800d656:	bf44      	itt	mi
 800d658:	f1c3 0801 	rsbmi	r8, r3, #1
 800d65c:	2300      	movmi	r3, #0
 800d65e:	9208      	str	r2, [sp, #32]
 800d660:	bf54      	ite	pl
 800d662:	f04f 0800 	movpl.w	r8, #0
 800d666:	9308      	strmi	r3, [sp, #32]
 800d668:	2f00      	cmp	r7, #0
 800d66a:	db39      	blt.n	800d6e0 <_dtoa_r+0x218>
 800d66c:	9b08      	ldr	r3, [sp, #32]
 800d66e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d670:	443b      	add	r3, r7
 800d672:	9308      	str	r3, [sp, #32]
 800d674:	2300      	movs	r3, #0
 800d676:	930a      	str	r3, [sp, #40]	@ 0x28
 800d678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d67a:	2b09      	cmp	r3, #9
 800d67c:	d864      	bhi.n	800d748 <_dtoa_r+0x280>
 800d67e:	2b05      	cmp	r3, #5
 800d680:	bfc4      	itt	gt
 800d682:	3b04      	subgt	r3, #4
 800d684:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d688:	f1a3 0302 	sub.w	r3, r3, #2
 800d68c:	bfcc      	ite	gt
 800d68e:	2400      	movgt	r4, #0
 800d690:	2401      	movle	r4, #1
 800d692:	2b03      	cmp	r3, #3
 800d694:	d863      	bhi.n	800d75e <_dtoa_r+0x296>
 800d696:	e8df f003 	tbb	[pc, r3]
 800d69a:	372a      	.short	0x372a
 800d69c:	5535      	.short	0x5535
 800d69e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d6a2:	441e      	add	r6, r3
 800d6a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d6a8:	2b20      	cmp	r3, #32
 800d6aa:	bfc1      	itttt	gt
 800d6ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d6b0:	409f      	lslgt	r7, r3
 800d6b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d6b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d6ba:	bfd6      	itet	le
 800d6bc:	f1c3 0320 	rsble	r3, r3, #32
 800d6c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800d6c4:	fa04 f003 	lslle.w	r0, r4, r3
 800d6c8:	f7f2 ff24 	bl	8000514 <__aeabi_ui2d>
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d6d2:	3e01      	subs	r6, #1
 800d6d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800d6d6:	e777      	b.n	800d5c8 <_dtoa_r+0x100>
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e7b8      	b.n	800d64e <_dtoa_r+0x186>
 800d6dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800d6de:	e7b7      	b.n	800d650 <_dtoa_r+0x188>
 800d6e0:	427b      	negs	r3, r7
 800d6e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	eba8 0807 	sub.w	r8, r8, r7
 800d6ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d6ec:	e7c4      	b.n	800d678 <_dtoa_r+0x1b0>
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	dc35      	bgt.n	800d764 <_dtoa_r+0x29c>
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	9307      	str	r3, [sp, #28]
 800d6fe:	461a      	mov	r2, r3
 800d700:	920e      	str	r2, [sp, #56]	@ 0x38
 800d702:	e00b      	b.n	800d71c <_dtoa_r+0x254>
 800d704:	2301      	movs	r3, #1
 800d706:	e7f3      	b.n	800d6f0 <_dtoa_r+0x228>
 800d708:	2300      	movs	r3, #0
 800d70a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d70c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d70e:	18fb      	adds	r3, r7, r3
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	3301      	adds	r3, #1
 800d714:	2b01      	cmp	r3, #1
 800d716:	9307      	str	r3, [sp, #28]
 800d718:	bfb8      	it	lt
 800d71a:	2301      	movlt	r3, #1
 800d71c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d720:	2100      	movs	r1, #0
 800d722:	2204      	movs	r2, #4
 800d724:	f102 0514 	add.w	r5, r2, #20
 800d728:	429d      	cmp	r5, r3
 800d72a:	d91f      	bls.n	800d76c <_dtoa_r+0x2a4>
 800d72c:	6041      	str	r1, [r0, #4]
 800d72e:	4658      	mov	r0, fp
 800d730:	f000 fd8e 	bl	800e250 <_Balloc>
 800d734:	4682      	mov	sl, r0
 800d736:	2800      	cmp	r0, #0
 800d738:	d13c      	bne.n	800d7b4 <_dtoa_r+0x2ec>
 800d73a:	4b1b      	ldr	r3, [pc, #108]	@ (800d7a8 <_dtoa_r+0x2e0>)
 800d73c:	4602      	mov	r2, r0
 800d73e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d742:	e6d8      	b.n	800d4f6 <_dtoa_r+0x2e>
 800d744:	2301      	movs	r3, #1
 800d746:	e7e0      	b.n	800d70a <_dtoa_r+0x242>
 800d748:	2401      	movs	r4, #1
 800d74a:	2300      	movs	r3, #0
 800d74c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d74e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d750:	f04f 33ff 	mov.w	r3, #4294967295
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	9307      	str	r3, [sp, #28]
 800d758:	2200      	movs	r2, #0
 800d75a:	2312      	movs	r3, #18
 800d75c:	e7d0      	b.n	800d700 <_dtoa_r+0x238>
 800d75e:	2301      	movs	r3, #1
 800d760:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d762:	e7f5      	b.n	800d750 <_dtoa_r+0x288>
 800d764:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d766:	9300      	str	r3, [sp, #0]
 800d768:	9307      	str	r3, [sp, #28]
 800d76a:	e7d7      	b.n	800d71c <_dtoa_r+0x254>
 800d76c:	3101      	adds	r1, #1
 800d76e:	0052      	lsls	r2, r2, #1
 800d770:	e7d8      	b.n	800d724 <_dtoa_r+0x25c>
 800d772:	bf00      	nop
 800d774:	f3af 8000 	nop.w
 800d778:	636f4361 	.word	0x636f4361
 800d77c:	3fd287a7 	.word	0x3fd287a7
 800d780:	8b60c8b3 	.word	0x8b60c8b3
 800d784:	3fc68a28 	.word	0x3fc68a28
 800d788:	509f79fb 	.word	0x509f79fb
 800d78c:	3fd34413 	.word	0x3fd34413
 800d790:	08010efe 	.word	0x08010efe
 800d794:	08010f15 	.word	0x08010f15
 800d798:	7ff00000 	.word	0x7ff00000
 800d79c:	08010ec9 	.word	0x08010ec9
 800d7a0:	3ff80000 	.word	0x3ff80000
 800d7a4:	08011010 	.word	0x08011010
 800d7a8:	08010f6d 	.word	0x08010f6d
 800d7ac:	08010efa 	.word	0x08010efa
 800d7b0:	08010ec8 	.word	0x08010ec8
 800d7b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d7b8:	6018      	str	r0, [r3, #0]
 800d7ba:	9b07      	ldr	r3, [sp, #28]
 800d7bc:	2b0e      	cmp	r3, #14
 800d7be:	f200 80a4 	bhi.w	800d90a <_dtoa_r+0x442>
 800d7c2:	2c00      	cmp	r4, #0
 800d7c4:	f000 80a1 	beq.w	800d90a <_dtoa_r+0x442>
 800d7c8:	2f00      	cmp	r7, #0
 800d7ca:	dd33      	ble.n	800d834 <_dtoa_r+0x36c>
 800d7cc:	4bad      	ldr	r3, [pc, #692]	@ (800da84 <_dtoa_r+0x5bc>)
 800d7ce:	f007 020f 	and.w	r2, r7, #15
 800d7d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7d6:	ed93 7b00 	vldr	d7, [r3]
 800d7da:	05f8      	lsls	r0, r7, #23
 800d7dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d7e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d7e4:	d516      	bpl.n	800d814 <_dtoa_r+0x34c>
 800d7e6:	4ba8      	ldr	r3, [pc, #672]	@ (800da88 <_dtoa_r+0x5c0>)
 800d7e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7f0:	f7f3 f834 	bl	800085c <__aeabi_ddiv>
 800d7f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7f8:	f004 040f 	and.w	r4, r4, #15
 800d7fc:	2603      	movs	r6, #3
 800d7fe:	4da2      	ldr	r5, [pc, #648]	@ (800da88 <_dtoa_r+0x5c0>)
 800d800:	b954      	cbnz	r4, 800d818 <_dtoa_r+0x350>
 800d802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d80a:	f7f3 f827 	bl	800085c <__aeabi_ddiv>
 800d80e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d812:	e028      	b.n	800d866 <_dtoa_r+0x39e>
 800d814:	2602      	movs	r6, #2
 800d816:	e7f2      	b.n	800d7fe <_dtoa_r+0x336>
 800d818:	07e1      	lsls	r1, r4, #31
 800d81a:	d508      	bpl.n	800d82e <_dtoa_r+0x366>
 800d81c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d820:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d824:	f7f2 fef0 	bl	8000608 <__aeabi_dmul>
 800d828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d82c:	3601      	adds	r6, #1
 800d82e:	1064      	asrs	r4, r4, #1
 800d830:	3508      	adds	r5, #8
 800d832:	e7e5      	b.n	800d800 <_dtoa_r+0x338>
 800d834:	f000 80d2 	beq.w	800d9dc <_dtoa_r+0x514>
 800d838:	427c      	negs	r4, r7
 800d83a:	4b92      	ldr	r3, [pc, #584]	@ (800da84 <_dtoa_r+0x5bc>)
 800d83c:	4d92      	ldr	r5, [pc, #584]	@ (800da88 <_dtoa_r+0x5c0>)
 800d83e:	f004 020f 	and.w	r2, r4, #15
 800d842:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d84e:	f7f2 fedb 	bl	8000608 <__aeabi_dmul>
 800d852:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d856:	1124      	asrs	r4, r4, #4
 800d858:	2300      	movs	r3, #0
 800d85a:	2602      	movs	r6, #2
 800d85c:	2c00      	cmp	r4, #0
 800d85e:	f040 80b2 	bne.w	800d9c6 <_dtoa_r+0x4fe>
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1d3      	bne.n	800d80e <_dtoa_r+0x346>
 800d866:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d868:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f000 80b7 	beq.w	800d9e0 <_dtoa_r+0x518>
 800d872:	4b86      	ldr	r3, [pc, #536]	@ (800da8c <_dtoa_r+0x5c4>)
 800d874:	2200      	movs	r2, #0
 800d876:	4620      	mov	r0, r4
 800d878:	4629      	mov	r1, r5
 800d87a:	f7f3 f937 	bl	8000aec <__aeabi_dcmplt>
 800d87e:	2800      	cmp	r0, #0
 800d880:	f000 80ae 	beq.w	800d9e0 <_dtoa_r+0x518>
 800d884:	9b07      	ldr	r3, [sp, #28]
 800d886:	2b00      	cmp	r3, #0
 800d888:	f000 80aa 	beq.w	800d9e0 <_dtoa_r+0x518>
 800d88c:	9b00      	ldr	r3, [sp, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	dd37      	ble.n	800d902 <_dtoa_r+0x43a>
 800d892:	1e7b      	subs	r3, r7, #1
 800d894:	9304      	str	r3, [sp, #16]
 800d896:	4620      	mov	r0, r4
 800d898:	4b7d      	ldr	r3, [pc, #500]	@ (800da90 <_dtoa_r+0x5c8>)
 800d89a:	2200      	movs	r2, #0
 800d89c:	4629      	mov	r1, r5
 800d89e:	f7f2 feb3 	bl	8000608 <__aeabi_dmul>
 800d8a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d8a6:	9c00      	ldr	r4, [sp, #0]
 800d8a8:	3601      	adds	r6, #1
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	f7f2 fe42 	bl	8000534 <__aeabi_i2d>
 800d8b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8b4:	f7f2 fea8 	bl	8000608 <__aeabi_dmul>
 800d8b8:	4b76      	ldr	r3, [pc, #472]	@ (800da94 <_dtoa_r+0x5cc>)
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f7f2 fcee 	bl	800029c <__adddf3>
 800d8c0:	4605      	mov	r5, r0
 800d8c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d8c6:	2c00      	cmp	r4, #0
 800d8c8:	f040 808d 	bne.w	800d9e6 <_dtoa_r+0x51e>
 800d8cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8d0:	4b71      	ldr	r3, [pc, #452]	@ (800da98 <_dtoa_r+0x5d0>)
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f7f2 fce0 	bl	8000298 <__aeabi_dsub>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	460b      	mov	r3, r1
 800d8dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d8e0:	462a      	mov	r2, r5
 800d8e2:	4633      	mov	r3, r6
 800d8e4:	f7f3 f920 	bl	8000b28 <__aeabi_dcmpgt>
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	f040 828b 	bne.w	800de04 <_dtoa_r+0x93c>
 800d8ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8f2:	462a      	mov	r2, r5
 800d8f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d8f8:	f7f3 f8f8 	bl	8000aec <__aeabi_dcmplt>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	f040 8128 	bne.w	800db52 <_dtoa_r+0x68a>
 800d902:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d906:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d90a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	f2c0 815a 	blt.w	800dbc6 <_dtoa_r+0x6fe>
 800d912:	2f0e      	cmp	r7, #14
 800d914:	f300 8157 	bgt.w	800dbc6 <_dtoa_r+0x6fe>
 800d918:	4b5a      	ldr	r3, [pc, #360]	@ (800da84 <_dtoa_r+0x5bc>)
 800d91a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d91e:	ed93 7b00 	vldr	d7, [r3]
 800d922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d924:	2b00      	cmp	r3, #0
 800d926:	ed8d 7b00 	vstr	d7, [sp]
 800d92a:	da03      	bge.n	800d934 <_dtoa_r+0x46c>
 800d92c:	9b07      	ldr	r3, [sp, #28]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f340 8101 	ble.w	800db36 <_dtoa_r+0x66e>
 800d934:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d938:	4656      	mov	r6, sl
 800d93a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d93e:	4620      	mov	r0, r4
 800d940:	4629      	mov	r1, r5
 800d942:	f7f2 ff8b 	bl	800085c <__aeabi_ddiv>
 800d946:	f7f3 f90f 	bl	8000b68 <__aeabi_d2iz>
 800d94a:	4680      	mov	r8, r0
 800d94c:	f7f2 fdf2 	bl	8000534 <__aeabi_i2d>
 800d950:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d954:	f7f2 fe58 	bl	8000608 <__aeabi_dmul>
 800d958:	4602      	mov	r2, r0
 800d95a:	460b      	mov	r3, r1
 800d95c:	4620      	mov	r0, r4
 800d95e:	4629      	mov	r1, r5
 800d960:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d964:	f7f2 fc98 	bl	8000298 <__aeabi_dsub>
 800d968:	f806 4b01 	strb.w	r4, [r6], #1
 800d96c:	9d07      	ldr	r5, [sp, #28]
 800d96e:	eba6 040a 	sub.w	r4, r6, sl
 800d972:	42a5      	cmp	r5, r4
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	f040 8117 	bne.w	800dbaa <_dtoa_r+0x6e2>
 800d97c:	f7f2 fc8e 	bl	800029c <__adddf3>
 800d980:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d984:	4604      	mov	r4, r0
 800d986:	460d      	mov	r5, r1
 800d988:	f7f3 f8ce 	bl	8000b28 <__aeabi_dcmpgt>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	f040 80f9 	bne.w	800db84 <_dtoa_r+0x6bc>
 800d992:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d996:	4620      	mov	r0, r4
 800d998:	4629      	mov	r1, r5
 800d99a:	f7f3 f89d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d99e:	b118      	cbz	r0, 800d9a8 <_dtoa_r+0x4e0>
 800d9a0:	f018 0f01 	tst.w	r8, #1
 800d9a4:	f040 80ee 	bne.w	800db84 <_dtoa_r+0x6bc>
 800d9a8:	4649      	mov	r1, r9
 800d9aa:	4658      	mov	r0, fp
 800d9ac:	f000 fc90 	bl	800e2d0 <_Bfree>
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	7033      	strb	r3, [r6, #0]
 800d9b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d9b6:	3701      	adds	r7, #1
 800d9b8:	601f      	str	r7, [r3, #0]
 800d9ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f000 831d 	beq.w	800dffc <_dtoa_r+0xb34>
 800d9c2:	601e      	str	r6, [r3, #0]
 800d9c4:	e31a      	b.n	800dffc <_dtoa_r+0xb34>
 800d9c6:	07e2      	lsls	r2, r4, #31
 800d9c8:	d505      	bpl.n	800d9d6 <_dtoa_r+0x50e>
 800d9ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9ce:	f7f2 fe1b 	bl	8000608 <__aeabi_dmul>
 800d9d2:	3601      	adds	r6, #1
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	1064      	asrs	r4, r4, #1
 800d9d8:	3508      	adds	r5, #8
 800d9da:	e73f      	b.n	800d85c <_dtoa_r+0x394>
 800d9dc:	2602      	movs	r6, #2
 800d9de:	e742      	b.n	800d866 <_dtoa_r+0x39e>
 800d9e0:	9c07      	ldr	r4, [sp, #28]
 800d9e2:	9704      	str	r7, [sp, #16]
 800d9e4:	e761      	b.n	800d8aa <_dtoa_r+0x3e2>
 800d9e6:	4b27      	ldr	r3, [pc, #156]	@ (800da84 <_dtoa_r+0x5bc>)
 800d9e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d9ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d9ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9f2:	4454      	add	r4, sl
 800d9f4:	2900      	cmp	r1, #0
 800d9f6:	d053      	beq.n	800daa0 <_dtoa_r+0x5d8>
 800d9f8:	4928      	ldr	r1, [pc, #160]	@ (800da9c <_dtoa_r+0x5d4>)
 800d9fa:	2000      	movs	r0, #0
 800d9fc:	f7f2 ff2e 	bl	800085c <__aeabi_ddiv>
 800da00:	4633      	mov	r3, r6
 800da02:	462a      	mov	r2, r5
 800da04:	f7f2 fc48 	bl	8000298 <__aeabi_dsub>
 800da08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da0c:	4656      	mov	r6, sl
 800da0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da12:	f7f3 f8a9 	bl	8000b68 <__aeabi_d2iz>
 800da16:	4605      	mov	r5, r0
 800da18:	f7f2 fd8c 	bl	8000534 <__aeabi_i2d>
 800da1c:	4602      	mov	r2, r0
 800da1e:	460b      	mov	r3, r1
 800da20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da24:	f7f2 fc38 	bl	8000298 <__aeabi_dsub>
 800da28:	3530      	adds	r5, #48	@ 0x30
 800da2a:	4602      	mov	r2, r0
 800da2c:	460b      	mov	r3, r1
 800da2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da32:	f806 5b01 	strb.w	r5, [r6], #1
 800da36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da3a:	f7f3 f857 	bl	8000aec <__aeabi_dcmplt>
 800da3e:	2800      	cmp	r0, #0
 800da40:	d171      	bne.n	800db26 <_dtoa_r+0x65e>
 800da42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da46:	4911      	ldr	r1, [pc, #68]	@ (800da8c <_dtoa_r+0x5c4>)
 800da48:	2000      	movs	r0, #0
 800da4a:	f7f2 fc25 	bl	8000298 <__aeabi_dsub>
 800da4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da52:	f7f3 f84b 	bl	8000aec <__aeabi_dcmplt>
 800da56:	2800      	cmp	r0, #0
 800da58:	f040 8095 	bne.w	800db86 <_dtoa_r+0x6be>
 800da5c:	42a6      	cmp	r6, r4
 800da5e:	f43f af50 	beq.w	800d902 <_dtoa_r+0x43a>
 800da62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da66:	4b0a      	ldr	r3, [pc, #40]	@ (800da90 <_dtoa_r+0x5c8>)
 800da68:	2200      	movs	r2, #0
 800da6a:	f7f2 fdcd 	bl	8000608 <__aeabi_dmul>
 800da6e:	4b08      	ldr	r3, [pc, #32]	@ (800da90 <_dtoa_r+0x5c8>)
 800da70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da74:	2200      	movs	r2, #0
 800da76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da7a:	f7f2 fdc5 	bl	8000608 <__aeabi_dmul>
 800da7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da82:	e7c4      	b.n	800da0e <_dtoa_r+0x546>
 800da84:	08011010 	.word	0x08011010
 800da88:	08010fe8 	.word	0x08010fe8
 800da8c:	3ff00000 	.word	0x3ff00000
 800da90:	40240000 	.word	0x40240000
 800da94:	401c0000 	.word	0x401c0000
 800da98:	40140000 	.word	0x40140000
 800da9c:	3fe00000 	.word	0x3fe00000
 800daa0:	4631      	mov	r1, r6
 800daa2:	4628      	mov	r0, r5
 800daa4:	f7f2 fdb0 	bl	8000608 <__aeabi_dmul>
 800daa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800daac:	9415      	str	r4, [sp, #84]	@ 0x54
 800daae:	4656      	mov	r6, sl
 800dab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dab4:	f7f3 f858 	bl	8000b68 <__aeabi_d2iz>
 800dab8:	4605      	mov	r5, r0
 800daba:	f7f2 fd3b 	bl	8000534 <__aeabi_i2d>
 800dabe:	4602      	mov	r2, r0
 800dac0:	460b      	mov	r3, r1
 800dac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dac6:	f7f2 fbe7 	bl	8000298 <__aeabi_dsub>
 800daca:	3530      	adds	r5, #48	@ 0x30
 800dacc:	f806 5b01 	strb.w	r5, [r6], #1
 800dad0:	4602      	mov	r2, r0
 800dad2:	460b      	mov	r3, r1
 800dad4:	42a6      	cmp	r6, r4
 800dad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dada:	f04f 0200 	mov.w	r2, #0
 800dade:	d124      	bne.n	800db2a <_dtoa_r+0x662>
 800dae0:	4bac      	ldr	r3, [pc, #688]	@ (800dd94 <_dtoa_r+0x8cc>)
 800dae2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dae6:	f7f2 fbd9 	bl	800029c <__adddf3>
 800daea:	4602      	mov	r2, r0
 800daec:	460b      	mov	r3, r1
 800daee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daf2:	f7f3 f819 	bl	8000b28 <__aeabi_dcmpgt>
 800daf6:	2800      	cmp	r0, #0
 800daf8:	d145      	bne.n	800db86 <_dtoa_r+0x6be>
 800dafa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dafe:	49a5      	ldr	r1, [pc, #660]	@ (800dd94 <_dtoa_r+0x8cc>)
 800db00:	2000      	movs	r0, #0
 800db02:	f7f2 fbc9 	bl	8000298 <__aeabi_dsub>
 800db06:	4602      	mov	r2, r0
 800db08:	460b      	mov	r3, r1
 800db0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db0e:	f7f2 ffed 	bl	8000aec <__aeabi_dcmplt>
 800db12:	2800      	cmp	r0, #0
 800db14:	f43f aef5 	beq.w	800d902 <_dtoa_r+0x43a>
 800db18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800db1a:	1e73      	subs	r3, r6, #1
 800db1c:	9315      	str	r3, [sp, #84]	@ 0x54
 800db1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db22:	2b30      	cmp	r3, #48	@ 0x30
 800db24:	d0f8      	beq.n	800db18 <_dtoa_r+0x650>
 800db26:	9f04      	ldr	r7, [sp, #16]
 800db28:	e73e      	b.n	800d9a8 <_dtoa_r+0x4e0>
 800db2a:	4b9b      	ldr	r3, [pc, #620]	@ (800dd98 <_dtoa_r+0x8d0>)
 800db2c:	f7f2 fd6c 	bl	8000608 <__aeabi_dmul>
 800db30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db34:	e7bc      	b.n	800dab0 <_dtoa_r+0x5e8>
 800db36:	d10c      	bne.n	800db52 <_dtoa_r+0x68a>
 800db38:	4b98      	ldr	r3, [pc, #608]	@ (800dd9c <_dtoa_r+0x8d4>)
 800db3a:	2200      	movs	r2, #0
 800db3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db40:	f7f2 fd62 	bl	8000608 <__aeabi_dmul>
 800db44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db48:	f7f2 ffe4 	bl	8000b14 <__aeabi_dcmpge>
 800db4c:	2800      	cmp	r0, #0
 800db4e:	f000 8157 	beq.w	800de00 <_dtoa_r+0x938>
 800db52:	2400      	movs	r4, #0
 800db54:	4625      	mov	r5, r4
 800db56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db58:	43db      	mvns	r3, r3
 800db5a:	9304      	str	r3, [sp, #16]
 800db5c:	4656      	mov	r6, sl
 800db5e:	2700      	movs	r7, #0
 800db60:	4621      	mov	r1, r4
 800db62:	4658      	mov	r0, fp
 800db64:	f000 fbb4 	bl	800e2d0 <_Bfree>
 800db68:	2d00      	cmp	r5, #0
 800db6a:	d0dc      	beq.n	800db26 <_dtoa_r+0x65e>
 800db6c:	b12f      	cbz	r7, 800db7a <_dtoa_r+0x6b2>
 800db6e:	42af      	cmp	r7, r5
 800db70:	d003      	beq.n	800db7a <_dtoa_r+0x6b2>
 800db72:	4639      	mov	r1, r7
 800db74:	4658      	mov	r0, fp
 800db76:	f000 fbab 	bl	800e2d0 <_Bfree>
 800db7a:	4629      	mov	r1, r5
 800db7c:	4658      	mov	r0, fp
 800db7e:	f000 fba7 	bl	800e2d0 <_Bfree>
 800db82:	e7d0      	b.n	800db26 <_dtoa_r+0x65e>
 800db84:	9704      	str	r7, [sp, #16]
 800db86:	4633      	mov	r3, r6
 800db88:	461e      	mov	r6, r3
 800db8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db8e:	2a39      	cmp	r2, #57	@ 0x39
 800db90:	d107      	bne.n	800dba2 <_dtoa_r+0x6da>
 800db92:	459a      	cmp	sl, r3
 800db94:	d1f8      	bne.n	800db88 <_dtoa_r+0x6c0>
 800db96:	9a04      	ldr	r2, [sp, #16]
 800db98:	3201      	adds	r2, #1
 800db9a:	9204      	str	r2, [sp, #16]
 800db9c:	2230      	movs	r2, #48	@ 0x30
 800db9e:	f88a 2000 	strb.w	r2, [sl]
 800dba2:	781a      	ldrb	r2, [r3, #0]
 800dba4:	3201      	adds	r2, #1
 800dba6:	701a      	strb	r2, [r3, #0]
 800dba8:	e7bd      	b.n	800db26 <_dtoa_r+0x65e>
 800dbaa:	4b7b      	ldr	r3, [pc, #492]	@ (800dd98 <_dtoa_r+0x8d0>)
 800dbac:	2200      	movs	r2, #0
 800dbae:	f7f2 fd2b 	bl	8000608 <__aeabi_dmul>
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	460d      	mov	r5, r1
 800dbba:	f7f2 ff8d 	bl	8000ad8 <__aeabi_dcmpeq>
 800dbbe:	2800      	cmp	r0, #0
 800dbc0:	f43f aebb 	beq.w	800d93a <_dtoa_r+0x472>
 800dbc4:	e6f0      	b.n	800d9a8 <_dtoa_r+0x4e0>
 800dbc6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dbc8:	2a00      	cmp	r2, #0
 800dbca:	f000 80db 	beq.w	800dd84 <_dtoa_r+0x8bc>
 800dbce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbd0:	2a01      	cmp	r2, #1
 800dbd2:	f300 80bf 	bgt.w	800dd54 <_dtoa_r+0x88c>
 800dbd6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800dbd8:	2a00      	cmp	r2, #0
 800dbda:	f000 80b7 	beq.w	800dd4c <_dtoa_r+0x884>
 800dbde:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dbe2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dbe4:	4646      	mov	r6, r8
 800dbe6:	9a08      	ldr	r2, [sp, #32]
 800dbe8:	2101      	movs	r1, #1
 800dbea:	441a      	add	r2, r3
 800dbec:	4658      	mov	r0, fp
 800dbee:	4498      	add	r8, r3
 800dbf0:	9208      	str	r2, [sp, #32]
 800dbf2:	f000 fc6b 	bl	800e4cc <__i2b>
 800dbf6:	4605      	mov	r5, r0
 800dbf8:	b15e      	cbz	r6, 800dc12 <_dtoa_r+0x74a>
 800dbfa:	9b08      	ldr	r3, [sp, #32]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	dd08      	ble.n	800dc12 <_dtoa_r+0x74a>
 800dc00:	42b3      	cmp	r3, r6
 800dc02:	9a08      	ldr	r2, [sp, #32]
 800dc04:	bfa8      	it	ge
 800dc06:	4633      	movge	r3, r6
 800dc08:	eba8 0803 	sub.w	r8, r8, r3
 800dc0c:	1af6      	subs	r6, r6, r3
 800dc0e:	1ad3      	subs	r3, r2, r3
 800dc10:	9308      	str	r3, [sp, #32]
 800dc12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc14:	b1f3      	cbz	r3, 800dc54 <_dtoa_r+0x78c>
 800dc16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f000 80b7 	beq.w	800dd8c <_dtoa_r+0x8c4>
 800dc1e:	b18c      	cbz	r4, 800dc44 <_dtoa_r+0x77c>
 800dc20:	4629      	mov	r1, r5
 800dc22:	4622      	mov	r2, r4
 800dc24:	4658      	mov	r0, fp
 800dc26:	f000 fd11 	bl	800e64c <__pow5mult>
 800dc2a:	464a      	mov	r2, r9
 800dc2c:	4601      	mov	r1, r0
 800dc2e:	4605      	mov	r5, r0
 800dc30:	4658      	mov	r0, fp
 800dc32:	f000 fc61 	bl	800e4f8 <__multiply>
 800dc36:	4649      	mov	r1, r9
 800dc38:	9004      	str	r0, [sp, #16]
 800dc3a:	4658      	mov	r0, fp
 800dc3c:	f000 fb48 	bl	800e2d0 <_Bfree>
 800dc40:	9b04      	ldr	r3, [sp, #16]
 800dc42:	4699      	mov	r9, r3
 800dc44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc46:	1b1a      	subs	r2, r3, r4
 800dc48:	d004      	beq.n	800dc54 <_dtoa_r+0x78c>
 800dc4a:	4649      	mov	r1, r9
 800dc4c:	4658      	mov	r0, fp
 800dc4e:	f000 fcfd 	bl	800e64c <__pow5mult>
 800dc52:	4681      	mov	r9, r0
 800dc54:	2101      	movs	r1, #1
 800dc56:	4658      	mov	r0, fp
 800dc58:	f000 fc38 	bl	800e4cc <__i2b>
 800dc5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc5e:	4604      	mov	r4, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f000 81cf 	beq.w	800e004 <_dtoa_r+0xb3c>
 800dc66:	461a      	mov	r2, r3
 800dc68:	4601      	mov	r1, r0
 800dc6a:	4658      	mov	r0, fp
 800dc6c:	f000 fcee 	bl	800e64c <__pow5mult>
 800dc70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	4604      	mov	r4, r0
 800dc76:	f300 8095 	bgt.w	800dda4 <_dtoa_r+0x8dc>
 800dc7a:	9b02      	ldr	r3, [sp, #8]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	f040 8087 	bne.w	800dd90 <_dtoa_r+0x8c8>
 800dc82:	9b03      	ldr	r3, [sp, #12]
 800dc84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f040 8089 	bne.w	800dda0 <_dtoa_r+0x8d8>
 800dc8e:	9b03      	ldr	r3, [sp, #12]
 800dc90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc94:	0d1b      	lsrs	r3, r3, #20
 800dc96:	051b      	lsls	r3, r3, #20
 800dc98:	b12b      	cbz	r3, 800dca6 <_dtoa_r+0x7de>
 800dc9a:	9b08      	ldr	r3, [sp, #32]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	9308      	str	r3, [sp, #32]
 800dca0:	f108 0801 	add.w	r8, r8, #1
 800dca4:	2301      	movs	r3, #1
 800dca6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	f000 81b0 	beq.w	800e010 <_dtoa_r+0xb48>
 800dcb0:	6923      	ldr	r3, [r4, #16]
 800dcb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dcb6:	6918      	ldr	r0, [r3, #16]
 800dcb8:	f000 fbbc 	bl	800e434 <__hi0bits>
 800dcbc:	f1c0 0020 	rsb	r0, r0, #32
 800dcc0:	9b08      	ldr	r3, [sp, #32]
 800dcc2:	4418      	add	r0, r3
 800dcc4:	f010 001f 	ands.w	r0, r0, #31
 800dcc8:	d077      	beq.n	800ddba <_dtoa_r+0x8f2>
 800dcca:	f1c0 0320 	rsb	r3, r0, #32
 800dcce:	2b04      	cmp	r3, #4
 800dcd0:	dd6b      	ble.n	800ddaa <_dtoa_r+0x8e2>
 800dcd2:	9b08      	ldr	r3, [sp, #32]
 800dcd4:	f1c0 001c 	rsb	r0, r0, #28
 800dcd8:	4403      	add	r3, r0
 800dcda:	4480      	add	r8, r0
 800dcdc:	4406      	add	r6, r0
 800dcde:	9308      	str	r3, [sp, #32]
 800dce0:	f1b8 0f00 	cmp.w	r8, #0
 800dce4:	dd05      	ble.n	800dcf2 <_dtoa_r+0x82a>
 800dce6:	4649      	mov	r1, r9
 800dce8:	4642      	mov	r2, r8
 800dcea:	4658      	mov	r0, fp
 800dcec:	f000 fd08 	bl	800e700 <__lshift>
 800dcf0:	4681      	mov	r9, r0
 800dcf2:	9b08      	ldr	r3, [sp, #32]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	dd05      	ble.n	800dd04 <_dtoa_r+0x83c>
 800dcf8:	4621      	mov	r1, r4
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	4658      	mov	r0, fp
 800dcfe:	f000 fcff 	bl	800e700 <__lshift>
 800dd02:	4604      	mov	r4, r0
 800dd04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d059      	beq.n	800ddbe <_dtoa_r+0x8f6>
 800dd0a:	4621      	mov	r1, r4
 800dd0c:	4648      	mov	r0, r9
 800dd0e:	f000 fd63 	bl	800e7d8 <__mcmp>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	da53      	bge.n	800ddbe <_dtoa_r+0x8f6>
 800dd16:	1e7b      	subs	r3, r7, #1
 800dd18:	9304      	str	r3, [sp, #16]
 800dd1a:	4649      	mov	r1, r9
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	220a      	movs	r2, #10
 800dd20:	4658      	mov	r0, fp
 800dd22:	f000 faf7 	bl	800e314 <__multadd>
 800dd26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd28:	4681      	mov	r9, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f000 8172 	beq.w	800e014 <_dtoa_r+0xb4c>
 800dd30:	2300      	movs	r3, #0
 800dd32:	4629      	mov	r1, r5
 800dd34:	220a      	movs	r2, #10
 800dd36:	4658      	mov	r0, fp
 800dd38:	f000 faec 	bl	800e314 <__multadd>
 800dd3c:	9b00      	ldr	r3, [sp, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	4605      	mov	r5, r0
 800dd42:	dc67      	bgt.n	800de14 <_dtoa_r+0x94c>
 800dd44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	dc41      	bgt.n	800ddce <_dtoa_r+0x906>
 800dd4a:	e063      	b.n	800de14 <_dtoa_r+0x94c>
 800dd4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dd4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dd52:	e746      	b.n	800dbe2 <_dtoa_r+0x71a>
 800dd54:	9b07      	ldr	r3, [sp, #28]
 800dd56:	1e5c      	subs	r4, r3, #1
 800dd58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd5a:	42a3      	cmp	r3, r4
 800dd5c:	bfbf      	itttt	lt
 800dd5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dd60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dd62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dd64:	1ae3      	sublt	r3, r4, r3
 800dd66:	bfb4      	ite	lt
 800dd68:	18d2      	addlt	r2, r2, r3
 800dd6a:	1b1c      	subge	r4, r3, r4
 800dd6c:	9b07      	ldr	r3, [sp, #28]
 800dd6e:	bfbc      	itt	lt
 800dd70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dd72:	2400      	movlt	r4, #0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	bfb5      	itete	lt
 800dd78:	eba8 0603 	sublt.w	r6, r8, r3
 800dd7c:	9b07      	ldrge	r3, [sp, #28]
 800dd7e:	2300      	movlt	r3, #0
 800dd80:	4646      	movge	r6, r8
 800dd82:	e730      	b.n	800dbe6 <_dtoa_r+0x71e>
 800dd84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dd86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dd88:	4646      	mov	r6, r8
 800dd8a:	e735      	b.n	800dbf8 <_dtoa_r+0x730>
 800dd8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd8e:	e75c      	b.n	800dc4a <_dtoa_r+0x782>
 800dd90:	2300      	movs	r3, #0
 800dd92:	e788      	b.n	800dca6 <_dtoa_r+0x7de>
 800dd94:	3fe00000 	.word	0x3fe00000
 800dd98:	40240000 	.word	0x40240000
 800dd9c:	40140000 	.word	0x40140000
 800dda0:	9b02      	ldr	r3, [sp, #8]
 800dda2:	e780      	b.n	800dca6 <_dtoa_r+0x7de>
 800dda4:	2300      	movs	r3, #0
 800dda6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dda8:	e782      	b.n	800dcb0 <_dtoa_r+0x7e8>
 800ddaa:	d099      	beq.n	800dce0 <_dtoa_r+0x818>
 800ddac:	9a08      	ldr	r2, [sp, #32]
 800ddae:	331c      	adds	r3, #28
 800ddb0:	441a      	add	r2, r3
 800ddb2:	4498      	add	r8, r3
 800ddb4:	441e      	add	r6, r3
 800ddb6:	9208      	str	r2, [sp, #32]
 800ddb8:	e792      	b.n	800dce0 <_dtoa_r+0x818>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	e7f6      	b.n	800ddac <_dtoa_r+0x8e4>
 800ddbe:	9b07      	ldr	r3, [sp, #28]
 800ddc0:	9704      	str	r7, [sp, #16]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	dc20      	bgt.n	800de08 <_dtoa_r+0x940>
 800ddc6:	9300      	str	r3, [sp, #0]
 800ddc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddca:	2b02      	cmp	r3, #2
 800ddcc:	dd1e      	ble.n	800de0c <_dtoa_r+0x944>
 800ddce:	9b00      	ldr	r3, [sp, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f47f aec0 	bne.w	800db56 <_dtoa_r+0x68e>
 800ddd6:	4621      	mov	r1, r4
 800ddd8:	2205      	movs	r2, #5
 800ddda:	4658      	mov	r0, fp
 800dddc:	f000 fa9a 	bl	800e314 <__multadd>
 800dde0:	4601      	mov	r1, r0
 800dde2:	4604      	mov	r4, r0
 800dde4:	4648      	mov	r0, r9
 800dde6:	f000 fcf7 	bl	800e7d8 <__mcmp>
 800ddea:	2800      	cmp	r0, #0
 800ddec:	f77f aeb3 	ble.w	800db56 <_dtoa_r+0x68e>
 800ddf0:	4656      	mov	r6, sl
 800ddf2:	2331      	movs	r3, #49	@ 0x31
 800ddf4:	f806 3b01 	strb.w	r3, [r6], #1
 800ddf8:	9b04      	ldr	r3, [sp, #16]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	9304      	str	r3, [sp, #16]
 800ddfe:	e6ae      	b.n	800db5e <_dtoa_r+0x696>
 800de00:	9c07      	ldr	r4, [sp, #28]
 800de02:	9704      	str	r7, [sp, #16]
 800de04:	4625      	mov	r5, r4
 800de06:	e7f3      	b.n	800ddf0 <_dtoa_r+0x928>
 800de08:	9b07      	ldr	r3, [sp, #28]
 800de0a:	9300      	str	r3, [sp, #0]
 800de0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de0e:	2b00      	cmp	r3, #0
 800de10:	f000 8104 	beq.w	800e01c <_dtoa_r+0xb54>
 800de14:	2e00      	cmp	r6, #0
 800de16:	dd05      	ble.n	800de24 <_dtoa_r+0x95c>
 800de18:	4629      	mov	r1, r5
 800de1a:	4632      	mov	r2, r6
 800de1c:	4658      	mov	r0, fp
 800de1e:	f000 fc6f 	bl	800e700 <__lshift>
 800de22:	4605      	mov	r5, r0
 800de24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de26:	2b00      	cmp	r3, #0
 800de28:	d05a      	beq.n	800dee0 <_dtoa_r+0xa18>
 800de2a:	6869      	ldr	r1, [r5, #4]
 800de2c:	4658      	mov	r0, fp
 800de2e:	f000 fa0f 	bl	800e250 <_Balloc>
 800de32:	4606      	mov	r6, r0
 800de34:	b928      	cbnz	r0, 800de42 <_dtoa_r+0x97a>
 800de36:	4b84      	ldr	r3, [pc, #528]	@ (800e048 <_dtoa_r+0xb80>)
 800de38:	4602      	mov	r2, r0
 800de3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800de3e:	f7ff bb5a 	b.w	800d4f6 <_dtoa_r+0x2e>
 800de42:	692a      	ldr	r2, [r5, #16]
 800de44:	3202      	adds	r2, #2
 800de46:	0092      	lsls	r2, r2, #2
 800de48:	f105 010c 	add.w	r1, r5, #12
 800de4c:	300c      	adds	r0, #12
 800de4e:	f7ff fa9c 	bl	800d38a <memcpy>
 800de52:	2201      	movs	r2, #1
 800de54:	4631      	mov	r1, r6
 800de56:	4658      	mov	r0, fp
 800de58:	f000 fc52 	bl	800e700 <__lshift>
 800de5c:	f10a 0301 	add.w	r3, sl, #1
 800de60:	9307      	str	r3, [sp, #28]
 800de62:	9b00      	ldr	r3, [sp, #0]
 800de64:	4453      	add	r3, sl
 800de66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de68:	9b02      	ldr	r3, [sp, #8]
 800de6a:	f003 0301 	and.w	r3, r3, #1
 800de6e:	462f      	mov	r7, r5
 800de70:	930a      	str	r3, [sp, #40]	@ 0x28
 800de72:	4605      	mov	r5, r0
 800de74:	9b07      	ldr	r3, [sp, #28]
 800de76:	4621      	mov	r1, r4
 800de78:	3b01      	subs	r3, #1
 800de7a:	4648      	mov	r0, r9
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	f7ff fa99 	bl	800d3b4 <quorem>
 800de82:	4639      	mov	r1, r7
 800de84:	9002      	str	r0, [sp, #8]
 800de86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800de8a:	4648      	mov	r0, r9
 800de8c:	f000 fca4 	bl	800e7d8 <__mcmp>
 800de90:	462a      	mov	r2, r5
 800de92:	9008      	str	r0, [sp, #32]
 800de94:	4621      	mov	r1, r4
 800de96:	4658      	mov	r0, fp
 800de98:	f000 fcba 	bl	800e810 <__mdiff>
 800de9c:	68c2      	ldr	r2, [r0, #12]
 800de9e:	4606      	mov	r6, r0
 800dea0:	bb02      	cbnz	r2, 800dee4 <_dtoa_r+0xa1c>
 800dea2:	4601      	mov	r1, r0
 800dea4:	4648      	mov	r0, r9
 800dea6:	f000 fc97 	bl	800e7d8 <__mcmp>
 800deaa:	4602      	mov	r2, r0
 800deac:	4631      	mov	r1, r6
 800deae:	4658      	mov	r0, fp
 800deb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800deb2:	f000 fa0d 	bl	800e2d0 <_Bfree>
 800deb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800deba:	9e07      	ldr	r6, [sp, #28]
 800debc:	ea43 0102 	orr.w	r1, r3, r2
 800dec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dec2:	4319      	orrs	r1, r3
 800dec4:	d110      	bne.n	800dee8 <_dtoa_r+0xa20>
 800dec6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800deca:	d029      	beq.n	800df20 <_dtoa_r+0xa58>
 800decc:	9b08      	ldr	r3, [sp, #32]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	dd02      	ble.n	800ded8 <_dtoa_r+0xa10>
 800ded2:	9b02      	ldr	r3, [sp, #8]
 800ded4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ded8:	9b00      	ldr	r3, [sp, #0]
 800deda:	f883 8000 	strb.w	r8, [r3]
 800dede:	e63f      	b.n	800db60 <_dtoa_r+0x698>
 800dee0:	4628      	mov	r0, r5
 800dee2:	e7bb      	b.n	800de5c <_dtoa_r+0x994>
 800dee4:	2201      	movs	r2, #1
 800dee6:	e7e1      	b.n	800deac <_dtoa_r+0x9e4>
 800dee8:	9b08      	ldr	r3, [sp, #32]
 800deea:	2b00      	cmp	r3, #0
 800deec:	db04      	blt.n	800def8 <_dtoa_r+0xa30>
 800deee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800def0:	430b      	orrs	r3, r1
 800def2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800def4:	430b      	orrs	r3, r1
 800def6:	d120      	bne.n	800df3a <_dtoa_r+0xa72>
 800def8:	2a00      	cmp	r2, #0
 800defa:	dded      	ble.n	800ded8 <_dtoa_r+0xa10>
 800defc:	4649      	mov	r1, r9
 800defe:	2201      	movs	r2, #1
 800df00:	4658      	mov	r0, fp
 800df02:	f000 fbfd 	bl	800e700 <__lshift>
 800df06:	4621      	mov	r1, r4
 800df08:	4681      	mov	r9, r0
 800df0a:	f000 fc65 	bl	800e7d8 <__mcmp>
 800df0e:	2800      	cmp	r0, #0
 800df10:	dc03      	bgt.n	800df1a <_dtoa_r+0xa52>
 800df12:	d1e1      	bne.n	800ded8 <_dtoa_r+0xa10>
 800df14:	f018 0f01 	tst.w	r8, #1
 800df18:	d0de      	beq.n	800ded8 <_dtoa_r+0xa10>
 800df1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800df1e:	d1d8      	bne.n	800ded2 <_dtoa_r+0xa0a>
 800df20:	9a00      	ldr	r2, [sp, #0]
 800df22:	2339      	movs	r3, #57	@ 0x39
 800df24:	7013      	strb	r3, [r2, #0]
 800df26:	4633      	mov	r3, r6
 800df28:	461e      	mov	r6, r3
 800df2a:	3b01      	subs	r3, #1
 800df2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800df30:	2a39      	cmp	r2, #57	@ 0x39
 800df32:	d052      	beq.n	800dfda <_dtoa_r+0xb12>
 800df34:	3201      	adds	r2, #1
 800df36:	701a      	strb	r2, [r3, #0]
 800df38:	e612      	b.n	800db60 <_dtoa_r+0x698>
 800df3a:	2a00      	cmp	r2, #0
 800df3c:	dd07      	ble.n	800df4e <_dtoa_r+0xa86>
 800df3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800df42:	d0ed      	beq.n	800df20 <_dtoa_r+0xa58>
 800df44:	9a00      	ldr	r2, [sp, #0]
 800df46:	f108 0301 	add.w	r3, r8, #1
 800df4a:	7013      	strb	r3, [r2, #0]
 800df4c:	e608      	b.n	800db60 <_dtoa_r+0x698>
 800df4e:	9b07      	ldr	r3, [sp, #28]
 800df50:	9a07      	ldr	r2, [sp, #28]
 800df52:	f803 8c01 	strb.w	r8, [r3, #-1]
 800df56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df58:	4293      	cmp	r3, r2
 800df5a:	d028      	beq.n	800dfae <_dtoa_r+0xae6>
 800df5c:	4649      	mov	r1, r9
 800df5e:	2300      	movs	r3, #0
 800df60:	220a      	movs	r2, #10
 800df62:	4658      	mov	r0, fp
 800df64:	f000 f9d6 	bl	800e314 <__multadd>
 800df68:	42af      	cmp	r7, r5
 800df6a:	4681      	mov	r9, r0
 800df6c:	f04f 0300 	mov.w	r3, #0
 800df70:	f04f 020a 	mov.w	r2, #10
 800df74:	4639      	mov	r1, r7
 800df76:	4658      	mov	r0, fp
 800df78:	d107      	bne.n	800df8a <_dtoa_r+0xac2>
 800df7a:	f000 f9cb 	bl	800e314 <__multadd>
 800df7e:	4607      	mov	r7, r0
 800df80:	4605      	mov	r5, r0
 800df82:	9b07      	ldr	r3, [sp, #28]
 800df84:	3301      	adds	r3, #1
 800df86:	9307      	str	r3, [sp, #28]
 800df88:	e774      	b.n	800de74 <_dtoa_r+0x9ac>
 800df8a:	f000 f9c3 	bl	800e314 <__multadd>
 800df8e:	4629      	mov	r1, r5
 800df90:	4607      	mov	r7, r0
 800df92:	2300      	movs	r3, #0
 800df94:	220a      	movs	r2, #10
 800df96:	4658      	mov	r0, fp
 800df98:	f000 f9bc 	bl	800e314 <__multadd>
 800df9c:	4605      	mov	r5, r0
 800df9e:	e7f0      	b.n	800df82 <_dtoa_r+0xaba>
 800dfa0:	9b00      	ldr	r3, [sp, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	bfcc      	ite	gt
 800dfa6:	461e      	movgt	r6, r3
 800dfa8:	2601      	movle	r6, #1
 800dfaa:	4456      	add	r6, sl
 800dfac:	2700      	movs	r7, #0
 800dfae:	4649      	mov	r1, r9
 800dfb0:	2201      	movs	r2, #1
 800dfb2:	4658      	mov	r0, fp
 800dfb4:	f000 fba4 	bl	800e700 <__lshift>
 800dfb8:	4621      	mov	r1, r4
 800dfba:	4681      	mov	r9, r0
 800dfbc:	f000 fc0c 	bl	800e7d8 <__mcmp>
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	dcb0      	bgt.n	800df26 <_dtoa_r+0xa5e>
 800dfc4:	d102      	bne.n	800dfcc <_dtoa_r+0xb04>
 800dfc6:	f018 0f01 	tst.w	r8, #1
 800dfca:	d1ac      	bne.n	800df26 <_dtoa_r+0xa5e>
 800dfcc:	4633      	mov	r3, r6
 800dfce:	461e      	mov	r6, r3
 800dfd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dfd4:	2a30      	cmp	r2, #48	@ 0x30
 800dfd6:	d0fa      	beq.n	800dfce <_dtoa_r+0xb06>
 800dfd8:	e5c2      	b.n	800db60 <_dtoa_r+0x698>
 800dfda:	459a      	cmp	sl, r3
 800dfdc:	d1a4      	bne.n	800df28 <_dtoa_r+0xa60>
 800dfde:	9b04      	ldr	r3, [sp, #16]
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	9304      	str	r3, [sp, #16]
 800dfe4:	2331      	movs	r3, #49	@ 0x31
 800dfe6:	f88a 3000 	strb.w	r3, [sl]
 800dfea:	e5b9      	b.n	800db60 <_dtoa_r+0x698>
 800dfec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e04c <_dtoa_r+0xb84>
 800dff2:	b11b      	cbz	r3, 800dffc <_dtoa_r+0xb34>
 800dff4:	f10a 0308 	add.w	r3, sl, #8
 800dff8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dffa:	6013      	str	r3, [r2, #0]
 800dffc:	4650      	mov	r0, sl
 800dffe:	b019      	add	sp, #100	@ 0x64
 800e000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e006:	2b01      	cmp	r3, #1
 800e008:	f77f ae37 	ble.w	800dc7a <_dtoa_r+0x7b2>
 800e00c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e00e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e010:	2001      	movs	r0, #1
 800e012:	e655      	b.n	800dcc0 <_dtoa_r+0x7f8>
 800e014:	9b00      	ldr	r3, [sp, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	f77f aed6 	ble.w	800ddc8 <_dtoa_r+0x900>
 800e01c:	4656      	mov	r6, sl
 800e01e:	4621      	mov	r1, r4
 800e020:	4648      	mov	r0, r9
 800e022:	f7ff f9c7 	bl	800d3b4 <quorem>
 800e026:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e02a:	f806 8b01 	strb.w	r8, [r6], #1
 800e02e:	9b00      	ldr	r3, [sp, #0]
 800e030:	eba6 020a 	sub.w	r2, r6, sl
 800e034:	4293      	cmp	r3, r2
 800e036:	ddb3      	ble.n	800dfa0 <_dtoa_r+0xad8>
 800e038:	4649      	mov	r1, r9
 800e03a:	2300      	movs	r3, #0
 800e03c:	220a      	movs	r2, #10
 800e03e:	4658      	mov	r0, fp
 800e040:	f000 f968 	bl	800e314 <__multadd>
 800e044:	4681      	mov	r9, r0
 800e046:	e7ea      	b.n	800e01e <_dtoa_r+0xb56>
 800e048:	08010f6d 	.word	0x08010f6d
 800e04c:	08010ef1 	.word	0x08010ef1

0800e050 <_free_r>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	4605      	mov	r5, r0
 800e054:	2900      	cmp	r1, #0
 800e056:	d041      	beq.n	800e0dc <_free_r+0x8c>
 800e058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e05c:	1f0c      	subs	r4, r1, #4
 800e05e:	2b00      	cmp	r3, #0
 800e060:	bfb8      	it	lt
 800e062:	18e4      	addlt	r4, r4, r3
 800e064:	f000 f8e8 	bl	800e238 <__malloc_lock>
 800e068:	4a1d      	ldr	r2, [pc, #116]	@ (800e0e0 <_free_r+0x90>)
 800e06a:	6813      	ldr	r3, [r2, #0]
 800e06c:	b933      	cbnz	r3, 800e07c <_free_r+0x2c>
 800e06e:	6063      	str	r3, [r4, #4]
 800e070:	6014      	str	r4, [r2, #0]
 800e072:	4628      	mov	r0, r5
 800e074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e078:	f000 b8e4 	b.w	800e244 <__malloc_unlock>
 800e07c:	42a3      	cmp	r3, r4
 800e07e:	d908      	bls.n	800e092 <_free_r+0x42>
 800e080:	6820      	ldr	r0, [r4, #0]
 800e082:	1821      	adds	r1, r4, r0
 800e084:	428b      	cmp	r3, r1
 800e086:	bf01      	itttt	eq
 800e088:	6819      	ldreq	r1, [r3, #0]
 800e08a:	685b      	ldreq	r3, [r3, #4]
 800e08c:	1809      	addeq	r1, r1, r0
 800e08e:	6021      	streq	r1, [r4, #0]
 800e090:	e7ed      	b.n	800e06e <_free_r+0x1e>
 800e092:	461a      	mov	r2, r3
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	b10b      	cbz	r3, 800e09c <_free_r+0x4c>
 800e098:	42a3      	cmp	r3, r4
 800e09a:	d9fa      	bls.n	800e092 <_free_r+0x42>
 800e09c:	6811      	ldr	r1, [r2, #0]
 800e09e:	1850      	adds	r0, r2, r1
 800e0a0:	42a0      	cmp	r0, r4
 800e0a2:	d10b      	bne.n	800e0bc <_free_r+0x6c>
 800e0a4:	6820      	ldr	r0, [r4, #0]
 800e0a6:	4401      	add	r1, r0
 800e0a8:	1850      	adds	r0, r2, r1
 800e0aa:	4283      	cmp	r3, r0
 800e0ac:	6011      	str	r1, [r2, #0]
 800e0ae:	d1e0      	bne.n	800e072 <_free_r+0x22>
 800e0b0:	6818      	ldr	r0, [r3, #0]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	6053      	str	r3, [r2, #4]
 800e0b6:	4408      	add	r0, r1
 800e0b8:	6010      	str	r0, [r2, #0]
 800e0ba:	e7da      	b.n	800e072 <_free_r+0x22>
 800e0bc:	d902      	bls.n	800e0c4 <_free_r+0x74>
 800e0be:	230c      	movs	r3, #12
 800e0c0:	602b      	str	r3, [r5, #0]
 800e0c2:	e7d6      	b.n	800e072 <_free_r+0x22>
 800e0c4:	6820      	ldr	r0, [r4, #0]
 800e0c6:	1821      	adds	r1, r4, r0
 800e0c8:	428b      	cmp	r3, r1
 800e0ca:	bf04      	itt	eq
 800e0cc:	6819      	ldreq	r1, [r3, #0]
 800e0ce:	685b      	ldreq	r3, [r3, #4]
 800e0d0:	6063      	str	r3, [r4, #4]
 800e0d2:	bf04      	itt	eq
 800e0d4:	1809      	addeq	r1, r1, r0
 800e0d6:	6021      	streq	r1, [r4, #0]
 800e0d8:	6054      	str	r4, [r2, #4]
 800e0da:	e7ca      	b.n	800e072 <_free_r+0x22>
 800e0dc:	bd38      	pop	{r3, r4, r5, pc}
 800e0de:	bf00      	nop
 800e0e0:	20004d00 	.word	0x20004d00

0800e0e4 <malloc>:
 800e0e4:	4b02      	ldr	r3, [pc, #8]	@ (800e0f0 <malloc+0xc>)
 800e0e6:	4601      	mov	r1, r0
 800e0e8:	6818      	ldr	r0, [r3, #0]
 800e0ea:	f000 b825 	b.w	800e138 <_malloc_r>
 800e0ee:	bf00      	nop
 800e0f0:	20000040 	.word	0x20000040

0800e0f4 <sbrk_aligned>:
 800e0f4:	b570      	push	{r4, r5, r6, lr}
 800e0f6:	4e0f      	ldr	r6, [pc, #60]	@ (800e134 <sbrk_aligned+0x40>)
 800e0f8:	460c      	mov	r4, r1
 800e0fa:	6831      	ldr	r1, [r6, #0]
 800e0fc:	4605      	mov	r5, r0
 800e0fe:	b911      	cbnz	r1, 800e106 <sbrk_aligned+0x12>
 800e100:	f001 fe0c 	bl	800fd1c <_sbrk_r>
 800e104:	6030      	str	r0, [r6, #0]
 800e106:	4621      	mov	r1, r4
 800e108:	4628      	mov	r0, r5
 800e10a:	f001 fe07 	bl	800fd1c <_sbrk_r>
 800e10e:	1c43      	adds	r3, r0, #1
 800e110:	d103      	bne.n	800e11a <sbrk_aligned+0x26>
 800e112:	f04f 34ff 	mov.w	r4, #4294967295
 800e116:	4620      	mov	r0, r4
 800e118:	bd70      	pop	{r4, r5, r6, pc}
 800e11a:	1cc4      	adds	r4, r0, #3
 800e11c:	f024 0403 	bic.w	r4, r4, #3
 800e120:	42a0      	cmp	r0, r4
 800e122:	d0f8      	beq.n	800e116 <sbrk_aligned+0x22>
 800e124:	1a21      	subs	r1, r4, r0
 800e126:	4628      	mov	r0, r5
 800e128:	f001 fdf8 	bl	800fd1c <_sbrk_r>
 800e12c:	3001      	adds	r0, #1
 800e12e:	d1f2      	bne.n	800e116 <sbrk_aligned+0x22>
 800e130:	e7ef      	b.n	800e112 <sbrk_aligned+0x1e>
 800e132:	bf00      	nop
 800e134:	20004cfc 	.word	0x20004cfc

0800e138 <_malloc_r>:
 800e138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e13c:	1ccd      	adds	r5, r1, #3
 800e13e:	f025 0503 	bic.w	r5, r5, #3
 800e142:	3508      	adds	r5, #8
 800e144:	2d0c      	cmp	r5, #12
 800e146:	bf38      	it	cc
 800e148:	250c      	movcc	r5, #12
 800e14a:	2d00      	cmp	r5, #0
 800e14c:	4606      	mov	r6, r0
 800e14e:	db01      	blt.n	800e154 <_malloc_r+0x1c>
 800e150:	42a9      	cmp	r1, r5
 800e152:	d904      	bls.n	800e15e <_malloc_r+0x26>
 800e154:	230c      	movs	r3, #12
 800e156:	6033      	str	r3, [r6, #0]
 800e158:	2000      	movs	r0, #0
 800e15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e15e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e234 <_malloc_r+0xfc>
 800e162:	f000 f869 	bl	800e238 <__malloc_lock>
 800e166:	f8d8 3000 	ldr.w	r3, [r8]
 800e16a:	461c      	mov	r4, r3
 800e16c:	bb44      	cbnz	r4, 800e1c0 <_malloc_r+0x88>
 800e16e:	4629      	mov	r1, r5
 800e170:	4630      	mov	r0, r6
 800e172:	f7ff ffbf 	bl	800e0f4 <sbrk_aligned>
 800e176:	1c43      	adds	r3, r0, #1
 800e178:	4604      	mov	r4, r0
 800e17a:	d158      	bne.n	800e22e <_malloc_r+0xf6>
 800e17c:	f8d8 4000 	ldr.w	r4, [r8]
 800e180:	4627      	mov	r7, r4
 800e182:	2f00      	cmp	r7, #0
 800e184:	d143      	bne.n	800e20e <_malloc_r+0xd6>
 800e186:	2c00      	cmp	r4, #0
 800e188:	d04b      	beq.n	800e222 <_malloc_r+0xea>
 800e18a:	6823      	ldr	r3, [r4, #0]
 800e18c:	4639      	mov	r1, r7
 800e18e:	4630      	mov	r0, r6
 800e190:	eb04 0903 	add.w	r9, r4, r3
 800e194:	f001 fdc2 	bl	800fd1c <_sbrk_r>
 800e198:	4581      	cmp	r9, r0
 800e19a:	d142      	bne.n	800e222 <_malloc_r+0xea>
 800e19c:	6821      	ldr	r1, [r4, #0]
 800e19e:	1a6d      	subs	r5, r5, r1
 800e1a0:	4629      	mov	r1, r5
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	f7ff ffa6 	bl	800e0f4 <sbrk_aligned>
 800e1a8:	3001      	adds	r0, #1
 800e1aa:	d03a      	beq.n	800e222 <_malloc_r+0xea>
 800e1ac:	6823      	ldr	r3, [r4, #0]
 800e1ae:	442b      	add	r3, r5
 800e1b0:	6023      	str	r3, [r4, #0]
 800e1b2:	f8d8 3000 	ldr.w	r3, [r8]
 800e1b6:	685a      	ldr	r2, [r3, #4]
 800e1b8:	bb62      	cbnz	r2, 800e214 <_malloc_r+0xdc>
 800e1ba:	f8c8 7000 	str.w	r7, [r8]
 800e1be:	e00f      	b.n	800e1e0 <_malloc_r+0xa8>
 800e1c0:	6822      	ldr	r2, [r4, #0]
 800e1c2:	1b52      	subs	r2, r2, r5
 800e1c4:	d420      	bmi.n	800e208 <_malloc_r+0xd0>
 800e1c6:	2a0b      	cmp	r2, #11
 800e1c8:	d917      	bls.n	800e1fa <_malloc_r+0xc2>
 800e1ca:	1961      	adds	r1, r4, r5
 800e1cc:	42a3      	cmp	r3, r4
 800e1ce:	6025      	str	r5, [r4, #0]
 800e1d0:	bf18      	it	ne
 800e1d2:	6059      	strne	r1, [r3, #4]
 800e1d4:	6863      	ldr	r3, [r4, #4]
 800e1d6:	bf08      	it	eq
 800e1d8:	f8c8 1000 	streq.w	r1, [r8]
 800e1dc:	5162      	str	r2, [r4, r5]
 800e1de:	604b      	str	r3, [r1, #4]
 800e1e0:	4630      	mov	r0, r6
 800e1e2:	f000 f82f 	bl	800e244 <__malloc_unlock>
 800e1e6:	f104 000b 	add.w	r0, r4, #11
 800e1ea:	1d23      	adds	r3, r4, #4
 800e1ec:	f020 0007 	bic.w	r0, r0, #7
 800e1f0:	1ac2      	subs	r2, r0, r3
 800e1f2:	bf1c      	itt	ne
 800e1f4:	1a1b      	subne	r3, r3, r0
 800e1f6:	50a3      	strne	r3, [r4, r2]
 800e1f8:	e7af      	b.n	800e15a <_malloc_r+0x22>
 800e1fa:	6862      	ldr	r2, [r4, #4]
 800e1fc:	42a3      	cmp	r3, r4
 800e1fe:	bf0c      	ite	eq
 800e200:	f8c8 2000 	streq.w	r2, [r8]
 800e204:	605a      	strne	r2, [r3, #4]
 800e206:	e7eb      	b.n	800e1e0 <_malloc_r+0xa8>
 800e208:	4623      	mov	r3, r4
 800e20a:	6864      	ldr	r4, [r4, #4]
 800e20c:	e7ae      	b.n	800e16c <_malloc_r+0x34>
 800e20e:	463c      	mov	r4, r7
 800e210:	687f      	ldr	r7, [r7, #4]
 800e212:	e7b6      	b.n	800e182 <_malloc_r+0x4a>
 800e214:	461a      	mov	r2, r3
 800e216:	685b      	ldr	r3, [r3, #4]
 800e218:	42a3      	cmp	r3, r4
 800e21a:	d1fb      	bne.n	800e214 <_malloc_r+0xdc>
 800e21c:	2300      	movs	r3, #0
 800e21e:	6053      	str	r3, [r2, #4]
 800e220:	e7de      	b.n	800e1e0 <_malloc_r+0xa8>
 800e222:	230c      	movs	r3, #12
 800e224:	6033      	str	r3, [r6, #0]
 800e226:	4630      	mov	r0, r6
 800e228:	f000 f80c 	bl	800e244 <__malloc_unlock>
 800e22c:	e794      	b.n	800e158 <_malloc_r+0x20>
 800e22e:	6005      	str	r5, [r0, #0]
 800e230:	e7d6      	b.n	800e1e0 <_malloc_r+0xa8>
 800e232:	bf00      	nop
 800e234:	20004d00 	.word	0x20004d00

0800e238 <__malloc_lock>:
 800e238:	4801      	ldr	r0, [pc, #4]	@ (800e240 <__malloc_lock+0x8>)
 800e23a:	f7ff b8a4 	b.w	800d386 <__retarget_lock_acquire_recursive>
 800e23e:	bf00      	nop
 800e240:	20004cf8 	.word	0x20004cf8

0800e244 <__malloc_unlock>:
 800e244:	4801      	ldr	r0, [pc, #4]	@ (800e24c <__malloc_unlock+0x8>)
 800e246:	f7ff b89f 	b.w	800d388 <__retarget_lock_release_recursive>
 800e24a:	bf00      	nop
 800e24c:	20004cf8 	.word	0x20004cf8

0800e250 <_Balloc>:
 800e250:	b570      	push	{r4, r5, r6, lr}
 800e252:	69c6      	ldr	r6, [r0, #28]
 800e254:	4604      	mov	r4, r0
 800e256:	460d      	mov	r5, r1
 800e258:	b976      	cbnz	r6, 800e278 <_Balloc+0x28>
 800e25a:	2010      	movs	r0, #16
 800e25c:	f7ff ff42 	bl	800e0e4 <malloc>
 800e260:	4602      	mov	r2, r0
 800e262:	61e0      	str	r0, [r4, #28]
 800e264:	b920      	cbnz	r0, 800e270 <_Balloc+0x20>
 800e266:	4b18      	ldr	r3, [pc, #96]	@ (800e2c8 <_Balloc+0x78>)
 800e268:	4818      	ldr	r0, [pc, #96]	@ (800e2cc <_Balloc+0x7c>)
 800e26a:	216b      	movs	r1, #107	@ 0x6b
 800e26c:	f001 fd70 	bl	800fd50 <__assert_func>
 800e270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e274:	6006      	str	r6, [r0, #0]
 800e276:	60c6      	str	r6, [r0, #12]
 800e278:	69e6      	ldr	r6, [r4, #28]
 800e27a:	68f3      	ldr	r3, [r6, #12]
 800e27c:	b183      	cbz	r3, 800e2a0 <_Balloc+0x50>
 800e27e:	69e3      	ldr	r3, [r4, #28]
 800e280:	68db      	ldr	r3, [r3, #12]
 800e282:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e286:	b9b8      	cbnz	r0, 800e2b8 <_Balloc+0x68>
 800e288:	2101      	movs	r1, #1
 800e28a:	fa01 f605 	lsl.w	r6, r1, r5
 800e28e:	1d72      	adds	r2, r6, #5
 800e290:	0092      	lsls	r2, r2, #2
 800e292:	4620      	mov	r0, r4
 800e294:	f001 fd7a 	bl	800fd8c <_calloc_r>
 800e298:	b160      	cbz	r0, 800e2b4 <_Balloc+0x64>
 800e29a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e29e:	e00e      	b.n	800e2be <_Balloc+0x6e>
 800e2a0:	2221      	movs	r2, #33	@ 0x21
 800e2a2:	2104      	movs	r1, #4
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f001 fd71 	bl	800fd8c <_calloc_r>
 800e2aa:	69e3      	ldr	r3, [r4, #28]
 800e2ac:	60f0      	str	r0, [r6, #12]
 800e2ae:	68db      	ldr	r3, [r3, #12]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d1e4      	bne.n	800e27e <_Balloc+0x2e>
 800e2b4:	2000      	movs	r0, #0
 800e2b6:	bd70      	pop	{r4, r5, r6, pc}
 800e2b8:	6802      	ldr	r2, [r0, #0]
 800e2ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e2be:	2300      	movs	r3, #0
 800e2c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e2c4:	e7f7      	b.n	800e2b6 <_Balloc+0x66>
 800e2c6:	bf00      	nop
 800e2c8:	08010efe 	.word	0x08010efe
 800e2cc:	08010f7e 	.word	0x08010f7e

0800e2d0 <_Bfree>:
 800e2d0:	b570      	push	{r4, r5, r6, lr}
 800e2d2:	69c6      	ldr	r6, [r0, #28]
 800e2d4:	4605      	mov	r5, r0
 800e2d6:	460c      	mov	r4, r1
 800e2d8:	b976      	cbnz	r6, 800e2f8 <_Bfree+0x28>
 800e2da:	2010      	movs	r0, #16
 800e2dc:	f7ff ff02 	bl	800e0e4 <malloc>
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	61e8      	str	r0, [r5, #28]
 800e2e4:	b920      	cbnz	r0, 800e2f0 <_Bfree+0x20>
 800e2e6:	4b09      	ldr	r3, [pc, #36]	@ (800e30c <_Bfree+0x3c>)
 800e2e8:	4809      	ldr	r0, [pc, #36]	@ (800e310 <_Bfree+0x40>)
 800e2ea:	218f      	movs	r1, #143	@ 0x8f
 800e2ec:	f001 fd30 	bl	800fd50 <__assert_func>
 800e2f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2f4:	6006      	str	r6, [r0, #0]
 800e2f6:	60c6      	str	r6, [r0, #12]
 800e2f8:	b13c      	cbz	r4, 800e30a <_Bfree+0x3a>
 800e2fa:	69eb      	ldr	r3, [r5, #28]
 800e2fc:	6862      	ldr	r2, [r4, #4]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e304:	6021      	str	r1, [r4, #0]
 800e306:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e30a:	bd70      	pop	{r4, r5, r6, pc}
 800e30c:	08010efe 	.word	0x08010efe
 800e310:	08010f7e 	.word	0x08010f7e

0800e314 <__multadd>:
 800e314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e318:	690d      	ldr	r5, [r1, #16]
 800e31a:	4607      	mov	r7, r0
 800e31c:	460c      	mov	r4, r1
 800e31e:	461e      	mov	r6, r3
 800e320:	f101 0c14 	add.w	ip, r1, #20
 800e324:	2000      	movs	r0, #0
 800e326:	f8dc 3000 	ldr.w	r3, [ip]
 800e32a:	b299      	uxth	r1, r3
 800e32c:	fb02 6101 	mla	r1, r2, r1, r6
 800e330:	0c1e      	lsrs	r6, r3, #16
 800e332:	0c0b      	lsrs	r3, r1, #16
 800e334:	fb02 3306 	mla	r3, r2, r6, r3
 800e338:	b289      	uxth	r1, r1
 800e33a:	3001      	adds	r0, #1
 800e33c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e340:	4285      	cmp	r5, r0
 800e342:	f84c 1b04 	str.w	r1, [ip], #4
 800e346:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e34a:	dcec      	bgt.n	800e326 <__multadd+0x12>
 800e34c:	b30e      	cbz	r6, 800e392 <__multadd+0x7e>
 800e34e:	68a3      	ldr	r3, [r4, #8]
 800e350:	42ab      	cmp	r3, r5
 800e352:	dc19      	bgt.n	800e388 <__multadd+0x74>
 800e354:	6861      	ldr	r1, [r4, #4]
 800e356:	4638      	mov	r0, r7
 800e358:	3101      	adds	r1, #1
 800e35a:	f7ff ff79 	bl	800e250 <_Balloc>
 800e35e:	4680      	mov	r8, r0
 800e360:	b928      	cbnz	r0, 800e36e <__multadd+0x5a>
 800e362:	4602      	mov	r2, r0
 800e364:	4b0c      	ldr	r3, [pc, #48]	@ (800e398 <__multadd+0x84>)
 800e366:	480d      	ldr	r0, [pc, #52]	@ (800e39c <__multadd+0x88>)
 800e368:	21ba      	movs	r1, #186	@ 0xba
 800e36a:	f001 fcf1 	bl	800fd50 <__assert_func>
 800e36e:	6922      	ldr	r2, [r4, #16]
 800e370:	3202      	adds	r2, #2
 800e372:	f104 010c 	add.w	r1, r4, #12
 800e376:	0092      	lsls	r2, r2, #2
 800e378:	300c      	adds	r0, #12
 800e37a:	f7ff f806 	bl	800d38a <memcpy>
 800e37e:	4621      	mov	r1, r4
 800e380:	4638      	mov	r0, r7
 800e382:	f7ff ffa5 	bl	800e2d0 <_Bfree>
 800e386:	4644      	mov	r4, r8
 800e388:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e38c:	3501      	adds	r5, #1
 800e38e:	615e      	str	r6, [r3, #20]
 800e390:	6125      	str	r5, [r4, #16]
 800e392:	4620      	mov	r0, r4
 800e394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e398:	08010f6d 	.word	0x08010f6d
 800e39c:	08010f7e 	.word	0x08010f7e

0800e3a0 <__s2b>:
 800e3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3a4:	460c      	mov	r4, r1
 800e3a6:	4615      	mov	r5, r2
 800e3a8:	461f      	mov	r7, r3
 800e3aa:	2209      	movs	r2, #9
 800e3ac:	3308      	adds	r3, #8
 800e3ae:	4606      	mov	r6, r0
 800e3b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3b4:	2100      	movs	r1, #0
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	db09      	blt.n	800e3d0 <__s2b+0x30>
 800e3bc:	4630      	mov	r0, r6
 800e3be:	f7ff ff47 	bl	800e250 <_Balloc>
 800e3c2:	b940      	cbnz	r0, 800e3d6 <__s2b+0x36>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	4b19      	ldr	r3, [pc, #100]	@ (800e42c <__s2b+0x8c>)
 800e3c8:	4819      	ldr	r0, [pc, #100]	@ (800e430 <__s2b+0x90>)
 800e3ca:	21d3      	movs	r1, #211	@ 0xd3
 800e3cc:	f001 fcc0 	bl	800fd50 <__assert_func>
 800e3d0:	0052      	lsls	r2, r2, #1
 800e3d2:	3101      	adds	r1, #1
 800e3d4:	e7f0      	b.n	800e3b8 <__s2b+0x18>
 800e3d6:	9b08      	ldr	r3, [sp, #32]
 800e3d8:	6143      	str	r3, [r0, #20]
 800e3da:	2d09      	cmp	r5, #9
 800e3dc:	f04f 0301 	mov.w	r3, #1
 800e3e0:	6103      	str	r3, [r0, #16]
 800e3e2:	dd16      	ble.n	800e412 <__s2b+0x72>
 800e3e4:	f104 0909 	add.w	r9, r4, #9
 800e3e8:	46c8      	mov	r8, r9
 800e3ea:	442c      	add	r4, r5
 800e3ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e3f0:	4601      	mov	r1, r0
 800e3f2:	3b30      	subs	r3, #48	@ 0x30
 800e3f4:	220a      	movs	r2, #10
 800e3f6:	4630      	mov	r0, r6
 800e3f8:	f7ff ff8c 	bl	800e314 <__multadd>
 800e3fc:	45a0      	cmp	r8, r4
 800e3fe:	d1f5      	bne.n	800e3ec <__s2b+0x4c>
 800e400:	f1a5 0408 	sub.w	r4, r5, #8
 800e404:	444c      	add	r4, r9
 800e406:	1b2d      	subs	r5, r5, r4
 800e408:	1963      	adds	r3, r4, r5
 800e40a:	42bb      	cmp	r3, r7
 800e40c:	db04      	blt.n	800e418 <__s2b+0x78>
 800e40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e412:	340a      	adds	r4, #10
 800e414:	2509      	movs	r5, #9
 800e416:	e7f6      	b.n	800e406 <__s2b+0x66>
 800e418:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e41c:	4601      	mov	r1, r0
 800e41e:	3b30      	subs	r3, #48	@ 0x30
 800e420:	220a      	movs	r2, #10
 800e422:	4630      	mov	r0, r6
 800e424:	f7ff ff76 	bl	800e314 <__multadd>
 800e428:	e7ee      	b.n	800e408 <__s2b+0x68>
 800e42a:	bf00      	nop
 800e42c:	08010f6d 	.word	0x08010f6d
 800e430:	08010f7e 	.word	0x08010f7e

0800e434 <__hi0bits>:
 800e434:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e438:	4603      	mov	r3, r0
 800e43a:	bf36      	itet	cc
 800e43c:	0403      	lslcc	r3, r0, #16
 800e43e:	2000      	movcs	r0, #0
 800e440:	2010      	movcc	r0, #16
 800e442:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e446:	bf3c      	itt	cc
 800e448:	021b      	lslcc	r3, r3, #8
 800e44a:	3008      	addcc	r0, #8
 800e44c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e450:	bf3c      	itt	cc
 800e452:	011b      	lslcc	r3, r3, #4
 800e454:	3004      	addcc	r0, #4
 800e456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e45a:	bf3c      	itt	cc
 800e45c:	009b      	lslcc	r3, r3, #2
 800e45e:	3002      	addcc	r0, #2
 800e460:	2b00      	cmp	r3, #0
 800e462:	db05      	blt.n	800e470 <__hi0bits+0x3c>
 800e464:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e468:	f100 0001 	add.w	r0, r0, #1
 800e46c:	bf08      	it	eq
 800e46e:	2020      	moveq	r0, #32
 800e470:	4770      	bx	lr

0800e472 <__lo0bits>:
 800e472:	6803      	ldr	r3, [r0, #0]
 800e474:	4602      	mov	r2, r0
 800e476:	f013 0007 	ands.w	r0, r3, #7
 800e47a:	d00b      	beq.n	800e494 <__lo0bits+0x22>
 800e47c:	07d9      	lsls	r1, r3, #31
 800e47e:	d421      	bmi.n	800e4c4 <__lo0bits+0x52>
 800e480:	0798      	lsls	r0, r3, #30
 800e482:	bf49      	itett	mi
 800e484:	085b      	lsrmi	r3, r3, #1
 800e486:	089b      	lsrpl	r3, r3, #2
 800e488:	2001      	movmi	r0, #1
 800e48a:	6013      	strmi	r3, [r2, #0]
 800e48c:	bf5c      	itt	pl
 800e48e:	6013      	strpl	r3, [r2, #0]
 800e490:	2002      	movpl	r0, #2
 800e492:	4770      	bx	lr
 800e494:	b299      	uxth	r1, r3
 800e496:	b909      	cbnz	r1, 800e49c <__lo0bits+0x2a>
 800e498:	0c1b      	lsrs	r3, r3, #16
 800e49a:	2010      	movs	r0, #16
 800e49c:	b2d9      	uxtb	r1, r3
 800e49e:	b909      	cbnz	r1, 800e4a4 <__lo0bits+0x32>
 800e4a0:	3008      	adds	r0, #8
 800e4a2:	0a1b      	lsrs	r3, r3, #8
 800e4a4:	0719      	lsls	r1, r3, #28
 800e4a6:	bf04      	itt	eq
 800e4a8:	091b      	lsreq	r3, r3, #4
 800e4aa:	3004      	addeq	r0, #4
 800e4ac:	0799      	lsls	r1, r3, #30
 800e4ae:	bf04      	itt	eq
 800e4b0:	089b      	lsreq	r3, r3, #2
 800e4b2:	3002      	addeq	r0, #2
 800e4b4:	07d9      	lsls	r1, r3, #31
 800e4b6:	d403      	bmi.n	800e4c0 <__lo0bits+0x4e>
 800e4b8:	085b      	lsrs	r3, r3, #1
 800e4ba:	f100 0001 	add.w	r0, r0, #1
 800e4be:	d003      	beq.n	800e4c8 <__lo0bits+0x56>
 800e4c0:	6013      	str	r3, [r2, #0]
 800e4c2:	4770      	bx	lr
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	4770      	bx	lr
 800e4c8:	2020      	movs	r0, #32
 800e4ca:	4770      	bx	lr

0800e4cc <__i2b>:
 800e4cc:	b510      	push	{r4, lr}
 800e4ce:	460c      	mov	r4, r1
 800e4d0:	2101      	movs	r1, #1
 800e4d2:	f7ff febd 	bl	800e250 <_Balloc>
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	b928      	cbnz	r0, 800e4e6 <__i2b+0x1a>
 800e4da:	4b05      	ldr	r3, [pc, #20]	@ (800e4f0 <__i2b+0x24>)
 800e4dc:	4805      	ldr	r0, [pc, #20]	@ (800e4f4 <__i2b+0x28>)
 800e4de:	f240 1145 	movw	r1, #325	@ 0x145
 800e4e2:	f001 fc35 	bl	800fd50 <__assert_func>
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	6144      	str	r4, [r0, #20]
 800e4ea:	6103      	str	r3, [r0, #16]
 800e4ec:	bd10      	pop	{r4, pc}
 800e4ee:	bf00      	nop
 800e4f0:	08010f6d 	.word	0x08010f6d
 800e4f4:	08010f7e 	.word	0x08010f7e

0800e4f8 <__multiply>:
 800e4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4fc:	4614      	mov	r4, r2
 800e4fe:	690a      	ldr	r2, [r1, #16]
 800e500:	6923      	ldr	r3, [r4, #16]
 800e502:	429a      	cmp	r2, r3
 800e504:	bfa8      	it	ge
 800e506:	4623      	movge	r3, r4
 800e508:	460f      	mov	r7, r1
 800e50a:	bfa4      	itt	ge
 800e50c:	460c      	movge	r4, r1
 800e50e:	461f      	movge	r7, r3
 800e510:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e514:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e518:	68a3      	ldr	r3, [r4, #8]
 800e51a:	6861      	ldr	r1, [r4, #4]
 800e51c:	eb0a 0609 	add.w	r6, sl, r9
 800e520:	42b3      	cmp	r3, r6
 800e522:	b085      	sub	sp, #20
 800e524:	bfb8      	it	lt
 800e526:	3101      	addlt	r1, #1
 800e528:	f7ff fe92 	bl	800e250 <_Balloc>
 800e52c:	b930      	cbnz	r0, 800e53c <__multiply+0x44>
 800e52e:	4602      	mov	r2, r0
 800e530:	4b44      	ldr	r3, [pc, #272]	@ (800e644 <__multiply+0x14c>)
 800e532:	4845      	ldr	r0, [pc, #276]	@ (800e648 <__multiply+0x150>)
 800e534:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e538:	f001 fc0a 	bl	800fd50 <__assert_func>
 800e53c:	f100 0514 	add.w	r5, r0, #20
 800e540:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e544:	462b      	mov	r3, r5
 800e546:	2200      	movs	r2, #0
 800e548:	4543      	cmp	r3, r8
 800e54a:	d321      	bcc.n	800e590 <__multiply+0x98>
 800e54c:	f107 0114 	add.w	r1, r7, #20
 800e550:	f104 0214 	add.w	r2, r4, #20
 800e554:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e558:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e55c:	9302      	str	r3, [sp, #8]
 800e55e:	1b13      	subs	r3, r2, r4
 800e560:	3b15      	subs	r3, #21
 800e562:	f023 0303 	bic.w	r3, r3, #3
 800e566:	3304      	adds	r3, #4
 800e568:	f104 0715 	add.w	r7, r4, #21
 800e56c:	42ba      	cmp	r2, r7
 800e56e:	bf38      	it	cc
 800e570:	2304      	movcc	r3, #4
 800e572:	9301      	str	r3, [sp, #4]
 800e574:	9b02      	ldr	r3, [sp, #8]
 800e576:	9103      	str	r1, [sp, #12]
 800e578:	428b      	cmp	r3, r1
 800e57a:	d80c      	bhi.n	800e596 <__multiply+0x9e>
 800e57c:	2e00      	cmp	r6, #0
 800e57e:	dd03      	ble.n	800e588 <__multiply+0x90>
 800e580:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e584:	2b00      	cmp	r3, #0
 800e586:	d05b      	beq.n	800e640 <__multiply+0x148>
 800e588:	6106      	str	r6, [r0, #16]
 800e58a:	b005      	add	sp, #20
 800e58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e590:	f843 2b04 	str.w	r2, [r3], #4
 800e594:	e7d8      	b.n	800e548 <__multiply+0x50>
 800e596:	f8b1 a000 	ldrh.w	sl, [r1]
 800e59a:	f1ba 0f00 	cmp.w	sl, #0
 800e59e:	d024      	beq.n	800e5ea <__multiply+0xf2>
 800e5a0:	f104 0e14 	add.w	lr, r4, #20
 800e5a4:	46a9      	mov	r9, r5
 800e5a6:	f04f 0c00 	mov.w	ip, #0
 800e5aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e5ae:	f8d9 3000 	ldr.w	r3, [r9]
 800e5b2:	fa1f fb87 	uxth.w	fp, r7
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e5bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e5c0:	f8d9 7000 	ldr.w	r7, [r9]
 800e5c4:	4463      	add	r3, ip
 800e5c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e5ca:	fb0a c70b 	mla	r7, sl, fp, ip
 800e5ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e5d8:	4572      	cmp	r2, lr
 800e5da:	f849 3b04 	str.w	r3, [r9], #4
 800e5de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e5e2:	d8e2      	bhi.n	800e5aa <__multiply+0xb2>
 800e5e4:	9b01      	ldr	r3, [sp, #4]
 800e5e6:	f845 c003 	str.w	ip, [r5, r3]
 800e5ea:	9b03      	ldr	r3, [sp, #12]
 800e5ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e5f0:	3104      	adds	r1, #4
 800e5f2:	f1b9 0f00 	cmp.w	r9, #0
 800e5f6:	d021      	beq.n	800e63c <__multiply+0x144>
 800e5f8:	682b      	ldr	r3, [r5, #0]
 800e5fa:	f104 0c14 	add.w	ip, r4, #20
 800e5fe:	46ae      	mov	lr, r5
 800e600:	f04f 0a00 	mov.w	sl, #0
 800e604:	f8bc b000 	ldrh.w	fp, [ip]
 800e608:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e60c:	fb09 770b 	mla	r7, r9, fp, r7
 800e610:	4457      	add	r7, sl
 800e612:	b29b      	uxth	r3, r3
 800e614:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e618:	f84e 3b04 	str.w	r3, [lr], #4
 800e61c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e620:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e624:	f8be 3000 	ldrh.w	r3, [lr]
 800e628:	fb09 330a 	mla	r3, r9, sl, r3
 800e62c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e630:	4562      	cmp	r2, ip
 800e632:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e636:	d8e5      	bhi.n	800e604 <__multiply+0x10c>
 800e638:	9f01      	ldr	r7, [sp, #4]
 800e63a:	51eb      	str	r3, [r5, r7]
 800e63c:	3504      	adds	r5, #4
 800e63e:	e799      	b.n	800e574 <__multiply+0x7c>
 800e640:	3e01      	subs	r6, #1
 800e642:	e79b      	b.n	800e57c <__multiply+0x84>
 800e644:	08010f6d 	.word	0x08010f6d
 800e648:	08010f7e 	.word	0x08010f7e

0800e64c <__pow5mult>:
 800e64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e650:	4615      	mov	r5, r2
 800e652:	f012 0203 	ands.w	r2, r2, #3
 800e656:	4607      	mov	r7, r0
 800e658:	460e      	mov	r6, r1
 800e65a:	d007      	beq.n	800e66c <__pow5mult+0x20>
 800e65c:	4c25      	ldr	r4, [pc, #148]	@ (800e6f4 <__pow5mult+0xa8>)
 800e65e:	3a01      	subs	r2, #1
 800e660:	2300      	movs	r3, #0
 800e662:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e666:	f7ff fe55 	bl	800e314 <__multadd>
 800e66a:	4606      	mov	r6, r0
 800e66c:	10ad      	asrs	r5, r5, #2
 800e66e:	d03d      	beq.n	800e6ec <__pow5mult+0xa0>
 800e670:	69fc      	ldr	r4, [r7, #28]
 800e672:	b97c      	cbnz	r4, 800e694 <__pow5mult+0x48>
 800e674:	2010      	movs	r0, #16
 800e676:	f7ff fd35 	bl	800e0e4 <malloc>
 800e67a:	4602      	mov	r2, r0
 800e67c:	61f8      	str	r0, [r7, #28]
 800e67e:	b928      	cbnz	r0, 800e68c <__pow5mult+0x40>
 800e680:	4b1d      	ldr	r3, [pc, #116]	@ (800e6f8 <__pow5mult+0xac>)
 800e682:	481e      	ldr	r0, [pc, #120]	@ (800e6fc <__pow5mult+0xb0>)
 800e684:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e688:	f001 fb62 	bl	800fd50 <__assert_func>
 800e68c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e690:	6004      	str	r4, [r0, #0]
 800e692:	60c4      	str	r4, [r0, #12]
 800e694:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e698:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e69c:	b94c      	cbnz	r4, 800e6b2 <__pow5mult+0x66>
 800e69e:	f240 2171 	movw	r1, #625	@ 0x271
 800e6a2:	4638      	mov	r0, r7
 800e6a4:	f7ff ff12 	bl	800e4cc <__i2b>
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800e6ae:	4604      	mov	r4, r0
 800e6b0:	6003      	str	r3, [r0, #0]
 800e6b2:	f04f 0900 	mov.w	r9, #0
 800e6b6:	07eb      	lsls	r3, r5, #31
 800e6b8:	d50a      	bpl.n	800e6d0 <__pow5mult+0x84>
 800e6ba:	4631      	mov	r1, r6
 800e6bc:	4622      	mov	r2, r4
 800e6be:	4638      	mov	r0, r7
 800e6c0:	f7ff ff1a 	bl	800e4f8 <__multiply>
 800e6c4:	4631      	mov	r1, r6
 800e6c6:	4680      	mov	r8, r0
 800e6c8:	4638      	mov	r0, r7
 800e6ca:	f7ff fe01 	bl	800e2d0 <_Bfree>
 800e6ce:	4646      	mov	r6, r8
 800e6d0:	106d      	asrs	r5, r5, #1
 800e6d2:	d00b      	beq.n	800e6ec <__pow5mult+0xa0>
 800e6d4:	6820      	ldr	r0, [r4, #0]
 800e6d6:	b938      	cbnz	r0, 800e6e8 <__pow5mult+0x9c>
 800e6d8:	4622      	mov	r2, r4
 800e6da:	4621      	mov	r1, r4
 800e6dc:	4638      	mov	r0, r7
 800e6de:	f7ff ff0b 	bl	800e4f8 <__multiply>
 800e6e2:	6020      	str	r0, [r4, #0]
 800e6e4:	f8c0 9000 	str.w	r9, [r0]
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	e7e4      	b.n	800e6b6 <__pow5mult+0x6a>
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6f2:	bf00      	nop
 800e6f4:	08010fd8 	.word	0x08010fd8
 800e6f8:	08010efe 	.word	0x08010efe
 800e6fc:	08010f7e 	.word	0x08010f7e

0800e700 <__lshift>:
 800e700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e704:	460c      	mov	r4, r1
 800e706:	6849      	ldr	r1, [r1, #4]
 800e708:	6923      	ldr	r3, [r4, #16]
 800e70a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e70e:	68a3      	ldr	r3, [r4, #8]
 800e710:	4607      	mov	r7, r0
 800e712:	4691      	mov	r9, r2
 800e714:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e718:	f108 0601 	add.w	r6, r8, #1
 800e71c:	42b3      	cmp	r3, r6
 800e71e:	db0b      	blt.n	800e738 <__lshift+0x38>
 800e720:	4638      	mov	r0, r7
 800e722:	f7ff fd95 	bl	800e250 <_Balloc>
 800e726:	4605      	mov	r5, r0
 800e728:	b948      	cbnz	r0, 800e73e <__lshift+0x3e>
 800e72a:	4602      	mov	r2, r0
 800e72c:	4b28      	ldr	r3, [pc, #160]	@ (800e7d0 <__lshift+0xd0>)
 800e72e:	4829      	ldr	r0, [pc, #164]	@ (800e7d4 <__lshift+0xd4>)
 800e730:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e734:	f001 fb0c 	bl	800fd50 <__assert_func>
 800e738:	3101      	adds	r1, #1
 800e73a:	005b      	lsls	r3, r3, #1
 800e73c:	e7ee      	b.n	800e71c <__lshift+0x1c>
 800e73e:	2300      	movs	r3, #0
 800e740:	f100 0114 	add.w	r1, r0, #20
 800e744:	f100 0210 	add.w	r2, r0, #16
 800e748:	4618      	mov	r0, r3
 800e74a:	4553      	cmp	r3, sl
 800e74c:	db33      	blt.n	800e7b6 <__lshift+0xb6>
 800e74e:	6920      	ldr	r0, [r4, #16]
 800e750:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e754:	f104 0314 	add.w	r3, r4, #20
 800e758:	f019 091f 	ands.w	r9, r9, #31
 800e75c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e760:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e764:	d02b      	beq.n	800e7be <__lshift+0xbe>
 800e766:	f1c9 0e20 	rsb	lr, r9, #32
 800e76a:	468a      	mov	sl, r1
 800e76c:	2200      	movs	r2, #0
 800e76e:	6818      	ldr	r0, [r3, #0]
 800e770:	fa00 f009 	lsl.w	r0, r0, r9
 800e774:	4310      	orrs	r0, r2
 800e776:	f84a 0b04 	str.w	r0, [sl], #4
 800e77a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e77e:	459c      	cmp	ip, r3
 800e780:	fa22 f20e 	lsr.w	r2, r2, lr
 800e784:	d8f3      	bhi.n	800e76e <__lshift+0x6e>
 800e786:	ebac 0304 	sub.w	r3, ip, r4
 800e78a:	3b15      	subs	r3, #21
 800e78c:	f023 0303 	bic.w	r3, r3, #3
 800e790:	3304      	adds	r3, #4
 800e792:	f104 0015 	add.w	r0, r4, #21
 800e796:	4584      	cmp	ip, r0
 800e798:	bf38      	it	cc
 800e79a:	2304      	movcc	r3, #4
 800e79c:	50ca      	str	r2, [r1, r3]
 800e79e:	b10a      	cbz	r2, 800e7a4 <__lshift+0xa4>
 800e7a0:	f108 0602 	add.w	r6, r8, #2
 800e7a4:	3e01      	subs	r6, #1
 800e7a6:	4638      	mov	r0, r7
 800e7a8:	612e      	str	r6, [r5, #16]
 800e7aa:	4621      	mov	r1, r4
 800e7ac:	f7ff fd90 	bl	800e2d0 <_Bfree>
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	e7c5      	b.n	800e74a <__lshift+0x4a>
 800e7be:	3904      	subs	r1, #4
 800e7c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7c8:	459c      	cmp	ip, r3
 800e7ca:	d8f9      	bhi.n	800e7c0 <__lshift+0xc0>
 800e7cc:	e7ea      	b.n	800e7a4 <__lshift+0xa4>
 800e7ce:	bf00      	nop
 800e7d0:	08010f6d 	.word	0x08010f6d
 800e7d4:	08010f7e 	.word	0x08010f7e

0800e7d8 <__mcmp>:
 800e7d8:	690a      	ldr	r2, [r1, #16]
 800e7da:	4603      	mov	r3, r0
 800e7dc:	6900      	ldr	r0, [r0, #16]
 800e7de:	1a80      	subs	r0, r0, r2
 800e7e0:	b530      	push	{r4, r5, lr}
 800e7e2:	d10e      	bne.n	800e802 <__mcmp+0x2a>
 800e7e4:	3314      	adds	r3, #20
 800e7e6:	3114      	adds	r1, #20
 800e7e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e7ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e7f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e7f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e7f8:	4295      	cmp	r5, r2
 800e7fa:	d003      	beq.n	800e804 <__mcmp+0x2c>
 800e7fc:	d205      	bcs.n	800e80a <__mcmp+0x32>
 800e7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800e802:	bd30      	pop	{r4, r5, pc}
 800e804:	42a3      	cmp	r3, r4
 800e806:	d3f3      	bcc.n	800e7f0 <__mcmp+0x18>
 800e808:	e7fb      	b.n	800e802 <__mcmp+0x2a>
 800e80a:	2001      	movs	r0, #1
 800e80c:	e7f9      	b.n	800e802 <__mcmp+0x2a>
	...

0800e810 <__mdiff>:
 800e810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e814:	4689      	mov	r9, r1
 800e816:	4606      	mov	r6, r0
 800e818:	4611      	mov	r1, r2
 800e81a:	4648      	mov	r0, r9
 800e81c:	4614      	mov	r4, r2
 800e81e:	f7ff ffdb 	bl	800e7d8 <__mcmp>
 800e822:	1e05      	subs	r5, r0, #0
 800e824:	d112      	bne.n	800e84c <__mdiff+0x3c>
 800e826:	4629      	mov	r1, r5
 800e828:	4630      	mov	r0, r6
 800e82a:	f7ff fd11 	bl	800e250 <_Balloc>
 800e82e:	4602      	mov	r2, r0
 800e830:	b928      	cbnz	r0, 800e83e <__mdiff+0x2e>
 800e832:	4b3f      	ldr	r3, [pc, #252]	@ (800e930 <__mdiff+0x120>)
 800e834:	f240 2137 	movw	r1, #567	@ 0x237
 800e838:	483e      	ldr	r0, [pc, #248]	@ (800e934 <__mdiff+0x124>)
 800e83a:	f001 fa89 	bl	800fd50 <__assert_func>
 800e83e:	2301      	movs	r3, #1
 800e840:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e844:	4610      	mov	r0, r2
 800e846:	b003      	add	sp, #12
 800e848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e84c:	bfbc      	itt	lt
 800e84e:	464b      	movlt	r3, r9
 800e850:	46a1      	movlt	r9, r4
 800e852:	4630      	mov	r0, r6
 800e854:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e858:	bfba      	itte	lt
 800e85a:	461c      	movlt	r4, r3
 800e85c:	2501      	movlt	r5, #1
 800e85e:	2500      	movge	r5, #0
 800e860:	f7ff fcf6 	bl	800e250 <_Balloc>
 800e864:	4602      	mov	r2, r0
 800e866:	b918      	cbnz	r0, 800e870 <__mdiff+0x60>
 800e868:	4b31      	ldr	r3, [pc, #196]	@ (800e930 <__mdiff+0x120>)
 800e86a:	f240 2145 	movw	r1, #581	@ 0x245
 800e86e:	e7e3      	b.n	800e838 <__mdiff+0x28>
 800e870:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e874:	6926      	ldr	r6, [r4, #16]
 800e876:	60c5      	str	r5, [r0, #12]
 800e878:	f109 0310 	add.w	r3, r9, #16
 800e87c:	f109 0514 	add.w	r5, r9, #20
 800e880:	f104 0e14 	add.w	lr, r4, #20
 800e884:	f100 0b14 	add.w	fp, r0, #20
 800e888:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e88c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e890:	9301      	str	r3, [sp, #4]
 800e892:	46d9      	mov	r9, fp
 800e894:	f04f 0c00 	mov.w	ip, #0
 800e898:	9b01      	ldr	r3, [sp, #4]
 800e89a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e89e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e8a2:	9301      	str	r3, [sp, #4]
 800e8a4:	fa1f f38a 	uxth.w	r3, sl
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	b283      	uxth	r3, r0
 800e8ac:	1acb      	subs	r3, r1, r3
 800e8ae:	0c00      	lsrs	r0, r0, #16
 800e8b0:	4463      	add	r3, ip
 800e8b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e8b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e8c0:	4576      	cmp	r6, lr
 800e8c2:	f849 3b04 	str.w	r3, [r9], #4
 800e8c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e8ca:	d8e5      	bhi.n	800e898 <__mdiff+0x88>
 800e8cc:	1b33      	subs	r3, r6, r4
 800e8ce:	3b15      	subs	r3, #21
 800e8d0:	f023 0303 	bic.w	r3, r3, #3
 800e8d4:	3415      	adds	r4, #21
 800e8d6:	3304      	adds	r3, #4
 800e8d8:	42a6      	cmp	r6, r4
 800e8da:	bf38      	it	cc
 800e8dc:	2304      	movcc	r3, #4
 800e8de:	441d      	add	r5, r3
 800e8e0:	445b      	add	r3, fp
 800e8e2:	461e      	mov	r6, r3
 800e8e4:	462c      	mov	r4, r5
 800e8e6:	4544      	cmp	r4, r8
 800e8e8:	d30e      	bcc.n	800e908 <__mdiff+0xf8>
 800e8ea:	f108 0103 	add.w	r1, r8, #3
 800e8ee:	1b49      	subs	r1, r1, r5
 800e8f0:	f021 0103 	bic.w	r1, r1, #3
 800e8f4:	3d03      	subs	r5, #3
 800e8f6:	45a8      	cmp	r8, r5
 800e8f8:	bf38      	it	cc
 800e8fa:	2100      	movcc	r1, #0
 800e8fc:	440b      	add	r3, r1
 800e8fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e902:	b191      	cbz	r1, 800e92a <__mdiff+0x11a>
 800e904:	6117      	str	r7, [r2, #16]
 800e906:	e79d      	b.n	800e844 <__mdiff+0x34>
 800e908:	f854 1b04 	ldr.w	r1, [r4], #4
 800e90c:	46e6      	mov	lr, ip
 800e90e:	0c08      	lsrs	r0, r1, #16
 800e910:	fa1c fc81 	uxtah	ip, ip, r1
 800e914:	4471      	add	r1, lr
 800e916:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e91a:	b289      	uxth	r1, r1
 800e91c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e920:	f846 1b04 	str.w	r1, [r6], #4
 800e924:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e928:	e7dd      	b.n	800e8e6 <__mdiff+0xd6>
 800e92a:	3f01      	subs	r7, #1
 800e92c:	e7e7      	b.n	800e8fe <__mdiff+0xee>
 800e92e:	bf00      	nop
 800e930:	08010f6d 	.word	0x08010f6d
 800e934:	08010f7e 	.word	0x08010f7e

0800e938 <__ulp>:
 800e938:	b082      	sub	sp, #8
 800e93a:	ed8d 0b00 	vstr	d0, [sp]
 800e93e:	9a01      	ldr	r2, [sp, #4]
 800e940:	4b0f      	ldr	r3, [pc, #60]	@ (800e980 <__ulp+0x48>)
 800e942:	4013      	ands	r3, r2
 800e944:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e948:	2b00      	cmp	r3, #0
 800e94a:	dc08      	bgt.n	800e95e <__ulp+0x26>
 800e94c:	425b      	negs	r3, r3
 800e94e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e952:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e956:	da04      	bge.n	800e962 <__ulp+0x2a>
 800e958:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e95c:	4113      	asrs	r3, r2
 800e95e:	2200      	movs	r2, #0
 800e960:	e008      	b.n	800e974 <__ulp+0x3c>
 800e962:	f1a2 0314 	sub.w	r3, r2, #20
 800e966:	2b1e      	cmp	r3, #30
 800e968:	bfda      	itte	le
 800e96a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e96e:	40da      	lsrle	r2, r3
 800e970:	2201      	movgt	r2, #1
 800e972:	2300      	movs	r3, #0
 800e974:	4619      	mov	r1, r3
 800e976:	4610      	mov	r0, r2
 800e978:	ec41 0b10 	vmov	d0, r0, r1
 800e97c:	b002      	add	sp, #8
 800e97e:	4770      	bx	lr
 800e980:	7ff00000 	.word	0x7ff00000

0800e984 <__b2d>:
 800e984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e988:	6906      	ldr	r6, [r0, #16]
 800e98a:	f100 0814 	add.w	r8, r0, #20
 800e98e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e992:	1f37      	subs	r7, r6, #4
 800e994:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e998:	4610      	mov	r0, r2
 800e99a:	f7ff fd4b 	bl	800e434 <__hi0bits>
 800e99e:	f1c0 0320 	rsb	r3, r0, #32
 800e9a2:	280a      	cmp	r0, #10
 800e9a4:	600b      	str	r3, [r1, #0]
 800e9a6:	491b      	ldr	r1, [pc, #108]	@ (800ea14 <__b2d+0x90>)
 800e9a8:	dc15      	bgt.n	800e9d6 <__b2d+0x52>
 800e9aa:	f1c0 0c0b 	rsb	ip, r0, #11
 800e9ae:	fa22 f30c 	lsr.w	r3, r2, ip
 800e9b2:	45b8      	cmp	r8, r7
 800e9b4:	ea43 0501 	orr.w	r5, r3, r1
 800e9b8:	bf34      	ite	cc
 800e9ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e9be:	2300      	movcs	r3, #0
 800e9c0:	3015      	adds	r0, #21
 800e9c2:	fa02 f000 	lsl.w	r0, r2, r0
 800e9c6:	fa23 f30c 	lsr.w	r3, r3, ip
 800e9ca:	4303      	orrs	r3, r0
 800e9cc:	461c      	mov	r4, r3
 800e9ce:	ec45 4b10 	vmov	d0, r4, r5
 800e9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d6:	45b8      	cmp	r8, r7
 800e9d8:	bf3a      	itte	cc
 800e9da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e9de:	f1a6 0708 	subcc.w	r7, r6, #8
 800e9e2:	2300      	movcs	r3, #0
 800e9e4:	380b      	subs	r0, #11
 800e9e6:	d012      	beq.n	800ea0e <__b2d+0x8a>
 800e9e8:	f1c0 0120 	rsb	r1, r0, #32
 800e9ec:	fa23 f401 	lsr.w	r4, r3, r1
 800e9f0:	4082      	lsls	r2, r0
 800e9f2:	4322      	orrs	r2, r4
 800e9f4:	4547      	cmp	r7, r8
 800e9f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e9fa:	bf8c      	ite	hi
 800e9fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ea00:	2200      	movls	r2, #0
 800ea02:	4083      	lsls	r3, r0
 800ea04:	40ca      	lsrs	r2, r1
 800ea06:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	e7de      	b.n	800e9cc <__b2d+0x48>
 800ea0e:	ea42 0501 	orr.w	r5, r2, r1
 800ea12:	e7db      	b.n	800e9cc <__b2d+0x48>
 800ea14:	3ff00000 	.word	0x3ff00000

0800ea18 <__d2b>:
 800ea18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea1c:	460f      	mov	r7, r1
 800ea1e:	2101      	movs	r1, #1
 800ea20:	ec59 8b10 	vmov	r8, r9, d0
 800ea24:	4616      	mov	r6, r2
 800ea26:	f7ff fc13 	bl	800e250 <_Balloc>
 800ea2a:	4604      	mov	r4, r0
 800ea2c:	b930      	cbnz	r0, 800ea3c <__d2b+0x24>
 800ea2e:	4602      	mov	r2, r0
 800ea30:	4b23      	ldr	r3, [pc, #140]	@ (800eac0 <__d2b+0xa8>)
 800ea32:	4824      	ldr	r0, [pc, #144]	@ (800eac4 <__d2b+0xac>)
 800ea34:	f240 310f 	movw	r1, #783	@ 0x30f
 800ea38:	f001 f98a 	bl	800fd50 <__assert_func>
 800ea3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ea40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea44:	b10d      	cbz	r5, 800ea4a <__d2b+0x32>
 800ea46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ea4a:	9301      	str	r3, [sp, #4]
 800ea4c:	f1b8 0300 	subs.w	r3, r8, #0
 800ea50:	d023      	beq.n	800ea9a <__d2b+0x82>
 800ea52:	4668      	mov	r0, sp
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	f7ff fd0c 	bl	800e472 <__lo0bits>
 800ea5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ea5e:	b1d0      	cbz	r0, 800ea96 <__d2b+0x7e>
 800ea60:	f1c0 0320 	rsb	r3, r0, #32
 800ea64:	fa02 f303 	lsl.w	r3, r2, r3
 800ea68:	430b      	orrs	r3, r1
 800ea6a:	40c2      	lsrs	r2, r0
 800ea6c:	6163      	str	r3, [r4, #20]
 800ea6e:	9201      	str	r2, [sp, #4]
 800ea70:	9b01      	ldr	r3, [sp, #4]
 800ea72:	61a3      	str	r3, [r4, #24]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	bf0c      	ite	eq
 800ea78:	2201      	moveq	r2, #1
 800ea7a:	2202      	movne	r2, #2
 800ea7c:	6122      	str	r2, [r4, #16]
 800ea7e:	b1a5      	cbz	r5, 800eaaa <__d2b+0x92>
 800ea80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ea84:	4405      	add	r5, r0
 800ea86:	603d      	str	r5, [r7, #0]
 800ea88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ea8c:	6030      	str	r0, [r6, #0]
 800ea8e:	4620      	mov	r0, r4
 800ea90:	b003      	add	sp, #12
 800ea92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea96:	6161      	str	r1, [r4, #20]
 800ea98:	e7ea      	b.n	800ea70 <__d2b+0x58>
 800ea9a:	a801      	add	r0, sp, #4
 800ea9c:	f7ff fce9 	bl	800e472 <__lo0bits>
 800eaa0:	9b01      	ldr	r3, [sp, #4]
 800eaa2:	6163      	str	r3, [r4, #20]
 800eaa4:	3020      	adds	r0, #32
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	e7e8      	b.n	800ea7c <__d2b+0x64>
 800eaaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eaae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800eab2:	6038      	str	r0, [r7, #0]
 800eab4:	6918      	ldr	r0, [r3, #16]
 800eab6:	f7ff fcbd 	bl	800e434 <__hi0bits>
 800eaba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eabe:	e7e5      	b.n	800ea8c <__d2b+0x74>
 800eac0:	08010f6d 	.word	0x08010f6d
 800eac4:	08010f7e 	.word	0x08010f7e

0800eac8 <__ratio>:
 800eac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eacc:	b085      	sub	sp, #20
 800eace:	e9cd 1000 	strd	r1, r0, [sp]
 800ead2:	a902      	add	r1, sp, #8
 800ead4:	f7ff ff56 	bl	800e984 <__b2d>
 800ead8:	9800      	ldr	r0, [sp, #0]
 800eada:	a903      	add	r1, sp, #12
 800eadc:	ec55 4b10 	vmov	r4, r5, d0
 800eae0:	f7ff ff50 	bl	800e984 <__b2d>
 800eae4:	9b01      	ldr	r3, [sp, #4]
 800eae6:	6919      	ldr	r1, [r3, #16]
 800eae8:	9b00      	ldr	r3, [sp, #0]
 800eaea:	691b      	ldr	r3, [r3, #16]
 800eaec:	1ac9      	subs	r1, r1, r3
 800eaee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800eaf2:	1a9b      	subs	r3, r3, r2
 800eaf4:	ec5b ab10 	vmov	sl, fp, d0
 800eaf8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	bfce      	itee	gt
 800eb00:	462a      	movgt	r2, r5
 800eb02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eb06:	465a      	movle	r2, fp
 800eb08:	462f      	mov	r7, r5
 800eb0a:	46d9      	mov	r9, fp
 800eb0c:	bfcc      	ite	gt
 800eb0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eb12:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800eb16:	464b      	mov	r3, r9
 800eb18:	4652      	mov	r2, sl
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	4639      	mov	r1, r7
 800eb1e:	f7f1 fe9d 	bl	800085c <__aeabi_ddiv>
 800eb22:	ec41 0b10 	vmov	d0, r0, r1
 800eb26:	b005      	add	sp, #20
 800eb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb2c <__copybits>:
 800eb2c:	3901      	subs	r1, #1
 800eb2e:	b570      	push	{r4, r5, r6, lr}
 800eb30:	1149      	asrs	r1, r1, #5
 800eb32:	6914      	ldr	r4, [r2, #16]
 800eb34:	3101      	adds	r1, #1
 800eb36:	f102 0314 	add.w	r3, r2, #20
 800eb3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eb3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eb42:	1f05      	subs	r5, r0, #4
 800eb44:	42a3      	cmp	r3, r4
 800eb46:	d30c      	bcc.n	800eb62 <__copybits+0x36>
 800eb48:	1aa3      	subs	r3, r4, r2
 800eb4a:	3b11      	subs	r3, #17
 800eb4c:	f023 0303 	bic.w	r3, r3, #3
 800eb50:	3211      	adds	r2, #17
 800eb52:	42a2      	cmp	r2, r4
 800eb54:	bf88      	it	hi
 800eb56:	2300      	movhi	r3, #0
 800eb58:	4418      	add	r0, r3
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	4288      	cmp	r0, r1
 800eb5e:	d305      	bcc.n	800eb6c <__copybits+0x40>
 800eb60:	bd70      	pop	{r4, r5, r6, pc}
 800eb62:	f853 6b04 	ldr.w	r6, [r3], #4
 800eb66:	f845 6f04 	str.w	r6, [r5, #4]!
 800eb6a:	e7eb      	b.n	800eb44 <__copybits+0x18>
 800eb6c:	f840 3b04 	str.w	r3, [r0], #4
 800eb70:	e7f4      	b.n	800eb5c <__copybits+0x30>

0800eb72 <__any_on>:
 800eb72:	f100 0214 	add.w	r2, r0, #20
 800eb76:	6900      	ldr	r0, [r0, #16]
 800eb78:	114b      	asrs	r3, r1, #5
 800eb7a:	4298      	cmp	r0, r3
 800eb7c:	b510      	push	{r4, lr}
 800eb7e:	db11      	blt.n	800eba4 <__any_on+0x32>
 800eb80:	dd0a      	ble.n	800eb98 <__any_on+0x26>
 800eb82:	f011 011f 	ands.w	r1, r1, #31
 800eb86:	d007      	beq.n	800eb98 <__any_on+0x26>
 800eb88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eb8c:	fa24 f001 	lsr.w	r0, r4, r1
 800eb90:	fa00 f101 	lsl.w	r1, r0, r1
 800eb94:	428c      	cmp	r4, r1
 800eb96:	d10b      	bne.n	800ebb0 <__any_on+0x3e>
 800eb98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d803      	bhi.n	800eba8 <__any_on+0x36>
 800eba0:	2000      	movs	r0, #0
 800eba2:	bd10      	pop	{r4, pc}
 800eba4:	4603      	mov	r3, r0
 800eba6:	e7f7      	b.n	800eb98 <__any_on+0x26>
 800eba8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ebac:	2900      	cmp	r1, #0
 800ebae:	d0f5      	beq.n	800eb9c <__any_on+0x2a>
 800ebb0:	2001      	movs	r0, #1
 800ebb2:	e7f6      	b.n	800eba2 <__any_on+0x30>

0800ebb4 <sulp>:
 800ebb4:	b570      	push	{r4, r5, r6, lr}
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	460d      	mov	r5, r1
 800ebba:	ec45 4b10 	vmov	d0, r4, r5
 800ebbe:	4616      	mov	r6, r2
 800ebc0:	f7ff feba 	bl	800e938 <__ulp>
 800ebc4:	ec51 0b10 	vmov	r0, r1, d0
 800ebc8:	b17e      	cbz	r6, 800ebea <sulp+0x36>
 800ebca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ebce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	dd09      	ble.n	800ebea <sulp+0x36>
 800ebd6:	051b      	lsls	r3, r3, #20
 800ebd8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ebdc:	2400      	movs	r4, #0
 800ebde:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ebe2:	4622      	mov	r2, r4
 800ebe4:	462b      	mov	r3, r5
 800ebe6:	f7f1 fd0f 	bl	8000608 <__aeabi_dmul>
 800ebea:	ec41 0b10 	vmov	d0, r0, r1
 800ebee:	bd70      	pop	{r4, r5, r6, pc}

0800ebf0 <_strtod_l>:
 800ebf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf4:	b09f      	sub	sp, #124	@ 0x7c
 800ebf6:	460c      	mov	r4, r1
 800ebf8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	921a      	str	r2, [sp, #104]	@ 0x68
 800ebfe:	9005      	str	r0, [sp, #20]
 800ec00:	f04f 0a00 	mov.w	sl, #0
 800ec04:	f04f 0b00 	mov.w	fp, #0
 800ec08:	460a      	mov	r2, r1
 800ec0a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec0c:	7811      	ldrb	r1, [r2, #0]
 800ec0e:	292b      	cmp	r1, #43	@ 0x2b
 800ec10:	d04a      	beq.n	800eca8 <_strtod_l+0xb8>
 800ec12:	d838      	bhi.n	800ec86 <_strtod_l+0x96>
 800ec14:	290d      	cmp	r1, #13
 800ec16:	d832      	bhi.n	800ec7e <_strtod_l+0x8e>
 800ec18:	2908      	cmp	r1, #8
 800ec1a:	d832      	bhi.n	800ec82 <_strtod_l+0x92>
 800ec1c:	2900      	cmp	r1, #0
 800ec1e:	d03b      	beq.n	800ec98 <_strtod_l+0xa8>
 800ec20:	2200      	movs	r2, #0
 800ec22:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ec24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ec26:	782a      	ldrb	r2, [r5, #0]
 800ec28:	2a30      	cmp	r2, #48	@ 0x30
 800ec2a:	f040 80b3 	bne.w	800ed94 <_strtod_l+0x1a4>
 800ec2e:	786a      	ldrb	r2, [r5, #1]
 800ec30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ec34:	2a58      	cmp	r2, #88	@ 0x58
 800ec36:	d16e      	bne.n	800ed16 <_strtod_l+0x126>
 800ec38:	9302      	str	r3, [sp, #8]
 800ec3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec3c:	9301      	str	r3, [sp, #4]
 800ec3e:	ab1a      	add	r3, sp, #104	@ 0x68
 800ec40:	9300      	str	r3, [sp, #0]
 800ec42:	4a8e      	ldr	r2, [pc, #568]	@ (800ee7c <_strtod_l+0x28c>)
 800ec44:	9805      	ldr	r0, [sp, #20]
 800ec46:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ec48:	a919      	add	r1, sp, #100	@ 0x64
 800ec4a:	f001 f91b 	bl	800fe84 <__gethex>
 800ec4e:	f010 060f 	ands.w	r6, r0, #15
 800ec52:	4604      	mov	r4, r0
 800ec54:	d005      	beq.n	800ec62 <_strtod_l+0x72>
 800ec56:	2e06      	cmp	r6, #6
 800ec58:	d128      	bne.n	800ecac <_strtod_l+0xbc>
 800ec5a:	3501      	adds	r5, #1
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	9519      	str	r5, [sp, #100]	@ 0x64
 800ec60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	f040 858e 	bne.w	800f786 <_strtod_l+0xb96>
 800ec6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec6c:	b1cb      	cbz	r3, 800eca2 <_strtod_l+0xb2>
 800ec6e:	4652      	mov	r2, sl
 800ec70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ec74:	ec43 2b10 	vmov	d0, r2, r3
 800ec78:	b01f      	add	sp, #124	@ 0x7c
 800ec7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7e:	2920      	cmp	r1, #32
 800ec80:	d1ce      	bne.n	800ec20 <_strtod_l+0x30>
 800ec82:	3201      	adds	r2, #1
 800ec84:	e7c1      	b.n	800ec0a <_strtod_l+0x1a>
 800ec86:	292d      	cmp	r1, #45	@ 0x2d
 800ec88:	d1ca      	bne.n	800ec20 <_strtod_l+0x30>
 800ec8a:	2101      	movs	r1, #1
 800ec8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ec8e:	1c51      	adds	r1, r2, #1
 800ec90:	9119      	str	r1, [sp, #100]	@ 0x64
 800ec92:	7852      	ldrb	r2, [r2, #1]
 800ec94:	2a00      	cmp	r2, #0
 800ec96:	d1c5      	bne.n	800ec24 <_strtod_l+0x34>
 800ec98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ec9a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	f040 8570 	bne.w	800f782 <_strtod_l+0xb92>
 800eca2:	4652      	mov	r2, sl
 800eca4:	465b      	mov	r3, fp
 800eca6:	e7e5      	b.n	800ec74 <_strtod_l+0x84>
 800eca8:	2100      	movs	r1, #0
 800ecaa:	e7ef      	b.n	800ec8c <_strtod_l+0x9c>
 800ecac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ecae:	b13a      	cbz	r2, 800ecc0 <_strtod_l+0xd0>
 800ecb0:	2135      	movs	r1, #53	@ 0x35
 800ecb2:	a81c      	add	r0, sp, #112	@ 0x70
 800ecb4:	f7ff ff3a 	bl	800eb2c <__copybits>
 800ecb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ecba:	9805      	ldr	r0, [sp, #20]
 800ecbc:	f7ff fb08 	bl	800e2d0 <_Bfree>
 800ecc0:	3e01      	subs	r6, #1
 800ecc2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ecc4:	2e04      	cmp	r6, #4
 800ecc6:	d806      	bhi.n	800ecd6 <_strtod_l+0xe6>
 800ecc8:	e8df f006 	tbb	[pc, r6]
 800eccc:	201d0314 	.word	0x201d0314
 800ecd0:	14          	.byte	0x14
 800ecd1:	00          	.byte	0x00
 800ecd2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ecd6:	05e1      	lsls	r1, r4, #23
 800ecd8:	bf48      	it	mi
 800ecda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ecde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ece2:	0d1b      	lsrs	r3, r3, #20
 800ece4:	051b      	lsls	r3, r3, #20
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d1bb      	bne.n	800ec62 <_strtod_l+0x72>
 800ecea:	f7fe fb21 	bl	800d330 <__errno>
 800ecee:	2322      	movs	r3, #34	@ 0x22
 800ecf0:	6003      	str	r3, [r0, #0]
 800ecf2:	e7b6      	b.n	800ec62 <_strtod_l+0x72>
 800ecf4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ecf8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ecfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ed00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ed04:	e7e7      	b.n	800ecd6 <_strtod_l+0xe6>
 800ed06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ee84 <_strtod_l+0x294>
 800ed0a:	e7e4      	b.n	800ecd6 <_strtod_l+0xe6>
 800ed0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ed10:	f04f 3aff 	mov.w	sl, #4294967295
 800ed14:	e7df      	b.n	800ecd6 <_strtod_l+0xe6>
 800ed16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed18:	1c5a      	adds	r2, r3, #1
 800ed1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed1c:	785b      	ldrb	r3, [r3, #1]
 800ed1e:	2b30      	cmp	r3, #48	@ 0x30
 800ed20:	d0f9      	beq.n	800ed16 <_strtod_l+0x126>
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d09d      	beq.n	800ec62 <_strtod_l+0x72>
 800ed26:	2301      	movs	r3, #1
 800ed28:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed2c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ed2e:	2300      	movs	r3, #0
 800ed30:	9308      	str	r3, [sp, #32]
 800ed32:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed34:	461f      	mov	r7, r3
 800ed36:	220a      	movs	r2, #10
 800ed38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ed3a:	7805      	ldrb	r5, [r0, #0]
 800ed3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ed40:	b2d9      	uxtb	r1, r3
 800ed42:	2909      	cmp	r1, #9
 800ed44:	d928      	bls.n	800ed98 <_strtod_l+0x1a8>
 800ed46:	494e      	ldr	r1, [pc, #312]	@ (800ee80 <_strtod_l+0x290>)
 800ed48:	2201      	movs	r2, #1
 800ed4a:	f000 ffd5 	bl	800fcf8 <strncmp>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d032      	beq.n	800edb8 <_strtod_l+0x1c8>
 800ed52:	2000      	movs	r0, #0
 800ed54:	462a      	mov	r2, r5
 800ed56:	4681      	mov	r9, r0
 800ed58:	463d      	mov	r5, r7
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	2a65      	cmp	r2, #101	@ 0x65
 800ed5e:	d001      	beq.n	800ed64 <_strtod_l+0x174>
 800ed60:	2a45      	cmp	r2, #69	@ 0x45
 800ed62:	d114      	bne.n	800ed8e <_strtod_l+0x19e>
 800ed64:	b91d      	cbnz	r5, 800ed6e <_strtod_l+0x17e>
 800ed66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed68:	4302      	orrs	r2, r0
 800ed6a:	d095      	beq.n	800ec98 <_strtod_l+0xa8>
 800ed6c:	2500      	movs	r5, #0
 800ed6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ed70:	1c62      	adds	r2, r4, #1
 800ed72:	9219      	str	r2, [sp, #100]	@ 0x64
 800ed74:	7862      	ldrb	r2, [r4, #1]
 800ed76:	2a2b      	cmp	r2, #43	@ 0x2b
 800ed78:	d077      	beq.n	800ee6a <_strtod_l+0x27a>
 800ed7a:	2a2d      	cmp	r2, #45	@ 0x2d
 800ed7c:	d07b      	beq.n	800ee76 <_strtod_l+0x286>
 800ed7e:	f04f 0c00 	mov.w	ip, #0
 800ed82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ed86:	2909      	cmp	r1, #9
 800ed88:	f240 8082 	bls.w	800ee90 <_strtod_l+0x2a0>
 800ed8c:	9419      	str	r4, [sp, #100]	@ 0x64
 800ed8e:	f04f 0800 	mov.w	r8, #0
 800ed92:	e0a2      	b.n	800eeda <_strtod_l+0x2ea>
 800ed94:	2300      	movs	r3, #0
 800ed96:	e7c7      	b.n	800ed28 <_strtod_l+0x138>
 800ed98:	2f08      	cmp	r7, #8
 800ed9a:	bfd5      	itete	le
 800ed9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ed9e:	9908      	ldrgt	r1, [sp, #32]
 800eda0:	fb02 3301 	mlale	r3, r2, r1, r3
 800eda4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800eda8:	f100 0001 	add.w	r0, r0, #1
 800edac:	bfd4      	ite	le
 800edae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800edb0:	9308      	strgt	r3, [sp, #32]
 800edb2:	3701      	adds	r7, #1
 800edb4:	9019      	str	r0, [sp, #100]	@ 0x64
 800edb6:	e7bf      	b.n	800ed38 <_strtod_l+0x148>
 800edb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800edba:	1c5a      	adds	r2, r3, #1
 800edbc:	9219      	str	r2, [sp, #100]	@ 0x64
 800edbe:	785a      	ldrb	r2, [r3, #1]
 800edc0:	b37f      	cbz	r7, 800ee22 <_strtod_l+0x232>
 800edc2:	4681      	mov	r9, r0
 800edc4:	463d      	mov	r5, r7
 800edc6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800edca:	2b09      	cmp	r3, #9
 800edcc:	d912      	bls.n	800edf4 <_strtod_l+0x204>
 800edce:	2301      	movs	r3, #1
 800edd0:	e7c4      	b.n	800ed5c <_strtod_l+0x16c>
 800edd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800edd4:	1c5a      	adds	r2, r3, #1
 800edd6:	9219      	str	r2, [sp, #100]	@ 0x64
 800edd8:	785a      	ldrb	r2, [r3, #1]
 800edda:	3001      	adds	r0, #1
 800eddc:	2a30      	cmp	r2, #48	@ 0x30
 800edde:	d0f8      	beq.n	800edd2 <_strtod_l+0x1e2>
 800ede0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ede4:	2b08      	cmp	r3, #8
 800ede6:	f200 84d3 	bhi.w	800f790 <_strtod_l+0xba0>
 800edea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800edec:	930c      	str	r3, [sp, #48]	@ 0x30
 800edee:	4681      	mov	r9, r0
 800edf0:	2000      	movs	r0, #0
 800edf2:	4605      	mov	r5, r0
 800edf4:	3a30      	subs	r2, #48	@ 0x30
 800edf6:	f100 0301 	add.w	r3, r0, #1
 800edfa:	d02a      	beq.n	800ee52 <_strtod_l+0x262>
 800edfc:	4499      	add	r9, r3
 800edfe:	eb00 0c05 	add.w	ip, r0, r5
 800ee02:	462b      	mov	r3, r5
 800ee04:	210a      	movs	r1, #10
 800ee06:	4563      	cmp	r3, ip
 800ee08:	d10d      	bne.n	800ee26 <_strtod_l+0x236>
 800ee0a:	1c69      	adds	r1, r5, #1
 800ee0c:	4401      	add	r1, r0
 800ee0e:	4428      	add	r0, r5
 800ee10:	2808      	cmp	r0, #8
 800ee12:	dc16      	bgt.n	800ee42 <_strtod_l+0x252>
 800ee14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ee16:	230a      	movs	r3, #10
 800ee18:	fb03 2300 	mla	r3, r3, r0, r2
 800ee1c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee1e:	2300      	movs	r3, #0
 800ee20:	e018      	b.n	800ee54 <_strtod_l+0x264>
 800ee22:	4638      	mov	r0, r7
 800ee24:	e7da      	b.n	800eddc <_strtod_l+0x1ec>
 800ee26:	2b08      	cmp	r3, #8
 800ee28:	f103 0301 	add.w	r3, r3, #1
 800ee2c:	dc03      	bgt.n	800ee36 <_strtod_l+0x246>
 800ee2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ee30:	434e      	muls	r6, r1
 800ee32:	960a      	str	r6, [sp, #40]	@ 0x28
 800ee34:	e7e7      	b.n	800ee06 <_strtod_l+0x216>
 800ee36:	2b10      	cmp	r3, #16
 800ee38:	bfde      	ittt	le
 800ee3a:	9e08      	ldrle	r6, [sp, #32]
 800ee3c:	434e      	mulle	r6, r1
 800ee3e:	9608      	strle	r6, [sp, #32]
 800ee40:	e7e1      	b.n	800ee06 <_strtod_l+0x216>
 800ee42:	280f      	cmp	r0, #15
 800ee44:	dceb      	bgt.n	800ee1e <_strtod_l+0x22e>
 800ee46:	9808      	ldr	r0, [sp, #32]
 800ee48:	230a      	movs	r3, #10
 800ee4a:	fb03 2300 	mla	r3, r3, r0, r2
 800ee4e:	9308      	str	r3, [sp, #32]
 800ee50:	e7e5      	b.n	800ee1e <_strtod_l+0x22e>
 800ee52:	4629      	mov	r1, r5
 800ee54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee56:	1c50      	adds	r0, r2, #1
 800ee58:	9019      	str	r0, [sp, #100]	@ 0x64
 800ee5a:	7852      	ldrb	r2, [r2, #1]
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	460d      	mov	r5, r1
 800ee60:	e7b1      	b.n	800edc6 <_strtod_l+0x1d6>
 800ee62:	f04f 0900 	mov.w	r9, #0
 800ee66:	2301      	movs	r3, #1
 800ee68:	e77d      	b.n	800ed66 <_strtod_l+0x176>
 800ee6a:	f04f 0c00 	mov.w	ip, #0
 800ee6e:	1ca2      	adds	r2, r4, #2
 800ee70:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee72:	78a2      	ldrb	r2, [r4, #2]
 800ee74:	e785      	b.n	800ed82 <_strtod_l+0x192>
 800ee76:	f04f 0c01 	mov.w	ip, #1
 800ee7a:	e7f8      	b.n	800ee6e <_strtod_l+0x27e>
 800ee7c:	080110f0 	.word	0x080110f0
 800ee80:	080110d8 	.word	0x080110d8
 800ee84:	7ff00000 	.word	0x7ff00000
 800ee88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ee8a:	1c51      	adds	r1, r2, #1
 800ee8c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ee8e:	7852      	ldrb	r2, [r2, #1]
 800ee90:	2a30      	cmp	r2, #48	@ 0x30
 800ee92:	d0f9      	beq.n	800ee88 <_strtod_l+0x298>
 800ee94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ee98:	2908      	cmp	r1, #8
 800ee9a:	f63f af78 	bhi.w	800ed8e <_strtod_l+0x19e>
 800ee9e:	3a30      	subs	r2, #48	@ 0x30
 800eea0:	920e      	str	r2, [sp, #56]	@ 0x38
 800eea2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eea4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800eea6:	f04f 080a 	mov.w	r8, #10
 800eeaa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eeac:	1c56      	adds	r6, r2, #1
 800eeae:	9619      	str	r6, [sp, #100]	@ 0x64
 800eeb0:	7852      	ldrb	r2, [r2, #1]
 800eeb2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800eeb6:	f1be 0f09 	cmp.w	lr, #9
 800eeba:	d939      	bls.n	800ef30 <_strtod_l+0x340>
 800eebc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800eebe:	1a76      	subs	r6, r6, r1
 800eec0:	2e08      	cmp	r6, #8
 800eec2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800eec6:	dc03      	bgt.n	800eed0 <_strtod_l+0x2e0>
 800eec8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800eeca:	4588      	cmp	r8, r1
 800eecc:	bfa8      	it	ge
 800eece:	4688      	movge	r8, r1
 800eed0:	f1bc 0f00 	cmp.w	ip, #0
 800eed4:	d001      	beq.n	800eeda <_strtod_l+0x2ea>
 800eed6:	f1c8 0800 	rsb	r8, r8, #0
 800eeda:	2d00      	cmp	r5, #0
 800eedc:	d14e      	bne.n	800ef7c <_strtod_l+0x38c>
 800eede:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eee0:	4308      	orrs	r0, r1
 800eee2:	f47f aebe 	bne.w	800ec62 <_strtod_l+0x72>
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f47f aed6 	bne.w	800ec98 <_strtod_l+0xa8>
 800eeec:	2a69      	cmp	r2, #105	@ 0x69
 800eeee:	d028      	beq.n	800ef42 <_strtod_l+0x352>
 800eef0:	dc25      	bgt.n	800ef3e <_strtod_l+0x34e>
 800eef2:	2a49      	cmp	r2, #73	@ 0x49
 800eef4:	d025      	beq.n	800ef42 <_strtod_l+0x352>
 800eef6:	2a4e      	cmp	r2, #78	@ 0x4e
 800eef8:	f47f aece 	bne.w	800ec98 <_strtod_l+0xa8>
 800eefc:	499b      	ldr	r1, [pc, #620]	@ (800f16c <_strtod_l+0x57c>)
 800eefe:	a819      	add	r0, sp, #100	@ 0x64
 800ef00:	f001 f9e2 	bl	80102c8 <__match>
 800ef04:	2800      	cmp	r0, #0
 800ef06:	f43f aec7 	beq.w	800ec98 <_strtod_l+0xa8>
 800ef0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	2b28      	cmp	r3, #40	@ 0x28
 800ef10:	d12e      	bne.n	800ef70 <_strtod_l+0x380>
 800ef12:	4997      	ldr	r1, [pc, #604]	@ (800f170 <_strtod_l+0x580>)
 800ef14:	aa1c      	add	r2, sp, #112	@ 0x70
 800ef16:	a819      	add	r0, sp, #100	@ 0x64
 800ef18:	f001 f9ea 	bl	80102f0 <__hexnan>
 800ef1c:	2805      	cmp	r0, #5
 800ef1e:	d127      	bne.n	800ef70 <_strtod_l+0x380>
 800ef20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ef22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ef26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ef2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ef2e:	e698      	b.n	800ec62 <_strtod_l+0x72>
 800ef30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ef32:	fb08 2101 	mla	r1, r8, r1, r2
 800ef36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ef3a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ef3c:	e7b5      	b.n	800eeaa <_strtod_l+0x2ba>
 800ef3e:	2a6e      	cmp	r2, #110	@ 0x6e
 800ef40:	e7da      	b.n	800eef8 <_strtod_l+0x308>
 800ef42:	498c      	ldr	r1, [pc, #560]	@ (800f174 <_strtod_l+0x584>)
 800ef44:	a819      	add	r0, sp, #100	@ 0x64
 800ef46:	f001 f9bf 	bl	80102c8 <__match>
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	f43f aea4 	beq.w	800ec98 <_strtod_l+0xa8>
 800ef50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef52:	4989      	ldr	r1, [pc, #548]	@ (800f178 <_strtod_l+0x588>)
 800ef54:	3b01      	subs	r3, #1
 800ef56:	a819      	add	r0, sp, #100	@ 0x64
 800ef58:	9319      	str	r3, [sp, #100]	@ 0x64
 800ef5a:	f001 f9b5 	bl	80102c8 <__match>
 800ef5e:	b910      	cbnz	r0, 800ef66 <_strtod_l+0x376>
 800ef60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ef62:	3301      	adds	r3, #1
 800ef64:	9319      	str	r3, [sp, #100]	@ 0x64
 800ef66:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800f188 <_strtod_l+0x598>
 800ef6a:	f04f 0a00 	mov.w	sl, #0
 800ef6e:	e678      	b.n	800ec62 <_strtod_l+0x72>
 800ef70:	4882      	ldr	r0, [pc, #520]	@ (800f17c <_strtod_l+0x58c>)
 800ef72:	f000 fee5 	bl	800fd40 <nan>
 800ef76:	ec5b ab10 	vmov	sl, fp, d0
 800ef7a:	e672      	b.n	800ec62 <_strtod_l+0x72>
 800ef7c:	eba8 0309 	sub.w	r3, r8, r9
 800ef80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ef82:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef84:	2f00      	cmp	r7, #0
 800ef86:	bf08      	it	eq
 800ef88:	462f      	moveq	r7, r5
 800ef8a:	2d10      	cmp	r5, #16
 800ef8c:	462c      	mov	r4, r5
 800ef8e:	bfa8      	it	ge
 800ef90:	2410      	movge	r4, #16
 800ef92:	f7f1 fabf 	bl	8000514 <__aeabi_ui2d>
 800ef96:	2d09      	cmp	r5, #9
 800ef98:	4682      	mov	sl, r0
 800ef9a:	468b      	mov	fp, r1
 800ef9c:	dc13      	bgt.n	800efc6 <_strtod_l+0x3d6>
 800ef9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	f43f ae5e 	beq.w	800ec62 <_strtod_l+0x72>
 800efa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efa8:	dd78      	ble.n	800f09c <_strtod_l+0x4ac>
 800efaa:	2b16      	cmp	r3, #22
 800efac:	dc5f      	bgt.n	800f06e <_strtod_l+0x47e>
 800efae:	4974      	ldr	r1, [pc, #464]	@ (800f180 <_strtod_l+0x590>)
 800efb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800efb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efb8:	4652      	mov	r2, sl
 800efba:	465b      	mov	r3, fp
 800efbc:	f7f1 fb24 	bl	8000608 <__aeabi_dmul>
 800efc0:	4682      	mov	sl, r0
 800efc2:	468b      	mov	fp, r1
 800efc4:	e64d      	b.n	800ec62 <_strtod_l+0x72>
 800efc6:	4b6e      	ldr	r3, [pc, #440]	@ (800f180 <_strtod_l+0x590>)
 800efc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800efcc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800efd0:	f7f1 fb1a 	bl	8000608 <__aeabi_dmul>
 800efd4:	4682      	mov	sl, r0
 800efd6:	9808      	ldr	r0, [sp, #32]
 800efd8:	468b      	mov	fp, r1
 800efda:	f7f1 fa9b 	bl	8000514 <__aeabi_ui2d>
 800efde:	4602      	mov	r2, r0
 800efe0:	460b      	mov	r3, r1
 800efe2:	4650      	mov	r0, sl
 800efe4:	4659      	mov	r1, fp
 800efe6:	f7f1 f959 	bl	800029c <__adddf3>
 800efea:	2d0f      	cmp	r5, #15
 800efec:	4682      	mov	sl, r0
 800efee:	468b      	mov	fp, r1
 800eff0:	ddd5      	ble.n	800ef9e <_strtod_l+0x3ae>
 800eff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eff4:	1b2c      	subs	r4, r5, r4
 800eff6:	441c      	add	r4, r3
 800eff8:	2c00      	cmp	r4, #0
 800effa:	f340 8096 	ble.w	800f12a <_strtod_l+0x53a>
 800effe:	f014 030f 	ands.w	r3, r4, #15
 800f002:	d00a      	beq.n	800f01a <_strtod_l+0x42a>
 800f004:	495e      	ldr	r1, [pc, #376]	@ (800f180 <_strtod_l+0x590>)
 800f006:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f00a:	4652      	mov	r2, sl
 800f00c:	465b      	mov	r3, fp
 800f00e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f012:	f7f1 faf9 	bl	8000608 <__aeabi_dmul>
 800f016:	4682      	mov	sl, r0
 800f018:	468b      	mov	fp, r1
 800f01a:	f034 040f 	bics.w	r4, r4, #15
 800f01e:	d073      	beq.n	800f108 <_strtod_l+0x518>
 800f020:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f024:	dd48      	ble.n	800f0b8 <_strtod_l+0x4c8>
 800f026:	2400      	movs	r4, #0
 800f028:	46a0      	mov	r8, r4
 800f02a:	940a      	str	r4, [sp, #40]	@ 0x28
 800f02c:	46a1      	mov	r9, r4
 800f02e:	9a05      	ldr	r2, [sp, #20]
 800f030:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800f188 <_strtod_l+0x598>
 800f034:	2322      	movs	r3, #34	@ 0x22
 800f036:	6013      	str	r3, [r2, #0]
 800f038:	f04f 0a00 	mov.w	sl, #0
 800f03c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f03e:	2b00      	cmp	r3, #0
 800f040:	f43f ae0f 	beq.w	800ec62 <_strtod_l+0x72>
 800f044:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f046:	9805      	ldr	r0, [sp, #20]
 800f048:	f7ff f942 	bl	800e2d0 <_Bfree>
 800f04c:	9805      	ldr	r0, [sp, #20]
 800f04e:	4649      	mov	r1, r9
 800f050:	f7ff f93e 	bl	800e2d0 <_Bfree>
 800f054:	9805      	ldr	r0, [sp, #20]
 800f056:	4641      	mov	r1, r8
 800f058:	f7ff f93a 	bl	800e2d0 <_Bfree>
 800f05c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f05e:	9805      	ldr	r0, [sp, #20]
 800f060:	f7ff f936 	bl	800e2d0 <_Bfree>
 800f064:	9805      	ldr	r0, [sp, #20]
 800f066:	4621      	mov	r1, r4
 800f068:	f7ff f932 	bl	800e2d0 <_Bfree>
 800f06c:	e5f9      	b.n	800ec62 <_strtod_l+0x72>
 800f06e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f070:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f074:	4293      	cmp	r3, r2
 800f076:	dbbc      	blt.n	800eff2 <_strtod_l+0x402>
 800f078:	4c41      	ldr	r4, [pc, #260]	@ (800f180 <_strtod_l+0x590>)
 800f07a:	f1c5 050f 	rsb	r5, r5, #15
 800f07e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f082:	4652      	mov	r2, sl
 800f084:	465b      	mov	r3, fp
 800f086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f08a:	f7f1 fabd 	bl	8000608 <__aeabi_dmul>
 800f08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f090:	1b5d      	subs	r5, r3, r5
 800f092:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f096:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f09a:	e78f      	b.n	800efbc <_strtod_l+0x3cc>
 800f09c:	3316      	adds	r3, #22
 800f09e:	dba8      	blt.n	800eff2 <_strtod_l+0x402>
 800f0a0:	4b37      	ldr	r3, [pc, #220]	@ (800f180 <_strtod_l+0x590>)
 800f0a2:	eba9 0808 	sub.w	r8, r9, r8
 800f0a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f0aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f0ae:	4650      	mov	r0, sl
 800f0b0:	4659      	mov	r1, fp
 800f0b2:	f7f1 fbd3 	bl	800085c <__aeabi_ddiv>
 800f0b6:	e783      	b.n	800efc0 <_strtod_l+0x3d0>
 800f0b8:	4b32      	ldr	r3, [pc, #200]	@ (800f184 <_strtod_l+0x594>)
 800f0ba:	9308      	str	r3, [sp, #32]
 800f0bc:	2300      	movs	r3, #0
 800f0be:	1124      	asrs	r4, r4, #4
 800f0c0:	4650      	mov	r0, sl
 800f0c2:	4659      	mov	r1, fp
 800f0c4:	461e      	mov	r6, r3
 800f0c6:	2c01      	cmp	r4, #1
 800f0c8:	dc21      	bgt.n	800f10e <_strtod_l+0x51e>
 800f0ca:	b10b      	cbz	r3, 800f0d0 <_strtod_l+0x4e0>
 800f0cc:	4682      	mov	sl, r0
 800f0ce:	468b      	mov	fp, r1
 800f0d0:	492c      	ldr	r1, [pc, #176]	@ (800f184 <_strtod_l+0x594>)
 800f0d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f0d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f0da:	4652      	mov	r2, sl
 800f0dc:	465b      	mov	r3, fp
 800f0de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0e2:	f7f1 fa91 	bl	8000608 <__aeabi_dmul>
 800f0e6:	4b28      	ldr	r3, [pc, #160]	@ (800f188 <_strtod_l+0x598>)
 800f0e8:	460a      	mov	r2, r1
 800f0ea:	400b      	ands	r3, r1
 800f0ec:	4927      	ldr	r1, [pc, #156]	@ (800f18c <_strtod_l+0x59c>)
 800f0ee:	428b      	cmp	r3, r1
 800f0f0:	4682      	mov	sl, r0
 800f0f2:	d898      	bhi.n	800f026 <_strtod_l+0x436>
 800f0f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f0f8:	428b      	cmp	r3, r1
 800f0fa:	bf86      	itte	hi
 800f0fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800f190 <_strtod_l+0x5a0>
 800f100:	f04f 3aff 	movhi.w	sl, #4294967295
 800f104:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f108:	2300      	movs	r3, #0
 800f10a:	9308      	str	r3, [sp, #32]
 800f10c:	e07a      	b.n	800f204 <_strtod_l+0x614>
 800f10e:	07e2      	lsls	r2, r4, #31
 800f110:	d505      	bpl.n	800f11e <_strtod_l+0x52e>
 800f112:	9b08      	ldr	r3, [sp, #32]
 800f114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f118:	f7f1 fa76 	bl	8000608 <__aeabi_dmul>
 800f11c:	2301      	movs	r3, #1
 800f11e:	9a08      	ldr	r2, [sp, #32]
 800f120:	3208      	adds	r2, #8
 800f122:	3601      	adds	r6, #1
 800f124:	1064      	asrs	r4, r4, #1
 800f126:	9208      	str	r2, [sp, #32]
 800f128:	e7cd      	b.n	800f0c6 <_strtod_l+0x4d6>
 800f12a:	d0ed      	beq.n	800f108 <_strtod_l+0x518>
 800f12c:	4264      	negs	r4, r4
 800f12e:	f014 020f 	ands.w	r2, r4, #15
 800f132:	d00a      	beq.n	800f14a <_strtod_l+0x55a>
 800f134:	4b12      	ldr	r3, [pc, #72]	@ (800f180 <_strtod_l+0x590>)
 800f136:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f13a:	4650      	mov	r0, sl
 800f13c:	4659      	mov	r1, fp
 800f13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f142:	f7f1 fb8b 	bl	800085c <__aeabi_ddiv>
 800f146:	4682      	mov	sl, r0
 800f148:	468b      	mov	fp, r1
 800f14a:	1124      	asrs	r4, r4, #4
 800f14c:	d0dc      	beq.n	800f108 <_strtod_l+0x518>
 800f14e:	2c1f      	cmp	r4, #31
 800f150:	dd20      	ble.n	800f194 <_strtod_l+0x5a4>
 800f152:	2400      	movs	r4, #0
 800f154:	46a0      	mov	r8, r4
 800f156:	940a      	str	r4, [sp, #40]	@ 0x28
 800f158:	46a1      	mov	r9, r4
 800f15a:	9a05      	ldr	r2, [sp, #20]
 800f15c:	2322      	movs	r3, #34	@ 0x22
 800f15e:	f04f 0a00 	mov.w	sl, #0
 800f162:	f04f 0b00 	mov.w	fp, #0
 800f166:	6013      	str	r3, [r2, #0]
 800f168:	e768      	b.n	800f03c <_strtod_l+0x44c>
 800f16a:	bf00      	nop
 800f16c:	08010ec5 	.word	0x08010ec5
 800f170:	080110dc 	.word	0x080110dc
 800f174:	08010ebd 	.word	0x08010ebd
 800f178:	08010ef4 	.word	0x08010ef4
 800f17c:	08011285 	.word	0x08011285
 800f180:	08011010 	.word	0x08011010
 800f184:	08010fe8 	.word	0x08010fe8
 800f188:	7ff00000 	.word	0x7ff00000
 800f18c:	7ca00000 	.word	0x7ca00000
 800f190:	7fefffff 	.word	0x7fefffff
 800f194:	f014 0310 	ands.w	r3, r4, #16
 800f198:	bf18      	it	ne
 800f19a:	236a      	movne	r3, #106	@ 0x6a
 800f19c:	4ea9      	ldr	r6, [pc, #676]	@ (800f444 <_strtod_l+0x854>)
 800f19e:	9308      	str	r3, [sp, #32]
 800f1a0:	4650      	mov	r0, sl
 800f1a2:	4659      	mov	r1, fp
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	07e2      	lsls	r2, r4, #31
 800f1a8:	d504      	bpl.n	800f1b4 <_strtod_l+0x5c4>
 800f1aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f1ae:	f7f1 fa2b 	bl	8000608 <__aeabi_dmul>
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	1064      	asrs	r4, r4, #1
 800f1b6:	f106 0608 	add.w	r6, r6, #8
 800f1ba:	d1f4      	bne.n	800f1a6 <_strtod_l+0x5b6>
 800f1bc:	b10b      	cbz	r3, 800f1c2 <_strtod_l+0x5d2>
 800f1be:	4682      	mov	sl, r0
 800f1c0:	468b      	mov	fp, r1
 800f1c2:	9b08      	ldr	r3, [sp, #32]
 800f1c4:	b1b3      	cbz	r3, 800f1f4 <_strtod_l+0x604>
 800f1c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f1ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	4659      	mov	r1, fp
 800f1d2:	dd0f      	ble.n	800f1f4 <_strtod_l+0x604>
 800f1d4:	2b1f      	cmp	r3, #31
 800f1d6:	dd55      	ble.n	800f284 <_strtod_l+0x694>
 800f1d8:	2b34      	cmp	r3, #52	@ 0x34
 800f1da:	bfde      	ittt	le
 800f1dc:	f04f 33ff 	movle.w	r3, #4294967295
 800f1e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f1e4:	4093      	lslle	r3, r2
 800f1e6:	f04f 0a00 	mov.w	sl, #0
 800f1ea:	bfcc      	ite	gt
 800f1ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f1f0:	ea03 0b01 	andle.w	fp, r3, r1
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	4650      	mov	r0, sl
 800f1fa:	4659      	mov	r1, fp
 800f1fc:	f7f1 fc6c 	bl	8000ad8 <__aeabi_dcmpeq>
 800f200:	2800      	cmp	r0, #0
 800f202:	d1a6      	bne.n	800f152 <_strtod_l+0x562>
 800f204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f206:	9300      	str	r3, [sp, #0]
 800f208:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f20a:	9805      	ldr	r0, [sp, #20]
 800f20c:	462b      	mov	r3, r5
 800f20e:	463a      	mov	r2, r7
 800f210:	f7ff f8c6 	bl	800e3a0 <__s2b>
 800f214:	900a      	str	r0, [sp, #40]	@ 0x28
 800f216:	2800      	cmp	r0, #0
 800f218:	f43f af05 	beq.w	800f026 <_strtod_l+0x436>
 800f21c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f21e:	2a00      	cmp	r2, #0
 800f220:	eba9 0308 	sub.w	r3, r9, r8
 800f224:	bfa8      	it	ge
 800f226:	2300      	movge	r3, #0
 800f228:	9312      	str	r3, [sp, #72]	@ 0x48
 800f22a:	2400      	movs	r4, #0
 800f22c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f230:	9316      	str	r3, [sp, #88]	@ 0x58
 800f232:	46a0      	mov	r8, r4
 800f234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f236:	9805      	ldr	r0, [sp, #20]
 800f238:	6859      	ldr	r1, [r3, #4]
 800f23a:	f7ff f809 	bl	800e250 <_Balloc>
 800f23e:	4681      	mov	r9, r0
 800f240:	2800      	cmp	r0, #0
 800f242:	f43f aef4 	beq.w	800f02e <_strtod_l+0x43e>
 800f246:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f248:	691a      	ldr	r2, [r3, #16]
 800f24a:	3202      	adds	r2, #2
 800f24c:	f103 010c 	add.w	r1, r3, #12
 800f250:	0092      	lsls	r2, r2, #2
 800f252:	300c      	adds	r0, #12
 800f254:	f7fe f899 	bl	800d38a <memcpy>
 800f258:	ec4b ab10 	vmov	d0, sl, fp
 800f25c:	9805      	ldr	r0, [sp, #20]
 800f25e:	aa1c      	add	r2, sp, #112	@ 0x70
 800f260:	a91b      	add	r1, sp, #108	@ 0x6c
 800f262:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f266:	f7ff fbd7 	bl	800ea18 <__d2b>
 800f26a:	901a      	str	r0, [sp, #104]	@ 0x68
 800f26c:	2800      	cmp	r0, #0
 800f26e:	f43f aede 	beq.w	800f02e <_strtod_l+0x43e>
 800f272:	9805      	ldr	r0, [sp, #20]
 800f274:	2101      	movs	r1, #1
 800f276:	f7ff f929 	bl	800e4cc <__i2b>
 800f27a:	4680      	mov	r8, r0
 800f27c:	b948      	cbnz	r0, 800f292 <_strtod_l+0x6a2>
 800f27e:	f04f 0800 	mov.w	r8, #0
 800f282:	e6d4      	b.n	800f02e <_strtod_l+0x43e>
 800f284:	f04f 32ff 	mov.w	r2, #4294967295
 800f288:	fa02 f303 	lsl.w	r3, r2, r3
 800f28c:	ea03 0a0a 	and.w	sl, r3, sl
 800f290:	e7b0      	b.n	800f1f4 <_strtod_l+0x604>
 800f292:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f294:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f296:	2d00      	cmp	r5, #0
 800f298:	bfab      	itete	ge
 800f29a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f29c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f29e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f2a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f2a2:	bfac      	ite	ge
 800f2a4:	18ef      	addge	r7, r5, r3
 800f2a6:	1b5e      	sublt	r6, r3, r5
 800f2a8:	9b08      	ldr	r3, [sp, #32]
 800f2aa:	1aed      	subs	r5, r5, r3
 800f2ac:	4415      	add	r5, r2
 800f2ae:	4b66      	ldr	r3, [pc, #408]	@ (800f448 <_strtod_l+0x858>)
 800f2b0:	3d01      	subs	r5, #1
 800f2b2:	429d      	cmp	r5, r3
 800f2b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f2b8:	da50      	bge.n	800f35c <_strtod_l+0x76c>
 800f2ba:	1b5b      	subs	r3, r3, r5
 800f2bc:	2b1f      	cmp	r3, #31
 800f2be:	eba2 0203 	sub.w	r2, r2, r3
 800f2c2:	f04f 0101 	mov.w	r1, #1
 800f2c6:	dc3d      	bgt.n	800f344 <_strtod_l+0x754>
 800f2c8:	fa01 f303 	lsl.w	r3, r1, r3
 800f2cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f2d2:	18bd      	adds	r5, r7, r2
 800f2d4:	9b08      	ldr	r3, [sp, #32]
 800f2d6:	42af      	cmp	r7, r5
 800f2d8:	4416      	add	r6, r2
 800f2da:	441e      	add	r6, r3
 800f2dc:	463b      	mov	r3, r7
 800f2de:	bfa8      	it	ge
 800f2e0:	462b      	movge	r3, r5
 800f2e2:	42b3      	cmp	r3, r6
 800f2e4:	bfa8      	it	ge
 800f2e6:	4633      	movge	r3, r6
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	bfc2      	ittt	gt
 800f2ec:	1aed      	subgt	r5, r5, r3
 800f2ee:	1af6      	subgt	r6, r6, r3
 800f2f0:	1aff      	subgt	r7, r7, r3
 800f2f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	dd16      	ble.n	800f326 <_strtod_l+0x736>
 800f2f8:	4641      	mov	r1, r8
 800f2fa:	9805      	ldr	r0, [sp, #20]
 800f2fc:	461a      	mov	r2, r3
 800f2fe:	f7ff f9a5 	bl	800e64c <__pow5mult>
 800f302:	4680      	mov	r8, r0
 800f304:	2800      	cmp	r0, #0
 800f306:	d0ba      	beq.n	800f27e <_strtod_l+0x68e>
 800f308:	4601      	mov	r1, r0
 800f30a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f30c:	9805      	ldr	r0, [sp, #20]
 800f30e:	f7ff f8f3 	bl	800e4f8 <__multiply>
 800f312:	900e      	str	r0, [sp, #56]	@ 0x38
 800f314:	2800      	cmp	r0, #0
 800f316:	f43f ae8a 	beq.w	800f02e <_strtod_l+0x43e>
 800f31a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f31c:	9805      	ldr	r0, [sp, #20]
 800f31e:	f7fe ffd7 	bl	800e2d0 <_Bfree>
 800f322:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f324:	931a      	str	r3, [sp, #104]	@ 0x68
 800f326:	2d00      	cmp	r5, #0
 800f328:	dc1d      	bgt.n	800f366 <_strtod_l+0x776>
 800f32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	dd23      	ble.n	800f378 <_strtod_l+0x788>
 800f330:	4649      	mov	r1, r9
 800f332:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f334:	9805      	ldr	r0, [sp, #20]
 800f336:	f7ff f989 	bl	800e64c <__pow5mult>
 800f33a:	4681      	mov	r9, r0
 800f33c:	b9e0      	cbnz	r0, 800f378 <_strtod_l+0x788>
 800f33e:	f04f 0900 	mov.w	r9, #0
 800f342:	e674      	b.n	800f02e <_strtod_l+0x43e>
 800f344:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f348:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f34c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f350:	35e2      	adds	r5, #226	@ 0xe2
 800f352:	fa01 f305 	lsl.w	r3, r1, r5
 800f356:	9310      	str	r3, [sp, #64]	@ 0x40
 800f358:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f35a:	e7ba      	b.n	800f2d2 <_strtod_l+0x6e2>
 800f35c:	2300      	movs	r3, #0
 800f35e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f360:	2301      	movs	r3, #1
 800f362:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f364:	e7b5      	b.n	800f2d2 <_strtod_l+0x6e2>
 800f366:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f368:	9805      	ldr	r0, [sp, #20]
 800f36a:	462a      	mov	r2, r5
 800f36c:	f7ff f9c8 	bl	800e700 <__lshift>
 800f370:	901a      	str	r0, [sp, #104]	@ 0x68
 800f372:	2800      	cmp	r0, #0
 800f374:	d1d9      	bne.n	800f32a <_strtod_l+0x73a>
 800f376:	e65a      	b.n	800f02e <_strtod_l+0x43e>
 800f378:	2e00      	cmp	r6, #0
 800f37a:	dd07      	ble.n	800f38c <_strtod_l+0x79c>
 800f37c:	4649      	mov	r1, r9
 800f37e:	9805      	ldr	r0, [sp, #20]
 800f380:	4632      	mov	r2, r6
 800f382:	f7ff f9bd 	bl	800e700 <__lshift>
 800f386:	4681      	mov	r9, r0
 800f388:	2800      	cmp	r0, #0
 800f38a:	d0d8      	beq.n	800f33e <_strtod_l+0x74e>
 800f38c:	2f00      	cmp	r7, #0
 800f38e:	dd08      	ble.n	800f3a2 <_strtod_l+0x7b2>
 800f390:	4641      	mov	r1, r8
 800f392:	9805      	ldr	r0, [sp, #20]
 800f394:	463a      	mov	r2, r7
 800f396:	f7ff f9b3 	bl	800e700 <__lshift>
 800f39a:	4680      	mov	r8, r0
 800f39c:	2800      	cmp	r0, #0
 800f39e:	f43f ae46 	beq.w	800f02e <_strtod_l+0x43e>
 800f3a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f3a4:	9805      	ldr	r0, [sp, #20]
 800f3a6:	464a      	mov	r2, r9
 800f3a8:	f7ff fa32 	bl	800e810 <__mdiff>
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	f43f ae3d 	beq.w	800f02e <_strtod_l+0x43e>
 800f3b4:	68c3      	ldr	r3, [r0, #12]
 800f3b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	60c3      	str	r3, [r0, #12]
 800f3bc:	4641      	mov	r1, r8
 800f3be:	f7ff fa0b 	bl	800e7d8 <__mcmp>
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	da46      	bge.n	800f454 <_strtod_l+0x864>
 800f3c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3c8:	ea53 030a 	orrs.w	r3, r3, sl
 800f3cc:	d16c      	bne.n	800f4a8 <_strtod_l+0x8b8>
 800f3ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d168      	bne.n	800f4a8 <_strtod_l+0x8b8>
 800f3d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f3da:	0d1b      	lsrs	r3, r3, #20
 800f3dc:	051b      	lsls	r3, r3, #20
 800f3de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f3e2:	d961      	bls.n	800f4a8 <_strtod_l+0x8b8>
 800f3e4:	6963      	ldr	r3, [r4, #20]
 800f3e6:	b913      	cbnz	r3, 800f3ee <_strtod_l+0x7fe>
 800f3e8:	6923      	ldr	r3, [r4, #16]
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	dd5c      	ble.n	800f4a8 <_strtod_l+0x8b8>
 800f3ee:	4621      	mov	r1, r4
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	9805      	ldr	r0, [sp, #20]
 800f3f4:	f7ff f984 	bl	800e700 <__lshift>
 800f3f8:	4641      	mov	r1, r8
 800f3fa:	4604      	mov	r4, r0
 800f3fc:	f7ff f9ec 	bl	800e7d8 <__mcmp>
 800f400:	2800      	cmp	r0, #0
 800f402:	dd51      	ble.n	800f4a8 <_strtod_l+0x8b8>
 800f404:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f408:	9a08      	ldr	r2, [sp, #32]
 800f40a:	0d1b      	lsrs	r3, r3, #20
 800f40c:	051b      	lsls	r3, r3, #20
 800f40e:	2a00      	cmp	r2, #0
 800f410:	d06b      	beq.n	800f4ea <_strtod_l+0x8fa>
 800f412:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f416:	d868      	bhi.n	800f4ea <_strtod_l+0x8fa>
 800f418:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f41c:	f67f ae9d 	bls.w	800f15a <_strtod_l+0x56a>
 800f420:	4b0a      	ldr	r3, [pc, #40]	@ (800f44c <_strtod_l+0x85c>)
 800f422:	4650      	mov	r0, sl
 800f424:	4659      	mov	r1, fp
 800f426:	2200      	movs	r2, #0
 800f428:	f7f1 f8ee 	bl	8000608 <__aeabi_dmul>
 800f42c:	4b08      	ldr	r3, [pc, #32]	@ (800f450 <_strtod_l+0x860>)
 800f42e:	400b      	ands	r3, r1
 800f430:	4682      	mov	sl, r0
 800f432:	468b      	mov	fp, r1
 800f434:	2b00      	cmp	r3, #0
 800f436:	f47f ae05 	bne.w	800f044 <_strtod_l+0x454>
 800f43a:	9a05      	ldr	r2, [sp, #20]
 800f43c:	2322      	movs	r3, #34	@ 0x22
 800f43e:	6013      	str	r3, [r2, #0]
 800f440:	e600      	b.n	800f044 <_strtod_l+0x454>
 800f442:	bf00      	nop
 800f444:	08011108 	.word	0x08011108
 800f448:	fffffc02 	.word	0xfffffc02
 800f44c:	39500000 	.word	0x39500000
 800f450:	7ff00000 	.word	0x7ff00000
 800f454:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f458:	d165      	bne.n	800f526 <_strtod_l+0x936>
 800f45a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f45c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f460:	b35a      	cbz	r2, 800f4ba <_strtod_l+0x8ca>
 800f462:	4a9f      	ldr	r2, [pc, #636]	@ (800f6e0 <_strtod_l+0xaf0>)
 800f464:	4293      	cmp	r3, r2
 800f466:	d12b      	bne.n	800f4c0 <_strtod_l+0x8d0>
 800f468:	9b08      	ldr	r3, [sp, #32]
 800f46a:	4651      	mov	r1, sl
 800f46c:	b303      	cbz	r3, 800f4b0 <_strtod_l+0x8c0>
 800f46e:	4b9d      	ldr	r3, [pc, #628]	@ (800f6e4 <_strtod_l+0xaf4>)
 800f470:	465a      	mov	r2, fp
 800f472:	4013      	ands	r3, r2
 800f474:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f478:	f04f 32ff 	mov.w	r2, #4294967295
 800f47c:	d81b      	bhi.n	800f4b6 <_strtod_l+0x8c6>
 800f47e:	0d1b      	lsrs	r3, r3, #20
 800f480:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f484:	fa02 f303 	lsl.w	r3, r2, r3
 800f488:	4299      	cmp	r1, r3
 800f48a:	d119      	bne.n	800f4c0 <_strtod_l+0x8d0>
 800f48c:	4b96      	ldr	r3, [pc, #600]	@ (800f6e8 <_strtod_l+0xaf8>)
 800f48e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f490:	429a      	cmp	r2, r3
 800f492:	d102      	bne.n	800f49a <_strtod_l+0x8aa>
 800f494:	3101      	adds	r1, #1
 800f496:	f43f adca 	beq.w	800f02e <_strtod_l+0x43e>
 800f49a:	4b92      	ldr	r3, [pc, #584]	@ (800f6e4 <_strtod_l+0xaf4>)
 800f49c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f49e:	401a      	ands	r2, r3
 800f4a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f4a4:	f04f 0a00 	mov.w	sl, #0
 800f4a8:	9b08      	ldr	r3, [sp, #32]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d1b8      	bne.n	800f420 <_strtod_l+0x830>
 800f4ae:	e5c9      	b.n	800f044 <_strtod_l+0x454>
 800f4b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f4b4:	e7e8      	b.n	800f488 <_strtod_l+0x898>
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	e7e6      	b.n	800f488 <_strtod_l+0x898>
 800f4ba:	ea53 030a 	orrs.w	r3, r3, sl
 800f4be:	d0a1      	beq.n	800f404 <_strtod_l+0x814>
 800f4c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f4c2:	b1db      	cbz	r3, 800f4fc <_strtod_l+0x90c>
 800f4c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4c6:	4213      	tst	r3, r2
 800f4c8:	d0ee      	beq.n	800f4a8 <_strtod_l+0x8b8>
 800f4ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4cc:	9a08      	ldr	r2, [sp, #32]
 800f4ce:	4650      	mov	r0, sl
 800f4d0:	4659      	mov	r1, fp
 800f4d2:	b1bb      	cbz	r3, 800f504 <_strtod_l+0x914>
 800f4d4:	f7ff fb6e 	bl	800ebb4 <sulp>
 800f4d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f4dc:	ec53 2b10 	vmov	r2, r3, d0
 800f4e0:	f7f0 fedc 	bl	800029c <__adddf3>
 800f4e4:	4682      	mov	sl, r0
 800f4e6:	468b      	mov	fp, r1
 800f4e8:	e7de      	b.n	800f4a8 <_strtod_l+0x8b8>
 800f4ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f4ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f4f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f4f6:	f04f 3aff 	mov.w	sl, #4294967295
 800f4fa:	e7d5      	b.n	800f4a8 <_strtod_l+0x8b8>
 800f4fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f4fe:	ea13 0f0a 	tst.w	r3, sl
 800f502:	e7e1      	b.n	800f4c8 <_strtod_l+0x8d8>
 800f504:	f7ff fb56 	bl	800ebb4 <sulp>
 800f508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f50c:	ec53 2b10 	vmov	r2, r3, d0
 800f510:	f7f0 fec2 	bl	8000298 <__aeabi_dsub>
 800f514:	2200      	movs	r2, #0
 800f516:	2300      	movs	r3, #0
 800f518:	4682      	mov	sl, r0
 800f51a:	468b      	mov	fp, r1
 800f51c:	f7f1 fadc 	bl	8000ad8 <__aeabi_dcmpeq>
 800f520:	2800      	cmp	r0, #0
 800f522:	d0c1      	beq.n	800f4a8 <_strtod_l+0x8b8>
 800f524:	e619      	b.n	800f15a <_strtod_l+0x56a>
 800f526:	4641      	mov	r1, r8
 800f528:	4620      	mov	r0, r4
 800f52a:	f7ff facd 	bl	800eac8 <__ratio>
 800f52e:	ec57 6b10 	vmov	r6, r7, d0
 800f532:	2200      	movs	r2, #0
 800f534:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f538:	4630      	mov	r0, r6
 800f53a:	4639      	mov	r1, r7
 800f53c:	f7f1 fae0 	bl	8000b00 <__aeabi_dcmple>
 800f540:	2800      	cmp	r0, #0
 800f542:	d06f      	beq.n	800f624 <_strtod_l+0xa34>
 800f544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f546:	2b00      	cmp	r3, #0
 800f548:	d17a      	bne.n	800f640 <_strtod_l+0xa50>
 800f54a:	f1ba 0f00 	cmp.w	sl, #0
 800f54e:	d158      	bne.n	800f602 <_strtod_l+0xa12>
 800f550:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f552:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f556:	2b00      	cmp	r3, #0
 800f558:	d15a      	bne.n	800f610 <_strtod_l+0xa20>
 800f55a:	4b64      	ldr	r3, [pc, #400]	@ (800f6ec <_strtod_l+0xafc>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	4630      	mov	r0, r6
 800f560:	4639      	mov	r1, r7
 800f562:	f7f1 fac3 	bl	8000aec <__aeabi_dcmplt>
 800f566:	2800      	cmp	r0, #0
 800f568:	d159      	bne.n	800f61e <_strtod_l+0xa2e>
 800f56a:	4630      	mov	r0, r6
 800f56c:	4639      	mov	r1, r7
 800f56e:	4b60      	ldr	r3, [pc, #384]	@ (800f6f0 <_strtod_l+0xb00>)
 800f570:	2200      	movs	r2, #0
 800f572:	f7f1 f849 	bl	8000608 <__aeabi_dmul>
 800f576:	4606      	mov	r6, r0
 800f578:	460f      	mov	r7, r1
 800f57a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f57e:	9606      	str	r6, [sp, #24]
 800f580:	9307      	str	r3, [sp, #28]
 800f582:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f586:	4d57      	ldr	r5, [pc, #348]	@ (800f6e4 <_strtod_l+0xaf4>)
 800f588:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f58c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f58e:	401d      	ands	r5, r3
 800f590:	4b58      	ldr	r3, [pc, #352]	@ (800f6f4 <_strtod_l+0xb04>)
 800f592:	429d      	cmp	r5, r3
 800f594:	f040 80b2 	bne.w	800f6fc <_strtod_l+0xb0c>
 800f598:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f59a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f59e:	ec4b ab10 	vmov	d0, sl, fp
 800f5a2:	f7ff f9c9 	bl	800e938 <__ulp>
 800f5a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f5aa:	ec51 0b10 	vmov	r0, r1, d0
 800f5ae:	f7f1 f82b 	bl	8000608 <__aeabi_dmul>
 800f5b2:	4652      	mov	r2, sl
 800f5b4:	465b      	mov	r3, fp
 800f5b6:	f7f0 fe71 	bl	800029c <__adddf3>
 800f5ba:	460b      	mov	r3, r1
 800f5bc:	4949      	ldr	r1, [pc, #292]	@ (800f6e4 <_strtod_l+0xaf4>)
 800f5be:	4a4e      	ldr	r2, [pc, #312]	@ (800f6f8 <_strtod_l+0xb08>)
 800f5c0:	4019      	ands	r1, r3
 800f5c2:	4291      	cmp	r1, r2
 800f5c4:	4682      	mov	sl, r0
 800f5c6:	d942      	bls.n	800f64e <_strtod_l+0xa5e>
 800f5c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f5ca:	4b47      	ldr	r3, [pc, #284]	@ (800f6e8 <_strtod_l+0xaf8>)
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	d103      	bne.n	800f5d8 <_strtod_l+0x9e8>
 800f5d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	f43f ad2b 	beq.w	800f02e <_strtod_l+0x43e>
 800f5d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f6e8 <_strtod_l+0xaf8>
 800f5dc:	f04f 3aff 	mov.w	sl, #4294967295
 800f5e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f5e2:	9805      	ldr	r0, [sp, #20]
 800f5e4:	f7fe fe74 	bl	800e2d0 <_Bfree>
 800f5e8:	9805      	ldr	r0, [sp, #20]
 800f5ea:	4649      	mov	r1, r9
 800f5ec:	f7fe fe70 	bl	800e2d0 <_Bfree>
 800f5f0:	9805      	ldr	r0, [sp, #20]
 800f5f2:	4641      	mov	r1, r8
 800f5f4:	f7fe fe6c 	bl	800e2d0 <_Bfree>
 800f5f8:	9805      	ldr	r0, [sp, #20]
 800f5fa:	4621      	mov	r1, r4
 800f5fc:	f7fe fe68 	bl	800e2d0 <_Bfree>
 800f600:	e618      	b.n	800f234 <_strtod_l+0x644>
 800f602:	f1ba 0f01 	cmp.w	sl, #1
 800f606:	d103      	bne.n	800f610 <_strtod_l+0xa20>
 800f608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	f43f ada5 	beq.w	800f15a <_strtod_l+0x56a>
 800f610:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f6c0 <_strtod_l+0xad0>
 800f614:	4f35      	ldr	r7, [pc, #212]	@ (800f6ec <_strtod_l+0xafc>)
 800f616:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f61a:	2600      	movs	r6, #0
 800f61c:	e7b1      	b.n	800f582 <_strtod_l+0x992>
 800f61e:	4f34      	ldr	r7, [pc, #208]	@ (800f6f0 <_strtod_l+0xb00>)
 800f620:	2600      	movs	r6, #0
 800f622:	e7aa      	b.n	800f57a <_strtod_l+0x98a>
 800f624:	4b32      	ldr	r3, [pc, #200]	@ (800f6f0 <_strtod_l+0xb00>)
 800f626:	4630      	mov	r0, r6
 800f628:	4639      	mov	r1, r7
 800f62a:	2200      	movs	r2, #0
 800f62c:	f7f0 ffec 	bl	8000608 <__aeabi_dmul>
 800f630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f632:	4606      	mov	r6, r0
 800f634:	460f      	mov	r7, r1
 800f636:	2b00      	cmp	r3, #0
 800f638:	d09f      	beq.n	800f57a <_strtod_l+0x98a>
 800f63a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f63e:	e7a0      	b.n	800f582 <_strtod_l+0x992>
 800f640:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f6c8 <_strtod_l+0xad8>
 800f644:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f648:	ec57 6b17 	vmov	r6, r7, d7
 800f64c:	e799      	b.n	800f582 <_strtod_l+0x992>
 800f64e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f652:	9b08      	ldr	r3, [sp, #32]
 800f654:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1c1      	bne.n	800f5e0 <_strtod_l+0x9f0>
 800f65c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f660:	0d1b      	lsrs	r3, r3, #20
 800f662:	051b      	lsls	r3, r3, #20
 800f664:	429d      	cmp	r5, r3
 800f666:	d1bb      	bne.n	800f5e0 <_strtod_l+0x9f0>
 800f668:	4630      	mov	r0, r6
 800f66a:	4639      	mov	r1, r7
 800f66c:	f7f1 fb2c 	bl	8000cc8 <__aeabi_d2lz>
 800f670:	f7f0 ff9c 	bl	80005ac <__aeabi_l2d>
 800f674:	4602      	mov	r2, r0
 800f676:	460b      	mov	r3, r1
 800f678:	4630      	mov	r0, r6
 800f67a:	4639      	mov	r1, r7
 800f67c:	f7f0 fe0c 	bl	8000298 <__aeabi_dsub>
 800f680:	460b      	mov	r3, r1
 800f682:	4602      	mov	r2, r0
 800f684:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f688:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f68c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f68e:	ea46 060a 	orr.w	r6, r6, sl
 800f692:	431e      	orrs	r6, r3
 800f694:	d06f      	beq.n	800f776 <_strtod_l+0xb86>
 800f696:	a30e      	add	r3, pc, #56	@ (adr r3, 800f6d0 <_strtod_l+0xae0>)
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	f7f1 fa26 	bl	8000aec <__aeabi_dcmplt>
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	f47f accf 	bne.w	800f044 <_strtod_l+0x454>
 800f6a6:	a30c      	add	r3, pc, #48	@ (adr r3, 800f6d8 <_strtod_l+0xae8>)
 800f6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f6b0:	f7f1 fa3a 	bl	8000b28 <__aeabi_dcmpgt>
 800f6b4:	2800      	cmp	r0, #0
 800f6b6:	d093      	beq.n	800f5e0 <_strtod_l+0x9f0>
 800f6b8:	e4c4      	b.n	800f044 <_strtod_l+0x454>
 800f6ba:	bf00      	nop
 800f6bc:	f3af 8000 	nop.w
 800f6c0:	00000000 	.word	0x00000000
 800f6c4:	bff00000 	.word	0xbff00000
 800f6c8:	00000000 	.word	0x00000000
 800f6cc:	3ff00000 	.word	0x3ff00000
 800f6d0:	94a03595 	.word	0x94a03595
 800f6d4:	3fdfffff 	.word	0x3fdfffff
 800f6d8:	35afe535 	.word	0x35afe535
 800f6dc:	3fe00000 	.word	0x3fe00000
 800f6e0:	000fffff 	.word	0x000fffff
 800f6e4:	7ff00000 	.word	0x7ff00000
 800f6e8:	7fefffff 	.word	0x7fefffff
 800f6ec:	3ff00000 	.word	0x3ff00000
 800f6f0:	3fe00000 	.word	0x3fe00000
 800f6f4:	7fe00000 	.word	0x7fe00000
 800f6f8:	7c9fffff 	.word	0x7c9fffff
 800f6fc:	9b08      	ldr	r3, [sp, #32]
 800f6fe:	b323      	cbz	r3, 800f74a <_strtod_l+0xb5a>
 800f700:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f704:	d821      	bhi.n	800f74a <_strtod_l+0xb5a>
 800f706:	a328      	add	r3, pc, #160	@ (adr r3, 800f7a8 <_strtod_l+0xbb8>)
 800f708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70c:	4630      	mov	r0, r6
 800f70e:	4639      	mov	r1, r7
 800f710:	f7f1 f9f6 	bl	8000b00 <__aeabi_dcmple>
 800f714:	b1a0      	cbz	r0, 800f740 <_strtod_l+0xb50>
 800f716:	4639      	mov	r1, r7
 800f718:	4630      	mov	r0, r6
 800f71a:	f7f1 fa4d 	bl	8000bb8 <__aeabi_d2uiz>
 800f71e:	2801      	cmp	r0, #1
 800f720:	bf38      	it	cc
 800f722:	2001      	movcc	r0, #1
 800f724:	f7f0 fef6 	bl	8000514 <__aeabi_ui2d>
 800f728:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f72a:	4606      	mov	r6, r0
 800f72c:	460f      	mov	r7, r1
 800f72e:	b9fb      	cbnz	r3, 800f770 <_strtod_l+0xb80>
 800f730:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f734:	9014      	str	r0, [sp, #80]	@ 0x50
 800f736:	9315      	str	r3, [sp, #84]	@ 0x54
 800f738:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f73c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f740:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f742:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f746:	1b5b      	subs	r3, r3, r5
 800f748:	9311      	str	r3, [sp, #68]	@ 0x44
 800f74a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f74e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f752:	f7ff f8f1 	bl	800e938 <__ulp>
 800f756:	4650      	mov	r0, sl
 800f758:	ec53 2b10 	vmov	r2, r3, d0
 800f75c:	4659      	mov	r1, fp
 800f75e:	f7f0 ff53 	bl	8000608 <__aeabi_dmul>
 800f762:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f766:	f7f0 fd99 	bl	800029c <__adddf3>
 800f76a:	4682      	mov	sl, r0
 800f76c:	468b      	mov	fp, r1
 800f76e:	e770      	b.n	800f652 <_strtod_l+0xa62>
 800f770:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f774:	e7e0      	b.n	800f738 <_strtod_l+0xb48>
 800f776:	a30e      	add	r3, pc, #56	@ (adr r3, 800f7b0 <_strtod_l+0xbc0>)
 800f778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f77c:	f7f1 f9b6 	bl	8000aec <__aeabi_dcmplt>
 800f780:	e798      	b.n	800f6b4 <_strtod_l+0xac4>
 800f782:	2300      	movs	r3, #0
 800f784:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f786:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f788:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f78a:	6013      	str	r3, [r2, #0]
 800f78c:	f7ff ba6d 	b.w	800ec6a <_strtod_l+0x7a>
 800f790:	2a65      	cmp	r2, #101	@ 0x65
 800f792:	f43f ab66 	beq.w	800ee62 <_strtod_l+0x272>
 800f796:	2a45      	cmp	r2, #69	@ 0x45
 800f798:	f43f ab63 	beq.w	800ee62 <_strtod_l+0x272>
 800f79c:	2301      	movs	r3, #1
 800f79e:	f7ff bb9e 	b.w	800eede <_strtod_l+0x2ee>
 800f7a2:	bf00      	nop
 800f7a4:	f3af 8000 	nop.w
 800f7a8:	ffc00000 	.word	0xffc00000
 800f7ac:	41dfffff 	.word	0x41dfffff
 800f7b0:	94a03595 	.word	0x94a03595
 800f7b4:	3fcfffff 	.word	0x3fcfffff

0800f7b8 <_strtod_r>:
 800f7b8:	4b01      	ldr	r3, [pc, #4]	@ (800f7c0 <_strtod_r+0x8>)
 800f7ba:	f7ff ba19 	b.w	800ebf0 <_strtod_l>
 800f7be:	bf00      	nop
 800f7c0:	20000090 	.word	0x20000090

0800f7c4 <_strtol_l.constprop.0>:
 800f7c4:	2b24      	cmp	r3, #36	@ 0x24
 800f7c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7ca:	4686      	mov	lr, r0
 800f7cc:	4690      	mov	r8, r2
 800f7ce:	d801      	bhi.n	800f7d4 <_strtol_l.constprop.0+0x10>
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	d106      	bne.n	800f7e2 <_strtol_l.constprop.0+0x1e>
 800f7d4:	f7fd fdac 	bl	800d330 <__errno>
 800f7d8:	2316      	movs	r3, #22
 800f7da:	6003      	str	r3, [r0, #0]
 800f7dc:	2000      	movs	r0, #0
 800f7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7e2:	4834      	ldr	r0, [pc, #208]	@ (800f8b4 <_strtol_l.constprop.0+0xf0>)
 800f7e4:	460d      	mov	r5, r1
 800f7e6:	462a      	mov	r2, r5
 800f7e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f7ec:	5d06      	ldrb	r6, [r0, r4]
 800f7ee:	f016 0608 	ands.w	r6, r6, #8
 800f7f2:	d1f8      	bne.n	800f7e6 <_strtol_l.constprop.0+0x22>
 800f7f4:	2c2d      	cmp	r4, #45	@ 0x2d
 800f7f6:	d12d      	bne.n	800f854 <_strtol_l.constprop.0+0x90>
 800f7f8:	782c      	ldrb	r4, [r5, #0]
 800f7fa:	2601      	movs	r6, #1
 800f7fc:	1c95      	adds	r5, r2, #2
 800f7fe:	f033 0210 	bics.w	r2, r3, #16
 800f802:	d109      	bne.n	800f818 <_strtol_l.constprop.0+0x54>
 800f804:	2c30      	cmp	r4, #48	@ 0x30
 800f806:	d12a      	bne.n	800f85e <_strtol_l.constprop.0+0x9a>
 800f808:	782a      	ldrb	r2, [r5, #0]
 800f80a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f80e:	2a58      	cmp	r2, #88	@ 0x58
 800f810:	d125      	bne.n	800f85e <_strtol_l.constprop.0+0x9a>
 800f812:	786c      	ldrb	r4, [r5, #1]
 800f814:	2310      	movs	r3, #16
 800f816:	3502      	adds	r5, #2
 800f818:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f81c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f820:	2200      	movs	r2, #0
 800f822:	fbbc f9f3 	udiv	r9, ip, r3
 800f826:	4610      	mov	r0, r2
 800f828:	fb03 ca19 	mls	sl, r3, r9, ip
 800f82c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f830:	2f09      	cmp	r7, #9
 800f832:	d81b      	bhi.n	800f86c <_strtol_l.constprop.0+0xa8>
 800f834:	463c      	mov	r4, r7
 800f836:	42a3      	cmp	r3, r4
 800f838:	dd27      	ble.n	800f88a <_strtol_l.constprop.0+0xc6>
 800f83a:	1c57      	adds	r7, r2, #1
 800f83c:	d007      	beq.n	800f84e <_strtol_l.constprop.0+0x8a>
 800f83e:	4581      	cmp	r9, r0
 800f840:	d320      	bcc.n	800f884 <_strtol_l.constprop.0+0xc0>
 800f842:	d101      	bne.n	800f848 <_strtol_l.constprop.0+0x84>
 800f844:	45a2      	cmp	sl, r4
 800f846:	db1d      	blt.n	800f884 <_strtol_l.constprop.0+0xc0>
 800f848:	fb00 4003 	mla	r0, r0, r3, r4
 800f84c:	2201      	movs	r2, #1
 800f84e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f852:	e7eb      	b.n	800f82c <_strtol_l.constprop.0+0x68>
 800f854:	2c2b      	cmp	r4, #43	@ 0x2b
 800f856:	bf04      	itt	eq
 800f858:	782c      	ldrbeq	r4, [r5, #0]
 800f85a:	1c95      	addeq	r5, r2, #2
 800f85c:	e7cf      	b.n	800f7fe <_strtol_l.constprop.0+0x3a>
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d1da      	bne.n	800f818 <_strtol_l.constprop.0+0x54>
 800f862:	2c30      	cmp	r4, #48	@ 0x30
 800f864:	bf0c      	ite	eq
 800f866:	2308      	moveq	r3, #8
 800f868:	230a      	movne	r3, #10
 800f86a:	e7d5      	b.n	800f818 <_strtol_l.constprop.0+0x54>
 800f86c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f870:	2f19      	cmp	r7, #25
 800f872:	d801      	bhi.n	800f878 <_strtol_l.constprop.0+0xb4>
 800f874:	3c37      	subs	r4, #55	@ 0x37
 800f876:	e7de      	b.n	800f836 <_strtol_l.constprop.0+0x72>
 800f878:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f87c:	2f19      	cmp	r7, #25
 800f87e:	d804      	bhi.n	800f88a <_strtol_l.constprop.0+0xc6>
 800f880:	3c57      	subs	r4, #87	@ 0x57
 800f882:	e7d8      	b.n	800f836 <_strtol_l.constprop.0+0x72>
 800f884:	f04f 32ff 	mov.w	r2, #4294967295
 800f888:	e7e1      	b.n	800f84e <_strtol_l.constprop.0+0x8a>
 800f88a:	1c53      	adds	r3, r2, #1
 800f88c:	d108      	bne.n	800f8a0 <_strtol_l.constprop.0+0xdc>
 800f88e:	2322      	movs	r3, #34	@ 0x22
 800f890:	f8ce 3000 	str.w	r3, [lr]
 800f894:	4660      	mov	r0, ip
 800f896:	f1b8 0f00 	cmp.w	r8, #0
 800f89a:	d0a0      	beq.n	800f7de <_strtol_l.constprop.0+0x1a>
 800f89c:	1e69      	subs	r1, r5, #1
 800f89e:	e006      	b.n	800f8ae <_strtol_l.constprop.0+0xea>
 800f8a0:	b106      	cbz	r6, 800f8a4 <_strtol_l.constprop.0+0xe0>
 800f8a2:	4240      	negs	r0, r0
 800f8a4:	f1b8 0f00 	cmp.w	r8, #0
 800f8a8:	d099      	beq.n	800f7de <_strtol_l.constprop.0+0x1a>
 800f8aa:	2a00      	cmp	r2, #0
 800f8ac:	d1f6      	bne.n	800f89c <_strtol_l.constprop.0+0xd8>
 800f8ae:	f8c8 1000 	str.w	r1, [r8]
 800f8b2:	e794      	b.n	800f7de <_strtol_l.constprop.0+0x1a>
 800f8b4:	08011131 	.word	0x08011131

0800f8b8 <_strtol_r>:
 800f8b8:	f7ff bf84 	b.w	800f7c4 <_strtol_l.constprop.0>

0800f8bc <__ssputs_r>:
 800f8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c0:	688e      	ldr	r6, [r1, #8]
 800f8c2:	461f      	mov	r7, r3
 800f8c4:	42be      	cmp	r6, r7
 800f8c6:	680b      	ldr	r3, [r1, #0]
 800f8c8:	4682      	mov	sl, r0
 800f8ca:	460c      	mov	r4, r1
 800f8cc:	4690      	mov	r8, r2
 800f8ce:	d82d      	bhi.n	800f92c <__ssputs_r+0x70>
 800f8d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f8d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f8d8:	d026      	beq.n	800f928 <__ssputs_r+0x6c>
 800f8da:	6965      	ldr	r5, [r4, #20]
 800f8dc:	6909      	ldr	r1, [r1, #16]
 800f8de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f8e2:	eba3 0901 	sub.w	r9, r3, r1
 800f8e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f8ea:	1c7b      	adds	r3, r7, #1
 800f8ec:	444b      	add	r3, r9
 800f8ee:	106d      	asrs	r5, r5, #1
 800f8f0:	429d      	cmp	r5, r3
 800f8f2:	bf38      	it	cc
 800f8f4:	461d      	movcc	r5, r3
 800f8f6:	0553      	lsls	r3, r2, #21
 800f8f8:	d527      	bpl.n	800f94a <__ssputs_r+0x8e>
 800f8fa:	4629      	mov	r1, r5
 800f8fc:	f7fe fc1c 	bl	800e138 <_malloc_r>
 800f900:	4606      	mov	r6, r0
 800f902:	b360      	cbz	r0, 800f95e <__ssputs_r+0xa2>
 800f904:	6921      	ldr	r1, [r4, #16]
 800f906:	464a      	mov	r2, r9
 800f908:	f7fd fd3f 	bl	800d38a <memcpy>
 800f90c:	89a3      	ldrh	r3, [r4, #12]
 800f90e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f916:	81a3      	strh	r3, [r4, #12]
 800f918:	6126      	str	r6, [r4, #16]
 800f91a:	6165      	str	r5, [r4, #20]
 800f91c:	444e      	add	r6, r9
 800f91e:	eba5 0509 	sub.w	r5, r5, r9
 800f922:	6026      	str	r6, [r4, #0]
 800f924:	60a5      	str	r5, [r4, #8]
 800f926:	463e      	mov	r6, r7
 800f928:	42be      	cmp	r6, r7
 800f92a:	d900      	bls.n	800f92e <__ssputs_r+0x72>
 800f92c:	463e      	mov	r6, r7
 800f92e:	6820      	ldr	r0, [r4, #0]
 800f930:	4632      	mov	r2, r6
 800f932:	4641      	mov	r1, r8
 800f934:	f000 f9c6 	bl	800fcc4 <memmove>
 800f938:	68a3      	ldr	r3, [r4, #8]
 800f93a:	1b9b      	subs	r3, r3, r6
 800f93c:	60a3      	str	r3, [r4, #8]
 800f93e:	6823      	ldr	r3, [r4, #0]
 800f940:	4433      	add	r3, r6
 800f942:	6023      	str	r3, [r4, #0]
 800f944:	2000      	movs	r0, #0
 800f946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f94a:	462a      	mov	r2, r5
 800f94c:	f000 fd7d 	bl	801044a <_realloc_r>
 800f950:	4606      	mov	r6, r0
 800f952:	2800      	cmp	r0, #0
 800f954:	d1e0      	bne.n	800f918 <__ssputs_r+0x5c>
 800f956:	6921      	ldr	r1, [r4, #16]
 800f958:	4650      	mov	r0, sl
 800f95a:	f7fe fb79 	bl	800e050 <_free_r>
 800f95e:	230c      	movs	r3, #12
 800f960:	f8ca 3000 	str.w	r3, [sl]
 800f964:	89a3      	ldrh	r3, [r4, #12]
 800f966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f96a:	81a3      	strh	r3, [r4, #12]
 800f96c:	f04f 30ff 	mov.w	r0, #4294967295
 800f970:	e7e9      	b.n	800f946 <__ssputs_r+0x8a>
	...

0800f974 <_svfiprintf_r>:
 800f974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f978:	4698      	mov	r8, r3
 800f97a:	898b      	ldrh	r3, [r1, #12]
 800f97c:	061b      	lsls	r3, r3, #24
 800f97e:	b09d      	sub	sp, #116	@ 0x74
 800f980:	4607      	mov	r7, r0
 800f982:	460d      	mov	r5, r1
 800f984:	4614      	mov	r4, r2
 800f986:	d510      	bpl.n	800f9aa <_svfiprintf_r+0x36>
 800f988:	690b      	ldr	r3, [r1, #16]
 800f98a:	b973      	cbnz	r3, 800f9aa <_svfiprintf_r+0x36>
 800f98c:	2140      	movs	r1, #64	@ 0x40
 800f98e:	f7fe fbd3 	bl	800e138 <_malloc_r>
 800f992:	6028      	str	r0, [r5, #0]
 800f994:	6128      	str	r0, [r5, #16]
 800f996:	b930      	cbnz	r0, 800f9a6 <_svfiprintf_r+0x32>
 800f998:	230c      	movs	r3, #12
 800f99a:	603b      	str	r3, [r7, #0]
 800f99c:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a0:	b01d      	add	sp, #116	@ 0x74
 800f9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9a6:	2340      	movs	r3, #64	@ 0x40
 800f9a8:	616b      	str	r3, [r5, #20]
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9ae:	2320      	movs	r3, #32
 800f9b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f9b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9b8:	2330      	movs	r3, #48	@ 0x30
 800f9ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fb58 <_svfiprintf_r+0x1e4>
 800f9be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f9c2:	f04f 0901 	mov.w	r9, #1
 800f9c6:	4623      	mov	r3, r4
 800f9c8:	469a      	mov	sl, r3
 800f9ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9ce:	b10a      	cbz	r2, 800f9d4 <_svfiprintf_r+0x60>
 800f9d0:	2a25      	cmp	r2, #37	@ 0x25
 800f9d2:	d1f9      	bne.n	800f9c8 <_svfiprintf_r+0x54>
 800f9d4:	ebba 0b04 	subs.w	fp, sl, r4
 800f9d8:	d00b      	beq.n	800f9f2 <_svfiprintf_r+0x7e>
 800f9da:	465b      	mov	r3, fp
 800f9dc:	4622      	mov	r2, r4
 800f9de:	4629      	mov	r1, r5
 800f9e0:	4638      	mov	r0, r7
 800f9e2:	f7ff ff6b 	bl	800f8bc <__ssputs_r>
 800f9e6:	3001      	adds	r0, #1
 800f9e8:	f000 80a7 	beq.w	800fb3a <_svfiprintf_r+0x1c6>
 800f9ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9ee:	445a      	add	r2, fp
 800f9f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f9f2:	f89a 3000 	ldrb.w	r3, [sl]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f000 809f 	beq.w	800fb3a <_svfiprintf_r+0x1c6>
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800fa02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa06:	f10a 0a01 	add.w	sl, sl, #1
 800fa0a:	9304      	str	r3, [sp, #16]
 800fa0c:	9307      	str	r3, [sp, #28]
 800fa0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa12:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa14:	4654      	mov	r4, sl
 800fa16:	2205      	movs	r2, #5
 800fa18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa1c:	484e      	ldr	r0, [pc, #312]	@ (800fb58 <_svfiprintf_r+0x1e4>)
 800fa1e:	f7f0 fbdf 	bl	80001e0 <memchr>
 800fa22:	9a04      	ldr	r2, [sp, #16]
 800fa24:	b9d8      	cbnz	r0, 800fa5e <_svfiprintf_r+0xea>
 800fa26:	06d0      	lsls	r0, r2, #27
 800fa28:	bf44      	itt	mi
 800fa2a:	2320      	movmi	r3, #32
 800fa2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa30:	0711      	lsls	r1, r2, #28
 800fa32:	bf44      	itt	mi
 800fa34:	232b      	movmi	r3, #43	@ 0x2b
 800fa36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa3a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa40:	d015      	beq.n	800fa6e <_svfiprintf_r+0xfa>
 800fa42:	9a07      	ldr	r2, [sp, #28]
 800fa44:	4654      	mov	r4, sl
 800fa46:	2000      	movs	r0, #0
 800fa48:	f04f 0c0a 	mov.w	ip, #10
 800fa4c:	4621      	mov	r1, r4
 800fa4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa52:	3b30      	subs	r3, #48	@ 0x30
 800fa54:	2b09      	cmp	r3, #9
 800fa56:	d94b      	bls.n	800faf0 <_svfiprintf_r+0x17c>
 800fa58:	b1b0      	cbz	r0, 800fa88 <_svfiprintf_r+0x114>
 800fa5a:	9207      	str	r2, [sp, #28]
 800fa5c:	e014      	b.n	800fa88 <_svfiprintf_r+0x114>
 800fa5e:	eba0 0308 	sub.w	r3, r0, r8
 800fa62:	fa09 f303 	lsl.w	r3, r9, r3
 800fa66:	4313      	orrs	r3, r2
 800fa68:	9304      	str	r3, [sp, #16]
 800fa6a:	46a2      	mov	sl, r4
 800fa6c:	e7d2      	b.n	800fa14 <_svfiprintf_r+0xa0>
 800fa6e:	9b03      	ldr	r3, [sp, #12]
 800fa70:	1d19      	adds	r1, r3, #4
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	9103      	str	r1, [sp, #12]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	bfbb      	ittet	lt
 800fa7a:	425b      	neglt	r3, r3
 800fa7c:	f042 0202 	orrlt.w	r2, r2, #2
 800fa80:	9307      	strge	r3, [sp, #28]
 800fa82:	9307      	strlt	r3, [sp, #28]
 800fa84:	bfb8      	it	lt
 800fa86:	9204      	strlt	r2, [sp, #16]
 800fa88:	7823      	ldrb	r3, [r4, #0]
 800fa8a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa8c:	d10a      	bne.n	800faa4 <_svfiprintf_r+0x130>
 800fa8e:	7863      	ldrb	r3, [r4, #1]
 800fa90:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa92:	d132      	bne.n	800fafa <_svfiprintf_r+0x186>
 800fa94:	9b03      	ldr	r3, [sp, #12]
 800fa96:	1d1a      	adds	r2, r3, #4
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	9203      	str	r2, [sp, #12]
 800fa9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800faa0:	3402      	adds	r4, #2
 800faa2:	9305      	str	r3, [sp, #20]
 800faa4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fb68 <_svfiprintf_r+0x1f4>
 800faa8:	7821      	ldrb	r1, [r4, #0]
 800faaa:	2203      	movs	r2, #3
 800faac:	4650      	mov	r0, sl
 800faae:	f7f0 fb97 	bl	80001e0 <memchr>
 800fab2:	b138      	cbz	r0, 800fac4 <_svfiprintf_r+0x150>
 800fab4:	9b04      	ldr	r3, [sp, #16]
 800fab6:	eba0 000a 	sub.w	r0, r0, sl
 800faba:	2240      	movs	r2, #64	@ 0x40
 800fabc:	4082      	lsls	r2, r0
 800fabe:	4313      	orrs	r3, r2
 800fac0:	3401      	adds	r4, #1
 800fac2:	9304      	str	r3, [sp, #16]
 800fac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fac8:	4824      	ldr	r0, [pc, #144]	@ (800fb5c <_svfiprintf_r+0x1e8>)
 800faca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800face:	2206      	movs	r2, #6
 800fad0:	f7f0 fb86 	bl	80001e0 <memchr>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	d036      	beq.n	800fb46 <_svfiprintf_r+0x1d2>
 800fad8:	4b21      	ldr	r3, [pc, #132]	@ (800fb60 <_svfiprintf_r+0x1ec>)
 800fada:	bb1b      	cbnz	r3, 800fb24 <_svfiprintf_r+0x1b0>
 800fadc:	9b03      	ldr	r3, [sp, #12]
 800fade:	3307      	adds	r3, #7
 800fae0:	f023 0307 	bic.w	r3, r3, #7
 800fae4:	3308      	adds	r3, #8
 800fae6:	9303      	str	r3, [sp, #12]
 800fae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faea:	4433      	add	r3, r6
 800faec:	9309      	str	r3, [sp, #36]	@ 0x24
 800faee:	e76a      	b.n	800f9c6 <_svfiprintf_r+0x52>
 800faf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800faf4:	460c      	mov	r4, r1
 800faf6:	2001      	movs	r0, #1
 800faf8:	e7a8      	b.n	800fa4c <_svfiprintf_r+0xd8>
 800fafa:	2300      	movs	r3, #0
 800fafc:	3401      	adds	r4, #1
 800fafe:	9305      	str	r3, [sp, #20]
 800fb00:	4619      	mov	r1, r3
 800fb02:	f04f 0c0a 	mov.w	ip, #10
 800fb06:	4620      	mov	r0, r4
 800fb08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb0c:	3a30      	subs	r2, #48	@ 0x30
 800fb0e:	2a09      	cmp	r2, #9
 800fb10:	d903      	bls.n	800fb1a <_svfiprintf_r+0x1a6>
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d0c6      	beq.n	800faa4 <_svfiprintf_r+0x130>
 800fb16:	9105      	str	r1, [sp, #20]
 800fb18:	e7c4      	b.n	800faa4 <_svfiprintf_r+0x130>
 800fb1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb1e:	4604      	mov	r4, r0
 800fb20:	2301      	movs	r3, #1
 800fb22:	e7f0      	b.n	800fb06 <_svfiprintf_r+0x192>
 800fb24:	ab03      	add	r3, sp, #12
 800fb26:	9300      	str	r3, [sp, #0]
 800fb28:	462a      	mov	r2, r5
 800fb2a:	4b0e      	ldr	r3, [pc, #56]	@ (800fb64 <_svfiprintf_r+0x1f0>)
 800fb2c:	a904      	add	r1, sp, #16
 800fb2e:	4638      	mov	r0, r7
 800fb30:	f7fc fcba 	bl	800c4a8 <_printf_float>
 800fb34:	1c42      	adds	r2, r0, #1
 800fb36:	4606      	mov	r6, r0
 800fb38:	d1d6      	bne.n	800fae8 <_svfiprintf_r+0x174>
 800fb3a:	89ab      	ldrh	r3, [r5, #12]
 800fb3c:	065b      	lsls	r3, r3, #25
 800fb3e:	f53f af2d 	bmi.w	800f99c <_svfiprintf_r+0x28>
 800fb42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb44:	e72c      	b.n	800f9a0 <_svfiprintf_r+0x2c>
 800fb46:	ab03      	add	r3, sp, #12
 800fb48:	9300      	str	r3, [sp, #0]
 800fb4a:	462a      	mov	r2, r5
 800fb4c:	4b05      	ldr	r3, [pc, #20]	@ (800fb64 <_svfiprintf_r+0x1f0>)
 800fb4e:	a904      	add	r1, sp, #16
 800fb50:	4638      	mov	r0, r7
 800fb52:	f7fc ff41 	bl	800c9d8 <_printf_i>
 800fb56:	e7ed      	b.n	800fb34 <_svfiprintf_r+0x1c0>
 800fb58:	08011231 	.word	0x08011231
 800fb5c:	0801123b 	.word	0x0801123b
 800fb60:	0800c4a9 	.word	0x0800c4a9
 800fb64:	0800f8bd 	.word	0x0800f8bd
 800fb68:	08011237 	.word	0x08011237

0800fb6c <__sflush_r>:
 800fb6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb74:	0716      	lsls	r6, r2, #28
 800fb76:	4605      	mov	r5, r0
 800fb78:	460c      	mov	r4, r1
 800fb7a:	d454      	bmi.n	800fc26 <__sflush_r+0xba>
 800fb7c:	684b      	ldr	r3, [r1, #4]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	dc02      	bgt.n	800fb88 <__sflush_r+0x1c>
 800fb82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	dd48      	ble.n	800fc1a <__sflush_r+0xae>
 800fb88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fb8a:	2e00      	cmp	r6, #0
 800fb8c:	d045      	beq.n	800fc1a <__sflush_r+0xae>
 800fb8e:	2300      	movs	r3, #0
 800fb90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fb94:	682f      	ldr	r7, [r5, #0]
 800fb96:	6a21      	ldr	r1, [r4, #32]
 800fb98:	602b      	str	r3, [r5, #0]
 800fb9a:	d030      	beq.n	800fbfe <__sflush_r+0x92>
 800fb9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fb9e:	89a3      	ldrh	r3, [r4, #12]
 800fba0:	0759      	lsls	r1, r3, #29
 800fba2:	d505      	bpl.n	800fbb0 <__sflush_r+0x44>
 800fba4:	6863      	ldr	r3, [r4, #4]
 800fba6:	1ad2      	subs	r2, r2, r3
 800fba8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fbaa:	b10b      	cbz	r3, 800fbb0 <__sflush_r+0x44>
 800fbac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fbae:	1ad2      	subs	r2, r2, r3
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fbb4:	6a21      	ldr	r1, [r4, #32]
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	47b0      	blx	r6
 800fbba:	1c43      	adds	r3, r0, #1
 800fbbc:	89a3      	ldrh	r3, [r4, #12]
 800fbbe:	d106      	bne.n	800fbce <__sflush_r+0x62>
 800fbc0:	6829      	ldr	r1, [r5, #0]
 800fbc2:	291d      	cmp	r1, #29
 800fbc4:	d82b      	bhi.n	800fc1e <__sflush_r+0xb2>
 800fbc6:	4a2a      	ldr	r2, [pc, #168]	@ (800fc70 <__sflush_r+0x104>)
 800fbc8:	410a      	asrs	r2, r1
 800fbca:	07d6      	lsls	r6, r2, #31
 800fbcc:	d427      	bmi.n	800fc1e <__sflush_r+0xb2>
 800fbce:	2200      	movs	r2, #0
 800fbd0:	6062      	str	r2, [r4, #4]
 800fbd2:	04d9      	lsls	r1, r3, #19
 800fbd4:	6922      	ldr	r2, [r4, #16]
 800fbd6:	6022      	str	r2, [r4, #0]
 800fbd8:	d504      	bpl.n	800fbe4 <__sflush_r+0x78>
 800fbda:	1c42      	adds	r2, r0, #1
 800fbdc:	d101      	bne.n	800fbe2 <__sflush_r+0x76>
 800fbde:	682b      	ldr	r3, [r5, #0]
 800fbe0:	b903      	cbnz	r3, 800fbe4 <__sflush_r+0x78>
 800fbe2:	6560      	str	r0, [r4, #84]	@ 0x54
 800fbe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fbe6:	602f      	str	r7, [r5, #0]
 800fbe8:	b1b9      	cbz	r1, 800fc1a <__sflush_r+0xae>
 800fbea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fbee:	4299      	cmp	r1, r3
 800fbf0:	d002      	beq.n	800fbf8 <__sflush_r+0x8c>
 800fbf2:	4628      	mov	r0, r5
 800fbf4:	f7fe fa2c 	bl	800e050 <_free_r>
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	6363      	str	r3, [r4, #52]	@ 0x34
 800fbfc:	e00d      	b.n	800fc1a <__sflush_r+0xae>
 800fbfe:	2301      	movs	r3, #1
 800fc00:	4628      	mov	r0, r5
 800fc02:	47b0      	blx	r6
 800fc04:	4602      	mov	r2, r0
 800fc06:	1c50      	adds	r0, r2, #1
 800fc08:	d1c9      	bne.n	800fb9e <__sflush_r+0x32>
 800fc0a:	682b      	ldr	r3, [r5, #0]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d0c6      	beq.n	800fb9e <__sflush_r+0x32>
 800fc10:	2b1d      	cmp	r3, #29
 800fc12:	d001      	beq.n	800fc18 <__sflush_r+0xac>
 800fc14:	2b16      	cmp	r3, #22
 800fc16:	d11e      	bne.n	800fc56 <__sflush_r+0xea>
 800fc18:	602f      	str	r7, [r5, #0]
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	e022      	b.n	800fc64 <__sflush_r+0xf8>
 800fc1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc22:	b21b      	sxth	r3, r3
 800fc24:	e01b      	b.n	800fc5e <__sflush_r+0xf2>
 800fc26:	690f      	ldr	r7, [r1, #16]
 800fc28:	2f00      	cmp	r7, #0
 800fc2a:	d0f6      	beq.n	800fc1a <__sflush_r+0xae>
 800fc2c:	0793      	lsls	r3, r2, #30
 800fc2e:	680e      	ldr	r6, [r1, #0]
 800fc30:	bf08      	it	eq
 800fc32:	694b      	ldreq	r3, [r1, #20]
 800fc34:	600f      	str	r7, [r1, #0]
 800fc36:	bf18      	it	ne
 800fc38:	2300      	movne	r3, #0
 800fc3a:	eba6 0807 	sub.w	r8, r6, r7
 800fc3e:	608b      	str	r3, [r1, #8]
 800fc40:	f1b8 0f00 	cmp.w	r8, #0
 800fc44:	dde9      	ble.n	800fc1a <__sflush_r+0xae>
 800fc46:	6a21      	ldr	r1, [r4, #32]
 800fc48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fc4a:	4643      	mov	r3, r8
 800fc4c:	463a      	mov	r2, r7
 800fc4e:	4628      	mov	r0, r5
 800fc50:	47b0      	blx	r6
 800fc52:	2800      	cmp	r0, #0
 800fc54:	dc08      	bgt.n	800fc68 <__sflush_r+0xfc>
 800fc56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc5e:	81a3      	strh	r3, [r4, #12]
 800fc60:	f04f 30ff 	mov.w	r0, #4294967295
 800fc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc68:	4407      	add	r7, r0
 800fc6a:	eba8 0800 	sub.w	r8, r8, r0
 800fc6e:	e7e7      	b.n	800fc40 <__sflush_r+0xd4>
 800fc70:	dfbffffe 	.word	0xdfbffffe

0800fc74 <_fflush_r>:
 800fc74:	b538      	push	{r3, r4, r5, lr}
 800fc76:	690b      	ldr	r3, [r1, #16]
 800fc78:	4605      	mov	r5, r0
 800fc7a:	460c      	mov	r4, r1
 800fc7c:	b913      	cbnz	r3, 800fc84 <_fflush_r+0x10>
 800fc7e:	2500      	movs	r5, #0
 800fc80:	4628      	mov	r0, r5
 800fc82:	bd38      	pop	{r3, r4, r5, pc}
 800fc84:	b118      	cbz	r0, 800fc8e <_fflush_r+0x1a>
 800fc86:	6a03      	ldr	r3, [r0, #32]
 800fc88:	b90b      	cbnz	r3, 800fc8e <_fflush_r+0x1a>
 800fc8a:	f7fd fa65 	bl	800d158 <__sinit>
 800fc8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d0f3      	beq.n	800fc7e <_fflush_r+0xa>
 800fc96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fc98:	07d0      	lsls	r0, r2, #31
 800fc9a:	d404      	bmi.n	800fca6 <_fflush_r+0x32>
 800fc9c:	0599      	lsls	r1, r3, #22
 800fc9e:	d402      	bmi.n	800fca6 <_fflush_r+0x32>
 800fca0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fca2:	f7fd fb70 	bl	800d386 <__retarget_lock_acquire_recursive>
 800fca6:	4628      	mov	r0, r5
 800fca8:	4621      	mov	r1, r4
 800fcaa:	f7ff ff5f 	bl	800fb6c <__sflush_r>
 800fcae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fcb0:	07da      	lsls	r2, r3, #31
 800fcb2:	4605      	mov	r5, r0
 800fcb4:	d4e4      	bmi.n	800fc80 <_fflush_r+0xc>
 800fcb6:	89a3      	ldrh	r3, [r4, #12]
 800fcb8:	059b      	lsls	r3, r3, #22
 800fcba:	d4e1      	bmi.n	800fc80 <_fflush_r+0xc>
 800fcbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fcbe:	f7fd fb63 	bl	800d388 <__retarget_lock_release_recursive>
 800fcc2:	e7dd      	b.n	800fc80 <_fflush_r+0xc>

0800fcc4 <memmove>:
 800fcc4:	4288      	cmp	r0, r1
 800fcc6:	b510      	push	{r4, lr}
 800fcc8:	eb01 0402 	add.w	r4, r1, r2
 800fccc:	d902      	bls.n	800fcd4 <memmove+0x10>
 800fcce:	4284      	cmp	r4, r0
 800fcd0:	4623      	mov	r3, r4
 800fcd2:	d807      	bhi.n	800fce4 <memmove+0x20>
 800fcd4:	1e43      	subs	r3, r0, #1
 800fcd6:	42a1      	cmp	r1, r4
 800fcd8:	d008      	beq.n	800fcec <memmove+0x28>
 800fcda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fce2:	e7f8      	b.n	800fcd6 <memmove+0x12>
 800fce4:	4402      	add	r2, r0
 800fce6:	4601      	mov	r1, r0
 800fce8:	428a      	cmp	r2, r1
 800fcea:	d100      	bne.n	800fcee <memmove+0x2a>
 800fcec:	bd10      	pop	{r4, pc}
 800fcee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fcf6:	e7f7      	b.n	800fce8 <memmove+0x24>

0800fcf8 <strncmp>:
 800fcf8:	b510      	push	{r4, lr}
 800fcfa:	b16a      	cbz	r2, 800fd18 <strncmp+0x20>
 800fcfc:	3901      	subs	r1, #1
 800fcfe:	1884      	adds	r4, r0, r2
 800fd00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d103      	bne.n	800fd14 <strncmp+0x1c>
 800fd0c:	42a0      	cmp	r0, r4
 800fd0e:	d001      	beq.n	800fd14 <strncmp+0x1c>
 800fd10:	2a00      	cmp	r2, #0
 800fd12:	d1f5      	bne.n	800fd00 <strncmp+0x8>
 800fd14:	1ad0      	subs	r0, r2, r3
 800fd16:	bd10      	pop	{r4, pc}
 800fd18:	4610      	mov	r0, r2
 800fd1a:	e7fc      	b.n	800fd16 <strncmp+0x1e>

0800fd1c <_sbrk_r>:
 800fd1c:	b538      	push	{r3, r4, r5, lr}
 800fd1e:	4d06      	ldr	r5, [pc, #24]	@ (800fd38 <_sbrk_r+0x1c>)
 800fd20:	2300      	movs	r3, #0
 800fd22:	4604      	mov	r4, r0
 800fd24:	4608      	mov	r0, r1
 800fd26:	602b      	str	r3, [r5, #0]
 800fd28:	f7f3 f85e 	bl	8002de8 <_sbrk>
 800fd2c:	1c43      	adds	r3, r0, #1
 800fd2e:	d102      	bne.n	800fd36 <_sbrk_r+0x1a>
 800fd30:	682b      	ldr	r3, [r5, #0]
 800fd32:	b103      	cbz	r3, 800fd36 <_sbrk_r+0x1a>
 800fd34:	6023      	str	r3, [r4, #0]
 800fd36:	bd38      	pop	{r3, r4, r5, pc}
 800fd38:	20004cf4 	.word	0x20004cf4
 800fd3c:	00000000 	.word	0x00000000

0800fd40 <nan>:
 800fd40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fd48 <nan+0x8>
 800fd44:	4770      	bx	lr
 800fd46:	bf00      	nop
 800fd48:	00000000 	.word	0x00000000
 800fd4c:	7ff80000 	.word	0x7ff80000

0800fd50 <__assert_func>:
 800fd50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd52:	4614      	mov	r4, r2
 800fd54:	461a      	mov	r2, r3
 800fd56:	4b09      	ldr	r3, [pc, #36]	@ (800fd7c <__assert_func+0x2c>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4605      	mov	r5, r0
 800fd5c:	68d8      	ldr	r0, [r3, #12]
 800fd5e:	b954      	cbnz	r4, 800fd76 <__assert_func+0x26>
 800fd60:	4b07      	ldr	r3, [pc, #28]	@ (800fd80 <__assert_func+0x30>)
 800fd62:	461c      	mov	r4, r3
 800fd64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd68:	9100      	str	r1, [sp, #0]
 800fd6a:	462b      	mov	r3, r5
 800fd6c:	4905      	ldr	r1, [pc, #20]	@ (800fd84 <__assert_func+0x34>)
 800fd6e:	f000 fba7 	bl	80104c0 <fiprintf>
 800fd72:	f000 fbb7 	bl	80104e4 <abort>
 800fd76:	4b04      	ldr	r3, [pc, #16]	@ (800fd88 <__assert_func+0x38>)
 800fd78:	e7f4      	b.n	800fd64 <__assert_func+0x14>
 800fd7a:	bf00      	nop
 800fd7c:	20000040 	.word	0x20000040
 800fd80:	08011285 	.word	0x08011285
 800fd84:	08011257 	.word	0x08011257
 800fd88:	0801124a 	.word	0x0801124a

0800fd8c <_calloc_r>:
 800fd8c:	b570      	push	{r4, r5, r6, lr}
 800fd8e:	fba1 5402 	umull	r5, r4, r1, r2
 800fd92:	b93c      	cbnz	r4, 800fda4 <_calloc_r+0x18>
 800fd94:	4629      	mov	r1, r5
 800fd96:	f7fe f9cf 	bl	800e138 <_malloc_r>
 800fd9a:	4606      	mov	r6, r0
 800fd9c:	b928      	cbnz	r0, 800fdaa <_calloc_r+0x1e>
 800fd9e:	2600      	movs	r6, #0
 800fda0:	4630      	mov	r0, r6
 800fda2:	bd70      	pop	{r4, r5, r6, pc}
 800fda4:	220c      	movs	r2, #12
 800fda6:	6002      	str	r2, [r0, #0]
 800fda8:	e7f9      	b.n	800fd9e <_calloc_r+0x12>
 800fdaa:	462a      	mov	r2, r5
 800fdac:	4621      	mov	r1, r4
 800fdae:	f7fd fa6c 	bl	800d28a <memset>
 800fdb2:	e7f5      	b.n	800fda0 <_calloc_r+0x14>

0800fdb4 <rshift>:
 800fdb4:	6903      	ldr	r3, [r0, #16]
 800fdb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fdba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fdbe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fdc2:	f100 0414 	add.w	r4, r0, #20
 800fdc6:	dd45      	ble.n	800fe54 <rshift+0xa0>
 800fdc8:	f011 011f 	ands.w	r1, r1, #31
 800fdcc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fdd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fdd4:	d10c      	bne.n	800fdf0 <rshift+0x3c>
 800fdd6:	f100 0710 	add.w	r7, r0, #16
 800fdda:	4629      	mov	r1, r5
 800fddc:	42b1      	cmp	r1, r6
 800fdde:	d334      	bcc.n	800fe4a <rshift+0x96>
 800fde0:	1a9b      	subs	r3, r3, r2
 800fde2:	009b      	lsls	r3, r3, #2
 800fde4:	1eea      	subs	r2, r5, #3
 800fde6:	4296      	cmp	r6, r2
 800fde8:	bf38      	it	cc
 800fdea:	2300      	movcc	r3, #0
 800fdec:	4423      	add	r3, r4
 800fdee:	e015      	b.n	800fe1c <rshift+0x68>
 800fdf0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fdf4:	f1c1 0820 	rsb	r8, r1, #32
 800fdf8:	40cf      	lsrs	r7, r1
 800fdfa:	f105 0e04 	add.w	lr, r5, #4
 800fdfe:	46a1      	mov	r9, r4
 800fe00:	4576      	cmp	r6, lr
 800fe02:	46f4      	mov	ip, lr
 800fe04:	d815      	bhi.n	800fe32 <rshift+0x7e>
 800fe06:	1a9a      	subs	r2, r3, r2
 800fe08:	0092      	lsls	r2, r2, #2
 800fe0a:	3a04      	subs	r2, #4
 800fe0c:	3501      	adds	r5, #1
 800fe0e:	42ae      	cmp	r6, r5
 800fe10:	bf38      	it	cc
 800fe12:	2200      	movcc	r2, #0
 800fe14:	18a3      	adds	r3, r4, r2
 800fe16:	50a7      	str	r7, [r4, r2]
 800fe18:	b107      	cbz	r7, 800fe1c <rshift+0x68>
 800fe1a:	3304      	adds	r3, #4
 800fe1c:	1b1a      	subs	r2, r3, r4
 800fe1e:	42a3      	cmp	r3, r4
 800fe20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fe24:	bf08      	it	eq
 800fe26:	2300      	moveq	r3, #0
 800fe28:	6102      	str	r2, [r0, #16]
 800fe2a:	bf08      	it	eq
 800fe2c:	6143      	streq	r3, [r0, #20]
 800fe2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe32:	f8dc c000 	ldr.w	ip, [ip]
 800fe36:	fa0c fc08 	lsl.w	ip, ip, r8
 800fe3a:	ea4c 0707 	orr.w	r7, ip, r7
 800fe3e:	f849 7b04 	str.w	r7, [r9], #4
 800fe42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fe46:	40cf      	lsrs	r7, r1
 800fe48:	e7da      	b.n	800fe00 <rshift+0x4c>
 800fe4a:	f851 cb04 	ldr.w	ip, [r1], #4
 800fe4e:	f847 cf04 	str.w	ip, [r7, #4]!
 800fe52:	e7c3      	b.n	800fddc <rshift+0x28>
 800fe54:	4623      	mov	r3, r4
 800fe56:	e7e1      	b.n	800fe1c <rshift+0x68>

0800fe58 <__hexdig_fun>:
 800fe58:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fe5c:	2b09      	cmp	r3, #9
 800fe5e:	d802      	bhi.n	800fe66 <__hexdig_fun+0xe>
 800fe60:	3820      	subs	r0, #32
 800fe62:	b2c0      	uxtb	r0, r0
 800fe64:	4770      	bx	lr
 800fe66:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fe6a:	2b05      	cmp	r3, #5
 800fe6c:	d801      	bhi.n	800fe72 <__hexdig_fun+0x1a>
 800fe6e:	3847      	subs	r0, #71	@ 0x47
 800fe70:	e7f7      	b.n	800fe62 <__hexdig_fun+0xa>
 800fe72:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fe76:	2b05      	cmp	r3, #5
 800fe78:	d801      	bhi.n	800fe7e <__hexdig_fun+0x26>
 800fe7a:	3827      	subs	r0, #39	@ 0x27
 800fe7c:	e7f1      	b.n	800fe62 <__hexdig_fun+0xa>
 800fe7e:	2000      	movs	r0, #0
 800fe80:	4770      	bx	lr
	...

0800fe84 <__gethex>:
 800fe84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe88:	b085      	sub	sp, #20
 800fe8a:	468a      	mov	sl, r1
 800fe8c:	9302      	str	r3, [sp, #8]
 800fe8e:	680b      	ldr	r3, [r1, #0]
 800fe90:	9001      	str	r0, [sp, #4]
 800fe92:	4690      	mov	r8, r2
 800fe94:	1c9c      	adds	r4, r3, #2
 800fe96:	46a1      	mov	r9, r4
 800fe98:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fe9c:	2830      	cmp	r0, #48	@ 0x30
 800fe9e:	d0fa      	beq.n	800fe96 <__gethex+0x12>
 800fea0:	eba9 0303 	sub.w	r3, r9, r3
 800fea4:	f1a3 0b02 	sub.w	fp, r3, #2
 800fea8:	f7ff ffd6 	bl	800fe58 <__hexdig_fun>
 800feac:	4605      	mov	r5, r0
 800feae:	2800      	cmp	r0, #0
 800feb0:	d168      	bne.n	800ff84 <__gethex+0x100>
 800feb2:	49a0      	ldr	r1, [pc, #640]	@ (8010134 <__gethex+0x2b0>)
 800feb4:	2201      	movs	r2, #1
 800feb6:	4648      	mov	r0, r9
 800feb8:	f7ff ff1e 	bl	800fcf8 <strncmp>
 800febc:	4607      	mov	r7, r0
 800febe:	2800      	cmp	r0, #0
 800fec0:	d167      	bne.n	800ff92 <__gethex+0x10e>
 800fec2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fec6:	4626      	mov	r6, r4
 800fec8:	f7ff ffc6 	bl	800fe58 <__hexdig_fun>
 800fecc:	2800      	cmp	r0, #0
 800fece:	d062      	beq.n	800ff96 <__gethex+0x112>
 800fed0:	4623      	mov	r3, r4
 800fed2:	7818      	ldrb	r0, [r3, #0]
 800fed4:	2830      	cmp	r0, #48	@ 0x30
 800fed6:	4699      	mov	r9, r3
 800fed8:	f103 0301 	add.w	r3, r3, #1
 800fedc:	d0f9      	beq.n	800fed2 <__gethex+0x4e>
 800fede:	f7ff ffbb 	bl	800fe58 <__hexdig_fun>
 800fee2:	fab0 f580 	clz	r5, r0
 800fee6:	096d      	lsrs	r5, r5, #5
 800fee8:	f04f 0b01 	mov.w	fp, #1
 800feec:	464a      	mov	r2, r9
 800feee:	4616      	mov	r6, r2
 800fef0:	3201      	adds	r2, #1
 800fef2:	7830      	ldrb	r0, [r6, #0]
 800fef4:	f7ff ffb0 	bl	800fe58 <__hexdig_fun>
 800fef8:	2800      	cmp	r0, #0
 800fefa:	d1f8      	bne.n	800feee <__gethex+0x6a>
 800fefc:	498d      	ldr	r1, [pc, #564]	@ (8010134 <__gethex+0x2b0>)
 800fefe:	2201      	movs	r2, #1
 800ff00:	4630      	mov	r0, r6
 800ff02:	f7ff fef9 	bl	800fcf8 <strncmp>
 800ff06:	2800      	cmp	r0, #0
 800ff08:	d13f      	bne.n	800ff8a <__gethex+0x106>
 800ff0a:	b944      	cbnz	r4, 800ff1e <__gethex+0x9a>
 800ff0c:	1c74      	adds	r4, r6, #1
 800ff0e:	4622      	mov	r2, r4
 800ff10:	4616      	mov	r6, r2
 800ff12:	3201      	adds	r2, #1
 800ff14:	7830      	ldrb	r0, [r6, #0]
 800ff16:	f7ff ff9f 	bl	800fe58 <__hexdig_fun>
 800ff1a:	2800      	cmp	r0, #0
 800ff1c:	d1f8      	bne.n	800ff10 <__gethex+0x8c>
 800ff1e:	1ba4      	subs	r4, r4, r6
 800ff20:	00a7      	lsls	r7, r4, #2
 800ff22:	7833      	ldrb	r3, [r6, #0]
 800ff24:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ff28:	2b50      	cmp	r3, #80	@ 0x50
 800ff2a:	d13e      	bne.n	800ffaa <__gethex+0x126>
 800ff2c:	7873      	ldrb	r3, [r6, #1]
 800ff2e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ff30:	d033      	beq.n	800ff9a <__gethex+0x116>
 800ff32:	2b2d      	cmp	r3, #45	@ 0x2d
 800ff34:	d034      	beq.n	800ffa0 <__gethex+0x11c>
 800ff36:	1c71      	adds	r1, r6, #1
 800ff38:	2400      	movs	r4, #0
 800ff3a:	7808      	ldrb	r0, [r1, #0]
 800ff3c:	f7ff ff8c 	bl	800fe58 <__hexdig_fun>
 800ff40:	1e43      	subs	r3, r0, #1
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	2b18      	cmp	r3, #24
 800ff46:	d830      	bhi.n	800ffaa <__gethex+0x126>
 800ff48:	f1a0 0210 	sub.w	r2, r0, #16
 800ff4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ff50:	f7ff ff82 	bl	800fe58 <__hexdig_fun>
 800ff54:	f100 3cff 	add.w	ip, r0, #4294967295
 800ff58:	fa5f fc8c 	uxtb.w	ip, ip
 800ff5c:	f1bc 0f18 	cmp.w	ip, #24
 800ff60:	f04f 030a 	mov.w	r3, #10
 800ff64:	d91e      	bls.n	800ffa4 <__gethex+0x120>
 800ff66:	b104      	cbz	r4, 800ff6a <__gethex+0xe6>
 800ff68:	4252      	negs	r2, r2
 800ff6a:	4417      	add	r7, r2
 800ff6c:	f8ca 1000 	str.w	r1, [sl]
 800ff70:	b1ed      	cbz	r5, 800ffae <__gethex+0x12a>
 800ff72:	f1bb 0f00 	cmp.w	fp, #0
 800ff76:	bf0c      	ite	eq
 800ff78:	2506      	moveq	r5, #6
 800ff7a:	2500      	movne	r5, #0
 800ff7c:	4628      	mov	r0, r5
 800ff7e:	b005      	add	sp, #20
 800ff80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff84:	2500      	movs	r5, #0
 800ff86:	462c      	mov	r4, r5
 800ff88:	e7b0      	b.n	800feec <__gethex+0x68>
 800ff8a:	2c00      	cmp	r4, #0
 800ff8c:	d1c7      	bne.n	800ff1e <__gethex+0x9a>
 800ff8e:	4627      	mov	r7, r4
 800ff90:	e7c7      	b.n	800ff22 <__gethex+0x9e>
 800ff92:	464e      	mov	r6, r9
 800ff94:	462f      	mov	r7, r5
 800ff96:	2501      	movs	r5, #1
 800ff98:	e7c3      	b.n	800ff22 <__gethex+0x9e>
 800ff9a:	2400      	movs	r4, #0
 800ff9c:	1cb1      	adds	r1, r6, #2
 800ff9e:	e7cc      	b.n	800ff3a <__gethex+0xb6>
 800ffa0:	2401      	movs	r4, #1
 800ffa2:	e7fb      	b.n	800ff9c <__gethex+0x118>
 800ffa4:	fb03 0002 	mla	r0, r3, r2, r0
 800ffa8:	e7ce      	b.n	800ff48 <__gethex+0xc4>
 800ffaa:	4631      	mov	r1, r6
 800ffac:	e7de      	b.n	800ff6c <__gethex+0xe8>
 800ffae:	eba6 0309 	sub.w	r3, r6, r9
 800ffb2:	3b01      	subs	r3, #1
 800ffb4:	4629      	mov	r1, r5
 800ffb6:	2b07      	cmp	r3, #7
 800ffb8:	dc0a      	bgt.n	800ffd0 <__gethex+0x14c>
 800ffba:	9801      	ldr	r0, [sp, #4]
 800ffbc:	f7fe f948 	bl	800e250 <_Balloc>
 800ffc0:	4604      	mov	r4, r0
 800ffc2:	b940      	cbnz	r0, 800ffd6 <__gethex+0x152>
 800ffc4:	4b5c      	ldr	r3, [pc, #368]	@ (8010138 <__gethex+0x2b4>)
 800ffc6:	4602      	mov	r2, r0
 800ffc8:	21e4      	movs	r1, #228	@ 0xe4
 800ffca:	485c      	ldr	r0, [pc, #368]	@ (801013c <__gethex+0x2b8>)
 800ffcc:	f7ff fec0 	bl	800fd50 <__assert_func>
 800ffd0:	3101      	adds	r1, #1
 800ffd2:	105b      	asrs	r3, r3, #1
 800ffd4:	e7ef      	b.n	800ffb6 <__gethex+0x132>
 800ffd6:	f100 0a14 	add.w	sl, r0, #20
 800ffda:	2300      	movs	r3, #0
 800ffdc:	4655      	mov	r5, sl
 800ffde:	469b      	mov	fp, r3
 800ffe0:	45b1      	cmp	r9, r6
 800ffe2:	d337      	bcc.n	8010054 <__gethex+0x1d0>
 800ffe4:	f845 bb04 	str.w	fp, [r5], #4
 800ffe8:	eba5 050a 	sub.w	r5, r5, sl
 800ffec:	10ad      	asrs	r5, r5, #2
 800ffee:	6125      	str	r5, [r4, #16]
 800fff0:	4658      	mov	r0, fp
 800fff2:	f7fe fa1f 	bl	800e434 <__hi0bits>
 800fff6:	016d      	lsls	r5, r5, #5
 800fff8:	f8d8 6000 	ldr.w	r6, [r8]
 800fffc:	1a2d      	subs	r5, r5, r0
 800fffe:	42b5      	cmp	r5, r6
 8010000:	dd54      	ble.n	80100ac <__gethex+0x228>
 8010002:	1bad      	subs	r5, r5, r6
 8010004:	4629      	mov	r1, r5
 8010006:	4620      	mov	r0, r4
 8010008:	f7fe fdb3 	bl	800eb72 <__any_on>
 801000c:	4681      	mov	r9, r0
 801000e:	b178      	cbz	r0, 8010030 <__gethex+0x1ac>
 8010010:	1e6b      	subs	r3, r5, #1
 8010012:	1159      	asrs	r1, r3, #5
 8010014:	f003 021f 	and.w	r2, r3, #31
 8010018:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801001c:	f04f 0901 	mov.w	r9, #1
 8010020:	fa09 f202 	lsl.w	r2, r9, r2
 8010024:	420a      	tst	r2, r1
 8010026:	d003      	beq.n	8010030 <__gethex+0x1ac>
 8010028:	454b      	cmp	r3, r9
 801002a:	dc36      	bgt.n	801009a <__gethex+0x216>
 801002c:	f04f 0902 	mov.w	r9, #2
 8010030:	4629      	mov	r1, r5
 8010032:	4620      	mov	r0, r4
 8010034:	f7ff febe 	bl	800fdb4 <rshift>
 8010038:	442f      	add	r7, r5
 801003a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801003e:	42bb      	cmp	r3, r7
 8010040:	da42      	bge.n	80100c8 <__gethex+0x244>
 8010042:	9801      	ldr	r0, [sp, #4]
 8010044:	4621      	mov	r1, r4
 8010046:	f7fe f943 	bl	800e2d0 <_Bfree>
 801004a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801004c:	2300      	movs	r3, #0
 801004e:	6013      	str	r3, [r2, #0]
 8010050:	25a3      	movs	r5, #163	@ 0xa3
 8010052:	e793      	b.n	800ff7c <__gethex+0xf8>
 8010054:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010058:	2a2e      	cmp	r2, #46	@ 0x2e
 801005a:	d012      	beq.n	8010082 <__gethex+0x1fe>
 801005c:	2b20      	cmp	r3, #32
 801005e:	d104      	bne.n	801006a <__gethex+0x1e6>
 8010060:	f845 bb04 	str.w	fp, [r5], #4
 8010064:	f04f 0b00 	mov.w	fp, #0
 8010068:	465b      	mov	r3, fp
 801006a:	7830      	ldrb	r0, [r6, #0]
 801006c:	9303      	str	r3, [sp, #12]
 801006e:	f7ff fef3 	bl	800fe58 <__hexdig_fun>
 8010072:	9b03      	ldr	r3, [sp, #12]
 8010074:	f000 000f 	and.w	r0, r0, #15
 8010078:	4098      	lsls	r0, r3
 801007a:	ea4b 0b00 	orr.w	fp, fp, r0
 801007e:	3304      	adds	r3, #4
 8010080:	e7ae      	b.n	800ffe0 <__gethex+0x15c>
 8010082:	45b1      	cmp	r9, r6
 8010084:	d8ea      	bhi.n	801005c <__gethex+0x1d8>
 8010086:	492b      	ldr	r1, [pc, #172]	@ (8010134 <__gethex+0x2b0>)
 8010088:	9303      	str	r3, [sp, #12]
 801008a:	2201      	movs	r2, #1
 801008c:	4630      	mov	r0, r6
 801008e:	f7ff fe33 	bl	800fcf8 <strncmp>
 8010092:	9b03      	ldr	r3, [sp, #12]
 8010094:	2800      	cmp	r0, #0
 8010096:	d1e1      	bne.n	801005c <__gethex+0x1d8>
 8010098:	e7a2      	b.n	800ffe0 <__gethex+0x15c>
 801009a:	1ea9      	subs	r1, r5, #2
 801009c:	4620      	mov	r0, r4
 801009e:	f7fe fd68 	bl	800eb72 <__any_on>
 80100a2:	2800      	cmp	r0, #0
 80100a4:	d0c2      	beq.n	801002c <__gethex+0x1a8>
 80100a6:	f04f 0903 	mov.w	r9, #3
 80100aa:	e7c1      	b.n	8010030 <__gethex+0x1ac>
 80100ac:	da09      	bge.n	80100c2 <__gethex+0x23e>
 80100ae:	1b75      	subs	r5, r6, r5
 80100b0:	4621      	mov	r1, r4
 80100b2:	9801      	ldr	r0, [sp, #4]
 80100b4:	462a      	mov	r2, r5
 80100b6:	f7fe fb23 	bl	800e700 <__lshift>
 80100ba:	1b7f      	subs	r7, r7, r5
 80100bc:	4604      	mov	r4, r0
 80100be:	f100 0a14 	add.w	sl, r0, #20
 80100c2:	f04f 0900 	mov.w	r9, #0
 80100c6:	e7b8      	b.n	801003a <__gethex+0x1b6>
 80100c8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80100cc:	42bd      	cmp	r5, r7
 80100ce:	dd6f      	ble.n	80101b0 <__gethex+0x32c>
 80100d0:	1bed      	subs	r5, r5, r7
 80100d2:	42ae      	cmp	r6, r5
 80100d4:	dc34      	bgt.n	8010140 <__gethex+0x2bc>
 80100d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80100da:	2b02      	cmp	r3, #2
 80100dc:	d022      	beq.n	8010124 <__gethex+0x2a0>
 80100de:	2b03      	cmp	r3, #3
 80100e0:	d024      	beq.n	801012c <__gethex+0x2a8>
 80100e2:	2b01      	cmp	r3, #1
 80100e4:	d115      	bne.n	8010112 <__gethex+0x28e>
 80100e6:	42ae      	cmp	r6, r5
 80100e8:	d113      	bne.n	8010112 <__gethex+0x28e>
 80100ea:	2e01      	cmp	r6, #1
 80100ec:	d10b      	bne.n	8010106 <__gethex+0x282>
 80100ee:	9a02      	ldr	r2, [sp, #8]
 80100f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80100f4:	6013      	str	r3, [r2, #0]
 80100f6:	2301      	movs	r3, #1
 80100f8:	6123      	str	r3, [r4, #16]
 80100fa:	f8ca 3000 	str.w	r3, [sl]
 80100fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010100:	2562      	movs	r5, #98	@ 0x62
 8010102:	601c      	str	r4, [r3, #0]
 8010104:	e73a      	b.n	800ff7c <__gethex+0xf8>
 8010106:	1e71      	subs	r1, r6, #1
 8010108:	4620      	mov	r0, r4
 801010a:	f7fe fd32 	bl	800eb72 <__any_on>
 801010e:	2800      	cmp	r0, #0
 8010110:	d1ed      	bne.n	80100ee <__gethex+0x26a>
 8010112:	9801      	ldr	r0, [sp, #4]
 8010114:	4621      	mov	r1, r4
 8010116:	f7fe f8db 	bl	800e2d0 <_Bfree>
 801011a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801011c:	2300      	movs	r3, #0
 801011e:	6013      	str	r3, [r2, #0]
 8010120:	2550      	movs	r5, #80	@ 0x50
 8010122:	e72b      	b.n	800ff7c <__gethex+0xf8>
 8010124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010126:	2b00      	cmp	r3, #0
 8010128:	d1f3      	bne.n	8010112 <__gethex+0x28e>
 801012a:	e7e0      	b.n	80100ee <__gethex+0x26a>
 801012c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801012e:	2b00      	cmp	r3, #0
 8010130:	d1dd      	bne.n	80100ee <__gethex+0x26a>
 8010132:	e7ee      	b.n	8010112 <__gethex+0x28e>
 8010134:	080110d8 	.word	0x080110d8
 8010138:	08010f6d 	.word	0x08010f6d
 801013c:	08011286 	.word	0x08011286
 8010140:	1e6f      	subs	r7, r5, #1
 8010142:	f1b9 0f00 	cmp.w	r9, #0
 8010146:	d130      	bne.n	80101aa <__gethex+0x326>
 8010148:	b127      	cbz	r7, 8010154 <__gethex+0x2d0>
 801014a:	4639      	mov	r1, r7
 801014c:	4620      	mov	r0, r4
 801014e:	f7fe fd10 	bl	800eb72 <__any_on>
 8010152:	4681      	mov	r9, r0
 8010154:	117a      	asrs	r2, r7, #5
 8010156:	2301      	movs	r3, #1
 8010158:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801015c:	f007 071f 	and.w	r7, r7, #31
 8010160:	40bb      	lsls	r3, r7
 8010162:	4213      	tst	r3, r2
 8010164:	4629      	mov	r1, r5
 8010166:	4620      	mov	r0, r4
 8010168:	bf18      	it	ne
 801016a:	f049 0902 	orrne.w	r9, r9, #2
 801016e:	f7ff fe21 	bl	800fdb4 <rshift>
 8010172:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010176:	1b76      	subs	r6, r6, r5
 8010178:	2502      	movs	r5, #2
 801017a:	f1b9 0f00 	cmp.w	r9, #0
 801017e:	d047      	beq.n	8010210 <__gethex+0x38c>
 8010180:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010184:	2b02      	cmp	r3, #2
 8010186:	d015      	beq.n	80101b4 <__gethex+0x330>
 8010188:	2b03      	cmp	r3, #3
 801018a:	d017      	beq.n	80101bc <__gethex+0x338>
 801018c:	2b01      	cmp	r3, #1
 801018e:	d109      	bne.n	80101a4 <__gethex+0x320>
 8010190:	f019 0f02 	tst.w	r9, #2
 8010194:	d006      	beq.n	80101a4 <__gethex+0x320>
 8010196:	f8da 3000 	ldr.w	r3, [sl]
 801019a:	ea49 0903 	orr.w	r9, r9, r3
 801019e:	f019 0f01 	tst.w	r9, #1
 80101a2:	d10e      	bne.n	80101c2 <__gethex+0x33e>
 80101a4:	f045 0510 	orr.w	r5, r5, #16
 80101a8:	e032      	b.n	8010210 <__gethex+0x38c>
 80101aa:	f04f 0901 	mov.w	r9, #1
 80101ae:	e7d1      	b.n	8010154 <__gethex+0x2d0>
 80101b0:	2501      	movs	r5, #1
 80101b2:	e7e2      	b.n	801017a <__gethex+0x2f6>
 80101b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101b6:	f1c3 0301 	rsb	r3, r3, #1
 80101ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80101bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d0f0      	beq.n	80101a4 <__gethex+0x320>
 80101c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80101c6:	f104 0314 	add.w	r3, r4, #20
 80101ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80101ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80101d2:	f04f 0c00 	mov.w	ip, #0
 80101d6:	4618      	mov	r0, r3
 80101d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80101dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80101e0:	d01b      	beq.n	801021a <__gethex+0x396>
 80101e2:	3201      	adds	r2, #1
 80101e4:	6002      	str	r2, [r0, #0]
 80101e6:	2d02      	cmp	r5, #2
 80101e8:	f104 0314 	add.w	r3, r4, #20
 80101ec:	d13c      	bne.n	8010268 <__gethex+0x3e4>
 80101ee:	f8d8 2000 	ldr.w	r2, [r8]
 80101f2:	3a01      	subs	r2, #1
 80101f4:	42b2      	cmp	r2, r6
 80101f6:	d109      	bne.n	801020c <__gethex+0x388>
 80101f8:	1171      	asrs	r1, r6, #5
 80101fa:	2201      	movs	r2, #1
 80101fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010200:	f006 061f 	and.w	r6, r6, #31
 8010204:	fa02 f606 	lsl.w	r6, r2, r6
 8010208:	421e      	tst	r6, r3
 801020a:	d13a      	bne.n	8010282 <__gethex+0x3fe>
 801020c:	f045 0520 	orr.w	r5, r5, #32
 8010210:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010212:	601c      	str	r4, [r3, #0]
 8010214:	9b02      	ldr	r3, [sp, #8]
 8010216:	601f      	str	r7, [r3, #0]
 8010218:	e6b0      	b.n	800ff7c <__gethex+0xf8>
 801021a:	4299      	cmp	r1, r3
 801021c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010220:	d8d9      	bhi.n	80101d6 <__gethex+0x352>
 8010222:	68a3      	ldr	r3, [r4, #8]
 8010224:	459b      	cmp	fp, r3
 8010226:	db17      	blt.n	8010258 <__gethex+0x3d4>
 8010228:	6861      	ldr	r1, [r4, #4]
 801022a:	9801      	ldr	r0, [sp, #4]
 801022c:	3101      	adds	r1, #1
 801022e:	f7fe f80f 	bl	800e250 <_Balloc>
 8010232:	4681      	mov	r9, r0
 8010234:	b918      	cbnz	r0, 801023e <__gethex+0x3ba>
 8010236:	4b1a      	ldr	r3, [pc, #104]	@ (80102a0 <__gethex+0x41c>)
 8010238:	4602      	mov	r2, r0
 801023a:	2184      	movs	r1, #132	@ 0x84
 801023c:	e6c5      	b.n	800ffca <__gethex+0x146>
 801023e:	6922      	ldr	r2, [r4, #16]
 8010240:	3202      	adds	r2, #2
 8010242:	f104 010c 	add.w	r1, r4, #12
 8010246:	0092      	lsls	r2, r2, #2
 8010248:	300c      	adds	r0, #12
 801024a:	f7fd f89e 	bl	800d38a <memcpy>
 801024e:	4621      	mov	r1, r4
 8010250:	9801      	ldr	r0, [sp, #4]
 8010252:	f7fe f83d 	bl	800e2d0 <_Bfree>
 8010256:	464c      	mov	r4, r9
 8010258:	6923      	ldr	r3, [r4, #16]
 801025a:	1c5a      	adds	r2, r3, #1
 801025c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010260:	6122      	str	r2, [r4, #16]
 8010262:	2201      	movs	r2, #1
 8010264:	615a      	str	r2, [r3, #20]
 8010266:	e7be      	b.n	80101e6 <__gethex+0x362>
 8010268:	6922      	ldr	r2, [r4, #16]
 801026a:	455a      	cmp	r2, fp
 801026c:	dd0b      	ble.n	8010286 <__gethex+0x402>
 801026e:	2101      	movs	r1, #1
 8010270:	4620      	mov	r0, r4
 8010272:	f7ff fd9f 	bl	800fdb4 <rshift>
 8010276:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801027a:	3701      	adds	r7, #1
 801027c:	42bb      	cmp	r3, r7
 801027e:	f6ff aee0 	blt.w	8010042 <__gethex+0x1be>
 8010282:	2501      	movs	r5, #1
 8010284:	e7c2      	b.n	801020c <__gethex+0x388>
 8010286:	f016 061f 	ands.w	r6, r6, #31
 801028a:	d0fa      	beq.n	8010282 <__gethex+0x3fe>
 801028c:	4453      	add	r3, sl
 801028e:	f1c6 0620 	rsb	r6, r6, #32
 8010292:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010296:	f7fe f8cd 	bl	800e434 <__hi0bits>
 801029a:	42b0      	cmp	r0, r6
 801029c:	dbe7      	blt.n	801026e <__gethex+0x3ea>
 801029e:	e7f0      	b.n	8010282 <__gethex+0x3fe>
 80102a0:	08010f6d 	.word	0x08010f6d

080102a4 <L_shift>:
 80102a4:	f1c2 0208 	rsb	r2, r2, #8
 80102a8:	0092      	lsls	r2, r2, #2
 80102aa:	b570      	push	{r4, r5, r6, lr}
 80102ac:	f1c2 0620 	rsb	r6, r2, #32
 80102b0:	6843      	ldr	r3, [r0, #4]
 80102b2:	6804      	ldr	r4, [r0, #0]
 80102b4:	fa03 f506 	lsl.w	r5, r3, r6
 80102b8:	432c      	orrs	r4, r5
 80102ba:	40d3      	lsrs	r3, r2
 80102bc:	6004      	str	r4, [r0, #0]
 80102be:	f840 3f04 	str.w	r3, [r0, #4]!
 80102c2:	4288      	cmp	r0, r1
 80102c4:	d3f4      	bcc.n	80102b0 <L_shift+0xc>
 80102c6:	bd70      	pop	{r4, r5, r6, pc}

080102c8 <__match>:
 80102c8:	b530      	push	{r4, r5, lr}
 80102ca:	6803      	ldr	r3, [r0, #0]
 80102cc:	3301      	adds	r3, #1
 80102ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102d2:	b914      	cbnz	r4, 80102da <__match+0x12>
 80102d4:	6003      	str	r3, [r0, #0]
 80102d6:	2001      	movs	r0, #1
 80102d8:	bd30      	pop	{r4, r5, pc}
 80102da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102de:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80102e2:	2d19      	cmp	r5, #25
 80102e4:	bf98      	it	ls
 80102e6:	3220      	addls	r2, #32
 80102e8:	42a2      	cmp	r2, r4
 80102ea:	d0f0      	beq.n	80102ce <__match+0x6>
 80102ec:	2000      	movs	r0, #0
 80102ee:	e7f3      	b.n	80102d8 <__match+0x10>

080102f0 <__hexnan>:
 80102f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f4:	680b      	ldr	r3, [r1, #0]
 80102f6:	6801      	ldr	r1, [r0, #0]
 80102f8:	115e      	asrs	r6, r3, #5
 80102fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80102fe:	f013 031f 	ands.w	r3, r3, #31
 8010302:	b087      	sub	sp, #28
 8010304:	bf18      	it	ne
 8010306:	3604      	addne	r6, #4
 8010308:	2500      	movs	r5, #0
 801030a:	1f37      	subs	r7, r6, #4
 801030c:	4682      	mov	sl, r0
 801030e:	4690      	mov	r8, r2
 8010310:	9301      	str	r3, [sp, #4]
 8010312:	f846 5c04 	str.w	r5, [r6, #-4]
 8010316:	46b9      	mov	r9, r7
 8010318:	463c      	mov	r4, r7
 801031a:	9502      	str	r5, [sp, #8]
 801031c:	46ab      	mov	fp, r5
 801031e:	784a      	ldrb	r2, [r1, #1]
 8010320:	1c4b      	adds	r3, r1, #1
 8010322:	9303      	str	r3, [sp, #12]
 8010324:	b342      	cbz	r2, 8010378 <__hexnan+0x88>
 8010326:	4610      	mov	r0, r2
 8010328:	9105      	str	r1, [sp, #20]
 801032a:	9204      	str	r2, [sp, #16]
 801032c:	f7ff fd94 	bl	800fe58 <__hexdig_fun>
 8010330:	2800      	cmp	r0, #0
 8010332:	d151      	bne.n	80103d8 <__hexnan+0xe8>
 8010334:	9a04      	ldr	r2, [sp, #16]
 8010336:	9905      	ldr	r1, [sp, #20]
 8010338:	2a20      	cmp	r2, #32
 801033a:	d818      	bhi.n	801036e <__hexnan+0x7e>
 801033c:	9b02      	ldr	r3, [sp, #8]
 801033e:	459b      	cmp	fp, r3
 8010340:	dd13      	ble.n	801036a <__hexnan+0x7a>
 8010342:	454c      	cmp	r4, r9
 8010344:	d206      	bcs.n	8010354 <__hexnan+0x64>
 8010346:	2d07      	cmp	r5, #7
 8010348:	dc04      	bgt.n	8010354 <__hexnan+0x64>
 801034a:	462a      	mov	r2, r5
 801034c:	4649      	mov	r1, r9
 801034e:	4620      	mov	r0, r4
 8010350:	f7ff ffa8 	bl	80102a4 <L_shift>
 8010354:	4544      	cmp	r4, r8
 8010356:	d952      	bls.n	80103fe <__hexnan+0x10e>
 8010358:	2300      	movs	r3, #0
 801035a:	f1a4 0904 	sub.w	r9, r4, #4
 801035e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010362:	f8cd b008 	str.w	fp, [sp, #8]
 8010366:	464c      	mov	r4, r9
 8010368:	461d      	mov	r5, r3
 801036a:	9903      	ldr	r1, [sp, #12]
 801036c:	e7d7      	b.n	801031e <__hexnan+0x2e>
 801036e:	2a29      	cmp	r2, #41	@ 0x29
 8010370:	d157      	bne.n	8010422 <__hexnan+0x132>
 8010372:	3102      	adds	r1, #2
 8010374:	f8ca 1000 	str.w	r1, [sl]
 8010378:	f1bb 0f00 	cmp.w	fp, #0
 801037c:	d051      	beq.n	8010422 <__hexnan+0x132>
 801037e:	454c      	cmp	r4, r9
 8010380:	d206      	bcs.n	8010390 <__hexnan+0xa0>
 8010382:	2d07      	cmp	r5, #7
 8010384:	dc04      	bgt.n	8010390 <__hexnan+0xa0>
 8010386:	462a      	mov	r2, r5
 8010388:	4649      	mov	r1, r9
 801038a:	4620      	mov	r0, r4
 801038c:	f7ff ff8a 	bl	80102a4 <L_shift>
 8010390:	4544      	cmp	r4, r8
 8010392:	d936      	bls.n	8010402 <__hexnan+0x112>
 8010394:	f1a8 0204 	sub.w	r2, r8, #4
 8010398:	4623      	mov	r3, r4
 801039a:	f853 1b04 	ldr.w	r1, [r3], #4
 801039e:	f842 1f04 	str.w	r1, [r2, #4]!
 80103a2:	429f      	cmp	r7, r3
 80103a4:	d2f9      	bcs.n	801039a <__hexnan+0xaa>
 80103a6:	1b3b      	subs	r3, r7, r4
 80103a8:	f023 0303 	bic.w	r3, r3, #3
 80103ac:	3304      	adds	r3, #4
 80103ae:	3401      	adds	r4, #1
 80103b0:	3e03      	subs	r6, #3
 80103b2:	42b4      	cmp	r4, r6
 80103b4:	bf88      	it	hi
 80103b6:	2304      	movhi	r3, #4
 80103b8:	4443      	add	r3, r8
 80103ba:	2200      	movs	r2, #0
 80103bc:	f843 2b04 	str.w	r2, [r3], #4
 80103c0:	429f      	cmp	r7, r3
 80103c2:	d2fb      	bcs.n	80103bc <__hexnan+0xcc>
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	b91b      	cbnz	r3, 80103d0 <__hexnan+0xe0>
 80103c8:	4547      	cmp	r7, r8
 80103ca:	d128      	bne.n	801041e <__hexnan+0x12e>
 80103cc:	2301      	movs	r3, #1
 80103ce:	603b      	str	r3, [r7, #0]
 80103d0:	2005      	movs	r0, #5
 80103d2:	b007      	add	sp, #28
 80103d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103d8:	3501      	adds	r5, #1
 80103da:	2d08      	cmp	r5, #8
 80103dc:	f10b 0b01 	add.w	fp, fp, #1
 80103e0:	dd06      	ble.n	80103f0 <__hexnan+0x100>
 80103e2:	4544      	cmp	r4, r8
 80103e4:	d9c1      	bls.n	801036a <__hexnan+0x7a>
 80103e6:	2300      	movs	r3, #0
 80103e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80103ec:	2501      	movs	r5, #1
 80103ee:	3c04      	subs	r4, #4
 80103f0:	6822      	ldr	r2, [r4, #0]
 80103f2:	f000 000f 	and.w	r0, r0, #15
 80103f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80103fa:	6020      	str	r0, [r4, #0]
 80103fc:	e7b5      	b.n	801036a <__hexnan+0x7a>
 80103fe:	2508      	movs	r5, #8
 8010400:	e7b3      	b.n	801036a <__hexnan+0x7a>
 8010402:	9b01      	ldr	r3, [sp, #4]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d0dd      	beq.n	80103c4 <__hexnan+0xd4>
 8010408:	f1c3 0320 	rsb	r3, r3, #32
 801040c:	f04f 32ff 	mov.w	r2, #4294967295
 8010410:	40da      	lsrs	r2, r3
 8010412:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010416:	4013      	ands	r3, r2
 8010418:	f846 3c04 	str.w	r3, [r6, #-4]
 801041c:	e7d2      	b.n	80103c4 <__hexnan+0xd4>
 801041e:	3f04      	subs	r7, #4
 8010420:	e7d0      	b.n	80103c4 <__hexnan+0xd4>
 8010422:	2004      	movs	r0, #4
 8010424:	e7d5      	b.n	80103d2 <__hexnan+0xe2>

08010426 <__ascii_mbtowc>:
 8010426:	b082      	sub	sp, #8
 8010428:	b901      	cbnz	r1, 801042c <__ascii_mbtowc+0x6>
 801042a:	a901      	add	r1, sp, #4
 801042c:	b142      	cbz	r2, 8010440 <__ascii_mbtowc+0x1a>
 801042e:	b14b      	cbz	r3, 8010444 <__ascii_mbtowc+0x1e>
 8010430:	7813      	ldrb	r3, [r2, #0]
 8010432:	600b      	str	r3, [r1, #0]
 8010434:	7812      	ldrb	r2, [r2, #0]
 8010436:	1e10      	subs	r0, r2, #0
 8010438:	bf18      	it	ne
 801043a:	2001      	movne	r0, #1
 801043c:	b002      	add	sp, #8
 801043e:	4770      	bx	lr
 8010440:	4610      	mov	r0, r2
 8010442:	e7fb      	b.n	801043c <__ascii_mbtowc+0x16>
 8010444:	f06f 0001 	mvn.w	r0, #1
 8010448:	e7f8      	b.n	801043c <__ascii_mbtowc+0x16>

0801044a <_realloc_r>:
 801044a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801044e:	4680      	mov	r8, r0
 8010450:	4615      	mov	r5, r2
 8010452:	460c      	mov	r4, r1
 8010454:	b921      	cbnz	r1, 8010460 <_realloc_r+0x16>
 8010456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801045a:	4611      	mov	r1, r2
 801045c:	f7fd be6c 	b.w	800e138 <_malloc_r>
 8010460:	b92a      	cbnz	r2, 801046e <_realloc_r+0x24>
 8010462:	f7fd fdf5 	bl	800e050 <_free_r>
 8010466:	2400      	movs	r4, #0
 8010468:	4620      	mov	r0, r4
 801046a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801046e:	f000 f840 	bl	80104f2 <_malloc_usable_size_r>
 8010472:	4285      	cmp	r5, r0
 8010474:	4606      	mov	r6, r0
 8010476:	d802      	bhi.n	801047e <_realloc_r+0x34>
 8010478:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801047c:	d8f4      	bhi.n	8010468 <_realloc_r+0x1e>
 801047e:	4629      	mov	r1, r5
 8010480:	4640      	mov	r0, r8
 8010482:	f7fd fe59 	bl	800e138 <_malloc_r>
 8010486:	4607      	mov	r7, r0
 8010488:	2800      	cmp	r0, #0
 801048a:	d0ec      	beq.n	8010466 <_realloc_r+0x1c>
 801048c:	42b5      	cmp	r5, r6
 801048e:	462a      	mov	r2, r5
 8010490:	4621      	mov	r1, r4
 8010492:	bf28      	it	cs
 8010494:	4632      	movcs	r2, r6
 8010496:	f7fc ff78 	bl	800d38a <memcpy>
 801049a:	4621      	mov	r1, r4
 801049c:	4640      	mov	r0, r8
 801049e:	f7fd fdd7 	bl	800e050 <_free_r>
 80104a2:	463c      	mov	r4, r7
 80104a4:	e7e0      	b.n	8010468 <_realloc_r+0x1e>

080104a6 <__ascii_wctomb>:
 80104a6:	4603      	mov	r3, r0
 80104a8:	4608      	mov	r0, r1
 80104aa:	b141      	cbz	r1, 80104be <__ascii_wctomb+0x18>
 80104ac:	2aff      	cmp	r2, #255	@ 0xff
 80104ae:	d904      	bls.n	80104ba <__ascii_wctomb+0x14>
 80104b0:	228a      	movs	r2, #138	@ 0x8a
 80104b2:	601a      	str	r2, [r3, #0]
 80104b4:	f04f 30ff 	mov.w	r0, #4294967295
 80104b8:	4770      	bx	lr
 80104ba:	700a      	strb	r2, [r1, #0]
 80104bc:	2001      	movs	r0, #1
 80104be:	4770      	bx	lr

080104c0 <fiprintf>:
 80104c0:	b40e      	push	{r1, r2, r3}
 80104c2:	b503      	push	{r0, r1, lr}
 80104c4:	4601      	mov	r1, r0
 80104c6:	ab03      	add	r3, sp, #12
 80104c8:	4805      	ldr	r0, [pc, #20]	@ (80104e0 <fiprintf+0x20>)
 80104ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80104ce:	6800      	ldr	r0, [r0, #0]
 80104d0:	9301      	str	r3, [sp, #4]
 80104d2:	f000 f83f 	bl	8010554 <_vfiprintf_r>
 80104d6:	b002      	add	sp, #8
 80104d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80104dc:	b003      	add	sp, #12
 80104de:	4770      	bx	lr
 80104e0:	20000040 	.word	0x20000040

080104e4 <abort>:
 80104e4:	b508      	push	{r3, lr}
 80104e6:	2006      	movs	r0, #6
 80104e8:	f000 fa08 	bl	80108fc <raise>
 80104ec:	2001      	movs	r0, #1
 80104ee:	f7f2 fc03 	bl	8002cf8 <_exit>

080104f2 <_malloc_usable_size_r>:
 80104f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104f6:	1f18      	subs	r0, r3, #4
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	bfbc      	itt	lt
 80104fc:	580b      	ldrlt	r3, [r1, r0]
 80104fe:	18c0      	addlt	r0, r0, r3
 8010500:	4770      	bx	lr

08010502 <__sfputc_r>:
 8010502:	6893      	ldr	r3, [r2, #8]
 8010504:	3b01      	subs	r3, #1
 8010506:	2b00      	cmp	r3, #0
 8010508:	b410      	push	{r4}
 801050a:	6093      	str	r3, [r2, #8]
 801050c:	da08      	bge.n	8010520 <__sfputc_r+0x1e>
 801050e:	6994      	ldr	r4, [r2, #24]
 8010510:	42a3      	cmp	r3, r4
 8010512:	db01      	blt.n	8010518 <__sfputc_r+0x16>
 8010514:	290a      	cmp	r1, #10
 8010516:	d103      	bne.n	8010520 <__sfputc_r+0x1e>
 8010518:	f85d 4b04 	ldr.w	r4, [sp], #4
 801051c:	f000 b932 	b.w	8010784 <__swbuf_r>
 8010520:	6813      	ldr	r3, [r2, #0]
 8010522:	1c58      	adds	r0, r3, #1
 8010524:	6010      	str	r0, [r2, #0]
 8010526:	7019      	strb	r1, [r3, #0]
 8010528:	4608      	mov	r0, r1
 801052a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801052e:	4770      	bx	lr

08010530 <__sfputs_r>:
 8010530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010532:	4606      	mov	r6, r0
 8010534:	460f      	mov	r7, r1
 8010536:	4614      	mov	r4, r2
 8010538:	18d5      	adds	r5, r2, r3
 801053a:	42ac      	cmp	r4, r5
 801053c:	d101      	bne.n	8010542 <__sfputs_r+0x12>
 801053e:	2000      	movs	r0, #0
 8010540:	e007      	b.n	8010552 <__sfputs_r+0x22>
 8010542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010546:	463a      	mov	r2, r7
 8010548:	4630      	mov	r0, r6
 801054a:	f7ff ffda 	bl	8010502 <__sfputc_r>
 801054e:	1c43      	adds	r3, r0, #1
 8010550:	d1f3      	bne.n	801053a <__sfputs_r+0xa>
 8010552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010554 <_vfiprintf_r>:
 8010554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010558:	460d      	mov	r5, r1
 801055a:	b09d      	sub	sp, #116	@ 0x74
 801055c:	4614      	mov	r4, r2
 801055e:	4698      	mov	r8, r3
 8010560:	4606      	mov	r6, r0
 8010562:	b118      	cbz	r0, 801056c <_vfiprintf_r+0x18>
 8010564:	6a03      	ldr	r3, [r0, #32]
 8010566:	b90b      	cbnz	r3, 801056c <_vfiprintf_r+0x18>
 8010568:	f7fc fdf6 	bl	800d158 <__sinit>
 801056c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801056e:	07d9      	lsls	r1, r3, #31
 8010570:	d405      	bmi.n	801057e <_vfiprintf_r+0x2a>
 8010572:	89ab      	ldrh	r3, [r5, #12]
 8010574:	059a      	lsls	r2, r3, #22
 8010576:	d402      	bmi.n	801057e <_vfiprintf_r+0x2a>
 8010578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801057a:	f7fc ff04 	bl	800d386 <__retarget_lock_acquire_recursive>
 801057e:	89ab      	ldrh	r3, [r5, #12]
 8010580:	071b      	lsls	r3, r3, #28
 8010582:	d501      	bpl.n	8010588 <_vfiprintf_r+0x34>
 8010584:	692b      	ldr	r3, [r5, #16]
 8010586:	b99b      	cbnz	r3, 80105b0 <_vfiprintf_r+0x5c>
 8010588:	4629      	mov	r1, r5
 801058a:	4630      	mov	r0, r6
 801058c:	f000 f938 	bl	8010800 <__swsetup_r>
 8010590:	b170      	cbz	r0, 80105b0 <_vfiprintf_r+0x5c>
 8010592:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010594:	07dc      	lsls	r4, r3, #31
 8010596:	d504      	bpl.n	80105a2 <_vfiprintf_r+0x4e>
 8010598:	f04f 30ff 	mov.w	r0, #4294967295
 801059c:	b01d      	add	sp, #116	@ 0x74
 801059e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a2:	89ab      	ldrh	r3, [r5, #12]
 80105a4:	0598      	lsls	r0, r3, #22
 80105a6:	d4f7      	bmi.n	8010598 <_vfiprintf_r+0x44>
 80105a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105aa:	f7fc feed 	bl	800d388 <__retarget_lock_release_recursive>
 80105ae:	e7f3      	b.n	8010598 <_vfiprintf_r+0x44>
 80105b0:	2300      	movs	r3, #0
 80105b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80105b4:	2320      	movs	r3, #32
 80105b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80105ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80105be:	2330      	movs	r3, #48	@ 0x30
 80105c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010770 <_vfiprintf_r+0x21c>
 80105c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80105c8:	f04f 0901 	mov.w	r9, #1
 80105cc:	4623      	mov	r3, r4
 80105ce:	469a      	mov	sl, r3
 80105d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105d4:	b10a      	cbz	r2, 80105da <_vfiprintf_r+0x86>
 80105d6:	2a25      	cmp	r2, #37	@ 0x25
 80105d8:	d1f9      	bne.n	80105ce <_vfiprintf_r+0x7a>
 80105da:	ebba 0b04 	subs.w	fp, sl, r4
 80105de:	d00b      	beq.n	80105f8 <_vfiprintf_r+0xa4>
 80105e0:	465b      	mov	r3, fp
 80105e2:	4622      	mov	r2, r4
 80105e4:	4629      	mov	r1, r5
 80105e6:	4630      	mov	r0, r6
 80105e8:	f7ff ffa2 	bl	8010530 <__sfputs_r>
 80105ec:	3001      	adds	r0, #1
 80105ee:	f000 80a7 	beq.w	8010740 <_vfiprintf_r+0x1ec>
 80105f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105f4:	445a      	add	r2, fp
 80105f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80105f8:	f89a 3000 	ldrb.w	r3, [sl]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	f000 809f 	beq.w	8010740 <_vfiprintf_r+0x1ec>
 8010602:	2300      	movs	r3, #0
 8010604:	f04f 32ff 	mov.w	r2, #4294967295
 8010608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801060c:	f10a 0a01 	add.w	sl, sl, #1
 8010610:	9304      	str	r3, [sp, #16]
 8010612:	9307      	str	r3, [sp, #28]
 8010614:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010618:	931a      	str	r3, [sp, #104]	@ 0x68
 801061a:	4654      	mov	r4, sl
 801061c:	2205      	movs	r2, #5
 801061e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010622:	4853      	ldr	r0, [pc, #332]	@ (8010770 <_vfiprintf_r+0x21c>)
 8010624:	f7ef fddc 	bl	80001e0 <memchr>
 8010628:	9a04      	ldr	r2, [sp, #16]
 801062a:	b9d8      	cbnz	r0, 8010664 <_vfiprintf_r+0x110>
 801062c:	06d1      	lsls	r1, r2, #27
 801062e:	bf44      	itt	mi
 8010630:	2320      	movmi	r3, #32
 8010632:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010636:	0713      	lsls	r3, r2, #28
 8010638:	bf44      	itt	mi
 801063a:	232b      	movmi	r3, #43	@ 0x2b
 801063c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010640:	f89a 3000 	ldrb.w	r3, [sl]
 8010644:	2b2a      	cmp	r3, #42	@ 0x2a
 8010646:	d015      	beq.n	8010674 <_vfiprintf_r+0x120>
 8010648:	9a07      	ldr	r2, [sp, #28]
 801064a:	4654      	mov	r4, sl
 801064c:	2000      	movs	r0, #0
 801064e:	f04f 0c0a 	mov.w	ip, #10
 8010652:	4621      	mov	r1, r4
 8010654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010658:	3b30      	subs	r3, #48	@ 0x30
 801065a:	2b09      	cmp	r3, #9
 801065c:	d94b      	bls.n	80106f6 <_vfiprintf_r+0x1a2>
 801065e:	b1b0      	cbz	r0, 801068e <_vfiprintf_r+0x13a>
 8010660:	9207      	str	r2, [sp, #28]
 8010662:	e014      	b.n	801068e <_vfiprintf_r+0x13a>
 8010664:	eba0 0308 	sub.w	r3, r0, r8
 8010668:	fa09 f303 	lsl.w	r3, r9, r3
 801066c:	4313      	orrs	r3, r2
 801066e:	9304      	str	r3, [sp, #16]
 8010670:	46a2      	mov	sl, r4
 8010672:	e7d2      	b.n	801061a <_vfiprintf_r+0xc6>
 8010674:	9b03      	ldr	r3, [sp, #12]
 8010676:	1d19      	adds	r1, r3, #4
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	9103      	str	r1, [sp, #12]
 801067c:	2b00      	cmp	r3, #0
 801067e:	bfbb      	ittet	lt
 8010680:	425b      	neglt	r3, r3
 8010682:	f042 0202 	orrlt.w	r2, r2, #2
 8010686:	9307      	strge	r3, [sp, #28]
 8010688:	9307      	strlt	r3, [sp, #28]
 801068a:	bfb8      	it	lt
 801068c:	9204      	strlt	r2, [sp, #16]
 801068e:	7823      	ldrb	r3, [r4, #0]
 8010690:	2b2e      	cmp	r3, #46	@ 0x2e
 8010692:	d10a      	bne.n	80106aa <_vfiprintf_r+0x156>
 8010694:	7863      	ldrb	r3, [r4, #1]
 8010696:	2b2a      	cmp	r3, #42	@ 0x2a
 8010698:	d132      	bne.n	8010700 <_vfiprintf_r+0x1ac>
 801069a:	9b03      	ldr	r3, [sp, #12]
 801069c:	1d1a      	adds	r2, r3, #4
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	9203      	str	r2, [sp, #12]
 80106a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80106a6:	3402      	adds	r4, #2
 80106a8:	9305      	str	r3, [sp, #20]
 80106aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010780 <_vfiprintf_r+0x22c>
 80106ae:	7821      	ldrb	r1, [r4, #0]
 80106b0:	2203      	movs	r2, #3
 80106b2:	4650      	mov	r0, sl
 80106b4:	f7ef fd94 	bl	80001e0 <memchr>
 80106b8:	b138      	cbz	r0, 80106ca <_vfiprintf_r+0x176>
 80106ba:	9b04      	ldr	r3, [sp, #16]
 80106bc:	eba0 000a 	sub.w	r0, r0, sl
 80106c0:	2240      	movs	r2, #64	@ 0x40
 80106c2:	4082      	lsls	r2, r0
 80106c4:	4313      	orrs	r3, r2
 80106c6:	3401      	adds	r4, #1
 80106c8:	9304      	str	r3, [sp, #16]
 80106ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106ce:	4829      	ldr	r0, [pc, #164]	@ (8010774 <_vfiprintf_r+0x220>)
 80106d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80106d4:	2206      	movs	r2, #6
 80106d6:	f7ef fd83 	bl	80001e0 <memchr>
 80106da:	2800      	cmp	r0, #0
 80106dc:	d03f      	beq.n	801075e <_vfiprintf_r+0x20a>
 80106de:	4b26      	ldr	r3, [pc, #152]	@ (8010778 <_vfiprintf_r+0x224>)
 80106e0:	bb1b      	cbnz	r3, 801072a <_vfiprintf_r+0x1d6>
 80106e2:	9b03      	ldr	r3, [sp, #12]
 80106e4:	3307      	adds	r3, #7
 80106e6:	f023 0307 	bic.w	r3, r3, #7
 80106ea:	3308      	adds	r3, #8
 80106ec:	9303      	str	r3, [sp, #12]
 80106ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106f0:	443b      	add	r3, r7
 80106f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80106f4:	e76a      	b.n	80105cc <_vfiprintf_r+0x78>
 80106f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80106fa:	460c      	mov	r4, r1
 80106fc:	2001      	movs	r0, #1
 80106fe:	e7a8      	b.n	8010652 <_vfiprintf_r+0xfe>
 8010700:	2300      	movs	r3, #0
 8010702:	3401      	adds	r4, #1
 8010704:	9305      	str	r3, [sp, #20]
 8010706:	4619      	mov	r1, r3
 8010708:	f04f 0c0a 	mov.w	ip, #10
 801070c:	4620      	mov	r0, r4
 801070e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010712:	3a30      	subs	r2, #48	@ 0x30
 8010714:	2a09      	cmp	r2, #9
 8010716:	d903      	bls.n	8010720 <_vfiprintf_r+0x1cc>
 8010718:	2b00      	cmp	r3, #0
 801071a:	d0c6      	beq.n	80106aa <_vfiprintf_r+0x156>
 801071c:	9105      	str	r1, [sp, #20]
 801071e:	e7c4      	b.n	80106aa <_vfiprintf_r+0x156>
 8010720:	fb0c 2101 	mla	r1, ip, r1, r2
 8010724:	4604      	mov	r4, r0
 8010726:	2301      	movs	r3, #1
 8010728:	e7f0      	b.n	801070c <_vfiprintf_r+0x1b8>
 801072a:	ab03      	add	r3, sp, #12
 801072c:	9300      	str	r3, [sp, #0]
 801072e:	462a      	mov	r2, r5
 8010730:	4b12      	ldr	r3, [pc, #72]	@ (801077c <_vfiprintf_r+0x228>)
 8010732:	a904      	add	r1, sp, #16
 8010734:	4630      	mov	r0, r6
 8010736:	f7fb feb7 	bl	800c4a8 <_printf_float>
 801073a:	4607      	mov	r7, r0
 801073c:	1c78      	adds	r0, r7, #1
 801073e:	d1d6      	bne.n	80106ee <_vfiprintf_r+0x19a>
 8010740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010742:	07d9      	lsls	r1, r3, #31
 8010744:	d405      	bmi.n	8010752 <_vfiprintf_r+0x1fe>
 8010746:	89ab      	ldrh	r3, [r5, #12]
 8010748:	059a      	lsls	r2, r3, #22
 801074a:	d402      	bmi.n	8010752 <_vfiprintf_r+0x1fe>
 801074c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801074e:	f7fc fe1b 	bl	800d388 <__retarget_lock_release_recursive>
 8010752:	89ab      	ldrh	r3, [r5, #12]
 8010754:	065b      	lsls	r3, r3, #25
 8010756:	f53f af1f 	bmi.w	8010598 <_vfiprintf_r+0x44>
 801075a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801075c:	e71e      	b.n	801059c <_vfiprintf_r+0x48>
 801075e:	ab03      	add	r3, sp, #12
 8010760:	9300      	str	r3, [sp, #0]
 8010762:	462a      	mov	r2, r5
 8010764:	4b05      	ldr	r3, [pc, #20]	@ (801077c <_vfiprintf_r+0x228>)
 8010766:	a904      	add	r1, sp, #16
 8010768:	4630      	mov	r0, r6
 801076a:	f7fc f935 	bl	800c9d8 <_printf_i>
 801076e:	e7e4      	b.n	801073a <_vfiprintf_r+0x1e6>
 8010770:	08011231 	.word	0x08011231
 8010774:	0801123b 	.word	0x0801123b
 8010778:	0800c4a9 	.word	0x0800c4a9
 801077c:	08010531 	.word	0x08010531
 8010780:	08011237 	.word	0x08011237

08010784 <__swbuf_r>:
 8010784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010786:	460e      	mov	r6, r1
 8010788:	4614      	mov	r4, r2
 801078a:	4605      	mov	r5, r0
 801078c:	b118      	cbz	r0, 8010796 <__swbuf_r+0x12>
 801078e:	6a03      	ldr	r3, [r0, #32]
 8010790:	b90b      	cbnz	r3, 8010796 <__swbuf_r+0x12>
 8010792:	f7fc fce1 	bl	800d158 <__sinit>
 8010796:	69a3      	ldr	r3, [r4, #24]
 8010798:	60a3      	str	r3, [r4, #8]
 801079a:	89a3      	ldrh	r3, [r4, #12]
 801079c:	071a      	lsls	r2, r3, #28
 801079e:	d501      	bpl.n	80107a4 <__swbuf_r+0x20>
 80107a0:	6923      	ldr	r3, [r4, #16]
 80107a2:	b943      	cbnz	r3, 80107b6 <__swbuf_r+0x32>
 80107a4:	4621      	mov	r1, r4
 80107a6:	4628      	mov	r0, r5
 80107a8:	f000 f82a 	bl	8010800 <__swsetup_r>
 80107ac:	b118      	cbz	r0, 80107b6 <__swbuf_r+0x32>
 80107ae:	f04f 37ff 	mov.w	r7, #4294967295
 80107b2:	4638      	mov	r0, r7
 80107b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107b6:	6823      	ldr	r3, [r4, #0]
 80107b8:	6922      	ldr	r2, [r4, #16]
 80107ba:	1a98      	subs	r0, r3, r2
 80107bc:	6963      	ldr	r3, [r4, #20]
 80107be:	b2f6      	uxtb	r6, r6
 80107c0:	4283      	cmp	r3, r0
 80107c2:	4637      	mov	r7, r6
 80107c4:	dc05      	bgt.n	80107d2 <__swbuf_r+0x4e>
 80107c6:	4621      	mov	r1, r4
 80107c8:	4628      	mov	r0, r5
 80107ca:	f7ff fa53 	bl	800fc74 <_fflush_r>
 80107ce:	2800      	cmp	r0, #0
 80107d0:	d1ed      	bne.n	80107ae <__swbuf_r+0x2a>
 80107d2:	68a3      	ldr	r3, [r4, #8]
 80107d4:	3b01      	subs	r3, #1
 80107d6:	60a3      	str	r3, [r4, #8]
 80107d8:	6823      	ldr	r3, [r4, #0]
 80107da:	1c5a      	adds	r2, r3, #1
 80107dc:	6022      	str	r2, [r4, #0]
 80107de:	701e      	strb	r6, [r3, #0]
 80107e0:	6962      	ldr	r2, [r4, #20]
 80107e2:	1c43      	adds	r3, r0, #1
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d004      	beq.n	80107f2 <__swbuf_r+0x6e>
 80107e8:	89a3      	ldrh	r3, [r4, #12]
 80107ea:	07db      	lsls	r3, r3, #31
 80107ec:	d5e1      	bpl.n	80107b2 <__swbuf_r+0x2e>
 80107ee:	2e0a      	cmp	r6, #10
 80107f0:	d1df      	bne.n	80107b2 <__swbuf_r+0x2e>
 80107f2:	4621      	mov	r1, r4
 80107f4:	4628      	mov	r0, r5
 80107f6:	f7ff fa3d 	bl	800fc74 <_fflush_r>
 80107fa:	2800      	cmp	r0, #0
 80107fc:	d0d9      	beq.n	80107b2 <__swbuf_r+0x2e>
 80107fe:	e7d6      	b.n	80107ae <__swbuf_r+0x2a>

08010800 <__swsetup_r>:
 8010800:	b538      	push	{r3, r4, r5, lr}
 8010802:	4b29      	ldr	r3, [pc, #164]	@ (80108a8 <__swsetup_r+0xa8>)
 8010804:	4605      	mov	r5, r0
 8010806:	6818      	ldr	r0, [r3, #0]
 8010808:	460c      	mov	r4, r1
 801080a:	b118      	cbz	r0, 8010814 <__swsetup_r+0x14>
 801080c:	6a03      	ldr	r3, [r0, #32]
 801080e:	b90b      	cbnz	r3, 8010814 <__swsetup_r+0x14>
 8010810:	f7fc fca2 	bl	800d158 <__sinit>
 8010814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010818:	0719      	lsls	r1, r3, #28
 801081a:	d422      	bmi.n	8010862 <__swsetup_r+0x62>
 801081c:	06da      	lsls	r2, r3, #27
 801081e:	d407      	bmi.n	8010830 <__swsetup_r+0x30>
 8010820:	2209      	movs	r2, #9
 8010822:	602a      	str	r2, [r5, #0]
 8010824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010828:	81a3      	strh	r3, [r4, #12]
 801082a:	f04f 30ff 	mov.w	r0, #4294967295
 801082e:	e033      	b.n	8010898 <__swsetup_r+0x98>
 8010830:	0758      	lsls	r0, r3, #29
 8010832:	d512      	bpl.n	801085a <__swsetup_r+0x5a>
 8010834:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010836:	b141      	cbz	r1, 801084a <__swsetup_r+0x4a>
 8010838:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801083c:	4299      	cmp	r1, r3
 801083e:	d002      	beq.n	8010846 <__swsetup_r+0x46>
 8010840:	4628      	mov	r0, r5
 8010842:	f7fd fc05 	bl	800e050 <_free_r>
 8010846:	2300      	movs	r3, #0
 8010848:	6363      	str	r3, [r4, #52]	@ 0x34
 801084a:	89a3      	ldrh	r3, [r4, #12]
 801084c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010850:	81a3      	strh	r3, [r4, #12]
 8010852:	2300      	movs	r3, #0
 8010854:	6063      	str	r3, [r4, #4]
 8010856:	6923      	ldr	r3, [r4, #16]
 8010858:	6023      	str	r3, [r4, #0]
 801085a:	89a3      	ldrh	r3, [r4, #12]
 801085c:	f043 0308 	orr.w	r3, r3, #8
 8010860:	81a3      	strh	r3, [r4, #12]
 8010862:	6923      	ldr	r3, [r4, #16]
 8010864:	b94b      	cbnz	r3, 801087a <__swsetup_r+0x7a>
 8010866:	89a3      	ldrh	r3, [r4, #12]
 8010868:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801086c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010870:	d003      	beq.n	801087a <__swsetup_r+0x7a>
 8010872:	4621      	mov	r1, r4
 8010874:	4628      	mov	r0, r5
 8010876:	f000 f883 	bl	8010980 <__smakebuf_r>
 801087a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801087e:	f013 0201 	ands.w	r2, r3, #1
 8010882:	d00a      	beq.n	801089a <__swsetup_r+0x9a>
 8010884:	2200      	movs	r2, #0
 8010886:	60a2      	str	r2, [r4, #8]
 8010888:	6962      	ldr	r2, [r4, #20]
 801088a:	4252      	negs	r2, r2
 801088c:	61a2      	str	r2, [r4, #24]
 801088e:	6922      	ldr	r2, [r4, #16]
 8010890:	b942      	cbnz	r2, 80108a4 <__swsetup_r+0xa4>
 8010892:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010896:	d1c5      	bne.n	8010824 <__swsetup_r+0x24>
 8010898:	bd38      	pop	{r3, r4, r5, pc}
 801089a:	0799      	lsls	r1, r3, #30
 801089c:	bf58      	it	pl
 801089e:	6962      	ldrpl	r2, [r4, #20]
 80108a0:	60a2      	str	r2, [r4, #8]
 80108a2:	e7f4      	b.n	801088e <__swsetup_r+0x8e>
 80108a4:	2000      	movs	r0, #0
 80108a6:	e7f7      	b.n	8010898 <__swsetup_r+0x98>
 80108a8:	20000040 	.word	0x20000040

080108ac <_raise_r>:
 80108ac:	291f      	cmp	r1, #31
 80108ae:	b538      	push	{r3, r4, r5, lr}
 80108b0:	4605      	mov	r5, r0
 80108b2:	460c      	mov	r4, r1
 80108b4:	d904      	bls.n	80108c0 <_raise_r+0x14>
 80108b6:	2316      	movs	r3, #22
 80108b8:	6003      	str	r3, [r0, #0]
 80108ba:	f04f 30ff 	mov.w	r0, #4294967295
 80108be:	bd38      	pop	{r3, r4, r5, pc}
 80108c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80108c2:	b112      	cbz	r2, 80108ca <_raise_r+0x1e>
 80108c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80108c8:	b94b      	cbnz	r3, 80108de <_raise_r+0x32>
 80108ca:	4628      	mov	r0, r5
 80108cc:	f000 f830 	bl	8010930 <_getpid_r>
 80108d0:	4622      	mov	r2, r4
 80108d2:	4601      	mov	r1, r0
 80108d4:	4628      	mov	r0, r5
 80108d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108da:	f000 b817 	b.w	801090c <_kill_r>
 80108de:	2b01      	cmp	r3, #1
 80108e0:	d00a      	beq.n	80108f8 <_raise_r+0x4c>
 80108e2:	1c59      	adds	r1, r3, #1
 80108e4:	d103      	bne.n	80108ee <_raise_r+0x42>
 80108e6:	2316      	movs	r3, #22
 80108e8:	6003      	str	r3, [r0, #0]
 80108ea:	2001      	movs	r0, #1
 80108ec:	e7e7      	b.n	80108be <_raise_r+0x12>
 80108ee:	2100      	movs	r1, #0
 80108f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80108f4:	4620      	mov	r0, r4
 80108f6:	4798      	blx	r3
 80108f8:	2000      	movs	r0, #0
 80108fa:	e7e0      	b.n	80108be <_raise_r+0x12>

080108fc <raise>:
 80108fc:	4b02      	ldr	r3, [pc, #8]	@ (8010908 <raise+0xc>)
 80108fe:	4601      	mov	r1, r0
 8010900:	6818      	ldr	r0, [r3, #0]
 8010902:	f7ff bfd3 	b.w	80108ac <_raise_r>
 8010906:	bf00      	nop
 8010908:	20000040 	.word	0x20000040

0801090c <_kill_r>:
 801090c:	b538      	push	{r3, r4, r5, lr}
 801090e:	4d07      	ldr	r5, [pc, #28]	@ (801092c <_kill_r+0x20>)
 8010910:	2300      	movs	r3, #0
 8010912:	4604      	mov	r4, r0
 8010914:	4608      	mov	r0, r1
 8010916:	4611      	mov	r1, r2
 8010918:	602b      	str	r3, [r5, #0]
 801091a:	f7f2 f9dd 	bl	8002cd8 <_kill>
 801091e:	1c43      	adds	r3, r0, #1
 8010920:	d102      	bne.n	8010928 <_kill_r+0x1c>
 8010922:	682b      	ldr	r3, [r5, #0]
 8010924:	b103      	cbz	r3, 8010928 <_kill_r+0x1c>
 8010926:	6023      	str	r3, [r4, #0]
 8010928:	bd38      	pop	{r3, r4, r5, pc}
 801092a:	bf00      	nop
 801092c:	20004cf4 	.word	0x20004cf4

08010930 <_getpid_r>:
 8010930:	f7f2 b9ca 	b.w	8002cc8 <_getpid>

08010934 <__swhatbuf_r>:
 8010934:	b570      	push	{r4, r5, r6, lr}
 8010936:	460c      	mov	r4, r1
 8010938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801093c:	2900      	cmp	r1, #0
 801093e:	b096      	sub	sp, #88	@ 0x58
 8010940:	4615      	mov	r5, r2
 8010942:	461e      	mov	r6, r3
 8010944:	da0d      	bge.n	8010962 <__swhatbuf_r+0x2e>
 8010946:	89a3      	ldrh	r3, [r4, #12]
 8010948:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801094c:	f04f 0100 	mov.w	r1, #0
 8010950:	bf14      	ite	ne
 8010952:	2340      	movne	r3, #64	@ 0x40
 8010954:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010958:	2000      	movs	r0, #0
 801095a:	6031      	str	r1, [r6, #0]
 801095c:	602b      	str	r3, [r5, #0]
 801095e:	b016      	add	sp, #88	@ 0x58
 8010960:	bd70      	pop	{r4, r5, r6, pc}
 8010962:	466a      	mov	r2, sp
 8010964:	f000 f848 	bl	80109f8 <_fstat_r>
 8010968:	2800      	cmp	r0, #0
 801096a:	dbec      	blt.n	8010946 <__swhatbuf_r+0x12>
 801096c:	9901      	ldr	r1, [sp, #4]
 801096e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010972:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010976:	4259      	negs	r1, r3
 8010978:	4159      	adcs	r1, r3
 801097a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801097e:	e7eb      	b.n	8010958 <__swhatbuf_r+0x24>

08010980 <__smakebuf_r>:
 8010980:	898b      	ldrh	r3, [r1, #12]
 8010982:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010984:	079d      	lsls	r5, r3, #30
 8010986:	4606      	mov	r6, r0
 8010988:	460c      	mov	r4, r1
 801098a:	d507      	bpl.n	801099c <__smakebuf_r+0x1c>
 801098c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010990:	6023      	str	r3, [r4, #0]
 8010992:	6123      	str	r3, [r4, #16]
 8010994:	2301      	movs	r3, #1
 8010996:	6163      	str	r3, [r4, #20]
 8010998:	b003      	add	sp, #12
 801099a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801099c:	ab01      	add	r3, sp, #4
 801099e:	466a      	mov	r2, sp
 80109a0:	f7ff ffc8 	bl	8010934 <__swhatbuf_r>
 80109a4:	9f00      	ldr	r7, [sp, #0]
 80109a6:	4605      	mov	r5, r0
 80109a8:	4639      	mov	r1, r7
 80109aa:	4630      	mov	r0, r6
 80109ac:	f7fd fbc4 	bl	800e138 <_malloc_r>
 80109b0:	b948      	cbnz	r0, 80109c6 <__smakebuf_r+0x46>
 80109b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109b6:	059a      	lsls	r2, r3, #22
 80109b8:	d4ee      	bmi.n	8010998 <__smakebuf_r+0x18>
 80109ba:	f023 0303 	bic.w	r3, r3, #3
 80109be:	f043 0302 	orr.w	r3, r3, #2
 80109c2:	81a3      	strh	r3, [r4, #12]
 80109c4:	e7e2      	b.n	801098c <__smakebuf_r+0xc>
 80109c6:	89a3      	ldrh	r3, [r4, #12]
 80109c8:	6020      	str	r0, [r4, #0]
 80109ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109ce:	81a3      	strh	r3, [r4, #12]
 80109d0:	9b01      	ldr	r3, [sp, #4]
 80109d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80109d6:	b15b      	cbz	r3, 80109f0 <__smakebuf_r+0x70>
 80109d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109dc:	4630      	mov	r0, r6
 80109de:	f000 f81d 	bl	8010a1c <_isatty_r>
 80109e2:	b128      	cbz	r0, 80109f0 <__smakebuf_r+0x70>
 80109e4:	89a3      	ldrh	r3, [r4, #12]
 80109e6:	f023 0303 	bic.w	r3, r3, #3
 80109ea:	f043 0301 	orr.w	r3, r3, #1
 80109ee:	81a3      	strh	r3, [r4, #12]
 80109f0:	89a3      	ldrh	r3, [r4, #12]
 80109f2:	431d      	orrs	r5, r3
 80109f4:	81a5      	strh	r5, [r4, #12]
 80109f6:	e7cf      	b.n	8010998 <__smakebuf_r+0x18>

080109f8 <_fstat_r>:
 80109f8:	b538      	push	{r3, r4, r5, lr}
 80109fa:	4d07      	ldr	r5, [pc, #28]	@ (8010a18 <_fstat_r+0x20>)
 80109fc:	2300      	movs	r3, #0
 80109fe:	4604      	mov	r4, r0
 8010a00:	4608      	mov	r0, r1
 8010a02:	4611      	mov	r1, r2
 8010a04:	602b      	str	r3, [r5, #0]
 8010a06:	f7f2 f9c7 	bl	8002d98 <_fstat>
 8010a0a:	1c43      	adds	r3, r0, #1
 8010a0c:	d102      	bne.n	8010a14 <_fstat_r+0x1c>
 8010a0e:	682b      	ldr	r3, [r5, #0]
 8010a10:	b103      	cbz	r3, 8010a14 <_fstat_r+0x1c>
 8010a12:	6023      	str	r3, [r4, #0]
 8010a14:	bd38      	pop	{r3, r4, r5, pc}
 8010a16:	bf00      	nop
 8010a18:	20004cf4 	.word	0x20004cf4

08010a1c <_isatty_r>:
 8010a1c:	b538      	push	{r3, r4, r5, lr}
 8010a1e:	4d06      	ldr	r5, [pc, #24]	@ (8010a38 <_isatty_r+0x1c>)
 8010a20:	2300      	movs	r3, #0
 8010a22:	4604      	mov	r4, r0
 8010a24:	4608      	mov	r0, r1
 8010a26:	602b      	str	r3, [r5, #0]
 8010a28:	f7f2 f9c6 	bl	8002db8 <_isatty>
 8010a2c:	1c43      	adds	r3, r0, #1
 8010a2e:	d102      	bne.n	8010a36 <_isatty_r+0x1a>
 8010a30:	682b      	ldr	r3, [r5, #0]
 8010a32:	b103      	cbz	r3, 8010a36 <_isatty_r+0x1a>
 8010a34:	6023      	str	r3, [r4, #0]
 8010a36:	bd38      	pop	{r3, r4, r5, pc}
 8010a38:	20004cf4 	.word	0x20004cf4

08010a3c <_init>:
 8010a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a3e:	bf00      	nop
 8010a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a42:	bc08      	pop	{r3}
 8010a44:	469e      	mov	lr, r3
 8010a46:	4770      	bx	lr

08010a48 <_fini>:
 8010a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a4a:	bf00      	nop
 8010a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a4e:	bc08      	pop	{r3}
 8010a50:	469e      	mov	lr, r3
 8010a52:	4770      	bx	lr
